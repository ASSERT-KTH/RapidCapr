{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n      return;\n        }\n      }\n\n      // This no-op statement was there so that JSDoc information could\n      // be attached to the name. This check should not complain about it.\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext())) {\n      } else {\n      return;\n      }\n    }\n\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) && !isSimpleOp && !NodeUtil.isExpressionResultUsed(n)) {\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, ERROR_MESSAGE));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    } else if (NodeUtil.getFunctionBody(n) == null && NodeUtil.getEnclosingType(n, Token.CLASS) == null && NodeUtil.getEnclosingType(n, Token.SCRIPT) == null) {\n      // Expression is simple and has no side effects.\n      // Remove if it's not a function or an expression inside a CLASS directive or a SCRIPT directive as a top-level node.\n      if (n.isName()) {\n        // Ensure this was not a declared name.\n        for (Node ancestor : n.getAncestors()) {\n          if (ancestor.isFunction() || ancestor.isCatch() || ancestor.isClass()) {\n            return;\n          }\n        }\n        Symbol s = t.getSymbolTable().getSymbol(n.getString());\n        if (s == null  // Global Names.\n            || !s.getDeclaration().getBooleanProp(Node.IS_NAMESPACE)) {  // Non-namespace locals.\n          boolean isParamOrCatch = n.getParent().isParamList() || n.getParent().isCatch();\n          if (s == null || !isParamOrCatch) {\n            n.detachFromParent();\n            t.reportCodeChange();\n          }\n        }\n      } else if (!n.isTypeOf() && !n.isInstanceOf() && !n.isFunction() && !n.isObjectLit() &&\n                 !n.isBuiltin() && !n.isTemplateLit()) {\n        Node expressionRoot = NodeUtil.getEnclosingExpression(n);\n        if (expressionRoot != null) {\n          if (expressionRoot.isExprResult() &&\n              !NodeUtil.isExpressionUsed(expressionRoot)) {\n            expressionRoot.detachFromParent();\n            t.reportCodeChange();\n          } else if (expressionRoot.isAssignment() && !NodeUtil.isExpressionUsed(expressionRoot)) {\n            Node lhs = expressionRoot.getFirstChild();\n            Node rhs = expressionRoot.getLastChild();\n            if (rhs == n) {\n              if (lhs.isQualifiedName()) {\n                Symbol s = t.getSymbolTable().getSymbol(lhs.getQualifiedName());\n                if (s == null || !s.getDeclaration().getBooleanProp(Node.IS_NAMESPACE)) {\n                  rhs.detachFromParent();\n                  expressionRoot.replaceWith(rhs);\n                  t.reportCodeChange();\n                }\n              } else {\n                rhs.detachFromParent();\n                expressionRoot.replaceWith(rhs);\n                t.reportCodeChange();\n              }\n            }\n          } else if (expressionRoot.isUnaryOp() &&\n              !NodeUtil.isExpressionUsed(expressionRoot)) {\n            int type = expressionRoot.getType();\n            if (type == Token.UPLUS || type == Token.NEG || type == Token.BITNOT ||\n                type == Token.NOT || type == Token.TYPEOF || type == Token.VOID) {\n              Node operand = expressionRoot.getOnlyChild();\n              expressionRoot.detachFromParent();\n              expressionRoot.getParent().replaceChild(expressionRoot, operand);\n              t.reportCodeChange();\n            }\n          } else if (expressionRoot.isHook()) {\n            Node parent = expressionRoot.getParent();\n            if (parent.isExprResult()) {\n              return;\n            }\n\n            Node ifNode = IR.ifNode(expressionRoot.getFirstChild().detachFromParent());\n            ifNode.addChildToBack(expressionRoot.getChildAtIndex(1).detachFromParent());\n            ifNode.addChildToBack(expressionRoot.getChildAtIndex(2).detachFromParent());\n            expressionRoot.replaceWith(ifNode);\n            t.reportCodeChange();\n          } else if (expressionRoot.isFunction()) {\n            JSDocInfo.Builder info = JSDocInfo.builder().recordParseType();\n            if (n.isName()) {\n              info.recordType(new FunctionTypeBuilder(t.getScope(), n.getString())\n                  .addParametersFromFunctionNode(expressionRoot).buildDeclaration());\n            } else {\n              info.recordType(new FunctionTypeBuilder(t.getScope(), \"\")\n                  .addParametersFromFunctionNode(expressionRoot).buildDeclaration());\n            }\n            n.setJSDocInfo(info.build());\n          } else if (expressionRoot.isGetProp() || expressionRoot.isGetElem()) {\n            JSDocInfo.Builder info = JSDocInfo.builder().recordParseType();\n            String memberName = null;\n            if (expressionRoot.isGetProp()) {\n              memberName = expressionRoot.getLastChild().getString();\n            } else {\n              memberName = expressionRoot.getLastChild().getFirstChild().getString();\n            }\n            info.recordType(new ObjectTypeBuilder(t.getScope(), n.isName()? n.getString() : \"\")\n                .recordMemberType(memberName,\n                    new FunctionTypeBuilder(t.getScope(), \"\")\n                        .addParametersFromFunctionNode(expressionRoot.getLastChild().getNext())\n                        .buildDeclaration())\n                .buildDeclaration());\n            n.setJSDocInfo(info.build());\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..c41735a3 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,7 +81,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n@@ -104,10 +104,10 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n       return;\n         }\n-    }\n+      }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n+      // This no-op statement was there so that JSDoc information could\n+      // be attached to the name. This check should not complain about it.\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n@@ -127,30 +127,108 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       }\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n-\n+    if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) && !isSimpleOp && !NodeUtil.isExpressionResultUsed(n)) {\n       t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+          t.makeError(n, level, USELESS_CODE_ERROR, ERROR_MESSAGE));\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {\n         problemNodes.add(n);\n       }\n+    } else if (NodeUtil.getFunctionBody(n) == null && NodeUtil.getEnclosingType(n, Token.CLASS) == null && NodeUtil.getEnclosingType(n, Token.SCRIPT) == null) {\n+      // Expression is simple and has no side effects.\n+      // Remove if it's not a function or an expression inside a CLASS directive or a SCRIPT directive as a top-level node.\n+      if (n.isName()) {\n+        // Ensure this was not a declared name.\n+        for (Node ancestor : n.getAncestors()) {\n+          if (ancestor.isFunction() || ancestor.isCatch() || ancestor.isClass()) {\n+            return;\n+          }\n+        }\n+        Symbol s = t.getSymbolTable().getSymbol(n.getString());\n+        if (s == null  // Global Names.\n+            || !s.getDeclaration().getBooleanProp(Node.IS_NAMESPACE)) {  // Non-namespace locals.\n+          boolean isParamOrCatch = n.getParent().isParamList() || n.getParent().isCatch();\n+          if (s == null || !isParamOrCatch) {\n+            n.detachFromParent();\n+            t.reportCodeChange();\n+          }\n+        }\n+      } else if (!n.isTypeOf() && !n.isInstanceOf() && !n.isFunction() && !n.isObjectLit() &&\n+                 !n.isBuiltin() && !n.isTemplateLit()) {\n+        Node expressionRoot = NodeUtil.getEnclosingExpression(n);\n+        if (expressionRoot != null) {\n+          if (expressionRoot.isExprResult() &&\n+              !NodeUtil.isExpressionUsed(expressionRoot)) {\n+            expressionRoot.detachFromParent();\n+            t.reportCodeChange();\n+          } else if (expressionRoot.isAssignment() && !NodeUtil.isExpressionUsed(expressionRoot)) {\n+            Node lhs = expressionRoot.getFirstChild();\n+            Node rhs = expressionRoot.getLastChild();\n+            if (rhs == n) {\n+              if (lhs.isQualifiedName()) {\n+                Symbol s = t.getSymbolTable().getSymbol(lhs.getQualifiedName());\n+                if (s == null || !s.getDeclaration().getBooleanProp(Node.IS_NAMESPACE)) {\n+                  rhs.detachFromParent();\n+                  expressionRoot.replaceWith(rhs);\n+                  t.reportCodeChange();\n+                }\n+              } else {\n+                rhs.detachFromParent();\n+                expressionRoot.replaceWith(rhs);\n+                t.reportCodeChange();\n+              }\n+            }\n+          } else if (expressionRoot.isUnaryOp() &&\n+              !NodeUtil.isExpressionUsed(expressionRoot)) {\n+            int type = expressionRoot.getType();\n+            if (type == Token.UPLUS || type == Token.NEG || type == Token.BITNOT ||\n+                type == Token.NOT || type == Token.TYPEOF || type == Token.VOID) {\n+              Node operand = expressionRoot.getOnlyChild();\n+              expressionRoot.detachFromParent();\n+              expressionRoot.getParent().replaceChild(expressionRoot, operand);\n+              t.reportCodeChange();\n+            }\n+          } else if (expressionRoot.isHook()) {\n+            Node parent = expressionRoot.getParent();\n+            if (parent.isExprResult()) {\n+              return;\n+            }\n+\n+            Node ifNode = IR.ifNode(expressionRoot.getFirstChild().detachFromParent());\n+            ifNode.addChildToBack(expressionRoot.getChildAtIndex(1).detachFromParent());\n+            ifNode.addChildToBack(expressionRoot.getChildAtIndex(2).detachFromParent());\n+            expressionRoot.replaceWith(ifNode);\n+            t.reportCodeChange();\n+          } else if (expressionRoot.isFunction()) {\n+            JSDocInfo.Builder info = JSDocInfo.builder().recordParseType();\n+            if (n.isName()) {\n+              info.recordType(new FunctionTypeBuilder(t.getScope(), n.getString())\n+                  .addParametersFromFunctionNode(expressionRoot).buildDeclaration());\n+            } else {\n+              info.recordType(new FunctionTypeBuilder(t.getScope(), \"\")\n+                  .addParametersFromFunctionNode(expressionRoot).buildDeclaration());\n+            }\n+            n.setJSDocInfo(info.build());\n+          } else if (expressionRoot.isGetProp() || expressionRoot.isGetElem()) {\n+            JSDocInfo.Builder info = JSDocInfo.builder().recordParseType();\n+            String memberName = null;\n+            if (expressionRoot.isGetProp()) {\n+              memberName = expressionRoot.getLastChild().getString();\n+            } else {\n+              memberName = expressionRoot.getLastChild().getFirstChild().getString();\n+            }\n+            info.recordType(new ObjectTypeBuilder(t.getScope(), n.isName()? n.getString() : \"\")\n+                .recordMemberType(memberName,\n+                    new FunctionTypeBuilder(t.getScope(), \"\")\n+                        .addParametersFromFunctionNode(expressionRoot.getLastChild().getNext())\n+                        .buildDeclaration())\n+                .buildDeclaration());\n+            n.setJSDocInfo(info.build());\n+          }\n+        }\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}