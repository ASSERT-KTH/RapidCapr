{
    "patch": "if (child.isString()) {\n    // Property name is a string literal\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n} else if (child.isGetterDef() || child.isSetterDef()) {\n    // Property is a getter/setter\n    Node name = child.getFirstChild();\n    T type = typeSystem.getType(getScope(), name);\n    name.setString(null); // Indicates that this is a getter/setter renaming\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(name,\n                               processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now. Do we need specific error messages for getter/setter renaming?\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name.toString(),\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..572be2cb 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,42 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (child.isString()) {\n+    // Property name is a string literal\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child,\n+                               processProperty(t, prop, type, null))) {\n+      // TODO(user): It doesn't look like the user can do much in this\n+      // case right now.\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      }\n+    }\n+} else if (child.isGetterDef() || child.isSetterDef()) {\n+    // Property is a getter/setter\n+    Node name = child.getFirstChild();\n+    T type = typeSystem.getType(getScope(), name);\n+    name.setString(null); // Indicates that this is a getter/setter renaming\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(name,\n+                               processProperty(t, prop, type, null))) {\n+      // TODO(user): It doesn't look like the user can do much in this\n+      // case right now. Do we need specific error messages for getter/setter renaming?\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name.toString(),\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      }\n+    }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: method getType in interface TypeSystem<T#2> cannot be applied to given types;",
    "test_result": "ERROR"
}