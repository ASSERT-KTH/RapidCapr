{
    "patch": "public static List<Integer> removeDuplicates(List<Integer> list) {\n   if (list == null || list.isEmpty()) {\n       return list;\n   }\n   List<Integer> newList = new ArrayList<>();\n   for (Integer i : list) {\n       if (!newList.contains(i)) {\n           newList.add(i);\n       }\n   }\n   return newList;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cbd0149d5 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static List<Integer> removeDuplicates(List<Integer> list) {\n+   if (list == null || list.isEmpty()) {\n+       return list;\n+   }\n+   List<Integer> newList = new ArrayList<>();\n+   for (Integer i : list) {\n+       if (!newList.contains(i)) {\n+           newList.add(i);\n+       }\n+   }\n+   return newList;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}