{
    "patch": "        if (this.data.isEmpty() || start >= this.getItemCount()) {\n            // empty series\n            copy.minY = Double.NaN;\n            copy.maxY = Double.NaN;\n            return copy;\n        }\n        int endIndex = Math.min(end, this.getItemCount() - 1); // prevent index out of bounds\n        copy.minY = Double.POSITIVE_INFINITY;\n        copy.maxY = Double.NEGATIVE_INFINITY;\n        for (int index = start; index <= endIndex; index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.getDataItem(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                double y = clone.getValue().doubleValue();\n                if (!Double.isNaN(y)) {\n                    copy.add(clone);\n                    copy.minY = Math.min(copy.minY, y);\n                    copy.maxY = Math.max(copy.maxY, y);\n                }\n            } catch (SeriesException e) {\n                e.printStackTrace();",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..cc9e64b 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,27 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        if (this.data.isEmpty() || start >= this.getItemCount()) {\n+            // empty series\n+            copy.minY = Double.NaN;\n+            copy.maxY = Double.NaN;\n+            return copy;\n+        }\n+        int endIndex = Math.min(end, this.getItemCount() - 1); // prevent index out of bounds\n+        copy.minY = Double.POSITIVE_INFINITY;\n+        copy.maxY = Double.NEGATIVE_INFINITY;\n+        for (int index = start; index <= endIndex; index++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.getDataItem(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                double y = clone.getValue().doubleValue();\n+                if (!Double.isNaN(y)) {\n+                    copy.add(clone);\n+                    copy.minY = Math.min(copy.minY, y);\n+                    copy.maxY = Math.max(copy.maxY, y);\n+                }\n+            } catch (SeriesException e) {\n+                e.printStackTrace();\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}