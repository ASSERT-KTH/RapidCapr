{
    "patch": "        boolean strategyAdded = false;\n        if (currentStrategy != null) {\n            strategyAdded = currentStrategy.addRegex(this, regex);\n            if (strategyAdded) {\n                collector.add(currentStrategy);\n            }\n        }\n        currentStrategy = nextStrategy;\n        for(;;) {\n            if (currentStrategy == null) {\n                break;\n            }\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if (!patternMatcher.lookingAt()) {\n                break;\n            }\n            String nextFormatField = patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n\n            if (strategyAdded || nextStrategy == null) {\n                if (currentStrategy.addRegex(this, regex)) {\n                    collector.add(currentStrategy);\n                    strategyAdded = true;\n                }\n            } else {\n                if (nextStrategy.addRegex(this, regex)) {\n                    collector.add(nextStrategy);\n                    strategyAdded = false;\n                }\n            }\n            currentStrategy = nextStrategy;\n        }\n        if (collector.isEmpty() || !strategyAdded) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        strategies= collector.toArray(new Strategy[0]);\n        parsePattern= Pattern.compile(regex.toString());\n        currentFormatField= null;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..6c943bf6 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,44 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        boolean strategyAdded = false;\n+        if (currentStrategy != null) {\n+            strategyAdded = currentStrategy.addRegex(this, regex);\n+            if (strategyAdded) {\n+                collector.add(currentStrategy);\n+            }\n+        }\n+        currentStrategy = nextStrategy;\n+        for(;;) {\n+            if (currentStrategy == null) {\n+                break;\n+            }\n+            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+            if (!patternMatcher.lookingAt()) {\n+                break;\n+            }\n+            String nextFormatField = patternMatcher.group();\n+            nextStrategy = getStrategy(nextFormatField);\n+\n+            if (strategyAdded || nextStrategy == null) {\n+                if (currentStrategy.addRegex(this, regex)) {\n+                    collector.add(currentStrategy);\n+                    strategyAdded = true;\n+                }\n+            } else {\n+                if (nextStrategy.addRegex(this, regex)) {\n+                    collector.add(nextStrategy);\n+                    strategyAdded = false;\n+                }\n+            }\n+            currentStrategy = nextStrategy;\n+        }\n+        if (collector.isEmpty() || !strategyAdded) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        strategies= collector.toArray(new Strategy[0]);\n+        parsePattern= Pattern.compile(regex.toString());\n+        currentFormatField= null;\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}