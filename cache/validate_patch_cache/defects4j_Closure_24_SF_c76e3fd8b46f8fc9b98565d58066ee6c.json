{
    "patch": "/**\n* Find aliases declared in goog.scope blocks and register them with the transformation.\n*/\nprivate void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode().getFirstChild();\n        if (n != null && n.isFunction()) {\n            Node fnParam = n.getFirstChild().getFirstChild();\n            if (fnParam != null && !fnParam.hasMoreThanOneChild()) {\n                // This is the correct type of goog.scope block. Find its aliases.\n                for (Node child : n.getLastChild().children()) {\n                    String aliasName = child.getFirstChild().getString();\n                    aliases.put(aliasName, scope.getVar(aliasName));\n                    transformation.addAlias(aliasName, child.getLastChild().getQualifiedName());\n                }\n            } else {\n                t.report(n, GOOG_SCOPE_INVALID_PARAMS);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..5b9bb637 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,28 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+/**\n+* Find aliases declared in goog.scope blocks and register them with the transformation.\n+*/\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n+        Node n = v.getNode().getFirstChild();\n+        if (n != null && n.isFunction()) {\n+            Node fnParam = n.getFirstChild().getFirstChild();\n+            if (fnParam != null && !fnParam.hasMoreThanOneChild()) {\n+                // This is the correct type of goog.scope block. Find its aliases.\n+                for (Node child : n.getLastChild().children()) {\n+                    String aliasName = child.getFirstChild().getString();\n+                    aliases.put(aliasName, scope.getVar(aliasName));\n+                    transformation.addAlias(aliasName, child.getLastChild().getQualifiedName());\n+                }\n+            } else {\n+                t.report(n, GOOG_SCOPE_INVALID_PARAMS);\n+            }\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}