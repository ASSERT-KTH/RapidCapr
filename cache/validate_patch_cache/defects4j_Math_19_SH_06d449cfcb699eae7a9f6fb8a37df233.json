{
    "patch": "if (hasFiniteBounds) {\n    for (int i = 0; i < lB.length; i++) {\n        if (lB[i] > uB[i]) {\n            throw new NumberIsTooLargeException(lB[i], uB[i], true);\n        }\n    }\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isNaN(init[i])) {\n            throw new MathIllegalStateException(LocalizedFormats.NAN_INITIAL_VALUE_FOR_CLEARABLE_SCORE);\n        }\n        if (init[i] < lB[i] || init[i] > uB[i]) {\n            throw new OutOfRangeException(init[i], lB[i], uB[i]);\n        }\n    }\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n\n    // Abort early if the normalization will overflow (cf. \"encode\" method).\n    final double sum = ArrayUtils.sum(newArray(getWeights(), lB, uB));\n    if (Double.isInfinite(sum)) {\n        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW_IN_NORMALIZATION);\n    }\n} else {\n    boundaries = null;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..0c40d2afb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,32 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (hasFiniteBounds) {\n+    for (int i = 0; i < lB.length; i++) {\n+        if (lB[i] > uB[i]) {\n+            throw new NumberIsTooLargeException(lB[i], uB[i], true);\n+        }\n+    }\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isNaN(init[i])) {\n+            throw new MathIllegalStateException(LocalizedFormats.NAN_INITIAL_VALUE_FOR_CLEARABLE_SCORE);\n+        }\n+        if (init[i] < lB[i] || init[i] > uB[i]) {\n+            throw new OutOfRangeException(init[i], lB[i], uB[i]);\n+        }\n+    }\n+    boundaries = new double[2][];\n+    boundaries[0] = lB;\n+    boundaries[1] = uB;\n+\n+    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+    final double sum = ArrayUtils.sum(newArray(getWeights(), lB, uB));\n+    if (Double.isInfinite(sum)) {\n+        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW_IN_NORMALIZATION);\n+    }\n+} else {\n+    boundaries = null;\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}