{
    "patch": "// Check that the access is not used as an assignment target\nif (NodeUtil.isLValue(n)) {\n  return n;\n}\n\n// Check that the access is not the left side of an assignment expression\nif (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n  return n;\n}\n\n// Check that the access is not a property key in an object literal\nif (NodeUtil.isGetOrSetKey(n)) {\n  return n;\n}\n\n// Check that the access is not used as an index in a FOR loop\nNode gParent ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..a8d7db1c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,23 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (NodeUtil.isLValue(n)) {\n+  return n;\n+}\n+\n+// Check that the access is not the left side of an assignment expression\n+if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n+  return n;\n+}\n+\n+// Check that the access is not a property key in an object literal\n+if (NodeUtil.isGetOrSetKey(n)) {\n+  return n;\n+}\n+\n+// Check that the access is not used as an index in a FOR loop\n+Node gParent \n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}