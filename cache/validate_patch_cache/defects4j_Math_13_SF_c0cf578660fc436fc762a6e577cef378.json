{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    int m = m.getColumnDimension();\n    double[][] squareRootArray = new double[n][m];\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            squareRootArray[i][j] = Math.sqrt(m.getEntry(i,j));\n        }\n    }\n    \n    return MatrixUtils.createRealMatrix(squareRootArray);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a888e588b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    int m = m.getColumnDimension();\n+    double[][] squareRootArray = new double[n][m];\n+    \n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < m; j++) {\n+            squareRootArray[i][j] = Math.sqrt(m.getEntry(i,j));\n+        }\n     }\n+    \n+    return MatrixUtils.createRealMatrix(squareRootArray);\n+}\n }",
    "result_reason": "error: variable m is already defined in method squareRoot(RealMatrix)",
    "test_result": "ERROR"
}