{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        int numIter = 0;\n\n        while (numIter < getMaxIterations()) {\n\n            incrementIterationsCounter();\n            numIter++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                }\n\n                return;\n\n            } else {\n\n                // perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted;\n                } else {\n\n                    // perform a shrink step\n                    final RealPointValuePair[] shrinkedSimplex = contractSimplex(comparator);\n                    if (comparator.compare(shrinkedSimplex[0], best) < 0) {\n                        // accept the shrinked simplex\n                        simplex = shrinkedSimplex;\n                    } else {\n                        // break condition when the algorithm stagnates\n                        return;\n                    }\n                }\n\n            }\n\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded.\");\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..810a42a74 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -61,9 +61,12 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+        int numIter = 0;\n+\n+        while (numIter < getMaxIterations()) {\n \n             incrementIterationsCounter();\n+            numIter++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -79,23 +82,39 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the expanded simplex\n+                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                 }\n \n                 return;\n \n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            } else {\n+\n+                // perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted;\n+                } else {\n+\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrinkedSimplex = contractSimplex(comparator);\n+                    if (comparator.compare(shrinkedSimplex[0], best) < 0) {\n+                        // accept the shrinked simplex\n+                        simplex = shrinkedSimplex;\n+                    } else {\n+                        // break condition when the algorithm stagnates\n+                        return;\n+                    }\n+                }\n \n-            // check convergence\n-                return;\n             }\n \n         }\n \n+        throw new OptimizationException(\"Maximal number of iterations exceeded.\");\n+\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}