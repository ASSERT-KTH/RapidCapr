{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix t = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n\n    RealMatrix z = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        z.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));\n    }\n\n    final RealMatrix s = dec.getV().multiply(z).multiply(dec.getV().transpose());\n    final RealMatrix r = t.subtract(s);\n\n    double norm = r.getNorm();\n    double lastNorm = Double.MAX_VALUE;\n    while (norm > 1E-10 && norm < lastNorm) {\n        z = z.add(r.divide(norm));\n        lastNorm = norm;\n        final RealMatrix tz = t.multiply(z);\n        s.multiply(z);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                double val = tz.getEntry(i, j);\n                if (i == j) {\n                    val += Math.sqrt(m.getEntry(i, i));\n                }\n                z.setEntry(i, j, 0.5 * val);\n            }\n        }\n        r = t.subtract(z.multiply(z.transpose()));\n        norm = r.getNorm();\n    }\n\n    return z;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4c6284bf0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,39 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix t = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n+\n+    RealMatrix z = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        z.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));\n     }\n+\n+    final RealMatrix s = dec.getV().multiply(z).multiply(dec.getV().transpose());\n+    final RealMatrix r = t.subtract(s);\n+\n+    double norm = r.getNorm();\n+    double lastNorm = Double.MAX_VALUE;\n+    while (norm > 1E-10 && norm < lastNorm) {\n+        z = z.add(r.divide(norm));\n+        lastNorm = norm;\n+        final RealMatrix tz = t.multiply(z);\n+        s.multiply(z);\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                double val = tz.getEntry(i, j);\n+                if (i == j) {\n+                    val += Math.sqrt(m.getEntry(i, i));\n+                }\n+                z.setEntry(i, j, 0.5 * val);\n+            }\n+        }\n+        r = t.subtract(z.multiply(z.transpose()));\n+        norm = r.getNorm();\n+    }\n+\n+    return z;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}