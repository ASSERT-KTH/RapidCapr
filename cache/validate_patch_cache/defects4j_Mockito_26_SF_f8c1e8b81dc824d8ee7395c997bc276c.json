{
    "patch": "private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n\nstatic {\n    primitiveValues.put(boolean.class, false);\n    primitiveValues.put(char.class, '\\u0000');\n    primitiveValues.put(byte.class, (byte) 0);\n    primitiveValues.put(short.class, (short) 0);\n    primitiveValues.put(int.class, 0);\n    primitiveValues.put(long.class, 0L);\n    primitiveValues.put(float.class, 0F);\n    primitiveValues.put(double.class, 0D);\n}\n\npublic Object returnFor(Class<?> type) {\n    if (type.isPrimitive()) {\n        if (type.equals(boolean.class)) {\n            return false;\n        } else if (type.equals(char.class)) {\n            return '\\u0000';\n        } else if (type.equals(byte.class)) {\n            return (byte) 0;\n        } else if (type.equals(short.class)) {\n            return (short) 0;\n        } else if (type.equals(int.class)) {\n            return 0;\n        } else if (type.equals(long.class)) {\n            return 0L;\n        } else if (type.equals(float.class)) {\n            return 0F;\n        } else if (type.equals(double.class)) {\n            return 0D;\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..628c30862 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -31,38 +31,39 @@ public class Primitives {\n     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n-    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n-\n-    static {\n-        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n-        primitiveTypes.put(Character.class, Character.TYPE);\n-        primitiveTypes.put(Byte.class, Byte.TYPE);\n-        primitiveTypes.put(Short.class, Short.TYPE);\n-        primitiveTypes.put(Integer.class, Integer.TYPE);\n-        primitiveTypes.put(Long.class, Long.TYPE);\n-        primitiveTypes.put(Float.class, Float.TYPE);\n-        primitiveTypes.put(Double.class, Double.TYPE);\n-    }\n-\n-    static {\n-        wrapperReturnValues.put(Boolean.class, false);\n-        wrapperReturnValues.put(Character.class, '\\u0000');\n-        wrapperReturnValues.put(Byte.class, (byte) 0);\n-        wrapperReturnValues.put(Short.class, (short) 0);\n-        wrapperReturnValues.put(Integer.class, 0);\n-        wrapperReturnValues.put(Long.class, 0L);\n-        wrapperReturnValues.put(Float.class, 0F);\n-        wrapperReturnValues.put(Double.class, 0D);\n-    }\n-\n-    static {\n-        primitiveValues.put(boolean.class, false);\n-        primitiveValues.put(char.class, '\\u0000');\n-        primitiveValues.put(byte.class, (byte) 0);\n-        primitiveValues.put(short.class, (short) 0);\n-        primitiveValues.put(int.class, 0);\n-        primitiveValues.put(long.class, 0L);\n-        primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n-    }\n-}\n\\ No newline at end of file\n+private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n+\n+static {\n+    primitiveValues.put(boolean.class, false);\n+    primitiveValues.put(char.class, '\\u0000');\n+    primitiveValues.put(byte.class, (byte) 0);\n+    primitiveValues.put(short.class, (short) 0);\n+    primitiveValues.put(int.class, 0);\n+    primitiveValues.put(long.class, 0L);\n+    primitiveValues.put(float.class, 0F);\n+    primitiveValues.put(double.class, 0D);\n+}\n+\n+public Object returnFor(Class<?> type) {\n+    if (type.isPrimitive()) {\n+        if (type.equals(boolean.class)) {\n+            return false;\n+        } else if (type.equals(char.class)) {\n+            return '\\u0000';\n+        } else if (type.equals(byte.class)) {\n+            return (byte) 0;\n+        } else if (type.equals(short.class)) {\n+            return (short) 0;\n+        } else if (type.equals(int.class)) {\n+            return 0;\n+        } else if (type.equals(long.class)) {\n+            return 0L;\n+        } else if (type.equals(float.class)) {\n+            return 0F;\n+        } else if (type.equals(double.class)) {\n+            return 0D;\n+        }\n+    }\n+    return null;\n+}\n+}",
    "result_reason": "org.mockito.exceptions.misusing.WrongTypeOfReturnValue:",
    "test_result": "FAIL"
}