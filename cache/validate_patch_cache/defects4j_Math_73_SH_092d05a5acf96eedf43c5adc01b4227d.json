{
    "patch": "        final double ftol = 1E-15;\n        final double xtol = 1E-15;\n        final double maxEval = 100;\n        \n        try {\n            // full Brent algorithm starting with provided initial guess\n            return BrentSolver.solve(f, min, max, ftol, xtol, maxEval);\n        } catch (MaxIterationsExceededException e) {\n            throw new FunctionEvaluationException(e.getMaxEvaluations(), f.getMax(), f.getMin(), e);\n        } catch (IllegalArgumentException e) {\n            throw new FunctionEvaluationException(f.getMax(), f.getMin(), e);\n        } ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..a78179dcd 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,18 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        final double ftol = 1E-15;\n+        final double xtol = 1E-15;\n+        final double maxEval = 100;\n+        \n+        try {\n+            // full Brent algorithm starting with provided initial guess\n+            return BrentSolver.solve(f, min, max, ftol, xtol, maxEval);\n+        } catch (MaxIterationsExceededException e) {\n+            throw new FunctionEvaluationException(e.getMaxEvaluations(), f.getMax(), f.getMin(), e);\n+        } catch (IllegalArgumentException e) {\n+            throw new FunctionEvaluationException(f.getMax(), f.getMin(), e);\n+        } \n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: no suitable method found for solve(UnivariateRealFunction,double,double,double,double,double)",
    "test_result": "ERROR"
}