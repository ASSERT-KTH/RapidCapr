{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n\n    for (Var v : scope.getAllSymbols()) {\n        String qualifiedName = null;\n        boolean isAlias = false;\n\n        if (v.getNode() != null) {\n            Node n = v.getNode();\n            Node parent = n.getParent();\n\n            if (v.getSymbolType() == Var.SymbolType.PARAMETER) {\n                continue;\n            }\n\n            if (n.getFirstChild().isQualifiedName()) {\n                // this is an alias\n                qualifiedName = n.getLastChild().getQualifiedName();\n                isAlias = true;\n            } else if (n.getFirstChild().isName()) {\n                Var aliasVar = scope.getVar(n.getFirstChild().getString());\n                if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n                    // this is an alias and the children are not names of a function or class\n                    qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                    isAlias = true;\n                }\n            }\n\n            if (isAlias) {\n                // add to transformation and alias map\n                String name = n.getFirstChild().getString();\n                aliases.put(name, v);\n                transformation.addAlias(name, qualifiedName);\n            } else if (parent.isFunction() || parent.isClass()) {\n                // skip function and class names\n                continue;\n            } else {\n                // add to error report\n                report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..26245534 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,49 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+\n+    for (Var v : scope.getAllSymbols()) {\n+        String qualifiedName = null;\n+        boolean isAlias = false;\n+\n+        if (v.getNode() != null) {\n+            Node n = v.getNode();\n+            Node parent = n.getParent();\n+\n+            if (v.getSymbolType() == Var.SymbolType.PARAMETER) {\n+                continue;\n+            }\n+\n+            if (n.getFirstChild().isQualifiedName()) {\n+                // this is an alias\n+                qualifiedName = n.getLastChild().getQualifiedName();\n+                isAlias = true;\n+            } else if (n.getFirstChild().isName()) {\n+                Var aliasVar = scope.getVar(n.getFirstChild().getString());\n+                if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n+                    // this is an alias and the children are not names of a function or class\n+                    qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                    isAlias = true;\n+                }\n+            }\n+\n+            if (isAlias) {\n+                // add to transformation and alias map\n+                String name = n.getFirstChild().getString();\n+                aliases.put(name, v);\n+                transformation.addAlias(name, qualifiedName);\n+            } else if (parent.isFunction() || parent.isClass()) {\n+                // skip function and class names\n+                continue;\n+            } else {\n+                // add to error report\n+                report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n+            }\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}