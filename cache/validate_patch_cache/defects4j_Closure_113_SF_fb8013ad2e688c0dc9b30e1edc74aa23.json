{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n\n    if (!left.isGetProp() || !left.getFirstChild().matchesQualifiedName(\"goog\")) {\n        // Not a goog.require() call.\n        return;\n    }\n\n    Node arg = left.getNext();\n\n    if (arg == null || !arg.isString()) {\n        // Invalid argument to goog.require().\n        return;\n    }\n\n    ProvidedName provided = providedNames.get(arg.getString());\n\n    if (provided == null) {\n        unrecognizedRequires.add(new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n    } else if (!provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n    } else {\n        JSModule providedModule = provided.explicitModule;\n\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n\n        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n            compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, arg.getString(), providedModule.getName(), module.getName()));\n        }\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddToSymbolTable(left.getNext());\n\n    parent.removeChild(n);\n    compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..1cb07859 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,45 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n+\n+    if (!left.isGetProp() || !left.getFirstChild().matchesQualifiedName(\"goog\")) {\n+        // Not a goog.require() call.\n+        return;\n+    }\n+\n     Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n+\n+    if (arg == null || !arg.isString()) {\n+        // Invalid argument to goog.require().\n+        return;\n+    }\n+\n+    ProvidedName provided = providedNames.get(arg.getString());\n+\n+    if (provided == null) {\n+        unrecognizedRequires.add(new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n+    } else if (!provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n+    } else {\n         JSModule providedModule = provided.explicitModule;\n \n-        // This must be non-null, because there was an explicit provide.\n         Preconditions.checkNotNull(providedModule);\n \n         JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+\n+        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n+            compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, arg.getString(), providedModule.getName(), module.getName()));\n         }\n-      }\n+    }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+    maybeAddToSymbolTable(left);\n+    maybeAddToSymbolTable(left.getNext());\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n-    }\n-  }\n+    parent.removeChild(n);\n+    compiler.reportCodeChange();\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}