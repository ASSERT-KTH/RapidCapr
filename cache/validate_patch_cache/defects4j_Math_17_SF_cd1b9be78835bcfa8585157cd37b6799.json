{
    "patch": "public Dfp multiply(final int x) {\n    // check if x can be converted to a Dfp without loss of precision\n    if (isNaN() || Double.isNaN(x) || !isConvertibleToDfp(x)) {\n        return multiplyFast(x);\n    }\n    return multiply(new Dfp(getField(), x));\n}\n\nprivate boolean isConvertibleToDfp(int x) {\n    Dfp xAsDfp = new Dfp(getField(), x);\n    double xAsDouble = xAsDfp.toDouble();\n    return x == xAsDouble;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..6eb8a7190 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,19 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+public Dfp multiply(final int x) {\n+    // check if x can be converted to a Dfp without loss of precision\n+    if (isNaN() || Double.isNaN(x) || !isConvertibleToDfp(x)) {\n+        return multiplyFast(x);\n     }\n+    return multiply(new Dfp(getField(), x));\n+}\n+\n+private boolean isConvertibleToDfp(int x) {\n+    Dfp xAsDfp = new Dfp(getField(), x);\n+    double xAsDouble = xAsDfp.toDouble();\n+    return x == xAsDouble;\n+}\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}