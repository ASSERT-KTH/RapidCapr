{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      // Go through all of the arguments, from left to right.\n      int count = argList.getChildCount();\n      for (int i = 0; i < count; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          // Move to the statement list.\n          Node functionBody = NodeUtil.getFunctionBody(function);\n          if (functionBody.hasOneChild()) {\n            // If the function was empty, just return.\n            return;\n          }\n          Node firstParam = argList.getFirstChild();\n          Node secondParam = firstParam.getNext();\n          Node comma;\n          if (secondParam == null) {\n            // Only one parameter.\n            comma = firstParam.detach();\n          } else {\n            // Detach the current param, plus the comma after it.\n            comma = secondParam.detach();\n            argList.removeChild(secondParam);\n          }\n          argList.removeChild(firstParam);\n\n          // Find the corresponding argument in each call site and remove it.\n          callSiteOptimizer.removeUnreferencedArgs(fnScope, arg, var);\n\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1bd6d4e3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,53 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      // Go through all of the arguments, from left to right.\n+      int count = argList.getChildCount();\n+      for (int i = 0; i < count; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          // Move to the statement list.\n+          Node functionBody = NodeUtil.getFunctionBody(function);\n+          if (functionBody.hasOneChild()) {\n+            // If the function was empty, just return.\n+            return;\n+          }\n+          Node firstParam = argList.getFirstChild();\n+          Node secondParam = firstParam.getNext();\n+          Node comma;\n+          if (secondParam == null) {\n+            // Only one parameter.\n+            comma = firstParam.detach();\n+          } else {\n+            // Detach the current param, plus the comma after it.\n+            comma = secondParam.detach();\n+            argList.removeChild(secondParam);\n+          }\n+          argList.removeChild(firstParam);\n+\n+          // Find the corresponding argument in each call site and remove it.\n+          callSiteOptimizer.removeUnreferencedArgs(fnScope, arg, var);\n+\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}