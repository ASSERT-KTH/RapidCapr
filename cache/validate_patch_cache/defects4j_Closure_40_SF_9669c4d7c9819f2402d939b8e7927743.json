{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isNameDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      String name = nameNode.getString();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName jsName = getName(name, false);\n        if (jsName != null) {\n          recordSet(jsName, n);\n        }\n      }\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      String functionName = nameNode.getString();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName jsName = getName(functionName, true);\n        if (jsName != null) {\n          recordSet(jsName, n);\n        }\n      }\n    } else if (n.isStringKey() && parent.isObjectLit()) {\n      String name = n.getString();\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        JsName jsName = getName(name, false);\n        if (jsName != null) {\n          recordSet(jsName, n);\n        }\n      }\n    }\n  } else if (n.isAssign()) {\n    Node lhs = n.getFirstChild();\n    if (lhs.isGetProp()) {\n      NameInformation nameInfo = createNameInformation(t, lhs, n);\n      if (nameInfo != null) {\n        if (nameInfo.isPrototype) {\n          recordPrototypeSet(nameInfo.prototypeClass, nameInfo.prototypeProperty, lhs);\n        } else {\n          JsName jsName = getName(nameInfo.name, false);\n          if (jsName != null) {\n            recordSet(jsName, lhs);\n          }\n        }\n      }\n    }\n  } else if (n.isCall()) {\n    Node callee = n.getFirstChild();\n    NameInformation nameInfo = createNameInformation(t, callee, n);\n    if (nameInfo != null && nameInfo.onlyAffectsClassDef) {\n      JsName jsName = getName(nameInfo.name, false);\n      if (jsName != null) {\n        Node fnParent = parent.getParent();\n        while (fnParent != null && !fnParent.isFunction()) {\n          fnParent = fnParent.getParent();\n        }\n        if (fnParent != null) {\n          refNodes.add(new ClassDefiningFunctionNode(jsName, n, parent, fnParent));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..96f82188 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,70 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (t.inGlobalScope()) {\n+    if (NodeUtil.isNameDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      String name = nameNode.getString();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        JsName jsName = getName(name, false);\n+        if (jsName != null) {\n+          recordSet(jsName, n);\n         }\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+    } else if (NodeUtil.isFunctionDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      String functionName = nameNode.getString();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        JsName jsName = getName(functionName, true);\n+        if (jsName != null) {\n+          recordSet(jsName, n);\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n+      }\n+    } else if (n.isStringKey() && parent.isObjectLit()) {\n+      String name = n.getString();\n+      NameInformation ns = createNameInformation(t, n, parent);\n+      if (ns != null) {\n+        JsName jsName = getName(name, false);\n+        if (jsName != null) {\n+          recordSet(jsName, n);\n+        }\n+      }\n+    }\n+  } else if (n.isAssign()) {\n+    Node lhs = n.getFirstChild();\n+    if (lhs.isGetProp()) {\n+      NameInformation nameInfo = createNameInformation(t, lhs, n);\n+      if (nameInfo != null) {\n+        if (nameInfo.isPrototype) {\n+          recordPrototypeSet(nameInfo.prototypeClass, nameInfo.prototypeProperty, lhs);\n+        } else {\n+          JsName jsName = getName(nameInfo.name, false);\n+          if (jsName != null) {\n+            recordSet(jsName, lhs);\n           }\n         }\n       }\n     }\n+  } else if (n.isCall()) {\n+    Node callee = n.getFirstChild();\n+    NameInformation nameInfo = createNameInformation(t, callee, n);\n+    if (nameInfo != null && nameInfo.onlyAffectsClassDef) {\n+      JsName jsName = getName(nameInfo.name, false);\n+      if (jsName != null) {\n+        Node fnParent = parent.getParent();\n+        while (fnParent != null && !fnParent.isFunction()) {\n+          fnParent = fnParent.getParent();\n+        }\n+        if (fnParent != null) {\n+          refNodes.add(new ClassDefiningFunctionNode(jsName, n, parent, fnParent));\n+        }\n+      }\n+    }\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}