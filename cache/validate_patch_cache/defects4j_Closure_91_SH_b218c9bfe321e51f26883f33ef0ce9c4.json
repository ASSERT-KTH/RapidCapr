{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getType() == Token.FUNCTION && parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          // Don't traverse functions that are assigned to prototype properties.\n          return false;\n        }\n        while (lhs.getType() == Token.GETPROP) {\n          lhs = lhs.getFirstChild();\n          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n            // Don't traverse functions whose object is being assigned to a prototype property.\n            return false;\n          }\n        }\n        if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n          // Don't traverse function expressions that are not assigned to an object.\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..793324d3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getType() == Token.FUNCTION && parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          // Don't traverse functions that are assigned to prototype properties.\n+          return false;\n+        }\n+        while (lhs.getType() == Token.GETPROP) {\n+          lhs = lhs.getFirstChild();\n+          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+            // Don't traverse functions whose object is being assigned to a prototype property.\n+            return false;\n+          }\n+        }\n+        if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n+          // Don't traverse function expressions that are not assigned to an object.\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}