{
    "patch": "for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis != millis) {\n                    if (resetFields) {\n                        throw new IllegalArgumentException(\"Resetting not supported\");\n                    }\n                    // Copy on write\n                    if (!iSavedFieldsShared) {\n                        iSavedFields = (SavedField[])iSavedFields.clone();\n                        iSavedFieldsShared = true;\n                    }\n                    savedFields = iSavedFields;\n                    savedFields[i] = savedFields[i].withValue(newMillis);\n                    for (int j = i + 1; j < count; j++) {\n                        savedFields[j].set(savedFields[j - 1].getMillis());\n                    }\n                }\n                millis = newMillis;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..287f01a0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis != millis) {\n+                    if (resetFields) {\n+                        throw new IllegalArgumentException(\"Resetting not supported\");\n+                    }\n+                    // Copy on write\n+                    if (!iSavedFieldsShared) {\n+                        iSavedFields = (SavedField[])iSavedFields.clone();\n+                        iSavedFieldsShared = true;\n+                    }\n+                    savedFields = iSavedFields;\n+                    savedFields[i] = savedFields[i].withValue(newMillis);\n+                    for (int j = i + 1; j < count; j++) {\n+                        savedFields[j].set(savedFields[j - 1].getMillis());\n+                    }\n+                }\n+                millis = newMillis;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}