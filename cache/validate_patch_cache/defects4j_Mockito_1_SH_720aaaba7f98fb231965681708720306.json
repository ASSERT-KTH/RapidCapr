{
    "patch": "            Object[] varargs = Arrays.copyOfRange(\n                    invocation.getRawArguments(),\n                    indexOfVararg,\n                    invocation.getRawArguments().length\n            );\n            ((CapturesArguments) matchers.get(indexOfVararg))\n                    .captureFrom(new VarargWrapper(varargs));",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..feabda9bc 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] varargs = Arrays.copyOfRange(\n+                    invocation.getRawArguments(),\n+                    indexOfVararg,\n+                    invocation.getRawArguments().length\n+            );\n+            ((CapturesArguments) matchers.get(indexOfVararg))\n+                    .captureFrom(new VarargWrapper(varargs));\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}