{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int dstGapOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - dstGapOffset;\n    int offsetAdjusted = getOffset(instantAdjusted);\n    if (dstGapOffset != offsetAdjusted) {\n        // Check which side of the DST gap instantLocal falls on\n        int sign = Long.signum(dstGapOffset - offsetAdjusted);\n        long nextTransitionInstant =\n            sign < 0 ? nextTransition(instantAdjusted) : nextTransition(instantLocal);\n        int delta = sign * (dstGapOffset - offsetAdjusted);\n        if (nextTransitionInstant == instantLocal || nextTransitionInstant == instantAdjusted) {\n            return offsetAdjusted;\n        } else if (nextTransitionInstant > instantLocal) {\n            // The real instant is after the DST gap, we need to go back\n            if (delta < (nextTransitionInstant - instantLocal)) {\n                return dstGapOffset;\n            }\n        } else {\n            // The real instant is before the DST gap, we need to go forward\n            if (delta < (instantLocal - nextTransitionInstant)) {\n                return dstGapOffset;\n            }\n        }\n        return offsetAdjusted;\n    }\n    return dstGapOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c1ad3c92 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,33 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int dstGapOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - dstGapOffset;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+    if (dstGapOffset != offsetAdjusted) {\n+        // Check which side of the DST gap instantLocal falls on\n+        int sign = Long.signum(dstGapOffset - offsetAdjusted);\n+        long nextTransitionInstant =\n+            sign < 0 ? nextTransition(instantAdjusted) : nextTransition(instantLocal);\n+        int delta = sign * (dstGapOffset - offsetAdjusted);\n+        if (nextTransitionInstant == instantLocal || nextTransitionInstant == instantAdjusted) {\n+            return offsetAdjusted;\n+        } else if (nextTransitionInstant > instantLocal) {\n+            // The real instant is after the DST gap, we need to go back\n+            if (delta < (nextTransitionInstant - instantLocal)) {\n+                return dstGapOffset;\n+            }\n+        } else {\n+            // The real instant is before the DST gap, we need to go forward\n+            if (delta < (instantLocal - nextTransitionInstant)) {\n+                return dstGapOffset;\n             }\n         }\n         return offsetAdjusted;\n     }\n+    return dstGapOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}