{
    "patch": "            DateTimeField f = savedFields[i].iField;\n            int v = savedFields[i].iValue;\n            if (v < f.getMinimumValue() || v > f.getMaximumValue()) {\n                if (text != null) {\n                    throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Value \" + v +\n                            \" for \" + f.getName() + \" is not in the range [\" +\n                            f.getMinimumValue() + ',' + f.getMaximumValue() + ']', f.getType());\n                }\n                throw new IllegalFieldValueException(f.getType(), v, \n                        f.getMinimumValue(), f.getMaximumValue());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9897811a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            DateTimeField f = savedFields[i].iField;\n+            int v = savedFields[i].iValue;\n+            if (v < f.getMinimumValue() || v > f.getMaximumValue()) {\n+                if (text != null) {\n+                    throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Value \" + v +\n+                            \" for \" + f.getName() + \" is not in the range [\" +\n+                            f.getMinimumValue() + ',' + f.getMaximumValue() + ']', f.getType());\n+                }\n+                throw new IllegalFieldValueException(f.getType(), v, \n+                        f.getMinimumValue(), f.getMaximumValue());\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}