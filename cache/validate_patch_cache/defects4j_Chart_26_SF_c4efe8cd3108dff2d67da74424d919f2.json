{
    "patch": "/**\n * Draws the axis label.\n *\n * @param label  the label ({@code null} not permitted).\n * @param g2  the graphics device ({@code null} not permitted).\n * @param plotArea  the area within which the plot is being drawn \n *         ({@code null} not permitted).\n * @param dataArea  the area within which the plot is being drawn \n *         ({@code null} not permitted).\n * @param edge  the axis location ({@code null} not permitted).\n * @param state  the axis state ({@code null} not permitted).\n * @param plotState  collects information about the plot ({@code null} \n *         permitted).\n *\n * @return The updated axis state (never {@code null}).\n */\n@Override\nprotected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, \n        Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    g2.setFont(font);\n    Paint paint = getLabelPaint();\n    g2.setPaint(paint);\n    TextAnchor anchor = this.getLabelTextAnchor();\n    RectangleInsets insets = this.getLabelInsets();\n    float angle = getLabelAngle();\n    double angleRadians = Math.toRadians(angle);\n    double baselineOffset = 0.0;\n    double labelWidth = 0.0;\n    double labelHeight = 0.0;\n    if (isVerticalLabel()) {\n        labelWidth = this.getLabel().length();\n        labelHeight = font.getLineMetrics(this.getLabel(), g2.getFontRenderContext())\n                .getHeight();\n\n    } else {\n        FontMetrics fm = g2.getFontMetrics(font);\n        Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);\n        labelWidth = bounds.getWidth();\n        labelHeight = bounds.getHeight();\n        baselineOffset = calculateBaselineOffset(fm, anchor);\n    }\n    Insets labelInsets = insets.createInsetRectangle((float) labelHeight,\n            (float) labelWidth);\n    double[] transformed = { 0.0, 0.0 };\n    int[] coords = { labelInsets.left, labelInsets.top };\n    if (edge == RectangleEdge.TOP) {\n        anchor = anchor.adjustTopwards(0.0);\n        transformed = calculateAnchorPoint(labelWidth / 2.0, \n                baselineOffset, dataArea, edge);\n        coords[0] = (int) transformed[0];\n        coords[1] = (int) transformed[1];\n    } else if (edge == RectangleEdge.BOTTOM) {\n        anchor = anchor.adjustBaselines(-labelInsets.bottom);\n        transformed = calculateAnchorPoint(labelWidth / 2.0,\n                -baselineOffset + labelHeight, dataArea, edge);\n        coords[0] = (int) transformed[0];\n        coords[1] = (int) transformed[1];\n    } else if (edge == RectangleEdge.LEFT) {\n        anchor = anchor.adjustLeft(labelInsets.left);\n        transformed = calculateAnchorPoint(baselineOffset, labelHeight / 2.0, \n                dataArea, edge);\n        coords[0] = (int) transformed[0];\n        coords[1] = (int) transformed[1];\n    } else if (edge == RectangleEdge.RIGHT) {\n        anchor = anchor.adjustRight(-labelInsets.right);\n        transformed = calculateAnchorPoint(-baselineOffset + labelWidth, \n                labelHeight / 2.0, dataArea, edge);\n        coords[0] = (int) transformed[0];\n        coords[1] = (int) transformed[1];\n    }\n    Point2D anchorPoint = new Point2D.Double(coords[0], coords[1]);\n    Point2D rotatedAnchorPoint = calculateLabelAnchorPoint(anchorPoint, angleRadians, transformed);\n    g2.rotate(angleRadians, rotatedAnchorPoint.getX(), rotatedAnchorPoint.getY());\n    if (isVerticalLabel()) {\n        int length = label.length();\n        float ystart = (float) anchorPoint.getY();\n        if (edge == RectangleEdge.TOP) {\n            ystart = (float) (ystart + labelWidth / 2.0);\n        } else if (edge == RectangleEdge.BOTTOM) {\n            ystart = (float) (ystart - labelWidth / 2.0);\n        }\n        for (int i = 0; i < length; i++) {\n            AttributedString character = new AttributedString(label.substring(i, i + 1));\n            character.addAttribute(TextAttribute.FONT, font);\n            character.addAttribute(TextAttribute.FOREGROUND, paint);\n            TextLayout tl = new TextLayout(character.getIterator(), \n                    g2.getFontRenderContext());\n            float ascent = tl.getAscent();\n            Float descent = tl.getDescent();\n            Shape shape = tl.getOutline(null);\n            Rectangle2D charVisualBounds = shape.getBounds2D();\n            Point2D pos;\n            if (edge == RectangleEdge.TOP) {\n                pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(),\n                        anchorPoint.getX() + charVisualBounds.getCenterY());\n            } else if (edge == RectangleEdge.BOTTOM) {\n                pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(),\n                        anchorPoint.getX() - charVisualBounds.getCenterY() - tl.getLeading() - tl.getDescent());\n            } else if (edge == RectangleEdge.LEFT) {\n                pos = new Point2D.Double(anchorPoint.getX() - charVisualBounds.getCenterY(),\n                        ystart + charVisualBounds.getCenterX() - tl.getLeading() - (tl.getAscent()-1));\n            } else /* edge == RectangleEdge.RIGHT */ {\n                pos = new Point2D.Double(anchorPoint.getX() + charVisualBounds.getCenterY(),\n                        ystart - charVisualBounds.getCenterX() + tl.getLeading() + tl.getDescent());\n            }\n            g2.fill(shape);\n            shape = new Rectangle2D.Double(pos.getX(), pos.getY(),\n                    charVisualBounds.getWidth(), charVisualBounds.getHeight());\n            EntityCollection entities = plotState.getOwner().getEntityCollection();\n            if (entities != null) {\n                String tip = null;\n                if (getToolTipText() != null) {\n                    tip = MessageFormat.format(getToolTipText(), \n                            new Object[] { new Integer(i) });\n                }\n                String url = null;\n                if (getURLText() != null) {\n                    url = MessageFormat.format(getURLText(), \n                            new Object[] { new Integer(i) });\n                }\n                entities.add(new ChartEntity(shape, tip, url));\n            }\n        }\n    } else {\n        TextUtilities.drawRotatedString(label, g2, (float) rotatedAnchorPoint.getX(), \n                (float) rotatedAnchorPoint.getY(), anchor, angle, anchor);\n        Shape hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, \n                (float) rotate",
    "patch_diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..05005c7 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1089,115 +1089,144 @@ public abstract class Axis implements Cloneable, Serializable {\n      *\n      * @return Information about the axis.\n      */\n-    protected AxisState drawLabel(String label, Graphics2D g2, \n-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n-            AxisState state, PlotRenderingInfo plotState) {\n-\n-        // it is unlikely that 'state' will be null, but check anyway...\n-        if (state == null) {\n-            throw new IllegalArgumentException(\"Null 'state' argument.\");\n-        }\n-        \n-        if ((label == null) || (label.equals(\"\"))) {\n-            return state;\n-        }\n-\n-        Font font = getLabelFont();\n-        RectangleInsets insets = getLabelInsets();\n-        g2.setFont(font);\n-        g2.setPaint(getLabelPaint());\n-        FontMetrics fm = g2.getFontMetrics();\n-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n-        Shape hotspot = null;\n-        \n-        if (edge == RectangleEdge.TOP) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() - insets.getBottom() \n-                    - h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.BOTTOM) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() + insets.getTop() \n-                    + h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.LEFT) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() - insets.getRight() \n-                    - w / 2.0);\n-            float labely = (float) dataArea.getCenterY();\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-        }\n-        else if (edge == RectangleEdge.RIGHT) {\n-\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() + Math.PI / 2.0, \n-                    labelBounds.getCenterX(), labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() \n-                            + insets.getLeft() + w / 2.0);\n-            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n-                    / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-\n-        }\n-        if (plotState != null && hotspot != null) {\n-            ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n-                if (entities != null) {\n-                    entities.add(new AxisLabelEntity(this, hotspot, \n-                            this.labelToolTip, this.labelURL));\n-                }\n-        }\n-        return state;\n-\n-    }\n+/**\n+ * Draws the axis label.\n+ *\n+ * @param label  the label ({@code null} not permitted).\n+ * @param g2  the graphics device ({@code null} not permitted).\n+ * @param plotArea  the area within which the plot is being drawn \n+ *         ({@code null} not permitted).\n+ * @param dataArea  the area within which the plot is being drawn \n+ *         ({@code null} not permitted).\n+ * @param edge  the axis location ({@code null} not permitted).\n+ * @param state  the axis state ({@code null} not permitted).\n+ * @param plotState  collects information about the plot ({@code null} \n+ *         permitted).\n+ *\n+ * @return The updated axis state (never {@code null}).\n+ */\n+@Override\n+protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, \n+        Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n+\n+    if (state == null) {\n+        throw new IllegalArgumentException(\"Null 'state' argument.\");\n+    }\n+\n+    if ((label == null) || (label.equals(\"\"))) {\n+        return state;\n+    }\n+\n+    Font font = getLabelFont();\n+    g2.setFont(font);\n+    Paint paint = getLabelPaint();\n+    g2.setPaint(paint);\n+    TextAnchor anchor = this.getLabelTextAnchor();\n+    RectangleInsets insets = this.getLabelInsets();\n+    float angle = getLabelAngle();\n+    double angleRadians = Math.toRadians(angle);\n+    double baselineOffset = 0.0;\n+    double labelWidth = 0.0;\n+    double labelHeight = 0.0;\n+    if (isVerticalLabel()) {\n+        labelWidth = this.getLabel().length();\n+        labelHeight = font.getLineMetrics(this.getLabel(), g2.getFontRenderContext())\n+                .getHeight();\n+\n+    } else {\n+        FontMetrics fm = g2.getFontMetrics(font);\n+        Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);\n+        labelWidth = bounds.getWidth();\n+        labelHeight = bounds.getHeight();\n+        baselineOffset = calculateBaselineOffset(fm, anchor);\n+    }\n+    Insets labelInsets = insets.createInsetRectangle((float) labelHeight,\n+            (float) labelWidth);\n+    double[] transformed = { 0.0, 0.0 };\n+    int[] coords = { labelInsets.left, labelInsets.top };\n+    if (edge == RectangleEdge.TOP) {\n+        anchor = anchor.adjustTopwards(0.0);\n+        transformed = calculateAnchorPoint(labelWidth / 2.0, \n+                baselineOffset, dataArea, edge);\n+        coords[0] = (int) transformed[0];\n+        coords[1] = (int) transformed[1];\n+    } else if (edge == RectangleEdge.BOTTOM) {\n+        anchor = anchor.adjustBaselines(-labelInsets.bottom);\n+        transformed = calculateAnchorPoint(labelWidth / 2.0,\n+                -baselineOffset + labelHeight, dataArea, edge);\n+        coords[0] = (int) transformed[0];\n+        coords[1] = (int) transformed[1];\n+    } else if (edge == RectangleEdge.LEFT) {\n+        anchor = anchor.adjustLeft(labelInsets.left);\n+        transformed = calculateAnchorPoint(baselineOffset, labelHeight / 2.0, \n+                dataArea, edge);\n+        coords[0] = (int) transformed[0];\n+        coords[1] = (int) transformed[1];\n+    } else if (edge == RectangleEdge.RIGHT) {\n+        anchor = anchor.adjustRight(-labelInsets.right);\n+        transformed = calculateAnchorPoint(-baselineOffset + labelWidth, \n+                labelHeight / 2.0, dataArea, edge);\n+        coords[0] = (int) transformed[0];\n+        coords[1] = (int) transformed[1];\n+    }\n+    Point2D anchorPoint = new Point2D.Double(coords[0], coords[1]);\n+    Point2D rotatedAnchorPoint = calculateLabelAnchorPoint(anchorPoint, angleRadians, transformed);\n+    g2.rotate(angleRadians, rotatedAnchorPoint.getX(), rotatedAnchorPoint.getY());\n+    if (isVerticalLabel()) {\n+        int length = label.length();\n+        float ystart = (float) anchorPoint.getY();\n+        if (edge == RectangleEdge.TOP) {\n+            ystart = (float) (ystart + labelWidth / 2.0);\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            ystart = (float) (ystart - labelWidth / 2.0);\n+        }\n+        for (int i = 0; i < length; i++) {\n+            AttributedString character = new AttributedString(label.substring(i, i + 1));\n+            character.addAttribute(TextAttribute.FONT, font);\n+            character.addAttribute(TextAttribute.FOREGROUND, paint);\n+            TextLayout tl = new TextLayout(character.getIterator(), \n+                    g2.getFontRenderContext());\n+            float ascent = tl.getAscent();\n+            Float descent = tl.getDescent();\n+            Shape shape = tl.getOutline(null);\n+            Rectangle2D charVisualBounds = shape.getBounds2D();\n+            Point2D pos;\n+            if (edge == RectangleEdge.TOP) {\n+                pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(),\n+                        anchorPoint.getX() + charVisualBounds.getCenterY());\n+            } else if (edge == RectangleEdge.BOTTOM) {\n+                pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(),\n+                        anchorPoint.getX() - charVisualBounds.getCenterY() - tl.getLeading() - tl.getDescent());\n+            } else if (edge == RectangleEdge.LEFT) {\n+                pos = new Point2D.Double(anchorPoint.getX() - charVisualBounds.getCenterY(),\n+                        ystart + charVisualBounds.getCenterX() - tl.getLeading() - (tl.getAscent()-1));\n+            } else /* edge == RectangleEdge.RIGHT */ {\n+                pos = new Point2D.Double(anchorPoint.getX() + charVisualBounds.getCenterY(),\n+                        ystart - charVisualBounds.getCenterX() + tl.getLeading() + tl.getDescent());\n+            }\n+            g2.fill(shape);\n+            shape = new Rectangle2D.Double(pos.getX(), pos.getY(),\n+                    charVisualBounds.getWidth(), charVisualBounds.getHeight());\n+            EntityCollection entities = plotState.getOwner().getEntityCollection();\n+            if (entities != null) {\n+                String tip = null;\n+                if (getToolTipText() != null) {\n+                    tip = MessageFormat.format(getToolTipText(), \n+                            new Object[] { new Integer(i) });\n+                }\n+                String url = null;\n+                if (getURLText() != null) {\n+                    url = MessageFormat.format(getURLText(), \n+                            new Object[] { new Integer(i) });\n+                }\n+                entities.add(new ChartEntity(shape, tip, url));\n+            }\n+        }\n+    } else {\n+        TextUtilities.drawRotatedString(label, g2, (float) rotatedAnchorPoint.getX(), \n+                (float) rotatedAnchorPoint.getY(), anchor, angle, anchor);\n+        Shape hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, \n+                (float) rotate\n \n     /**\n      * Draws an axis line at the current cursor position and edge.",
    "result_reason": "error: annotations are not supported in -source 1.4",
    "test_result": "ERROR"
}