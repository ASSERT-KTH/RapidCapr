{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isGetProp() && n.getLastChild().getString().equals(\"length\")) {\n      if (n.getFirstChild().getJSType() != null) {\n        ObjectType objType = ObjectType.cast(\n            n.getFirstChild().getJSType());\n        if (objType.hasProperty(\"length\", false)) {\n          if (objType.isSubtypeOf(getTypedArraysBaseClass())) {\n            reportTypedArrayLength(t, n);\n          } else if (objType.isSubtypeOf(getArrayClass())) {\n            reportArrayLength(t, n);\n          }\n        }\n      } else if (parent == null || n.getJSType() == null || !parent.isAssign()) {\n        return;\n      }\n      // if we get here, we have a dynamic reference to \"length\"\n      // so mark it and its parent statement as changed\n      t.reportCodeChange();\n      reportWarning(\n          t, n.getParent().getParent(), LENGTH_NOT_GETTER_WARNING);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}