{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        Set<String> recordProps = constraintObj.getOwnPropertyNames();\n        for (String prop : recordProps) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n\n        // remove any undeclared properties that are not in the record\n        Set<String> propNames = objType.getOwnPropertyNames();\n        for (String propName : propNames) {\n          if (!recordProps.contains(propName) && !objType.isPropertyTypeDeclared(propName)) {\n            objType.undefineProperty(propName);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..aed54dec 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,7 +1121,8 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n+        Set<String> recordProps = constraintObj.getOwnPropertyNames();\n+        for (String prop : recordProps) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n@@ -1132,8 +1133,17 @@ class TypeInference\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n+\n+        // remove any undeclared properties that are not in the record\n+        Set<String> propNames = objType.getOwnPropertyNames();\n+        for (String propName : propNames) {\n+          if (!recordProps.contains(propName) && !objType.isPropertyTypeDeclared(propName)) {\n+            objType.undefineProperty(propName);\n+          }\n+        }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}