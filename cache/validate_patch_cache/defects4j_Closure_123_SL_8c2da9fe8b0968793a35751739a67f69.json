{
    "patch": "        boolean isArrayAccessExpr = false;\n        String rhsStr = rhsNode.toString();\n        Object rhs = null;\n        if (rhsNode instanceof ArrayAccessExpr) {\n            ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) rhsNode;\n            isArrayAccessExpr = true;\n            Expression indexExpr = arrayAccessExpr.getIndex();\n            if (indexExpr instanceof IntegerLiteralExpr) {\n                rhs = String.format(\"%s[%s]\", arrayAccessExpr.getName().toString(),\n                        ((IntegerLiteralExpr) indexExpr).getValue());\n            } else {\n                rhs = new Object() {\n                    @SuppressWarnings(\"unused\")\n                    void visit(IntegerLiteralExpr n, Void arg) {\n                        this.rhsArrayIndex = n.getValue();\n                    }\n                    int rhsArrayIndex = -1;\n                    String arrayName = \"\";\n                    {\n                        indexExpr.accept(this, null);\n                        arrayName = arrayAccessExpr.getNameAsString();\n                    }\n                    public Void visit(IntegerLiteralExpr n, Void arg) {\n                        rhsArrayIndex = n.getValue();\n                        return null;\n                    }\n                };\n            }\n        } else {\n            rhs = rhsStr;\n        }\n\n        String infixExpr;\n        if (isArrayAccessExpr && rhs instanceof String) {\n            infixExpr = String.format(\"%s %s %s\", rhs, operatorSymbol, lhsName);\n        } else {\n            infixExpr = String.format(\"%s %s %s\", rhsStr, operatorSymbol, lhsName);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}