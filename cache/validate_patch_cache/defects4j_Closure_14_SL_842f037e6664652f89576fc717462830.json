{
    "patch": "if (finallyNode != null) {\n  Node siblingNode = finallyNode.getNext();\n  while (siblingNode != null && siblingNode.isFunction()) {\n    siblingNode = siblingNode.getNext();\n  }\n  if (siblingNode != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, siblingNode);\n  } else {\n    Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n    if (follow != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, follow);\n    } else {\n      return null;\n    }\n  }\n} else {\n  return computeFollowNode(fromNode, parent, cfa);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..7ef81f58 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,24 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode != null) {\n+  Node siblingNode = finallyNode.getNext();\n+  while (siblingNode != null && siblingNode.isFunction()) {\n+    siblingNode = siblingNode.getNext();\n+  }\n+  if (siblingNode != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, siblingNode);\n+  } else {\n+    Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n+    if (follow != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, follow);\n+    } else {\n+      return null;\n+    }\n+  }\n+} else {\n+  return computeFollowNode(fromNode, parent, cfa);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: No cross edges found",
    "test_result": "FAIL"
}