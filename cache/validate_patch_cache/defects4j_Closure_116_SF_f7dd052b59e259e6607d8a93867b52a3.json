{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node cArg = callNode.getFirstChild().getNext();\n  Node cArgNext;\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  Node block = fnNode.getLastChild();\n\n  // check if there are no parameters and arguments to inline or vice-versa\n  if ((cArg == null && fnParam != null) || (cArg != null && fnParam == null)) {\n    return CanInlineResult.NO;\n  }\n\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      String paramName = fnParam.getString();\n\n      // If the parameter has a default value, it does not need a matching argument.\n      if (fnParam.hasChildren() || cArg == null) {\n        fnParam = fnParam.getNext();\n        continue;\n      }\n\n      Node callArgValue = cArg.getFirstChild().detach();\n      // Functions called via 'call' and 'apply' have a this-object as\n      // the first parameter, but this is not part of the called function's\n      // parameter list.\n      if (!callNode.getFirstChild().isName()) {\n        // this object is not a parameter\n        if ((cArg.isSpread() && cArg.getNext() != null)  //There must be no arguments after a spread argument.\n            || cArg.isNew()) {\n          return CanInlineResult.NO;\n        }\n\n        // support this objects\n        //TODO: implement a replace of A.this with a constant.\n        if (!cArg.isSpread()\n            && cArg.isThis()) {\n          cArg = cArg.getNext();\n          fnParam = fnParam.getNext();\n          continue;\n        }\n\n        if (NodeUtil.isFunctionObjectCall(callNode)\n            && callArgValue == null\n            && !NodeUtil.isEmptyStatement(fnParam.getParent().getNext())) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      // Check for mutations (inc. undefined) to arguments that are evaluated more than once.\n      // Unlike block inlining, there is no need to check for loop headers.\n      if (NodeUtil.mayEffectMutableState(callArgValue, compiler)\n          && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n        return CanInlineResult.NO;\n      }\n\n      // Move to the next name.\n      fnParam = fnParam.getNext();\n\n      // Continue looking through the call arguments, looking for a possible match.\n      // Remove the first argument.\n      cArgNext = cArg.getNext();\n      callNode.removeChild(cArg);\n      cArg = cArgNext;\n    } else {\n      // There are more arguments than formal parameters with no default values.\n      if (cArg != null && !cArg.isSpread() &&\n          cArg.getFirstChild() != null) {\n        return CanInlineResult.NO;\n      }\n\n      // There may be additional arguments required for destructured parameters. We can't\n      // easily know the shape of the destructured parameters, so we'll assume\n      // that there are additional elements being destructured, even if it is a single value.\n\n      // The rest of the arguments will be captured but not used.\n      return CanInlineResult.YES_WITH_DESTRUCTURED_REST;\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..dbbecf69 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,93 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node cArg = callNode.getFirstChild().getNext();\n+  Node cArgNext;\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  Node block = fnNode.getLastChild();\n \n+  // check if there are no parameters and arguments to inline or vice-versa\n+  if ((cArg == null && fnParam != null) || (cArg != null && fnParam == null)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  while (cArg != null || fnParam != null) {\n+    if (fnParam != null) {\n+      String paramName = fnParam.getString();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      // If the parameter has a default value, it does not need a matching argument.\n+      if (fnParam.hasChildren() || cArg == null) {\n+        fnParam = fnParam.getNext();\n+        continue;\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n+      Node callArgValue = cArg.getFirstChild().detach();\n+      // Functions called via 'call' and 'apply' have a this-object as\n+      // the first parameter, but this is not part of the called function's\n+      // parameter list.\n+      if (!callNode.getFirstChild().isName()) {\n+        // this object is not a parameter\n+        if ((cArg.isSpread() && cArg.getNext() != null)  //There must be no arguments after a spread argument.\n+            || cArg.isNew()) {\n+          return CanInlineResult.NO;\n         }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+        // support this objects\n+        //TODO: implement a replace of A.this with a constant.\n+        if (!cArg.isSpread()\n+            && cArg.isThis()) {\n+          cArg = cArg.getNext();\n+          fnParam = fnParam.getNext();\n+          continue;\n+        }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        if (NodeUtil.isFunctionObjectCall(callNode)\n+            && callArgValue == null\n+            && !NodeUtil.isEmptyStatement(fnParam.getParent().getNext())) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       }\n-    }\n \n-    return CanInlineResult.YES;\n+      // Check for mutations (inc. undefined) to arguments that are evaluated more than once.\n+      // Unlike block inlining, there is no need to check for loop headers.\n+      if (NodeUtil.mayEffectMutableState(callArgValue, compiler)\n+          && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      // Move to the next name.\n+      fnParam = fnParam.getNext();\n+\n+      // Continue looking through the call arguments, looking for a possible match.\n+      // Remove the first argument.\n+      cArgNext = cArg.getNext();\n+      callNode.removeChild(cArg);\n+      cArg = cArgNext;\n+    } else {\n+      // There are more arguments than formal parameters with no default values.\n+      if (cArg != null && !cArg.isSpread() &&\n+          cArg.getFirstChild() != null) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      // There may be additional arguments required for destructured parameters. We can't\n+      // easily know the shape of the destructured parameters, so we'll assume\n+      // that there are additional elements being destructured, even if it is a single value.\n+\n+      // The rest of the arguments will be captured but not used.\n+      return CanInlineResult.YES_WITH_DESTRUCTURED_REST;\n+    }\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}