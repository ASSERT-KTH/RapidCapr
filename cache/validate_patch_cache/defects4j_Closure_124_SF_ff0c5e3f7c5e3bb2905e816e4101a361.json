{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  // Make sure the node is a getprop node.\n  if (!node.isGetProp()) {\n    throw new IllegalArgumentException(\"Expected a getprop node, but got \" + node);\n  }\n  \n  Node child = node.getFirstChild();\n  while (child != null) {\n    if (child.isName()) {\n      if (isNameAssignedTo(child.getString(), replacement)) {\n        return false;\n      }\n    } else if (!isSafeReplacement(child, replacement)) {\n      return false;\n    }\n\n    child = child.getNext();\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..d5352a19 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,22 +203,32 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  // No checks are needed for simple names.\n+  if (node.isName()) {\n+    return true;\n+  }\n+  // Make sure the node is a getprop node.\n+  if (!node.isGetProp()) {\n+    throw new IllegalArgumentException(\"Expected a getprop node, but got \" + node);\n+  }\n+  \n+  Node child = node.getFirstChild();\n+  while (child != null) {\n+    if (child.isName()) {\n+      if (isNameAssignedTo(child.getString(), replacement)) {\n+        return false;\n+      }\n+    } else if (!isSafeReplacement(child, replacement)) {\n       return false;\n     }\n \n-    return true;\n+    child = child.getNext();\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n    */\n@@ -241,4 +251,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}