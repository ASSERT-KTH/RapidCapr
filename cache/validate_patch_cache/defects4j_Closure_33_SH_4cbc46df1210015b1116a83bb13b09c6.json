{
    "patch": "      ObjectType inferred = getPropertyInferredType(prop);\n      if (inferred == null || inferred.isUnknownType()) {\n        // First, try to find a declared prop\n        JSType declType = getDeclaredPropertyType(prop);\n        if (declType != null) {\n          defineInferredProperty(prop, declType, null);\n          continue;\n        }\n        // Second, try to find a common ancestor with the current type\n        if (objType.hasProperty(prop)) {\n          JSType propType = objType.getPropertyType(prop);\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          defineInferredProperty(prop, typeToInfer, null);\n        } else if (objType.getImplicitPrototype().hasProperty(prop)) {\n          JSType propType = objType.getImplicitPrototype().getPropertyType(prop);\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..c166d8ae 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,27 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      ObjectType inferred = getPropertyInferredType(prop);\n+      if (inferred == null || inferred.isUnknownType()) {\n+        // First, try to find a declared prop\n+        JSType declType = getDeclaredPropertyType(prop);\n+        if (declType != null) {\n+          defineInferredProperty(prop, declType, null);\n+          continue;\n+        }\n+        // Second, try to find a common ancestor with the current type\n+        if (objType.hasProperty(prop)) {\n+          JSType propType = objType.getPropertyType(prop);\n+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n+          defineInferredProperty(prop, typeToInfer, null);\n+        } else if (objType.getImplicitPrototype().hasProperty(prop)) {\n+          JSType propType = objType.getImplicitPrototype().getPropertyType(prop);\n+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n+          defineInferredProperty(prop, typeToInfer, null);\n+        }\n+      }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}