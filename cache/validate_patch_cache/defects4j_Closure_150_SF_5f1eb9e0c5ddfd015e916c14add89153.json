{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n      return;\n    }\n\n    attachLiteralTypes(n);\n\n    switch (n.getType()) {\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          if (parent != null && !NodeUtil.isStatement(parent)) {\n            // For compound expressions, the function is wrapped in a CALL node.\n            defineVar(n, parent);\n          }\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          if (parent != null && NodeUtil.isStatementBlock(parent)) {\n            defineDeclaredFunction(n, parent);\n          }\n        }\n        break;\n      case Token.NAME:\n        if (parent.getType() != Token.FUNCTION) {\n          defineVar(n, parent);\n        }\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..8f224444 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,40 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+      return;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    attachLiteralTypes(n);\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+    switch (n.getType()) {\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.FUNCTION:\n+        if (NodeUtil.isFunctionExpression(n)) {\n+          if (parent != null && !NodeUtil.isStatement(parent)) {\n+            // For compound expressions, the function is wrapped in a CALL node.\n+            defineVar(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+        } else if (NodeUtil.isFunctionDeclaration(n)) {\n+          if (parent != null && NodeUtil.isStatementBlock(parent)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+        }\n+        break;\n+      case Token.NAME:\n+        if (parent.getType() != Token.FUNCTION) {\n           defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n     }\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}