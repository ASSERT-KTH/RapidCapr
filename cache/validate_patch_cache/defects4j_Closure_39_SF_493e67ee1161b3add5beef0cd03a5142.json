{
    "patch": "public boolean canBeCalled() {\n    return !isRegexpType();\n}\n\n@Override\nString sourceFormInternal(TypeFormatter typeFormatter) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        for (String property : getPropertyNames()) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n            TypeWithModifiers propertyType = getPropertyType(property);\n            if (propertyType == null) {\n                sb.append(\"undefined\");\n            } else {\n                sb.append(propertyType.toString(false, typeFormatter));\n            }\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n        return sb.toString();\n    }\n}\n\n@Override\nString toStringInternal(TypeFormatter typeFormatter) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else {\n        return sourceFormInternal(typeFormatter);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..dcf4f56a 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,52 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return !isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String sourceFormInternal(TypeFormatter typeFormatter) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        return getReferenceName();\n+    } else {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+\n+        int i = 0;\n+        for (String property : getPropertyNames()) {\n+            if (i > 0) {\n+                sb.append(\", \");\n+            }\n+\n+            sb.append(property);\n+            sb.append(\": \");\n+            TypeWithModifiers propertyType = getPropertyType(property);\n+            if (propertyType == null) {\n+                sb.append(\"undefined\");\n+            } else {\n+                sb.append(propertyType.toString(false, typeFormatter));\n+            }\n+            ++i;\n+            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+                sb.append(\", ...\");\n+                break;\n+            }\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+}\n \n-      prettyPrint = true;\n-      return sb.toString();\n+@Override\n+String toStringInternal(TypeFormatter typeFormatter) {\n+    if (hasReferenceName()) {\n+        return getReferenceName();\n     } else {\n-      return \"{...}\";\n+        return sourceFormInternal(typeFormatter);\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}