{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0.0d : getEntry(negativeVarBasicRow, getRhsOffset());\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    boolean allBasicVariablesNonNegative = true;\n    boolean allCoefficientsEqualNegative = true;\n    boolean isNegativeSolution = false;\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0.0d; continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        if (basicRow == null) {\n            coefficients[i] = 0.0d; continue;\n        }\n        if (restrictToNonNegative && getEntry(basicRow, getRhsOffset()) < 0) {\n            allBasicVariablesNonNegative = false;\n        }\n        if (negativeVarBasicRow != null && basicRow.equals(negativeVarBasicRow)) {\n            coefficients[i] = 1.0d;\n            isNegativeSolution = true;\n            continue;\n        }\n        if (basicRows.contains(basicRow)) {\n            coefficients[i] = 0.0d; continue;\n        }\n        basicRows.add(basicRow);\n        double entry = getEntry(basicRow, getRhsOffset());\n        if (!restrictToNonNegative) {\n            entry -= mostNegative;\n            allCoefficientsEqualNegative = false;\n        }\n        if (entry < 0) {\n            allBasicVariablesNonNegative = false;\n        }\n        coefficients[i] = entry;\n    }\n    if (isNegativeSolution) {\n        double[] zeros = new double[getOriginalNumDecisionVariables()];\n        return new RealPointValuePair(zeros, Double.NEGATIVE_INFINITY);\n    }\n    if (allCoefficientsEqualNegative) {\n        double[] zeros = new double[getOriginalNumDecisionVariables()];\n        return new RealPointValuePair(zeros, 0.0d);\n    }\n    if (allBasicVariablesNonNegative) {\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n    double[] solution = new double[getOriginalNumDecisionVariables()];\n    Arrays.fill(solution, Double.NaN);\n    double minRatio = Double.MAX_VALUE;\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) { continue; }\n        Integer basicRow = getBasicRow(colIndex);\n        if (basicRow == null) { continue; }\n        double entry = getEntry(basicRow, getRhsOffset());\n        if (entry < 0) {\n            double ratio = -1.0d * coefficients[i] / entry;\n            if (ratio < minRatio || (ratio == minRatio && Double.isNaN(solution[i]))) {\n                minRatio = ratio;\n                Arrays.fill(solution, Double.NaN);\n                solution[i] = minRatio;\n            }\n        }\n    }\n    return Double.isNaN(solution[negativeVarColumn])\n        ? new RealPointValuePair(coefficients, Double.NEGATIVE_INFINITY)\n        : new RealPointValuePair(solution, Double.NaN);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..ed533b035 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,36 +393,79 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;\n+    double mostNegative = negativeVarBasicRow == null ? 0.0d : getEntry(negativeVarBasicRow, getRhsOffset());\n+    Set<Integer> basicRows = new HashSet<Integer>();\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    boolean allBasicVariablesNonNegative = true;\n+    boolean allCoefficientsEqualNegative = true;\n+    boolean isNegativeSolution = false;\n+    for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) {\n+            coefficients[i] = 0.0d; continue;\n+        }\n+        Integer basicRow = getBasicRow(colIndex);\n+        if (basicRow == null) {\n+            coefficients[i] = 0.0d; continue;\n+        }\n+        if (restrictToNonNegative && getEntry(basicRow, getRhsOffset()) < 0) {\n+            allBasicVariablesNonNegative = false;\n+        }\n+        if (negativeVarBasicRow != null && basicRow.equals(negativeVarBasicRow)) {\n+            coefficients[i] = 1.0d;\n+            isNegativeSolution = true;\n             continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n-      }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        }\n+        if (basicRows.contains(basicRow)) {\n+            coefficients[i] = 0.0d; continue;\n+        }\n+        basicRows.add(basicRow);\n+        double entry = getEntry(basicRow, getRhsOffset());\n+        if (!restrictToNonNegative) {\n+            entry -= mostNegative;\n+            allCoefficientsEqualNegative = false;\n+        }\n+        if (entry < 0) {\n+            allBasicVariablesNonNegative = false;\n+        }\n+        coefficients[i] = entry;\n+    }\n+    if (isNegativeSolution) {\n+        double[] zeros = new double[getOriginalNumDecisionVariables()];\n+        return new RealPointValuePair(zeros, Double.NEGATIVE_INFINITY);\n+    }\n+    if (allCoefficientsEqualNegative) {\n+        double[] zeros = new double[getOriginalNumDecisionVariables()];\n+        return new RealPointValuePair(zeros, 0.0d);\n+    }\n+    if (allBasicVariablesNonNegative) {\n+        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+    }\n+    double[] solution = new double[getOriginalNumDecisionVariables()];\n+    Arrays.fill(solution, Double.NaN);\n+    double minRatio = Double.MAX_VALUE;\n+    for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) { continue; }\n+        Integer basicRow = getBasicRow(colIndex);\n+        if (basicRow == null) { continue; }\n+        double entry = getEntry(basicRow, getRhsOffset());\n+        if (entry < 0) {\n+            double ratio = -1.0d * coefficients[i] / entry;\n+            if (ratio < minRatio || (ratio == minRatio && Double.isNaN(solution[i]))) {\n+                minRatio = ratio;\n+                Arrays.fill(solution, Double.NaN);\n+                solution[i] = minRatio;\n+            }\n+        }\n     }\n+    return Double.isNaN(solution[negativeVarColumn])\n+        ? new RealPointValuePair(coefficients, Double.NEGATIVE_INFINITY)\n+        : new RealPointValuePair(solution, Double.NaN);\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}