{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input arguments for regularizedGamma: a=\" + a + \", x=\" + x);\n    }\n\n    double eps = 10e-15;\n    double maxIterations = 100000;\n    double sum = 0.0;\n    double gamma = gamma(a);\n\n    for (int n = 0; n <= maxIterations; n++) {\n        sum += Math.pow(x, n) * Math.exp(-x) / gamma(a + n + 1);\n        if (sum < eps) {\n            break;\n        }\n    }\n\n    return sum / gamma(a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..90780a42e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments for regularizedGamma: a=\" + a + \", x=\" + x);\n+    }\n+\n+    double eps = 10e-15;\n+    double maxIterations = 100000;\n+    double sum = 0.0;\n+    double gamma = gamma(a);\n+\n+    for (int n = 0; n <= maxIterations; n++) {\n+        sum += Math.pow(x, n) * Math.exp(-x) / gamma(a + n + 1);\n+        if (sum < eps) {\n+            break;\n+        }\n+    }\n+\n+    return sum / gamma(a);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}