{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxEigenvalues = 10; // maximum number of eigenvalues to compute\n    final EigenDecompositionImpl dec = new EigenDecompositionImpl(m, 0.0);\n    final int n = Math.min(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < n; i++) {\n        if (dec.getRealEigenvalue(i) <= 0.0) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n    }\n    final int k = Math.min(maxEigenvalues, n);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final RealMatrix dk = d.getSubMatrix(0, k-1, 0, k-1);\n    final RealMatrix vk = v.getSubMatrix(0, n-1, 0, k-1);\n    final RealMatrix vkT = vk.transpose();\n    final RealMatrix sqrtDk = new Array2DRowRealMatrix(k, k);\n    for (int i = 0; i < k; i++) {\n        final double x = dk.getEntry(i, i);\n        sqrtDk.setEntry(i, i, Math.sqrt(Math.max(0.0, x)));\n    }\n    final RealMatrix sqrRoot = vk.multiply(sqrtDk).multiply(vkT);\n    return sqrRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ec2027923 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxEigenvalues = 10; // maximum number of eigenvalues to compute\n+    final EigenDecompositionImpl dec = new EigenDecompositionImpl(m, 0.0);\n+    final int n = Math.min(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < n; i++) {\n+        if (dec.getRealEigenvalue(i) <= 0.0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n+    }\n+    final int k = Math.min(maxEigenvalues, n);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix dk = d.getSubMatrix(0, k-1, 0, k-1);\n+    final RealMatrix vk = v.getSubMatrix(0, n-1, 0, k-1);\n+    final RealMatrix vkT = vk.transpose();\n+    final RealMatrix sqrtDk = new Array2DRowRealMatrix(k, k);\n+    for (int i = 0; i < k; i++) {\n+        final double x = dk.getEntry(i, i);\n+        sqrtDk.setEntry(i, i, Math.sqrt(Math.max(0.0, x)));\n     }\n+    final RealMatrix sqrRoot = vk.multiply(sqrtDk).multiply(vkT);\n+    return sqrRoot;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}