{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> remainingPairs = elementPairs.subList(1, size);\n        int remainingSize = remainingPairs.size();\n        int nextSeparatorIndex = -1;\n\n        // Find the index of the next Separator\n        for (int i = 0; i < remainingSize; i++) {\n            if (remainingPairs.get(i) instanceof Separator) {\n                nextSeparatorIndex = i + 1;\n                break;\n            }\n        }\n\n        if (nextSeparatorIndex > 0) {\n            PeriodFormatter formatter1 = toFormatter(remainingPairs.subList(0, nextSeparatorIndex - 1), notPrinter, notParser);\n            PeriodFormatter formatter2 = toFormatter(remainingPairs.subList(nextSeparatorIndex, remainingSize), notPrinter, notParser);\n            sep = sep.finish(formatter1.getPrinter(), formatter2.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else {\n            PeriodFormatter formatter = toFormatter(remainingPairs, notPrinter, notParser);\n            PeriodPrinter printer = formatter.getPrinter();\n            PeriodParser parser = formatter.getParser();\n            if (printer != null && parser != null) {\n                sep = sep.finish(printer, parser);\n            }\n            return new PeriodFormatter(sep, sep);\n        }\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e67614c7 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,52 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> remainingPairs = elementPairs.subList(1, size);\n+        int remainingSize = remainingPairs.size();\n+        int nextSeparatorIndex = -1;\n+\n+        // Find the index of the next Separator\n+        for (int i = 0; i < remainingSize; i++) {\n+            if (remainingPairs.get(i) instanceof Separator) {\n+                nextSeparatorIndex = i + 1;\n+                break;\n+            }\n+        }\n+\n+        if (nextSeparatorIndex > 0) {\n+            PeriodFormatter formatter1 = toFormatter(remainingPairs.subList(0, nextSeparatorIndex - 1), notPrinter, notParser);\n+            PeriodFormatter formatter2 = toFormatter(remainingPairs.subList(nextSeparatorIndex, remainingSize), notPrinter, notParser);\n+            sep = sep.finish(formatter1.getPrinter(), formatter2.getParser());\n+            return new PeriodFormatter(sep, sep);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            PeriodFormatter formatter = toFormatter(remainingPairs, notPrinter, notParser);\n+            PeriodPrinter printer = formatter.getPrinter();\n+            PeriodParser parser = formatter.getParser();\n+            if (printer != null && parser != null) {\n+                sep = sep.finish(printer, parser);\n+            }\n+            return new PeriodFormatter(sep, sep);\n         }\n     }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<P1Y2M3W4D[T5H6M7.008S]> but was:<P1Y2M3W4D[]>",
    "test_result": "FAIL"
}