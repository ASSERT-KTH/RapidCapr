{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    boolean lastLineEmpty = line.isEmpty();\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n    int whitespaceStart = startCharno + line.length();\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          ignoreStar = true;\n          break;\n\n        case EOL:\n          lastLineEmpty = false;\n          if (option == WhitespaceOption.SINGLE_LINE || ignoreStar) {\n            ignoreStar = false;\n            builder.append(' ');\n            token = next();\n            break;\n          }\n\n          builder.append('\\n');\n          ignoreStar = false;\n          token = next();\n          break;\n\n        case ANNOTATION:\n          lastLineEmpty = false;\n          ignoreStar = false;\n          if (builder.length() > 0 && builder.charAt(builder.length() - 1) !=\n              ' ') {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n          token = next();\n          break;\n\n        case EOF:\n        case EOC:\n          String multilineText = builder.toString().trim();\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.replaceAll(\"\\\\n\\\\s+\", \" \");\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = whitespaceStart;\n\n          if (lastLineEmpty) {\n            builder.deleteCharAt(builder.length() - 1);\n            endLineno--;\n            endCharno = stream.getLineLength(endLineno);\n          }\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                                  endLineno, endCharno);\n          }\n\n          return new ExtractionInfo(multilineText, token);\n\n        default:\n          lastLineEmpty = false;\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n          if (builder.length() > 0 && builder.charAt(builder.length() - 1) !=\n              ' ') {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          whitespaceStart = 1;\n          token = next();\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..5a0168e9 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,8 +1326,8 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+                                                    WhitespaceOption option) {\n \n     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n         token == JsDocToken.EOF) {\n@@ -1351,10 +1351,12 @@ public final class JsDocInfoParser {\n     token = next();\n \n     boolean ignoreStar = false;\n+    boolean lastLineEmpty = line.isEmpty();\n \n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n+    int whitespaceStart = startCharno + line.length();\n \n     do {\n       switch (token) {\n@@ -1371,51 +1373,65 @@ public final class JsDocInfoParser {\n           }\n \n           token = next();\n-          continue;\n+          ignoreStar = true;\n+          break;\n \n         case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n+          lastLineEmpty = false;\n+          if (option == WhitespaceOption.SINGLE_LINE || ignoreStar) {\n+            ignoreStar = false;\n+            builder.append(' ');\n+            token = next();\n+            break;\n           }\n \n-          ignoreStar = true;\n+          builder.append('\\n');\n+          ignoreStar = false;\n           token = next();\n-          continue;\n+          break;\n \n-        default:\n+        case ANNOTATION:\n+          lastLineEmpty = false;\n           ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+          if (builder.length() > 0 && builder.charAt(builder.length() - 1) !=\n+              ' ') {\n+            builder.append(' ');\n+          }\n+          builder.append(toString(token));\n+          token = next();\n+          break;\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+        case EOF:\n+        case EOC:\n+          String multilineText = builder.toString().trim();\n+          if (option != WhitespaceOption.PRESERVE) {\n+            multilineText = multilineText.replaceAll(\"\\\\n\\\\s+\", \" \");\n+          }\n+          int endLineno = stream.getLineno();\n+          int endCharno = whitespaceStart;\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+          if (lastLineEmpty) {\n+            builder.deleteCharAt(builder.length() - 1);\n+            endLineno--;\n+            endCharno = stream.getLineLength(endLineno);\n+          }\n \n-            return new ExtractionInfo(multilineText, token);\n+          if (multilineText.length() > 0) {\n+            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n+                                  endLineno, endCharno);\n           }\n \n-          if (builder.length() > 0) {\n+          return new ExtractionInfo(multilineText, token);\n+\n+        default:\n+          lastLineEmpty = false;\n+          ignoreStar = false;\n+          state = State.SEARCHING_ANNOTATION;\n+          if (builder.length() > 0 && builder.charAt(builder.length() - 1) !=\n+              ' ') {\n             builder.append(' ');\n           }\n           builder.append(toString(token));\n-\n           line = stream.getRemainingJSDocLine();\n \n           if (option != WhitespaceOption.PRESERVE) {\n@@ -1423,10 +1439,9 @@ public final class JsDocInfoParser {\n           }\n \n           builder.append(line);\n+          whitespaceStart = 1;\n           token = next();\n-      }\n-    } while (true);\n-  }\n+          break;\n \n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}