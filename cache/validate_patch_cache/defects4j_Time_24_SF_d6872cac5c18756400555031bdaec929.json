{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DateTimeField firstField = savedFields[0].iField;\n        if (firstField.getType() == DateTimeFieldType.monthOfYear() || firstField.getType() == DateTimeFieldType.dayOfMonth()) {\n            int year = iDefaultYear;\n            // validate day-of-month field for February\n            for (int i = 0; i < count; i++) {\n                DateTimeField field = savedFields[i].iField;\n                if (field.getType() == DateTimeFieldType.dayOfMonth()) {\n                    int day = savedFields[i].iValue;\n                    if (day > 28) {\n                        DateTimeFieldType monthField = DateTimeFieldType.monthOfYear();\n                        Integer monthInt = null;\n                        for (int j = 0; j < count; j++) {\n                            if (savedFields[j].iField == monthField) {\n                                monthInt = savedFields[j].iValue;\n                                break;\n                            }\n                        }\n                        if (monthInt == null) {\n                            throw new IllegalArgumentException(\"Missing month field\");\n                        }\n                        int month = monthInt.intValue();\n                        if (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) {\n                            day = 30;\n                        } else if (day > 29) {\n                            if (!isLeapYear(year)) {\n                                day = 28;\n                            } else {\n                                day = 29;\n                            }\n                        }\n                        savedFields[i] = savedFields[i].withValue(day);\n                    }\n                } else if (field.getType() == DateTimeFieldType.year()) {\n                    year = savedFields[i].iValue;\n                }\n            }\n            saveField(DateTimeFieldType.year(), year);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\nprivate boolean isLeapYear(int year) {\n    return (year & 3) == 0 && (year % 100 != 0 || year % 400 == 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..331f49e3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,89 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DateTimeField firstField = savedFields[0].iField;\n+        if (firstField.getType() == DateTimeFieldType.monthOfYear() || firstField.getType() == DateTimeFieldType.dayOfMonth()) {\n+            int year = iDefaultYear;\n+            // validate day-of-month field for February\n+            for (int i = 0; i < count; i++) {\n+                DateTimeField field = savedFields[i].iField;\n+                if (field.getType() == DateTimeFieldType.dayOfMonth()) {\n+                    int day = savedFields[i].iValue;\n+                    if (day > 28) {\n+                        DateTimeFieldType monthField = DateTimeFieldType.monthOfYear();\n+                        Integer monthInt = null;\n+                        for (int j = 0; j < count; j++) {\n+                            if (savedFields[j].iField == monthField) {\n+                                monthInt = savedFields[j].iValue;\n+                                break;\n+                            }\n+                        }\n+                        if (monthInt == null) {\n+                            throw new IllegalArgumentException(\"Missing month field\");\n+                        }\n+                        int month = monthInt.intValue();\n+                        if (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) {\n+                            day = 30;\n+                        } else if (day > 29) {\n+                            if (!isLeapYear(year)) {\n+                                day = 28;\n+                            } else {\n+                                day = 29;\n+                            }\n+                        }\n+                        savedFields[i] = savedFields[i].withValue(day);\n+                    }\n+                } else if (field.getType() == DateTimeFieldType.year()) {\n+                    year = savedFields[i].iValue;\n+                }\n             }\n+            saveField(DateTimeFieldType.year(), year);\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n+\n+private boolean isLeapYear(int year) {\n+    return (year & 3) == 0 && (year % 100 != 0 || year % 400 == 0);\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: incomparable types: DateTimeField and DateTimeFieldType",
    "test_result": "ERROR"
}