{
    "patch": "private void readTypeVariables() {\n    Set<Type> bounds = new HashSet<>(Arrays.asList(typeVariable.getBounds()));\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        bounds.add(actualTypeArgument);\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) bound;\n            if (tv.getGenericDeclaration().equals(typeVariable.getGenericDeclaration())\n                    && tv.getName().equals(typeVariable.getName())) {\n                throw new IllegalArgumentException(\"Recursive type variable definition detected: \" + typeVariable);\n            }\n            readTypeVariablesForTypeVariable(tv);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}\n\nprivate void readTypeVariablesForTypeVariable(TypeVariable<?> tv) {\n    Set<Type> bounds = new HashSet<>(Arrays.asList(tv.getBounds()));\n    Type actualTypeArgument = getActualTypeArgumentFor(tv);\n    if (actualTypeArgument != null) {\n        bounds.add(actualTypeArgument);\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> nestedTv = (TypeVariable<?>) bound;\n            if (nestedTv.getGenericDeclaration().equals(tv.getGenericDeclaration())\n                    && nestedTv.getName().equals(tv.getName())) {\n                throw new IllegalArgumentException(\"Recursive type variable definition detected: \" + tv);\n            }\n            readTypeVariablesForTypeVariable(nestedTv);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3da7957c4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,46 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Set<Type> bounds = new HashSet<>(Arrays.asList(typeVariable.getBounds()));\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        bounds.add(actualTypeArgument);\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) bound;\n+            if (tv.getGenericDeclaration().equals(typeVariable.getGenericDeclaration())\n+                    && tv.getName().equals(typeVariable.getName())) {\n+                throw new IllegalArgumentException(\"Recursive type variable definition detected: \" + typeVariable);\n+            }\n+            readTypeVariablesForTypeVariable(tv);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesForTypeVariable(TypeVariable<?> tv) {\n+    Set<Type> bounds = new HashSet<>(Arrays.asList(tv.getBounds()));\n+    Type actualTypeArgument = getActualTypeArgumentFor(tv);\n+    if (actualTypeArgument != null) {\n+        bounds.add(actualTypeArgument);\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> nestedTv = (TypeVariable<?>) bound;\n+            if (nestedTv.getGenericDeclaration().equals(tv.getGenericDeclaration())\n+                    && nestedTv.getName().equals(tv.getName())) {\n+                throw new IllegalArgumentException(\"Recursive type variable definition detected: \" + tv);\n+            }\n+            readTypeVariablesForTypeVariable(nestedTv);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}