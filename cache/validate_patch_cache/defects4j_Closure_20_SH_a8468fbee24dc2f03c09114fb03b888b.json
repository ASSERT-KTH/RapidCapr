{
    "patch": "\n    // Only fold calls to the String constructor.\n    if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n      Node argument = callTarget.getNext();\n\n      // Only fold when there is one argument which is a primitive value.\n      if (argument != null && NodeUtil.isImmutableValue(argument) &&\n          !NodeUtil.mayHaveSideEffects(argument)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            argument.detachFromParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..7fe79cea 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,18 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+\n+    // Only fold calls to the String constructor.\n+    if (callTarget != null && callTarget.isName() &&\n+        callTarget.getString().equals(\"String\")) {\n+      Node argument = callTarget.getNext();\n+\n+      // Only fold when there is one argument which is a primitive value.\n+      if (argument != null && NodeUtil.isImmutableValue(argument) &&\n+          !NodeUtil.mayHaveSideEffects(argument)) {\n+        Node addition = IR.add(\n+            IR.string(\"\").srcref(callTarget),\n+            argument.detachFromParent());\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}