{
    "patch": "import org.json.JSONObject;\nimport java.util.Iterator;\n\npublic class MyUtils {\n\t\n\tpublic static double getTypedPercent(JSONObject js) {\n\t\tdouble typedCount = 0.0;\n\t\tdouble totalCount = (double) js.length();\n\t\tIterator<String> keys = js.keys();\n\t\twhile (keys.hasNext()) {\n\t\t\tString key = keys.next();\n\t\t\tif (js.optBoolean(key, false)) {\n\t\t\t\ttypedCount++;\n\t\t\t}\n\t\t}\n\t\treturn (typedCount / totalCount) * 100.0;\n\t}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..fa8441dc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONObject;\n+import java.util.Iterator;\n+\n+public class MyUtils {\n+\t\n+\tpublic static double getTypedPercent(JSONObject js) {\n+\t\tdouble typedCount = 0.0;\n+\t\tdouble totalCount = (double) js.length();\n+\t\tIterator<String> keys = js.keys();\n+\t\twhile (keys.hasNext()) {\n+\t\t\tString key = keys.next();\n+\t\t\tif (js.optBoolean(key, false)) {\n+\t\t\t\ttypedCount++;\n+\t\t\t}\n+\t\t}\n+\t\treturn (typedCount / totalCount) * 100.0;\n+\t}\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}