{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    double[] realEigenvalues = dec.getRealEigenvalues();\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        if (realEigenvalues[i] < 0) {\n            realEigenvalues[i] = 0;\n        }\n    }\n    return dec.getV().multiply(MatrixUtils.createRealDiagonalMatrix(FastMath.sqrt(realEigenvalues))).multiply(dec.getV().transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7ff7c0ed2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    double[] realEigenvalues = dec.getRealEigenvalues();\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        if (realEigenvalues[i] < 0) {\n+            realEigenvalues[i] = 0;\n+        }\n     }\n+    return dec.getV().multiply(MatrixUtils.createRealDiagonalMatrix(FastMath.sqrt(realEigenvalues))).multiply(dec.getV().transpose());\n+}\n }",
    "result_reason": "error: method sqrt in class FastMath cannot be applied to given types;",
    "test_result": "ERROR"
}