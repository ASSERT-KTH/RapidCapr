{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (lhs != null && lhs.getType() == Token.GETPROP) {\n      Node obj = lhs.getFirstChild();\n      Node prop = obj.getNext();\n\n      if (obj.getType() == Token.NAME && prop.getType() == Token.STRING &&\n          prop.getString().equals(\"prototype\")) {\n        return false;\n      }\n    }\n  }\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n          pType == Token.OBJECTLIT)) {\n      return false;\n    }\n  } else if (n.getType() == Token.OBJECTLIT) {\n    // Don't traverse object literals that are assigned to a prototype property.\n    // e.g., Foo.prototype = { ... }\n    Node gparent = parent.getParent();\n    if (gparent != null && gparent.getType() == Token.ASSIGN) {\n      Node lhs = gparent.getFirstChild();\n      if (lhs != null && lhs.getType() == Token.GETPROP) {\n        Node obj = lhs.getFirstChild();\n        Node prop = obj.getNext();\n\n        if (obj.getQualifiedName() != null && obj.getQualifiedName().endsWith(\".prototype\") &&\n            n.getFirstChild() != null && n.getFirstChild().getType() == Token.STRING) {\n          String protoPropName = n.getFirstChild().getString();\n          if (prop.getString().equals(protoPropName)) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..ef237223 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,60 +81,68 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    if (lhs != null && lhs.getType() == Token.GETPROP) {\n+      Node obj = lhs.getFirstChild();\n+      Node prop = obj.getNext();\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+      if (obj.getType() == Token.NAME && prop.getType() == Token.STRING &&\n+          prop.getString().equals(\"prototype\")) {\n         return false;\n       }\n     }\n+  }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n+\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. e.g.,\n+    // var a = function() { }; // or\n+    // function a() {} // or\n+    // a.x = function() {};\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+          pType == Token.OBJECTLIT)) {\n+      return false;\n+    }\n+  } else if (n.getType() == Token.OBJECTLIT) {\n+    // Don't traverse object literals that are assigned to a prototype property.\n+    // e.g., Foo.prototype = { ... }\n+    Node gparent = parent.getParent();\n+    if (gparent != null && gparent.getType() == Token.ASSIGN) {\n+      Node lhs = gparent.getFirstChild();\n+      if (lhs != null && lhs.getType() == Token.GETPROP) {\n+        Node obj = lhs.getFirstChild();\n+        Node prop = obj.getNext();\n+\n+        if (obj.getQualifiedName() != null && obj.getQualifiedName().endsWith(\".prototype\") &&\n+            n.getFirstChild() != null && n.getFirstChild().getType() == Token.STRING) {\n+          String protoPropName = n.getFirstChild().getString();\n+          if (prop.getString().equals(protoPropName)) {\n             return false;\n           }\n+        }\n       }\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}