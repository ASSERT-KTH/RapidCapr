{
    "patch": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Save the original DST state and hour value\n    boolean originalDst = val.getTimeZone().inDaylightTime(val.getTime());\n    int originalHour = val.get(Calendar.HOUR_OF_DAY);\n\n    // Various fields have different rules for rounding and truncation\n    switch (field) {\n        case Calendar.MILLISECOND:\n            val.set(Calendar.MILLISECOND, 0);\n            break;\n        case Calendar.SECOND:\n            val.set(Calendar.MILLISECOND, 0);\n            val.set(Calendar.SECOND, 0);\n            break;\n        case Calendar.MINUTE:\n            val.set(Calendar.MILLISECOND, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MINUTE, 0);\n            break;\n        case Calendar.HOUR_OF_DAY:\n            val.set(Calendar.MILLISECOND, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MINUTE, 0);\n            if (round && val.get(Calendar.HOUR_OF_DAY) >= 12) {\n                // Round up to the next hour\n                val.add(Calendar.HOUR_OF_DAY, 1);\n            } else {\n                val.set(Calendar.HOUR_OF_DAY, 0);\n            }\n            break;\n        case Calendar.DAY_OF_MONTH:\n        case Calendar.DATE:\n            val.set(Calendar.MILLISECOND, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.DATE, 1);\n            if (round && val.get(Calendar.MONTH) == Calendar.FEBRUARY && val.get(Calendar.DATE) >= 15) {\n                // Round up to February 29th in leap years\n                int year = val.get(Calendar.YEAR);\n                if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n                    val.set(Calendar.DATE, 29);\n                } else {\n                    val.set(Calendar.MONTH, Calendar.MARCH);\n                    val.set(Calendar.DATE, 1);\n                }\n            }\n            break;\n        case Calendar.MONTH:\n            val.set(Calendar.MILLISECOND, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.DATE, 1);\n            val.set(Calendar.MONTH, 0);\n            if (round && val.get(Calendar.MONTH) >= Calendar.JULY) {\n                // Round up to the next year\n                val.add(Calendar.YEAR, 1);\n            }\n            break;\n        case Calendar.YEAR:\n            val.set(Calendar.MILLISECOND, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.DATE, 1);\n            val.set(Calendar.MONTH, 0);\n            if (round && val.get(Calendar.MONTH) >= Calendar.JULY && val.get(Calendar.DATE) >= 2) {\n                // Round up to July 1st of the next year\n                val.add(Calendar.YEAR, 1);\n                val.set(Calendar.MONTH, Calendar.JULY);\n                val.set(Calendar.DATE, 1);\n            }\n            break;\n        default:\n            // Unsupported field\n            throw new IllegalArgumentException(\"Field \" + field + \" is not supported\");\n    }\n\n    // Handle DST transitions for hour-of-day field\n    if (field == Calendar.HOUR_OF_DAY) {\n        boolean currentDst = val.getTimeZone().inDaylightTime(val.getTime());\n        if (originalDst != currentDst) {\n            // If the DST state has changed since the original calendar time,\n            // we need to adjust the hour value to account for the DST transition\n            int hourAdjustment = currentDst ? 1 : -1;\n            val.add(Calendar.HOUR_OF_DAY, hourAdjustment);\n        }\n    }\n\n    // Handle special cases that occur after rounding and truncation\n    if (field == Calendar.MONTH && val.get(Calendar.MONTH) == Calendar.FEBRUARY && val.get(Calendar.DATE) == 29) {\n        int year = val.get(Calendar.YEAR);\n        if (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0)) {\n            // Round February 29th in non-leap years to March 1st\n            val.set(Calendar.MONTH, Calendar.MARCH);\n            val.set(Calendar.DATE, 1);\n        }\n    }\n\n    if (field == Calendar.YEAR && val.get(Calendar.MONTH) == Calendar.JULY && val.get(Calendar.DATE) == 1) {\n        boolean currentDst = val.getTimeZone().inDaylightTime(val.getTime());\n        Calendar nextYear = (Calendar) val.clone();\n        nextYear.add(Calendar.YEAR, 1);\n        nextYear.set(Calendar.MONTH, Calendar.JANUARY);\n        nextYear.set(Calendar.DATE, 1);\n        boolean nextYearDst = nextYear.getTimeZone().inDaylightTime(nextYear.getTime());\n        if (!currentDst && nextYearDst) {\n            // Adjust July 1st to the equivalent local time during DST\n            int offsetMillis = nextYear.getTimeZone().getOffset(nextYear.getTimeInMillis()) - val.getTimeZone().getOffset(val.getTimeInMillis());\n            val.add(Calendar.MILLISECOND, offsetMillis);\n        } else if (currentDst && !nextYearDst) {\n            // Adjust July 1st to the equivalent local time outside of DST\n            int offsetMillis = val.getTimeZone().getOffset(val.getTimeInMillis()) - nextYear.getTimeZone().getOffset(nextYear.getTimeInMillis());\n            val.add(Calendar.MILLISECOND, offsetMillis);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..cc57398e 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,101 +616,128 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n-        }\n-        \n+private static void modify(Calendar val, int field, boolean round) {\n+    if (val.get(Calendar.YEAR) > 280000000) {\n+        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+    }\n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n+    // Save the original DST state and hour value\n+    boolean originalDst = val.getTimeZone().inDaylightTime(val.getTime());\n+    int originalHour = val.get(Calendar.HOUR_OF_DAY);\n+\n+    // Various fields have different rules for rounding and truncation\n+    switch (field) {\n+        case Calendar.MILLISECOND:\n+            val.set(Calendar.MILLISECOND, 0);\n+            break;\n+        case Calendar.SECOND:\n+            val.set(Calendar.MILLISECOND, 0);\n+            val.set(Calendar.SECOND, 0);\n+            break;\n+        case Calendar.MINUTE:\n+            val.set(Calendar.MILLISECOND, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            break;\n+        case Calendar.HOUR_OF_DAY:\n+            val.set(Calendar.MILLISECOND, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            if (round && val.get(Calendar.HOUR_OF_DAY) >= 12) {\n+                // Round up to the next hour\n+                val.add(Calendar.HOUR_OF_DAY, 1);\n+            } else {\n+                val.set(Calendar.HOUR_OF_DAY, 0);\n+            }\n+            break;\n+        case Calendar.DAY_OF_MONTH:\n+        case Calendar.DATE:\n+            val.set(Calendar.MILLISECOND, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.set(Calendar.DATE, 1);\n+            if (round && val.get(Calendar.MONTH) == Calendar.FEBRUARY && val.get(Calendar.DATE) >= 15) {\n+                // Round up to February 29th in leap years\n+                int year = val.get(Calendar.YEAR);\n+                if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n+                    val.set(Calendar.DATE, 29);\n+                } else {\n+                    val.set(Calendar.MONTH, Calendar.MARCH);\n+                    val.set(Calendar.DATE, 1);\n                 }\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n-                    break;\n+            break;\n+        case Calendar.MONTH:\n+            val.set(Calendar.MILLISECOND, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.set(Calendar.DATE, 1);\n+            val.set(Calendar.MONTH, 0);\n+            if (round && val.get(Calendar.MONTH) >= Calendar.JULY) {\n+                // Round up to the next year\n+                val.add(Calendar.YEAR, 1);\n             }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n+            break;\n+        case Calendar.YEAR:\n+            val.set(Calendar.MILLISECOND, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.set(Calendar.DATE, 1);\n+            val.set(Calendar.MONTH, 0);\n+            if (round && val.get(Calendar.MONTH) >= Calendar.JULY && val.get(Calendar.DATE) >= 2) {\n+                // Round up to July 1st of the next year\n+                val.add(Calendar.YEAR, 1);\n+                val.set(Calendar.MONTH, Calendar.JULY);\n+                val.set(Calendar.DATE, 1);\n             }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+            break;\n+        default:\n+            // Unsupported field\n+            throw new IllegalArgumentException(\"Field \" + field + \" is not supported\");\n+    }\n+\n+    // Handle DST transitions for hour-of-day field\n+    if (field == Calendar.HOUR_OF_DAY) {\n+        boolean currentDst = val.getTimeZone().inDaylightTime(val.getTime());\n+        if (originalDst != currentDst) {\n+            // If the DST state has changed since the original calendar time,\n+            // we need to adjust the hour value to account for the DST transition\n+            int hourAdjustment = currentDst ? 1 : -1;\n+            val.add(Calendar.HOUR_OF_DAY, hourAdjustment);\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+    }\n+\n+    // Handle special cases that occur after rounding and truncation\n+    if (field == Calendar.MONTH && val.get(Calendar.MONTH) == Calendar.FEBRUARY && val.get(Calendar.DATE) == 29) {\n+        int year = val.get(Calendar.YEAR);\n+        if (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0)) {\n+            // Round February 29th in non-leap years to March 1st\n+            val.set(Calendar.MONTH, Calendar.MARCH);\n+            val.set(Calendar.DATE, 1);\n+        }\n+    }\n \n+    if (field == Calendar.YEAR && val.get(Calendar.MONTH) == Calendar.JULY && val.get(Calendar.DATE) == 1) {\n+        boolean currentDst = val.getTimeZone().inDaylightTime(val.getTime());\n+        Calendar nextYear = (Calendar) val.clone();\n+        nextYear.add(Calendar.YEAR, 1);\n+        nextYear.set(Calendar.MONTH, Calendar.JANUARY);\n+        nextYear.set(Calendar.DATE, 1);\n+        boolean nextYearDst = nextYear.getTimeZone().inDaylightTime(nextYear.getTime());\n+        if (!currentDst && nextYearDst) {\n+            // Adjust July 1st to the equivalent local time during DST\n+            int offsetMillis = nextYear.getTimeZone().getOffset(nextYear.getTimeInMillis()) - val.getTimeZone().getOffset(val.getTimeInMillis());\n+            val.add(Calendar.MILLISECOND, offsetMillis);\n+        } else if (currentDst && !nextYearDst) {\n+            // Adjust July 1st to the equivalent local time outside of DST\n+            int offsetMillis = val.getTimeZone().getOffset(val.getTimeInMillis()) - nextYear.getTimeZone().getOffset(nextYear.getTimeInMillis());\n+            val.add(Calendar.MILLISECOND, offsetMillis);\n+        }\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}