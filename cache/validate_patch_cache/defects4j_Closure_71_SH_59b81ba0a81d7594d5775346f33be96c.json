{
    "patch": "      boolean isOverride = false;\n      if (t.inGlobalScope()) {\n        Node maybeAssign = parent;\n        while (!maybeAssign.isScript()) {\n          if (maybeAssign.getType() == Token.ASSIGN) {\n            isOverride = maybeAssign.getFirstChild() == getprop;\n            break;\n          }\n          maybeAssign = maybeAssign.getParent();\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..52b0a480 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,17 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      if (t.inGlobalScope()) {\n+        Node maybeAssign = parent;\n+        while (!maybeAssign.isScript()) {\n+          if (maybeAssign.getType() == Token.ASSIGN) {\n+            isOverride = maybeAssign.getFirstChild() == getprop;\n+            break;\n+          }\n+          maybeAssign = maybeAssign.getParent();\n+        }\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}