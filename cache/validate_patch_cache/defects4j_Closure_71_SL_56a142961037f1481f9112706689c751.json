{
    "patch": "      boolean isOverride = false;\n      Var var = t.getScope().getVar(propertyName);\n      if (var != null) {\n        if (var.isExtern())\n          return;\n        if (var.getNameNode().getParent() == parent &&\n            var.getNameNode().getNext() == getprop) {\n          isOverride = true;\n        }\n      } else if (t.inGlobalScope() && parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop) {\n        boolean canOverride =\n            !getprop.getBooleanProp(Node.IS_CONSTANT_NAME) &&\n            Modifier.isProtected(Modifier.forNode(getprop));\n        isOverride = canOverride && \n            objectType.getOwnPropertyJSDocInfo(propertyName) != null;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..d9179947 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,23 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      Var var = t.getScope().getVar(propertyName);\n+      if (var != null) {\n+        if (var.isExtern())\n+          return;\n+        if (var.getNameNode().getParent() == parent &&\n+            var.getNameNode().getNext() == getprop) {\n+          isOverride = true;\n+        }\n+      } else if (t.inGlobalScope() && parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild() == getprop) {\n+        boolean canOverride =\n+            !getprop.getBooleanProp(Node.IS_CONSTANT_NAME) &&\n+            Modifier.isProtected(Modifier.forNode(getprop));\n+        isOverride = canOverride && \n+            objectType.getOwnPropertyJSDocInfo(propertyName) != null;\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}