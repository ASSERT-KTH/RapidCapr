{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        Node firstChild = n.getFirstChild();\n        Node secondChild = (firstChild == null) ? null : firstChild.getNext();\n        // check if block has exactly one child\n        if(secondChild == null) {\n            return false;\n        }else if(firstChild.getType() == Token.LABEL && secondChild.getType() == Token.EMPTY) {\n            secondChild = secondChild.getNext();\n        }\n        return (secondChild.getType() == Token.FUNCTION || secondChild.getType() == Token.DO);\n    } else if (n.getType() == Token.LABEL) {\n        Node labeledStatement = n.getFirstChild().getNext();\n        if (labeledStatement.getType() == Token.EMPTY) {\n            labeledStatement = labeledStatement.getNext();\n        }\n        return isOneExactlyFunctionOrDo(labeledStatement);\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..bcff8640 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,26 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.BLOCK) {\n+        Node firstChild = n.getFirstChild();\n+        Node secondChild = (firstChild == null) ? null : firstChild.getNext();\n+        // check if block has exactly one child\n+        if(secondChild == null) {\n+            return false;\n+        }else if(firstChild.getType() == Token.LABEL && secondChild.getType() == Token.EMPTY) {\n+            secondChild = secondChild.getNext();\n+        }\n+        return (secondChild.getType() == Token.FUNCTION || secondChild.getType() == Token.DO);\n+    } else if (n.getType() == Token.LABEL) {\n+        Node labeledStatement = n.getFirstChild().getNext();\n+        if (labeledStatement.getType() == Token.EMPTY) {\n+            labeledStatement = labeledStatement.getNext();\n+        }\n+        return isOneExactlyFunctionOrDo(labeledStatement);\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}