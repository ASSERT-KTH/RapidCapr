{
    "patch": "      boolean isPrototypeAssignment = false;\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\") &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n          else if (llhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n          else if (llhs.getType() == Token.GETPROP) {\n            Node lllhs = llhs.getFirstChild();\n            if (lllhs.getLastChild().getString().equals(\"prototype\") &&\n              llhs.getLastChild().getString().equals(\"constructor\")) {\n              isPrototypeAssignment = true;\n            }\n          }\n        }\n      }\n      if (isPrototypeAssignment) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5c2d599a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      boolean isPrototypeAssignment = false;\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP) {\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\") &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeAssignment = true;\n+          }\n+          else if (llhs.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeAssignment = true;\n+          }\n+          else if (llhs.getType() == Token.GETPROP) {\n+            Node lllhs = llhs.getFirstChild();\n+            if (lllhs.getLastChild().getString().equals(\"prototype\") &&\n+              llhs.getLastChild().getString().equals(\"constructor\")) {\n+              isPrototypeAssignment = true;\n+            }\n+          }\n+        }\n+      }\n+      if (isPrototypeAssignment) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}