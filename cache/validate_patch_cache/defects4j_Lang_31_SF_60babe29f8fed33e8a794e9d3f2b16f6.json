{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int len = str.length();\n    final int searchLen = searchChars.length;\n    final int min = Character.MIN_SUPPLEMENTARY_CODE_POINT;\n    if (searchLen == 1) {\n        final char searchChar = searchChars[0];\n        if (searchChar < min) {\n            for (int i = 0; i < len; i++) {\n                if (str.charAt(i) == searchChar) {\n                    return true;\n                }\n            }\n        } else if (searchChar == Character.MIN_VALUE) {\n            return true;\n        } else {\n            // Supplemental character\n            for (int i = 0; i < len; ) {\n                int codepoint = str.codePointAt(i);\n                i += Character.charCount(codepoint);\n                if (codepoint == searchChar) {\n                    return true;\n                }\n            }\n        }\n    } else {\n        if (searchLen < Character.MIN_VALUE) {\n            // Only search the ASCII range\n            for (int i = 0; i < len; i++) {\n                char ch = str.charAt(i);\n                if (ch < min) {\n                    if (ArrayUtils.indexOf(searchChars, ch) >= 0) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            // Search for any of the Unicode characters\n            for (int i = 0; i < len; ) {\n                int codepoint = str.codePointAt(i);\n                i += Character.charCount(codepoint);\n                if (ArrayUtils.indexOf(searchChars, (char) codepoint) >= 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..04c5b9a2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,57 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int len = str.length();\n+    final int searchLen = searchChars.length;\n+    final int min = Character.MIN_SUPPLEMENTARY_CODE_POINT;\n+    if (searchLen == 1) {\n+        final char searchChar = searchChars[0];\n+        if (searchChar < min) {\n+            for (int i = 0; i < len; i++) {\n+                if (str.charAt(i) == searchChar) {\n+                    return true;\n+                }\n+            }\n+        } else if (searchChar == Character.MIN_VALUE) {\n+            return true;\n+        } else {\n+            // Supplemental character\n+            for (int i = 0; i < len; ) {\n+                int codepoint = str.codePointAt(i);\n+                i += Character.charCount(codepoint);\n+                if (codepoint == searchChar) {\n+                    return true;\n+                }\n+            }\n+        }\n+    } else {\n+        if (searchLen < Character.MIN_VALUE) {\n+            // Only search the ASCII range\n+            for (int i = 0; i < len; i++) {\n+                char ch = str.charAt(i);\n+                if (ch < min) {\n+                    if (ArrayUtils.indexOf(searchChars, ch) >= 0) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            // Search for any of the Unicode characters\n+            for (int i = 0; i < len; ) {\n+                int codepoint = str.codePointAt(i);\n+                i += Character.charCount(codepoint);\n+                if (ArrayUtils.indexOf(searchChars, (char) codepoint) >= 0) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}