{
    "patch": "    int numArgs = argList.getChildCount();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int numToStrip = 0;\n      for (int i = numArgs - 1; i >= 0; i--) {\n        Node currArg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(currArg.getString());\n        if (!referenced.contains(var)) {\n          numToStrip++;\n        } else {\n          break;\n        }\n      }\n\n      for (int i = 0; i < numToStrip; i++) {\n        argList.removeChildAt(numArgs - i - 1);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1ff1199b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    int numArgs = argList.getChildCount();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int numToStrip = 0;\n+      for (int i = numArgs - 1; i >= 0; i--) {\n+        Node currArg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(currArg.getString());\n+        if (!referenced.contains(var)) {\n+          numToStrip++;\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      for (int i = 0; i < numToStrip; i++) {\n+        argList.removeChildAt(numArgs - i - 1);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}