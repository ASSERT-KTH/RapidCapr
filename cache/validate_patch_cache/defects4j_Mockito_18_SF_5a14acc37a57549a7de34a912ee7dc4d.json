{
    "patch": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MyClass {\n\n    public static Map<String, List<Integer>> groupByFactors(int[] nums) {\n        Map<String, List<Integer>> factorsMap = new HashMap<>();\n\n        for (int num : nums) {\n            for (int i = 2; i <= num; i++) {\n                if (num % i == 0) {\n                    List<Integer> factors = factorsMap.getOrDefault(Integer.toString(i), new ArrayList<Integer>());\n                    factors.add(num);\n                    factorsMap.put(Integer.toString(i), factors);\n                }\n            }\n        }\n        return factorsMap;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..72d725a92 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,28 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class MyClass {\n+\n+    public static Map<String, List<Integer>> groupByFactors(int[] nums) {\n+        Map<String, List<Integer>> factorsMap = new HashMap<>();\n+\n+        for (int num : nums) {\n+            for (int i = 2; i <= num; i++) {\n+                if (num % i == 0) {\n+                    List<Integer> factors = factorsMap.getOrDefault(Integer.toString(i), new ArrayList<Integer>());\n+                    factors.add(num);\n+                    factorsMap.put(Integer.toString(i), factors);\n+                }\n+            }\n+        }\n+        return factorsMap;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}