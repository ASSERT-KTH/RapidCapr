{
    "patch": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String js = \"function hello() { console.log(\\\"Hello World!\\\"); }\";\n        System.out.println(getTypedPercent(js));\n    }\n\n    public static double getTypedPercent(String js) {\n        String[] tokens = js.split(\"[ \\n]\");\n        Stack<String> stack = new Stack<>();\n\n        for (String token : tokens) {\n            if (token.equals(\"(\")) {\n                stack.push(token);\n            } else if (token.equals(\")\")) {\n                if (stack.isEmpty() || !stack.peek().equals(\"(\")) {\n                    return 0;\n                } else {\n                    stack.pop();\n                }\n            } else {\n                int index = token.indexOf(\":\");\n                if (index != -1) {\n                    String type = token.substring(index + 1);\n                    if (!type.equals(\"string\")) {\n                        return 0;\n                    }\n                }\n            }\n        }\n        if (stack.isEmpty()) {\n            return 100 * (1 - (double)Collections.frequency(Arrays.asList(tokens), \":\") / tokens.length);\n        } else {\n            return 0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..bc184c8f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import java.util.*;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        String js = \"function hello() { console.log(\\\"Hello World!\\\"); }\";\n+        System.out.println(getTypedPercent(js));\n+    }\n+\n+    public static double getTypedPercent(String js) {\n+        String[] tokens = js.split(\"[ \\n]\");\n+        Stack<String> stack = new Stack<>();\n+\n+        for (String token : tokens) {\n+            if (token.equals(\"(\")) {\n+                stack.push(token);\n+            } else if (token.equals(\")\")) {\n+                if (stack.isEmpty() || !stack.peek().equals(\"(\")) {\n+                    return 0;\n+                } else {\n+                    stack.pop();\n+                }\n+            } else {\n+                int index = token.indexOf(\":\");\n+                if (index != -1) {\n+                    String type = token.substring(index + 1);\n+                    if (!type.equals(\"string\")) {\n+                        return 0;\n+                    }\n+                }\n+            }\n+        }\n+        if (stack.isEmpty()) {\n+            return 100 * (1 - (double)Collections.frequency(Arrays.asList(tokens), \":\") / tokens.length);\n+        } else {\n+            return 0;\n+        }\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}