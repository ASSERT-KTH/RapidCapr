{
    "patch": "if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype,\n    // unless the function has a `@this` annotation or is assigned to a\n    // prototype property.\n    boolean isPrototypeProperty = false;\n    Node current = parent;\n    while (current != null && !isPrototypeProperty) {\n      if (NodeUtil.isGet(current)) {\n        Node getTarget = current.getFirstChild();\n        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n          // The function is being lent to a prototype.\n          isPrototypeProperty = true;\n          if (!jsDocHasThisType(jsDoc)) {\n            // We only want to traverse this function if it has a `@this`\n            // annotation.\n            return false;\n          }\n        }\n      }\n      current = current.getParent();\n    }\n    if (!isPrototypeProperty) {\n      // The function is not being lent to a prototype. We can traverse it.\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n    }\n  } else if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n    if (lhs.getType() == Token.GETPROP &&\n        lhs.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n    if (n == lhs && lhs.getType() == Token.NAME) {\n      return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b39ca063 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,62 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.isInterface() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n+\n+    // Don't traverse functions that are getting lent to a prototype,\n+    // unless the function has a `@this` annotation or is assigned to a\n+    // prototype property.\n+    boolean isPrototypeProperty = false;\n+    Node current = parent;\n+    while (current != null && !isPrototypeProperty) {\n+      if (NodeUtil.isGet(current)) {\n+        Node getTarget = current.getFirstChild();\n+        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+          // The function is being lent to a prototype.\n+          isPrototypeProperty = true;\n+          if (!jsDocHasThisType(jsDoc)) {\n+            // We only want to traverse this function if it has a `@this`\n+            // annotation.\n+            return false;\n+          }\n+        }\n+      }\n+      current = current.getParent();\n+    }\n+    if (!isPrototypeProperty) {\n+      // The function is not being lent to a prototype. We can traverse it.\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+    }\n+  } else if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+    if (lhs.getType() == Token.GETPROP &&\n+        lhs.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n+    }\n+    if (n == lhs && lhs.getType() == Token.NAME) {\n+      return false;\n+    }\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}