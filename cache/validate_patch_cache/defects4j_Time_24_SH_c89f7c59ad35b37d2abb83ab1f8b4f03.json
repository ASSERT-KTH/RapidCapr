{
    "patch": "Arrays.sort(savedFields, 0, count);\nlong originalMillis = millis;\nfor (int i = 0; i < count; i++) {\n    DurationField field = savedFields[i].iField.getDurationField();\n    int compare = field.compareTo(savedFields[0].iField.getDurationField());\n    if (compare < 0) {\n        field = savedFields[0].iField.getDurationField();\n    } else if (compare > 0) {\n        continue;\n    }\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    if (field == DurationFieldType.days().getField(iChrono)\n            || field == DurationFieldType.months().getField(iChrono)) {\n        if (millis < originalMillis) {\n            originalMillis = millis;\n        }\n        try {\n            millis = savedFields[0].set(originalMillis, resetFields);\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..418b6705 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+Arrays.sort(savedFields, 0, count);\n+long originalMillis = millis;\n+for (int i = 0; i < count; i++) {\n+    DurationField field = savedFields[i].iField.getDurationField();\n+    int compare = field.compareTo(savedFields[0].iField.getDurationField());\n+    if (compare < 0) {\n+        field = savedFields[0].iField.getDurationField();\n+    } else if (compare > 0) {\n+        continue;\n+    }\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    if (field == DurationFieldType.days().getField(iChrono)\n+            || field == DurationFieldType.months().getField(iChrono)) {\n+        if (millis < originalMillis) {\n+            originalMillis = millis;\n+        }\n+        try {\n+            millis = savedFields[0].set(originalMillis, resetFields);\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2005-10-01T00:00:00.000Z> but was:<0001-01-01T00:00:00.000Z>",
    "test_result": "FAIL"
}