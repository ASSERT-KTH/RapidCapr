{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0) {\n   throw new MockitoException(\"Cannot extract the raw type from a type variable with no bounds. Type variable: \\\"\" + typeVariable.getTypeName() + \"\\\"\");\n}\nfor (Type type : bounds) {\n   if (type instanceof TypeVariable) {\n       readTypeVariables((TypeVariable<?>) type);\n   } else {\n       registerTypeVariablesOn(type);\n   }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..2a136b9e9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,22 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0) {\n+   throw new MockitoException(\"Cannot extract the raw type from a type variable with no bounds. Type variable: \\\"\" + typeVariable.getTypeName() + \"\\\"\");\n+}\n+for (Type type : bounds) {\n+   if (type instanceof TypeVariable) {\n+       readTypeVariables((TypeVariable<?>) type);\n+   } else {\n+       registerTypeVariablesOn(type);\n+   }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}