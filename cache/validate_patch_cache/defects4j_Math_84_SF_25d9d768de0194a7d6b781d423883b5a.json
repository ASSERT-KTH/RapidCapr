{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    final ReflectionSimplex reflectedSimplex = new ReflectionSimplex(simplex, getReflectionCheckPoint(), comparator);\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // Perform a reflection step\n        final RealPointValuePair reflected = reflectedSimplex.getReflection();\n        final RealPointValuePair[] r1;\n        if (comparator.compare(reflected, reflectedSimplex.getWorst()) < 0) {\n            final RealPointValuePair expanded = reflectedSimplex.getExpanded(reflected);\n            r1 = comparator.compare(expanded, reflected) < 0 ?\n                    expandedSimplex(reflectedSimplex, reflected, expanded, comparator) :\n                    reflectedSimplex(reflectedSimplex, reflected, comparator);\n        } else {\n            r1 = reflectedSimplex(reflectedSimplex, reflected, comparator);\n        }\n\n        final RealPointValuePair newBest = r1[0];\n        if (Math.abs(reflectedSimplex.getBest().getValue() - newBest.getValue()) < getTerminationRelativeTolerance()\n                * (Math.abs(reflectedSimplex.getBest().getValue()) + getTerminationAbsoluteTolerance())\n                || comparator.compare(newBest, reflectedSimplex.getBest()) == 0) {\n            if (r1 != reflectedSimplex.getPoints()) {\n                // Copy the iteration simplex\n                System.arraycopy(r1, 0, simplex, 0, simplex.length);\n            }\n            return;\n        }\n        // Prepare next iteration\n        reflectedSimplex.updateSimplex(r1);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..80c300711 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,39 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    final ReflectionSimplex reflectedSimplex = new ReflectionSimplex(simplex, getReflectionCheckPoint(), comparator);\n+\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // Perform a reflection step\n+        final RealPointValuePair reflected = reflectedSimplex.getReflection();\n+        final RealPointValuePair[] r1;\n+        if (comparator.compare(reflected, reflectedSimplex.getWorst()) < 0) {\n+            final RealPointValuePair expanded = reflectedSimplex.getExpanded(reflected);\n+            r1 = comparator.compare(expanded, reflected) < 0 ?\n+                    expandedSimplex(reflectedSimplex, reflected, expanded, comparator) :\n+                    reflectedSimplex(reflectedSimplex, reflected, comparator);\n+        } else {\n+            r1 = reflectedSimplex(reflectedSimplex, reflected, comparator);\n+        }\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        final RealPointValuePair newBest = r1[0];\n+        if (Math.abs(reflectedSimplex.getBest().getValue() - newBest.getValue()) < getTerminationRelativeTolerance()\n+                * (Math.abs(reflectedSimplex.getBest().getValue()) + getTerminationAbsoluteTolerance())\n+                || comparator.compare(newBest, reflectedSimplex.getBest()) == 0) {\n+            if (r1 != reflectedSimplex.getPoints()) {\n+                // Copy the iteration simplex\n+                System.arraycopy(r1, 0, simplex, 0, simplex.length);\n             }\n-\n+            return;\n         }\n-\n+        // Prepare next iteration\n+        reflectedSimplex.updateSimplex(r1);\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}