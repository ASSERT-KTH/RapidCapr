{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            try {\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                throw e;\n            }\n            if (i + 1 < count) {\n                DurationField current = savedField.iField.getDurationField();\n                DateTimeField next = savedFields[i + 1].iField;\n                DurationField nextDuration = next.getDurationField();\n                if (compareReverse(current, nextDuration) > 0) {\n                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + current.getName() + \" -> \" + next.getName());\n                }\n                if (compareReverse(current, nextDuration) == 0) {\n                    long currentValue = savedField.get();\n                    long nextValue = savedFields[i + 1].get();\n                    if (currentValue >= nextValue) {\n                        String message = \"Fields invalid for parsing: \" + current.getName() + \" and \" + next.getName() + \" values overlap: \" + currentValue;\n                        if (text != null) {\n                            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                        }\n                        throw new IllegalArgumentException(message);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d37eb689 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                throw e;\n+            }\n+            if (i + 1 < count) {\n+                DurationField current = savedField.iField.getDurationField();\n+                DateTimeField next = savedFields[i + 1].iField;\n+                DurationField nextDuration = next.getDurationField();\n+                if (compareReverse(current, nextDuration) > 0) {\n+                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + current.getName() + \" -> \" + next.getName());\n+                }\n+                if (compareReverse(current, nextDuration) == 0) {\n+                    long currentValue = savedField.get();\n+                    long nextValue = savedFields[i + 1].get();\n+                    if (currentValue >= nextValue) {\n+                        String message = \"Fields invalid for parsing: \" + current.getName() + \" and \" + next.getName() + \" values overlap: \" + currentValue;\n+                        if (text != null) {\n+                            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                        }\n+                        throw new IllegalArgumentException(message);\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}