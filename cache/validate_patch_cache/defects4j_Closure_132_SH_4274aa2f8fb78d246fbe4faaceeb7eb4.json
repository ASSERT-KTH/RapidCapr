{
    "patch": "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n      Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n      Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n      if (thenOp.getType() == elseOp.getType()) {\n        // if(x)a=1;else a=2; -> a=x?1:2;\n        if (NodeUtil.isAssignmentOp(thenOp) &&\n            (thenOp.getFirstChild().isName() ||\n             thenOp.getFirstChild().isGetProp()) &&\n            areNodesEqualForInlining(\n                thenOp.getFirstChild(),\n                elseOp.getFirstChild())) {\n          Node lhs = thenOp.getFirstChild();\n          if (!(NodeUtil.mayHaveSideEffects(lhs) ||\n                NodeUtil.mayHaveSideEffects(elseOp.getFirstChild()))) {\n            n.removeChild(cond);\n            Node assignName = lhs.detachFromParent();\n            Node thenExpr = thenOp.removeFirstChild();\n            Node elseExpr = elseOp.getLastChild().detachFromParent();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..6626716a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,24 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n+      Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n+      Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n+      if (thenOp.getType() == elseOp.getType()) {\n+        // if(x)a=1;else a=2; -> a=x?1:2;\n+        if (NodeUtil.isAssignmentOp(thenOp) &&\n+            (thenOp.getFirstChild().isName() ||\n+             thenOp.getFirstChild().isGetProp()) &&\n+            areNodesEqualForInlining(\n+                thenOp.getFirstChild(),\n+                elseOp.getFirstChild())) {\n+          Node lhs = thenOp.getFirstChild();\n+          if (!(NodeUtil.mayHaveSideEffects(lhs) ||\n+                NodeUtil.mayHaveSideEffects(elseOp.getFirstChild()))) {\n+            n.removeChild(cond);\n+            Node assignName = lhs.detachFromParent();\n+            Node thenExpr = thenOp.removeFirstChild();\n+            Node elseExpr = elseOp.getLastChild().detachFromParent();\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}