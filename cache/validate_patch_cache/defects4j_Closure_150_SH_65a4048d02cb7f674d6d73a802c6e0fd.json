{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        Node firstChild = n.getFirstChild();\n        boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n        if (isAnonymousFunction) {\n            boolean isDeclaration =\n                parent != null &&\n                (parent.getType() == Token.VAR ||\n                    parent.getType() == Token.EXPR_RESULT ||\n                    parent.getType() == Token.ASSIGN ||\n                    parent.getType() == Token.COLON);\n\n            boolean isExported =\n                NodeUtil.isExport(parent) ||\n                NodeUtil.isExport(parent.getParent());\n\n            // If the anonymous function is part of a declaration\n            // or an exported symbol, declare it.\n            if (isDeclaration || isExported) {\n                if (parent.getType() == Token.ASSIGN ||\n                    parent.getType() == Token.COLON) {\n                    parent.getParent().putBooleanProp(Node.DECLARE, true);\n                }\n                defineDeclaredFunction(n, parent);\n                break;\n            }\n        } else {\n            if (parent != null && parent.getType() == Token.NAME) {\n                return;\n            }\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    default:\n        if (NodeUtil.isStatement(n)) {\n            defineVar(n, parent);\n        }\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ac8b8201 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,52 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        Node firstChild = n.getFirstChild();\n+        boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n+        if (isAnonymousFunction) {\n+            boolean isDeclaration =\n+                parent != null &&\n+                (parent.getType() == Token.VAR ||\n+                    parent.getType() == Token.EXPR_RESULT ||\n+                    parent.getType() == Token.ASSIGN ||\n+                    parent.getType() == Token.COLON);\n+\n+            boolean isExported =\n+                NodeUtil.isExport(parent) ||\n+                NodeUtil.isExport(parent.getParent());\n+\n+            // If the anonymous function is part of a declaration\n+            // or an exported symbol, declare it.\n+            if (isDeclaration || isExported) {\n+                if (parent.getType() == Token.ASSIGN ||\n+                    parent.getType() == Token.COLON) {\n+                    parent.getParent().putBooleanProp(Node.DECLARE, true);\n+                }\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            }\n+        } else {\n+            if (parent != null && parent.getType() == Token.NAME) {\n+                return;\n+            }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    default:\n+        if (NodeUtil.isStatement(n)) {\n+            defineVar(n, parent);\n+        }\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}