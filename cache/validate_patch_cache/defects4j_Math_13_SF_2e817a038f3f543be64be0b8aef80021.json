{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    double maxEigenvalue = 0.0;\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        if (realEigenvalues[i] > maxEigenvalue) {\n            maxEigenvalue = realEigenvalues[i];\n        }\n    }\n    final double threshold = maxEigenvalue * 1e-6;\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        if (realEigenvalues[i] < threshold) {\n            realEigenvalues[i] = 0.0;\n        } else {\n            realEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n        }\n    }\n    final RealMatrix eigenvectors = dec.getV();\n    final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n    return eigenvectors.multiply(eigenvalueMatrix).multiply(eigenvectors.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2daeaa850 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    double maxEigenvalue = 0.0;\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        if (realEigenvalues[i] > maxEigenvalue) {\n+            maxEigenvalue = realEigenvalues[i];\n+        }\n+    }\n+    final double threshold = maxEigenvalue * 1e-6;\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        if (realEigenvalues[i] < threshold) {\n+            realEigenvalues[i] = 0.0;\n+        } else {\n+            realEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n+        }\n     }\n+    final RealMatrix eigenvectors = dec.getV();\n+    final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+    return eigenvectors.multiply(eigenvalueMatrix).multiply(eigenvectors.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}