{
    "patch": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop or function before it is\n  // assigned again.\n  for (BasicBlock block = ref.getBasicBlock();\n    block != null; block = block.getParent()) {\n    if (block.isLoop) {\n      return false;\n    } else if (block.isFunction) {\n      // Functions share a block with their declaration, which can be an\n      // assignment. To avoid thinking that the variable is assigned in these\n      // cases, skip this block and continue checking the parent block, unless\n      // this block ends with a return statement.\n      if (!block.getExit().endsWithReturn()) {\n        continue;\n      }\n      break;\n    } else if (block.isExceptionHandler()) {\n      return false;\n    }\n  }\n\n  // Finally, make sure variable is assigned outside of the function\n  if (references.indexOf(ref) < references.indexOf(getInitializingReference())) {\n    return false;\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c83b22fc 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,39 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n+\n+  // Make sure this assignment is not in a loop or function before it is\n+  // assigned again.\n+  for (BasicBlock block = ref.getBasicBlock();\n+    block != null; block = block.getParent()) {\n+    if (block.isLoop) {\n+      return false;\n+    } else if (block.isFunction) {\n+      // Functions share a block with their declaration, which can be an\n+      // assignment. To avoid thinking that the variable is assigned in these\n+      // cases, skip this block and continue checking the parent block, unless\n+      // this block ends with a return statement.\n+      if (!block.getExit().endsWithReturn()) {\n+        continue;\n+      }\n+      break;\n+    } else if (block.isExceptionHandler()) {\n+      return false;\n+    }\n+  }\n+\n+  // Finally, make sure variable is assigned outside of the function\n+  if (references.indexOf(ref) < references.indexOf(getInitializingReference())) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}