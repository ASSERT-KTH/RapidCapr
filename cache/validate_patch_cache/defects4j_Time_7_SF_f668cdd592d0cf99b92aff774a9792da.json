{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    long instantMillis = instant.getMillis();\n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {  \n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            int parsedOffset2 = zone.getOffset(bucket.computeMillis(true, text));\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            if (!parsedZone.equals(zone) && parsedOffset2 != parsedOffset) {\n                // if parsedOffset2 is different from parsedOffset, it means we have a\n                // DST transition - we need to try parsing again with the new offset\n                zone = parsedZone;\n                instantLocal = instantMillis + parsedZone.getOffset(instantMillis);\n                chrono = chrono.withZone(zone);\n                bucket = new DateTimeParserBucket(\n                        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n                newPos = parser.parseInto(bucket, text, newPos);\n                if (newPos >= 0) {\n                    instant.setMillis(bucket.computeMillis(true, text));\n                } else {\n                    instant.setMillis(instantMillis);\n                }\n            } else {\n                instant.setMillis(bucket.computeMillis(true, text));\n            }\n        } else {\n            instant.setMillis(bucket.computeMillis(true, text));\n            if (bucket.getZone() != null && !bucket.getZone().equals(zone)) {\n                chrono = chrono.withZone(bucket.getZone());\n                zone = bucket.getZone();\n                instantLocal = instantMillis + zone.getOffset(instantMillis);\n                bucket = new DateTimeParserBucket(\n                        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n                newPos = parser.parseInto(bucket, text, newPos);\n                if (newPos >= 0) {\n                    instant.setMillis(bucket.computeMillis(true, text));\n                } else {\n                    instant.setMillis(instantMillis);\n                }\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            } else {\n                instant.setZone(zone);\n            }\n        }\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..3fbab43c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,67 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    long instantMillis = instant.getMillis();\n+    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {  \n+        if (bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n+            int parsedOffset2 = zone.getOffset(bucket.computeMillis(true, text));\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+            if (!parsedZone.equals(zone) && parsedOffset2 != parsedOffset) {\n+                // if parsedOffset2 is different from parsedOffset, it means we have a\n+                // DST transition - we need to try parsing again with the new offset\n+                zone = parsedZone;\n+                instantLocal = instantMillis + parsedZone.getOffset(instantMillis);\n+                chrono = chrono.withZone(zone);\n+                bucket = new DateTimeParserBucket(\n+                        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                newPos = parser.parseInto(bucket, text, newPos);\n+                if (newPos >= 0) {\n+                    instant.setMillis(bucket.computeMillis(true, text));\n+                } else {\n+                    instant.setMillis(instantMillis);\n+                }\n+            } else {\n+                instant.setMillis(bucket.computeMillis(true, text));\n+            }\n+        } else {\n+            instant.setMillis(bucket.computeMillis(true, text));\n+            if (bucket.getZone() != null && !bucket.getZone().equals(zone)) {\n+                chrono = chrono.withZone(bucket.getZone());\n+                zone = bucket.getZone();\n+                instantLocal = instantMillis + zone.getOffset(instantMillis);\n+                bucket = new DateTimeParserBucket(\n+                        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                newPos = parser.parseInto(bucket, text, newPos);\n+                if (newPos >= 0) {\n+                    instant.setMillis(bucket.computeMillis(true, text));\n+                } else {\n+                    instant.setMillis(instantMillis);\n+                }\n+            }\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            } else {\n+                instant.setZone(zone);\n+            }\n         }\n-        return newPos;\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}