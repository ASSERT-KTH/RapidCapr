{
    "patch": "public static boolean containsAny(CharSequence cs, char... searchChars) {\n    if (cs == null || searchChars == null) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int index = -1;\n    char[] chars = cs.toString().toCharArray();\n    if (csLength > 0 && searchLength > 0) {\n        for (int i = 0; i < searchLength; i++) {\n            char searchChar = searchChars[i];\n            if (Character.isHighSurrogate(searchChar)) {\n                if (++i == searchLength) {\n                    return false;\n                }\n                char c2 = searchChars[i];\n                if (!Character.isLowSurrogate(c2)) {\n                    return false;\n                }\n                index = indexOf(chars, searchChar, c2, index + 1, csLength);\n            } else {\n                index = indexOf(chars, searchChar, index + 1, csLength);\n            }\n            if (index < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nprivate static int indexOf(char[] cs, char ch, int start, int end) {\n    if (start < 0) {\n        start = 0;\n    }\n    for (int i = start; i < end; i++) {\n        if (cs[i] == ch) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nprivate static int indexOf(char[] cs, char high, char low, int start, int end) {\n    if (start < 0) {\n        start = 0;\n    }\n    for (int i = start; i < end - 1; i++) {\n        if (cs[i] == high && cs[i + 1] == low) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..82a7f62a 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,61 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence cs, char... searchChars) {\n+    if (cs == null || searchChars == null) {\n+        return false;\n+    }\n+    int csLength = cs.length();\n+    int searchLength = searchChars.length;\n+    int index = -1;\n+    char[] chars = cs.toString().toCharArray();\n+    if (csLength > 0 && searchLength > 0) {\n+        for (int i = 0; i < searchLength; i++) {\n+            char searchChar = searchChars[i];\n+            if (Character.isHighSurrogate(searchChar)) {\n+                if (++i == searchLength) {\n+                    return false;\n+                }\n+                char c2 = searchChars[i];\n+                if (!Character.isLowSurrogate(c2)) {\n+                    return false;\n+                }\n+                index = indexOf(chars, searchChar, c2, index + 1, csLength);\n+            } else {\n+                index = indexOf(chars, searchChar, index + 1, csLength);\n+            }\n+            if (index < 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n+\n+private static int indexOf(char[] cs, char ch, int start, int end) {\n+    if (start < 0) {\n+        start = 0;\n+    }\n+    for (int i = start; i < end; i++) {\n+        if (cs[i] == ch) {\n+            return i;\n+        }\n+    }\n+    return -1;\n+}\n+\n+private static int indexOf(char[] cs, char high, char low, int start, int end) {\n+    if (start < 0) {\n+        start = 0;\n+    }\n+    for (int i = start; i < end - 1; i++) {\n+        if (cs[i] == high && cs[i + 1] == low) {\n+            return i;\n+        }\n+    }\n+    return -1;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}