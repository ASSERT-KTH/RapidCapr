{
    "patch": "        } else {\n            // if the difference between the local time and UTC is more than\n            // an hour, assume this is a DST adjustment even if the previous\n            // and next offsets are identical\n            if (Math.abs(offsetLocal - offsetAdjusted) > DateTimeConstants.MILLIS_PER_HOUR) {\n                if (offsetLocal > offsetAdjusted) {\n                    long prevTransitionMillis = previousTransition(instantAdjusted);\n                    int prevOffset = getOffset(prevTransitionMillis);\n                    if (offsetLocal > prevOffset) {\n                        return prevOffset;\n                    }\n                } else {\n                    long nextTransitionMillis = nextTransition(instantAdjusted);\n                    int nextOffset = getOffset(nextTransitionMillis);\n                    if (offsetLocal < nextOffset) {\n                        return nextOffset;\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..756c28e1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n+            // if the difference between the local time and UTC is more than\n+            // an hour, assume this is a DST adjustment even if the previous\n+            // and next offsets are identical\n+            if (Math.abs(offsetLocal - offsetAdjusted) > DateTimeConstants.MILLIS_PER_HOUR) {\n+                if (offsetLocal > offsetAdjusted) {\n+                    long prevTransitionMillis = previousTransition(instantAdjusted);\n+                    int prevOffset = getOffset(prevTransitionMillis);\n+                    if (offsetLocal > prevOffset) {\n+                        return prevOffset;\n+                    }\n+                } else {\n+                    long nextTransitionMillis = nextTransition(instantAdjusted);\n+                    int nextOffset = getOffset(nextTransitionMillis);\n+                    if (offsetLocal < nextOffset) {\n+                        return nextOffset;\n+                    }\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}