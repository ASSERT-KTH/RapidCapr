{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    Node root = t.getScope().getRootNode();\n    if (n.isFunction()) {\n      // JSDoc for this function.\n      JSDocInfo docs = NodeUtil.getBestJSDocInfo(n);\n      // If a function is annotated with @this, we assume that it could be\n      // called with an arbitrary context object. Hence, no assumptions can\n      // be made about the type of 'this' within this function.\n      // If a function is annotated with @constructor, then we can assume\n      // that 'this' refers to an instance of the class and not the global 'this'.\n      // If a function is annotated with @interface, then we can assume that\n      // 'this' refers to an object literal and not the global 'this'.\n      // If a function is annotated with @private, then we can assume that\n      // 'this' refers to an object literal and not the global 'this'.\n      // If a function is annotated with @override, then the function *must*\n      // be an implementation of a superclass member function, so 'this'\n      // should be of the same type as the other members of its class.\n      if (docs != null\n          && (docs.isThisType()\n              || docs.isConstructor()\n              || docs.isInterface()\n              || docs.isPrivate()\n              || docs.isOverride())) {\n        return false;\n      }\n\n      // Only need to traverse into functions whose return values are used in\n      // some way.\n      if (!NodeUtil.functionHasSideEffects(n)) {\n        return false;\n      }\n\n      // If the function definition is nested directly inside an object\n      // literal that's part of an assign or var statement, we don't need to\n      // traverse into it because this object literal will be traversed later,\n      // and it contains the entire function definition.\n      if (n.getParent().isAssign() || n.getParent().isVar()) {\n        if (n.getGrandparent() != null\n            && n.getGrandparent().isObjectType()) {\n          if (n.getGrandparent().isFirstChildOf(parent)) {\n            return false;\n          }\n        }\n      }\n\n      return NodeUtil.isFunctionExpression(n)\n          || NodeUtil.isFunctionDeclaration(n)\n          || NodeUtil.isMethodDeclaration(n)\n          || NodeUtil.isArrowFunction(n)\n          || NodeUtil.isConstructorCall(n);\n    } else {\n      switch (parent.getToken()) {\n        case AWAIT:\n          // When we see \"await f(x)\", we don't know if f() returns a Promise, a\n          // Thenable, or something else. To be on the safe side, we'll check any nodes\n          // underneath f() for possibly setting a type on the global \"this\" object,\n          // but we won't traverse direct children of the AWAIT node.\n          return false;\n\n        case NEW:\n          // Only traverse the children of the NEW node that we know are part of\n          // the constructed object.\n          return n == parent.getSecondChild();\n\n        default:\n          break;\n      }\n\n      return NodeUtil.mayHaveSideEffects(n, t.getCompiler())\n          || n == root\n          || NodeUtil.isExpressionStatement(parent)\n          || NodeUtil.isAssignTarget(n)\n          || NodeUtil.mayBeObjectLitKey(n, parent);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..88b8ffe2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,58 +81,80 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    Node root = t.getScope().getRootNode();\n+    if (n.isFunction()) {\n+      // JSDoc for this function.\n+      JSDocInfo docs = NodeUtil.getBestJSDocInfo(n);\n+      // If a function is annotated with @this, we assume that it could be\n+      // called with an arbitrary context object. Hence, no assumptions can\n+      // be made about the type of 'this' within this function.\n+      // If a function is annotated with @constructor, then we can assume\n+      // that 'this' refers to an instance of the class and not the global 'this'.\n+      // If a function is annotated with @interface, then we can assume that\n+      // 'this' refers to an object literal and not the global 'this'.\n+      // If a function is annotated with @private, then we can assume that\n+      // 'this' refers to an object literal and not the global 'this'.\n+      // If a function is annotated with @override, then the function *must*\n+      // be an implementation of a superclass member function, so 'this'\n+      // should be of the same type as the other members of its class.\n+      if (docs != null\n+          && (docs.isThisType()\n+              || docs.isConstructor()\n+              || docs.isInterface()\n+              || docs.isPrivate()\n+              || docs.isOverride())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+      // Only need to traverse into functions whose return values are used in\n+      // some way.\n+      if (!NodeUtil.functionHasSideEffects(n)) {\n         return false;\n       }\n-    }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+      // If the function definition is nested directly inside an object\n+      // literal that's part of an assign or var statement, we don't need to\n+      // traverse into it because this object literal will be traversed later,\n+      // and it contains the entire function definition.\n+      if (n.getParent().isAssign() || n.getParent().isVar()) {\n+        if (n.getGrandparent() != null\n+            && n.getGrandparent().isObjectType()) {\n+          if (n.getGrandparent().isFirstChildOf(parent)) {\n             return false;\n           }\n+        }\n       }\n-    }\n \n-    return true;\n+      return NodeUtil.isFunctionExpression(n)\n+          || NodeUtil.isFunctionDeclaration(n)\n+          || NodeUtil.isMethodDeclaration(n)\n+          || NodeUtil.isArrowFunction(n)\n+          || NodeUtil.isConstructorCall(n);\n+    } else {\n+      switch (parent.getToken()) {\n+        case AWAIT:\n+          // When we see \"await f(x)\", we don't know if f() returns a Promise, a\n+          // Thenable, or something else. To be on the safe side, we'll check any nodes\n+          // underneath f() for possibly setting a type on the global \"this\" object,\n+          // but we won't traverse direct children of the AWAIT node.\n+          return false;\n+\n+        case NEW:\n+          // Only traverse the children of the NEW node that we know are part of\n+          // the constructed object.\n+          return n == parent.getSecondChild();\n+\n+        default:\n+          break;\n+      }\n+\n+      return NodeUtil.mayHaveSideEffects(n, t.getCompiler())\n+          || n == root\n+          || NodeUtil.isExpressionStatement(parent)\n+          || NodeUtil.isAssignTarget(n)\n+          || NodeUtil.mayBeObjectLitKey(n, parent);\n+    }\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}