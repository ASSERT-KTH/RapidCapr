{
    "patch": "            int validCount = 0;\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis != millis) {\n                    // if changing the year field didn't help, try changing the month/day\n                    if (i == 0) {\n                        DurationField months = DurationFieldType.months().getField(iChrono);\n                        DurationField days = DurationFieldType.days().getField(iChrono);\n                        DurationField first = savedFields[0].iField.getDurationField();\n                        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                            savedFields[i].iField.set(newMillis, iDefaultYear);\n                            if (!isValid(saveField(DateTimeFieldType.year(), iDefaultYear), savedFields, i + 1)) {\n                                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n                            }\n                            millis = computeMillis(false, text);\n                            break;\n                        }\n                    }\n                    // if changing a non-year/millisecond field, try changing the year\n                    if (i > 0 && i < count - 1) {\n                        if (compareReverse(savedFields[i - 1].iField.getDurationField(), DurationFieldType.years().getField(iChrono)) != 0 ||\n                            compareReverse(savedFields[i + 1].iField.getDurationField(), DurationFieldType.millis().getField(iChrono)) != 0) {\n                            continue;\n                        }\n                        DurationField yearField = DurationFieldType.years().getField(iChrono);\n                        int year = yearField.get(newMillis);\n                        if (year != iDefaultYear) {\n                            savedFields[i].iField.set(newMillis, iDefaultYear);\n                            if (!isValid(saveField(yearField, iDefaultYear), savedFields, i + 1)) {\n                                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n                            }\n                            millis = computeMillis(false, text);\n                            break;\n                        }\n                    }\n                    // if changing the millisecond field, try changing the year and/or non-millisecond field\n                    if (i == count - 1) {\n                        int lastFieldIndex = i - 1;\n                        while (lastFieldIndex >= 0 && !savedFields[lastFieldIndex].iField.getDurationField().isPrecise()) {\n                            lastFieldIndex--;\n                        }\n                        if (lastFieldIndex >= 0) {\n                            DurationField yearField = DurationFieldType.years().getField(iChrono);\n                            if (compareReverse(savedFields[lastFieldIndex].iField.getDurationField(), yearField) != 0 ||\n                                compareReverse(savedFields[lastFieldIndex + 1].iField.getDurationField(), DurationFieldType.millis().getField(iChrono)) != 0) {\n                                continue;\n                            }\n                            int year = yearField.get(newMillis);\n                            if (year != iDefaultYear) {\n                                savedFields[i].iField.set(newMillis, iDefaultYear);\n                                if (!isValid(saveField(yearField, iDefaultYear), savedFields, i)) {\n                                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n                                }\n                                millis = computeMillis(false, text);\n                                break;\n                            }\n                        } else if (isValid(saveField(DateTimeFieldType.year(), iDefaultYear), savedFields, i + 1)) {\n                            millis = newMillis;\n                            validCount = i + 1;\n                        } else {\n                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n                        }\n                    }\n                } else {\n                    validCount = i + 1;\n                }\n            }\n            if (validCount < count) {\n                millis = computeMillis(false, text);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ad5ab1f9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,75 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            int validCount = 0;\n+            for (int i = 0; i < count; i++) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis != millis) {\n+                    // if changing the year field didn't help, try changing the month/day\n+                    if (i == 0) {\n+                        DurationField months = DurationFieldType.months().getField(iChrono);\n+                        DurationField days = DurationFieldType.days().getField(iChrono);\n+                        DurationField first = savedFields[0].iField.getDurationField();\n+                        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                            savedFields[i].iField.set(newMillis, iDefaultYear);\n+                            if (!isValid(saveField(DateTimeFieldType.year(), iDefaultYear), savedFields, i + 1)) {\n+                                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n+                            }\n+                            millis = computeMillis(false, text);\n+                            break;\n+                        }\n+                    }\n+                    // if changing a non-year/millisecond field, try changing the year\n+                    if (i > 0 && i < count - 1) {\n+                        if (compareReverse(savedFields[i - 1].iField.getDurationField(), DurationFieldType.years().getField(iChrono)) != 0 ||\n+                            compareReverse(savedFields[i + 1].iField.getDurationField(), DurationFieldType.millis().getField(iChrono)) != 0) {\n+                            continue;\n+                        }\n+                        DurationField yearField = DurationFieldType.years().getField(iChrono);\n+                        int year = yearField.get(newMillis);\n+                        if (year != iDefaultYear) {\n+                            savedFields[i].iField.set(newMillis, iDefaultYear);\n+                            if (!isValid(saveField(yearField, iDefaultYear), savedFields, i + 1)) {\n+                                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n+                            }\n+                            millis = computeMillis(false, text);\n+                            break;\n+                        }\n+                    }\n+                    // if changing the millisecond field, try changing the year and/or non-millisecond field\n+                    if (i == count - 1) {\n+                        int lastFieldIndex = i - 1;\n+                        while (lastFieldIndex >= 0 && !savedFields[lastFieldIndex].iField.getDurationField().isPrecise()) {\n+                            lastFieldIndex--;\n+                        }\n+                        if (lastFieldIndex >= 0) {\n+                            DurationField yearField = DurationFieldType.years().getField(iChrono);\n+                            if (compareReverse(savedFields[lastFieldIndex].iField.getDurationField(), yearField) != 0 ||\n+                                compareReverse(savedFields[lastFieldIndex + 1].iField.getDurationField(), DurationFieldType.millis().getField(iChrono)) != 0) {\n+                                continue;\n+                            }\n+                            int year = yearField.get(newMillis);\n+                            if (year != iDefaultYear) {\n+                                savedFields[i].iField.set(newMillis, iDefaultYear);\n+                                if (!isValid(saveField(yearField, iDefaultYear), savedFields, i)) {\n+                                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n+                                }\n+                                millis = computeMillis(false, text);\n+                                break;\n+                            }\n+                        } else if (isValid(saveField(DateTimeFieldType.year(), iDefaultYear), savedFields, i + 1)) {\n+                            millis = newMillis;\n+                            validCount = i + 1;\n+                        } else {\n+                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to disallowed field combination\");\n+                        }\n+                    }\n+                } else {\n+                    validCount = i + 1;\n+                }\n+            }\n+            if (validCount < count) {\n+                millis = computeMillis(false, text);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}