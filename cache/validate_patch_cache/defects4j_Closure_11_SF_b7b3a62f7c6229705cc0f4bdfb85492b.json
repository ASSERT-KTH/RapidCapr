{
    "patch": "public static String getprop(String prop) {\n    String result = null;\n    try{\n        Process process = Runtime.getRuntime().exec(\"getprop \" + prop);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        result = reader.readLine();\n        reader.close();\n        process.destroy();\n    } catch(Exception e) {\n        Log.e(\"getprop\", \"Failed to get property: \" + prop, e);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..8077f4eb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String prop) {\n+    String result = null;\n+    try{\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + prop);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+        result = reader.readLine();\n+        reader.close();\n+        process.destroy();\n+    } catch(Exception e) {\n+        Log.e(\"getprop\", \"Failed to get property: \" + prop, e);\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}