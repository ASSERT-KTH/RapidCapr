{
    "patch": "private void readTypeVariables() {\n    for (Type bound : typeVariable.getBounds()) {\n        registerTypeVariablesOn(bound);\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        return;\n    }\n    if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        TypeVariable<?>[] typeParameters = getTypeParametersFromActualTypeVariable(actualTypeVariable);\n        if (typeParameters == null) {\n           registerTypeVariablesOn(actualTypeArgument);\n        } else {\n            int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n            if (index >= 0) {\n                Type actualTypeArgumentForParameter = ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n                readTypeVariablesOn(actualTypeArgumentForParameter);\n            }\n        }\n    } else {\n        readTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate TypeVariable<?>[] getTypeParametersFromActualTypeVariable(TypeVariable<?> typeVariable) {\n    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n    if (genericDeclaration instanceof Class) {\n        Class<?> declaringClass = (Class<?>) genericDeclaration;\n        return declaringClass.getTypeParameters();\n    }\n    return null;\n}\n\nprivate void readTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n        for (Type argument : actualTypeArguments) {\n            readTypeVariablesOn(argument);\n        }\n    } else if (type instanceof TypeVariable) {\n        TypeVariable<?> variable = (TypeVariable<?>) type;\n        Type[] bounds = variable.getBounds();\n        if (bounds == null || bounds.length == 0) {\n            return;\n        }\n        for (Type bound : bounds) {\n            readTypeVariablesOn(bound);\n        }\n    }\n    registerTypeVariablesOn(type);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..ac77e11bb 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,59 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type bound : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(bound);\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        return;\n+    }\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        TypeVariable<?>[] typeParameters = getTypeParametersFromActualTypeVariable(actualTypeVariable);\n+        if (typeParameters == null) {\n+           registerTypeVariablesOn(actualTypeArgument);\n+        } else {\n+            int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n+            if (index >= 0) {\n+                Type actualTypeArgumentForParameter = ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n+                readTypeVariablesOn(actualTypeArgumentForParameter);\n+            }\n+        }\n+    } else {\n+        readTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private TypeVariable<?>[] getTypeParametersFromActualTypeVariable(TypeVariable<?> typeVariable) {\n+    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n+    if (genericDeclaration instanceof Class) {\n+        Class<?> declaringClass = (Class<?>) genericDeclaration;\n+        return declaringClass.getTypeParameters();\n+    }\n+    return null;\n+}\n+\n+private void readTypeVariablesOn(Type type) {\n+    if (type instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n+        for (Type argument : actualTypeArguments) {\n+            readTypeVariablesOn(argument);\n+        }\n+    } else if (type instanceof TypeVariable) {\n+        TypeVariable<?> variable = (TypeVariable<?>) type;\n+        Type[] bounds = variable.getBounds();\n+        if (bounds == null || bounds.length == 0) {\n+            return;\n+        }\n+        for (Type bound : bounds) {\n+            readTypeVariablesOn(bound);\n+        }\n+    }\n+    registerTypeVariablesOn(type);\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}