{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal > offsetAdjusted) {\n        // Gap in spring\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {\n            return offsetLocal;\n        } else if (offsetLocal == 0 && offsetAdjusted == 1 && (instantLocal - prevLocal) == DateTimeConstants.MILLIS_PER_HOUR) {\n            return 0;\n        }\n    } else {\n        // Overlap in autumn\n        boolean ambiguous = false;\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {\n            // The offsets differ, so this is an overlap in autumn\n            ambiguous = true;\n        } else if (offsetLocal == 0 && offsetAdjusted == -1 && (nextLocal - instantAdjusted) == DateTimeConstants.MILLIS_PER_HOUR) {\n            // This is the last instant of daylight saving time in a zone with DST, and the\n            // period between instantLocal and nextLocal is exactly one hour. Instead of actually\n            // being ambiguous, we will select the earlier of the two valid offsets for the local time.\n            ambiguous = true;\n        }\n        if (ambiguous) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n            if (beforeDiff > afterDiff) {\n                return offsetLocal;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3aa74a10 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal > offsetAdjusted) {\n+        // Gap in spring\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {\n+            return offsetLocal;\n+        } else if (offsetLocal == 0 && offsetAdjusted == 1 && (instantLocal - prevLocal) == DateTimeConstants.MILLIS_PER_HOUR) {\n+            return 0;\n+        }\n+    } else {\n+        // Overlap in autumn\n+        boolean ambiguous = false;\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {\n+            // The offsets differ, so this is an overlap in autumn\n+            ambiguous = true;\n+        } else if (offsetLocal == 0 && offsetAdjusted == -1 && (nextLocal - instantAdjusted) == DateTimeConstants.MILLIS_PER_HOUR) {\n+            // This is the last instant of daylight saving time in a zone with DST, and the\n+            // period between instantLocal and nextLocal is exactly one hour. Instead of actually\n+            // being ambiguous, we will select the earlier of the two valid offsets for the local time.\n+            ambiguous = true;\n+        }\n+        if (ambiguous) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n+            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n+            if (beforeDiff > afterDiff) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}