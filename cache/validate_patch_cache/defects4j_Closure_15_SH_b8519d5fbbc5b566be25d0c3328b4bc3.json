{
    "patch": "        // We care about calls to functions and function expressions that potentially modify\n        // dependent variables.\n        if (n.isCall() || n.isNew() || n.isDelProp()) {\n          return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Check if an expression is assigned to a mutable variable\n        if (n.isName() && NodeUtil.isLhs(n)) {\n          if (NodeUtil.isMutableAssignment(n)) {\n            return true;\n          }\n        }\n\n        // Recurse on child nodes\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n\n        return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..faee95bf 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,27 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // We care about calls to functions and function expressions that potentially modify\n+        // dependent variables.\n+        if (n.isCall() || n.isNew() || n.isDelProp()) {\n+          return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Check if an expression is assigned to a mutable variable\n+        if (n.isName() && NodeUtil.isLhs(n)) {\n+          if (NodeUtil.isMutableAssignment(n)) {\n+            return true;\n+          }\n+        }\n+\n+        // Recurse on child nodes\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+            return true;\n+          }\n+        }\n+\n+        return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}