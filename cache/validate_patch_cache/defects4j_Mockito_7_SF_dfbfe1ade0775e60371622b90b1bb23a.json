{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg == null) {\n        actualTypeArg = getDefaultActualTypeArgument(typeVariable);\n    }\n    \n    actualTypeArg = extractActualTypeArgument(actualTypeArg);\n    registerTypeVariablesOn(actualTypeArg);\n}\n\nprivate Type getDefaultActualTypeArgument(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    return bounds.length > 0 ? bounds[0] : Object.class;\n}\n\nprivate Type extractActualTypeArgument(Type actualTypeArg) {\n    while (actualTypeArg instanceof TypeVariable) {\n        TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArg;\n        actualTypeArg = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArg == null) {\n            actualTypeArg = getDefaultActualTypeArgument(typeVariable);\n        }\n    }\n\n    if (actualTypeArg instanceof WildcardType) {\n        WildcardType wildcardType = (WildcardType) actualTypeArg;\n        Type[] lowerBounds = wildcardType.getLowerBounds();\n        if (lowerBounds.length > 0) {\n            actualTypeArg = extractActualTypeArgument(lowerBounds[0]);\n        } else {\n            actualTypeArg = extractActualTypeArgument(wildcardType.getUpperBounds()[0]);\n        }\n    }\n\n    return actualTypeArg;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..83cd9409f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,47 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg == null) {\n+        actualTypeArg = getDefaultActualTypeArgument(typeVariable);\n+    }\n+    \n+    actualTypeArg = extractActualTypeArgument(actualTypeArg);\n+    registerTypeVariablesOn(actualTypeArg);\n+}\n+\n+private Type getDefaultActualTypeArgument(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    return bounds.length > 0 ? bounds[0] : Object.class;\n+}\n+\n+private Type extractActualTypeArgument(Type actualTypeArg) {\n+    while (actualTypeArg instanceof TypeVariable) {\n+        TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArg;\n+        actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArg == null) {\n+            actualTypeArg = getDefaultActualTypeArgument(typeVariable);\n+        }\n+    }\n+\n+    if (actualTypeArg instanceof WildcardType) {\n+        WildcardType wildcardType = (WildcardType) actualTypeArg;\n+        Type[] lowerBounds = wildcardType.getLowerBounds();\n+        if (lowerBounds.length > 0) {\n+            actualTypeArg = extractActualTypeArgument(lowerBounds[0]);\n+        } else {\n+            actualTypeArg = extractActualTypeArgument(wildcardType.getUpperBounds()[0]);\n+        }\n+    }\n+\n+    return actualTypeArg;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}