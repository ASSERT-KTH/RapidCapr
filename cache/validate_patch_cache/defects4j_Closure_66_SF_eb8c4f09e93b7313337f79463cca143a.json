{
    "patch": "public static double getTypedPercent(JsonObject json) {\n    if (json == null) {\n        return 0.0;\n    }\n    String valStr = json.getAsJsonPrimitive(\"typedValue\").getAsString();\n    String typeStr = json.getAsJsonPrimitive(\"type\").getAsString();\n    if (typeStr.equals(\"string\")) {\n        return 0.0;\n    } else if (typeStr.equals(\"number\")) {\n        double val = json.getAsJsonPrimitive(\"typedValue\").getAsDouble();\n        return val;\n    } else if (typeStr.equals(\"percentage\")) {\n        double val = Double.parseDouble(valStr.replace(\"%\", \"\"));\n        return val;\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e7301fc3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject json) {\n+    if (json == null) {\n+        return 0.0;\n+    }\n+    String valStr = json.getAsJsonPrimitive(\"typedValue\").getAsString();\n+    String typeStr = json.getAsJsonPrimitive(\"type\").getAsString();\n+    if (typeStr.equals(\"string\")) {\n+        return 0.0;\n+    } else if (typeStr.equals(\"number\")) {\n+        double val = json.getAsJsonPrimitive(\"typedValue\").getAsDouble();\n+        return val;\n+    } else if (typeStr.equals(\"percentage\")) {\n+        double val = Double.parseDouble(valStr.replace(\"%\", \"\"));\n+        return val;\n+    } else {\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}