{
    "patch": "public class EqualsBuilder {\n\n    private boolean isEquals = true;\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals && lhs != rhs) {\n            if (lhs == null || rhs == null) {\n                setEquals(false);\n            } else {\n                Class<?> lhsClass = lhs.getClass();\n                if (!lhsClass.isArray()) {\n                    isEquals = lhs.equals(rhs);\n                } else if (lhs.getClass() != rhs.getClass()) {\n                    setEquals(false);\n                } else if (lhs instanceof long[]) {\n                    append((long[]) lhs, (long[]) rhs);\n                } else if (lhs instanceof int[]) {\n                    append((int[]) lhs, (int[]) rhs);\n                } else if (lhs instanceof short[]) {\n                    append((short[]) lhs, (short[]) rhs);\n                } else if (lhs instanceof char[]) {\n                    append((char[]) lhs, (char[]) rhs);\n                } else if (lhs instanceof byte[]) {\n                    append((byte[]) lhs, (byte[]) rhs);\n                } else if (lhs instanceof double[]) {\n                    append((double[]) lhs, (double[]) rhs);\n                } else if (lhs instanceof float[]) {\n                    append((float[]) lhs, (float[]) rhs);\n                } else if (lhs instanceof boolean[]) {\n                    append((boolean[]) lhs, (boolean[]) rhs);\n                } else {\n                    // Not an array of primitives\n                    appendArray((Object[]) lhs, (Object[]) rhs);\n                }\n            }\n        }\n        return this;\n    }\n\n    private void appendArray(Object[] arr1, Object[] arr2) {\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n        } else {\n            for (int i = 0; i < arr1.length && isEquals; i++) {\n                append(arr1[i], arr2[i]);\n            }\n        }\n    }\n\n    private void append(boolean[] arr1, boolean[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = arr1[i] == arr2[i];\n        }\n    }\n    \n    private void append(byte[] arr1, byte[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = arr1[i] == arr2[i];\n        }\n    }\n    \n    private void append(char[] arr1, char[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = arr1[i] == arr2[i];\n        }\n    }\n\n    private void append(double[] arr1, double[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = Double.doubleToLongBits(arr1[i]) == Double.doubleToLongBits(arr2[i]);\n        }\n    }\n\n    private void append(float[] arr1, float[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = Float.floatToIntBits(arr1[i]) == Float.floatToIntBits(arr2[i]);\n        }\n    }\n\n    private void append(int[] arr1, int[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = arr1[i] == arr2[i];\n        }\n    }\n\n    private void append(long[] arr1, long[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = arr1[i] == arr2[i];\n        }\n    }\n\n    private void append(short[] arr1, short[] arr2) {\n        if (!isEquals) {\n            return;\n        }\n        if (arr1.length != arr2.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < arr1.length && isEquals; i++) {\n            isEquals = arr1[i] == arr2[i];\n        }\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..ce046f45 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,50 +364,168 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+public class EqualsBuilder {\n+\n+    private boolean isEquals = true;\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n+        if (isEquals && lhs != rhs) {\n+            if (lhs == null || rhs == null) {\n+                setEquals(false);\n+            } else {\n+                Class<?> lhsClass = lhs.getClass();\n+                if (!lhsClass.isArray()) {\n+                    isEquals = lhs.equals(rhs);\n+                } else if (lhs.getClass() != rhs.getClass()) {\n+                    setEquals(false);\n+                } else if (lhs instanceof long[]) {\n+                    append((long[]) lhs, (long[]) rhs);\n+                } else if (lhs instanceof int[]) {\n+                    append((int[]) lhs, (int[]) rhs);\n+                } else if (lhs instanceof short[]) {\n+                    append((short[]) lhs, (short[]) rhs);\n+                } else if (lhs instanceof char[]) {\n+                    append((char[]) lhs, (char[]) rhs);\n+                } else if (lhs instanceof byte[]) {\n+                    append((byte[]) lhs, (byte[]) rhs);\n+                } else if (lhs instanceof double[]) {\n+                    append((double[]) lhs, (double[]) rhs);\n+                } else if (lhs instanceof float[]) {\n+                    append((float[]) lhs, (float[]) rhs);\n+                } else if (lhs instanceof boolean[]) {\n+                    append((boolean[]) lhs, (boolean[]) rhs);\n+                } else {\n+                    // Not an array of primitives\n+                    appendArray((Object[]) lhs, (Object[]) rhs);\n+                }\n+            }\n         }\n-        if (lhs == rhs) {\n-            return this;\n+        return this;\n+    }\n+\n+    private void appendArray(Object[] arr1, Object[] arr2) {\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+        } else {\n+            for (int i = 0; i < arr1.length && isEquals; i++) {\n+                append(arr1[i], arr2[i]);\n+            }\n         }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n+    }\n+\n+    private void append(boolean[] arr1, boolean[] arr2) {\n+        if (!isEquals) {\n+            return;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = arr1[i] == arr2[i];\n+        }\n+    }\n+    \n+    private void append(byte[] arr1, byte[] arr2) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = arr1[i] == arr2[i];\n+        }\n+    }\n+    \n+    private void append(char[] arr1, char[] arr2) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = arr1[i] == arr2[i];\n         }\n-        return this;\n     }\n \n+    private void append(double[] arr1, double[] arr2) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = Double.doubleToLongBits(arr1[i]) == Double.doubleToLongBits(arr2[i]);\n+        }\n+    }\n+\n+    private void append(float[] arr1, float[] arr2) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = Float.floatToIntBits(arr1[i]) == Float.floatToIntBits(arr2[i]);\n+        }\n+    }\n+\n+    private void append(int[] arr1, int[] arr2) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = arr1[i] == arr2[i];\n+        }\n+    }\n+\n+    private void append(long[] arr1, long[] arr2) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = arr1[i] == arr2[i];\n+        }\n+    }\n+\n+    private void append(short[] arr1, short[] arr2) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        if (arr1.length != arr2.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < arr1.length && isEquals; i++) {\n+            isEquals = arr1[i] == arr2[i];\n+        }\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    public void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}