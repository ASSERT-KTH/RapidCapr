{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int numRows = m.getRowDimension();\n    final int numCols = m.getColumnDimension();\n    final int maxNumElements = Integer.MAX_VALUE / Double.BYTES;\n    if ((long)numRows * numCols > maxNumElements) {\n        // Matrix is too large for eigen decomposition, use iterative method\n        return iterativeSquareRoot(m);\n    }\n    else {\n        // Perform eigen decomposition and return square root\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}\n\nprivate RealMatrix iterativeSquareRoot(RealMatrix m) {\n    // Initialize X as m\n    RealMatrix X = m.copy();\n    double error = 1;\n    while (error > 1e-9) {\n        // Compute Y = (X^T)^-1\n        RealMatrix Y = X.transpose().inverse();\n        // Compute Z = 0.5 * (X Y + Y X)\n        RealMatrix Z = X.multiply(Y).add(Y.multiply(X)).scalarMultiply(0.5);\n        // Compute error as the Frobenius norm of (Z^2 - m)\n        error = Z.multiply(Z).subtract(m).getFrobeniusNorm();\n        // Set X to Z\n        X = Z;\n    }\n    return X;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3b4c0c769 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int numRows = m.getRowDimension();\n+    final int numCols = m.getColumnDimension();\n+    final int maxNumElements = Integer.MAX_VALUE / Double.BYTES;\n+    if ((long)numRows * numCols > maxNumElements) {\n+        // Matrix is too large for eigen decomposition, use iterative method\n+        return iterativeSquareRoot(m);\n     }\n+    else {\n+        // Perform eigen decomposition and return square root\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    }\n+}\n+\n+private RealMatrix iterativeSquareRoot(RealMatrix m) {\n+    // Initialize X as m\n+    RealMatrix X = m.copy();\n+    double error = 1;\n+    while (error > 1e-9) {\n+        // Compute Y = (X^T)^-1\n+        RealMatrix Y = X.transpose().inverse();\n+        // Compute Z = 0.5 * (X Y + Y X)\n+        RealMatrix Z = X.multiply(Y).add(Y.multiply(X)).scalarMultiply(0.5);\n+        // Compute error as the Frobenius norm of (Z^2 - m)\n+        error = Z.multiply(Z).subtract(m).getFrobeniusNorm();\n+        // Set X to Z\n+        X = Z;\n+    }\n+    return X;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}