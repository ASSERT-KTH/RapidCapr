{
    "patch": "    Node first = n.getFirstChild();\n    if (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT) {\n        if (first != null && first.getType() == Token.NAME) {\n            defineDeclaredFunction(first, n);\n        } else {\n            defineDeclaredFunction(n, parent);\n        }\n        attachLiteralTypes(first != null ? first : n);\n        handleFunctionInputs(parent);\n    } else {\n        // attach literal types to all nodes other than function expressions/declarations\n        attachLiteralTypes(n);\n        switch (n.getType()) {\n            case Token.CATCH:\n                defineCatch(n, parent);\n                break;\n            case Token.VAR:\n                defineVar(n, parent);\n                break;\n            case Token.LP:\n                if (parent == scope.getRootNode()) {\n                    handleFunctionInputs(parent);\n                }\n                break;\n            default:\n                if (n.getType() == Token.FUNCTION && first != null) {\n                    attachLiteralTypes(first);\n                }\n                break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..570bc30b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,36 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    Node first = n.getFirstChild();\n+    if (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT) {\n+        if (first != null && first.getType() == Token.NAME) {\n+            defineDeclaredFunction(first, n);\n+        } else {\n+            defineDeclaredFunction(n, parent);\n+        }\n+        attachLiteralTypes(first != null ? first : n);\n+        handleFunctionInputs(parent);\n+    } else {\n+        // attach literal types to all nodes other than function expressions/declarations\n+        attachLiteralTypes(n);\n+        switch (n.getType()) {\n+            case Token.CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case Token.VAR:\n+                defineVar(n, parent);\n+                break;\n+            case Token.LP:\n+                if (parent == scope.getRootNode()) {\n+                    handleFunctionInputs(parent);\n+                }\n+                break;\n+            default:\n+                if (n.getType() == Token.FUNCTION && first != null) {\n+                    attachLiteralTypes(first);\n+                }\n+                break;\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}