{
    "patch": "            //if the matcher is of type `CapturesArguments`\n            if (m instanceof CapturesArguments) {\n                //capture the argument at the position from the invocation\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                //if the matcher is also a `VarargMatcher` and the method has variable arguments\n                if (m instanceof VarargMatcher && isVariableArgument(invocation, position)) {\n                    //capture all arguments from the varargs array\n                    Object array = invocation.getRawArguments()[position];\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                    //since we've captured all varargs already, it does not make sense to process other matchers.\n                    return;\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..a66783f61 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,21 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            //if the matcher is of type `CapturesArguments`\n+            if (m instanceof CapturesArguments) {\n+                //capture the argument at the position from the invocation\n+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                //if the matcher is also a `VarargMatcher` and the method has variable arguments\n+                if (m instanceof VarargMatcher && isVariableArgument(invocation, position)) {\n+                    //capture all arguments from the varargs array\n+                    Object array = invocation.getRawArguments()[position];\n+                    for (int i = 0; i < Array.getLength(array); i++) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n+                    }\n+                    //since we've captured all varargs already, it does not make sense to process other matchers.\n+                    return;\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}