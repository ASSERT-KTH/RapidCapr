{
    "patch": "if (functionType.getTypeOfThis() != null) {\n        if (!NodeUtil.isGet(child)) {\n          report(t, child, UNSAFE_THIS, childType.toString());\n        }\n        JSType thisType = getJSType(child.getNext());\n        if (thisType == null || !functionType.getTypeOfThis().equals(thisType)) {\n          report(t, child, INVALID_THIS_TYPE, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c2f06cab 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null) {\n+        if (!NodeUtil.isGet(child)) {\n+          report(t, child, UNSAFE_THIS, childType.toString());\n+        }\n+        JSType thisType = getJSType(child.getNext());\n+        if (thisType == null || !functionType.getTypeOfThis().equals(thisType)) {\n+          report(t, child, INVALID_THIS_TYPE, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}