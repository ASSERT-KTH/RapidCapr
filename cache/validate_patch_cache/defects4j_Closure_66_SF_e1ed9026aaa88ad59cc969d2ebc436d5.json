{
    "patch": "public static double getTypedPercent(String input) {\n    double count = 0.0;\n    double total = 0.0;\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (c == '<') {\n            while (input.charAt(i) != '>') {\n                i++;\n            }\n        } else if (c != '\\n' && c != ' ') {\n            count++;\n        }\n        total++;\n    }\n    return (count / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f5e9e430 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String input) {\n+    double count = 0.0;\n+    double total = 0.0;\n+    for (int i = 0; i < input.length(); i++) {\n+        char c = input.charAt(i);\n+        if (c == '<') {\n+            while (input.charAt(i) != '>') {\n+                i++;\n+            }\n+        } else if (c != '\\n' && c != ' ') {\n+            count++;\n+        }\n+        total++;\n+    }\n+    return (count / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}