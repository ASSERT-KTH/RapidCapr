{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (isLvalue(parent)) {\n        Node lvalue = NodeUtil.getBestLvalue(parent);\n        Node objLit = NodeUtil.getEnclosingObjectLiteral(lvalue);\n\n        if (objLit != null &&\n            objLit.getParent().isAssign() &&\n            objLit.getParent().getParent() != null &&\n            objLit.getParent().getParent().isFunction()) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fc878712 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,18 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (isLvalue(parent)) {\n+        Node lvalue = NodeUtil.getBestLvalue(parent);\n+        Node objLit = NodeUtil.getEnclosingObjectLiteral(lvalue);\n+\n+        if (objLit != null &&\n+            objLit.getParent().isAssign() &&\n+            objLit.getParent().getParent() != null &&\n+            objLit.getParent().getParent().isFunction()) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}