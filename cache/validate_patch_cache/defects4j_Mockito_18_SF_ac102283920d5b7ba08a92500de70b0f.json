{
    "patch": "public static Iterable<String> stringPermutations(String s) {\n    if (s.length() == 1) {\n        return Collections.singleton(s);\n    } else if (s.isEmpty()) {\n        return Collections.emptySet();\n    } else {\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            String prefix = Character.toString(s.charAt(i));\n            String rest = s.substring(0, i) + s.substring(i + 1);\n            for (String permutation : stringPermutations(rest)) {\n                set.add(prefix + permutation);\n            }\n        }\n        return set;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..afbc6068e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<String> stringPermutations(String s) {\n+    if (s.length() == 1) {\n+        return Collections.singleton(s);\n+    } else if (s.isEmpty()) {\n+        return Collections.emptySet();\n+    } else {\n+        Set<String> set = new HashSet<>();\n+        for (int i = 0; i < s.length(); i++) {\n+            String prefix = Character.toString(s.charAt(i));\n+            String rest = s.substring(0, i) + s.substring(i + 1);\n+            for (String permutation : stringPermutations(rest)) {\n+                set.add(prefix + permutation);\n+            }\n+        }\n+        return set;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}