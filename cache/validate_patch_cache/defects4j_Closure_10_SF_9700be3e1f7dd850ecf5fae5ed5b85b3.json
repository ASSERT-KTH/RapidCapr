{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelperNoRecurse(n);\n    }\n  }\n\n  private static boolean mayBeStringHelperNoRecurse(Node n) {\n    if (n instanceof Literal) {\n      Object value = ((Literal) n).getValue();\n      if (value instanceof String || value instanceof Character) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..a80af184 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1416,10 +1416,20 @@ public final class NodeUtil {\n     if (recurse) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      return mayBeStringHelperNoRecurse(n);\n     }\n   }\n \n+  private static boolean mayBeStringHelperNoRecurse(Node n) {\n+    if (n instanceof Literal) {\n+      Object value = ((Literal) n).getValue();\n+      if (value instanceof String || value instanceof Character) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)\n         && !isUndefined(n) && !n.isNull();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}