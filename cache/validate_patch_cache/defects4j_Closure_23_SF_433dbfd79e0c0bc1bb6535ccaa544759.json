{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!left.isArrayLit() && !left.isObjectLit() && !left.isString() || !right.isNumber()) {\n    return n;\n  }\n\n  int index = (int)right.getDouble();\n\n  if (left.isString() && (index < 0 || index >= left.getString().length())) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  } else if (index < 0 || index >= left.getChildCount()) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = null;\n\n  if (left.isString()) {\n    elem = Node.newString(Character.toString(left.getString().charAt(index)));\n  } else {\n    elem = left.getFirstChild();\n    for (int i = 0; i < index; i++) {\n      elem = elem.getNext();\n    }\n  }\n\n  if (elem.isEmpty()) {\n    elem = NodeUtil.newUndefinedNode(n);\n  }\n\n  if (n.getParent().hasOneChild()) {\n    // Replace the entire GETELEM with the value\n    n.replaceWith(elem);\n  } else {\n    // Check if the parent of the GETELEM has a non-literal left child\n    Node parent = n.getParent();\n\n    if (!NodeUtil.isLiteralValue(left)) {\n      // If the left child is not a literal value, we replace GETELEM with an assignment operator\n      String operator = parent.isAssign() ? \"\" : \"=\";\n\n      Node newNode = Node.newString(Token.ASSIGN + operator);\n      parent.replaceChild(n, newNode);\n\n      newNode.appendChild(left.detachFromParent());\n      newNode.appendChild(Node.newNumber(index));\n      newNode.appendChild(elem.detachFromParent());\n\n      reportCodeChange();\n    } else {\n      // If the left child is a literal value, we replace GETELEM with a new literal\n      Node newLiteral = NodeUtil.cloneNode(left);\n      if (left.isObjectLit()) {\n        for (Node key = left.getFirstChild(), newKey = newLiteral.getFirstChild(); key != null;\n             key = key.getNext(), newKey = newKey.getNext()) {\n          if (key == elem) {\n            newKey.detachChildren();\n            newKey.addChildToBack(elem.detachFromParent());\n          }\n        }\n      } else {\n        // for ARRAY_LIT:\n        newLiteral.removeChild(elem);\n        elem.detach();\n      }\n\n      parent.replaceChild(left, newLiteral);\n      reportCodeChange();\n    }\n  }\n\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..59c39222 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,84 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  if (isAssignmentTarget(n)) {\n+    return n;\n+  }\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+  if (!left.isArrayLit() && !left.isObjectLit() && !left.isString() || !right.isNumber()) {\n+    return n;\n+  }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  int index = (int)right.getDouble();\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  if (left.isString() && (index < 0 || index >= left.getString().length())) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  } else if (index < 0 || index >= left.getChildCount()) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  Node elem = null;\n \n-      current = current.getNext();\n+  if (left.isString()) {\n+    elem = Node.newString(Character.toString(left.getString().charAt(index)));\n+  } else {\n+    elem = left.getFirstChild();\n+    for (int i = 0; i < index; i++) {\n+      elem = elem.getNext();\n     }\n+  }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  if (elem.isEmpty()) {\n+    elem = NodeUtil.newUndefinedNode(n);\n+  }\n+\n+  if (n.getParent().hasOneChild()) {\n+    // Replace the entire GETELEM with the value\n+    n.replaceWith(elem);\n+  } else {\n+    // Check if the parent of the GETELEM has a non-literal left child\n+    Node parent = n.getParent();\n+\n+    if (!NodeUtil.isLiteralValue(left)) {\n+      // If the left child is not a literal value, we replace GETELEM with an assignment operator\n+      String operator = parent.isAssign() ? \"\" : \"=\";\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+      Node newNode = Node.newString(Token.ASSIGN + operator);\n+      parent.replaceChild(n, newNode);\n+\n+      newNode.appendChild(left.detachFromParent());\n+      newNode.appendChild(Node.newNumber(index));\n+      newNode.appendChild(elem.detachFromParent());\n+\n+      reportCodeChange();\n     } else {\n-      left.removeChild(elem);\n-    }\n+      // If the left child is a literal value, we replace GETELEM with a new literal\n+      Node newLiteral = NodeUtil.cloneNode(left);\n+      if (left.isObjectLit()) {\n+        for (Node key = left.getFirstChild(), newKey = newLiteral.getFirstChild(); key != null;\n+             key = key.getNext(), newKey = newKey.getNext()) {\n+          if (key == elem) {\n+            newKey.detachChildren();\n+            newKey.addChildToBack(elem.detachFromParent());\n+          }\n+        }\n+      } else {\n+        // for ARRAY_LIT:\n+        newLiteral.removeChild(elem);\n+        elem.detach();\n+      }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+      parent.replaceChild(left, newLiteral);\n+      reportCodeChange();\n+    }\n   }\n \n+  return elem;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}