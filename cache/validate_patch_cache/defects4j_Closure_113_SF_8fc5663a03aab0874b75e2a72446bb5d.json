{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null\n              || !provided.isExplicitlyProvided()\n              || provided.explicitModule == null) {\n        unrecognizedRequires.add(\n                new UnrecognizedRequire(n, ns, t.getSourceName()));\n        parent.removeChild(n);\n        compiler.reportCodeChange();\n      } else {\n        if (moduleGraph != null\n                && t.getModule() != provided.explicitModule\n                && !moduleGraph.dependsOn(t.getModule(), provided.explicitModule)) {\n          compiler.report(\n                  t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                          provided.explicitModule.getName(),\n                          t.getModule().getName()));\n        }\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..c325babc 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,30 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n       String ns = arg.getString();\n       ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n+      if (provided == null\n+              || !provided.isExplicitlyProvided()\n+              || provided.explicitModule == null) {\n         unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+                new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        parent.removeChild(n);\n+        compiler.reportCodeChange();\n       } else {\n-        JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n-\n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n+        if (moduleGraph != null\n+                && t.getModule() != provided.explicitModule\n+                && !moduleGraph.dependsOn(t.getModule(), provided.explicitModule)) {\n           compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+                  t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                          provided.explicitModule.getName(),\n+                          t.getModule().getName()));\n         }\n-      }\n-\n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n-\n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n-    }\n-  }\n+        maybeAddToSymbolTable(left);\n+        maybeAddStringNodeToSymbolTable(arg);\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}