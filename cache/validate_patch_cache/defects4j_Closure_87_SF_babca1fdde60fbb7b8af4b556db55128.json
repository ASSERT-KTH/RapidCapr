{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr) &&\n                !NodeUtil.isFunctionExpression(maybeExpr) &&\n                maybeExpr.getType() != Token.OBJECTLIT &&\n                maybeExpr.getType() != Token.FUNCTION &&\n                maybeExpr.getType() != Token.REGEXP) {\n            // Check if parent is an expression statement\n            Node parent = n.getParent();\n            if (parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n                Node grandparent = parent.getParent();\n                boolean isMethodCall = false;\n                // Check if grandparent is a loop or a condition\n                if (grandparent != null && \n                        (grandparent.getType() == Token.FOR || grandparent.getType() == Token.WHILE ||\n                                grandparent.getType() == Token.DO || grandparent.getType() == Token.IF)) {\n                    return false;\n                }\n                // Check if a method is invoked\n                if (maybeExpr.getType() == Token.EXPR_RESULT) {\n                    Node grandChild = maybeExpr.getFirstChild();\n                    if (grandChild.getType() == Token.CALL) {\n                        Node target = grandChild.getFirstChild();\n                        if (target.getType() == Token.GETPROP) {\n                            Node maybeThis = target.getFirstChild();\n                            if (maybeThis.getType() == Token.THIS) {\n                                isMethodCall = true;\n                            }\n                            if (isFunctionInvoked(target.getLastChild())) {\n                                return false;\n                            }\n                        } else {\n                            Node obj = target.getFirstChild();\n                            if (obj.isQualifiedName() &&\n                                    obj.getQualifiedName().equals(\"Event\")) {\n                                return false;\n                            }\n                        }\n                    }\n                    if (isMethodCall) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            // Check if parent is a variable declaration that is not const\n            if (parent.getType() == Token.VAR ||\n                    (parent.getType() == Token.LET && !NodeUtil.isBlockScopedDeclaration(parent)))\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate boolean isFunctionInvoked(Node n) {\n    return n != null &&\n            (n.getString().equals(\"apply\") || n.getString().equals(\"call\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..27e2a8b1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,67 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        if (NodeUtil.isExpressionNode(maybeExpr) &&\n+                !NodeUtil.isFunctionExpression(maybeExpr) &&\n+                maybeExpr.getType() != Token.OBJECTLIT &&\n+                maybeExpr.getType() != Token.FUNCTION &&\n+                maybeExpr.getType() != Token.REGEXP) {\n+            // Check if parent is an expression statement\n+            Node parent = n.getParent();\n+            if (parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n+                Node grandparent = parent.getParent();\n+                boolean isMethodCall = false;\n+                // Check if grandparent is a loop or a condition\n+                if (grandparent != null && \n+                        (grandparent.getType() == Token.FOR || grandparent.getType() == Token.WHILE ||\n+                                grandparent.getType() == Token.DO || grandparent.getType() == Token.IF)) {\n+                    return false;\n+                }\n+                // Check if a method is invoked\n+                if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+                    Node grandChild = maybeExpr.getFirstChild();\n+                    if (grandChild.getType() == Token.CALL) {\n+                        Node target = grandChild.getFirstChild();\n+                        if (target.getType() == Token.GETPROP) {\n+                            Node maybeThis = target.getFirstChild();\n+                            if (maybeThis.getType() == Token.THIS) {\n+                                isMethodCall = true;\n+                            }\n+                            if (isFunctionInvoked(target.getLastChild())) {\n+                                return false;\n+                            }\n+                        } else {\n+                            Node obj = target.getFirstChild();\n+                            if (obj.isQualifiedName() &&\n+                                    obj.getQualifiedName().equals(\"Event\")) {\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                    if (isMethodCall) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+            // Check if parent is a variable declaration that is not const\n+            if (parent.getType() == Token.VAR ||\n+                    (parent.getType() == Token.LET && !NodeUtil.isBlockScopedDeclaration(parent)))\n+            {\n+                return true;\n+            }\n+        }\n     }\n-\n     return false;\n-  }\n+}\n+\n+private boolean isFunctionInvoked(Node n) {\n+    return n != null &&\n+            (n.getString().equals(\"apply\") || n.getString().equals(\"call\"));\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}