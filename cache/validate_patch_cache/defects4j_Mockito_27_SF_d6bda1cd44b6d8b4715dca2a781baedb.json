{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    \n    if (mock.getClass().getName().contains(\"EnhancerByMockitoWithCGLIB\")) {\n        Object targetObject = ((Factory) mock).getCallback(0);\n        ((Factory) mock).setCallback(0, newFilter);\n        resetMock(targetObject);\n    } else if (mock instanceof Spied) {\n        Spied spy = (Spied) mock;\n        try {\n            Field field = spy.getClass().getDeclaredField(\"initializedSpy\");\n            field.setAccessible(true);\n            Object spiedObject = field.get(spy);\n            resetMock(spiedObject);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to reset mock: \" + e.getMessage(), e);\n        }\n    } else if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..58f62b0c7 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    \n+    if (mock.getClass().getName().contains(\"EnhancerByMockitoWithCGLIB\")) {\n+        Object targetObject = ((Factory) mock).getCallback(0);\n+        ((Factory) mock).setCallback(0, newFilter);\n+        resetMock(targetObject);\n+    } else if (mock instanceof Spied) {\n+        Spied spy = (Spied) mock;\n+        try {\n+            Field field = spy.getClass().getDeclaredField(\"initializedSpy\");\n+            field.setAccessible(true);\n+            Object spiedObject = field.get(spy);\n+            resetMock(spiedObject);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to reset mock: \" + e.getMessage(), e);\n+        }\n+    } else if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}