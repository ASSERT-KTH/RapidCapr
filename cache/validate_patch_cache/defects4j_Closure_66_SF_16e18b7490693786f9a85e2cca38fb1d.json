{
    "patch": "public static double getTypedPercent(String json) {\n   double typedCount = 0.0;\n   double totalCount = 0.0;\n   try {\n      JSONObject obj = new JSONObject(json);\n      JSONArray arr = obj.getJSONArray(\"data\");\n      for (int i = 0; i < arr.length(); i++) {\n         JSONObject dataObj = arr.getJSONObject(i);\n         JSONArray entries = dataObj.getJSONArray(\"entries\");\n         for (int j = 0; j < entries.length(); j++) {\n            JSONObject entry = entries.getJSONObject(j);\n            totalCount++;\n            if (entry.has(\"type\") && !entry.getString(\"type\").equals(\"\")) {\n               typedCount++;\n            }\n         }\n      }\n   } catch (JSONException e) {\n      e.printStackTrace();\n   }\n   return (typedCount/totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c946ea04 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+   double typedCount = 0.0;\n+   double totalCount = 0.0;\n+   try {\n+      JSONObject obj = new JSONObject(json);\n+      JSONArray arr = obj.getJSONArray(\"data\");\n+      for (int i = 0; i < arr.length(); i++) {\n+         JSONObject dataObj = arr.getJSONObject(i);\n+         JSONArray entries = dataObj.getJSONArray(\"entries\");\n+         for (int j = 0; j < entries.length(); j++) {\n+            JSONObject entry = entries.getJSONObject(j);\n+            totalCount++;\n+            if (entry.has(\"type\") && !entry.getString(\"type\").equals(\"\")) {\n+               typedCount++;\n+            }\n+         }\n+      }\n+   } catch (JSONException e) {\n+      e.printStackTrace();\n+   }\n+   return (typedCount/totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}