{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if (mock.getClass().getName().contains(\"javassist\")) {\n            try {\n                Field f = mock.getClass().getDeclaredField(\"callbacks\");\n                f.setAccessible(true);\n                Callback[] callbacks = ((Callback[]) f.get(mock));\n                for (int i = 0; i < callbacks.length; i++) {\n                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n                        callbacks[i] = newFilter;\n                        return;\n                    }\n                }\n                List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n                callbackList.add(0, newFilter);\n                ((Factory) mock).setCallbacks(callbackList.toArray(new Callback[callbackList.size()]));\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to reset mock\", e);\n            }\n        } else {\n            ((Factory) mock).setCallback(0, newFilter);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..5e9743df9 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock.getClass().getName().contains(\"javassist\")) {\n+            try {\n+                Field f = mock.getClass().getDeclaredField(\"callbacks\");\n+                f.setAccessible(true);\n+                Callback[] callbacks = ((Callback[]) f.get(mock));\n+                for (int i = 0; i < callbacks.length; i++) {\n+                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                        callbacks[i] = newFilter;\n+                        return;\n+                    }\n+                }\n+                List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n+                callbackList.add(0, newFilter);\n+                ((Factory) mock).setCallbacks(callbackList.toArray(new Callback[callbackList.size()]));\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to reset mock\", e);\n+            }\n+        } else {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}