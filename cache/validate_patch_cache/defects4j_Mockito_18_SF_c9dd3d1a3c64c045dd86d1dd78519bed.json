{
    "patch": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClass {\n    public static <T> T returnValueFor(Class<T> clazz) {\n        if (clazz.equals(String.class)) {\n            return clazz.cast(\"hello world\");\n        } else if (clazz.equals(Integer.class)) {\n            return clazz.cast(42);\n        } else if (clazz.equals(Iterable.class)) {\n            List<String> list = new ArrayList<>();\n            list.add(\"item1\");\n            list.add(\"item2\");\n            return clazz.cast(list);\n        }\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..fa820b782 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyClass {\n+    public static <T> T returnValueFor(Class<T> clazz) {\n+        if (clazz.equals(String.class)) {\n+            return clazz.cast(\"hello world\");\n+        } else if (clazz.equals(Integer.class)) {\n+            return clazz.cast(42);\n+        } else if (clazz.equals(Iterable.class)) {\n+            List<String> list = new ArrayList<>();\n+            list.add(\"item1\");\n+            list.add(\"item2\");\n+            return clazz.cast(list);\n+        }\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}