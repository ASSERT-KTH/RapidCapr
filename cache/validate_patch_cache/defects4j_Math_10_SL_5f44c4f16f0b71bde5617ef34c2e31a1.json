{
    "patch": "if (Double.isNaN(pp.getValue())) {\n    pp.setValue(Double.NaN);\n} else if (positive && px == 0.0) {\n    pp.setValue((py > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n} else if (px == 0.0) {\n    pp.setValue((py >= 0.0) ? FastMath.PI : -FastMath.PI);\n} else if (py == 0.0) {\n    pp.setValue((px > 0.0) ? 0.0 : FastMath.PI);\n} else if (!Double.isInfinite(px) && !Double.isInfinite(py)) {\n    // general case\n    pp.setValue(FastMath.atan2(py, px));\n} else {\n    pp.setValue((Double.isInfinite(px)) ?\n            ((py > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0) :\n            ((px > 0.0) ? 0.0 : FastMath.PI));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..9f81182be 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,22 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(pp.getValue())) {\n+    pp.setValue(Double.NaN);\n+} else if (positive && px == 0.0) {\n+    pp.setValue((py > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n+} else if (px == 0.0) {\n+    pp.setValue((py >= 0.0) ? FastMath.PI : -FastMath.PI);\n+} else if (py == 0.0) {\n+    pp.setValue((px > 0.0) ? 0.0 : FastMath.PI);\n+} else if (!Double.isInfinite(px) && !Double.isInfinite(py)) {\n+    // general case\n+    pp.setValue(FastMath.atan2(py, px));\n+} else {\n+    pp.setValue((Double.isInfinite(px)) ?\n+            ((py > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0) :\n+            ((px > 0.0) ? 0.0 : FastMath.PI));\n+}\n \n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}