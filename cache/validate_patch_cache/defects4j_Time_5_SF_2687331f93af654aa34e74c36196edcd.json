{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    int seconds = getSeconds();\n    int minutes = getMinutes();\n    int hours = getHours();\n    int days = getDays();\n    int weeks = getWeeks();\n    int months = getMonths();\n    int years = getYears();\n    \n    if (type.isSupported(DurationFieldType.weeks())) {\n        days = FieldUtils.safeAdd(FieldUtils.safeMultiply(weeks, 7), days);\n        weeks = 0;\n    }\n  \n    if (type.isSupported(DurationFieldType.months()) || \n       type.isSupported(DurationFieldType.years())) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        years = totalMonths / 12;\n        months = totalMonths % 12;\n    }\n    \n    if(isSupported(DurationFieldType.hours())) {\n        minutes = FieldUtils.safeAdd(FieldUtils.safeMultiply(hours, 60), minutes);\n        hours = 0;\n    } \n    if(isSupported(DurationFieldType.minutes())) {\n        seconds = FieldUtils.safeAdd(FieldUtils.safeMultiply(minutes, 60), seconds);\n        minutes = 0;\n    }\n    \n    millis = FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000L), millis);\n    millis = FieldUtils.safeAdd(FieldUtils.safeMultiply(minutes, 60000L), millis);\n\n    long fraction = isoChonology.getDateTimeMillis(days, 0, 0, 0)\n        - isoChonology.getDateTimeMillis(0, 0, 0, 0);\n    if (millis < 0 && fraction > 0) {\n        fraction = -fraction;\n    }\n    \n    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));\n    \n    if (type.isSupported(DurationFieldType.months()) || \n           type.isSupported(DurationFieldType.years())) {\n             millis += isoChonology.getAverageMillisPerMonth() * (years * 12L + months);\n           }\n    \n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    if ((type.isSupported(DurationFieldType.years())) || \n        (type.isSupported(DurationFieldType.months())) && years != 0) {\n        result = result.withYears(years);\n    }\n    if ((type.isSupported(DurationFieldType.months())) && months != 0) {\n        result = result.withMonths(months);\n    }\n    if (type.isSupported(DurationFieldType.weeks()) && weeks != 0) {\n        result = result.withWeeks(weeks);\n    }\n    if (type.isSupported(DurationFieldType.days()) && days != 0) {\n        result = result.withDays(days);\n    }\n    if (type.isSupported(DurationFieldType.hours()) && hours != 0) {\n        result = result.withHours(hours);\n    }\n    if (type.isSupported(DurationFieldType.minutes()) && minutes != 0) {\n        result = result.withMinutes(minutes);\n    }\n    if (type.isSupported(DurationFieldType.seconds()) && seconds != 0) {\n        result = result.withSeconds(seconds);\n    }\n    if (type.isSupported(DurationFieldType.millis()) && fraction != 0) {\n        result = result.withMillis(fraction);\n    }\n    \n    return result; \n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2a31977e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,83 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    int seconds = getSeconds();\n+    int minutes = getMinutes();\n+    int hours = getHours();\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    int months = getMonths();\n+    int years = getYears();\n+    \n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        days = FieldUtils.safeAdd(FieldUtils.safeMultiply(weeks, 7), days);\n+        weeks = 0;\n+    }\n+  \n+    if (type.isSupported(DurationFieldType.months()) || \n+       type.isSupported(DurationFieldType.years())) {\n+        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n+        years = totalMonths / 12;\n+        months = totalMonths % 12;\n+    }\n+    \n+    if(isSupported(DurationFieldType.hours())) {\n+        minutes = FieldUtils.safeAdd(FieldUtils.safeMultiply(hours, 60), minutes);\n+        hours = 0;\n+    } \n+    if(isSupported(DurationFieldType.minutes())) {\n+        seconds = FieldUtils.safeAdd(FieldUtils.safeMultiply(minutes, 60), seconds);\n+        minutes = 0;\n+    }\n+    \n+    millis = FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000L), millis);\n+    millis = FieldUtils.safeAdd(FieldUtils.safeMultiply(minutes, 60000L), millis);\n+\n+    long fraction = isoChonology.getDateTimeMillis(days, 0, 0, 0)\n+        - isoChonology.getDateTimeMillis(0, 0, 0, 0);\n+    if (millis < 0 && fraction > 0) {\n+        fraction = -fraction;\n+    }\n+    \n+    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));\n+    \n+    if (type.isSupported(DurationFieldType.months()) || \n+           type.isSupported(DurationFieldType.years())) {\n+             millis += isoChonology.getAverageMillisPerMonth() * (years * 12L + months);\n+           }\n+    \n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    \n+    if ((type.isSupported(DurationFieldType.years())) || \n+        (type.isSupported(DurationFieldType.months())) && years != 0) {\n+        result = result.withYears(years);\n+    }\n+    if ((type.isSupported(DurationFieldType.months())) && months != 0) {\n+        result = result.withMonths(months);\n+    }\n+    if (type.isSupported(DurationFieldType.weeks()) && weeks != 0) {\n+        result = result.withWeeks(weeks);\n+    }\n+    if (type.isSupported(DurationFieldType.days()) && days != 0) {\n+        result = result.withDays(days);\n+    }\n+    if (type.isSupported(DurationFieldType.hours()) && hours != 0) {\n+        result = result.withHours(hours);\n+    }\n+    if (type.isSupported(DurationFieldType.minutes()) && minutes != 0) {\n+        result = result.withMinutes(minutes);\n+    }\n+    if (type.isSupported(DurationFieldType.seconds()) && seconds != 0) {\n+        result = result.withSeconds(seconds);\n+    }\n+    if (type.isSupported(DurationFieldType.millis()) && fraction != 0) {\n+        result = result.withMillis(fraction);\n+    }\n+    \n+    return result; \n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}