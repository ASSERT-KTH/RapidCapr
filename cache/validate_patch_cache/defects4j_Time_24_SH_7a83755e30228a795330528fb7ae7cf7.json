{
    "patch": "for (int i = 0; i < count; i++) {\n    //In case of IllegalFieldValueException\n    //propagate the error message with the text info\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n        }\n        throw e;\n    }\n    //Verify that millis remains valid.\n    //If not, revert the change and propagate the error message with the text info\n    if (savedFields[i].isLeapDurationField()) {\n        millis = correctLeapSecond(millis, iChrono);\n    }\n    if (FieldUtils.getFragment(millis, savedFields[i].getField()) != savedFields[i].getMillisValue()) {\n        if (text != null) {\n            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\\\"');\n        }\n        throw new IllegalArgumentException();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e72597cd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,29 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    //In case of IllegalFieldValueException\n+    //propagate the error message with the text info\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+        }\n+        throw e;\n+    }\n+    //Verify that millis remains valid.\n+    //If not, revert the change and propagate the error message with the text info\n+    if (savedFields[i].isLeapDurationField()) {\n+        millis = correctLeapSecond(millis, iChrono);\n+    }\n+    if (FieldUtils.getFragment(millis, savedFields[i].getField()) != savedFields[i].getMillisValue()) {\n+        if (text != null) {\n+            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\\\"');\n+        }\n+        throw new IllegalArgumentException();\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}