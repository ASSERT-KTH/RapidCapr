{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long prevLocal = previousTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n\n    if (offsetLocal > offsetAdjusted) {\n        // we must have jumped forward in time, so check next transitions\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n        if (prevLocal != prevAdjusted) {\n            return offsetLocal;\n        }\n    } else {\n        // we must have jumped backward in time, so check previous transitions\n        if (prevLocal != prevAdjusted) {\n            return offsetLocal;\n        }\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    }\n}\n\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6c0d6f4c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,32 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+\n+    if (offsetLocal > offsetAdjusted) {\n+        // we must have jumped forward in time, so check next transitions\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        if (prevLocal != prevAdjusted) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        // we must have jumped backward in time, so check previous transitions\n+        if (prevLocal != prevAdjusted) {\n+            return offsetLocal;\n+        }\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n+\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}