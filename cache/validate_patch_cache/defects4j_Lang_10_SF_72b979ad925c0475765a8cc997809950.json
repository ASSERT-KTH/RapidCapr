{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean inYearPattern = false;\n    boolean quoteActive = false;\n    boolean inEraPattern = false;\n    int yearPatternCount = 0;\n    for (int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c) || isNonPrintable(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                if (inYearPattern) {\n                    regex.append(')');\n                    inYearPattern = false;\n                    yearPatternCount = 0;\n                } else if (inEraPattern) {\n                    regex.append(')');\n                    inEraPattern = false;\n                } else if (quoteActive) {\n                    regex.append('\\'');\n                    quoteActive = false;\n                }\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n\n        if (c == '\\'') {\n            if (unquote) {\n                i++;\n                if (i < value.length()) {\n                    c = value.charAt(i);\n                } else {\n                    return regex;\n                }\n            }\n            if (inEraPattern) {\n                regex.append(')');\n                inEraPattern = false;\n            } else if (inYearPattern) {\n                yearPatternCount = 0;\n                regex.append(')');\n                inYearPattern = false;\n            } else {\n                quoteActive = !quoteActive;\n                if (quoteActive) {\n                    regex.append(Pattern.quote(\"'\"));\n                }\n            }\n        } else if (inEraPattern) {\n            if (++yearPatternCount > 4) {\n                inEraPattern = false;\n                yearPatternCount = 0;\n                regex.append(')');\n            }\n            regex.append(c);\n        } else if (inYearPattern) {\n            if (++yearPatternCount > 4) {\n                inYearPattern = false;\n                yearPatternCount = 0;\n                regex.append(')');\n            }\n            regex.append(c);\n        } else if (Character.isDigit(c) || c == 'G' || c == 'y' || c == 'M' || c == 'd' || c == 'h' || c == 'm' || c == 's' || c == 'S' || c == 'E' || c == 'D' || c == 'F' || c == 'w' || c == 'W' || c == 'a' || c == 'k' || c == 'K' || c == 'z' || c == 'X' || c == 'x') {\n            if (c == 'G') {\n                inEraPattern = true;\n                yearPatternCount = 1;\n                regex.append(\"(?:\");\n            } else if (c == 'y') {\n                inYearPattern = true;\n                yearPatternCount = 1;\n                regex.append(\"(?:\");\n            } else {\n                regex.append(Pattern.quote(Character.toString(c)));\n            }\n        } else {\n            regex.append(Pattern.quote(Character.toString(c)));\n        }\n    }\n    if (inEraPattern) {\n        regex.append(')');\n    }\n    if (inYearPattern) {\n        regex.append(')');\n    }\n    if (quoteActive) {\n        regex.append(Pattern.quote(\"'\"));\n    }\n    return regex;\n}\n\nprivate static boolean isNonPrintable(char c) {\n    Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n    return (!Character.isLetter(c) && block != Character.UnicodeBlock.BASIC_LATIN && block != Character.UnicodeBlock.LATIN_1_SUPPLEMENT && !Character.isDigit(c));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..1a9e0ca3 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,102 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean inYearPattern = false;\n+    boolean quoteActive = false;\n+    boolean inEraPattern = false;\n+    int yearPatternCount = 0;\n+    for (int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c) || isNonPrintable(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                if (inYearPattern) {\n+                    regex.append(')');\n+                    inYearPattern = false;\n+                    yearPatternCount = 0;\n+                } else if (inEraPattern) {\n+                    regex.append(')');\n+                    inEraPattern = false;\n+                } else if (quoteActive) {\n+                    regex.append('\\'');\n+                    quoteActive = false;\n                 }\n-                continue;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+            continue;\n+        }\n+        wasWhite = false;\n+\n+        if (c == '\\'') {\n+            if (unquote) {\n+                i++;\n+                if (i < value.length()) {\n+                    c = value.charAt(i);\n+                } else {\n+                    return regex;\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+            }\n+            if (inEraPattern) {\n+                regex.append(')');\n+                inEraPattern = false;\n+            } else if (inYearPattern) {\n+                yearPatternCount = 0;\n+                regex.append(')');\n+                inYearPattern = false;\n+            } else {\n+                quoteActive = !quoteActive;\n+                if (quoteActive) {\n+                    regex.append(Pattern.quote(\"'\"));\n+                }\n+            }\n+        } else if (inEraPattern) {\n+            if (++yearPatternCount > 4) {\n+                inEraPattern = false;\n+                yearPatternCount = 0;\n+                regex.append(')');\n+            }\n+            regex.append(c);\n+        } else if (inYearPattern) {\n+            if (++yearPatternCount > 4) {\n+                inYearPattern = false;\n+                yearPatternCount = 0;\n+                regex.append(')');\n             }\n             regex.append(c);\n+        } else if (Character.isDigit(c) || c == 'G' || c == 'y' || c == 'M' || c == 'd' || c == 'h' || c == 'm' || c == 's' || c == 'S' || c == 'E' || c == 'D' || c == 'F' || c == 'w' || c == 'W' || c == 'a' || c == 'k' || c == 'K' || c == 'z' || c == 'X' || c == 'x') {\n+            if (c == 'G') {\n+                inEraPattern = true;\n+                yearPatternCount = 1;\n+                regex.append(\"(?:\");\n+            } else if (c == 'y') {\n+                inYearPattern = true;\n+                yearPatternCount = 1;\n+                regex.append(\"(?:\");\n+            } else {\n+                regex.append(Pattern.quote(Character.toString(c)));\n+            }\n+        } else {\n+            regex.append(Pattern.quote(Character.toString(c)));\n         }\n-        return regex;\n     }\n+    if (inEraPattern) {\n+        regex.append(')');\n+    }\n+    if (inYearPattern) {\n+        regex.append(')');\n+    }\n+    if (quoteActive) {\n+        regex.append(Pattern.quote(\"'\"));\n+    }\n+    return regex;\n+}\n+\n+private static boolean isNonPrintable(char c) {\n+    Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n+    return (!Character.isLetter(c) && block != Character.UnicodeBlock.BASIC_LATIN && block != Character.UnicodeBlock.LATIN_1_SUPPLEMENT && !Character.isDigit(c));\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}