{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractSimplex(original, contracted);\n            }\n\n            // check convergence\n            if (isConverged(comparator)) {\n                return;\n            }\n\n        }\n\n    }\n\nprivate RealPointValuePair[] contractSimplex(final RealPointValuePair[] original,\n                                             final RealPointValuePair contracted) {\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    for (int i = 0; i < original.length; i++) {\n        final double[] contractedPoint = new double[original[i].getPointRef().length];\n        for (int j = 0; j < contractedPoint.length; j++) {\n            contractedPoint[j] = gamma * original[i].getPointRef()[j] + (1.0 - gamma) * contracted.getPointRef()[j];\n        }\n        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n    }\n    return contractedSimplex;\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a123b4476 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,7 +58,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n@@ -89,8 +89,11 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contractSimplex(original, contracted);\n+            }\n \n             // check convergence\n+            if (isConverged(comparator)) {\n                 return;\n             }\n \n@@ -98,6 +101,20 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+private RealPointValuePair[] contractSimplex(final RealPointValuePair[] original,\n+                                             final RealPointValuePair contracted) {\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 0; i < original.length; i++) {\n+        final double[] contractedPoint = new double[original[i].getPointRef().length];\n+        for (int j = 0; j < contractedPoint.length; j++) {\n+            contractedPoint[j] = gamma * original[i].getPointRef()[j] + (1.0 - gamma) * contracted.getPointRef()[j];\n+        }\n+        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+    }\n+    return contractedSimplex;\n+}\n+\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}