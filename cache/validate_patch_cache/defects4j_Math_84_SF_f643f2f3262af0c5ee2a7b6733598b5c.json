{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflectedSimplex[0]) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n\n                } else {\n                    // accept the reflected simplex\n                    simplex = hold(reflectedSimplex, reflected);\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, original[0]) < 0) {\n                    // accept the contracted simplex\n                    simplex = hold(original, contracted);\n\n                } else {\n                    // perform a shrink step\n                    simplex = shrink(original, comparator);\n                }\n\n            }\n\n            // check convergence\n            if (isConverged(simplex, best, comparator)) {\n                return;\n            }\n\n        }\n\n    }\n    \n    private RealPointValuePair[] hold(RealPointValuePair[] simplex, RealPointValuePair v) {\n        RealPointValuePair[] held = simplex.clone();\n        held[simplex.length - 1] = v;\n        return held;\n    }\n    \n    private RealPointValuePair[] shrink(final RealPointValuePair[] origin, final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair best = origin[0];\n        final int n = origin.length;\n        final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[n];\n        shrinkedSimplex[0] = best;\n        for (int i = 1; i < n; i++) {\n            shrinkedSimplex[i] = best.add(origin[i].subtract(best).scalarMultiply(sigma));\n        }\n        evaluate(shrinkedSimplex, comparator);\n        incrementIterationCount();\n        return shrinkedSimplex;\n    }\n    \n    private boolean isConverged(final RealPointValuePair[] simplex, final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n        final int n = simplex.length;\n        double sum = 0.0;\n        for (int i = 1; i < n; i++) {\n            final double yi = simplex[i].getValue();\n            final double y1 = best.getValue();\n            sum += FastMath.pow(yi - y1, 2.0);\n        }\n        final double deviation = FastMath.sqrt(sum / (n - 1));\n        final double relativeDeviation = FastMath.abs(deviation / best.getValue());\n        return relativeDeviation <= 0.0001d;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d96222f82 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -76,27 +76,70 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflectedSimplex[0]) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = hold(reflectedSimplex, reflected);\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, original[0]) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = hold(original, contracted);\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                } else {\n+                    // perform a shrink step\n+                    simplex = shrink(original, comparator);\n+                }\n+\n+            }\n \n             // check convergence\n+            if (isConverged(simplex, best, comparator)) {\n                 return;\n             }\n \n         }\n \n     }\n+    \n+    private RealPointValuePair[] hold(RealPointValuePair[] simplex, RealPointValuePair v) {\n+        RealPointValuePair[] held = simplex.clone();\n+        held[simplex.length - 1] = v;\n+        return held;\n+    }\n+    \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] origin, final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair best = origin[0];\n+        final int n = origin.length;\n+        final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[n];\n+        shrinkedSimplex[0] = best;\n+        for (int i = 1; i < n; i++) {\n+            shrinkedSimplex[i] = best.add(origin[i].subtract(best).scalarMultiply(sigma));\n+        }\n+        evaluate(shrinkedSimplex, comparator);\n+        incrementIterationCount();\n+        return shrinkedSimplex;\n+    }\n+    \n+    private boolean isConverged(final RealPointValuePair[] simplex, final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n+        final int n = simplex.length;\n+        double sum = 0.0;\n+        for (int i = 1; i < n; i++) {\n+            final double yi = simplex[i].getValue();\n+            final double y1 = best.getValue();\n+            sum += FastMath.pow(yi - y1, 2.0);\n+        }\n+        final double deviation = FastMath.sqrt(sum / (n - 1));\n+        final double relativeDeviation = FastMath.abs(deviation / best.getValue());\n+        return relativeDeviation <= 0.0001d;\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}