{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    // check which offset is correct\n\n    int earlierOffset = offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n    int laterOffset = offsetLocal < offsetAdjusted ? offsetAdjusted : offsetLocal;\n\n    long next = nextTransition(instantAdjusted - earlierOffset);\n    if (next == instantAdjusted - earlierOffset) {\n        // In the middle of a transition, we should take the latest known offset and throw an exception\n        return laterOffset;\n    }\n\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    // adjust nextAdjusted, since it refers to the OLD offset of instantLocal\n    nextAdjusted += (offsetAdjusted - offsetLocal);\n\n    if (nextLocal == nextAdjusted) {\n        // There is no difference between nextLocal and nextAdjusted\n        return offsetAdjusted;\n    }\n\n    if (offsetAdjusted < offsetLocal) {\n        // backward transition\n        if (instantLocal + laterOffset >= nextLocal) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    }\n\n    // forward transition\n    if (instantLocal + earlierOffset < nextAdjusted) {\n        return offsetLocal;\n    }\n    return offsetAdjusted;\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2d1cfecf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,45 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    // check which offset is correct\n+\n+    int earlierOffset = offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n+    int laterOffset = offsetLocal < offsetAdjusted ? offsetAdjusted : offsetLocal;\n+\n+    long next = nextTransition(instantAdjusted - earlierOffset);\n+    if (next == instantAdjusted - earlierOffset) {\n+        // In the middle of a transition, we should take the latest known offset and throw an exception\n+        return laterOffset;\n+    }\n+\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    // adjust nextAdjusted, since it refers to the OLD offset of instantLocal\n+    nextAdjusted += (offsetAdjusted - offsetLocal);\n+\n+    if (nextLocal == nextAdjusted) {\n+        // There is no difference between nextLocal and nextAdjusted\n+        return offsetAdjusted;\n+    }\n+\n+    if (offsetAdjusted < offsetLocal) {\n+        // backward transition\n+        if (instantLocal + laterOffset >= nextLocal) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    }\n+\n+    // forward transition\n+    if (instantLocal + earlierOffset < nextAdjusted) {\n+        return offsetLocal;\n+    }\n+    return offsetAdjusted;\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}