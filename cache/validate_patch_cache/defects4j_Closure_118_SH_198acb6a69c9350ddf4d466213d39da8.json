{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n\n        // STRING, GET, SET\n        Token type = child.getToken();\n\n        // handle GETPROP node\n        if (type == Token.GETPROP) {\n          // We should never see a mix of numbers and strings.\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        }\n\n        // handle STRING node\n        else if (type == Token.STRING) {\n            // We should never see a mix of numbers and strings.\n            String name = child.getString();\n            T type = typeSystem.getType(getScope(), n, name);\n\n            Property prop = getProperty(name);\n            if (!prop.scheduleRenaming(child,\n                                       processProperty(t, prop, type, null))) {\n                // TODO(user): It doesn't look like the user can do much in this\n                // case right now.\n                if (propertiesToErrorFor.containsKey(name)) {\n                    compiler.report(JSError.make(\n                            t.getSourceName(), child, propertiesToErrorFor.get(name),\n                            Warnings.INVALIDATION, name,\n                            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n                }\n            }\n        }\n\n        // handle SET node\n        else if (type == Token.SET) {\n            // Setting a property using obj.prop = ...\n            Node nameNode = child.getFirstChild();\n            String name = nameNode.getString();\n            T type = typeSystem.getType(getScope(), n, name);\n\n            Property prop = getProperty(name);\n            if (!prop.scheduleRenaming(nameNode,\n                                       processProperty(t, prop, type, null))) {\n                // TODO(user): It doesn't look like the user can do much in this\n                // case right now.\n                if (propertiesToErrorFor.containsKey(name)) {\n                    compiler.report(JSError.make(\n                            t.getSourceName(), child, propertiesToErrorFor.get(name),\n                            Warnings.INVALIDATION, name,\n                            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n                }\n            }\n\n            // Visit the value as well.\n            Node valueNode = nameNode.getNext();\n            // This code handles destructuring patterns in object literals and var declarations.\n            if (NodeUtil.isNameDeclaration(child.getParent())) {\n                t.visitDeclaration(valueNode, null, TypeMatchingStrategy.INSTANCE);\n            } else {\n                t.visit(valueNode, TypeMatchingStrategy.INSTANCE);\n           }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..866df5bd 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,84 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+\n+        // STRING, GET, SET\n+        Token type = child.getToken();\n+\n+        // handle GETPROP node\n+        if (type == Token.GETPROP) {\n+          // We should never see a mix of numbers and strings.\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+                                     processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION, name,\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+          }\n+        }\n+\n+        // handle STRING node\n+        else if (type == Token.STRING) {\n+            // We should never see a mix of numbers and strings.\n+            String name = child.getString();\n+            T type = typeSystem.getType(getScope(), n, name);\n+\n+            Property prop = getProperty(name);\n+            if (!prop.scheduleRenaming(child,\n+                                       processProperty(t, prop, type, null))) {\n+                // TODO(user): It doesn't look like the user can do much in this\n+                // case right now.\n+                if (propertiesToErrorFor.containsKey(name)) {\n+                    compiler.report(JSError.make(\n+                            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                            Warnings.INVALIDATION, name,\n+                            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+                }\n+            }\n+        }\n+\n+        // handle SET node\n+        else if (type == Token.SET) {\n+            // Setting a property using obj.prop = ...\n+            Node nameNode = child.getFirstChild();\n+            String name = nameNode.getString();\n+            T type = typeSystem.getType(getScope(), n, name);\n+\n+            Property prop = getProperty(name);\n+            if (!prop.scheduleRenaming(nameNode,\n+                                       processProperty(t, prop, type, null))) {\n+                // TODO(user): It doesn't look like the user can do much in this\n+                // case right now.\n+                if (propertiesToErrorFor.containsKey(name)) {\n+                    compiler.report(JSError.make(\n+                            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                            Warnings.INVALIDATION, name,\n+                            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+                }\n+            }\n+\n+            // Visit the value as well.\n+            Node valueNode = nameNode.getNext();\n+            // This code handles destructuring patterns in object literals and var declarations.\n+            if (NodeUtil.isNameDeclaration(child.getParent())) {\n+                t.visitDeclaration(valueNode, null, TypeMatchingStrategy.INSTANCE);\n+            } else {\n+                t.visit(valueNode, TypeMatchingStrategy.INSTANCE);\n+           }\n+            }\n+        }\n+    }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}