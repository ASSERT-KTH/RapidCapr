{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition eig = new EigenDecomposition(m);\n    \n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n        eig.getRealEigenvalues().stream().map(Math::sqrt).toArray(Double[]::new));\n    RealMatrix sqrtM = eig.getV().multiply(sqrtD).multiply(eig.getV().transpose());\n  \n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5387d6c37 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    \n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n+        eig.getRealEigenvalues().stream().map(Math::sqrt).toArray(Double[]::new));\n+    RealMatrix sqrtM = eig.getV().multiply(sqrtD).multiply(eig.getV().transpose());\n+  \n+    return sqrtM;\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}