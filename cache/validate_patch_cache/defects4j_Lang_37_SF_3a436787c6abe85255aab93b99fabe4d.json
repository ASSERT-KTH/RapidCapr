{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    // Handle primitive types\n    if (type1.isPrimitive() || type2.isPrimitive()) {\n        if (type1.equals(type2) || (BoxingUtils.isWrapperType(type1) && BoxingUtils.isWrapperType(type2))) {\n            T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n            return joinedArray;\n        }\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n    }\n\n    // Handle non-primitive types\n    if (type1.isAssignableFrom(type2)) {\n        T[] joinedArray = Arrays.copyOf(array1, array1.length + array2.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n\n    if (type2.isAssignableFrom(type1)) {\n        T[] joinedArray = Arrays.copyOf(array2, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        return joinedArray;\n    }\n\n    throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..5faa737e 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,43 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+\n+    // Handle primitive types\n+    if (type1.isPrimitive() || type2.isPrimitive()) {\n+        if (type1.equals(type2) || (BoxingUtils.isWrapperType(type1) && BoxingUtils.isWrapperType(type2))) {\n+            T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+            return joinedArray;\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n+    }\n+\n+    // Handle non-primitive types\n+    if (type1.isAssignableFrom(type2)) {\n+        T[] joinedArray = Arrays.copyOf(array1, array1.length + array2.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    if (type2.isAssignableFrom(type1)) {\n+        T[] joinedArray = Arrays.copyOf(array2, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n         return joinedArray;\n     }\n \n+    throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n+}\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}