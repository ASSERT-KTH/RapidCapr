{
    "patch": "private void readTypeVariables(TypeVariable<?> type) {\n    Type[] bounds = type.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerActualTypeArgument(type);\n    } else {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable) {\n                readTypeVariables((TypeVariable<?>) bound);\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n        registerActualTypeArgument(type);\n    }\n}\n\nprivate void registerActualTypeArgument(TypeVariable<?> type) {\n    Type actualType = getActualTypeArgumentFor(type);\n    if (actualType != null && !(actualType instanceof TypeVariable)) {\n        registerTypeVariablesOn(actualType);\n    }\n}\n\nprivate void readTypeVariables() {\n    TypeVariable<?>[] typeVariables = genericDeclaration.getTypeParameters();\n    for (TypeVariable<?> typeVariable : typeVariables) {\n        readTypeVariables(typeVariable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..36cb8cf1b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,36 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables(TypeVariable<?> type) {\n+    Type[] bounds = type.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerActualTypeArgument(type);\n+    } else {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable) {\n+                readTypeVariables((TypeVariable<?>) bound);\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+        registerActualTypeArgument(type);\n+    }\n+}\n+\n+private void registerActualTypeArgument(TypeVariable<?> type) {\n+    Type actualType = getActualTypeArgumentFor(type);\n+    if (actualType != null && !(actualType instanceof TypeVariable)) {\n+        registerTypeVariablesOn(actualType);\n+    }\n+}\n+\n+private void readTypeVariables() {\n+    TypeVariable<?>[] typeVariables = genericDeclaration.getTypeParameters();\n+    for (TypeVariable<?> typeVariable : typeVariables) {\n+        readTypeVariables(typeVariable);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}