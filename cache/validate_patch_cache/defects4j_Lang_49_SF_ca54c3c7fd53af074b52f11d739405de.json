{
    "patch": "public Fraction reduce() {\n    if (this.numerator == 0) {\n        return ZERO;  // Fraction.ZERO or new Fraction(0,1)\n    }\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (gcd == 1) {\n        return this;  // Already in simplest form\n    }\n    int reducedNumerator = numerator / gcd;\n    int reducedDenominator = denominator / gcd;\n    if (reducedDenominator < 0) {  // Ensure negative sign on numerator\n        reducedNumerator = -reducedNumerator;\n        reducedDenominator = -reducedDenominator;\n    }\n    return new Fraction(reducedNumerator, reducedDenominator);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..6d53006c 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,22 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    if (this.numerator == 0) {\n+        return ZERO;  // Fraction.ZERO or new Fraction(0,1)\n+    }\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+    if (gcd == 1) {\n+        return this;  // Already in simplest form\n     }\n+    int reducedNumerator = numerator / gcd;\n+    int reducedDenominator = denominator / gcd;\n+    if (reducedDenominator < 0) {  // Ensure negative sign on numerator\n+        reducedNumerator = -reducedNumerator;\n+        reducedDenominator = -reducedDenominator;\n+    }\n+    return new Fraction(reducedNumerator, reducedDenominator);\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<0/1> was not:<0/1>",
    "test_result": "FAIL"
}