{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    String[] exceptionHandlers = {\"CatchStatement\", \"TryStatement\"};\n    for (String exceptionHandler : exceptionHandlers) {\n        NodeList<Statement> exceptionHandlersNodes = cfgNode.getChildNodesByType(NodeList.class)\n                .stream()\n                .filter(n -> n.isNodesOfType(exceptionHandler))\n                .map(n -> (NodeList<Statement>)n)\n                .findFirst()\n                .orElse(null);\n        if (exceptionHandlersNodes != null && !exceptionHandlersNodes.isEmpty()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..5650a419 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,21 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    String[] exceptionHandlers = {\"CatchStatement\", \"TryStatement\"};\n+    for (String exceptionHandler : exceptionHandlers) {\n+        NodeList<Statement> exceptionHandlersNodes = cfgNode.getChildNodesByType(NodeList.class)\n+                .stream()\n+                .filter(n -> n.isNodesOfType(exceptionHandler))\n+                .map(n -> (NodeList<Statement>)n)\n+                .findFirst()\n+                .orElse(null);\n+        if (exceptionHandlersNodes != null && !exceptionHandlersNodes.isEmpty()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}