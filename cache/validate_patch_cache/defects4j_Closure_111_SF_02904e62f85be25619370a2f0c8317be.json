{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : outEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n            return true;\n        }\n        if (edge.getDest().getType() == cfgNode.getType()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..8304021a 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -50,9 +50,18 @@ public class ClosureReverseAbstractInterpreter\n   private final Visitor<JSType> restrictToArrayVisitor =\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n-        protected JSType caseTopType(JSType topType) {\n-          return topType;\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : outEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+            return true;\n+        }\n+        if (edge.getDest().getType() == cfgNode.getType()) {\n+            return true;\n         }\n+    }\n+    return false;\n+}\n \n         @Override\n         public JSType caseObjectType(ObjectType type) {",
    "result_reason": "error: <anonymous com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$1> is not abstract and does not override abstract method caseTopType(JSType) in ChainableReverseAbstractInterpreter.RestrictByTypeOfResultVisitor",
    "test_result": "ERROR"
}