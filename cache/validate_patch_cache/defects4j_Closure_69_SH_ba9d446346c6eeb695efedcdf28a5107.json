{
    "patch": "      if (functionType.getTypeOfThis().isExplicitPrimitive()) {\n        Node parent = n.getParent();\n        if (parent != null) {\n          switch (parent.getToken()) {\n            case GETPROP:\n            case GETELEM:\n              break;\n            case NEW:\n              if (!functionType.isConstructor()) {\n                report(t, n, THIS_IS_TYPED, childType.toString());\n              }\n              break;\n            default:\n              report(t, n, THIS_IS_TYPED, childType.toString());\n              break;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..ccf19898 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis().isExplicitPrimitive()) {\n+        Node parent = n.getParent();\n+        if (parent != null) {\n+          switch (parent.getToken()) {\n+            case GETPROP:\n+            case GETELEM:\n+              break;\n+            case NEW:\n+              if (!functionType.isConstructor()) {\n+                report(t, n, THIS_IS_TYPED, childType.toString());\n+              }\n+              break;\n+            default:\n+              report(t, n, THIS_IS_TYPED, childType.toString());\n+              break;\n+          }\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}