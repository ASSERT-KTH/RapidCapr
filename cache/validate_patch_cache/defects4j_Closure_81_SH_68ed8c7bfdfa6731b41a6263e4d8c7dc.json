{
    "patch": "name = new Name();\nname.setIdentifier(\"\");\njumpTable.putRaw(functionNode, name.getIdentifier());\nname.setLineno(functionNode.getLineno());\nname.setParent(functionNode);\n\nboolean hasArguments = false;\nfor (AstNode param : functionNode.getParams()) {\n  if (!(param instanceof EmptyExpression)) {\n    hasArguments = true;\n    break;\n  }\n}\n\nif (hasArguments) {\n  Node lp = newNode(Token.LP);\n  Node rp = newNode(Token.RP);\n  lp.setLineno(functionNode.getLineno());\n  lp.setCharno(name.getEnd());\n  rp.setLineno(functionNode.getLineno());\n  rp.setCharno(name.getEnd());\n  jumpTable.putRaw(functionNode, \"\" + lp.hashCode());\n  jumpTable.putRaw(functionNode, \"\" + rp.hashCode());\n  int i = 0;\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n    if (++i < functionNode.getParamCount() || functionNode.isParamListShortened()) {\n      lp.addChildToBack(newNode(Token.COMMA));\n    }\n  }\n  if (functionNode.isParamListShortened()) {\n    lp.addChildToBack(newNode(Token.ELLISION));\n  }\n  lp.addChildToBack(rp);\n  node.addChildToBack(lp);\n}\nnode.addChildToBack(transform(functionNode.getBody()));\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..3546d2d8 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,44 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+name = new Name();\n+name.setIdentifier(\"\");\n+jumpTable.putRaw(functionNode, name.getIdentifier());\n+name.setLineno(functionNode.getLineno());\n+name.setParent(functionNode);\n+\n+boolean hasArguments = false;\n+for (AstNode param : functionNode.getParams()) {\n+  if (!(param instanceof EmptyExpression)) {\n+    hasArguments = true;\n+    break;\n+  }\n+}\n+\n+if (hasArguments) {\n+  Node lp = newNode(Token.LP);\n+  Node rp = newNode(Token.RP);\n+  lp.setLineno(functionNode.getLineno());\n+  lp.setCharno(name.getEnd());\n+  rp.setLineno(functionNode.getLineno());\n+  rp.setCharno(name.getEnd());\n+  jumpTable.putRaw(functionNode, \"\" + lp.hashCode());\n+  jumpTable.putRaw(functionNode, \"\" + rp.hashCode());\n+  int i = 0;\n+  for (AstNode param : functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+    if (++i < functionNode.getParamCount() || functionNode.isParamListShortened()) {\n+      lp.addChildToBack(newNode(Token.COMMA));\n+    }\n+  }\n+  if (functionNode.isParamListShortened()) {\n+    lp.addChildToBack(newNode(Token.ELLISION));\n+  }\n+  lp.addChildToBack(rp);\n+  node.addChildToBack(lp);\n+}\n+node.addChildToBack(transform(functionNode.getBody()));\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}