{
    "patch": "public class MyClass {\n\n    public static String getProperty(String propName) {\n        String[] warnings = {\"Warning: Property not found\"};\n        String[] props = {\"prop1=value1\", \"prop2=value2\"};\n\n        for (String prop : props) {\n            if (prop.startsWith(propName + \"=\")) {\n                return prop.substring(propName.length() + 1);\n            }\n        }\n        return warnings[0];\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..88a63fa3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class MyClass {\n+\n+    public static String getProperty(String propName) {\n+        String[] warnings = {\"Warning: Property not found\"};\n+        String[] props = {\"prop1=value1\", \"prop2=value2\"};\n+\n+        for (String prop : props) {\n+            if (prop.startsWith(propName + \"=\")) {\n+                return prop.substring(propName.length() + 1);\n+            }\n+        }\n+        return warnings[0];\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}