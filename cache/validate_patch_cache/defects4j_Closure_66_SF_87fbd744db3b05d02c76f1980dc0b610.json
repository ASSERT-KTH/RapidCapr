{
    "patch": "public class Percent {\n    public static double getTypedPercent(String jsonStr) {\n        Gson gson = new Gson();\n        Map<String, Integer> map = gson.fromJson(jsonStr, new TypeToken<Map<String, Integer>>(){}.getType());\n        double total = 0;\n        double percent;\n        int typed = map.get(\"typed\");\n        int totalEntries = map.get(\"total\");\n        total = (typed / totalEntries) * 100.0;\n        return total;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7772da9c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public class Percent {\n+    public static double getTypedPercent(String jsonStr) {\n+        Gson gson = new Gson();\n+        Map<String, Integer> map = gson.fromJson(jsonStr, new TypeToken<Map<String, Integer>>(){}.getType());\n+        double total = 0;\n+        double percent;\n+        int typed = map.get(\"typed\");\n+        int totalEntries = map.get(\"total\");\n+        total = (typed / totalEntries) * 100.0;\n+        return total;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}