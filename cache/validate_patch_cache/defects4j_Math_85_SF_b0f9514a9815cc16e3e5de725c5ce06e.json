{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n    double[] bracket = {initial, initial};\n    double fa = function.value(bracket[0]);\n    double fb = function.value(bracket[1]);\n    int numIterations = 0;\n\n    while (fa * fb >= 0) {\n        if (numIterations >= maximumIterations) {\n            throw new ConvergenceException(\n                    \"number of iterations={0}, maximum iterations={1}, \" +\n                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                            \"final b value={6}, f(a)={7}, f(b)={8}\",\n                    maximumIterations, maximumIterations, initial,\n                    lowerBound, upperBound, bracket[0], bracket[1], fa, fb);\n        }\n        double newPoint = 0.5 * (bracket[0] + bracket[1]);\n        double fp = function.value(newPoint);\n        if (fa * fp > 0) {\n            fa = fp;\n            bracket[0] = newPoint;\n        } else if (fb * fp > 0) {\n            fb = fp;\n            bracket[1] = newPoint;\n        } else {\n            assert fp == 0.;\n            return new double[]{newPoint, newPoint};\n        }\n        ++numIterations;\n    }\n    return bracket;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..539e9073a 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,50 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n+public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+    double[] bracket = {initial, initial};\n+    double fa = function.value(bracket[0]);\n+    double fb = function.value(bracket[1]);\n+    int numIterations = 0;\n+\n+    while (fa * fb >= 0) {\n+        if (numIterations >= maximumIterations) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                    \"number of iterations={0}, maximum iterations={1}, \" +\n+                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                            \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                    maximumIterations, maximumIterations, initial,\n+                    lowerBound, upperBound, bracket[0], bracket[1], fa, fb);\n         }\n-        \n-        return new double[]{a, b};\n+        double newPoint = 0.5 * (bracket[0] + bracket[1]);\n+        double fp = function.value(newPoint);\n+        if (fa * fp > 0) {\n+            fa = fp;\n+            bracket[0] = newPoint;\n+        } else if (fb * fp > 0) {\n+            fb = fp;\n+            bracket[1] = newPoint;\n+        } else {\n+            assert fp == 0.;\n+            return new double[]{newPoint, newPoint};\n+        }\n+        ++numIterations;\n     }\n+    return bracket;\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}