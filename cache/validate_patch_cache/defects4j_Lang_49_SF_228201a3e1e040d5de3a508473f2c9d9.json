{
    "patch": "        if (numerator == 0) {\n            return new Fraction(0, 1);\n        }\n        int gcd = gcd(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return new Fraction(numerator / gcd, denominator / gcd);\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return gcd(b, a % b);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..cbbb6ea8 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,22 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        if (numerator == 0) {\n+            return new Fraction(0, 1);\n+        }\n+        int gcd = gcd(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        return new Fraction(numerator / gcd, denominator / gcd);\n     }\n \n+    private int gcd(int a, int b) {\n+        if (b == 0) {\n+            return a;\n+        } else {\n+            return gcd(b, a % b);\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}