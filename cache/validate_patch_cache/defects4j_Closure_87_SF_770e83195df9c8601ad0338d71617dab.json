{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n == null || !n.isBlock() || !NodeUtil.hasOneChild(n)) {\n    return false; // Not a foldable expression block\n  }\n\n  Node child = n.getFirstChild();\n  Node parent = child.getParent();\n  if (NodeUtil.isFunctionExpression(child) || parent != null && parent.isAssign()) {\n    return false; // Not foldable if child node is a function expression or parent is an assignment\n  }\n\n  // Traverse through the child expression if it's a ternary or comma expression until we reach the final expression\n  while (child != null && (child.isHook() || child.isComma())) {\n    child = child.isHook() ? child.getFirstChild() : child.getLastChild().getPrevious();  \n  }\n\n  // Foldable only if the child expression is an expression statement and it does not have any side effects\n  return child != null && child.isExprResult() && !NodeUtil.mayHaveSideEffects(child.getFirstChild());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..879d535e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,26 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n == null || !n.isBlock() || !NodeUtil.hasOneChild(n)) {\n+    return false; // Not a foldable expression block\n+  }\n \n-    return false;\n+  Node child = n.getFirstChild();\n+  Node parent = child.getParent();\n+  if (NodeUtil.isFunctionExpression(child) || parent != null && parent.isAssign()) {\n+    return false; // Not foldable if child node is a function expression or parent is an assignment\n+  }\n+\n+  // Traverse through the child expression if it's a ternary or comma expression until we reach the final expression\n+  while (child != null && (child.isHook() || child.isComma())) {\n+    child = child.isHook() ? child.getFirstChild() : child.getLastChild().getPrevious();  \n   }\n \n+  // Foldable only if the child expression is an expression statement and it does not have any side effects\n+  return child != null && child.isExprResult() && !NodeUtil.mayHaveSideEffects(child.getFirstChild());\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}