{
    "patch": "if (block.isFunction) {\n      if (ref == getInitializingReference()) {\n        return true;\n      } else {\n        return false;\n      }\n    } else if (block.isLoop) {\n      for (Reference r : references) {\n        if (r == ref) {\n          return true;\n        }\n        if (r.getParent() != null && r.getParent() instanceof Loop) {\n          // if we hit the loop, we didn't find the one-and-only-assignment.\n          return false;\n        }\n      }\n      Preconditions.checkState(false, \"Unexpected exit from loop.\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2805ead9 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+      if (ref == getInitializingReference()) {\n+        return true;\n+      } else {\n+        return false;\n+      }\n+    } else if (block.isLoop) {\n+      for (Reference r : references) {\n+        if (r == ref) {\n+          return true;\n+        }\n+        if (r.getParent() != null && r.getParent() instanceof Loop) {\n+          // if we hit the loop, we didn't find the one-and-only-assignment.\n+          return false;\n+        }\n+      }\n+      Preconditions.checkState(false, \"Unexpected exit from loop.\");\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}