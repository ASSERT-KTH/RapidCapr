{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if (offsetLocal > offsetAdjusted) {\n                    // go forward one step and try again\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + 1);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                    // fall through to add one hour\n                    offsetAdjusted++;\n                } else if (offsetLocal < offsetAdjusted) {\n                    // go forward one step and try again\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                    // fall through to subtract one hour\n                    offsetAdjusted--;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5d2c3ea4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if (offsetLocal > offsetAdjusted) {\n+                    // go forward one step and try again\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + 1);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    // fall through to add one hour\n+                    offsetAdjusted++;\n+                } else if (offsetLocal < offsetAdjusted) {\n+                    // go forward one step and try again\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    // fall through to subtract one hour\n+                    offsetAdjusted--;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot assign a value to final variable offsetAdjusted",
    "test_result": "ERROR"
}