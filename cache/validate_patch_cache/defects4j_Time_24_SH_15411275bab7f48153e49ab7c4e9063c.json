{
    "patch": "                SavedField savedField = savedFields[i];\n                DateTimeField field = savedField.iField;\n                int newVal = savedField.iValue;\n                if (resetFields && i == 0 && field.getChronology().getZone() != null\n                        && field.isSupported(DateTimeFieldType.year())) {\n                    int year = field.set(millis, iDefaultYear);\n                    if (year != iDefaultYear) {\n                        throw new IllegalArgumentException(\n                            \"Default year was corrupted during evaluation\");\n                    }\n                }\n                millis = field.set(millis, newVal);\n            }\n        } catch (IllegalArgumentException e) {\n            if (text == null) {\n                throw e;\n            }\n            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..295e41e4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                SavedField savedField = savedFields[i];\n+                DateTimeField field = savedField.iField;\n+                int newVal = savedField.iValue;\n+                if (resetFields && i == 0 && field.getChronology().getZone() != null\n+                        && field.isSupported(DateTimeFieldType.year())) {\n+                    int year = field.set(millis, iDefaultYear);\n+                    if (year != iDefaultYear) {\n+                        throw new IllegalArgumentException(\n+                            \"Default year was corrupted during evaluation\");\n+                    }\n+                }\n+                millis = field.set(millis, newVal);\n+            }\n+        } catch (IllegalArgumentException e) {\n+            if (text == null) {\n+                throw e;\n+            }\n+            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}