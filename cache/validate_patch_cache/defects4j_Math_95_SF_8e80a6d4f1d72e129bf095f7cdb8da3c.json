{
    "patch": "protected double getInitialDomain(double p) {\n\n    double d = getDenominatorDegreesOfFreedom();\n\n    if(Double.isNaN(d) || d <= 2.0){\n        return 0.0;\n    }\n    // check if degrees of freedom is larger than maximum double value\n    else if(d == Double.POSITIVE_INFINITY) {\n        return Double.MAX_VALUE;\n    }\n    else{\n        // calculate mean\n        double ret = d / (d - 2.0);\n        // check if result is finite\n        if(!Double.isFinite(ret)){\n            // if result is infinite or NaN, set initial domain to half the maximum double value\n            ret = Double.MAX_VALUE/2;\n        }\n        return ret;\n    }   \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..e40cc35e9 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,28 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+protected double getInitialDomain(double p) {\n+\n+    double d = getDenominatorDegreesOfFreedom();\n+\n+    if(Double.isNaN(d) || d <= 2.0){\n+        return 0.0;\n     }\n+    // check if degrees of freedom is larger than maximum double value\n+    else if(d == Double.POSITIVE_INFINITY) {\n+        return Double.MAX_VALUE;\n+    }\n+    else{\n+        // calculate mean\n+        double ret = d / (d - 2.0);\n+        // check if result is finite\n+        if(!Double.isFinite(ret)){\n+            // if result is infinite or NaN, set initial domain to half the maximum double value\n+            ret = Double.MAX_VALUE/2;\n+        }\n+        return ret;\n+    }   \n+}\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}