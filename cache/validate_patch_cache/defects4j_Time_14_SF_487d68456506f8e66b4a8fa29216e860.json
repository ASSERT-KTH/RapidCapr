{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // Overridden as superclass algorithm can't handle 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Contiguous partials can handle addition by a number of months\n        MutableDateTime mut = new MutableDateTime(partial, iChronology);\n        int yearsToAdd = valueToAdd / 12;\n        int monthsToAdd = valueToAdd % 12;\n        mut.addYears(yearsToAdd);\n        mut.addMonths(monthsToAdd);\n        try {\n            return iChronology.get(partial, mut.getMillis());\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n        }\n    } else {\n        // Non-contiguous partials must be handled separately\n        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {\n            int yearIndex = partial.indexOf(DateTimeFieldType.year());\n            int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n            int dayOfMonthIndex = partial.indexOf(DateTimeFieldType.dayOfMonth());\n            int[] newValues = Arrays.copyOf(values, values.length);\n            int year = values[yearIndex];\n            int month = values[monthIndex];\n            int dayOfMonth = values[dayOfMonthIndex];\n            int newMonth = iChronology.monthOfYear().add(month, valueToAdd);\n            if (dayOfMonth > iChronology.dayOfMonth().getMaximumValue(year, newMonth)) {\n                newValues[dayOfMonthIndex] = iChronology.dayOfMonth().getMaximumValue(year, newMonth);\n            }\n            newValues[monthIndex] = newMonth;\n            return newValues;\n        } else {\n            // Let the superclass handle unsupported fields\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b4f95975 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // Overridden as superclass algorithm can't handle 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // Contiguous partials can handle addition by a number of months\n+        MutableDateTime mut = new MutableDateTime(partial, iChronology);\n+        int yearsToAdd = valueToAdd / 12;\n+        int monthsToAdd = valueToAdd % 12;\n+        mut.addYears(yearsToAdd);\n+        mut.addMonths(monthsToAdd);\n+        try {\n+            return iChronology.get(partial, mut.getMillis());\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+    } else {\n+        // Non-contiguous partials must be handled separately\n+        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {\n+            int yearIndex = partial.indexOf(DateTimeFieldType.year());\n+            int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n+            int dayOfMonthIndex = partial.indexOf(DateTimeFieldType.dayOfMonth());\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            int year = values[yearIndex];\n+            int month = values[monthIndex];\n+            int dayOfMonth = values[dayOfMonthIndex];\n+            int newMonth = iChronology.monthOfYear().add(month, valueToAdd);\n+            if (dayOfMonth > iChronology.dayOfMonth().getMaximumValue(year, newMonth)) {\n+                newValues[dayOfMonthIndex] = iChronology.dayOfMonth().getMaximumValue(year, newMonth);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            newValues[monthIndex] = newMonth;\n+            return newValues;\n         } else {\n+            // Let the superclass handle unsupported fields\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}