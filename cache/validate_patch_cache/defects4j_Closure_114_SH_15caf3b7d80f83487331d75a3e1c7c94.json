{
    "patch": "        } else {\n          Node parent = n.getParent();\n          if (parent.isCall() && !parent.getFirstChild().equals(n) &&\n              !NodeUtil.mayBeObjectLitKey(parent, n)) {\n            // If the assignment is part of a call expression, then just record the dep scope\n            // of the RHS, since the caller depends on it and the LHS value might not be used.\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..89598b12 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -576,6 +576,16 @@ final class NameAnalyzer implements CompilerPass {\n             recordDepScope(nameNode, ns);\n           }\n         } else {\n+          Node parent = n.getParent();\n+          if (parent.isCall() && !parent.getFirstChild().equals(n) &&\n+              !NodeUtil.mayBeObjectLitKey(parent, n)) {\n+            // If the assignment is part of a call expression, then just record the dep scope\n+            // of the RHS, since the caller depends on it and the LHS value might not be used.\n+            recordDepScope(recordNode, ns);\n+          } else {\n+            recordDepScope(nameNode, ns);\n+          }\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}