{
    "patch": "public static final int CHAR_DELIMITER = 0;\npublic static final int CHAR_SPACE = 1;\npublic static final int CHAR_ALPHA = 2;\npublic static final int CHAR_NUMERIC = 3;\npublic static final int CHAR_INVALID = -1;\n\nprivate static final int[][] CHAR_TYPES = new int[128][1];\n\nstatic {\n    for (int i = 0; i < CHAR_TYPES.length; i++) {\n        CHAR_TYPES[i][0] = CHAR_INVALID;\n    }\n\n    CHAR_TYPES['\\t'][0] = CHAR_SPACE;\n    CHAR_TYPES['\\n'][0] = CHAR_SPACE;\n    CHAR_TYPES['\\f'][0] = CHAR_SPACE;\n    CHAR_TYPES['\\r'][0] = CHAR_SPACE;\n    CHAR_TYPES[' '][0] = CHAR_SPACE;\n\n    CHAR_TYPES['!'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['\"'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['#'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['$'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['%'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['&'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['\\''][0] = CHAR_DELIMITER;\n    CHAR_TYPES['('][0] = CHAR_DELIMITER;\n    CHAR_TYPES[')'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['*'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['+'][0] = CHAR_DELIMITER;\n    CHAR_TYPES[','][0] = CHAR_DELIMITER;\n    CHAR_TYPES['-'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['.'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['/'][0] = CHAR_DELIMITER;\n\n    for (char ch = '0'; ch <= '9'; ch++) {\n        CHAR_TYPES[ch][0] = CHAR_NUMERIC;\n    }\n\n    CHAR_TYPES[':'][0] = CHAR_DELIMITER;\n    CHAR_TYPES[';'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['<'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['='][0] = CHAR_DELIMITER;\n    CHAR_TYPES['>'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['?'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['@'][0] = CHAR_DELIMITER;\n\n    for (char ch = 'A'; ch <= 'Z'; ch++) {\n        CHAR_TYPES[ch][0] = CHAR_ALPHA;\n    }\n\n    CHAR_TYPES['['][0] = CHAR_DELIMITER;\n    CHAR_TYPES['\\\\'][0] = CHAR_DELIMITER;\n    CHAR_TYPES[']'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['^'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['_'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['`'][0] = CHAR_DELIMITER;\n\n    for (char ch = 'a'; ch <= 'z'; ch++) {\n        CHAR_TYPES[ch][0] = CHAR_ALPHA;\n    }\n\n    CHAR_TYPES['{'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['|'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['}'][0] = CHAR_DELIMITER;\n    CHAR_TYPES['~'][0] = CHAR_DELIMITER;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..188769e2 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,73 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+public static final int CHAR_DELIMITER = 0;\n+public static final int CHAR_SPACE = 1;\n+public static final int CHAR_ALPHA = 2;\n+public static final int CHAR_NUMERIC = 3;\n+public static final int CHAR_INVALID = -1;\n+\n+private static final int[][] CHAR_TYPES = new int[128][1];\n+\n+static {\n+    for (int i = 0; i < CHAR_TYPES.length; i++) {\n+        CHAR_TYPES[i][0] = CHAR_INVALID;\n+    }\n+\n+    CHAR_TYPES['\\t'][0] = CHAR_SPACE;\n+    CHAR_TYPES['\\n'][0] = CHAR_SPACE;\n+    CHAR_TYPES['\\f'][0] = CHAR_SPACE;\n+    CHAR_TYPES['\\r'][0] = CHAR_SPACE;\n+    CHAR_TYPES[' '][0] = CHAR_SPACE;\n+\n+    CHAR_TYPES['!'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['\"'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['#'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['$'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['%'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['&'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['\\''][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['('][0] = CHAR_DELIMITER;\n+    CHAR_TYPES[')'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['*'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['+'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES[','][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['-'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['.'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['/'][0] = CHAR_DELIMITER;\n+\n+    for (char ch = '0'; ch <= '9'; ch++) {\n+        CHAR_TYPES[ch][0] = CHAR_NUMERIC;\n+    }\n+\n+    CHAR_TYPES[':'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES[';'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['<'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['='][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['>'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['?'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['@'][0] = CHAR_DELIMITER;\n+\n+    for (char ch = 'A'; ch <= 'Z'; ch++) {\n+        CHAR_TYPES[ch][0] = CHAR_ALPHA;\n+    }\n+\n+    CHAR_TYPES['['][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['\\\\'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES[']'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['^'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['_'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['`'][0] = CHAR_DELIMITER;\n+\n+    for (char ch = 'a'; ch <= 'z'; ch++) {\n+        CHAR_TYPES[ch][0] = CHAR_ALPHA;\n+    }\n+\n+    CHAR_TYPES['{'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['|'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['}'][0] = CHAR_DELIMITER;\n+    CHAR_TYPES['~'][0] = CHAR_DELIMITER;\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}