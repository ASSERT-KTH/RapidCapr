{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long totalMillis = getMillis();\n    totalMillis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    totalMillis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    totalMillis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    totalMillis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    totalMillis += ((long) getWeeks()) * (7L * DateTimeConstants.MILLIS_PER_DAY);\n\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {    \n        int totalMonths = (getYears() * 12) + getMonths();\n        totalMonths += (getWeeks() * 7 + getDays()) / 30;\n\n        int years = totalMonths / 12;\n        int months = totalMonths % 12;\n        int weeks = getWeeks();\n        int days = getDays();\n\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n            months += (totalMonths - years * 12);\n        } else {\n            weeks += (days / 7);\n            days %= 7;\n        }\n\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        } else {\n            days += (weeks * 7);\n            weeks = 0;\n        }\n\n        if (weeks != 0) {\n            result = result.withWeeks(weeks);\n        }\n\n        if (days != 0) {\n            result = result.withDays(days);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..d708f4d8 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,51 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long totalMillis = getMillis();\n+    totalMillis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n+    totalMillis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n+    totalMillis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n+    totalMillis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n+    totalMillis += ((long) getWeeks()) * (7L * DateTimeConstants.MILLIS_PER_DAY);\n+\n+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n+\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {    \n+        int totalMonths = (getYears() * 12) + getMonths();\n+        totalMonths += (getWeeks() * 7 + getDays()) / 30;\n+\n+        int years = totalMonths / 12;\n+        int months = totalMonths % 12;\n+        int weeks = getWeeks();\n+        int days = getDays();\n+\n+        if (type.isSupported(DurationFieldType.years())) {\n+            result = result.withYears(years);\n+            months += (totalMonths - years * 12);\n+        } else {\n+            weeks += (days / 7);\n+            days %= 7;\n+        }\n+\n+        if (type.isSupported(DurationFieldType.months())) {\n+            result = result.withMonths(months);\n+        } else {\n+            days += (weeks * 7);\n+            weeks = 0;\n+        }\n+\n+        if (weeks != 0) {\n+            result = result.withWeeks(weeks);\n+        }\n+\n+        if (days != 0) {\n+            result = result.withDays(days);\n         }\n-        return result;\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P1W12D>",
    "test_result": "FAIL"
}