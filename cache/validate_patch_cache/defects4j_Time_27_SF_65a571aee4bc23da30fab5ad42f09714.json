{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    boolean comp0Exists = false;\n    boolean comp1Exists = false;\n\n    // Find the first non-null component\n    for (int i = 0; i < comp.length; i++) {\n        if (comp[i] != null) {\n            if (i == 0) {\n                printer = (PeriodPrinter) comp[i];\n                comp0Exists = true;\n            } else {\n                parser = (PeriodParser) comp[i];\n                comp1Exists = true;\n            }\n\n            break;\n        }\n    }\n\n    // Look for a separator\n    if (!comp0Exists || !comp1Exists) {\n        boolean containsSeparator = false;\n        List<Object> remainingPairs;\n\n        for (int i = 0; i < elementPairs.size(); i++) {\n            Object pair = elementPairs.get(i);\n\n            if (pair instanceof Separator) {\n                containsSeparator = true;\n\n                Object[] tempComp = createComposite(elementPairs.subList(i + 1, elementPairs.size()));\n\n                // If comp0 is still null and tempComp contains a printer, use it\n                if (!comp0Exists && tempComp[0] instanceof PeriodPrinter) {\n                    printer = (PeriodPrinter) tempComp[0];\n                    comp0Exists = true;\n                }\n\n                // If comp1 is still null and tempComp contains a parser, use it\n                if (!comp1Exists && tempComp[1] instanceof PeriodParser) {\n                    parser = (PeriodParser) tempComp[1];\n                    comp1Exists = true;\n                }\n\n                // If we've found both components, stop looking\n                if (comp0Exists && comp1Exists) {\n                    break;\n                }\n            }\n        }\n\n        // If neither component exists, add empty components\n        if (!comp0Exists) {\n            printer = new PeriodFormatterBuilder().appendLiteral(\"\").toPrinter();\n        }\n\n        if (!comp1Exists) {\n            parser = new PeriodFormatterBuilder().appendLiteral(\"\").toParser();\n        }\n\n        // If there is no separator, use the existing components or add empty ones\n        if (!containsSeparator) {\n            if (comp0Exists && !comp1Exists) {\n                parser = new PeriodFormatterBuilder().appendLiteral(\"\").toParser();\n            } else if (!comp0Exists && comp1Exists) {\n                printer = new PeriodFormatterBuilder().appendLiteral(\"\").toPrinter();\n            } else if (!comp0Exists && !comp1Exists) {\n                printer = new PeriodFormatterBuilder().appendLiteral(\"\").toPrinter();\n                parser = new PeriodFormatterBuilder().appendLiteral(\"\").toParser();\n            }\n        }\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b688925e 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,91 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    boolean comp0Exists = false;\n+    boolean comp1Exists = false;\n+\n+    // Find the first non-null component\n+    for (int i = 0; i < comp.length; i++) {\n+        if (comp[i] != null) {\n+            if (i == 0) {\n+                printer = (PeriodPrinter) comp[i];\n+                comp0Exists = true;\n+            } else {\n+                parser = (PeriodParser) comp[i];\n+                comp1Exists = true;\n+            }\n+\n+            break;\n+        }\n+    }\n+\n+    // Look for a separator\n+    if (!comp0Exists || !comp1Exists) {\n+        boolean containsSeparator = false;\n+        List<Object> remainingPairs;\n+\n+        for (int i = 0; i < elementPairs.size(); i++) {\n+            Object pair = elementPairs.get(i);\n+\n+            if (pair instanceof Separator) {\n+                containsSeparator = true;\n+\n+                Object[] tempComp = createComposite(elementPairs.subList(i + 1, elementPairs.size()));\n+\n+                // If comp0 is still null and tempComp contains a printer, use it\n+                if (!comp0Exists && tempComp[0] instanceof PeriodPrinter) {\n+                    printer = (PeriodPrinter) tempComp[0];\n+                    comp0Exists = true;\n+                }\n+\n+                // If comp1 is still null and tempComp contains a parser, use it\n+                if (!comp1Exists && tempComp[1] instanceof PeriodParser) {\n+                    parser = (PeriodParser) tempComp[1];\n+                    comp1Exists = true;\n+                }\n+\n+                // If we've found both components, stop looking\n+                if (comp0Exists && comp1Exists) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // If neither component exists, add empty components\n+        if (!comp0Exists) {\n+            printer = new PeriodFormatterBuilder().appendLiteral(\"\").toPrinter();\n+        }\n+\n+        if (!comp1Exists) {\n+            parser = new PeriodFormatterBuilder().appendLiteral(\"\").toParser();\n+        }\n+\n+        // If there is no separator, use the existing components or add empty ones\n+        if (!containsSeparator) {\n+            if (comp0Exists && !comp1Exists) {\n+                parser = new PeriodFormatterBuilder().appendLiteral(\"\").toParser();\n+            } else if (!comp0Exists && comp1Exists) {\n+                printer = new PeriodFormatterBuilder().appendLiteral(\"\").toPrinter();\n+            } else if (!comp0Exists && !comp1Exists) {\n+                printer = new PeriodFormatterBuilder().appendLiteral(\"\").toPrinter();\n+                parser = new PeriodFormatterBuilder().appendLiteral(\"\").toParser();\n+            }\n         }\n     }\n \n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}