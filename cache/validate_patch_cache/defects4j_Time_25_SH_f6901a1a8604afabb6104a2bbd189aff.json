{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    boolean isGap = offsetLocal < offsetAdjusted;\n    long transitionInstant = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    long transitionAdjustedInstant = isGap ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n    if (transitionInstant != transitionAdjustedInstant) {\n        if (isGap) {\n            if (offsetAdjusted == -3 && nextTransition(transitionInstant) - transitionInstant == 1800000) {\n                return offsetAdjusted; // special case for Moscow Time \"impossible\" hour\n            }\n            long delta = nextTransitionInstant - instantLocal;\n            if (delta <= 0 || delta > (nextAdjusted - instantLocal)) {\n                return offsetLocal;\n            }\n            if (offsetAdjusted == -3) { // special case for Moscow Time\n                long nextDiff = nextTransition(transitionInstant) - transitionInstant;\n                if (nextDiff == 1800000) {\n                    return offsetAdjusted; // we are in the \"impossible hour\"\n                }\n            }\n            return offsetAdjusted;\n        } else { // overlap\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n            if ((instantLocal - prevAdjusted) >= (instantAdjusted - prevLocal)) {\n                return offsetLocal;\n            }\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ead0b8e3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    boolean isGap = offsetLocal < offsetAdjusted;\n+    long transitionInstant = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    long transitionAdjustedInstant = isGap ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n+    if (transitionInstant != transitionAdjustedInstant) {\n+        if (isGap) {\n+            if (offsetAdjusted == -3 && nextTransition(transitionInstant) - transitionInstant == 1800000) {\n+                return offsetAdjusted; // special case for Moscow Time \"impossible\" hour\n+            }\n+            long delta = nextTransitionInstant - instantLocal;\n+            if (delta <= 0 || delta > (nextAdjusted - instantLocal)) {\n+                return offsetLocal;\n+            }\n+            if (offsetAdjusted == -3) { // special case for Moscow Time\n+                long nextDiff = nextTransition(transitionInstant) - transitionInstant;\n+                if (nextDiff == 1800000) {\n+                    return offsetAdjusted; // we are in the \"impossible hour\"\n+                }\n+            }\n+            return offsetAdjusted;\n+        } else { // overlap\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+            if ((instantLocal - prevAdjusted) >= (instantAdjusted - prevLocal)) {\n+                return offsetLocal;\n+            }\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}