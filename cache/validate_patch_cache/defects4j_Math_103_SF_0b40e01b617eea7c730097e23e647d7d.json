{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        final double SMALL = -40.0;\n        final double LARGE = 40.0;\n        if (Double.isNaN(x)) {\n            return Double.NaN;\n        }\n        if (x <= mean + SMALL * standardDeviation) {\n            return 0.0;\n        }\n        if (x >= mean + LARGE * standardDeviation) {\n            return 1.0;\n        }\n        return 0.5 * Erf.erfc(-(x - mean) / (standardDeviation * Math.sqrt(2.0)));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..8a01aa156 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,18 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        final double SMALL = -40.0;\n+        final double LARGE = 40.0;\n+        if (Double.isNaN(x)) {\n+            return Double.NaN;\n+        }\n+        if (x <= mean + SMALL * standardDeviation) {\n+            return 0.0;\n+        }\n+        if (x >= mean + LARGE * standardDeviation) {\n+            return 1.0;\n+        }\n+        return 0.5 * Erf.erfc(-(x - mean) / (standardDeviation * Math.sqrt(2.0)));\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}