{
    "patch": "public String getProp(String name) {\n    String value = null;\n    Properties props = new Properties();\n    try {\n        FileInputStream in = new FileInputStream(\"config.properties\");\n        props.load(in);\n        in.close();\n        value = props.getProperty(name);\n        if (value == null) {\n            value = System.getenv(name);\n            if (value == null) {\n                String message = \"Property not found: \" + name;\n                System.err.println(message);\n                throw new IllegalArgumentException(message);\n            } else {\n                String message = \"Property value found in environment variable: \" + value;\n                System.out.println(message);\n                // Add warning to list of warnings\n                warnings.add(message);\n            }\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading properties file\");\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..f6ccfd7c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String name) {\n+    String value = null;\n+    Properties props = new Properties();\n+    try {\n+        FileInputStream in = new FileInputStream(\"config.properties\");\n+        props.load(in);\n+        in.close();\n+        value = props.getProperty(name);\n+        if (value == null) {\n+            value = System.getenv(name);\n+            if (value == null) {\n+                String message = \"Property not found: \" + name;\n+                System.err.println(message);\n+                throw new IllegalArgumentException(message);\n+            } else {\n+                String message = \"Property value found in environment variable: \" + value;\n+                System.out.println(message);\n+                // Add warning to list of warnings\n+                warnings.add(message);\n+            }\n+        }\n+    } catch (IOException e) {\n+        System.err.println(\"Error reading properties file\");\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}