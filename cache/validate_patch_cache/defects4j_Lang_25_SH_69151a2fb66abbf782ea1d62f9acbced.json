{
    "patch": "StringBuffer converted = new StringBuffer(data.length());\nfor (int i = 0; i < data.length(); i++) {\n    char current = data.charAt(i);\n    if (current == '+') {\n        converted.append(' ');\n    } else if (current == '%') { \n        if (i + 2 < data.length()) {\n            int code = Integer.parseInt(data.substring(i+1,i+3),16);\n            converted.append((char)code);\n            i += 2;\n        } else {\n            throw new IllegalArgumentException(\n                \"Invalid URL encoding: \"+data);\n        }\n    } else {\n        converted.append(current);\n    }\n}\nif (success) {\n    assertEquals(expected, converted.toString());\n} else {\n    fail(\"Conversion should have failed but didn't: \"+data);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}