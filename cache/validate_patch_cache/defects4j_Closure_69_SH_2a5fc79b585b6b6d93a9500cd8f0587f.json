{
    "patch": "      if (functionType.getTypeOfThis() != null) {\n        Node typeExpression = functionType.getTypeOfThis().getDeclaredTypeExpression();\n        if (typeExpression != null && !NodeUtil.isGet(typeExpression)) {\n          JSType thisType = getJSType(child.getNext()).restrictByNotNullOrUndefined();\n          if (!thisType.isSubtypeOf(functionType.getTypeOfThis())) {\n            report(t, n, INVALID_THIS_TYPE);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..25f64c74 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        Node typeExpression = functionType.getTypeOfThis().getDeclaredTypeExpression();\n+        if (typeExpression != null && !NodeUtil.isGet(typeExpression)) {\n+          JSType thisType = getJSType(child.getNext()).restrictByNotNullOrUndefined();\n+          if (!thisType.isSubtypeOf(functionType.getTypeOfThis())) {\n+            report(t, n, INVALID_THIS_TYPE);\n+          }\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}