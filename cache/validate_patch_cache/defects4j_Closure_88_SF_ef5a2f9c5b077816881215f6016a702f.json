{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable, boolean isAssignmentNode) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (isAssignmentNode && !NodeUtil.isLhs(n, n.getParent())) {\n        return VariableLiveness.READ;\n      } else {\n        return VariableLiveness.KILL;\n      }\n    }\n\n    boolean shouldBeAssignmentNode = false;\n\n    switch (n.getToken()) {\n      case ASSIGN:\n      case CALL:\n      case NEW:\n        if (NodeUtil.isLhs(n, n.getParent())) {\n          shouldBeAssignmentNode = true;\n        }\n        break;\n      case FOR:\n      case FOR_IN:\n      case FOR_OF:\n        if (n.getLastChild() != null) {\n          Node in = n.getLastChild().getNext();\n          shouldBeAssignmentNode = (in != null && in == n.getLastChild());\n        }\n        break;\n      default:\n        break;\n    }\n\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n        VariableLiveness state = isVariableReadBeforeKill(child, variable, shouldBeAssignmentNode);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..5df04d11 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -321,23 +321,40 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+      Node n, String variable, boolean isAssignmentNode) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n+      if (isAssignmentNode && !NodeUtil.isLhs(n, n.getParent())) {\n         return VariableLiveness.READ;\n+      } else {\n+        return VariableLiveness.KILL;\n       }\n     }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+    boolean shouldBeAssignmentNode = false;\n+\n+    switch (n.getToken()) {\n+      case ASSIGN:\n+      case CALL:\n+      case NEW:\n+        if (NodeUtil.isLhs(n, n.getParent())) {\n+          shouldBeAssignmentNode = true;\n+        }\n+        break;\n+      case FOR:\n+      case FOR_IN:\n+      case FOR_OF:\n+        if (n.getLastChild() != null) {\n+          Node in = n.getLastChild().getNext();\n+          shouldBeAssignmentNode = (in != null && in == n.getLastChild());\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n+\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+        VariableLiveness state = isVariableReadBeforeKill(child, variable, shouldBeAssignmentNode);\n         if (state != VariableLiveness.MAYBE_LIVE) {\n           return state;\n         }",
    "result_reason": "error: method isVariableReadBeforeKill in class DeadAssignmentsElimination cannot be applied to given types;",
    "test_result": "ERROR"
}