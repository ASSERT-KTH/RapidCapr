{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    Map<String, Var> referencedVars = new HashMap<>();\n    for (Var refVar : referenced) {\n      String name = refVar.getName();\n      if (!referencedVars.containsKey(name)) {\n        referencedVars.put(name, refVar);\n      }\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        String argName = lastArg.getString();\n        Var argVar = fnScope.getVar(argName);\n        if (!referencedVars.containsKey(argName)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else if (((NodeUtil.isFunctionDeclaration(function) && NodeUtil.isNameReferencedIgnoreFunction(function, argVar))\n            || (NodeUtil.isFunctionExpression(function) && referencedVars.get(argName).getParentNode() == function))) {\n          // Preserve the arg declaration if it's referenced in the body of the function.\n          break;\n        }\n        lastArg = lastArg.getPrevious();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referencedVars.values());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1f3b7132 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    Map<String, Var> referencedVars = new HashMap<>();\n+    for (Var refVar : referenced) {\n+      String name = refVar.getName();\n+      if (!referencedVars.containsKey(name)) {\n+        referencedVars.put(name, refVar);\n+      }\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        String argName = lastArg.getString();\n+        Var argVar = fnScope.getVar(argName);\n+        if (!referencedVars.containsKey(argName)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else if (((NodeUtil.isFunctionDeclaration(function) && NodeUtil.isNameReferencedIgnoreFunction(function, argVar))\n+            || (NodeUtil.isFunctionExpression(function) && referencedVars.get(argName).getParentNode() == function))) {\n+          // Preserve the arg declaration if it's referenced in the body of the function.\n+          break;\n+        }\n+        lastArg = lastArg.getPrevious();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referencedVars.values());\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}