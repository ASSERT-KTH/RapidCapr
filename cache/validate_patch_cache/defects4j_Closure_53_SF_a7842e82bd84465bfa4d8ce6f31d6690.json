{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = new ArrayList<>();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = new LinkedHashSet<>(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(NodeUtil.newExpr(\n        IR.assign(\n          Node.newString(Token.NAME, varmap.get(var)),\n          value.detach())));\n    all.remove(var);\n  }\n\n  // Set remaining variables to undefined.\n  for (String var : all) {\n    nodes.add(NodeUtil.newExpr(\n        IR.assign(\n          Node.newString(Token.NAME, varmap.get(var)),\n          NodeUtil.newUndefinedNode(null))));\n  }\n\n  // All assignments evaluate to true, so make sure that the\n  // expr statement evaluates to true in case it matters.\n  Node comma = new Node(Token.COMMA);\n  for (Node node : nodes) {\n    comma.addChildToBack(node);\n  }\n  comma.addChildToBack(new Node(Token.TRUE));\n  Node replacement = NodeUtil.newExpr(comma);\n  replacement.useSourceInfoIfMissingFromForTree(val);\n  Node replace = ref.getParent();\n  if (replace.getParent().getType() == Token.EXPR_RESULT) {\n    // Remove the enclosing expression statement, if any, since we're\n    // replacing it with a new one.\n    replace = replace.getParent();\n  }\n  replace.getParent().replaceChild(replace, replacement);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..9de231c3 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,64 +300,50 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n-\n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n-\n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n+private void replaceAssignmentExpression(Var v, Reference ref,\n+                                         Map<String, String> varmap) {\n+  // Compute all of the assignments necessary\n+  List<Node> nodes = new ArrayList<>();\n+  Node val = ref.getAssignedValue();\n+  blacklistVarReferencesInTree(val, v.scope);\n+  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n+  Set<String> all = new LinkedHashSet<>(varmap.keySet());\n+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+    String var = key.getString();\n+    Node value = key.removeFirstChild();\n+    // TODO(user): Copy type information.\n+    nodes.add(NodeUtil.newExpr(\n+        IR.assign(\n+          Node.newString(Token.NAME, varmap.get(var)),\n+          value.detach())));\n+    all.remove(var);\n+  }\n \n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n+  // Set remaining variables to undefined.\n+  for (String var : all) {\n+    nodes.add(NodeUtil.newExpr(\n+        IR.assign(\n+          Node.newString(Token.NAME, varmap.get(var)),\n+          NodeUtil.newUndefinedNode(null))));\n+  }\n \n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n-    }\n+  // All assignments evaluate to true, so make sure that the\n+  // expr statement evaluates to true in case it matters.\n+  Node comma = new Node(Token.COMMA);\n+  for (Node node : nodes) {\n+    comma.addChildToBack(node);\n+  }\n+  comma.addChildToBack(new Node(Token.TRUE));\n+  Node replacement = NodeUtil.newExpr(comma);\n+  replacement.useSourceInfoIfMissingFromForTree(val);\n+  Node replace = ref.getParent();\n+  if (replace.getParent().getType() == Token.EXPR_RESULT) {\n+    // Remove the enclosing expression statement, if any, since we're\n+    // replacing it with a new one.\n+    replace = replace.getParent();\n+  }\n+  replace.getParent().replaceChild(replace, replacement);\n+}\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}