{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n\n        if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        } else if (lhs.getType() == Token.NAME && lhs.getString().equals(\"prototype\")) {\n          Node assignParent = parent.getParent();\n          if (assignParent.getType() == Token.EXPR_RESULT) {\n            Node callParent = NodeUtil.getEnclosingCall(assignParent);\n            if (callParent != null && \n                callParent.getType() == Token.CALL && \n                callParent.getFirstChild().getType() == Token.GETPROP &&\n                callParent.getFirstFirstChild().getType() == Token.NAME &&\n                callParent.getFirstFirstChild().getString().equals(\"Object\") &&\n                callParent.getFirstChild().getLastChild().getString().equals(\"create\")) {\n              return false;\n            }\n          }\n        } \n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d7b8170f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+\n+        if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        } else if (lhs.getType() == Token.NAME && lhs.getString().equals(\"prototype\")) {\n+          Node assignParent = parent.getParent();\n+          if (assignParent.getType() == Token.EXPR_RESULT) {\n+            Node callParent = NodeUtil.getEnclosingCall(assignParent);\n+            if (callParent != null && \n+                callParent.getType() == Token.CALL && \n+                callParent.getFirstChild().getType() == Token.GETPROP &&\n+                callParent.getFirstFirstChild().getType() == Token.NAME &&\n+                callParent.getFirstFirstChild().getString().equals(\"Object\") &&\n+                callParent.getFirstChild().getLastChild().getString().equals(\"create\")) {\n+              return false;\n+            }\n+          }\n+        } \n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}