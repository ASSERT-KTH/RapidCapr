{
    "patch": "public Class<?> getGenericType(Field field) {\n        Type type = field.getGenericType();\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Type[] typeArguments = parameterizedType.getActualTypeArguments();\n            for (Type typeArgument : typeArguments) {\n                if (typeArgument instanceof Class) {\n                    return (Class<?>) typeArgument;\n                } else if (typeArgument instanceof ParameterizedType) {\n                    return getGenericType((ParameterizedType) typeArgument);\n                }\n            }\n            return (Class<?>) parameterizedType.getRawType();\n        } else if (type instanceof Class) {\n            return Object.class;\n        } else {\n            throw new IllegalArgumentException(\"Field type is not ParametrizedType and not Class\");\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..5bd237461 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,23 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+        Type type = field.getGenericType();\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+            for (Type typeArgument : typeArguments) {\n+                if (typeArgument instanceof Class) {\n+                    return (Class<?>) typeArgument;\n+                } else if (typeArgument instanceof ParameterizedType) {\n+                    return getGenericType((ParameterizedType) typeArgument);\n+                }\n+            }\n+            return (Class<?>) parameterizedType.getRawType();\n+        } else if (type instanceof Class) {\n+            return Object.class;\n+        } else {\n+            throw new IllegalArgumentException(\"Field type is not ParametrizedType and not Class\");\n+        }\n+    }\n }",
    "result_reason": "error: incompatible types: ParameterizedType cannot be converted to Field",
    "test_result": "ERROR"
}