{
    "patch": "if (parent != null && (parent.isAssign() || parent.isExprResult())) {\n  Node lhs = NodeUtil.getBestLValue(parent);\n  if (lhs == null) {\n    return true;\n  }\n  Node rhs = null;\n  if (parent.isAssign()) {\n    rhs = parent.getLastChild();\n  } else if (parent.isExprResult() && parent.hasOneChild()) {\n    rhs = parent.getFirstChild();\n    if (rhs == null || rhs.isNonEmptyBlock()) {\n      return true;\n    }\n  } else {\n    return true;\n  }\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle\n    // nested assignments properly (e.g., (a = this).property = c;),\n    // assignLhsChild should not be overridden.\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs; \n    }\n  } else {\n    // Only traverse the right side if it's not a constructor/prototype assignment.\n    Node llhs = lhs;\n    if (llhs.isGetProp()) {\n      llhs = llhs.getFirstChild();\n    }\n    if (llhs.matchesQualifiedName(\"goog.inherits\") && rhs.isCall() && rhs.getFirstChild().matchesQualifiedName(\"ctor\")) {\n      return false;\n    }\n    if (llhs.matchesQualifiedName(\"goog.defineClass\") && rhs.isCall()) {\n      return false; \n    }\n    if (lhs.getType() == Token.GETPROP &&\n        (lhs.getLastChild().getString().equals(\"prototype\") ||\n         lhs.getLastChild().getString().equals(\"constructor\"))) {\n      return false;\n    }\n    // Don't traverse functions that are getting lent to a prototype.\n    if (NodeUtil.isPrototypeProperty(lhs)) {\n      return false;\n    }\n    // Don't traverse functions that are conditionally constructed.\n    if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..24f0ca05 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,57 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && (parent.isAssign() || parent.isExprResult())) {\n+  Node lhs = NodeUtil.getBestLValue(parent);\n+  if (lhs == null) {\n+    return true;\n+  }\n+  Node rhs = null;\n+  if (parent.isAssign()) {\n+    rhs = parent.getLastChild();\n+  } else if (parent.isExprResult() && parent.hasOneChild()) {\n+    rhs = parent.getFirstChild();\n+    if (rhs == null || rhs.isNonEmptyBlock()) {\n+      return true;\n+    }\n+  } else {\n+    return true;\n+  }\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle\n+    // nested assignments properly (e.g., (a = this).property = c;),\n+    // assignLhsChild should not be overridden.\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs; \n+    }\n+  } else {\n+    // Only traverse the right side if it's not a constructor/prototype assignment.\n+    Node llhs = lhs;\n+    if (llhs.isGetProp()) {\n+      llhs = llhs.getFirstChild();\n+    }\n+    if (llhs.matchesQualifiedName(\"goog.inherits\") && rhs.isCall() && rhs.getFirstChild().matchesQualifiedName(\"ctor\")) {\n+      return false;\n+    }\n+    if (llhs.matchesQualifiedName(\"goog.defineClass\") && rhs.isCall()) {\n+      return false; \n+    }\n+    if (lhs.getType() == Token.GETPROP &&\n+        (lhs.getLastChild().getString().equals(\"prototype\") ||\n+         lhs.getLastChild().getString().equals(\"constructor\"))) {\n+      return false;\n+    }\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isPrototypeProperty(lhs)) {\n+      return false;\n+    }\n+    // Don't traverse functions that are conditionally constructed.\n+    if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n+      return false;\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}