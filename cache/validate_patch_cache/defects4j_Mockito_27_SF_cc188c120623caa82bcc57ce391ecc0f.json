{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if (mock instanceof Factory) {\n            Factory factory = (Factory) mock;\n            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n            callbacks[0] = newFilter;\n            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n            factory.setCallbacks(callbacks);\n        } else {\n            ((MockedConstruction<T>)mock).getMockSettings().spiedInstance((T) newMockHandler.mockInstance());\n            ((MockedConstruction<T>)mock).mockConstruction(newMockHandler::mockInstance);\n        }   ",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..0064a1106 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,19 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Factory) {\n+            Factory factory = (Factory) mock;\n+            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+            callbacks[0] = newFilter;\n+            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+            factory.setCallbacks(callbacks);\n+        } else {\n+            ((MockedConstruction<T>)mock).getMockSettings().spiedInstance((T) newMockHandler.mockInstance());\n+            ((MockedConstruction<T>)mock).mockConstruction(newMockHandler::mockInstance);\n+        }   \n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}