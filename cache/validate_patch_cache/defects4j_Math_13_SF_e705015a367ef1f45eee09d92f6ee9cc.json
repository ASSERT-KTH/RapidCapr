{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = d.getRowDimension();\n    \n    // Compute the square root of the diagonal matrix\n    double[] sqrtDiagonal = new double[n];\n    for (int i = 0; i < n; i++) {\n        double eigval = d.getEntry(i, i);\n        if (eigval < 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtDiagonal[i] = Math.sqrt(eigval);\n    }\n    \n    // Create a matrix of square roots with zeros below the diagonal\n    RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        sqrtD.setEntry(i, i, sqrtDiagonal[i]);\n        for (int j = i + 1; j < n; j++) {\n            sqrtD.setEntry(i, j, 0.0);\n        }\n    }\n    \n    // Compute the square root of the matrix\n    return v.multiply(sqrtD).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fddcf99f0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = d.getRowDimension();\n+    \n+    // Compute the square root of the diagonal matrix\n+    double[] sqrtDiagonal = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        double eigval = d.getEntry(i, i);\n+        if (eigval < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtDiagonal[i] = Math.sqrt(eigval);\n+    }\n+    \n+    // Create a matrix of square roots with zeros below the diagonal\n+    RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        sqrtD.setEntry(i, i, sqrtDiagonal[i]);\n+        for (int j = i + 1; j < n; j++) {\n+            sqrtD.setEntry(i, j, 0.0);\n+        }\n     }\n+    \n+    // Compute the square root of the matrix\n+    return v.multiply(sqrtD).multiply(v.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}