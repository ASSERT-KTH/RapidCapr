{
    "patch": "import org.apache.commons.lang3.ArrayUtils;\n\npublic class StringUtils {\n    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n            return false;\n        }\n\n        final int length = sequence.length();\n        final int searchLength = searchCharacters.length;\n\n        // Loop through the sequence and check each character,\n        // if it matches any of the search characters, return true.\n        for (int i = 0; i < length; i++) {\n            char ch = sequence.charAt(i);\n            if (Character.isHighSurrogate(ch) && i < length - 1) {\n                char ch2 = sequence.charAt(i + 1);\n                if (ArrayUtils.contains(searchCharacters, ch, ch2)) {\n                    return true;\n                }\n                i++; // skip the second surrogate character\n            } else if (ArrayUtils.contains(searchCharacters, ch)) {\n                return true;\n            }\n        }\n\n        // The search characters were not found in the sequence.\n        return false;\n    }\n\n    private static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d5c2616d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class StringUtils {\n+    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+            return false;\n+        }\n+\n+        final int length = sequence.length();\n+        final int searchLength = searchCharacters.length;\n+\n+        // Loop through the sequence and check each character,\n+        // if it matches any of the search characters, return true.\n+        for (int i = 0; i < length; i++) {\n+            char ch = sequence.charAt(i);\n+            if (Character.isHighSurrogate(ch) && i < length - 1) {\n+                char ch2 = sequence.charAt(i + 1);\n+                if (ArrayUtils.contains(searchCharacters, ch, ch2)) {\n+                    return true;\n+                }\n+                i++; // skip the second surrogate character\n+            } else if (ArrayUtils.contains(searchCharacters, ch)) {\n+                return true;\n+            }\n+        }\n+\n+        // The search characters were not found in the sequence.\n+        return false;\n+    }\n+\n+    private static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}