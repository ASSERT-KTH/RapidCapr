{
    "patch": "// Ignore variables defined only in functions; their lifetime is not easily analyzed.\nif (block.isFunction) {\n  return false;\n} else if (block.isLoop) {\n  // Variables in loops may be assigned multiple times.\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f32289db 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Ignore variables defined only in functions; their lifetime is not easily analyzed.\n+if (block.isFunction) {\n+  return false;\n+} else if (block.isLoop) {\n+  // Variables in loops may be assigned multiple times.\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}