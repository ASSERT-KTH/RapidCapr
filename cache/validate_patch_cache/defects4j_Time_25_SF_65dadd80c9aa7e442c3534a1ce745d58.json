{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetBefore = getOffset(instantLocal - 1);\n    int offsetAfter = getOffset(instantLocal + 1);\n\n    // current offset is same as the offset before and after\n    if (offsetBefore == offsetAfter) {\n        return offsetBefore;\n    }\n\n    // current offset is different from the offset before and after\n    int initialOffset = getOffset(instantLocal);\n\n    // if current offset is greater than offset before, we have jumped ahead in time\n    if (initialOffset > offsetBefore) {\n        long nextTransitionInstant = nextTransition(instantLocal);\n        int nextTransitionOffset = getOffset(nextTransitionInstant);\n        if (nextTransitionOffset != initialOffset) {\n            // current time is in a DST \"gap\" period before next transition\n            return initialOffset;\n        } else {\n            int previousOffset = getOffset(nextTransitionInstant - 1);\n            int currentOffset = getOffset(nextTransitionInstant);\n            return (previousOffset < currentOffset) ? previousOffset : currentOffset;\n        }\n    } else {\n        // current offset must be less than before since they are different\n        long previousTransitionInstant = previousTransition(instantLocal);\n        int previousTransitionOffset = getOffset(previousTransitionInstant);\n        if (previousTransitionOffset == offsetBefore) {\n            // we are in a DST \"gap\" period after the previous transition\n            return initialOffset;\n        } else {\n            return offsetBefore;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a6c24f2b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,42 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetBefore = getOffset(instantLocal - 1);\n+    int offsetAfter = getOffset(instantLocal + 1);\n+\n+    // current offset is same as the offset before and after\n+    if (offsetBefore == offsetAfter) {\n+        return offsetBefore;\n+    }\n+\n+    // current offset is different from the offset before and after\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // if current offset is greater than offset before, we have jumped ahead in time\n+    if (initialOffset > offsetBefore) {\n+        long nextTransitionInstant = nextTransition(instantLocal);\n+        int nextTransitionOffset = getOffset(nextTransitionInstant);\n+        if (nextTransitionOffset != initialOffset) {\n+            // current time is in a DST \"gap\" period before next transition\n+            return initialOffset;\n+        } else {\n+            int previousOffset = getOffset(nextTransitionInstant - 1);\n+            int currentOffset = getOffset(nextTransitionInstant);\n+            return (previousOffset < currentOffset) ? previousOffset : currentOffset;\n+        }\n+    } else {\n+        // current offset must be less than before since they are different\n+        long previousTransitionInstant = previousTransition(instantLocal);\n+        int previousTransitionOffset = getOffset(previousTransitionInstant);\n+        if (previousTransitionOffset == offsetBefore) {\n+            // we are in a DST \"gap\" period after the previous transition\n+            return initialOffset;\n+        } else {\n+            return offsetBefore;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}