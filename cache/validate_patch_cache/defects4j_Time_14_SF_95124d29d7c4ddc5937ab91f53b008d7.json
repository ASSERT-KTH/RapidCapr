{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is the largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int maxDayOfMonth = iChronology.getDaysInYearMonth(values[0], values[1]);\n        int newMonthValue = iChronology.monthOfYear().add(values[1], valueToAdd);\n        int newYearValue = values[0];\n        if(newMonthValue<1){\n            newMonthValue = newMonthValue+12;\n            newYearValue = values[0]-1;\n        }else if(newMonthValue>12){\n            newMonthValue = newMonthValue-12;\n            newYearValue = values[0]+1;\n        }\n\n        int newDayOfMonth = values[2];\n        if (maxDayOfMonth < newDayOfMonth) {\n            newDayOfMonth = maxDayOfMonth;\n        }\n        if (newDayOfMonth < 1) {\n            newDayOfMonth = 1;\n        }\n\n        int newHourOfDay = values[3];\n        int newMinuteOfHour = values[4];\n        int newSecondOfMinute = values[5];\n        int newMillisOfSecond = values[6];\n\n        try {\n            long instant = iChronology.getDateTimeMillis(\n                    newYearValue, newMonthValue, newDayOfMonth,\n                    newHourOfDay, newMinuteOfHour, newSecondOfMinute,\n                    newMillisOfSecond);\n            return iChronology.get(partial, instant);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"The addition exceeded the boundaries of the datetime\");\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e40a8fe4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,51 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is the largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int maxDayOfMonth = iChronology.getDaysInYearMonth(values[0], values[1]);\n+        int newMonthValue = iChronology.monthOfYear().add(values[1], valueToAdd);\n+        int newYearValue = values[0];\n+        if(newMonthValue<1){\n+            newMonthValue = newMonthValue+12;\n+            newYearValue = values[0]-1;\n+        }else if(newMonthValue>12){\n+            newMonthValue = newMonthValue-12;\n+            newYearValue = values[0]+1;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+\n+        int newDayOfMonth = values[2];\n+        if (maxDayOfMonth < newDayOfMonth) {\n+            newDayOfMonth = maxDayOfMonth;\n+        }\n+        if (newDayOfMonth < 1) {\n+            newDayOfMonth = 1;\n+        }\n+\n+        int newHourOfDay = values[3];\n+        int newMinuteOfHour = values[4];\n+        int newSecondOfMinute = values[5];\n+        int newMillisOfSecond = values[6];\n+\n+        try {\n+            long instant = iChronology.getDateTimeMillis(\n+                    newYearValue, newMonthValue, newDayOfMonth,\n+                    newHourOfDay, newMinuteOfHour, newSecondOfMinute,\n+                    newMillisOfSecond);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"The addition exceeded the boundaries of the datetime\");\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}