{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                    // If the timestamps cross local times, then we need to test if the LOCAL time\n                    // crosses a DST boundary. If it does, then the local time is ambiguous. We have\n                    // to choose the correct offset.\n                    // Note there are three points to consider here. First, the original time before\n                    // changing the offset. Second, the later time, after changing the offset. Third,\n                    // the target time which may be before or after the transition.\n                    long nextAdjustedLater = nextTransition(instantLocal - offsetAdjusted + 1);\n                    if (nextAdjustedLater == nextAdjusted) {\n                        // There is a DST boundary here, we need to find which side our instant\n                        // falls on.\n                        int currentOffset = getOffset(instantLocal);\n                        if (currentOffset > offsetLocal) {\n                            currentOffset = offsetLocal;\n                        }\n                        if (currentOffset < offsetAdjusted) {\n                            currentOffset = offsetAdjusted;\n                        }\n                        return currentOffset;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e7062941 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    // If the timestamps cross local times, then we need to test if the LOCAL time\n+                    // crosses a DST boundary. If it does, then the local time is ambiguous. We have\n+                    // to choose the correct offset.\n+                    // Note there are three points to consider here. First, the original time before\n+                    // changing the offset. Second, the later time, after changing the offset. Third,\n+                    // the target time which may be before or after the transition.\n+                    long nextAdjustedLater = nextTransition(instantLocal - offsetAdjusted + 1);\n+                    if (nextAdjustedLater == nextAdjusted) {\n+                        // There is a DST boundary here, we need to find which side our instant\n+                        // falls on.\n+                        int currentOffset = getOffset(instantLocal);\n+                        if (currentOffset > offsetLocal) {\n+                            currentOffset = offsetLocal;\n+                        }\n+                        if (currentOffset < offsetAdjusted) {\n+                            currentOffset = offsetAdjusted;\n+                        }\n+                        return currentOffset;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}