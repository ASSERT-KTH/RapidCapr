{
    "patch": "              // NOTE: assignments to 'this' or LHS of a plus or a destructuring assignment operator\n              // may change the value of 'lhs' and should be treated as an external effect.\n              (!mayEffectMutableState(lhs) ||\n                  lhs.isThis() ||\n                  NodeUtil.isDestructuringLhs(lhs.getParent()) ||\n                  (lhs.getParent().getType() == Token.ADD &&\n                   areNodesEqualForInlining(lhs.getParent().getFirstChild(), lhs)))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..1e7f5c2d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE: assignments to 'this' or LHS of a plus or a destructuring assignment operator\n+              // may change the value of 'lhs' and should be treated as an external effect.\n+              (!mayEffectMutableState(lhs) ||\n+                  lhs.isThis() ||\n+                  NodeUtil.isDestructuringLhs(lhs.getParent()) ||\n+                  (lhs.getParent().getType() == Token.ADD &&\n+                   areNodesEqualForInlining(lhs.getParent().getFirstChild(), lhs)))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}