{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n  case Token.FUNCTION:\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n          if (parent.getType() != Token.NAME && parent.getType() != Token.ASSIGN) {\n            defineDeclaredFunction(n, parent);\n          } else if (parent.getType() == Token.ASSIGN) {\n            Node maybeName = parent.getFirstChild();\n            if (maybeName != null && maybeName.getNext() == n) {\n              defineDeclaredFunction(n, parent);\n              return;\n            }\n          }\n          break;\n        case Token.LP:\n          if (NodeUtil.isFunctionExpression(parent)) {\n            defineDeclaredFunction(parent, parent.getParent());\n          } else if (parent == scope.getRootNode()) {\n            handleFunctionInputs(n);\n          }\n          break;\n        case Token.TRY:\n          if (n.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n            return;\n          }\n          break;\n      }\n    }\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.LP:\n    if (NodeUtil.isFunctionExpression(parent)) {\n      defineDeclaredFunction(parent, parent.getParent());\n    } else if (parent == scope.getRootNode()) {\n      handleFunctionInputs(n);\n    }\n    break;\n  default:\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4b61cdb2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,56 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+  case Token.FUNCTION:\n+    if (parent != null) {\n+      switch (parent.getType()) {\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+          if (parent.getType() != Token.NAME && parent.getType() != Token.ASSIGN) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (parent.getType() == Token.ASSIGN) {\n+            Node maybeName = parent.getFirstChild();\n+            if (maybeName != null && maybeName.getNext() == n) {\n+              defineDeclaredFunction(n, parent);\n+              return;\n+            }\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n+        case Token.LP:\n+          if (NodeUtil.isFunctionExpression(parent)) {\n+            defineDeclaredFunction(parent, parent.getParent());\n+          } else if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(n);\n+          }\n           break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n+        case Token.TRY:\n+          if (n.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+            return;\n+          }\n           break;\n       }\n     }\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.LP:\n+    if (NodeUtil.isFunctionExpression(parent)) {\n+      defineDeclaredFunction(parent, parent.getParent());\n+    } else if (parent == scope.getRootNode()) {\n+      handleFunctionInputs(n);\n+    }\n+    break;\n+  default:\n+    break;\n+}\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}