{
    "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    \n    final UnivariateRealSolver solver = new BrentSolver();\n    solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n    solver.setRelativeAccuracy(getRelativeAccuracy());\n    solver.setMaximalIterationCount(getMaximalIterationCount());\n    \n    return solver.solve(getMaximalIterationCount(), f, min, max, initial);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..ed6d479d2 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -67,10 +67,16 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     }\n \n     /** {@inheritDoc} */\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n-    }\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+    throws MaxIterationsExceededException, FunctionEvaluationException {\n+    \n+    final UnivariateRealSolver solver = new BrentSolver();\n+    solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n+    solver.setRelativeAccuracy(getRelativeAccuracy());\n+    solver.setMaximalIterationCount(getMaximalIterationCount());\n+    \n+    return solver.solve(getMaximalIterationCount(), f, min, max, initial);\n+}\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)",
    "result_reason": "error: no suitable method found for solve(int,UnivariateRealFunction,double,double,double)",
    "test_result": "ERROR"
}