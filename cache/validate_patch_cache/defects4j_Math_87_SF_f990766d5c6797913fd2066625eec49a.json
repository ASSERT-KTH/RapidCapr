{
    "patch": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        int count = 0;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            double entry = Math.abs(getEntry(i, col));\n            if (entry == 1.0 && row == null) {\n                row = i;\n                count++;\n            } else if (entry > epsilon) {\n                return null;\n            }\n        }\n        return count == 1 ? row : null;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..771cd53e3 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -271,16 +271,17 @@ class SimplexTableau implements Serializable {\n      */\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n+        int count = 0;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n+            double entry = Math.abs(getEntry(i, col));\n+            if (entry == 1.0 && row == null) {\n                 row = i;\n-                } else {\n+                count++;\n+            } else if (entry > epsilon) {\n                 return null;\n-                }\n             }\n         }\n-        return row;\n+        return count == 1 ? row : null;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>",
    "test_result": "FAIL"
}