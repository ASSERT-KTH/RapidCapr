{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n    if (Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z)\n            || Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z)) {\n        throw new IllegalArgumentException(\"Input vectors contain NaN or infinity\");\n    }\n    final double norm = FastMath.sqrt(x * x + y * y + z * z);\n    final double tolerance = 1e-12;\n    if (norm < tolerance) {\n        final double max = FastMath.max(v1.getNorm(), v2.getNorm());\n        final double eps = max * tolerance;\n        if (eps == 0) {\n            return Vector3D.ZERO;\n        }\n        // Compute cross product using a different method to handle cases where one of the vectors is zero or close to zero\n        final double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n        final double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n        final double rx = v1y * v2z - v1z * v2y;\n        final double ry = v1z * v2x - v1x * v2z;\n        final double rz = v1x * v2y - v1y * v2x;\n        final double s = FastMath.sqrt(rx * rx + ry * ry + rz * rz);\n        if (s < eps) {\n            final double invNorm = 1 / max;\n            if (max == FastMath.abs(v1x)) {\n                final double a = v1y * invNorm;\n                final double b = -v1z * invNorm;\n                return new Vector3D(0, b * v2z - a * v2y, a * v2x - b * v2z);\n            } else if (max == FastMath.abs(v1y)) {\n                final double a = v1z * invNorm;\n                final double b = -v1x * invNorm;\n                return new Vector3D(b * v2z - a * v2y, 0, a * v2x - b * v2z);\n            } else {\n                final double a = v1x * invNorm;\n                final double b = -v1y * invNorm;\n                return new Vector3D(b * v2y - a * v2z, a * v2y - b * v2x, 0);\n            }\n        }\n        return new Vector3D(rx / s, ry / s, rz / s);\n    }\n    return new Vector3D(x / norm, y / norm, z / norm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..8d902e591 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,49 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n+    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n+    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n+    if (Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z)\n+            || Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z)) {\n+        throw new IllegalArgumentException(\"Input vectors contain NaN or infinity\");\n+    }\n+    final double norm = FastMath.sqrt(x * x + y * y + z * z);\n+    final double tolerance = 1e-12;\n+    if (norm < tolerance) {\n+        final double max = FastMath.max(v1.getNorm(), v2.getNorm());\n+        final double eps = max * tolerance;\n+        if (eps == 0) {\n+            return Vector3D.ZERO;\n+        }\n+        // Compute cross product using a different method to handle cases where one of the vectors is zero or close to zero\n+        final double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n+        final double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n+        final double rx = v1y * v2z - v1z * v2y;\n+        final double ry = v1z * v2x - v1x * v2z;\n+        final double rz = v1x * v2y - v1y * v2x;\n+        final double s = FastMath.sqrt(rx * rx + ry * ry + rz * rz);\n+        if (s < eps) {\n+            final double invNorm = 1 / max;\n+            if (max == FastMath.abs(v1x)) {\n+                final double a = v1y * invNorm;\n+                final double b = -v1z * invNorm;\n+                return new Vector3D(0, b * v2z - a * v2y, a * v2x - b * v2z);\n+            } else if (max == FastMath.abs(v1y)) {\n+                final double a = v1z * invNorm;\n+                final double b = -v1x * invNorm;\n+                return new Vector3D(b * v2z - a * v2y, 0, a * v2x - b * v2z);\n+            } else {\n+                final double a = v1x * invNorm;\n+                final double b = -v1y * invNorm;\n+                return new Vector3D(b * v2y - a * v2z, a * v2y - b * v2x, 0);\n+            }\n+        }\n+        return new Vector3D(rx / s, ry / s, rz / s);\n+    }\n+    return new Vector3D(x / norm, y / norm, z / norm);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.28603877677367767>",
    "test_result": "FAIL"
}