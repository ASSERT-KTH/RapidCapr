{
    "patch": "private long resetFields(SavedField[] savedFields, int savedFieldIndex, long millis) {\n    for (int j = savedFieldIndex - 1; j >= 0; j--) {\n        SavedField savedField = savedFields[j];\n        try {\n            millis = savedField.set(millis, false);\n        } catch (IllegalFieldValueException e) {\n            // Ignore the exception since we need only upto this index.\n            break;\n        }\n    }\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..31fb1402 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+private long resetFields(SavedField[] savedFields, int savedFieldIndex, long millis) {\n+    for (int j = savedFieldIndex - 1; j >= 0; j--) {\n+        SavedField savedField = savedFields[j];\n+        try {\n+            millis = savedField.set(millis, false);\n+        } catch (IllegalFieldValueException e) {\n+            // Ignore the exception since we need only upto this index.\n+            break;\n+        }\n+    }\n+    return millis;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}