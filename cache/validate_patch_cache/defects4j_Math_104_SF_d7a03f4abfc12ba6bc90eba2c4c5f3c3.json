{
    "patch": "public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n    if (a < 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"a and x must be non-negative.\");\n    }\n    if (a == 0.0) {\n        return 1.0;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x < a + 1.0) {\n        return regularizedGammaSeries(a, x, epsilon, maxIterations);\n    } else {\n        return 1.0 - regularizedGammaContinuedFraction(a, x, epsilon, maxIterations);\n    }\n}\n\nprivate static double regularizedGammaSeries(double a, double x, double epsilon, int maxIterations) {\n    double n = 0.0; // Term counter\n    double an = 1.0 / a; // Corresponds to n = 0\n    double sum = an; // Initialize sum\n    while (Math.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n        n++;\n        an *= x / (a + n);\n        sum += an;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\nprivate static double regularizedGammaContinuedFraction(double a, double x, double epsilon, int maxIterations) {\n    double n = 1.0;\n    double b = x + 1.0 - a;\n    double c = 1.0 / Double.MIN_VALUE;\n    double d = 1.0 / b;\n    double h = d;\n    double an;\n    while (n < maxIterations) {\n        an = -n * (n - a);\n        n++;\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < Double.MIN_VALUE) {\n            d = Double.MIN_VALUE;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < Double.MIN_VALUE) {\n            c = Double.MIN_VALUE;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < epsilon) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n        }\n    }\n    throw new RuntimeException(\"Maximum number of iterations exceeded in RegularizedGamma\");\n}\n\nprivate static double logGamma(double x) {\n    double temp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double sum = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) +\n        24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) -\n        0.00000536382 / (x + 5.0);\n    return temp + Math.log(sum * Math.sqrt(2.0 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a0e559bd4 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,71 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n+    if (a < 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"a and x must be non-negative.\");\n+    }\n+    if (a == 0.0) {\n+        return 1.0;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x < a + 1.0) {\n+        return regularizedGammaSeries(a, x, epsilon, maxIterations);\n+    } else {\n+        return 1.0 - regularizedGammaContinuedFraction(a, x, epsilon, maxIterations);\n+    }\n+}\n+\n+private static double regularizedGammaSeries(double a, double x, double epsilon, int maxIterations) {\n+    double n = 0.0; // Term counter\n+    double an = 1.0 / a; // Corresponds to n = 0\n+    double sum = an; // Initialize sum\n+    while (Math.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+        n++;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+private static double regularizedGammaContinuedFraction(double a, double x, double epsilon, int maxIterations) {\n+    double n = 1.0;\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / Double.MIN_VALUE;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an;\n+    while (n < maxIterations) {\n+        an = -n * (n - a);\n+        n++;\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < Double.MIN_VALUE) {\n+            d = Double.MIN_VALUE;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < Double.MIN_VALUE) {\n+            c = Double.MIN_VALUE;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < epsilon) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n+        }\n+    }\n+    throw new RuntimeException(\"Maximum number of iterations exceeded in RegularizedGamma\");\n+}\n+\n+private static double logGamma(double x) {\n+    double temp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double sum = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) +\n+        24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) -\n+        0.00000536382 / (x + 5.0);\n+    return temp + Math.log(sum * Math.sqrt(2.0 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}