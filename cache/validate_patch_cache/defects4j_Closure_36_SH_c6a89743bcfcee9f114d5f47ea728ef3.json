{
    "patch": "  private boolean isSingletonGetterCall(Node value) {\n    if (value.isCall() && value.getFirstChild().isGetProp()) {\n      Node getProp = value.getFirstChild();\n      CodingConvention convention = compiler.getCodingConvention();\n      String methodName = convention.getSingletonGetterClassName(getProp);\n      if (methodName != null) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..4259d1ba 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,17 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+  private boolean isSingletonGetterCall(Node value) {\n+    if (value.isCall() && value.getFirstChild().isGetProp()) {\n+      Node getProp = value.getFirstChild();\n+      CodingConvention convention = compiler.getCodingConvention();\n+      String methodName = convention.getSingletonGetterClassName(getProp);\n+      if (methodName != null) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}