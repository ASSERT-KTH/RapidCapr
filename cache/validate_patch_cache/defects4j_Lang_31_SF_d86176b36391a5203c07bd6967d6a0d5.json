{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n   \n    public static boolean containsAny(String str, char[] searchChars) {\n        if (str == null || searchChars == null) {\n            return false;\n        }\n\n        int strLength = str.length();\n        int searchLength = searchChars.length;\n        int[] charsToSearch = new int[searchLength];\n\n        for (int i = 0; i < searchLength; i++) {\n            charsToSearch[i] = searchChars[i];\n        }\n\n        Arrays.sort(charsToSearch);\n\n        for (int i = 0; i < strLength; i++) {\n            int ch = str.charAt(i);\n            if (Arrays.binarySearch(charsToSearch, ch) >= 0) {\n                return true;\n            }\n            if (Character.isHighSurrogate((char) ch) && i < strLength - 1) {\n                int ch2 = str.charAt(i + 1);\n                if (Character.isLowSurrogate((char) ch2)) {\n                    ch = Character.toCodePoint((char) ch, (char) ch2);\n                    if (Arrays.binarySearch(charsToSearch, ch) >= 0) {\n                        return true;\n                    }\n                    i++;\n                }\n            }\n        }\n\n        return false;\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..bbdaa123 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,46 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+   \n+    public static boolean containsAny(String str, char[] searchChars) {\n+        if (str == null || searchChars == null) {\n+            return false;\n+        }\n+\n+        int strLength = str.length();\n+        int searchLength = searchChars.length;\n+        int[] charsToSearch = new int[searchLength];\n+\n+        for (int i = 0; i < searchLength; i++) {\n+            charsToSearch[i] = searchChars[i];\n+        }\n+\n+        Arrays.sort(charsToSearch);\n+\n+        for (int i = 0; i < strLength; i++) {\n+            int ch = str.charAt(i);\n+            if (Arrays.binarySearch(charsToSearch, ch) >= 0) {\n+                return true;\n+            }\n+            if (Character.isHighSurrogate((char) ch) && i < strLength - 1) {\n+                int ch2 = str.charAt(i + 1);\n+                if (Character.isLowSurrogate((char) ch2)) {\n+                    ch = Character.toCodePoint((char) ch, (char) ch2);\n+                    if (Arrays.binarySearch(charsToSearch, ch) >= 0) {\n+                        return true;\n+                    }\n+                    i++;\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}