{
    "patch": "Node function = fnScope.getRootNode();\n    if (!function.isFunction()) {\n      return;\n    }\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      List<Node> children = argList.children();\n      List<Node> argsToRemove = new ArrayList<>();\n      boolean unusedParamsFound = false;\n\n      for (int i = children.size() - 1; i >= 0; i--) {\n        Node arg = children.get(i);\n        String argName = arg.getString();\n        Var var = fnScope.getVar(argName);\n        if (var != null) {\n          boolean isReferenced = referenced.contains(var);\n          if (!isReferenced) {\n            unusedParamsFound = true;\n            argsToRemove.add(arg);\n          } else if (unusedParamsFound) {\n            throw new IllegalStateException(\"Cannot remove only some unused parameters.\");\n          }\n        } else {\n          throw new IllegalStateException(\"Could not find variable for parameter \" + argName);\n        }\n      }\n\n      if (argsToRemove.size() > 0) {\n        for (Node arg : argsToRemove) {\n          argList.removeChild(arg);\n        }\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c7c73863 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+    if (!function.isFunction()) {\n+      return;\n+    }\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      List<Node> children = argList.children();\n+      List<Node> argsToRemove = new ArrayList<>();\n+      boolean unusedParamsFound = false;\n+\n+      for (int i = children.size() - 1; i >= 0; i--) {\n+        Node arg = children.get(i);\n+        String argName = arg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (var != null) {\n+          boolean isReferenced = referenced.contains(var);\n+          if (!isReferenced) {\n+            unusedParamsFound = true;\n+            argsToRemove.add(arg);\n+          } else if (unusedParamsFound) {\n+            throw new IllegalStateException(\"Cannot remove only some unused parameters.\");\n+          }\n+        } else {\n+          throw new IllegalStateException(\"Could not find variable for parameter \" + argName);\n+        }\n+      }\n+\n+      if (argsToRemove.size() > 0) {\n+        for (Node arg : argsToRemove) {\n+          argList.removeChild(arg);\n+        }\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}