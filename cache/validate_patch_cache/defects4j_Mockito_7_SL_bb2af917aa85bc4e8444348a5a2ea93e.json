{
    "patch": "private void readTypeVariables(TypeVariable<?>[] typeVariables) {\n    for (TypeVariable<?> typeVariable : typeVariables) {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        } else if (typeVariable.getBounds().length > 0) {\n            for (Type type : typeVariable.getBounds()) {\n                registerTypeVariablesOn(type);\n            }\n        } else {\n            registerTypeVariablesOn(Object.class);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..06910f8cb 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables(TypeVariable<?>[] typeVariables) {\n+    for (TypeVariable<?> typeVariable : typeVariables) {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        } else if (typeVariable.getBounds().length > 0) {\n+            for (Type type : typeVariable.getBounds()) {\n+                registerTypeVariablesOn(type);\n+            }\n+        } else {\n+            registerTypeVariablesOn(Object.class);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}