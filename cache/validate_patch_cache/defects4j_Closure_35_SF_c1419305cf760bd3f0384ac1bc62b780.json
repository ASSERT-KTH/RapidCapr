{
    "patch": "private void tryInferringTemplateType(ObjectType type, ObjectType templateType) {\n  if (templateType == null || !templateType.isGenericIObject()) {\n    return;\n  }\n  ObjectType instantiation = ObjectType\n      .instantiate(templateType, ImmutableList.<JSType>builder().addAll(type.getTypeParameters())\n          .build());\n  tryInferringObjectType(type, instantiation);\n}\n\nprivate void tryInferringObjectType(ObjectType type, ObjectType constraint) {\n  if (constraint.getTemplateTypeMap().hasUnknownType()) {\n    // There's not much we can do if the solution isn't fully resolved.\n    return;\n  }\n  if (constraint.isRecordType()) {\n    for (String prop : constraint.getOwnPropertyNames()) {\n      JSType propType = constraint.getPropertyType(prop);\n      if (type.hasProperty(prop) && !propType.isUnknownType()\n          && !type.getPropertyType(prop).isUnknownType()) {\n        continue;\n      }\n      if (!propType.isUnknownType()) {\n        type.defineInferredProperty(prop, propType, null);\n      }\n    }\n  }\n  tryInferringTemplateType(type, constraint.getImplicitPrototype());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..144b464a 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,35 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n+private void tryInferringTemplateType(ObjectType type, ObjectType templateType) {\n+  if (templateType == null || !templateType.isGenericIObject()) {\n+    return;\n+  }\n+  ObjectType instantiation = ObjectType\n+      .instantiate(templateType, ImmutableList.<JSType>builder().addAll(type.getTypeParameters())\n+          .build());\n+  tryInferringObjectType(type, instantiation);\n+}\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+private void tryInferringObjectType(ObjectType type, ObjectType constraint) {\n+  if (constraint.getTemplateTypeMap().hasUnknownType()) {\n+    // There's not much we can do if the solution isn't fully resolved.\n+    return;\n+  }\n+  if (constraint.isRecordType()) {\n+    for (String prop : constraint.getOwnPropertyNames()) {\n+      JSType propType = constraint.getPropertyType(prop);\n+      if (type.hasProperty(prop) && !propType.isUnknownType()\n+          && !type.getPropertyType(prop).isUnknownType()) {\n+        continue;\n+      }\n+      if (!propType.isUnknownType()) {\n+        type.defineInferredProperty(prop, propType, null);\n       }\n     }\n   }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n+  tryInferringTemplateType(type, constraint.getImplicitPrototype());\n+}\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}