{
    "patch": "    // Remove unused arguments from the function\n    int i = 0;\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      i++;\n      if (!referenced.contains(var)) {\n        arg.detach();\n        compiler.reportCodeChange();\n        argList.removeChild(arg);\n        i--;\n        continue;\n      }\n      if (i == argList.getChildCount()) {\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6719a4e5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Remove unused arguments from the function\n+    int i = 0;\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      i++;\n+      if (!referenced.contains(var)) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n+        argList.removeChild(arg);\n+        i--;\n+        continue;\n+      }\n+      if (i == argList.getChildCount()) {\n+        break;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}