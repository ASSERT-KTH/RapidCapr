{
    "patch": "            if (e.getDateTimeFieldType() != null) {\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].matchesField(e.getDateTimeFieldType())) {\n                        throw e;\n                    }\n                }\n            }\n            throw new IllegalFieldValueException(\n                e.getFieldName(), String.valueOf(e.getIllegalValue()), e.getLocalizedMessage());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..23695c5e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (e.getDateTimeFieldType() != null) {\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].matchesField(e.getDateTimeFieldType())) {\n+                        throw e;\n+                    }\n+                }\n+            }\n+            throw new IllegalFieldValueException(\n+                e.getFieldName(), String.valueOf(e.getIllegalValue()), e.getLocalizedMessage());\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}