{
    "patch": "public static String fixCode(String codeWithBug) {\n    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n    String replacement = \"for ($1$3) { $4 }\";\n    String fixedCode = codeWithBug.replaceAll(pattern, replacement);\n\n    if (fixedCode.startsWith(\"for (\")) {\n        fixedCode = addCurlyBraces(fixedCode);\n    }\n\n    return fixedCode;\n}\n\nprivate static String addCurlyBraces(String code) {\n    StringBuilder sb = new StringBuilder(code);\n    int index = sb.indexOf(\"for (\");\n\n    // Find closing parenthesis\n    int open = 0;\n    int close = 0;\n    int cursor = index;\n    while (cursor < sb.length()) {\n        char c = sb.charAt(cursor);\n        if (c == '(') {\n            open++;\n        } else if (c == ')') {\n            close++;\n            if (open == close) {\n                break;\n            }\n        }\n        cursor++;\n    }\n    // If found, insert opening and closing curly braces\n    if (cursor < sb.length()) {\n        sb.insert(cursor + 1, \" {\");\n        sb.insert(sb.length() - 1, \"}\");\n    }\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..bcba65ba 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,46 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String codeWithBug) {\n+    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n+    String replacement = \"for ($1$3) { $4 }\";\n+    String fixedCode = codeWithBug.replaceAll(pattern, replacement);\n+\n+    if (fixedCode.startsWith(\"for (\")) {\n+        fixedCode = addCurlyBraces(fixedCode);\n+    }\n+\n+    return fixedCode;\n+}\n+\n+private static String addCurlyBraces(String code) {\n+    StringBuilder sb = new StringBuilder(code);\n+    int index = sb.indexOf(\"for (\");\n+\n+    // Find closing parenthesis\n+    int open = 0;\n+    int close = 0;\n+    int cursor = index;\n+    while (cursor < sb.length()) {\n+        char c = sb.charAt(cursor);\n+        if (c == '(') {\n+            open++;\n+        } else if (c == ')') {\n+            close++;\n+            if (open == close) {\n+                break;\n+            }\n+        }\n+        cursor++;\n+    }\n+    // If found, insert opening and closing curly braces\n+    if (cursor < sb.length()) {\n+        sb.insert(cursor + 1, \" {\");\n+        sb.insert(sb.length() - 1, \"}\");\n+    }\n+\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}