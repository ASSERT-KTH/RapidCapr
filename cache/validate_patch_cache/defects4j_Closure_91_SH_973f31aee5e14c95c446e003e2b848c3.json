{
    "patch": "      if (NodeUtil.isLValue(n)) {\n        final Node parentLoop = NodeUtil.isLoopStructure(parent);\n        Node grandParent = parent.getParent();\n        if (NodeUtil.isGet(grandParent)) {\n          // A.prototype.foo = function bar(){}\n          // Don't traverse 'A.prototype'\n          return false;\n        } else if (grandParent.getType() == Token.ASSIGN &&\n            NodeUtil.isGet(grandParent.getFirstChild()) &&\n            NodeUtil.isGet(grandParent.getFirstChild().getFirstChild())) {\n          // A.prototype.foo = someFn;\n          // Don't traverse 'A.prototype'\n          return false;\n        } else if (grandParent.getType() == Token.VAR ||\n            grandParent.getType() == Token.LET ||\n            grandParent.getType() == Token.CONST) {\n          // var foo = function bar() {}\n          // let foo = function bar() {}\n          // const foo = function bar() {}\n          // Don't traverse 'foo ='\n          return grandParent.getFirstChild() != n &&\n              grandParent.getFirstChild().getNext() == null;\n        } else if (parentLoop == null && n.getFirstChild() == null) {\n          // A function literal with no name, assigned to a variable.\n          // If already checked the grandparent = 'A.prototype', which\n          // is a valid not to traverse.\n          return true;\n        } else if (NodeUtil.isGet(parent) && !isPrototypeProperty(n)) {\n          // A.foo = function bar() {}\n          // Don't traverse 'foo ='\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..eafc3e1a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,37 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(n)) {\n+        final Node parentLoop = NodeUtil.isLoopStructure(parent);\n+        Node grandParent = parent.getParent();\n+        if (NodeUtil.isGet(grandParent)) {\n+          // A.prototype.foo = function bar(){}\n+          // Don't traverse 'A.prototype'\n+          return false;\n+        } else if (grandParent.getType() == Token.ASSIGN &&\n+            NodeUtil.isGet(grandParent.getFirstChild()) &&\n+            NodeUtil.isGet(grandParent.getFirstChild().getFirstChild())) {\n+          // A.prototype.foo = someFn;\n+          // Don't traverse 'A.prototype'\n+          return false;\n+        } else if (grandParent.getType() == Token.VAR ||\n+            grandParent.getType() == Token.LET ||\n+            grandParent.getType() == Token.CONST) {\n+          // var foo = function bar() {}\n+          // let foo = function bar() {}\n+          // const foo = function bar() {}\n+          // Don't traverse 'foo ='\n+          return grandParent.getFirstChild() != n &&\n+              grandParent.getFirstChild().getNext() == null;\n+        } else if (parentLoop == null && n.getFirstChild() == null) {\n+          // A function literal with no name, assigned to a variable.\n+          // If already checked the grandparent = 'A.prototype', which\n+          // is a valid not to traverse.\n+          return true;\n+        } else if (NodeUtil.isGet(parent) && !isPrototypeProperty(n)) {\n+          // A.foo = function bar() {}\n+          // Don't traverse 'foo ='\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}