{
    "patch": "        boolean currentStrategyAddedToCollector = false;\n        if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n            currentStrategyAddedToCollector = true;\n        }\n        if(nextStrategy == null && !currentStrategyAddedToCollector) {\n            currentStrategy.addRegex(this, regex);\n            collector.add(currentStrategy);\n        } else if(nextStrategy != null) {\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n            for(;;) {\n                patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n                if(!patternMatcher.lookingAt()) {\n                    currentStrategyAddedToCollector = false;\n                    break;\n                }\n                if(currentStrategy.addRegex(this, regex)) {\n                    collector.add(currentStrategy);\n                    currentStrategyAddedToCollector = true;\n                }\n                currentFormatField= patternMatcher.group();\n                currentStrategy= getStrategy(currentFormatField);\n            }\n            if (!currentStrategyAddedToCollector && currentStrategy.addRegex(this, regex)) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..dfaef42e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,31 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        boolean currentStrategyAddedToCollector = false;\n+        if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+            currentStrategyAddedToCollector = true;\n+        }\n+        if(nextStrategy == null && !currentStrategyAddedToCollector) {\n+            currentStrategy.addRegex(this, regex);\n+            collector.add(currentStrategy);\n+        } else if(nextStrategy != null) {\n+            currentFormatField= nextFormatField;\n+            currentStrategy= nextStrategy;\n+            for(;;) {\n+                patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+                if(!patternMatcher.lookingAt()) {\n+                    currentStrategyAddedToCollector = false;\n+                    break;\n+                }\n+                if(currentStrategy.addRegex(this, regex)) {\n+                    collector.add(currentStrategy);\n+                    currentStrategyAddedToCollector = true;\n+                }\n+                currentFormatField= patternMatcher.group();\n+                currentStrategy= getStrategy(currentFormatField);\n+            }\n+            if (!currentStrategyAddedToCollector && currentStrategy.addRegex(this, regex)) {\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}