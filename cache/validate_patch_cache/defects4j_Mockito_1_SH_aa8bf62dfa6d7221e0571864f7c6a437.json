{
    "patch": "            Object varargArray = invocation.getRawArguments()[indexOfVararg];\n            if (varargArray != null && varargArray.getClass().isArray()) {\n                int varargLength = Array.getLength(varargArray);\n                for (int i = 0; i < varargLength; i++) {\n                    matchers.add(createMatcherFromArrayElement(mismatchDescription, Array.get(varargArray, i)));\n                }\n            } else {\n                matchers.add(createMatcherFromArrayElement(mismatchDescription, null));",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c5a6c5839 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,14 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object varargArray = invocation.getRawArguments()[indexOfVararg];\n+            if (varargArray != null && varargArray.getClass().isArray()) {\n+                int varargLength = Array.getLength(varargArray);\n+                for (int i = 0; i < varargLength; i++) {\n+                    matchers.add(createMatcherFromArrayElement(mismatchDescription, Array.get(varargArray, i)));\n+                }\n+            } else {\n+                matchers.add(createMatcherFromArrayElement(mismatchDescription, null));\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}