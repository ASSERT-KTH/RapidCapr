{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        if (!isPositiveDefinite(m)) {\n            throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n        }\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n    \n    // Check if matrix is positive definite\n    private boolean isPositiveDefinite(RealMatrix m) {\n        EigenDecomposition dec = new EigenDecomposition(m);\n        for (double eigenvalue : dec.getRealEigenvalues()) {\n            if (Double.compare(eigenvalue, 0.0) <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0817a9ab9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        if (!isPositiveDefinite(m)) {\n+            throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n+        }\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    }\n+    \n+    // Check if matrix is positive definite\n+    private boolean isPositiveDefinite(RealMatrix m) {\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        for (double eigenvalue : dec.getRealEigenvalues()) {\n+            if (Double.compare(eigenvalue, 0.0) <= 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}