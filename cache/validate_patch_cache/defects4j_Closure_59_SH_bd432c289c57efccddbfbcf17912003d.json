{
    "patch": "if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n  DiagnosticGroup globalThisDiagnosticGroup =\n      DiagnosticGroups.GLOBAL_THIS;\n  CheckLevel globalThisCheckLevel =\n      options.checkGlobalThisLevel == null\n          ? options.warningLevelDefault\n          : options.checkGlobalThisLevel;\n  options.setWarningLevel(globalThisDiagnosticGroup, globalThisCheckLevel);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..dc420e95 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,15 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+  DiagnosticGroup globalThisDiagnosticGroup =\n+      DiagnosticGroups.GLOBAL_THIS;\n+  CheckLevel globalThisCheckLevel =\n+      options.checkGlobalThisLevel == null\n+          ? options.warningLevelDefault\n+          : options.checkGlobalThisLevel;\n+  options.setWarningLevel(globalThisDiagnosticGroup, globalThisCheckLevel);\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}