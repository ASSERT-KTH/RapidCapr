{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long instantBefore = instantAdjusted - offsetLocal;\n                int offsetBefore = getOffset(instantBefore);\n                if (offsetBefore == offsetAdjusted) {\n                    return offsetBefore;\n                }\n                long nextLocalTransition = nextTransition(instantBefore);\n                if (nextLocalTransition == instantAdjusted - offsetLocal) {\n                    throw new IllegalArgumentException(\"The instant is invalid\");\n                }\n                return offsetBefore;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3a0d4051 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long instantBefore = instantAdjusted - offsetLocal;\n+                int offsetBefore = getOffset(instantBefore);\n+                if (offsetBefore == offsetAdjusted) {\n+                    return offsetBefore;\n+                }\n+                long nextLocalTransition = nextTransition(instantBefore);\n+                if (nextLocalTransition == instantAdjusted - offsetLocal) {\n+                    throw new IllegalArgumentException(\"The instant is invalid\");\n+                }\n+                return offsetBefore;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}