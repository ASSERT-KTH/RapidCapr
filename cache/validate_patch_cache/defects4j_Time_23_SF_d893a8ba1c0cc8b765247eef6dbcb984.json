{
    "patch": "private static synchronized String getConvertedId(String id) {\n    Map<String, String> map = cZoneIdConversion;\n    if (map == null) {\n        // Backwards compatibility with TimeZone.\n        map = new HashMap<String, String>();\n        map.put(\"GMT\", \"UTC\");\n        map.put(\"MIT\", \"Pacific/Apia\");\n        map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n        map.put(\"AST\", \"America/Anchorage\");\n        map.put(\"PST\", \"America/Los_Angeles\");\n        map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n        map.put(\"PNT\", \"America/Phoenix\");\n        map.put(\"CST\", \"America/Chicago\");\n        map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n        map.put(\"IET\", \"America/Indianapolis\");\n        map.put(\"PRT\", \"America/Puerto_Rico\");\n        map.put(\"CNT\", \"America/St_Johns\");\n        map.put(\"AGT\", \"America/Buenos_Aires\");\n        map.put(\"BET\", \"America/Sao_Paulo\");\n        map.put(\"WET\", \"Europe/Lisbon\");\n        map.put(\"ECT\", \"Europe/Paris\");\n        map.put(\"ART\", \"Africa/Cairo\");\n        map.put(\"CAT\", \"Africa/Harare\");\n        map.put(\"EET\", \"Europe/Bucharest\");\n        map.put(\"EAT\", \"Africa/Addis_Ababa\");\n        map.put(\"MET\", \"Asia/Tehran\");\n        map.put(\"NET\", \"Asia/Yerevan\");\n        map.put(\"PLT\", \"Asia/Karachi\");\n        map.put(\"IST\", \"Asia/Kolkata\");\n        map.put(\"BST\", \"Asia/Dhaka\");\n        map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n        map.put(\"CTT\", \"Asia/Shanghai\");\n        map.put(\"JST\", \"Asia/Tokyo\");\n        map.put(\"ACT\", \"Australia/Darwin\");\n        map.put(\"AET\", \"Australia/Sydney\");\n        map.put(\"SST\", \"Pacific/Guadalcanal\");\n        map.put(\"NST\", \"Pacific/Auckland\");\n        cZoneIdConversion = map;\n    }\n    String convertedId = map.get(id);\n    if (convertedId == null && id.startsWith(\"Etc/\")) {\n        // Support some Etc aliases that don't exist in IANA.\n        if (id.startsWith(\"Etc/GMT\")) {\n            int len = \"Etc/GMT\".length();\n            if (len == id.length()) {\n                convertedId = \"UTC\";\n            } else if (len + 2 == id.length()) {\n                char c = id.charAt(len + 1);\n                if (c == '+' || c == '-') {\n                    // Etc/GMT[+/-]n is equivalent to GMT[-/+]n.\n                    convertedId = \"GMT\" + id.substring(len);\n                }\n            }\n        } else if (id.startsWith(\"Etc/UCT\") || id.startsWith(\"Etc/Universal\") ||\n                id.startsWith(\"Etc/Zulu\")) {\n            convertedId = \"UTC\";\n        }\n    }\n    return convertedId;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 5d89e34b..a99dfac7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -555,47 +555,66 @@ public abstract class DateTimeZone implements Serializable {\n      * @param id  the old style id\n      * @return the new style id, null if not found\n      */\n-    private static synchronized String getConvertedId(String id) {\n-        Map<String, String> map = cZoneIdConversion;\n-        if (map == null) {\n-            // Backwards compatibility with TimeZone.\n-            map = new HashMap<String, String>();\n-            map.put(\"GMT\", \"UTC\");\n-            map.put(\"MIT\", \"Pacific/Apia\");\n-            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n-            map.put(\"AST\", \"America/Anchorage\");\n-            map.put(\"PST\", \"America/Los_Angeles\");\n-            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n-            map.put(\"PNT\", \"America/Phoenix\");\n-            map.put(\"CST\", \"America/Chicago\");\n-            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n-            map.put(\"IET\", \"America/Indianapolis\");\n-            map.put(\"PRT\", \"America/Puerto_Rico\");\n-            map.put(\"CNT\", \"America/St_Johns\");\n-            map.put(\"AGT\", \"America/Buenos_Aires\");\n-            map.put(\"BET\", \"America/Sao_Paulo\");\n-            map.put(\"WET\", \"Europe/London\");\n-            map.put(\"ECT\", \"Europe/Paris\");\n-            map.put(\"ART\", \"Africa/Cairo\");\n-            map.put(\"CAT\", \"Africa/Harare\");\n-            map.put(\"EET\", \"Europe/Bucharest\");\n-            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n-            map.put(\"MET\", \"Asia/Tehran\");\n-            map.put(\"NET\", \"Asia/Yerevan\");\n-            map.put(\"PLT\", \"Asia/Karachi\");\n-            map.put(\"IST\", \"Asia/Calcutta\");\n-            map.put(\"BST\", \"Asia/Dhaka\");\n-            map.put(\"VST\", \"Asia/Saigon\");\n-            map.put(\"CTT\", \"Asia/Shanghai\");\n-            map.put(\"JST\", \"Asia/Tokyo\");\n-            map.put(\"ACT\", \"Australia/Darwin\");\n-            map.put(\"AET\", \"Australia/Sydney\");\n-            map.put(\"SST\", \"Pacific/Guadalcanal\");\n-            map.put(\"NST\", \"Pacific/Auckland\");\n-            cZoneIdConversion = map;\n+private static synchronized String getConvertedId(String id) {\n+    Map<String, String> map = cZoneIdConversion;\n+    if (map == null) {\n+        // Backwards compatibility with TimeZone.\n+        map = new HashMap<String, String>();\n+        map.put(\"GMT\", \"UTC\");\n+        map.put(\"MIT\", \"Pacific/Apia\");\n+        map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n+        map.put(\"AST\", \"America/Anchorage\");\n+        map.put(\"PST\", \"America/Los_Angeles\");\n+        map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n+        map.put(\"PNT\", \"America/Phoenix\");\n+        map.put(\"CST\", \"America/Chicago\");\n+        map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n+        map.put(\"IET\", \"America/Indianapolis\");\n+        map.put(\"PRT\", \"America/Puerto_Rico\");\n+        map.put(\"CNT\", \"America/St_Johns\");\n+        map.put(\"AGT\", \"America/Buenos_Aires\");\n+        map.put(\"BET\", \"America/Sao_Paulo\");\n+        map.put(\"WET\", \"Europe/Lisbon\");\n+        map.put(\"ECT\", \"Europe/Paris\");\n+        map.put(\"ART\", \"Africa/Cairo\");\n+        map.put(\"CAT\", \"Africa/Harare\");\n+        map.put(\"EET\", \"Europe/Bucharest\");\n+        map.put(\"EAT\", \"Africa/Addis_Ababa\");\n+        map.put(\"MET\", \"Asia/Tehran\");\n+        map.put(\"NET\", \"Asia/Yerevan\");\n+        map.put(\"PLT\", \"Asia/Karachi\");\n+        map.put(\"IST\", \"Asia/Kolkata\");\n+        map.put(\"BST\", \"Asia/Dhaka\");\n+        map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n+        map.put(\"CTT\", \"Asia/Shanghai\");\n+        map.put(\"JST\", \"Asia/Tokyo\");\n+        map.put(\"ACT\", \"Australia/Darwin\");\n+        map.put(\"AET\", \"Australia/Sydney\");\n+        map.put(\"SST\", \"Pacific/Guadalcanal\");\n+        map.put(\"NST\", \"Pacific/Auckland\");\n+        cZoneIdConversion = map;\n+    }\n+    String convertedId = map.get(id);\n+    if (convertedId == null && id.startsWith(\"Etc/\")) {\n+        // Support some Etc aliases that don't exist in IANA.\n+        if (id.startsWith(\"Etc/GMT\")) {\n+            int len = \"Etc/GMT\".length();\n+            if (len == id.length()) {\n+                convertedId = \"UTC\";\n+            } else if (len + 2 == id.length()) {\n+                char c = id.charAt(len + 1);\n+                if (c == '+' || c == '-') {\n+                    // Etc/GMT[+/-]n is equivalent to GMT[-/+]n.\n+                    convertedId = \"GMT\" + id.substring(len);\n+                }\n+            }\n+        } else if (id.startsWith(\"Etc/UCT\") || id.startsWith(\"Etc/Universal\") ||\n+                id.startsWith(\"Etc/Zulu\")) {\n+            convertedId = \"UTC\";\n         }\n-        return map.get(id);\n     }\n+    return convertedId;\n+}\n \n     private static int parseOffset(String str) {\n         // Can't use a real chronology if called during class",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/Lisbon]>",
    "test_result": "FAIL"
}