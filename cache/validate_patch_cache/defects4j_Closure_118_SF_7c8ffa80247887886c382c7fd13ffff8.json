{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n    if (child.isStringKey() || child.isString()) {\n      String name = child.getString();\n      T type = typeSystem.getType(getScope(), n, name);\n\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child,\n          processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    } else if (child.isGetProp()) {\n      Node proto = NodeUtil.getPrototypeObject(child);\n      if (!proto.isQualifiedName()) {\n        continue;\n      }\n\n      String propName = proto.getQualifiedName();\n      Node propNode = child.getLastChild();\n      String propAccessor = propNode.getString();\n      String propNameAccessor = propName + \".\" + propAccessor;\n\n      T type = typeSystem.getType(getScope(), n, propNameAccessor);\n\n      Property prop = getProperty(propNameAccessor);\n      if (!prop.scheduleRenaming(propNode,\n          processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(propNameAccessor)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, propertiesToErrorFor.get(propNameAccessor),\n              Warnings.INVALIDATION, propNameAccessor,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    } else if (child.isGetElem()) {\n      Node firstChild = child.getFirstChild();\n      Node secondChild = firstChild.getNext();\n      if (!firstChild.isQualifiedName()) {\n        continue;\n      }\n\n      String propName = firstChild.getQualifiedName();\n      if (!secondChild.isString()) {\n        continue;\n      }\n\n      String elemName = secondChild.getString();\n      String arrayPropName = propName + \"[\" + elemName + \"]\";\n\n      T type = typeSystem.getType(getScope(), n, arrayPropName);\n\n      Property prop = getProperty(arrayPropName);\n      if (!prop.scheduleRenaming(secondChild,\n          processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(arrayPropName)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, propertiesToErrorFor.get(arrayPropName),\n              Warnings.INVALIDATION, arrayPropName,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..b96de607 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,83 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild();\n+      child != null;\n+      child = child.getNext()) {\n+    if (child.isStringKey() || child.isString()) {\n+      String name = child.getString();\n+      T type = typeSystem.getType(getScope(), n, name);\n+\n+      Property prop = getProperty(name);\n+      if (!prop.scheduleRenaming(child,\n+          processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child, propertiesToErrorFor.get(name),\n+              Warnings.INVALIDATION, name,\n+              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+        }\n+      }\n+    } else if (child.isGetProp()) {\n+      Node proto = NodeUtil.getPrototypeObject(child);\n+      if (!proto.isQualifiedName()) {\n+        continue;\n+      }\n+\n+      String propName = proto.getQualifiedName();\n+      Node propNode = child.getLastChild();\n+      String propAccessor = propNode.getString();\n+      String propNameAccessor = propName + \".\" + propAccessor;\n+\n+      T type = typeSystem.getType(getScope(), n, propNameAccessor);\n+\n+      Property prop = getProperty(propNameAccessor);\n+      if (!prop.scheduleRenaming(propNode,\n+          processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(propNameAccessor)) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child, propertiesToErrorFor.get(propNameAccessor),\n+              Warnings.INVALIDATION, propNameAccessor,\n+              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+        }\n+      }\n+    } else if (child.isGetElem()) {\n+      Node firstChild = child.getFirstChild();\n+      Node secondChild = firstChild.getNext();\n+      if (!firstChild.isQualifiedName()) {\n+        continue;\n+      }\n+\n+      String propName = firstChild.getQualifiedName();\n+      if (!secondChild.isString()) {\n+        continue;\n+      }\n+\n+      String elemName = secondChild.getString();\n+      String arrayPropName = propName + \"[\" + elemName + \"]\";\n+\n+      T type = typeSystem.getType(getScope(), n, arrayPropName);\n+\n+      Property prop = getProperty(arrayPropName);\n+      if (!prop.scheduleRenaming(secondChild,\n+          processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(arrayPropName)) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child, propertiesToErrorFor.get(arrayPropName),\n+              Warnings.INVALIDATION, arrayPropName,\n+              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n         }\n       }\n     }\n+  }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}