{
    "patch": "      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n      if (jsDocInfo != null && jsDocInfo.hasThisType() &&\n          (child.isGetProp() || child.isGetElem())) {\n        JSType type = getJSType(child.getFirstChild().getJSType(), jsDocInfo.getThisType());\n        if (type.isUnknownType()) {\n          report(t, n, INVALID_THIS_TYPE);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..d664d42d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n+      if (jsDocInfo != null && jsDocInfo.hasThisType() &&\n+          (child.isGetProp() || child.isGetElem())) {\n+        JSType type = getJSType(child.getFirstChild().getJSType(), jsDocInfo.getThisType());\n+        if (type.isUnknownType()) {\n+          report(t, n, INVALID_THIS_TYPE);\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}