{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_SIZE = 1000; // Maximum allowed size of the matrix\n    \n    if (m.getRowDimension() > MAX_SIZE || m.getColumnDimension() > MAX_SIZE) {\n        throw new IllegalArgumentException(\"Matrix too large: \" + m.getRowDimension() + \" x \" + m.getColumnDimension());\n    }\n    \n    final EigenDecomposition dec = new EigenDecomposition(m);\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cc1e42eeb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_SIZE = 1000; // Maximum allowed size of the matrix\n+    \n+    if (m.getRowDimension() > MAX_SIZE || m.getColumnDimension() > MAX_SIZE) {\n+        throw new IllegalArgumentException(\"Matrix too large: \" + m.getRowDimension() + \" x \" + m.getColumnDimension());\n     }\n+    \n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "java.lang.IllegalArgumentException: Matrix too large: 40000 x 40000",
    "test_result": "FAIL"
}