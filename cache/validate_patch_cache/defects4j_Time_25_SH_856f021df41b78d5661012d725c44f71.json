{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // if more than 24 hours from the transition (in either direction), return the estimated offset\n    long nextTransLocal = (offsetLocal < offsetAdjusted) ? nextTransition(instantLocal) : previousTransition(instantLocal);\n    long interval = Math.abs(nextTransLocal - instantLocal);\n    if (interval >= DateTimeConstants.MILLIS_PER_DAY) {\n        return offsetLocal;\n    }\n    // calculate the offset just before the transition in the estimated timezone\n    int offsetBeforeTransLocal = getOffset(nextTransLocal - 1);\n    // check if there is a gap or overlap\n    if (offsetLocal >= offsetBeforeTransLocal) {\n        // we're in an overlap, return the bigger of the two offsets\n        return Math.max(offsetLocal, offsetAdjusted);\n    } else {\n        // we're in a gap, return the offset just before the transition in the estimated timezone\n        return offsetBeforeTransLocal;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0a905016 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // if more than 24 hours from the transition (in either direction), return the estimated offset\n+    long nextTransLocal = (offsetLocal < offsetAdjusted) ? nextTransition(instantLocal) : previousTransition(instantLocal);\n+    long interval = Math.abs(nextTransLocal - instantLocal);\n+    if (interval >= DateTimeConstants.MILLIS_PER_DAY) {\n+        return offsetLocal;\n+    }\n+    // calculate the offset just before the transition in the estimated timezone\n+    int offsetBeforeTransLocal = getOffset(nextTransLocal - 1);\n+    // check if there is a gap or overlap\n+    if (offsetLocal >= offsetBeforeTransLocal) {\n+        // we're in an overlap, return the bigger of the two offsets\n+        return Math.max(offsetLocal, offsetAdjusted);\n+    } else {\n+        // we're in a gap, return the offset just before the transition in the estimated timezone\n+        return offsetBeforeTransLocal;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}