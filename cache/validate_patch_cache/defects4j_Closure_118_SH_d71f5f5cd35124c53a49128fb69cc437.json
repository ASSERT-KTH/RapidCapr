{
    "patch": "        Token childType = child.getToken();\n        if (childType != Token.STRING) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child,\n              Warnings.INVALIDATION,\n              \"Unexpected non-string node found in the object literal\"));\n          continue;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..fce6258c 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,14 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        Token childType = child.getToken();\n+        if (childType != Token.STRING) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child,\n+              Warnings.INVALIDATION,\n+              \"Unexpected non-string node found in the object literal\"));\n+          continue;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}