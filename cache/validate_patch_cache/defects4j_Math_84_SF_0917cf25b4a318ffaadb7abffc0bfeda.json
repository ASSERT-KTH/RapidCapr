{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            else {\n                simplex = contract(original, comparator);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        simplex = contract(original, comparator);\n\n        // check convergence\n        if (isConverged(simplex[0], best)) {\n            return;\n        }\n    }\n}\n\n/**\n * Compute the contracted simplex.\n */\nprivate RealPointValuePair[] contract(final RealPointValuePair[] x, Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = x[0];\n\n    // Compute the contracted point\n    final double[] xSmallest = x[x.length - 1].getPoint();\n    final double[] contracted = new double[xSmallest.length];\n    for (int i = 0; i < x.length - 1; i++) {\n        final double[] xi = x[i].getPoint();\n        for (int j = 0; j < xSmallest.length; j++) {\n            contracted[j] += xi[j];\n        }\n    }\n    for (int j = 0; j < xSmallest.length; j++) {\n        contracted[j] /= x.length - 1;\n        contracted[j] = gamma * (contracted[j] - xSmallest[j]) + xSmallest[j];\n    }\n\n    // Create the contracted simplex\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[x.length];\n    contractedSimplex[0] = best;\n    contractedSimplex[x.length - 1] = new RealPointValuePair(contract(contracted), Double.NaN, false);\n    for (int i = 1; i < x.length - 1; i++) {\n        final double[] xi = x[i].getPoint();\n        final double[] contractedPoint = new double[xi.length];\n        for (int j = 0; j < xi.length; j++) {\n            contractedPoint[j] = gamma * (xi[j] - xSmallest[j]) + xSmallest[j];\n        }\n        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN, false);\n    }\n\n    sortPairs(contractedSimplex, comparator);\n\n    return contractedSimplex;\n}\n\n/**\n * Check if the simplex has converged.\n *\n * @param point  the best point found so far\n * @param startPoint the starting point\n * @return true if the simplex has converged, false otherwise\n */\nprivate boolean isConverged(final RealPointValuePair point, final RealPointValuePair startPoint) {\n    final double[] p = point.getPoint();\n    final double[] sp = startPoint.getPoint();\n    double val = 0;\n    for (int i = 0; i < p.length; i++) {\n        final double v = p[i] - sp[i];\n        val += v * v;\n    }\n\n    return (Math.sqrt(val) < simplexSizeTolerance * (1 + Math.sqrt(sp.length)));\n}\n\n/**\n * Contract a point with respect to a center point using the given ratio.\n */\nprivate double[] contract(final double[] point) {\n    final double[] contracted = new double[point.length];\n    for (int i = 0; i < point.length; i++) {\n        contracted[i] = centroid[i] + contractFactor * (point[i] - centroid[i]);\n    }\n    return contracted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5343cd7a6 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,114 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n+            else {\n+                simplex = contract(original, comparator);\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // compute the contracted simplex\n+        simplex = contract(original, comparator);\n \n-            // check convergence\n-                return;\n-            }\n+        // check convergence\n+        if (isConverged(simplex[0], best)) {\n+            return;\n+        }\n+    }\n+}\n \n+/**\n+ * Compute the contracted simplex.\n+ */\n+private RealPointValuePair[] contract(final RealPointValuePair[] x, Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = x[0];\n+\n+    // Compute the contracted point\n+    final double[] xSmallest = x[x.length - 1].getPoint();\n+    final double[] contracted = new double[xSmallest.length];\n+    for (int i = 0; i < x.length - 1; i++) {\n+        final double[] xi = x[i].getPoint();\n+        for (int j = 0; j < xSmallest.length; j++) {\n+            contracted[j] += xi[j];\n         }\n+    }\n+    for (int j = 0; j < xSmallest.length; j++) {\n+        contracted[j] /= x.length - 1;\n+        contracted[j] = gamma * (contracted[j] - xSmallest[j]) + xSmallest[j];\n+    }\n \n+    // Create the contracted simplex\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[x.length];\n+    contractedSimplex[0] = best;\n+    contractedSimplex[x.length - 1] = new RealPointValuePair(contract(contracted), Double.NaN, false);\n+    for (int i = 1; i < x.length - 1; i++) {\n+        final double[] xi = x[i].getPoint();\n+        final double[] contractedPoint = new double[xi.length];\n+        for (int j = 0; j < xi.length; j++) {\n+            contractedPoint[j] = gamma * (xi[j] - xSmallest[j]) + xSmallest[j];\n+        }\n+        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN, false);\n     }\n \n+    sortPairs(contractedSimplex, comparator);\n+\n+    return contractedSimplex;\n+}\n+\n+/**\n+ * Check if the simplex has converged.\n+ *\n+ * @param point  the best point found so far\n+ * @param startPoint the starting point\n+ * @return true if the simplex has converged, false otherwise\n+ */\n+private boolean isConverged(final RealPointValuePair point, final RealPointValuePair startPoint) {\n+    final double[] p = point.getPoint();\n+    final double[] sp = startPoint.getPoint();\n+    double val = 0;\n+    for (int i = 0; i < p.length; i++) {\n+        final double v = p[i] - sp[i];\n+        val += v * v;\n+    }\n+\n+    return (Math.sqrt(val) < simplexSizeTolerance * (1 + Math.sqrt(sp.length)));\n+}\n+\n+/**\n+ * Contract a point with respect to a center point using the given ratio.\n+ */\n+private double[] contract(final double[] point) {\n+    final double[] contracted = new double[point.length];\n+    for (int i = 0; i < point.length; i++) {\n+        contracted[i] = centroid[i] + contractFactor * (point[i] - centroid[i]);\n+    }\n+    return contracted;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}