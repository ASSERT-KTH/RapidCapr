{
    "patch": "public static double getTypedPercent(String js) {\n\n    int totalChars = 0;\n    int typedChars = 0;\n\n    for(int i = 0; i < js.length(); i++) {\n        char c = js.charAt(i);\n        if(Character.isLetterOrDigit(c)) {\n            typedChars++;\n        }\n        if(c != ' ' && c != '\\n') {\n            totalChars++;\n        }\n    }\n    if(totalChars == 0) {\n        return 100.0;\n    }\n    double percent = ((double) typedChars / (double) totalChars) * 100.0;\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..265c2237 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+\n+    int totalChars = 0;\n+    int typedChars = 0;\n+\n+    for(int i = 0; i < js.length(); i++) {\n+        char c = js.charAt(i);\n+        if(Character.isLetterOrDigit(c)) {\n+            typedChars++;\n+        }\n+        if(c != ' ' && c != '\\n') {\n+            totalChars++;\n+        }\n+    }\n+    if(totalChars == 0) {\n+        return 100.0;\n+    }\n+    double percent = ((double) typedChars / (double) totalChars) * 100.0;\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}