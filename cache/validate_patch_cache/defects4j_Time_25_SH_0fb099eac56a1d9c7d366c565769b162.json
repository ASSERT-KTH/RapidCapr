{
    "patch": "            if (offsetAdjusted >= 0) {\n                if (offsetLocal < 0 && (instantLocal - nextTransition(instantLocal)) < DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetAdjusted;\n                }\n            } else {\n                if (offsetLocal >= 0 && (nextTransition(instantLocal) - instantLocal) <= DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bded0904 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,13 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetAdjusted >= 0) {\n+                if (offsetLocal < 0 && (instantLocal - nextTransition(instantLocal)) < DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                if (offsetLocal >= 0 && (nextTransition(instantLocal) - instantLocal) <= DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}