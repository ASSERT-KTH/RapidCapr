{
    "patch": "public double getTypedPercent(String json) {\n    try {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode node = mapper.readTree(json);\n        JsonNode all_fields_node = node.get(\"all_fields\");\n        int all_fields_count = all_fields_node.size();\n        JsonNode typed_fields_node = node.get(\"typed_fields\");\n        int typed_fields_count = typed_fields_node.size();\n\n        double percent = ((double) typed_fields_count / (double) all_fields_count) * 100;\n        return percent;\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    return 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2d7496d5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    try {\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode node = mapper.readTree(json);\n+        JsonNode all_fields_node = node.get(\"all_fields\");\n+        int all_fields_count = all_fields_node.size();\n+        JsonNode typed_fields_node = node.get(\"typed_fields\");\n+        int typed_fields_count = typed_fields_node.size();\n+\n+        double percent = ((double) typed_fields_count / (double) all_fields_count) * 100;\n+        return percent;\n+    } catch (JsonProcessingException e) {\n+        e.printStackTrace();\n+    }\n+    return 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}