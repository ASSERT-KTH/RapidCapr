{
    "patch": "  private Set<ObjectType> visited = new HashSet<>();\n  \n  public boolean canBeCalled() {\n    return isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      if (visited.contains(this)) {\n        return \"...\";\n      }\n      visited.add(this);\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        Type type = getPropertyType(property);\n        if (type instanceof ObjectType) {\n          sb.append(((ObjectType) type).toStringHelper(forAnnotations));\n        } else {\n          sb.append(type.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      visited.remove(this);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..cb282133 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,6 +345,8 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n+  private Set<ObjectType> visited = new HashSet<>();\n+  \n   public boolean canBeCalled() {\n     return isRegexpType();\n   }\n@@ -355,7 +357,10 @@ class PrototypeObjectType extends ObjectType {\n       return getReferenceName();\n     } else if (prettyPrint) {\n       // Don't pretty print recursively.\n-      prettyPrint = false;\n+      if (visited.contains(this)) {\n+        return \"...\";\n+      }\n+      visited.add(this);\n \n       // Use a tree set so that the properties are sorted.\n       Set<String> propertyNames = Sets.newTreeSet();\n@@ -377,7 +382,12 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        Type type = getPropertyType(property);\n+        if (type instanceof ObjectType) {\n+          sb.append(((ObjectType) type).toStringHelper(forAnnotations));\n+        } else {\n+          sb.append(type.toString());\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -388,12 +398,7 @@ class PrototypeObjectType extends ObjectType {\n \n       sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n+      visited.remove(this);\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}