{
    "patch": "protected BasePeriod(long duration) {\n    if (duration >= (7 * 24 * 60 * 60 * 1000)) {\n        // Duration is more than a week\n        this(new Duration(duration).toPeriod(PeriodType.weeks().withDaysRemoved()), null, null);\n    } else {\n        // Duration is less than a week\n        this(new Duration(duration).toPeriod(PeriodType.dayTime().withDaysRemoved()), null, null);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..ad050612 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,15 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    if (duration >= (7 * 24 * 60 * 60 * 1000)) {\n+        // Duration is more than a week\n+        this(new Duration(duration).toPeriod(PeriodType.weeks().withDaysRemoved()), null, null);\n+    } else {\n+        // Duration is less than a week\n+        this(new Duration(duration).toPeriod(PeriodType.dayTime().withDaysRemoved()), null, null);\n     }\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: call to this must be first statement in constructor",
    "test_result": "ERROR"
}