{
    "patch": "private String getRemainingJSDocLine() {\n    String result = null;\n    try {\n        result = stream.getRemainingJSDocLine();\n    } catch (RuntimeException e) {\n        throw new IllegalStateException(\"Recorded bad position information\", e);\n    }\n    if (result != null) {\n        result = result.trim();\n        if (result.isEmpty()) {\n            result = null;\n        }\n    }\n    if (result == null) {\n        throw new IllegalArgumentException(\"Unexpected null or empty string for remaining JSDoc line\");\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..e6eaa7d0 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,24 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = null;\n+    try {\n+        result = stream.getRemainingJSDocLine();\n+    } catch (RuntimeException e) {\n+        throw new IllegalStateException(\"Recorded bad position information\", e);\n+    }\n+    if (result != null) {\n+        result = result.trim();\n+        if (result.isEmpty()) {\n+            result = null;\n+        }\n+    }\n+    if (result == null) {\n+        throw new IllegalArgumentException(\"Unexpected null or empty string for remaining JSDoc line\");\n+    }\n     return result;\n-  }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalArgumentException: Unexpected null or empty string for remaining JSDoc line",
    "test_result": "FAIL"
}