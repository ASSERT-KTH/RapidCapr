{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    int separatorIndex = -1;\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            separatorIndex = i;\n            break;\n        }\n    }\n\n    if (separatorIndex == -1) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        } else if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    } else {\n        int i = separatorIndex;\n        Separator sep = null;\n        while (i < size && elementPairs.get(i) instanceof Separator) {\n            sep = (Separator) elementPairs.get(i++);\n        }\n\n        if (i == size) {\n            throw new IllegalStateException(\"Builder has created only \" + (notPrinter ? \"a parser\" : \"a printer\"));\n        }\n\n        List<Object> sublist = elementPairs.subList(i, size);\n        PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n\n        PeriodPrinter printer = null;\n        PeriodParser parser = null;\n\n        if (!notPrinter && sep != null) {\n            printer = sep.finish(f.getPrinter(), null);\n        }\n        if (!notParser && sep != null) {\n            parser = sep.finish(null, f.getParser());\n        }\n\n        if (notPrinter && printer != null) {\n            printer = null;\n        }\n        if (notParser && parser != null) {\n            parser = null;\n        }\n\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..3d77f1e9 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,70 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    int separatorIndex = -1;\n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            separatorIndex = i;\n+            break;\n         }\n+    }\n+\n+    if (separatorIndex == -1) {\n         Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n+        if (notPrinter && notParser) {\n+            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+        } else if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n         } else {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+    } else {\n+        int i = separatorIndex;\n+        Separator sep = null;\n+        while (i < size && elementPairs.get(i) instanceof Separator) {\n+            sep = (Separator) elementPairs.get(i++);\n+        }\n+\n+        if (i == size) {\n+            throw new IllegalStateException(\"Builder has created only \" + (notPrinter ? \"a parser\" : \"a printer\"));\n+        }\n+\n+        List<Object> sublist = elementPairs.subList(i, size);\n+        PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n+\n+        PeriodPrinter printer = null;\n+        PeriodParser parser = null;\n+\n+        if (!notPrinter && sep != null) {\n+            printer = sep.finish(f.getPrinter(), null);\n+        }\n+        if (!notParser && sep != null) {\n+            parser = sep.finish(null, f.getParser());\n+        }\n+\n+        if (notPrinter && printer != null) {\n+            printer = null;\n+        }\n+        if (notParser && parser != null) {\n+            parser = null;\n+        }\n+\n+        return new PeriodFormatter(printer, parser);\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}