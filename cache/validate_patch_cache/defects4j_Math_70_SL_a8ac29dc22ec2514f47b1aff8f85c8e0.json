{
    "patch": "if (Double.isNaN(min) || Double.isNaN(max)) {\n    return Double.NaN;\n}\n\ndouble minValue = f.value(min);\ndouble maxValue = f.value(max);\n\nif (Double.isNaN(minValue) || Double.isNaN(maxValue)) {\n    return Double.NaN;\n}\n\nif (minValue * maxValue > 0) {\n    return Double.NaN;\n}\n\ndouble m;\ndouble fm;\ndouble fl = f.value(min);\ndouble fh = f.value(max);\nint i = 0;\n\nwhile (i++ <= getMaximalIterations()) {\n    m = UnivariateSolverUtils.midpoint(min, max);\n    fm = f.value(m);\n\n    if (fm * fl > 0) {\n        min = m;\n        fl = fm;\n    } else {\n        max = m;\n        fh = fm;\n    }\n    if (Math.abs(max - min) <= getAbsoluteAccuracy()) {\n        return m;\n    }\n}\n\nthrow new MaxIterationsExceededException(getMaximalIterations());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..4ece79972 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,44 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (Double.isNaN(min) || Double.isNaN(max)) {\n+    return Double.NaN;\n+}\n+\n+double minValue = f.value(min);\n+double maxValue = f.value(max);\n+\n+if (Double.isNaN(minValue) || Double.isNaN(maxValue)) {\n+    return Double.NaN;\n+}\n+\n+if (minValue * maxValue > 0) {\n+    return Double.NaN;\n+}\n+\n+double m;\n+double fm;\n+double fl = f.value(min);\n+double fh = f.value(max);\n+int i = 0;\n+\n+while (i++ <= getMaximalIterations()) {\n+    m = UnivariateSolverUtils.midpoint(min, max);\n+    fm = f.value(m);\n+\n+    if (fm * fl > 0) {\n+        min = m;\n+        fl = fm;\n+    } else {\n+        max = m;\n+        fh = fm;\n+    }\n+    if (Math.abs(max - min) <= getAbsoluteAccuracy()) {\n+        return m;\n+    }\n+}\n+\n+throw new MaxIterationsExceededException(getMaximalIterations());\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}