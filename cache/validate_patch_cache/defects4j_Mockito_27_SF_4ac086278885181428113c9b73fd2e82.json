{
    "patch": "import java.lang.reflect.Method;\nimport org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\nimport org.mockito.internal.creation.MockSettingsImpl;\n\npublic class ResetMock<T> {\n    \n    interface MockHandlerInterface<T> extends java.io.Serializable {\n        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n    }\n    \n    static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n        final MockHandlerInterface<T> delegateMockHandler;\n        \n        MockHandler(MockHandlerInterface<T> mockHandler) {\n            this.delegateMockHandler = mockHandler;\n        }\n        \n        @Override\n        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n        }\n    }\n    \n    static class MockHandlerInvocation implements java.io.Serializable {\n        final Object object;\n        final Method method;\n        final Object[] args;\n        final MethodProxy methodProxy;\n        \n        MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n            this.object = object;\n            this.method = method;\n            this.args = args;\n            this.methodProxy = methodProxy;\n        }\n    }\n    \n    static class MethodInterceptorFilter implements MethodInterceptor, java.io.Serializable {\n        final MockHandler<T> mockHandler;\n        final MockSettingsImpl settings;\n        \n        public MethodInterceptorFilter(MockHandler<T> mockHandler, MockSettingsImpl settings) {\n            this.mockHandler = mockHandler;\n            this.settings = settings;\n        }\n        \n        @Override\n        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n            return mockHandler.intercept(object, method, args, methodProxy);\n        }\n        \n        public MockSettingsImpl getSettings() {\n            return settings;\n        }\n    }\n    \n    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallback(0, newFilter);\n    }\n    \n    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        Factory factory = (Factory) mock;\n        MethodInterceptor callback = factory.getCallback(0);\n        if (callback instanceof MethodInterceptorFilter) {\n            MethodInterceptorFilter filter = (MethodInterceptorFilter) callback;\n            MockHandler<T> mockHandler = (MockHandler<T>) filter.mockHandler;\n            return mockHandler.delegateMockHandler;\n        }\n        throw new IllegalStateException(\"Unable to get mock handler\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..39f458698 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,83 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import java.lang.reflect.Method;\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+\n+public class ResetMock<T> {\n+    \n+    interface MockHandlerInterface<T> extends java.io.Serializable {\n+        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n+    }\n+    \n+    static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n+        final MockHandlerInterface<T> delegateMockHandler;\n+        \n+        MockHandler(MockHandlerInterface<T> mockHandler) {\n+            this.delegateMockHandler = mockHandler;\n+        }\n+        \n+        @Override\n+        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n+            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n+        }\n+    }\n+    \n+    static class MockHandlerInvocation implements java.io.Serializable {\n+        final Object object;\n+        final Method method;\n+        final Object[] args;\n+        final MethodProxy methodProxy;\n+        \n+        MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n+            this.object = object;\n+            this.method = method;\n+            this.args = args;\n+            this.methodProxy = methodProxy;\n+        }\n+    }\n+    \n+    static class MethodInterceptorFilter implements MethodInterceptor, java.io.Serializable {\n+        final MockHandler<T> mockHandler;\n+        final MockSettingsImpl settings;\n+        \n+        public MethodInterceptorFilter(MockHandler<T> mockHandler, MockSettingsImpl settings) {\n+            this.mockHandler = mockHandler;\n+            this.settings = settings;\n+        }\n+        \n+        @Override\n+        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n+            return mockHandler.intercept(object, method, args, methodProxy);\n+        }\n+        \n+        public MockSettingsImpl getSettings() {\n+            return settings;\n+        }\n+    }\n+    \n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallback(0, newFilter);\n+    }\n+    \n+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        Factory factory = (Factory) mock;\n+        MethodInterceptor callback = factory.getCallback(0);\n+        if (callback instanceof MethodInterceptorFilter) {\n+            MethodInterceptorFilter filter = (MethodInterceptorFilter) callback;\n+            MockHandler<T> mockHandler = (MockHandler<T>) filter.mockHandler;\n+            return mockHandler.delegateMockHandler;\n+        }\n+        throw new IllegalStateException(\"Unable to get mock handler\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}