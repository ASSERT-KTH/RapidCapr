{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node currentArg = argList.getFirstChild();\n    for (int i = 0; currentArg != null; i++) {\n      Var var = fnScope.getVar(currentArg.getString());\n      Node nextArg = currentArg.getNext();\n      if (!referenced.contains(var)\n          && !isFunctionTypeCheck(currentArg.getNext())) {\n        // If this is the rest parameter, then its type is unknown, but it should\n        // discarded if it is not referenced.\n        argList.removeChild(currentArg);\n        currentArg = nextArg;\n        compiler.reportCodeChange();\n      } else if (currentArg.getBooleanProp(Node.IS_DUMMY)) {\n        // Remove unannotated parameters.\n        argList.removeChild(currentArg);\n        currentArg = nextArg;\n        compiler.reportCodeChange();\n      } else {\n        currentArg = nextArg;\n      }\n    }\n\n    // Strip the default values of all unreferenced parameters.\n    Node defaultValueRoot = function.getLastChild().getFirstChild();\n    if (defaultValueRoot != null && !defaultValueRoot.isFunction()) {\n      Node defaultValueChild = defaultValueRoot.getFirstChild();\n      List<Node> unusedDefaults = new ArrayList<>();\n      while (defaultValueChild != null) {\n        if (!referenced.contains(fnScope.getVar(defaultValueChild.getString()))\n            && !NodeUtil.referencesThis(defaultValueChild)) {\n          unusedDefaults.add(defaultValueChild);\n        }\n        defaultValueChild = defaultValueChild.getNext();\n      }\n\n      for (Node unusedDefault : unusedDefaults) {\n        unusedDefault.getParent().removeChild(unusedDefault);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c20f79d9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node currentArg = argList.getFirstChild();\n+    for (int i = 0; currentArg != null; i++) {\n+      Var var = fnScope.getVar(currentArg.getString());\n+      Node nextArg = currentArg.getNext();\n+      if (!referenced.contains(var)\n+          && !isFunctionTypeCheck(currentArg.getNext())) {\n+        // If this is the rest parameter, then its type is unknown, but it should\n+        // discarded if it is not referenced.\n+        argList.removeChild(currentArg);\n+        currentArg = nextArg;\n+        compiler.reportCodeChange();\n+      } else if (currentArg.getBooleanProp(Node.IS_DUMMY)) {\n+        // Remove unannotated parameters.\n+        argList.removeChild(currentArg);\n+        currentArg = nextArg;\n+        compiler.reportCodeChange();\n+      } else {\n+        currentArg = nextArg;\n+      }\n+    }\n+\n+    // Strip the default values of all unreferenced parameters.\n+    Node defaultValueRoot = function.getLastChild().getFirstChild();\n+    if (defaultValueRoot != null && !defaultValueRoot.isFunction()) {\n+      Node defaultValueChild = defaultValueRoot.getFirstChild();\n+      List<Node> unusedDefaults = new ArrayList<>();\n+      while (defaultValueChild != null) {\n+        if (!referenced.contains(fnScope.getVar(defaultValueChild.getString()))\n+            && !NodeUtil.referencesThis(defaultValueChild)) {\n+          unusedDefaults.add(defaultValueChild);\n+        }\n+        defaultValueChild = defaultValueChild.getNext();\n+      }\n+\n+      for (Node unusedDefault : unusedDefaults) {\n+        unusedDefault.getParent().removeChild(unusedDefault);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}