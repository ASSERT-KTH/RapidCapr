{
    "patch": "// Strip unreferenced args off the end of the function declaration.\n    Node argList = getFunctionArgList(function);\n    Node currentNode = argList.getFirstChild();\n    while (currentNode != null && !referenced.contains(fnScope.getVar(currentNode.getString()))) {\n      argList.removeChild(currentNode);\n      compiler.reportChangeToEnclosingScope(currentNode);\n      currentNode = argList.getFirstChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..888aabf0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,13 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+    Node argList = getFunctionArgList(function);\n+    Node currentNode = argList.getFirstChild();\n+    while (currentNode != null && !referenced.contains(fnScope.getVar(currentNode.getString()))) {\n+      argList.removeChild(currentNode);\n+      compiler.reportChangeToEnclosingScope(currentNode);\n+      currentNode = argList.getFirstChild();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}