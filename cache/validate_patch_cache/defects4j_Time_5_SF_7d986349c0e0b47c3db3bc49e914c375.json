{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n    int weeks = getWeeks();\n\n    if (type.isSupported(DurationFieldType.months())) {\n        int totalMonths = months + (years * 12);\n        months = totalMonths % 12;\n        years = totalMonths / 12;\n    }\n    \n    if (type.isSupported(DurationFieldType.weeks())) {        \n        days += weeks * 7;\n        weeks = 0;\n    }\n    \n    long millis = ((((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR))\n            + (((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH))\n            + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n            + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n            + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n            + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n            + ((long) getMillis()));\n    \n    Period period = new Period(millis, type);\n    if (period.get(DurationFieldType.weeks()) != 0 && type.isSupported(DurationFieldType.weeks())) {\n        period = period.withDays(period.get(DurationFieldType.weeks()) * 7);\n        period = period.withWeeks(0);\n    }\n    return period;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f02b6c0e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,38 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+    int weeks = getWeeks();\n+\n+    if (type.isSupported(DurationFieldType.months())) {\n+        int totalMonths = months + (years * 12);\n+        months = totalMonths % 12;\n+        years = totalMonths / 12;\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.weeks())) {        \n+        days += weeks * 7;\n+        weeks = 0;\n+    }\n+    \n+    long millis = ((((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR))\n+            + (((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH))\n+            + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+            + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+            + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+            + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+            + ((long) getMillis()));\n+    \n+    Period period = new Period(millis, type);\n+    if (period.get(DurationFieldType.weeks()) != 0 && type.isSupported(DurationFieldType.weeks())) {\n+        period = period.withDays(period.get(DurationFieldType.weeks()) * 7);\n+        period = period.withWeeks(0);\n+    }\n+    return period;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}