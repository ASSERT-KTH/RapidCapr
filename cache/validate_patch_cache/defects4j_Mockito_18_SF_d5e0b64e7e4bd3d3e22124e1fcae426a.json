{
    "patch": "public static Map<Character, Integer> countChars(String str) {\n    Map<Character, Integer> charCount = new HashMap<>();\n    if (str != null) { // check for null input\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (charCount.containsKey(c)) {\n                charCount.put(c, charCount.get(c) + 1);\n            } else {\n                charCount.put(c, 1);\n            }\n        }\n    }\n    return charCount;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..97612ac69 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Character, Integer> countChars(String str) {\n+    Map<Character, Integer> charCount = new HashMap<>();\n+    if (str != null) { // check for null input\n+        for (int i = 0; i < str.length(); i++) {\n+            char c = str.charAt(i);\n+            if (charCount.containsKey(c)) {\n+                charCount.put(c, charCount.get(c) + 1);\n+            } else {\n+                charCount.put(c, 1);\n+            }\n+        }\n+    }\n+    return charCount;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}