{
    "patch": "          List<Reference> assignmentsInBlock = block.getAssignments();\n          for (Reference assignment : assignmentsInBlock) {\n            if (assignment == ref) {\n              continue;\n            }\n            JSTypeExpression type = assignment.getJSType();\n            if (type == null || !type.equals(ref.getJSType())) {\n              return false;\n            }\n          }\n          break;\n        } else if (block.isLoop) {\n          return false;\n        } else if (!block.getAssignments().isEmpty()) {\n          if (block.getAssignments().size() > 1) {\n            return false;\n          }\n          Reference maybeOneAndOnlyAssignment = block.getAssignments().get(0);\n          if (maybeOneAndOnlyAssignment == ref) {\n            continue;\n          }\n          JSTypeExpression type = maybeOneAndOnlyAssignment.getJSType();\n          if (type == null || !type.equals(ref.getJSType())) {\n            return false;\n          }\n        } else if (block != ref.getBasicBlock()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6f52341d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,32 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          List<Reference> assignmentsInBlock = block.getAssignments();\n+          for (Reference assignment : assignmentsInBlock) {\n+            if (assignment == ref) {\n+              continue;\n+            }\n+            JSTypeExpression type = assignment.getJSType();\n+            if (type == null || !type.equals(ref.getJSType())) {\n+              return false;\n+            }\n+          }\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (!block.getAssignments().isEmpty()) {\n+          if (block.getAssignments().size() > 1) {\n+            return false;\n+          }\n+          Reference maybeOneAndOnlyAssignment = block.getAssignments().get(0);\n+          if (maybeOneAndOnlyAssignment == ref) {\n+            continue;\n+          }\n+          JSTypeExpression type = maybeOneAndOnlyAssignment.getJSType();\n+          if (type == null || !type.equals(ref.getJSType())) {\n+            return false;\n+          }\n+        } else if (block != ref.getBasicBlock()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}