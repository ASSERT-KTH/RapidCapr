{
    "patch": "public ReturnValue execute() {\n    Object result = new Object();\n    if (query instanceof SelectQuery) {\n        SelectQuery selectQuery = (SelectQuery) query;\n        // Create a new list to store the result of the query\n        List<Object> resultList = new ArrayList<>();\n        List<Row> rows = database.getRowsForTable(selectQuery.getTableName());\n        // Add element to the list only if it matches the WHERE clause\n        for (Row row : rows) {\n            if(selectQuery.getWhere().matches(row)){\n                resultList.add(row.get(selectQuery.getWhat()));\n            }\n        }\n        result = resultList;\n    } else if (query instanceof InsertQuery) {\n        // execute the Insert query\n        database.insert(query.getTableName(), ((InsertQuery)query).getColumnNames(), ((InsertQuery)query).getValues());\n        result = \"success\";\n    } \n    // return the result\n    return new ReturnValue(result);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}