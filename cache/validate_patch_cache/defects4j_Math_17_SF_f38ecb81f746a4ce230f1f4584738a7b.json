{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(getField(), this);\n            }\n\n            Dfp r = newInstance(this);\n            r.sign = signum() * ((long) x < 0 ? -1 : 1);\n            long xh = Math.abs((long) x);\n            int xi = 1 << 30;\n            boolean first = true;\n\n            while (xi > xh) {\n                xi >>>= 1;\n            }\n\n            while (xi != 0) {\n                if (!first) {\n                    r = r.square();\n                } else {\n                    first = false;\n                }\n\n                if ((xh & xi) != 0) {\n                    r = r.multiply(this);\n                }\n\n                xi >>>= 1;\n            }\n\n            return r;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..79c038d05 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,8 +1600,36 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n-    }\n+            if (isNaN()) {\n+                return newInstance(getField(), this);\n+            }\n+\n+            Dfp r = newInstance(this);\n+            r.sign = signum() * ((long) x < 0 ? -1 : 1);\n+            long xh = Math.abs((long) x);\n+            int xi = 1 << 30;\n+            boolean first = true;\n+\n+            while (xi > xh) {\n+                xi >>>= 1;\n+            }\n+\n+            while (xi != 0) {\n+                if (!first) {\n+                    r = r.square();\n+                } else {\n+                    first = false;\n+                }\n+\n+                if ((xh & xi) != 0) {\n+                    r = r.multiply(this);\n+                }\n+\n+                xi >>>= 1;\n+            }\n+\n+            return r;\n+        }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: no suitable method found for newInstance(DfpField,Dfp)",
    "test_result": "ERROR"
}