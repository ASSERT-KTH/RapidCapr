{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int varargIndex = invocation.getRawArguments().length - 1;\n\n        // We don't support capturing varargs\n        if (isVariableArgument(invocation, varargIndex)) {\n            throw new UnsupportedOperationException(\"Cannot capture varargs\");\n        }\n        Matcher m = matchers.get(varargIndex);\n        if (m instanceof CapturesArguments) {\n            ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(varargIndex, Object.class));\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..261f00792 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,27 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+public void captureArgumentsFrom(Invocation invocation) {\n+    if (invocation.getMethod().isVarArgs()) {\n+        int varargIndex = invocation.getRawArguments().length - 1;\n+\n+        // We don't support capturing varargs\n+        if (isVariableArgument(invocation, varargIndex)) {\n+            throw new UnsupportedOperationException(\"Cannot capture varargs\");\n+        }\n+        Matcher m = matchers.get(varargIndex);\n+        if (m instanceof CapturesArguments) {\n+            ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(varargIndex, Object.class));\n+        }\n+    } else {\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+            }\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}