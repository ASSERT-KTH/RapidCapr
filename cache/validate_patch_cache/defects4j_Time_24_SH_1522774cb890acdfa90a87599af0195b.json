{
    "patch": "    try {\n        for (int i = 0; i < count; i++) {\n            long newMillis = savedFields[i].set(millis, resetFields);\n            \n            for (int j = 0; j < i; j++) {\n                DurationField f1 = savedFields[i].iField.getDurationField();\n                DurationField f2 = savedFields[j].iField.getDurationField();\n                if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n                    continue;\n                }\n                int v1 = savedFields[i].iField.get(newMillis);\n                int v2 = savedFields[j].iField.get(newMillis);\n                if (v1 != v2) {\n                    throw new IllegalArgumentException(\"Conflict found: \" + \n                         savedFields[i].iField.getName() + \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n                }\n            }\n            \n            DateTimeField field = savedFields[i].iField;\n            int value = field.get(newMillis);\n            int minVal = field.getMinimumValue();\n            int maxVal = field.getMaximumValue();\n            if (value < minVal || value > maxVal) {\n                throw new IllegalArgumentException(\"The value of \" + field.getName() + \" is out of range: \" + value);\n            }\n            millis = newMillis;\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0ef5e437 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            long newMillis = savedFields[i].set(millis, resetFields);\n+            \n+            for (int j = 0; j < i; j++) {\n+                DurationField f1 = savedFields[i].iField.getDurationField();\n+                DurationField f2 = savedFields[j].iField.getDurationField();\n+                if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n+                    continue;\n+                }\n+                int v1 = savedFields[i].iField.get(newMillis);\n+                int v2 = savedFields[j].iField.get(newMillis);\n+                if (v1 != v2) {\n+                    throw new IllegalArgumentException(\"Conflict found: \" + \n+                         savedFields[i].iField.getName() + \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+                }\n+            }\n+            \n+            DateTimeField field = savedFields[i].iField;\n+            int value = field.get(newMillis);\n+            int minVal = field.getMinimumValue();\n+            int maxVal = field.getMaximumValue();\n+            if (value < minVal || value > maxVal) {\n+                throw new IllegalArgumentException(\"The value of \" + field.getName() + \" is out of range: \" + value);\n+            }\n+            millis = newMillis;\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Conflict found: dayOfWeek 6 and dayOfMonth 24",
    "test_result": "FAIL"
}