{
    "patch": "        if (isNaN()) {\n            return newInstance(this);\n        }\n        if (x == 0) {\n            return getZero();\n        }\n        if (x == 1) {\n            return newInstance(this);\n        }\n        final DfpField field = getField();\n        Dfp r = field.newDfp(0);\n        Dfp b = abs();\n        int q = 0;\n        final int[] c = b.data;\n        final int[] a = r.data;\n        final int bl = b.getHighPrecision();\n        final int al = r.getHighPrecision();\n        boolean carry = false;\n        for (int i = 0; i < bl && !carry; i++) {\n            final long prod = (long) c[i] * (long) x + (long) q;\n            q = (int) (prod / 10000L);\n            final int xi = (int) (prod - (long) q * 10000L);\n            a[i] = xi;\n            carry = q != 0;\n        }\n        if (carry) {\n            a[bl] = q;\n            r.setHighPrecision(bl + 1);\n        } else {\n            r.setHighPrecision(bl);\n        }\n        if (isNegative()) {\n            r = r.negate();\n        }\n        if (x < 0) {\n            // Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE!!!\n            r = r.negate();\n        }\n        return r.normalize();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..93e49ce57 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,45 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n-    }\n+        if (isNaN()) {\n+            return newInstance(this);\n+        }\n+        if (x == 0) {\n+            return getZero();\n+        }\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+        final DfpField field = getField();\n+        Dfp r = field.newDfp(0);\n+        Dfp b = abs();\n+        int q = 0;\n+        final int[] c = b.data;\n+        final int[] a = r.data;\n+        final int bl = b.getHighPrecision();\n+        final int al = r.getHighPrecision();\n+        boolean carry = false;\n+        for (int i = 0; i < bl && !carry; i++) {\n+            final long prod = (long) c[i] * (long) x + (long) q;\n+            q = (int) (prod / 10000L);\n+            final int xi = (int) (prod - (long) q * 10000L);\n+            a[i] = xi;\n+            carry = q != 0;\n+        }\n+        if (carry) {\n+            a[bl] = q;\n+            r.setHighPrecision(bl + 1);\n+        } else {\n+            r.setHighPrecision(bl);\n+        }\n+        if (isNegative()) {\n+            r = r.negate();\n+        }\n+        if (x < 0) {\n+            // Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE!!!\n+            r = r.negate();\n+        }\n+        return r.normalize();\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}