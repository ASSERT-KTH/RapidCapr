{
    "patch": "  void inferTypes(ObjectType obj, JSTypeRegistry registry) {\n    for (String propName : obj.getOwnPropertyNames()) {\n      JSType propType = obj.getPropertyType(propName);\n      if (propType.isUnknownType() ||\n          propType.isAllType() ||\n          propType.isNoType()) {\n        continue;\n      }\n\n      JSType inferredType = inferType(propType, registry, new HashSet<>());\n      if (inferredType == null) {\n        inferredType = getNativeType(NO_TYPE);\n      }\n\n      if (inferredType != null) {\n        obj.defineInferredProperty(propName, inferredType, null);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..a60b62a9 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,22 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+  void inferTypes(ObjectType obj, JSTypeRegistry registry) {\n+    for (String propName : obj.getOwnPropertyNames()) {\n+      JSType propType = obj.getPropertyType(propName);\n+      if (propType.isUnknownType() ||\n+          propType.isAllType() ||\n+          propType.isNoType()) {\n+        continue;\n       }\n-    }\n-  }\n \n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+      JSType inferredType = inferType(propType, registry, new HashSet<>());\n+      if (inferredType == null) {\n+        inferredType = getNativeType(NO_TYPE);\n       }\n+\n+      if (inferredType != null) {\n+        obj.defineInferredProperty(propName, inferredType, null);\n     }\n     return scope;\n   }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}