{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif(candidate != null) {\n    try {\n        field.setAccessible(true);\n        if (!field.getType().isAssignableFrom(candidate.getClass())) {\n            throw new IllegalStateException(\"Field type is not assignable from candidate type\");\n        }\n        field.set(fieldInstance, field.getType().cast(candidate));\n        if (!visitedObjects.contains(candidate)) {\n            visitedObjects.add(candidate);\n            injectMockCandidate(candidate.getClass(), mocks, candidate);\n        }\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Could not set field value\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..35d014bd6 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,25 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if(candidate != null) {\n+    try {\n+        field.setAccessible(true);\n+        if (!field.getType().isAssignableFrom(candidate.getClass())) {\n+            throw new IllegalStateException(\"Field type is not assignable from candidate type\");\n+        }\n+        field.set(fieldInstance, field.getType().cast(candidate));\n+        if (!visitedObjects.contains(candidate)) {\n+            visitedObjects.add(candidate);\n+            injectMockCandidate(candidate.getClass(), mocks, candidate);\n+        }\n+    } catch (IllegalAccessException e) {\n+        throw new IllegalStateException(\"Could not set field value\", e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}