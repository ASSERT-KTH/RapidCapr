{
    "patch": "if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n      CheckLevel warningLevel = options.checkGlobalThisLevel.isOn()\n          && options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0\n          ? options.checkGlobalThisLevel\n          : CheckLevel.WARNING;\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, warningLevel);\n    } else {\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..ef3ec0f2 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,15 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+      CheckLevel warningLevel = options.checkGlobalThisLevel.isOn()\n+          && options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0\n+          ? options.checkGlobalThisLevel\n+          : CheckLevel.WARNING;\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, warningLevel);\n+    } else {\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n+    }\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}