{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (var == null) {\n          // This can happen in some cases. For example, when a function is\n          // being compiled and there is a varargs parameter. In that case,\n          // we don't need to check whether the parameter is used.\n          break;\n        }\n\n        if (!referenced.contains(var)) {\n          Node prev = lastArg.getPrevious();\n          argList.removeChild(lastArg);\n          lastArg = prev;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ad275199 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (var == null) {\n+          // This can happen in some cases. For example, when a function is\n+          // being compiled and there is a varargs parameter. In that case,\n+          // we don't need to check whether the parameter is used.\n+          break;\n+        }\n+\n+        if (!referenced.contains(var)) {\n+          Node prev = lastArg.getPrevious();\n+          argList.removeChild(lastArg);\n+          lastArg = prev;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}