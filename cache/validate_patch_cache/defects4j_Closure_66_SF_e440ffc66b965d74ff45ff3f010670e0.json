{
    "patch": "public double getTypedPercent(String[] lines) {\n    double typed = 0;\n    double total = 0;\n    for (String line : lines) {\n        if (!line.isEmpty()) {\n            String[] parts = line.split(\"\\\\s+\");\n            int count = Integer.parseInt(parts[0]);\n            double percent = Double.parseDouble(parts[1].substring(0, parts[1].length() - 1));\n            typed += percent * count;\n            total += count;\n        }\n    }\n    if (total == 0) {\n        return 0;\n    }\n    return typed / total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..1369a0e9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String[] lines) {\n+    double typed = 0;\n+    double total = 0;\n+    for (String line : lines) {\n+        if (!line.isEmpty()) {\n+            String[] parts = line.split(\"\\\\s+\");\n+            int count = Integer.parseInt(parts[0]);\n+            double percent = Double.parseDouble(parts[1].substring(0, parts[1].length() - 1));\n+            typed += percent * count;\n+            total += count;\n+        }\n+    }\n+    if (total == 0) {\n+        return 0;\n+    }\n+    return typed / total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}