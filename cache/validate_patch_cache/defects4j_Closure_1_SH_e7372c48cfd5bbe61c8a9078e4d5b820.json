{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          if (!compiler.getOptions().preserveAllSymbols) {\n            lastArg.detachFromParent();\n            compiler.reportCodeChange();\n          } else {\n            Node name = IR.name(argName);\n            Node defaultValue = lastArg.removeFirstChild();\n            if (defaultValue == null) {\n              defaultValue = IR.number(0);\n            }\n            Node newArg = IR.defaultValue(name, defaultValue);\n            argList.replaceChild(lastArg, newArg);\n            compiler.reportCodeChange();\n          }\n\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b5968a2f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          if (!compiler.getOptions().preserveAllSymbols) {\n+            lastArg.detachFromParent();\n+            compiler.reportCodeChange();\n+          } else {\n+            Node name = IR.name(argName);\n+            Node defaultValue = lastArg.removeFirstChild();\n+            if (defaultValue == null) {\n+              defaultValue = IR.number(0);\n+            }\n+            Node newArg = IR.defaultValue(name, defaultValue);\n+            argList.replaceChild(lastArg, newArg);\n+            compiler.reportCodeChange();\n+          }\n+\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}