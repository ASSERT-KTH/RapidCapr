{
    "patch": "Node callParent = callNode.getParent();\nif (callParent.isAssign()) {\n  Node maybeClassNode = callParent.getParent().getNext();\n  if (maybeClassNode.isClass()) {\n    return false;\n  }\n}\n\n// issue 439: Don't inline singleton getter methods if...\n// 1) ... we can't be sure this is really the singleton definition\n// 2) ... the property is assigned elsewhere\nif (value.isName()) {\n  String name = value.getString();\n  Var inputVar = getCfg().getInputVar();\n  boolean isInputVar = inputVar != null && name.equals(inputVar.getName());\n  if (!isInputVar\n      && !definitionsCausedByCall(currentBlock, name)\n      && hasAncestorInThisScope(initialization.getRValue(), value.getParent())\n      && !doesNotAlias(value, reference)) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..d934a074 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,28 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+Node callParent = callNode.getParent();\n+if (callParent.isAssign()) {\n+  Node maybeClassNode = callParent.getParent().getNext();\n+  if (maybeClassNode.isClass()) {\n+    return false;\n+  }\n+}\n+\n+// issue 439: Don't inline singleton getter methods if...\n+// 1) ... we can't be sure this is really the singleton definition\n+// 2) ... the property is assigned elsewhere\n+if (value.isName()) {\n+  String name = value.getString();\n+  Var inputVar = getCfg().getInputVar();\n+  boolean isInputVar = inputVar != null && name.equals(inputVar.getName());\n+  if (!isInputVar\n+      && !definitionsCausedByCall(currentBlock, name)\n+      && hasAncestorInThisScope(initialization.getRValue(), value.getParent())\n+      && !doesNotAlias(value, reference)) {\n+    return false;\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}