{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double ax = FastMath.abs(v1x);\n    final double ay = FastMath.abs(v1y);\n    final double az = FastMath.abs(v1z);\n    final double bx = FastMath.abs(v2x);\n    final double by = FastMath.abs(v2y);\n    final double bz = FastMath.abs(v2z);\n    final double max = FastMath.max(FastMath.max(ax, ay), az);\n    final double eps = 1e-50;\n    final double eps1 = 1 - eps;\n    double d = 0;\n    double scale = 1;\n    if (bx > max) {\n        scale = eps1 / bx;\n        d = 1 - eps;\n        if (ay > max) {\n            final double ays = scale * ay;\n            d += ays * ays;\n            if (az > max) {\n                final double azs = scale * az;\n                d += azs * azs;\n                return new Vector3D(d * v1x - ays * azs * v2x,\n                                    d * v1y - azs * scale * v2y,\n                                    d * v1z + ays * scale * v2z);\n            } else {\n                return new Vector3D(d * v1x, scale * v2z * v1x - scale * v2y * v1z, scale * v2y * v1y - ays * scale * v2z * v1x);\n            }\n        } else if (az > max) {\n            final double azs = scale * az;\n            d += azs * azs;\n            return new Vector3D(d * v1x - scale * az * v2y, d * v1y - ays * scale * v2z * v1x, d * v1z + ays * scale * v2y);\n        } else {\n            return new Vector3D(scale * v1y * v2z - scale * v1z * v2y, scale * v1z * v2x - scale * v1x * v2z, scale * v1x * v2y - ays * scale * v2x * v1y);\n        }\n    } else if (by > max) {\n        scale = eps1 / by;\n        d = 1 - eps;\n        if (az > max) {\n            final double azs = scale * az;\n            d += azs * azs;\n            if (ax > max) {\n                final double axs = scale * ax;\n                d += axs * axs;\n                return new Vector3D(d * v1y - axs * scale * v2z, d * v1z + axs * scale * v2y, d * v1x - azs * axs * v2y);\n            } else {\n                return new Vector3D(scale * v2z * v1x - scale * v2x * v1z, d * v1y, scale * v2x * v1y - scale * v2z * v1x * ays);\n            }\n        } else if (ax > max) {\n            final double axs = scale * ax;\n            d += axs * axs;\n            return new Vector3D(d * v1y - scale * az * v2x, d * v1z + axs * scale * v2y, d * v1x + scale * az * v2y);\n        } else {\n            return new Vector3D(scale * v1z * v2y - ays * scale * v2z * v1y, scale * v1x * v2z - scale * v1z * v2x, scale * v1y * v2x - scale * v1x * v2y);\n        }\n    } else if (bz > max) {\n        scale = eps1 / bz;\n        d = 1 - eps;\n        if (ax > max) {\n            final double axs = scale * ax;\n            d += axs * axs;\n            if (ay > max) {\n                final double ays = scale * ay;\n                d += ays * ays;\n                return new Vector3D(d * v1z + ays * scale * v2x, d * v1x - ays * axs * v2z, d * v1y + axs * scale * v2z);\n            } else {\n                return new Vector3D(scale * v2y * v1z - scale * v2z * v1y * axs, scale * v2z * v1x - scale * v2x * v1z, d * v1z);\n            }\n        } else if (ay > max) {\n            final double ays = scale * ay;\n            d += ays * ays;\n            return new Vector3D(d * v1z + scale * ay * v2y, d * v1x, d * v1y - scale * ay * v2x);\n        } else {\n            return new Vector3D(scale * v1y * v2z - scale * v1z * v2y, scale * v1z * v2x - scale * v1x * v2z, scale * v1x * v2y - ays * scale * v2x * v1y);\n        }\n    } else {\n        return new Vector3D(v1y * v2z - v1z * v2y, v1z * v2x - v1x * v2z, v1x * v2y - v1y * v2x); \n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..835c7c54c 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,95 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double ax = FastMath.abs(v1x);\n+    final double ay = FastMath.abs(v1y);\n+    final double az = FastMath.abs(v1z);\n+    final double bx = FastMath.abs(v2x);\n+    final double by = FastMath.abs(v2y);\n+    final double bz = FastMath.abs(v2z);\n+    final double max = FastMath.max(FastMath.max(ax, ay), az);\n+    final double eps = 1e-50;\n+    final double eps1 = 1 - eps;\n+    double d = 0;\n+    double scale = 1;\n+    if (bx > max) {\n+        scale = eps1 / bx;\n+        d = 1 - eps;\n+        if (ay > max) {\n+            final double ays = scale * ay;\n+            d += ays * ays;\n+            if (az > max) {\n+                final double azs = scale * az;\n+                d += azs * azs;\n+                return new Vector3D(d * v1x - ays * azs * v2x,\n+                                    d * v1y - azs * scale * v2y,\n+                                    d * v1z + ays * scale * v2z);\n+            } else {\n+                return new Vector3D(d * v1x, scale * v2z * v1x - scale * v2y * v1z, scale * v2y * v1y - ays * scale * v2z * v1x);\n+            }\n+        } else if (az > max) {\n+            final double azs = scale * az;\n+            d += azs * azs;\n+            return new Vector3D(d * v1x - scale * az * v2y, d * v1y - ays * scale * v2z * v1x, d * v1z + ays * scale * v2y);\n+        } else {\n+            return new Vector3D(scale * v1y * v2z - scale * v1z * v2y, scale * v1z * v2x - scale * v1x * v2z, scale * v1x * v2y - ays * scale * v2x * v1y);\n+        }\n+    } else if (by > max) {\n+        scale = eps1 / by;\n+        d = 1 - eps;\n+        if (az > max) {\n+            final double azs = scale * az;\n+            d += azs * azs;\n+            if (ax > max) {\n+                final double axs = scale * ax;\n+                d += axs * axs;\n+                return new Vector3D(d * v1y - axs * scale * v2z, d * v1z + axs * scale * v2y, d * v1x - azs * axs * v2y);\n+            } else {\n+                return new Vector3D(scale * v2z * v1x - scale * v2x * v1z, d * v1y, scale * v2x * v1y - scale * v2z * v1x * ays);\n+            }\n+        } else if (ax > max) {\n+            final double axs = scale * ax;\n+            d += axs * axs;\n+            return new Vector3D(d * v1y - scale * az * v2x, d * v1z + axs * scale * v2y, d * v1x + scale * az * v2y);\n+        } else {\n+            return new Vector3D(scale * v1z * v2y - ays * scale * v2z * v1y, scale * v1x * v2z - scale * v1z * v2x, scale * v1y * v2x - scale * v1x * v2y);\n+        }\n+    } else if (bz > max) {\n+        scale = eps1 / bz;\n+        d = 1 - eps;\n+        if (ax > max) {\n+            final double axs = scale * ax;\n+            d += axs * axs;\n+            if (ay > max) {\n+                final double ays = scale * ay;\n+                d += ays * ays;\n+                return new Vector3D(d * v1z + ays * scale * v2x, d * v1x - ays * axs * v2z, d * v1y + axs * scale * v2z);\n+            } else {\n+                return new Vector3D(scale * v2y * v1z - scale * v2z * v1y * axs, scale * v2z * v1x - scale * v2x * v1z, d * v1z);\n+            }\n+        } else if (ay > max) {\n+            final double ays = scale * ay;\n+            d += ays * ays;\n+            return new Vector3D(d * v1z + scale * ay * v2y, d * v1x, d * v1y - scale * ay * v2x);\n+        } else {\n+            return new Vector3D(scale * v1y * v2z - scale * v1z * v2y, scale * v1z * v2x - scale * v1x * v2z, scale * v1x * v2y - ays * scale * v2x * v1y);\n+        }\n+    } else {\n+        return new Vector3D(v1y * v2z - v1z * v2y, v1z * v2x - v1x * v2z, v1x * v2y - v1y * v2x); \n+    }\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}