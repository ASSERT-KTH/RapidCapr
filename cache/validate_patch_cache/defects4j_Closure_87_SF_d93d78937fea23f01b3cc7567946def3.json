{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n        return false;\n    }\n    Node child = n.getFirstChild();\n\n    if (!NodeUtil.isExpressionNode(child)) {\n        return false;\n    }\n    // Check if child is an EXPR_RESULT node\n    if (child.getType() == Token.EXPR_RESULT) {\n        Node expr = child.getFirstChild();\n\n        // Skip over any leading CASTs\n        while (expr.getType() == Token.CAST) {\n            expr = expr.getFirstChild();\n        }\n        \n        // Traverse the expression tree and check if it is foldable\n        switch (expr.getType()) {\n            case Token.NAME:\n            case Token.THIS:\n            case Token.TRUE:\n            case Token.FALSE:\n            case Token.NULL:\n                return true;\n            case Token.NUMBER:\n            case Token.STRING:\n                return !NodeUtil.mayHaveSideEffects(expr);\n            case Token.CALL:\n            case Token.NEW:\n            case Token.REGEXP:\n                return false;\n            case Token.GETPROP:\n                // Recurse to check if the GETPROP's child is foldable\n                return isFoldableExpressBlock(expr);\n            case Token.HOOK:\n                // Recurse to check if both subexpressions are foldable\n                Node trueExpr = expr.getNext();\n                Node falseExpr = trueExpr.getNext();\n                return isFoldableExpressBlock(trueExpr) && isFoldableExpressBlock(falseExpr);\n            case Token.AND:\n            case Token.OR:\n                // Recurse to check if both subexpressions are foldable\n                Node left = expr.getFirstChild();\n                Node right = left.getNext();\n                return isFoldableExpressBlock(left) && isFoldableExpressBlock(right);\n            case Token.COMMA:\n                // Recurse to check if the last expression is foldable\n                while (expr.getNext().getType() == Token.COMMA) {\n                    expr = expr.getNext();\n                }\n                return isFoldableExpressBlock(expr.getNext());\n            case Token.NOT:\n            case Token.BITNOT:\n            case Token.POS:\n            case Token.NEG:\n                // Recurse to check if the single subexpression is foldable\n                return isFoldableExpressBlock(expr.getFirstChild());\n            case Token.VOID:\n                return false;\n            default:\n                // Check if the operator has side effects\n                return !NodeUtil.mayHaveSideEffects(expr);\n        }\n    }\n    return NodeUtil.isExpressionNode(child);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..5cea30b2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,24 +517,72 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+    if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+        return false;\n     }\n+    Node child = n.getFirstChild();\n \n-    return false;\n+    if (!NodeUtil.isExpressionNode(child)) {\n+        return false;\n+    }\n+    // Check if child is an EXPR_RESULT node\n+    if (child.getType() == Token.EXPR_RESULT) {\n+        Node expr = child.getFirstChild();\n+\n+        // Skip over any leading CASTs\n+        while (expr.getType() == Token.CAST) {\n+            expr = expr.getFirstChild();\n+        }\n+        \n+        // Traverse the expression tree and check if it is foldable\n+        switch (expr.getType()) {\n+            case Token.NAME:\n+            case Token.THIS:\n+            case Token.TRUE:\n+            case Token.FALSE:\n+            case Token.NULL:\n+                return true;\n+            case Token.NUMBER:\n+            case Token.STRING:\n+                return !NodeUtil.mayHaveSideEffects(expr);\n+            case Token.CALL:\n+            case Token.NEW:\n+            case Token.REGEXP:\n+                return false;\n+            case Token.GETPROP:\n+                // Recurse to check if the GETPROP's child is foldable\n+                return isFoldableExpressBlock(expr);\n+            case Token.HOOK:\n+                // Recurse to check if both subexpressions are foldable\n+                Node trueExpr = expr.getNext();\n+                Node falseExpr = trueExpr.getNext();\n+                return isFoldableExpressBlock(trueExpr) && isFoldableExpressBlock(falseExpr);\n+            case Token.AND:\n+            case Token.OR:\n+                // Recurse to check if both subexpressions are foldable\n+                Node left = expr.getFirstChild();\n+                Node right = left.getNext();\n+                return isFoldableExpressBlock(left) && isFoldableExpressBlock(right);\n+            case Token.COMMA:\n+                // Recurse to check if the last expression is foldable\n+                while (expr.getNext().getType() == Token.COMMA) {\n+                    expr = expr.getNext();\n+                }\n+                return isFoldableExpressBlock(expr.getNext());\n+            case Token.NOT:\n+            case Token.BITNOT:\n+            case Token.POS:\n+            case Token.NEG:\n+                // Recurse to check if the single subexpression is foldable\n+                return isFoldableExpressBlock(expr.getFirstChild());\n+            case Token.VOID:\n+                return false;\n+            default:\n+                // Check if the operator has side effects\n+                return !NodeUtil.mayHaveSideEffects(expr);\n+        }\n+    }\n+    return NodeUtil.isExpressionNode(child);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}