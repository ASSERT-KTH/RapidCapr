{
    "patch": "if (lastChar == 'l' || lastChar == 'L') {\n    // Requesting a specific type..\n    String numeric = str.substring(0, str.length() - 1);\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    // Remove any negative sign from numeric before checking isDigits\n    if (numeric.startsWith(\"-\")) {\n        numeric = numeric.substring(1);\n    }\n    // Check if the remaining string is a valid numeric\n    if (isDigits(numeric)) {\n        try {\n            // If it's within Long range, return a long\n            return createLong(str);\n        } catch (NumberFormatException e) {\n            // Ignore the exception and try to create a BigInteger\n        }\n        // If it's too big for a long, return a BigInteger\n        return createBigInteger(str);\n\n    } else {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..b2f7d771 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,29 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (lastChar == 'l' || lastChar == 'L') {\n+    // Requesting a specific type..\n+    String numeric = str.substring(0, str.length() - 1);\n+    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    // Remove any negative sign from numeric before checking isDigits\n+    if (numeric.startsWith(\"-\")) {\n+        numeric = numeric.substring(1);\n+    }\n+    // Check if the remaining string is a valid numeric\n+    if (isDigits(numeric)) {\n+        try {\n+            // If it's within Long range, return a long\n+            return createLong(str);\n+        } catch (NumberFormatException e) {\n+            // Ignore the exception and try to create a BigInteger\n+        }\n+        // If it's too big for a long, return a BigInteger\n+        return createBigInteger(str);\n+\n+    } else {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+}\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}