{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        if (mock instanceof Factory) {\n            try {\n                Method method = Factory.class.getDeclaredMethod(\"getCallbacks\");\n                method.setAccessible(true);\n                Object[] callbacks = (Object[]) method.invoke(mock);\n                for (int i = 0; i < callbacks.length; i++) {\n                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n                        MockHandlerInterface<T> mockHandler = ((MethodInterceptorFilter) callbacks[i]).getHandler();\n                        if (mockHandler instanceof MockHandler<T>) {\n                            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n                            ((Factory) mock).setCallback(i, newFilter);\n                            return;\n                        }\n                    }\n                }\n            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n                e.printStackTrace();\n            }\n        }\n        throw new RuntimeException(\"Unsupported mock object!\");\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..1be41c51b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        if (mock instanceof Factory) {\n+            try {\n+                Method method = Factory.class.getDeclaredMethod(\"getCallbacks\");\n+                method.setAccessible(true);\n+                Object[] callbacks = (Object[]) method.invoke(mock);\n+                for (int i = 0; i < callbacks.length; i++) {\n+                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                        MockHandlerInterface<T> mockHandler = ((MethodInterceptorFilter) callbacks[i]).getHandler();\n+                        if (mockHandler instanceof MockHandler<T>) {\n+                            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n+                            ((Factory) mock).setCallback(i, newFilter);\n+                            return;\n+                        }\n+                    }\n+                }\n+            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        throw new RuntimeException(\"Unsupported mock object!\");\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}