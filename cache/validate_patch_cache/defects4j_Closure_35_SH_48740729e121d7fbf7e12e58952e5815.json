{
    "patch": "    if (type.isStruct()) {\n      // A struct is like an anonymous record type with some extra properties. Copy all the\n      // properties over.\n      JSType structure = invertStructure(constraint);\n      ObjectType objType = ObjectType.cast(structure.restrictByNotNullOrUndefined());\n\n      for (String prop : objType.getOwnPropertyNames()) {\n        JSType propType = objType.getPropertyType(prop);\n        if (!type.hasProperty(prop)) {\n          type.defineInferredProperty(prop, propType, null);\n        } else {\n          // This fixes a bug. If the type already has a declared property with this\n          // name, we don't want to overwrite the existing type; we just want to make\n          // sure it's consistent with this evaluation.\n          JSType knownType = type.getPropertyType(prop);\n          type.setPropertyType(prop, knownType.getLeastSupertype(propType));\n        }\n      }\n    } else if (constraintObj != null && constraintObj.isRecordType() && type.isObject()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            objType.defineInferredProperty(prop, propType, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..7cd56742 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,36 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (type.isStruct()) {\n+      // A struct is like an anonymous record type with some extra properties. Copy all the\n+      // properties over.\n+      JSType structure = invertStructure(constraint);\n+      ObjectType objType = ObjectType.cast(structure.restrictByNotNullOrUndefined());\n+\n+      for (String prop : objType.getOwnPropertyNames()) {\n+        JSType propType = objType.getPropertyType(prop);\n+        if (!type.hasProperty(prop)) {\n+          type.defineInferredProperty(prop, propType, null);\n+        } else {\n+          // This fixes a bug. If the type already has a declared property with this\n+          // name, we don't want to overwrite the existing type; we just want to make\n+          // sure it's consistent with this evaluation.\n+          JSType knownType = type.getPropertyType(prop);\n+          type.setPropertyType(prop, knownType.getLeastSupertype(propType));\n+        }\n+      }\n+    } else if (constraintObj != null && constraintObj.isRecordType() && type.isObject()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!objType.hasProperty(prop)) {\n+            objType.defineInferredProperty(prop, propType, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}