{
    "patch": "if (len >= 2) {\n    int index = str.indexOf('_');\n    // language only\n    if (index == -1) {\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else if (len == 3) {\n            // length-3 locale codes are deprecated, but still allowed\n            return new Locale(str, \"\");\n        } else if (len >= 4 && (str.charAt(2) == '+' || str.charAt(2) == '-')) {\n            // handle script-only locales\n            int index2 = str.indexOf('_', 3);\n            if (index2 > -1) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            } else {\n                return new Locale.Builder().setLanguageTag(str).build();\n            }\n        } else if (len >= 7) {\n            // handle POSIX\n            if (str.charAt(2) == 'P' && str.charAt(3) == 'O' && str.charAt(4) == 'S' && str.charAt(5) == 'I' &&\n                    str.charAt(6) == 'X') {\n                if (len == 7) {\n                    return Locale.ROOT;\n                } else {\n                    if (str.charAt(7) == '_') {\n                        return new Locale.Builder().setLanguageTag(str).build();\n                    } else {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                }\n            } else {\n                return new Locale.Builder().setLanguageTag(str).build();\n            }\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    // language and country\n    } else if (index == len - 3) {\n        char ch1 = str.charAt(index + 1);\n        char ch2 = str.charAt(index + 2);\n        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, index), str.substring(index + 1), \"\");\n    // language, country, and variant\n    } else if (index >= 4) {\n        char ch1 = str.charAt(index + 1);\n        char ch2 = str.charAt(index + 2);\n        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        int index2 = str.indexOf('_', index + 3);\n        if (index2 == -1) {\n            return new Locale(str.substring(0, index), str.substring(index + 1), str.substring(index + 3));\n        } else {\n            return new Locale(str.substring(0, index), str.substring(index + 1, index2), str.substring(index2 + 1));\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..c2fcf6fd 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,67 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+if (len >= 2) {\n+    int index = str.indexOf('_');\n+    // language only\n+    if (index == -1) {\n+        if (len == 2) {\n+            return new Locale(str, \"\");\n+        } else if (len == 3) {\n+            // length-3 locale codes are deprecated, but still allowed\n+            return new Locale(str, \"\");\n+        } else if (len >= 4 && (str.charAt(2) == '+' || str.charAt(2) == '-')) {\n+            // handle script-only locales\n+            int index2 = str.indexOf('_', 3);\n+            if (index2 > -1) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            } else {\n+                return new Locale.Builder().setLanguageTag(str).build();\n+            }\n+        } else if (len >= 7) {\n+            // handle POSIX\n+            if (str.charAt(2) == 'P' && str.charAt(3) == 'O' && str.charAt(4) == 'S' && str.charAt(5) == 'I' &&\n+                    str.charAt(6) == 'X') {\n+                if (len == 7) {\n+                    return Locale.ROOT;\n+                } else {\n+                    if (str.charAt(7) == '_') {\n+                        return new Locale.Builder().setLanguageTag(str).build();\n+                    } else {\n+                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                    }\n+                }\n+            } else {\n+                return new Locale.Builder().setLanguageTag(str).build();\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+    // language and country\n+    } else if (index == len - 3) {\n+        char ch1 = str.charAt(index + 1);\n+        char ch2 = str.charAt(index + 2);\n+        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(str.substring(0, index), str.substring(index + 1), \"\");\n+    // language, country, and variant\n+    } else if (index >= 4) {\n+        char ch1 = str.charAt(index + 1);\n+        char ch2 = str.charAt(index + 2);\n+        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        int index2 = str.indexOf('_', index + 3);\n+        if (index2 == -1) {\n+            return new Locale(str.substring(0, index), str.substring(index + 1), str.substring(index + 3));\n+        } else {\n+            return new Locale(str.substring(0, index), str.substring(index + 1, index2), str.substring(index2 + 1));\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+}\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);",
    "result_reason": "error: variable ch1 is already defined in method toLocale(String)",
    "test_result": "ERROR"
}