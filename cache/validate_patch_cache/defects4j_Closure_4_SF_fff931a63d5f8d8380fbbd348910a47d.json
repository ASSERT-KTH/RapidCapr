{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolved = resolveViaRegistry(t, enclosing);\n  boolean propertiesResolved = false;\n\n  // Keep track of previously resolved types to detect cycle.\n  List<JSType> typesResolvedViaRegistry = new ArrayList<JSType>();\n  typesResolvedViaRegistry.add(this);\n\n  while (!resolved && !propertiesResolved) {\n    // If registry resolution failed, try using properties.\n    resolveViaProperties(t, enclosing);\n    propertiesResolved = isResolved();\n\n    // If properties resolution failed, try using registry again.\n    if (!propertiesResolved) {\n      super.resolveInternal(t, enclosing);\n      resolved = resolveViaRegistry(t, enclosing);\n\n      if (resolved) {\n        // Detect cycle only after successful registry resolution.\n        if (typesResolvedViaRegistry.contains(this)) {\n          handleTypeCycle(t);\n          resolved = false;\n        } else {\n          typesResolvedViaRegistry.add(this);\n        }\n      }\n    }\n  }\n\n  if (isResolved()) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..e1d41034 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,44 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n+  boolean propertiesResolved = false;\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  // Keep track of previously resolved types to detect cycle.\n+  List<JSType> typesResolvedViaRegistry = new ArrayList<JSType>();\n+  typesResolvedViaRegistry.add(this);\n \n+  while (!resolved && !propertiesResolved) {\n+    // If registry resolution failed, try using properties.\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    propertiesResolved = isResolved();\n+\n+    // If properties resolution failed, try using registry again.\n+    if (!propertiesResolved) {\n+      super.resolveInternal(t, enclosing);\n+      resolved = resolveViaRegistry(t, enclosing);\n+\n+      if (resolved) {\n+        // Detect cycle only after successful registry resolution.\n+        if (typesResolvedViaRegistry.contains(this)) {\n+          handleTypeCycle(t);\n+          resolved = false;\n+        } else {\n+          typesResolvedViaRegistry.add(this);\n+        }\n+      }\n     }\n+  }\n \n+  if (isResolved()) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n   }\n \n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}