{
    "patch": "public class StringUtils {\n  \n  public static boolean containsAny(final CharSequence seq, final char... searchChars) {\n    if (isEmpty(seq) || ArrayUtils.isEmpty(searchChars)) {\n      return false;\n    }\n    final int strLength = seq.length();\n    final int searchCharsLength = searchChars.length;\n    final int searchCharsLengthRight = searchCharsLength - 1;\n    for (int i = 0; i < strLength; i++) {\n      final char ch = seq.charAt(i);\n      if (isHighSurrogate(ch) && i < searchCharsLengthRight) {\n        final char ch2 = seq.charAt(i + 1);\n        if (isLowSurrogate(ch2)) {\n          final int codePoint = toCodePoint(ch, ch2);\n          for (final char searchChar : searchChars) {\n            if (searchChar == codePoint) {\n              return true;\n            }\n          }\n        }\n      } else {\n        for (final char searchChar : searchChars) {\n          if (searchChar == ch) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isHighSurrogate(final char ch) {\n    return ch >= MIN_HIGH_SURROGATE && ch <= MAX_HIGH_SURROGATE;\n  }\n\n  private static boolean isLowSurrogate(final char ch) {\n    return ch >= MIN_LOW_SURROGATE && ch <= MAX_LOW_SURROGATE;\n  }\n\n  private static int toCodePoint(final char high, final char low) {\n    return ((high - MIN_HIGH_SURROGATE) << HALF_SHIFT) + (low - MIN_LOW_SURROGATE) + MIN_SUPPLEMENTARY_CODE_POINT;\n  }\n\n  // Empty checks\n  //-----------------------------------------------------------------------\n  public static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n  }\n\n  private static final char MIN_HIGH_SURROGATE = '\\uD800';\n  private static final char MAX_HIGH_SURROGATE = '\\uDBFF';\n  private static final char MIN_LOW_SURROGATE = '\\uDC00';\n  private static final char MAX_LOW_SURROGATE = '\\uDFFF';\n  private static final int MIN_SUPPLEMENTARY_CODE_POINT = 0x010000;\n  private static final int HALF_SHIFT = 10;\n  private static final int SURROGATE_OFFSET = Character.MIN_SUPPLEMENTARY_CODE_POINT\n      - (MIN_HIGH_SURROGATE << HALF_SHIFT) - MIN_LOW_SURROGATE;\n  \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..17a7a166 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,66 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+  \n+  public static boolean containsAny(final CharSequence seq, final char... searchChars) {\n+    if (isEmpty(seq) || ArrayUtils.isEmpty(searchChars)) {\n+      return false;\n+    }\n+    final int strLength = seq.length();\n+    final int searchCharsLength = searchChars.length;\n+    final int searchCharsLengthRight = searchCharsLength - 1;\n+    for (int i = 0; i < strLength; i++) {\n+      final char ch = seq.charAt(i);\n+      if (isHighSurrogate(ch) && i < searchCharsLengthRight) {\n+        final char ch2 = seq.charAt(i + 1);\n+        if (isLowSurrogate(ch2)) {\n+          final int codePoint = toCodePoint(ch, ch2);\n+          for (final char searchChar : searchChars) {\n+            if (searchChar == codePoint) {\n+              return true;\n+            }\n+          }\n+        }\n+      } else {\n+        for (final char searchChar : searchChars) {\n+          if (searchChar == ch) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isHighSurrogate(final char ch) {\n+    return ch >= MIN_HIGH_SURROGATE && ch <= MAX_HIGH_SURROGATE;\n+  }\n+\n+  private static boolean isLowSurrogate(final char ch) {\n+    return ch >= MIN_LOW_SURROGATE && ch <= MAX_LOW_SURROGATE;\n+  }\n+\n+  private static int toCodePoint(final char high, final char low) {\n+    return ((high - MIN_HIGH_SURROGATE) << HALF_SHIFT) + (low - MIN_LOW_SURROGATE) + MIN_SUPPLEMENTARY_CODE_POINT;\n+  }\n+\n+  // Empty checks\n+  //-----------------------------------------------------------------------\n+  public static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+  }\n+\n+  private static final char MIN_HIGH_SURROGATE = '\\uD800';\n+  private static final char MAX_HIGH_SURROGATE = '\\uDBFF';\n+  private static final char MIN_LOW_SURROGATE = '\\uDC00';\n+  private static final char MAX_LOW_SURROGATE = '\\uDFFF';\n+  private static final int MIN_SUPPLEMENTARY_CODE_POINT = 0x010000;\n+  private static final int HALF_SHIFT = 10;\n+  private static final int SURROGATE_OFFSET = Character.MIN_SUPPLEMENTARY_CODE_POINT\n+      - (MIN_HIGH_SURROGATE << HALF_SHIFT) - MIN_LOW_SURROGATE;\n+  \n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}