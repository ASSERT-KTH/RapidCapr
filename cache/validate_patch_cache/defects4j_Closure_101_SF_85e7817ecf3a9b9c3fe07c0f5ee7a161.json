{
    "patch": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    }\n\n    try {\n      initOptionsFromFlags(options);\n    } catch (Exception e) {\n      // log any caught exceptions\n      System.err.println(\"Error initializing options from flags: \" + e.getMessage());\n    }\n\n    return options;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..80cdecba 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -434,7 +434,13 @@ public class CommandLineRunner extends\n       options.closurePass = true;\n     }\n \n-    initOptionsFromFlags(options);\n+    try {\n+      initOptionsFromFlags(options);\n+    } catch (Exception e) {\n+      // log any caught exceptions\n+      System.err.println(\"Error initializing options from flags: \" + e.getMessage());\n+    }\n+\n     return options;\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}