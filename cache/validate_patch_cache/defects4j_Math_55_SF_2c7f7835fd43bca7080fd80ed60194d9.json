{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double x1 = v1.getX();\n      final double y1 = v1.getY();\n      final double z1 = v1.getZ();\n      final double x2 = v2.getX();\n      final double y2 = v2.getY();\n      final double z2 = v2.getZ();\n\n      final double a = y1 * z2 - z1 * y2;\n      final double b = z1 * x2 - x1 * z2;\n      final double c = x1 * y2 - y1 * x2;\n\n      // normalize the cross product vector\n      final double squaredNorm = a * a + b * b + c * c;\n      final double norm = Math.sqrt(squaredNorm);\n\n      final double epsilon = Math.ulp(norm); // Machine epsilon times a scale factor\n      \n      if (norm > epsilon) {\n          return new Vector3D(a / norm, b / norm, c / norm);\n      }\n      // In case the cross product is very small, return the vector with max length component\n      if (Math.abs(x1) >= Math.abs(y1) && Math.abs(x1) >= Math.abs(z1)) {\n          return new Vector3D(0.0, z1, - y1).normalize();\n      } else if (Math.abs(y1) >= Math.abs(z1)) {\n          return new Vector3D(-z1, 0.0, x1).normalize();\n      } else {\n          return new Vector3D(y1, -x1, 0.0).normalize();\n      }\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..87adb4676 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,22 +456,34 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n+      final double x1 = v1.getX();\n+      final double y1 = v1.getY();\n+      final double z1 = v1.getZ();\n+      final double x2 = v2.getX();\n+      final double y2 = v2.getY();\n+      final double z2 = v2.getZ();\n+\n+      final double a = y1 * z2 - z1 * y2;\n+      final double b = z1 * x2 - x1 * z2;\n+      final double c = x1 * y2 - y1 * x2;\n+\n+      // normalize the cross product vector\n+      final double squaredNorm = a * a + b * b + c * c;\n+      final double norm = Math.sqrt(squaredNorm);\n+\n+      final double epsilon = Math.ulp(norm); // Machine epsilon times a scale factor\n+      \n+      if (norm > epsilon) {\n+          return new Vector3D(a / norm, b / norm, c / norm);\n+      }\n+      // In case the cross product is very small, return the vector with max length component\n+      if (Math.abs(x1) >= Math.abs(y1) && Math.abs(x1) >= Math.abs(z1)) {\n+          return new Vector3D(0.0, z1, - y1).normalize();\n+      } else if (Math.abs(y1) >= Math.abs(z1)) {\n+          return new Vector3D(-z1, 0.0, x1).normalize();\n+      } else {\n+          return new Vector3D(y1, -x1, 0.0).normalize();\n+      }\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.28603877677367767>",
    "test_result": "FAIL"
}