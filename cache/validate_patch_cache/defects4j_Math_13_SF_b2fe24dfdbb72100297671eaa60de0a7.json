{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenvalues = dec.getD();\n    RealMatrix scaledEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n    for (int i = 0; i < eigenvalues.getRowDimension(); i++) {\n        double entry = eigenvalues.getEntry(i, i);\n        if (entry > 0) {\n            scaledEigenvalues.setEntry(i, i, Math.sqrt(entry));\n        } else if (entry < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n    }\n    RealMatrix eigenvectors = dec.getV();\n    RealMatrix scaledEigenvectors = eigenvectors.multiply(scaledEigenvalues).multiply(eigenvectors.transpose());\n    return scaledEigenvectors;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9c69eff64 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenvalues = dec.getD();\n+    RealMatrix scaledEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n+    for (int i = 0; i < eigenvalues.getRowDimension(); i++) {\n+        double entry = eigenvalues.getEntry(i, i);\n+        if (entry > 0) {\n+            scaledEigenvalues.setEntry(i, i, Math.sqrt(entry));\n+        } else if (entry < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n     }\n+    RealMatrix eigenvectors = dec.getV();\n+    RealMatrix scaledEigenvectors = eigenvectors.multiply(scaledEigenvalues).multiply(eigenvectors.transpose());\n+    return scaledEigenvectors;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}