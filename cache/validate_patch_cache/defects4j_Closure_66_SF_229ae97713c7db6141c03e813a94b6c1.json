{
    "patch": "public static double getTypedPercent(String json) {\n    double count = 0.0;\n    double typedCount = 0.0;\n    try {\n        JSONObject obj = new JSONObject(json);\n        if (obj.has(\"values\")) {\n            JSONArray arr = obj.getJSONArray(\"values\");\n            for (int i = 0; i < arr.length(); i++) {\n                JSONObject valObj = arr.getJSONObject(i);\n                Object val = valObj.get(\"value\");\n                if (val != null) {\n                    count += 1.0;\n                    if (val instanceof Number || val instanceof Boolean) {\n                        typedCount += 1.0;\n                    }\n                }\n            }\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return (count > 0) ? (typedCount / count) * 100.0 : 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6ecd3adf 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    double count = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JSONObject obj = new JSONObject(json);\n+        if (obj.has(\"values\")) {\n+            JSONArray arr = obj.getJSONArray(\"values\");\n+            for (int i = 0; i < arr.length(); i++) {\n+                JSONObject valObj = arr.getJSONObject(i);\n+                Object val = valObj.get(\"value\");\n+                if (val != null) {\n+                    count += 1.0;\n+                    if (val instanceof Number || val instanceof Boolean) {\n+                        typedCount += 1.0;\n+                    }\n+                }\n+            }\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return (count > 0) ? (typedCount / count) * 100.0 : 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}