{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers && argList.hasChildren()) {\n    Node firstArg = argList.getFirstChild();\n    Var var = fnScope.getVar(firstArg.getString());\n    \n    // check whether the first argument is unreferenced\n    if (!referenced.contains(var)) {  \n        // Remove the first argument, then remove other unreferenced parameters\n        argList.removeChild(firstArg);\n        compiler.reportCodeChange();\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else {\n        // if the first arg is referenced, then check the other arguments\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n\n        // Remove extra args from the front\n        while ((firstArg = argList.getFirstChild()) != null &&\n                !(var = fnScope.getVar(firstArg.getString())).isParam()) {\n            argList.removeChild(firstArg);\n            compiler.reportCodeChange();\n        }\n    }\n} else if (modifyCallers) {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c757add2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,57 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers && argList.hasChildren()) {\n+    Node firstArg = argList.getFirstChild();\n+    Var var = fnScope.getVar(firstArg.getString());\n+    \n+    // check whether the first argument is unreferenced\n+    if (!referenced.contains(var)) {  \n+        // Remove the first argument, then remove other unreferenced parameters\n+        argList.removeChild(firstArg);\n+        compiler.reportCodeChange();\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+            var = fnScope.getVar(lastArg.getString());\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n+        }\n+    } else {\n+        // if the first arg is referenced, then check the other arguments\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+            var = fnScope.getVar(lastArg.getString());\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        // Remove extra args from the front\n+        while ((firstArg = argList.getFirstChild()) != null &&\n+                !(var = fnScope.getVar(firstArg.getString())).isParam()) {\n+            argList.removeChild(firstArg);\n+            compiler.reportCodeChange();\n+        }\n+    }\n+} else if (modifyCallers) {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}