{
    "patch": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    } else {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          CheckLevel.OFF);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List<String> groups = getDiagnosticGroups().getRegisteredGroups();\n    List<WarningsGuard> guards = Lists.newArrayList(\n        new SuppressDocWarningsGuard(groups),\n        options.getWarningsGuard());\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    // Only perform this check if checkGlobalThis is enabled.\n    if (options.checkGlobalThis) {\n      CheckGlobalThis checkGlobalThis = new CheckGlobalThis(getAbstractCompiler(), true);\n      checkGlobalThis.process(getExternsRoot());\n      checkGlobalThis.process(getJsRoot());\n      setCheckGlobalThis(true);\n    }\n\n    this.warningsGuard = composedGuards;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..e6b00c40 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,6 +256,10 @@ public class Compiler extends AbstractCompiler {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);\n+    } else {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          CheckLevel.OFF);\n     }\n \n     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n@@ -265,12 +269,10 @@ public class Compiler extends AbstractCompiler {\n     }\n \n     // Initialize the warnings guard.\n-    List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n-    guards.add(options.getWarningsGuard());\n-\n+    List<String> groups = getDiagnosticGroups().getRegisteredGroups();\n+    List<WarningsGuard> guards = Lists.newArrayList(\n+        new SuppressDocWarningsGuard(groups),\n+        options.getWarningsGuard());\n     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n \n     // All passes must run the variable check. This synthesizes\n@@ -284,6 +286,14 @@ public class Compiler extends AbstractCompiler {\n           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n \n+    // Only perform this check if checkGlobalThis is enabled.\n+    if (options.checkGlobalThis) {\n+      CheckGlobalThis checkGlobalThis = new CheckGlobalThis(getAbstractCompiler(), true);\n+      checkGlobalThis.process(getExternsRoot());\n+      checkGlobalThis.process(getJsRoot());\n+      setCheckGlobalThis(true);\n+    }\n+\n     this.warningsGuard = composedGuards;\n   }\n ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}