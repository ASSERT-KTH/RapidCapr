{
    "patch": "      Node fnNameNode = NodeUtil.getFunctionNameNode(n);\n      if (fnNameNode != null && NodeUtil.isGet(fnNameNode)) {\n        Node getLhs = fnNameNode.getFirstChild();\n        if (getLhs.getType() == Token.GETPROP &&\n            getLhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = getLhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9d92ca48 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = NodeUtil.getFunctionNameNode(n);\n+      if (fnNameNode != null && NodeUtil.isGet(fnNameNode)) {\n+        Node getLhs = fnNameNode.getFirstChild();\n+        if (getLhs.getType() == Token.GETPROP &&\n+            getLhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node llhs = getLhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}