{
    "patch": "public JSType caseObjectType(ObjectType type) {\n  if (value.equals(\"function\")) {\n    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n    return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n    // Only filter out subtypes of \"function\"\n  }\n  ImmutableSet<String> propertyNames = type.getOwnPropertyNames();\n  boolean hasCallMethod = propertyNames.contains(\"call\") && type.getPropertyType(\"call\").isFunctionType();\n  boolean hasApplyMethod = propertyNames.contains(\"apply\")\n      && type.getPropertyType(\"apply\").isFunctionType();\n  if (hasCallMethod && !hasApplyMethod && matchesExpectation(\"function\")) {\n    return JSTypeNative.FUNCTION_TYPE;\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..74a04889 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,21 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n-    }\n+public JSType caseObjectType(ObjectType type) {\n+  if (value.equals(\"function\")) {\n+    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n+    return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n+    // Only filter out subtypes of \"function\"\n+  }\n+  ImmutableSet<String> propertyNames = type.getOwnPropertyNames();\n+  boolean hasCallMethod = propertyNames.contains(\"call\") && type.getPropertyType(\"call\").isFunctionType();\n+  boolean hasApplyMethod = propertyNames.contains(\"apply\")\n+      && type.getPropertyType(\"apply\").isFunctionType();\n+  if (hasCallMethod && !hasApplyMethod && matchesExpectation(\"function\")) {\n+    return JSTypeNative.FUNCTION_TYPE;\n+  }\n+  return null;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}