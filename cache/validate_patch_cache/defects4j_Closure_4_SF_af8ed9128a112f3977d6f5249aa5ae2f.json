{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  Set<JSType> visitedTypes = new HashSet<>();\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  visitedTypes.add(this);\n  if (resolvedViaRegistry) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }\n  boolean cycleDetected = detectImplicitPrototypeCycle();\n  while (cycleDetected || !isResolved()) {\n    if (visitedTypes.contains(this)) {\n      // We have already visited this type before, so we cannot resolve it.\n      return this;\n    }\n    visitedTypes.add(this);\n    if (cycleDetected) {\n      handleTypeCycle(t);\n      resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n      if (resolvedViaRegistry) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ?\n            getReferencedType() : this;\n      }\n      cycleDetected = detectImplicitPrototypeCycle();\n    }\n    resolveViaProperties(t, enclosing);\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    if (isResolved()) {\n      break;\n    }\n    cycleDetected = detectImplicitPrototypeCycle();\n  }\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..b47bdc00 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,44 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  Set<JSType> visitedTypes = new HashSet<>();\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  visitedTypes.add(this);\n+  if (resolvedViaRegistry) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ?\n+        getReferencedType() : this;\n+  }\n+  boolean cycleDetected = detectImplicitPrototypeCycle();\n+  while (cycleDetected || !isResolved()) {\n+    if (visitedTypes.contains(this)) {\n+      // We have already visited this type before, so we cannot resolve it.\n+      return this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    visitedTypes.add(this);\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n+      resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+      if (resolvedViaRegistry) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ?\n+            getReferencedType() : this;\n+      }\n+      cycleDetected = detectImplicitPrototypeCycle();\n     }\n-\n+    resolveViaProperties(t, enclosing);\n     super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+      break;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    cycleDetected = detectImplicitPrototypeCycle();\n   }\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}