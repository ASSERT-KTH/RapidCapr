{
    "patch": "if (lastChar == 'f' || lastChar == 'F' ||\n                lastChar == 'd' || lastChar == 'D' ||\n                lastChar == 'l' || lastChar == 'L') {\n\n                String numeric = str.substring(0, str.length() - 1);\n                boolean validNumeric = true;\n                if(numeric.startsWith(\"-\")) {\n                    String numericSubstring = numeric.substring(1);\n                    validNumeric = !(numericSubstring.isEmpty() || !StringUtils.isNumeric(numericSubstring));\n                } else {\n                    validNumeric = !(numeric.isEmpty() || !StringUtils.isNumeric(numeric));\n                }\n\n                if(validNumeric) {\n                    switch (lastChar) {\n                        case 'l': \n                        case 'L': \n                            try {\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) {\n                                //Too big for a long\n                            }\n                            return createBigInteger(numeric);\n\n                        case 'f': \n                        case 'F': \n                            try {\n                                Float f = createFloat(numeric);\n                                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(mant)))) {\n                                    return f;\n                                }\n                            } catch (NumberFormatException nfe) {\n                                // ignore the bad number\n                            }\n                            //Fall through\n                        case 'd': \n                        case 'D': \n                            try {\n                                Double d = createDouble(numeric);\n                                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(mant)))) {\n                                    return d;\n                                }\n                            } catch (NumberFormatException nfe) {\n                                // ignore the bad number\n                            }\n                            try {\n                                return createBigDecimal(numeric);\n                            } catch (NumberFormatException e) {\n                                // ignore the bad number\n                            }\n                            //Fall through\n                        default: \n                            throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                } else {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            } else {\n                //User doesn't have a preference on the return type, so let's start\n                //small and go from there...\n                String numeric = str;\n                boolean validNumeric = true;\n                if(numeric.startsWith(\"-\")) {\n                    String numericSubstring = numeric.substring(1);\n                    validNumeric = !(numericSubstring.isEmpty() || !StringUtils.isNumeric(numericSubstring));\n                } else {\n                    validNumeric = !(numeric.isEmpty() || !StringUtils.isNumeric(numeric));\n                }\n\n                if(validNumeric) {\n                    if (expPos > -1 && expPos < str.length() - 1) {\n                        exp = str.substring(expPos + 1, str.length());\n                    } else {\n                        exp = null;\n                    }\n                    if (dec == null && exp == null) {\n                        //Must be an int,long,bigint\n                        try {\n                            return createInteger(str);\n                        } catch (NumberFormatException nfe) {\n                            // ignore the bad number\n                        }\n                        try {\n                            return createLong(str);\n                        } catch (NumberFormatException nfe) {\n                            // ignore the bad number\n                        }\n                        return createBigInteger(str);\n\n                    } else {\n                        //Must be a float,double,BigDec\n                        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                        try {\n                            Float f = createFloat(str);\n                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                                return f;\n                            }\n                        } catch (NumberFormatException nfe) {\n                            // ignore the bad number\n                        }\n                        try {\n                            Double d = createDouble(str);\n                            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                                return d;\n                            }\n                        } catch (NumberFormatException nfe) {\n                            // ignore the bad number\n                        }\n\n                        return createBigDecimal(str);\n\n                    }\n                } else {",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..5fe7a3c5 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,119 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (lastChar == 'f' || lastChar == 'F' ||\n+                lastChar == 'd' || lastChar == 'D' ||\n+                lastChar == 'l' || lastChar == 'L') {\n+\n+                String numeric = str.substring(0, str.length() - 1);\n+                boolean validNumeric = true;\n+                if(numeric.startsWith(\"-\")) {\n+                    String numericSubstring = numeric.substring(1);\n+                    validNumeric = !(numericSubstring.isEmpty() || !StringUtils.isNumeric(numericSubstring));\n+                } else {\n+                    validNumeric = !(numeric.isEmpty() || !StringUtils.isNumeric(numeric));\n+                }\n+\n+                if(validNumeric) {\n+                    switch (lastChar) {\n+                        case 'l': \n+                        case 'L': \n+                            try {\n+                                return createLong(numeric);\n+                            } catch (NumberFormatException nfe) {\n+                                //Too big for a long\n+                            }\n+                            return createBigInteger(numeric);\n+\n+                        case 'f': \n+                        case 'F': \n+                            try {\n+                                Float f = createFloat(numeric);\n+                                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(mant)))) {\n+                                    return f;\n+                                }\n+                            } catch (NumberFormatException nfe) {\n+                                // ignore the bad number\n+                            }\n+                            //Fall through\n+                        case 'd': \n+                        case 'D': \n+                            try {\n+                                Double d = createDouble(numeric);\n+                                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(mant)))) {\n+                                    return d;\n+                                }\n+                            } catch (NumberFormatException nfe) {\n+                                // ignore the bad number\n+                            }\n+                            try {\n+                                return createBigDecimal(numeric);\n+                            } catch (NumberFormatException e) {\n+                                // ignore the bad number\n+                            }\n+                            //Fall through\n+                        default: \n+                            throw new NumberFormatException(str + \" is not a valid number.\");\n+                    }\n+                } else {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n+            } else {\n+                //User doesn't have a preference on the return type, so let's start\n+                //small and go from there...\n+                String numeric = str;\n+                boolean validNumeric = true;\n+                if(numeric.startsWith(\"-\")) {\n+                    String numericSubstring = numeric.substring(1);\n+                    validNumeric = !(numericSubstring.isEmpty() || !StringUtils.isNumeric(numericSubstring));\n+                } else {\n+                    validNumeric = !(numeric.isEmpty() || !StringUtils.isNumeric(numeric));\n+                }\n+\n+                if(validNumeric) {\n+                    if (expPos > -1 && expPos < str.length() - 1) {\n+                        exp = str.substring(expPos + 1, str.length());\n+                    } else {\n+                        exp = null;\n+                    }\n+                    if (dec == null && exp == null) {\n+                        //Must be an int,long,bigint\n+                        try {\n+                            return createInteger(str);\n+                        } catch (NumberFormatException nfe) {\n+                            // ignore the bad number\n+                        }\n+                        try {\n+                            return createLong(str);\n+                        } catch (NumberFormatException nfe) {\n+                            // ignore the bad number\n+                        }\n+                        return createBigInteger(str);\n+\n+                    } else {\n+                        //Must be a float,double,BigDec\n+                        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                        try {\n+                            Float f = createFloat(str);\n+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                                return f;\n+                            }\n+                        } catch (NumberFormatException nfe) {\n+                            // ignore the bad number\n+                        }\n+                        try {\n+                            Double d = createDouble(str);\n+                            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                                return d;\n+                            }\n+                        } catch (NumberFormatException nfe) {\n+                            // ignore the bad number\n+                        }\n+\n+                        return createBigDecimal(str);\n+\n+                    }\n+                } else {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}