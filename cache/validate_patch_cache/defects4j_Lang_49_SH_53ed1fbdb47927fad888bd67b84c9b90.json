{
    "patch": "public Fraction multiplyBy(Fraction fraction) {\n    if (fraction == null) {\n        throw new IllegalArgumentException(\"Fraction must not be null\");\n    }\n    if (numerator == 0 || fraction.numerator == 0) {\n        return Fraction.ZERO;\n    }\n    int gcd1 = greatestCommonDivisor(Math.abs(numerator), fraction.denominator);\n    int gcd2 = greatestCommonDivisor(fraction.numerator, Math.abs(denominator));\n    return getReducedFraction(\n            multiplyAndCheck(numerator / gcd1, fraction.numerator / gcd2),\n            multiplyAndCheck(denominator / gcd2, fraction.denominator / gcd1));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..4dbe646b 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,19 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction multiplyBy(Fraction fraction) {\n+    if (fraction == null) {\n+        throw new IllegalArgumentException(\"Fraction must not be null\");\n+    }\n+    if (numerator == 0 || fraction.numerator == 0) {\n+        return Fraction.ZERO;\n+    }\n+    int gcd1 = greatestCommonDivisor(Math.abs(numerator), fraction.denominator);\n+    int gcd2 = greatestCommonDivisor(fraction.numerator, Math.abs(denominator));\n+    return getReducedFraction(\n+            multiplyAndCheck(numerator / gcd1, fraction.numerator / gcd2),\n+            multiplyAndCheck(denominator / gcd2, fraction.denominator / gcd1));\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}