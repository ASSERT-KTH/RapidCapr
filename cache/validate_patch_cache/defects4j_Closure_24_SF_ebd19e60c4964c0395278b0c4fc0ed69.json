{
    "patch": "private void findAliases(NodeTraversal t) {\n    NodeTraversal.Callback findAliasesCallback =\n        (NodeTraversal tInner, Node n, Node parent) -> {\n          if (n.isScript()) {\n            scopeStack.push(ImmutableSet.<String>of());\n          }\n          if (n.isFunction()) {\n            scopeStack.push(getLocalFunctionNames(n));\n          }\n          if (n.isCall() && n.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n            if (!n.getSecondChild().isFunction()) {\n              report(tInner, n, WRONG_PARAMETER_ERROR);\n              return;\n            }\n            Node fn = n.getSecondChild();\n            ImmutableList<String> parameters = getFunctionParameters(fn);\n            if (!parameters.isEmpty()) {\n              report(tInner, parameters.get(0), WRONG_PARAMETER_ERROR);\n              return;\n            }\n            Node block = fn.getLastChild();\n            scopeStack.push(getLocalVarNames(block));\n            NodeTraversal.traverseEs6(compiler, block, new GatherAliases());\n            scopeStack.pop();\n            scopeStack.pop();\n          }\n          if (NodeUtil.getFunctionBody(n) != null) {\n            Node block = NodeUtil.getFunctionBody(n);\n            scopeStack.push(getLocalVarNames(block));\n          }\n        };\n    NodeTraversal.traverseEs6(compiler, root, findAliasesCallback);\n  }\n\n  private ImmutableList<String> getFunctionParameters(Node fn) {\n    Node paramList = fn.getSecondChild();\n    if (!paramList.isParamList()) {\n      return ImmutableList.of();\n    }\n\n    ImmutableList.Builder<String> builder = ImmutableList.builder();\n    for (Node param : paramList.children()) {\n      builder.add(param.getString());\n    }\n    return builder.build();\n  }\n  \n  private class GatherAliases extends NodeTraversal.AbstractPreOrderCallback {\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (t.getScopeRoot() == n) {\n        return true;\n      }\n      if (parent != null && (parent.isFunction() || parent.isBlock())) {\n        scopeStack.push(getLocalVarNames(n));\n      }\n      return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (parent != null && (parent.isFunction() || parent.isBlock())) {\n        scopeStack.pop();\n      }\n      if (n.isName() && !n.getString().equals(\"undefined\") && !n.getString().equals(\"NaN\")) {\n        String qualifiedName = getQualifiedName(n.getString());\n        if (qualifiedName != null) {\n          String simpleName = getSimpleName(n.getString());\n          Map<String, String> vars = aliasVars.peek();\n          if (!vars.containsKey(simpleName)) {\n            vars.put(simpleName, qualifiedName);\n            Node enclosingFunction = NodeUtil.getEnclosingFunction(n);\n            String functionName =\n                enclosingFunction == null ? \"<global>\" : enclosingFunction.getFirstChild().getString();\n            String fullName = functionName.isEmpty() ? simpleName : (functionName + \".\" + simpleName);\n            transformation.addAlias(fullName, qualifiedName);\n          }\n        }\n      }\n    }\n  }\n  ```\n  This implementation checks that the `goog.scope` call takes only one parameter, which must be an anonymous function with no parameters. It also uses a separate callback (`GatherAliases`) to traverse the function body and gather the aliases",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..124a51bf 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,89 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+    NodeTraversal.Callback findAliasesCallback =\n+        (NodeTraversal tInner, Node n, Node parent) -> {\n+          if (n.isScript()) {\n+            scopeStack.push(ImmutableSet.<String>of());\n+          }\n+          if (n.isFunction()) {\n+            scopeStack.push(getLocalFunctionNames(n));\n+          }\n+          if (n.isCall() && n.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n+            if (!n.getSecondChild().isFunction()) {\n+              report(tInner, n, WRONG_PARAMETER_ERROR);\n+              return;\n+            }\n+            Node fn = n.getSecondChild();\n+            ImmutableList<String> parameters = getFunctionParameters(fn);\n+            if (!parameters.isEmpty()) {\n+              report(tInner, parameters.get(0), WRONG_PARAMETER_ERROR);\n+              return;\n+            }\n+            Node block = fn.getLastChild();\n+            scopeStack.push(getLocalVarNames(block));\n+            NodeTraversal.traverseEs6(compiler, block, new GatherAliases());\n+            scopeStack.pop();\n+            scopeStack.pop();\n+          }\n+          if (NodeUtil.getFunctionBody(n) != null) {\n+            Node block = NodeUtil.getFunctionBody(n);\n+            scopeStack.push(getLocalVarNames(block));\n+          }\n+        };\n+    NodeTraversal.traverseEs6(compiler, root, findAliasesCallback);\n+  }\n+\n+  private ImmutableList<String> getFunctionParameters(Node fn) {\n+    Node paramList = fn.getSecondChild();\n+    if (!paramList.isParamList()) {\n+      return ImmutableList.of();\n+    }\n+\n+    ImmutableList.Builder<String> builder = ImmutableList.builder();\n+    for (Node param : paramList.children()) {\n+      builder.add(param.getString());\n+    }\n+    return builder.build();\n+  }\n+  \n+  private class GatherAliases extends NodeTraversal.AbstractPreOrderCallback {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+      if (t.getScopeRoot() == n) {\n+        return true;\n+      }\n+      if (parent != null && (parent.isFunction() || parent.isBlock())) {\n+        scopeStack.push(getLocalVarNames(n));\n+      }\n+      return true;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (parent != null && (parent.isFunction() || parent.isBlock())) {\n+        scopeStack.pop();\n+      }\n+      if (n.isName() && !n.getString().equals(\"undefined\") && !n.getString().equals(\"NaN\")) {\n+        String qualifiedName = getQualifiedName(n.getString());\n+        if (qualifiedName != null) {\n+          String simpleName = getSimpleName(n.getString());\n+          Map<String, String> vars = aliasVars.peek();\n+          if (!vars.containsKey(simpleName)) {\n+            vars.put(simpleName, qualifiedName);\n+            Node enclosingFunction = NodeUtil.getEnclosingFunction(n);\n+            String functionName =\n+                enclosingFunction == null ? \"<global>\" : enclosingFunction.getFirstChild().getString();\n+            String fullName = functionName.isEmpty() ? simpleName : (functionName + \".\" + simpleName);\n+            transformation.addAlias(fullName, qualifiedName);\n+          }\n         }\n       }\n     }\n+  }\n+  ```\n+  This implementation checks that the `goog.scope` call takes only one parameter, which must be an anonymous function with no parameters. It also uses a separate callback (`GatherAliases`) to traverse the function body and gather the aliases\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}