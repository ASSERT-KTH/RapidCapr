{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double eps = 1e-15;\n    double maxIterations = 1000;\n    double sum = 1;\n    double term = 1;\n    int i = 0;\n    boolean converged = false;\n    while (!converged) {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n        if (Math.abs(term) < eps || i >= maxIterations) {\n            converged = true;\n        }\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double logGamma(double x) {\n    return Gamma.logGamma(x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d34b7bc1f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,27 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double eps = 1e-15;\n+    double maxIterations = 1000;\n+    double sum = 1;\n+    double term = 1;\n+    int i = 0;\n+    boolean converged = false;\n+    while (!converged) {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+        if (Math.abs(term) < eps || i >= maxIterations) {\n+            converged = true;\n+        }\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double logGamma(double x) {\n+    return Gamma.logGamma(x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}