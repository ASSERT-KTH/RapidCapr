{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Try to resolve the type via registry\n  boolean resolved = resolveViaRegistry(t, enclosing);\n  // Keep track of whether the type has been resolved via properties to avoid infinite looping\n  boolean resolvedViaProperties = false;\n  // If the type has been resolved via registry then call super.resolveInternal, finish property continuations,\n  // and return the appropriate type\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n  // If the type is not resolved via registry, try to resolve it via properties\n  while (!resolvedViaProperties) {\n    resolvedViaProperties = true;\n    // Call resolveViaProperties and keep track of whether it resolved any types\n    resolveViaProperties(t, enclosing);\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    // Check if type resolution triggers implicit prototype cycles\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    // If the type has been resolved via properties, set resolved to true and try again via registry\n    if (isResolved() && !resolved) {\n      resolved = true;\n      resolvedViaProperties = false;\n    }\n  }\n  // Return the appropriate type\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..fc198a2f 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,42 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Try to resolve the type via registry\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n+  // Keep track of whether the type has been resolved via properties to avoid infinite looping\n+  boolean resolvedViaProperties = false;\n+  // If the type has been resolved via registry then call super.resolveInternal, finish property continuations,\n+  // and return the appropriate type\n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    if (isResolved()) {\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n     }\n-\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+  // If the type is not resolved via registry, try to resolve it via properties\n+  while (!resolvedViaProperties) {\n+    resolvedViaProperties = true;\n+    // Call resolveViaProperties and keep track of whether it resolved any types\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    // Check if type resolution triggers implicit prototype cycles\n+    if (detectImplicitPrototypeCycle()) {\n+      handleTypeCycle(t);\n+    }\n+    // If the type has been resolved via properties, set resolved to true and try again via registry\n+    if (isResolved() && !resolved) {\n+      resolved = true;\n+      resolvedViaProperties = false;\n+    }\n   }\n+  // Return the appropriate type\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}