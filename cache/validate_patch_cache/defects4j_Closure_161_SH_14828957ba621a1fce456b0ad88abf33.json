{
    "patch": "// Check if the left-hand side is an array access\nif (left.getType() != Token.GETELEM) {\n  return n;\n}\n\n// Check if the array access is used as an assignment target\nif (NodeUtil.isLhsByDestructuring(left)) {\n  return n;\n}\n\n// Check if the array access is used as an argument in a call\nif (NodeUtil.isGetElemUsedAsCallArgument(left)) {\n  return n;\n}\n\n// Check if the array access is used as a valu",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..7e270c81 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,22 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if the left-hand side is an array access\n+if (left.getType() != Token.GETELEM) {\n+  return n;\n+}\n+\n+// Check if the array access is used as an assignment target\n+if (NodeUtil.isLhsByDestructuring(left)) {\n+  return n;\n+}\n+\n+// Check if the array access is used as an argument in a call\n+if (NodeUtil.isGetElemUsedAsCallArgument(left)) {\n+  return n;\n+}\n+\n+// Check if the array access is used as a valu\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}