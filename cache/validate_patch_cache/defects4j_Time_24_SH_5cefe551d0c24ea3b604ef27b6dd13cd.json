{
    "patch": "} catch (IllegalFieldValueException e) {\n    DurationField field = e.getDurationFieldType().getField(iChrono);\n    if (field != null && field.getType().equals(DurationFieldType.weekyears())) {\n        // If a weekyear overflowed, the year has to be corrected accordingly\n        int newYear = savedFields[0].iField.roundFloor(millis);\n        millis -= iChrono.year().set(newYear, iDefaultYear);\n        millis = savedFields[0].set(millis, resetFields);\n    } else {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..68484e73 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+} catch (IllegalFieldValueException e) {\n+    DurationField field = e.getDurationFieldType().getField(iChrono);\n+    if (field != null && field.getType().equals(DurationFieldType.weekyears())) {\n+        // If a weekyear overflowed, the year has to be corrected accordingly\n+        int newYear = savedFields[0].iField.roundFloor(millis);\n+        millis -= iChrono.year().set(newYear, iDefaultYear);\n+        millis = savedFields[0].set(millis, resetFields);\n+    } else {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}