{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    int i;\n    for (i = 1; i < size; i++) {\n        Object element = elementPairs.get(i);\n        if (element instanceof Separator) {\n            break;\n        }\n    }\n\n    if (i == size) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    Separator sep = (Separator) elementPairs.get(i);\n\n    List<Object> firstPart = elementPairs.subList(0, i);\n    List<Object> secondPart = elementPairs.subList(i + 1, size);\n\n    Object[] firstComp = createComposite(firstPart);\n\n    PeriodPrinter firstPrinter = (PeriodPrinter) firstComp[0];\n    PeriodParser firstParser = (PeriodParser) firstComp[1];\n\n    PeriodFormatter secondFormatter = toFormatter(secondPart, notPrinter, notParser);\n\n    PeriodPrinter secondPrinter = secondFormatter.getPrinter();\n    PeriodParser secondParser = secondFormatter.getParser();\n\n    if (firstParser == null) {\n        PeriodFormatter formatter = new PeriodFormatter(null, secondParser);\n        return sep == null ? formatter : formatter.withSeparator(sep, sep);\n    }\n\n    if (secondParser == null) {\n        PeriodFormatter formatter = new PeriodFormatter(firstPrinter, null);\n        return sep == null ? formatter : formatter.withSeparator(sep, sep);\n    }\n\n    firstParser = new CompositeParser(new PeriodParser[] { firstParser, secondParser });\n    firstPrinter = secondPrinter == null ? firstPrinter : new CompositePrinter(new PeriodPrinter[] { firstPrinter, secondPrinter });\n\n    return sep == null ? new PeriodFormatter(firstPrinter, firstParser) : new PeriodFormatter(firstPrinter, firstParser, sep);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..543f70f1 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,22 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    int i;\n+    for (i = 1; i < size; i++) {\n+        Object element = elementPairs.get(i);\n+        if (element instanceof Separator) {\n+            break;\n         }\n+    }\n+\n+    if (i == size) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -812,6 +817,37 @@ public class PeriodFormatterBuilder {\n         }\n     }\n \n+    Separator sep = (Separator) elementPairs.get(i);\n+\n+    List<Object> firstPart = elementPairs.subList(0, i);\n+    List<Object> secondPart = elementPairs.subList(i + 1, size);\n+\n+    Object[] firstComp = createComposite(firstPart);\n+\n+    PeriodPrinter firstPrinter = (PeriodPrinter) firstComp[0];\n+    PeriodParser firstParser = (PeriodParser) firstComp[1];\n+\n+    PeriodFormatter secondFormatter = toFormatter(secondPart, notPrinter, notParser);\n+\n+    PeriodPrinter secondPrinter = secondFormatter.getPrinter();\n+    PeriodParser secondParser = secondFormatter.getParser();\n+\n+    if (firstParser == null) {\n+        PeriodFormatter formatter = new PeriodFormatter(null, secondParser);\n+        return sep == null ? formatter : formatter.withSeparator(sep, sep);\n+    }\n+\n+    if (secondParser == null) {\n+        PeriodFormatter formatter = new PeriodFormatter(firstPrinter, null);\n+        return sep == null ? formatter : formatter.withSeparator(sep, sep);\n+    }\n+\n+    firstParser = new CompositeParser(new PeriodParser[] { firstParser, secondParser });\n+    firstPrinter = secondPrinter == null ? firstPrinter : new CompositePrinter(new PeriodPrinter[] { firstPrinter, secondPrinter });\n+\n+    return sep == null ? new PeriodFormatter(firstPrinter, firstParser) : new PeriodFormatter(firstPrinter, firstParser, sep);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}