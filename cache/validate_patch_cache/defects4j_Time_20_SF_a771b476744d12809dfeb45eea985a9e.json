{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    for (String id : ALL_IDS) {\n        int index = text.indexOf(id, position);\n        while (index >= 0) {\n            int idLen = id.length();\n\n            if (index > position && !Character.isWhitespace(text.charAt(index - 1))) {\n                index = text.indexOf(id, index + 1);\n                continue;\n            }\n\n            if (index + idLen < text.length() && \n                !Character.isWhitespace(text.charAt(index + idLen)) &&\n                text.charAt(index + idLen) != '/') {\n                index = text.indexOf(id, index + 1);\n                continue;\n            }\n\n            bucket.setZone(DateTimeZone.forID(id));\n            return index + idLen;\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..a178f93d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,31 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    for (String id : ALL_IDS) {\n+        int index = text.indexOf(id, position);\n+        while (index >= 0) {\n+            int idLen = id.length();\n+\n+            if (index > position && !Character.isWhitespace(text.charAt(index - 1))) {\n+                index = text.indexOf(id, index + 1);\n+                continue;\n             }\n-            return ~position;\n+\n+            if (index + idLen < text.length() && \n+                !Character.isWhitespace(text.charAt(index + idLen)) &&\n+                text.charAt(index + idLen) != '/') {\n+                index = text.indexOf(id, index + 1);\n+                continue;\n+            }\n+\n+            bucket.setZone(DateTimeZone.forID(id));\n+            return index + idLen;\n         }\n     }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}