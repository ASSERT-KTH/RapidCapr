{
    "patch": "                } else {\n                    simplex = contract(original, best, comparator);\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                simplex = contract(original, best, comparator);\n\n            }\n\n            // check convergence\n            if (isConverged(simplex[0].getValue(), best.getValue())) {\n                return;\n            }\n\n        }\n\n    }\n\n    private RealPointValuePair[] contract(final RealPointValuePair[] original,\n                                           final RealPointValuePair best,\n                                           final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] contractedSimplex;\n        final RealPointValuePair contracted = evaluateNewSimplex(original, delta, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            contractedSimplex = simplex;\n        } else {\n            contractedSimplex = shrink(original, comparator);\n        }\n        return contractedSimplex;\n    }\n\n    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                         final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] shrinkedSimplex = simplex;\n        for (int i = 1; i < simplex.length; i++) {\n            final double[] x = original[i].getPoint();\n            final double[] xr = simplex[0].getPoint();\n            final double[] contracted = new double[dim];\n            for (int j = 0; j < dim; j++) {\n                contracted[j] = rho * (x[j] - xr[j]) + xr[j];\n            }\n            final RealPointValuePair pair = new RealPointValuePair(evaluate(contracted), contracted);\n            shrinkedSimplex[i] = pair;\n        }\n        return shrinkedSimplex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..61bd01012 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,39 +58,19 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original, best, comparator);\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // compute the contracted simplex\n+                simplex = contract(original, best, comparator);\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            }\n \n             // check convergence\n+            if (isConverged(simplex[0].getValue(), best.getValue())) {\n                 return;\n             }\n \n@@ -98,6 +78,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+    private RealPointValuePair[] contract(final RealPointValuePair[] original,\n+                                           final RealPointValuePair best,\n+                                           final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] contractedSimplex;\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, delta, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            contractedSimplex = simplex;\n+        } else {\n+            contractedSimplex = shrink(original, comparator);\n+        }\n+        return contractedSimplex;\n+    }\n+\n+    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                         final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] shrinkedSimplex = simplex;\n+        for (int i = 1; i < simplex.length; i++) {\n+            final double[] x = original[i].getPoint();\n+            final double[] xr = simplex[0].getPoint();\n+            final double[] contracted = new double[dim];\n+            for (int j = 0; j < dim; j++) {\n+                contracted[j] = rho * (x[j] - xr[j]) + xr[j];\n+            }\n+            final RealPointValuePair pair = new RealPointValuePair(evaluate(contracted), contracted);\n+            shrinkedSimplex[i] = pair;\n+        }\n+        return shrinkedSimplex;\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}