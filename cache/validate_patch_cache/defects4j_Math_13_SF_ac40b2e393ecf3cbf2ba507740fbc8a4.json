{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = dec.getV().copy();\n    sqrt.walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\n       @Override\n        public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n        }\n        \n        @Override\n        public void visit(int row, int column, double value) {\n            if (row == column) {\n                sqrt.setEntry(row, column, FastMath.sqrt(value));\n            } else {\n                sqrt.setEntry(row, column, 0.0);\n            }\n        }\n        \n        @Override\n        public void end() {\n        }\n    });\n    return dec.getV().multiply(sqrt).multiply(dec.getV().transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a22525e13 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = dec.getV().copy();\n+    sqrt.walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\n+       @Override\n+        public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {\n+        }\n+        \n+        @Override\n+        public void visit(int row, int column, double value) {\n+            if (row == column) {\n+                sqrt.setEntry(row, column, FastMath.sqrt(value));\n+            } else {\n+                sqrt.setEntry(row, column, 0.0);\n+            }\n+        }\n+        \n+        @Override\n+        public void end() {\n+        }\n+    });\n+    return dec.getV().multiply(sqrt).multiply(dec.getV().transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}