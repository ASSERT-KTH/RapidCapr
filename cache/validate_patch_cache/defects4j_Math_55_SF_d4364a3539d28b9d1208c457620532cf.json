{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    double s1 = v1.getNorm();\n    double s2 = v2.getNorm();\n    if (s1 == 0 || s2 == 0) {\n        return Vector3D.ZERO;\n    }\n    double rho = 1.0;\n    double d = 0.0;\n    Vector3D vcross = null;\n    // rescale both vectors without losing precision\n    if (s1 < 1.0 || s2 < 1.0) {\n        vcross = crossProduct(new Vector3D(v1.getX() * 1024.0, v1.getY() * 1024.0, v1.getZ() * 1024.0),\n                new Vector3D(v2.getX() * 1024.0, v2.getY() * 1024.0, v2.getZ() * 1024.0));\n        rho = 1.0 / 1024.0;\n    } else if (s1 > 1.0e15 || s2 > 1.0e15) {\n        vcross = crossProduct(new Vector3D(v1.getX() / 1024.0, v1.getY() / 1024.0, v1.getZ() / 1024.0),\n                new Vector3D(v2.getX() / 1024.0, v2.getY() / 1024.0, v2.getZ() / 1024.0));\n        rho = 1024.0;\n    }\n    if (vcross == null) {\n        vcross = new Vector3D(v1.getY() * v2.getZ() - v1.getZ() * v2.getY(),\n                v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),\n                v1.getX() * v2.getY() - v1.getY() * v2.getX());\n        d = Dot(v1, vcross) / (s1 * s2);\n        rho = 0.5 * (3.0 - d * d);\n        rho = (rho + (1.5 - 0.5 * rho * rho * d)) * (s1 * s2);\n    }\n    double factor1 = rho / s1;\n    double factor2 = rho / s2;\n    return new Vector3D(factor1 * vcross.getX() - factor2 * Dot(v2, v1),\n                        factor1 * vcross.getY() + factor2 * Dot(v1, v2),\n                        factor1 * vcross.getZ() - factor2 * vcross.dotProduct(v1));\n}\nprivate static double Dot(final Vector3D v1, final Vector3D v2) {\n    return v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..60202ad81 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,42 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    double s1 = v1.getNorm();\n+    double s2 = v2.getNorm();\n+    if (s1 == 0 || s2 == 0) {\n+        return Vector3D.ZERO;\n+    }\n+    double rho = 1.0;\n+    double d = 0.0;\n+    Vector3D vcross = null;\n+    // rescale both vectors without losing precision\n+    if (s1 < 1.0 || s2 < 1.0) {\n+        vcross = crossProduct(new Vector3D(v1.getX() * 1024.0, v1.getY() * 1024.0, v1.getZ() * 1024.0),\n+                new Vector3D(v2.getX() * 1024.0, v2.getY() * 1024.0, v2.getZ() * 1024.0));\n+        rho = 1.0 / 1024.0;\n+    } else if (s1 > 1.0e15 || s2 > 1.0e15) {\n+        vcross = crossProduct(new Vector3D(v1.getX() / 1024.0, v1.getY() / 1024.0, v1.getZ() / 1024.0),\n+                new Vector3D(v2.getX() / 1024.0, v2.getY() / 1024.0, v2.getZ() / 1024.0));\n+        rho = 1024.0;\n+    }\n+    if (vcross == null) {\n+        vcross = new Vector3D(v1.getY() * v2.getZ() - v1.getZ() * v2.getY(),\n+                v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),\n+                v1.getX() * v2.getY() - v1.getY() * v2.getX());\n+        d = Dot(v1, vcross) / (s1 * s2);\n+        rho = 0.5 * (3.0 - d * d);\n+        rho = (rho + (1.5 - 0.5 * rho * rho * d)) * (s1 * s2);\n+    }\n+    double factor1 = rho / s1;\n+    double factor2 = rho / s2;\n+    return new Vector3D(factor1 * vcross.getX() - factor2 * Dot(v2, v1),\n+                        factor1 * vcross.getY() + factor2 * Dot(v1, v2),\n+                        factor1 * vcross.getZ() - factor2 * vcross.dotProduct(v1));\n+}\n+private static double Dot(final Vector3D v1, final Vector3D v2) {\n+    return v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ();\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: method dotProduct in class Vector3D cannot be applied to given types;",
    "test_result": "ERROR"
}