{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrt = dec.getSquareRoot();\n    final int n = m.getRowDimension();\n    \n    // convert to BigDecimal for higher precision\n    BigDecimal[][] sqrtArr = new BigDecimal[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            sqrtArr[i][j] = new BigDecimal(sqrt.getEntry(i, j));\n        }\n    }\n    \n    // compute the square of sqrt matrix\n    final BigDecimal[][] sqrtSquaredArr = new BigDecimal[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            sqrtSquaredArr[i][j] = BigDecimal.valueOf(0);\n            for (int k =0; k < n; k++) {\n                sqrtSquaredArr[i][j] = sqrtSquaredArr[i][j].add(sqrtArr[i][k].multiply(sqrtArr[k][j]));\n            }\n        }\n    }\n\n    RealMatrix sqrtSquared = MatrixUtils.createRealMatrix(n, n);\n    \n    // convert back to double\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            sqrtSquared.setEntry(i, j, sqrtSquaredArr[i][j].doubleValue());\n        }\n    }\n    \n    return sqrtSquared;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..25a998c37 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,39 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrt = dec.getSquareRoot();\n+    final int n = m.getRowDimension();\n+    \n+    // convert to BigDecimal for higher precision\n+    BigDecimal[][] sqrtArr = new BigDecimal[n][n];\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            sqrtArr[i][j] = new BigDecimal(sqrt.getEntry(i, j));\n+        }\n+    }\n+    \n+    // compute the square of sqrt matrix\n+    final BigDecimal[][] sqrtSquaredArr = new BigDecimal[n][n];\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            sqrtSquaredArr[i][j] = BigDecimal.valueOf(0);\n+            for (int k =0; k < n; k++) {\n+                sqrtSquaredArr[i][j] = sqrtSquaredArr[i][j].add(sqrtArr[i][k].multiply(sqrtArr[k][j]));\n+            }\n+        }\n     }\n+\n+    RealMatrix sqrtSquared = MatrixUtils.createRealMatrix(n, n);\n+    \n+    // convert back to double\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            sqrtSquared.setEntry(i, j, sqrtSquaredArr[i][j].doubleValue());\n+        }\n+    }\n+    \n+    return sqrtSquared;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}