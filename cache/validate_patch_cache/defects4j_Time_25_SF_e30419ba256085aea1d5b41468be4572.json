{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset for the given local instant\n    int initialOffsetFromLocal = getOffset(instantLocal);\n\n    // adjust the local timestamp by the initial offset to get the corresponding UTC instant\n    long utcInstant = instantLocal - initialOffsetFromLocal;\n\n    // get the current (post-adjustment) offset for the corresponding UTC instant\n    int currentOffsetFromUTC = getOffset(utcInstant);\n\n    // if the initial and current offsets differ, check if there's a DST transition between them\n    if (initialOffsetFromLocal != currentOffsetFromUTC) {\n        // look for the next possible local transition\n        long nextPossibleLocalTransition = nextTransition(utcInstant);\n        long nextPossibleUTCTransition = nextTransition(nextPossibleLocalTransition - currentOffsetFromUTC);\n\n        if (nextPossibleLocalTransition == nextPossibleUTCTransition) {\n            // there is no DST boundary between the given local instant and the corresponding UTC instant\n            return currentOffsetFromUTC;\n        } else {\n            // calculate the previous possible local transition\n            long previousPossibleLocalTransition = previousTransition(utcInstant);\n            long previousPossibleUTCTransition = previousTransition(previousPossibleLocalTransition - currentOffsetFromUTC);\n\n            // determine which transition is closer to the given local instant\n            long transitionToUse;\n            if (instantLocal >= nextPossibleLocalTransition) {\n                // the given local instant is at or after the next DST boundary\n                transitionToUse = nextPossibleLocalTransition;\n            } else {\n                // the given local instant is before the next DST boundary\n                transitionToUse = previousPossibleLocalTransition;\n            }\n\n            // check which offset to use based on the order of the transitions\n            if (nextPossibleLocalTransition < previousPossibleLocalTransition) {\n                // the next local transition happens sooner than the previous one\n                if (transitionToUse == nextPossibleLocalTransition) {\n                    return currentOffsetFromUTC;\n                } else {\n                    return initialOffsetFromLocal;\n                }\n            } else {\n                // the previous local transition happens sooner than the next one\n                if (transitionToUse == nextPossibleLocalTransition) {\n                    return initialOffsetFromLocal;\n                } else {\n                    return currentOffsetFromUTC;\n                }\n            }\n        }\n    }\n\n    // no DST transition between the given local instant and its corresponding UTC instant\n    return initialOffsetFromLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0caf4c0c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,63 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset for the given local instant\n+    int initialOffsetFromLocal = getOffset(instantLocal);\n+\n+    // adjust the local timestamp by the initial offset to get the corresponding UTC instant\n+    long utcInstant = instantLocal - initialOffsetFromLocal;\n+\n+    // get the current (post-adjustment) offset for the corresponding UTC instant\n+    int currentOffsetFromUTC = getOffset(utcInstant);\n+\n+    // if the initial and current offsets differ, check if there's a DST transition between them\n+    if (initialOffsetFromLocal != currentOffsetFromUTC) {\n+        // look for the next possible local transition\n+        long nextPossibleLocalTransition = nextTransition(utcInstant);\n+        long nextPossibleUTCTransition = nextTransition(nextPossibleLocalTransition - currentOffsetFromUTC);\n+\n+        if (nextPossibleLocalTransition == nextPossibleUTCTransition) {\n+            // there is no DST boundary between the given local instant and the corresponding UTC instant\n+            return currentOffsetFromUTC;\n+        } else {\n+            // calculate the previous possible local transition\n+            long previousPossibleLocalTransition = previousTransition(utcInstant);\n+            long previousPossibleUTCTransition = previousTransition(previousPossibleLocalTransition - currentOffsetFromUTC);\n+\n+            // determine which transition is closer to the given local instant\n+            long transitionToUse;\n+            if (instantLocal >= nextPossibleLocalTransition) {\n+                // the given local instant is at or after the next DST boundary\n+                transitionToUse = nextPossibleLocalTransition;\n+            } else {\n+                // the given local instant is before the next DST boundary\n+                transitionToUse = previousPossibleLocalTransition;\n+            }\n+\n+            // check which offset to use based on the order of the transitions\n+            if (nextPossibleLocalTransition < previousPossibleLocalTransition) {\n+                // the next local transition happens sooner than the previous one\n+                if (transitionToUse == nextPossibleLocalTransition) {\n+                    return currentOffsetFromUTC;\n+                } else {\n+                    return initialOffsetFromLocal;\n+                }\n+            } else {\n+                // the previous local transition happens sooner than the next one\n+                if (transitionToUse == nextPossibleLocalTransition) {\n+                    return initialOffsetFromLocal;\n+                } else {\n+                    return currentOffsetFromUTC;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    // no DST transition between the given local instant and its corresponding UTC instant\n+    return initialOffsetFromLocal;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}