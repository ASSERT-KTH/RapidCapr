{
    "patch": "    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // if the lower value is greater than or equal to the length of the string,\n        // return the original string or the appendToEnd value\n        if (lower >= str.length()) {\n            return appendToEnd != null ? appendToEnd : str;\n        }\n\n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n\n        // ensure lower is within bounds\n        if (lower < 0) {\n            lower = 0;\n        }\n\n        // if upper is less than lower, raise it to lower\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(lower, upper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(lower, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(lower, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..2a8b1467 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -611,13 +611,23 @@ public class WordUtils {\n             return StringUtils.EMPTY;\n         }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n+        // if the lower value is greater than or equal to the length of the string,\n+        // return the original string or the appendToEnd value\n+        if (lower >= str.length()) {\n+            return appendToEnd != null ? appendToEnd : str;\n+        }\n+\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {\n             upper = str.length();\n         }\n+\n+        // ensure lower is within bounds\n+        if (lower < 0) {\n+            lower = 0;\n+        }\n+\n         // if upper is less than lower, raise it to lower\n         if (upper < lower) {\n             upper = lower;\n@@ -626,16 +636,16 @@ public class WordUtils {\n         StringBuffer result = new StringBuffer();\n         int index = StringUtils.indexOf(str, \" \", lower);\n         if (index == -1) {\n-            result.append(str.substring(0, upper));\n+            result.append(str.substring(lower, upper));\n             // only if abbreviation has occured do we append the appendToEnd value\n             if (upper != str.length()) {\n                 result.append(StringUtils.defaultString(appendToEnd));\n             }\n         } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n+            result.append(str.substring(lower, upper));\n             result.append(StringUtils.defaultString(appendToEnd));\n         } else {\n-            result.append(str.substring(0, index));\n+            result.append(str.substring(lower, index));\n             result.append(StringUtils.defaultString(appendToEnd));\n         }\n         return result.toString();",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[01234]> but was:<[]>",
    "test_result": "FAIL"
}