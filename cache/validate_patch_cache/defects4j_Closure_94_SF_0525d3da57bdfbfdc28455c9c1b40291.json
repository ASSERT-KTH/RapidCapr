{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    int type = val.getType();\n\n    if (TokenStream.isUnaryOperator(type)) {\n        return isValidDefineValue(val.getFirstChild(), defines);\n    }\n\n    if (TokenStream.isBinaryOperator(type)) {\n        return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n    }\n\n    if (Token.NAME == type || Token.GETPROP == type) {\n        if (val.isQualifiedName()) {\n            return defines.contains(val.getQualifiedName());\n        }\n    }\n\n    return TokenStream.isLiteral(type) || TokenStream.isKeyword(type);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..d8676f1c 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,25 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n+    int type = val.getType();\n \n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n+    if (TokenStream.isUnaryOperator(type)) {\n         return isValidDefineValue(val.getFirstChild(), defines);\n+    }\n \n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n+    if (TokenStream.isBinaryOperator(type)) {\n+        return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n+    }\n+\n+    if (Token.NAME == type || Token.GETPROP == type) {\n         if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+            return defines.contains(val.getQualifiedName());\n         }\n     }\n-    return false;\n-  }\n+\n+    return TokenStream.isLiteral(type) || TokenStream.isKeyword(type);\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}