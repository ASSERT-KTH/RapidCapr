{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - offsetLocal;\n    int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal != offsetAdjusted) {\n        long nextTransitionLocal = nextTransition(instantAdjusted);\n        long nextTransitionAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextTransitionLocal != nextTransitionAdjusted) {\n            boolean dstGap = offsetLocal > offsetAdjusted;\n            if (dstGap) {\n                long prevTransitionAdjusted = previousTransition(instantAdjusted);\n                long prevTransitionLocal = previousTransition(instantLocal - offsetLocal);\n                if (prevTransitionAdjusted == prevTransitionLocal) {\n                    return offsetLocal;\n                }\n                offsetLocal = getOffset(prevTransitionAdjusted);\n                if (offsetLocal == offsetAdjusted) {\n                    return offsetAdjusted;\n                }\n                if (prevTransitionAdjusted >= instantAdjusted) {\n                    return offsetLocal;\n                }\n                while (true) {\n                    long nextTransition = nextTransition(prevTransitionAdjusted);\n                    if (nextTransition > instantAdjusted) {\n                        break;\n                    }\n                    long nextTransitionAdjusted = nextTransition + (instantAdjusted - nextTransition) / DateTimeConstants.MILLIS_PER_HOUR * DateTimeConstants.MILLIS_PER_HOUR;\n                    int offsetNext = getOffset(nextTransitionAdjusted);\n                    if (offsetNext == offsetAdjusted) {\n                        return offsetAdjusted;\n                    }\n                    if (offsetNext != offsetLocal) {\n                        return getOffset(prevTransitionAdjusted);\n                    }\n                    prevTransitionAdjusted = nextTransitionAdjusted;\n                    offsetLocal = offsetNext;\n                }\n                return offsetLocal;\n            } else {\n                long prevTransitionLocal = previousTransition(nextTransitionLocal);\n                if (prevTransitionLocal < instantLocal - offsetLocal) {\n                    long prevTransitionAdjusted = previousTransition(nextTransitionAdjusted);\n                    if (getOffset(prevTransitionAdjusted) < offsetAdjusted) {\n                        return offsetLocal;\n                    }\n                    instantAdjusted = prevTransitionAdjusted;\n                    offsetLocal = getOffset(instantAdjusted);\n                }\n                while (true) {\n                    if (offsetAdjusted >= offsetLocal) {\n                        return offsetAdjusted;\n                    }\n                    long nextTransition = nextTransitionLocal;\n                    long nextTransitionAdjusted = nextTransition(nextTransition);\n                    if (nextTransitionAdjusted > instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR) {\n                        return offsetLocal;\n                    }\n                    if (nextTransitionAdjusted > instantAdjusted) {\n                        int offsetNext = getOffset(nextTransitionAdjusted);\n                        if (offsetNext == offsetAdjusted) {\n                            return offsetAdjusted;\n                        }\n                        if (offsetNext != offsetLocal) {\n                            return offsetLocal;\n                        }\n                        instantAdjusted = nextTransitionAdjusted;\n                    }\n                    offsetLocal = offsetAdjusted;\n                    offsetAdjusted = getOffset(instantAdjusted);\n                    nextTransitionLocal = nextTransition;\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..54666e01 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,83 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - offsetLocal;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+    if (offsetLocal != offsetAdjusted) {\n+        long nextTransitionLocal = nextTransition(instantAdjusted);\n+        long nextTransitionAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextTransitionLocal != nextTransitionAdjusted) {\n+            boolean dstGap = offsetLocal > offsetAdjusted;\n+            if (dstGap) {\n+                long prevTransitionAdjusted = previousTransition(instantAdjusted);\n+                long prevTransitionLocal = previousTransition(instantLocal - offsetLocal);\n+                if (prevTransitionAdjusted == prevTransitionLocal) {\n                     return offsetLocal;\n                 }\n+                offsetLocal = getOffset(prevTransitionAdjusted);\n+                if (offsetLocal == offsetAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+                if (prevTransitionAdjusted >= instantAdjusted) {\n+                    return offsetLocal;\n+                }\n+                while (true) {\n+                    long nextTransition = nextTransition(prevTransitionAdjusted);\n+                    if (nextTransition > instantAdjusted) {\n+                        break;\n+                    }\n+                    long nextTransitionAdjusted = nextTransition + (instantAdjusted - nextTransition) / DateTimeConstants.MILLIS_PER_HOUR * DateTimeConstants.MILLIS_PER_HOUR;\n+                    int offsetNext = getOffset(nextTransitionAdjusted);\n+                    if (offsetNext == offsetAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                    if (offsetNext != offsetLocal) {\n+                        return getOffset(prevTransitionAdjusted);\n+                    }\n+                    prevTransitionAdjusted = nextTransitionAdjusted;\n+                    offsetLocal = offsetNext;\n+                }\n+                return offsetLocal;\n+            } else {\n+                long prevTransitionLocal = previousTransition(nextTransitionLocal);\n+                if (prevTransitionLocal < instantLocal - offsetLocal) {\n+                    long prevTransitionAdjusted = previousTransition(nextTransitionAdjusted);\n+                    if (getOffset(prevTransitionAdjusted) < offsetAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    instantAdjusted = prevTransitionAdjusted;\n+                    offsetLocal = getOffset(instantAdjusted);\n+                }\n+                while (true) {\n+                    if (offsetAdjusted >= offsetLocal) {\n+                        return offsetAdjusted;\n+                    }\n+                    long nextTransition = nextTransitionLocal;\n+                    long nextTransitionAdjusted = nextTransition(nextTransition);\n+                    if (nextTransitionAdjusted > instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR) {\n+                        return offsetLocal;\n+                    }\n+                    if (nextTransitionAdjusted > instantAdjusted) {\n+                        int offsetNext = getOffset(nextTransitionAdjusted);\n+                        if (offsetNext == offsetAdjusted) {\n+                            return offsetAdjusted;\n+                        }\n+                        if (offsetNext != offsetLocal) {\n+                            return offsetLocal;\n+                        }\n+                        instantAdjusted = nextTransitionAdjusted;\n+                    }\n+                    offsetLocal = offsetAdjusted;\n+                    offsetAdjusted = getOffset(instantAdjusted);\n+                    nextTransitionLocal = nextTransition;\n+                }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: variable nextTransitionAdjusted is already defined in method getOffsetFromLocal(long)",
    "test_result": "ERROR"
}