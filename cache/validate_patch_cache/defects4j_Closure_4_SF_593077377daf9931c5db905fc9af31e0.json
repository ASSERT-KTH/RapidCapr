{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean resolveViaProps = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (registry.getType(getReferenceName()) == null) {\n      t.report(\n          getTypeMismatch(),\n          NEW_OBJECT_CANNOT_HAVE_TYPE_PARAMS);\n    }\n    if (!resolved) {\n      resolveViaProps = resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      if (!resolveViaProps && !t.hasEnclosingError()) {\n        t.report(getTypeMismatch(), UNRESOLVED_TYPEVAR);\n      }\n    }\n    if (isResolved()) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..20f14f89 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,30 +182,30 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolveViaProps = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (registry.getType(getReferenceName()) == null) {\n+      t.report(\n+          getTypeMismatch(),\n+          NEW_OBJECT_CANNOT_HAVE_TYPE_PARAMS);\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (!resolved) {\n+      resolveViaProps = resolveViaProperties(t, enclosing);\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      if (!resolveViaProps && !t.hasEnclosingError()) {\n+        t.report(getTypeMismatch(), UNRESOLVED_TYPEVAR);\n+      }\n     }\n-\n-    super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      return registry.isLastGeneration() ?\n+          getReferencedType() : this;\n     }\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}