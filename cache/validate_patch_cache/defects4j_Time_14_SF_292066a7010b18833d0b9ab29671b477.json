{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean changed = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (!changed && i == fieldIndex) {\n                DurationFieldType fieldType = partial.getFieldType(i).getDurationType();\n                int value = values[i];\n                int newValue = (value + valueToAdd) - (value >= 0 ? 0 : 1);\n                if ((newValue ^ value) < 0 && (newValue ^ valueToAdd) < 0) {\n                    throw new org.joda.time.IllegalFieldValueException\n                            (fieldType, Integer.valueOf(newValue), null, \n                             \"Adding time unit caused overflow\");\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                int valueChanged = newValue - value;\n                if (valueChanged != 0) {\n                    changed = true;\n                    valueToAdd -= valueChanged;\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        if (valueToAdd != 0) {\n            instant = add(instant, valueToAdd);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..9e402c48 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,44 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean changed = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (!changed && i == fieldIndex) {\n+                DurationFieldType fieldType = partial.getFieldType(i).getDurationType();\n+                int value = values[i];\n+                int newValue = (value + valueToAdd) - (value >= 0 ? 0 : 1);\n+                if ((newValue ^ value) < 0 && (newValue ^ valueToAdd) < 0) {\n+                    throw new org.joda.time.IllegalFieldValueException\n+                            (fieldType, Integer.valueOf(newValue), null, \n+                             \"Adding time unit caused overflow\");\n+                }\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                int valueChanged = newValue - value;\n+                if (valueChanged != 0) {\n+                    changed = true;\n+                    valueToAdd -= valueChanged;\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n+        }\n+        if (valueToAdd != 0) {\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}