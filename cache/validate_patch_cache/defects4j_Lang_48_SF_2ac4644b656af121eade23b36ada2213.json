{
    "patch": "import java.lang.reflect.Array;\nimport java.math.BigDecimal;\nimport java.util.Arrays;\n\npublic class EqualsBuilder {\n\n    private boolean isEquals = true;\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            setEquals(false);\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            appendArray(lhs, rhs);\n        }\n        return this;\n    }\n\n    private void appendArray(Object lhs, Object rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        int length = Array.getLength(lhs);\n        if (length != Array.getLength(rhs)) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            Object lhsItem = Array.get(lhs, i);\n            Object rhsItem = Array.get(rhs, i);\n            append(lhsItem, rhsItem);\n        }\n    }\n\n    private void append(long[] lhs, long[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(int[] lhs, int[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(short[] lhs, short[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(char[] lhs, char[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(byte[] lhs, byte[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(double[] lhs, double[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(float[] lhs, float[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(boolean[] lhs, boolean[] rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public static boolean reflectionEquals(Object lhs, Object rhs) {\n        if (lhs == rhs) {\n            return true;\n        }\n        if (lhs == null || rhs == null) {\n            return false;\n        }\n        return new EqualsBuilder().append(lhs, rhs).isEquals();\n    }\n    \n    // Some example test cases\n    public static void main(String[] args) {\n        // Simple primitives\n        assertTrue(reflectionEquals(true, true));\n        assertTrue(reflectionEquals(false, false));\n        assertFalse(reflectionEquals(true, false));\n        assertTrue(reflectionEquals((byte) 1, (byte) 1));\n        assertFalse(reflectionEquals((byte) 1, (byte) 2));\n        assertTrue(reflectionEquals((short) 1, (short) 1));\n        assertFalse(reflectionEquals((short) 1, (short) 2));\n        assertTrue(reflectionEquals(1, 1));\n        assertFalse(reflectionEquals(1, 2));\n        assertTrue(reflectionEquals(1L, 1L));\n        assertFalse(reflectionEquals(1L, 2L));\n        assertTrue(reflectionEquals('a', 'a'));\n        assertFalse(reflectionEquals('a', 'b'));\n        assertTrue(reflectionEquals(1.0f, 1.0f));\n        assertFalse(reflectionEquals(1.0f, 2.0f));\n        assertTrue(reflectionEquals(1.0, 1.0));\n        assertFalse(reflectionEquals(1.0, 2.0));\n        \n        // Arrays of primitives\n        assertTrue(reflectionEquals(new byte[] { 1, 2, 3 }, new byte[] { 1, 2, 3 }));\n        assertFalse(reflectionEquals(new byte[] { 1, 2, 3 }, new byte[] { 3, 2, 1 }));\n        assertTrue(reflectionEquals(new short[] { 1, 2, 3 }, new short[] { 1, 2, 3 }));\n        assertFalse(reflectionEquals(new short[] { 1, 2, 3 }, new short[] { 3, 2, 1 }));\n        assertTrue(reflectionEquals(new int[] { 1, 2, 3 }, new int[] { 1, 2, 3 }));\n        assertFalse(reflectionEquals(new int[] { 1, 2, 3 }, new int[] { 3, 2, 1 }));\n        assertTrue(reflectionEquals(new long[] { 1L, 2L, 3L }, new long[] { 1L, 2L, 3L }));\n        assertFalse(reflectionEquals(new long[] { 1L, 2L, 3L }, new long[] { 3L, 2L, 1L }));\n        assertTrue(reflectionEquals(new char[] { 'a', 'b', 'c' }, new char[] { 'a', 'b', 'c' }));\n        assertFalse(reflectionEquals(new char[] { 'a', 'b', 'c' }, new char[] { 'c', 'b', 'a' }));\n        assertTrue(reflectionEquals(new float[] { 1.0f, 2.0f, 3.0f }, new float[] { 1.0f, 2.0f, 3.0f }));\n        assertFalse(reflectionEquals(new float[] { 1.0f, 2.0f, 3.0f }, new float[] { 3.0f, 2.0f, 1.0f }));\n        assertTrue(reflectionEquals(new double[] { 1.0, 2.0, 3.0 }, new double[] { 1.0, 2.0, 3.0 }));\n        assertFalse(reflectionEquals(new double[] { 1.0, 2.0, 3.0 }, new double[] { 3.0, 2.0, 1.0 }));\n        assertTrue(reflectionEquals(new boolean[] { true, false, true }, new boolean[] { true, false, true }));\n        assertFalse(reflectionEquals(new boolean[] { true, false, true }, new boolean[] { false, true, false }));\n        \n        // Arrays of arrays of primitives and nested arrays\n        assertTrue(reflectionEquals(new int[][] { { 1 }, { 2 }, { 3 } }, new int[][] { { 1 }, { 2 }, { 3 } }));\n        assertFalse(reflectionEquals(new int[][] { { 1 }, { 2 }, { 3 } }, new int[][] { { 3 }, { 2 }, { 1 } }));\n        assertTrue(reflectionEquals(new Object[] { new boolean[][] { { true }, { false } } }, new Object[] { new boolean[][] { { true }, { false } } }));\n        assertFalse(reflectionEquals(new Object[] { new boolean[][] { { true }, { false } } }, new Object[] { new boolean[][] { { true }, { true } } }));\n        \n        // BigDecimal example test\n        assertTrue(reflectionEquals(new BigDecimal(\"10.0\"), new BigDecimal(\"10.00\")));  // should pass\n    }\n\n    private static void assertTrue(boolean condition) {\n        if (!condition) {\n            throw new RuntimeException(\"Test failed: expected true\");\n        }\n    }\n\n    private static void assertFalse(boolean condition) {\n        if (condition) {\n            throw new RuntimeException(\"Test failed: expected false\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..67512b04 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,28 +364,31 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.lang.reflect.Array;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+public class EqualsBuilder {\n+\n+    private boolean isEquals = true;\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n+        if (!isEquals) {\n             return this;\n         }\n         if (lhs == rhs) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n+            setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+            setEquals(false);\n+        } else if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -402,12 +405,163 @@ public class EqualsBuilder {\n         } else if (lhs instanceof boolean[]) {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            appendArray(lhs, rhs);\n         }\n         return this;\n     }\n \n+    private void appendArray(Object lhs, Object rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        int length = Array.getLength(lhs);\n+        if (length != Array.getLength(rhs)) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            Object lhsItem = Array.get(lhs, i);\n+            Object rhsItem = Array.get(rhs, i);\n+            append(lhsItem, rhsItem);\n+        }\n+    }\n+\n+    private void append(long[] lhs, long[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(int[] lhs, int[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(short[] lhs, short[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(char[] lhs, char[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(byte[] lhs, byte[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(double[] lhs, double[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(float[] lhs, float[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(boolean[] lhs, boolean[] rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    public static boolean reflectionEquals(Object lhs, Object rhs) {\n+        if (lhs == rhs) {\n+            return true;\n+        }\n+        if (lhs == null || rhs == null) {\n+            return false;\n+        }\n+        return new EqualsBuilder().append(lhs, rhs).isEquals();\n+    }\n+    \n+    // Some example test cases\n+    public static void main(String[] args) {\n+        // Simple primitives\n+        assertTrue(reflectionEquals(true, true));\n+        assertTrue(reflectionEquals(false, false));\n+        assertFalse(reflectionEquals(true, false));\n+        assertTrue(reflectionEquals((byte) 1, (byte) 1));\n+        assertFalse(reflectionEquals((byte) 1, (byte) 2));\n+        assertTrue(reflectionEquals((short) 1, (short) 1));\n+        assertFalse(reflectionEquals((short) 1, (short) 2));\n+        assertTrue(reflectionEquals(1, 1));\n+        assertFalse(reflectionEquals(1, 2));\n+        assertTrue(reflectionEquals(1L, 1L));\n+        assertFalse(reflectionEquals(1L, 2L));\n+        assertTrue(reflectionEquals('a', 'a'));\n+        assertFalse(reflectionEquals('a', 'b'));\n+        assertTrue(reflectionEquals(1.0f, 1.0f));\n+        assertFalse(reflectionEquals(1.0f, 2.0f));\n+        assertTrue(reflectionEquals(1.0, 1.0));\n+        assertFalse(reflectionEquals(1.0, 2.0));\n+        \n+        // Arrays of primitives\n+        assertTrue(reflectionEquals(new byte[] { 1, 2, 3 }, new byte[] { 1, 2, 3 }));\n+        assertFalse(reflectionEquals(new byte[] { 1, 2, 3 }, new byte[] { 3, 2, 1 }));\n+        assertTrue(reflectionEquals(new short[] { 1, 2, 3 }, new short[] { 1, 2, 3 }));\n+        assertFalse(reflectionEquals(new short[] { 1, 2, 3 }, new short[] { 3, 2, 1 }));\n+        assertTrue(reflectionEquals(new int[] { 1, 2, 3 }, new int[] { 1, 2, 3 }));\n+        assertFalse(reflectionEquals(new int[] { 1, 2, 3 }, new int[] { 3, 2, 1 }));\n+        assertTrue(reflectionEquals(new long[] { 1L, 2L, 3L }, new long[] { 1L, 2L, 3L }));\n+        assertFalse(reflectionEquals(new long[] { 1L, 2L, 3L }, new long[] { 3L, 2L, 1L }));\n+        assertTrue(reflectionEquals(new char[] { 'a', 'b', 'c' }, new char[] { 'a', 'b', 'c' }));\n+        assertFalse(reflectionEquals(new char[] { 'a', 'b', 'c' }, new char[] { 'c', 'b', 'a' }));\n+        assertTrue(reflectionEquals(new float[] { 1.0f, 2.0f, 3.0f }, new float[] { 1.0f, 2.0f, 3.0f }));\n+        assertFalse(reflectionEquals(new float[] { 1.0f, 2.0f, 3.0f }, new float[] { 3.0f, 2.0f, 1.0f }));\n+        assertTrue(reflectionEquals(new double[] { 1.0, 2.0, 3.0 }, new double[] { 1.0, 2.0, 3.0 }));\n+        assertFalse(reflectionEquals(new double[] { 1.0, 2.0, 3.0 }, new double[] { 3.0, 2.0, 1.0 }));\n+        assertTrue(reflectionEquals(new boolean[] { true, false, true }, new boolean[] { true, false, true }));\n+        assertFalse(reflectionEquals(new boolean[] { true, false, true }, new boolean[] { false, true, false }));\n+        \n+        // Arrays of arrays of primitives and nested arrays\n+        assertTrue(reflectionEquals(new int[][] { { 1 }, { 2 }, { 3 } }, new int[][] { { 1 }, { 2 }, { 3 } }));\n+        assertFalse(reflectionEquals(new int[][] { { 1 }, { 2 }, { 3 } }, new int[][] { { 3 }, { 2 }, { 1 } }));\n+        assertTrue(reflectionEquals(new Object[] { new boolean[][] { { true }, { false } } }, new Object[] { new boolean[][] { { true }, { false } } }));\n+        assertFalse(reflectionEquals(new Object[] { new boolean[][] { { true }, { false } } }, new Object[] { new boolean[][] { { true }, { true } } }));\n+        \n+        // BigDecimal example test\n+        assertTrue(reflectionEquals(new BigDecimal(\"10.0\"), new BigDecimal(\"10.00\")));  // should pass\n+    }\n+\n+    private static void assertTrue(boolean condition) {\n+        if (!condition) {\n+            throw new RuntimeException(\"Test failed: expected true\");\n+        }\n+    }\n+\n+    private static void assertFalse(boolean condition) {\n+        if (condition) {\n+            throw new RuntimeException(\"Test failed: expected false\");\n+        }\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}