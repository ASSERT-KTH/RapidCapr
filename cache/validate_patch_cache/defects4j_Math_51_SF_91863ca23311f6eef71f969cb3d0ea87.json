{
    "patch": "public class IllinoisSolver extends AbstractUnivariateSolver {\n    /**\n     * Construct a solver with default accuracy and function value accuracy\n     * (both set to the square root of the machine epsilon), and a default\n     * maximal iteration count of 100.\n     */\n    public IllinoisSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_RELATIVE_ACCURACY);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public IllinoisSolver(final double relativeAccuracy,\n                          final double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy);\n    }\n\n    /**\n     * Construct a solver with the given accuracies and a default maximal\n     * iteration count of 100.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param functionValueAccuracy Maximum function value error.\n     */\n    public IllinoisSolver(final double relativeAccuracy,\n                          final double absoluteAccuracy,\n                          final double functionValueAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Integer.MAX_VALUE);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param functionValueAccuracy Maximum function value error.\n     * @param maxEval Maximum number of evaluations.\n     *\n     * @since 3.1\n     */\n    public IllinoisSolver(final double relativeAccuracy,\n                          final double absoluteAccuracy,\n                          final double functionValueAccuracy,\n                          final int maxEval) {\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, maxEval);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected final double doSolve() {\n        // Get initial solution\n        double min = getMin();\n        double max = getMax();\n        double fmin = computeObjectiveValue(min);\n        double fmax = computeObjectiveValue(max);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (fmin == 0.0) {\n            return min;\n        }\n        if (fmax == 0.0) {\n            return max;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(min, max);\n\n        // Get accuracies.\n        double functionValueAccuracy = getFunctionValueAccuracy();\n        double absoluteAccuracy = getAbsoluteAccuracy();\n        double relativeAccuracy = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Maximum number of iterations\n        int i = 0;\n        int maxEval = getMaximalEvaluations();\n\n        // Control the sign of the derivatives\n        double sign = fmin < 0 ? 1 : -1;\n\n        // Keep finding better approximations.\n        while (++i <= maxEval) {\n            // Calculate the next approximation.\n            double x = 0.5 * (min + max);\n            double fx = computeObjectiveValue(x);\n            double dx = 0.5 * (max - min);\n\n            if (fx == 0) {\n                // Simple case: we found a root exactly\n                return x;\n            }\n\n            if (FastMath.abs(dx) < absoluteAccuracy && FastMath.abs(fx) <= functionValueAccuracy) {\n                // We are close to the root\n                return x;\n            }\n\n            if (FastMath.abs(dx) < relativeAccuracy * FastMath.max(FastMath.abs(max), FastMath.abs(min)) && FastMath.abs(fx) <= functionValueAccuracy) {\n                // We are close to the root\n                return x;\n            }\n\n            if (fx * sign < 0.0) {\n                // Adjust the brackets\n                max = x;\n                fmax = fx;\n                if (inverted) {\n                    sign *= -1.0;\n                }\n                inverted = false;\n            } else {\n                // Adjust the brackets\n                min = x;\n                fmin = fx;\n                if (!inverted) {\n                    sign *= -1.0;\n                }\n                inverted = true;\n            }\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(fmin) <= functionValueAccuracy ||\n                    FastMath.abs(fmax) <= functionValueAccuracy) {\n                return fmin == 0 ? min : fmax == 0 ? max : x;\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(max - min) < FastMath.max(relativeAccuracy * FastMath.max(FastMath.abs(max), FastMath.abs(min)),\n                                                       absoluteAccuracy)) {\n                return x;\n            }\n\n            if (i >= 3) {\n                double delta = inverted ? fmax - fmin : fmin - fmax;\n                double limit = FastMath.abs(fmin) < FastMath.abs(fmax) ? fmin : fmax;\n                if (delta > limit) {\n                    // we are not converging fast enough, switch to bisection\n                    x = 0.5 * (min + max);\n                    inverted = false;\n                }\n            }\n        }\n\n        // If the maximum number of iterations is reached, throw an exception\n        throw new MaxEvaluationsExceededException(maxEval);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..26504b82d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,166 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n+public class IllinoisSolver extends AbstractUnivariateSolver {\n+    /**\n+     * Construct a solver with default accuracy and function value accuracy\n+     * (both set to the square root of the machine epsilon), and a default\n+     * maximal iteration count of 100.\n+     */\n+    public IllinoisSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_RELATIVE_ACCURACY);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public IllinoisSolver(final double relativeAccuracy,\n+                          final double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy);\n+    }\n+\n+    /**\n+     * Construct a solver with the given accuracies and a default maximal\n+     * iteration count of 100.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param functionValueAccuracy Maximum function value error.\n+     */\n+    public IllinoisSolver(final double relativeAccuracy,\n+                          final double absoluteAccuracy,\n+                          final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param functionValueAccuracy Maximum function value error.\n+     * @param maxEval Maximum number of evaluations.\n+     *\n+     * @since 3.1\n+     */\n+    public IllinoisSolver(final double relativeAccuracy,\n+                          final double absoluteAccuracy,\n+                          final double functionValueAccuracy,\n+                          final int maxEval) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, maxEval);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n     protected final double doSolve() {\n         // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        double min = getMin();\n+        double max = getMax();\n+        double fmin = computeObjectiveValue(min);\n+        double fmax = computeObjectiveValue(max);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n         // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n+        if (fmin == 0.0) {\n+            return min;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+        if (fmax == 0.0) {\n+            return max;\n         }\n \n         // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+        verifyBracketing(min, max);\n \n         // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        double functionValueAccuracy = getFunctionValueAccuracy();\n+        double absoluteAccuracy = getAbsoluteAccuracy();\n+        double relativeAccuracy = getRelativeAccuracy();\n \n         // Keep track of inverted intervals, meaning that the left bound is\n         // larger than the right bound.\n         boolean inverted = false;\n \n+        // Maximum number of iterations\n+        int i = 0;\n+        int maxEval = getMaximalEvaluations();\n+\n+        // Control the sign of the derivatives\n+        double sign = fmin < 0 ? 1 : -1;\n+\n         // Keep finding better approximations.\n-        while (true) {\n+        while (++i <= maxEval) {\n             // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            double x = 0.5 * (min + max);\n+            double fx = computeObjectiveValue(x);\n+            double dx = 0.5 * (max - min);\n+\n+            if (fx == 0) {\n+                // Simple case: we found a root exactly\n+                return x;\n+            }\n+\n+            if (FastMath.abs(dx) < absoluteAccuracy && FastMath.abs(fx) <= functionValueAccuracy) {\n+                // We are close to the root\n+                return x;\n+            }\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n+            if (FastMath.abs(dx) < relativeAccuracy * FastMath.max(FastMath.abs(max), FastMath.abs(min)) && FastMath.abs(fx) <= functionValueAccuracy) {\n+                // We are close to the root\n                 return x;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+            if (fx * sign < 0.0) {\n+                // Adjust the brackets\n+                max = x;\n+                fmax = fx;\n+                if (inverted) {\n+                    sign *= -1.0;\n+                }\n+                inverted = false;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n+                // Adjust the brackets\n+                min = x;\n+                fmin = fx;\n+                if (!inverted) {\n+                    sign *= -1.0;\n                 }\n+                inverted = true;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n \n             // If the function value of the last approximation is too small,\n             // given the function value accuracy, then we can't get closer to\n             // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            if (FastMath.abs(fmin) <= functionValueAccuracy ||\n+                    FastMath.abs(fmax) <= functionValueAccuracy) {\n+                return fmin == 0 ? min : fmax == 0 ? max : x;\n             }\n \n             // If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+            if (FastMath.abs(max - min) < FastMath.max(relativeAccuracy * FastMath.max(FastMath.abs(max), FastMath.abs(min)),\n+                                                       absoluteAccuracy)) {\n+                return x;\n+            }\n+\n+            if (i >= 3) {\n+                double delta = inverted ? fmax - fmin : fmin - fmax;\n+                double limit = FastMath.abs(fmin) < FastMath.abs(fmax) ? fmin : fmax;\n+                if (delta > limit) {\n+                    // we are not converging fast enough, switch to bisection\n+                    x = 0.5 * (min + max);\n+                    inverted = false;\n                 }\n             }\n         }\n+\n+        // If the maximum number of iterations is reached, throw an exception\n+        throw new MaxEvaluationsExceededException(maxEval);\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}