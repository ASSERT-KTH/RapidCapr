{
    "patch": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.getParent().replaceChild(explicitNode, candidateDefinition);\n    compiler.reportCodeChange();\n\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      // Convert the assignment to a variable declaration if necessary.\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      Node valueNode = nameNode.getNext();\n      if (nameNode.getType() == Token.NAME && !NodeUtil.isNameDeclaration(assignNode)) {\n        Node varNode = new Node(Token.VAR, nameNode.detachFromParent());\n        varNode.addChildToBack(valueNode.detachFromParent());\n        varNode.useSourceInfoIfMissingFrom(candidateDefinition);\n        candidateDefinition.replaceChild(assignNode, varNode);\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      } else {\n        replacementNode = candidateDefinition;\n      }\n    } else if (NodeUtil.isNameDeclaration(candidateDefinition)) {\n      replacementNode = candidateDefinition;\n    } else {\n      throw new IllegalStateException(\n          \"unexpected candidateDefinition type: \" + candidateDefinition.getToken());\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n\n    if (firstModule == minimumModule) {\n      // Add the declaration to the first module that references it.\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      // In this case, the name was implicitly provided by two independent\n      // modules. We need to move this code up to a common module.\n      String parentNamespace = namespace.substring(0, namespace.indexOf('.'));\n      ProvidedName parentName = providedNames.get(parentNamespace);\n      Preconditions.checkNotNull(parentName);\n      Preconditions.checkNotNull(parentName.replacementNode);\n\n      Node newNodeParent = parentName.replacementNode.getParent();\n      newNodeParent.addChildAfter(replacementNode, parentName.replacementNode);\n      compiler.reportCodeChange();\n    }\n\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..b29cf68d 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -744,69 +744,66 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n      * If we're providing a name with a duplicate definition, then make sure\n      * that definition becomes a declaration.\n      */\n-    void replace() {\n-      if (firstNode == null) {\n-        // Don't touch the base case ('goog').\n-        replacementNode = candidateDefinition;\n-        return;\n-      }\n+void replace() {\n+  if (firstNode == null) {\n+    // Don't touch the base case ('goog').\n+    replacementNode = candidateDefinition;\n+    return;\n+  }\n \n-      // Handle the case where there is a duplicate definition for an explicitly\n-      // provided symbol.\n-      if (candidateDefinition != null && explicitNode != null) {\n-        explicitNode.detachFromParent();\n-        compiler.reportCodeChange();\n+  // Handle the case where there is a duplicate definition for an explicitly\n+  // provided symbol.\n+  if (candidateDefinition != null && explicitNode != null) {\n+    explicitNode.getParent().replaceChild(explicitNode, candidateDefinition);\n+    compiler.reportCodeChange();\n \n-        // Does this need a VAR keyword?\n-        replacementNode = candidateDefinition;\n-        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n-          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n-          Node assignNode = candidateDefinition.getFirstChild();\n-          Node nameNode = assignNode.getFirstChild();\n-          if (nameNode.getType() == Token.NAME) {\n-            // Need to convert this assign to a var declaration.\n-            Node valueNode = nameNode.getNext();\n-            assignNode.removeChild(nameNode);\n-            assignNode.removeChild(valueNode);\n-            nameNode.addChildToFront(valueNode);\n-            Node varNode = new Node(Token.VAR, nameNode);\n-            varNode.copyInformationFrom(candidateDefinition);\n-            candidateDefinition.getParent().replaceChild(\n-                candidateDefinition, varNode);\n-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n-            compiler.reportCodeChange();\n-            replacementNode = varNode;\n-          }\n-        }\n-      } else {\n-        // Handle the case where there's not a duplicate definition.\n-        replacementNode = createDeclarationNode();\n-        if (firstModule == minimumModule) {\n-          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n-        } else {\n-          // In this case, the name was implicitly provided by two independent\n-          // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n-          if (indexOfDot == -1) {\n-            // Any old place is fine.\n-            compiler.getNodeForCodeInsertion(minimumModule)\n-                .addChildToBack(replacementNode);\n-          } else {\n-            // Add it after the parent namespace.\n-            ProvidedName parentName =\n-                providedNames.get(namespace.substring(0, indexOfDot));\n-            Preconditions.checkNotNull(parentName);\n-            Preconditions.checkNotNull(parentName.replacementNode);\n-            parentName.replacementNode.getParent().addChildAfter(\n-                replacementNode, parentName.replacementNode);\n-          }\n-        }\n-        if (explicitNode != null) {\n-          explicitNode.detachFromParent();\n-        }\n+    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n+      // Convert the assignment to a variable declaration if necessary.\n+      Node assignNode = candidateDefinition.getFirstChild();\n+      Node nameNode = assignNode.getFirstChild();\n+      Node valueNode = nameNode.getNext();\n+      if (nameNode.getType() == Token.NAME && !NodeUtil.isNameDeclaration(assignNode)) {\n+        Node varNode = new Node(Token.VAR, nameNode.detachFromParent());\n+        varNode.addChildToBack(valueNode.detachFromParent());\n+        varNode.useSourceInfoIfMissingFrom(candidateDefinition);\n+        candidateDefinition.replaceChild(assignNode, varNode);\n         compiler.reportCodeChange();\n+        replacementNode = varNode;\n+      } else {\n+        replacementNode = candidateDefinition;\n       }\n+    } else if (NodeUtil.isNameDeclaration(candidateDefinition)) {\n+      replacementNode = candidateDefinition;\n+    } else {\n+      throw new IllegalStateException(\n+          \"unexpected candidateDefinition type: \" + candidateDefinition.getToken());\n     }\n+  } else {\n+    // Handle the case where there's not a duplicate definition.\n+    replacementNode = createDeclarationNode();\n+\n+    if (firstModule == minimumModule) {\n+      // Add the declaration to the first module that references it.\n+      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n+    } else {\n+      // In this case, the name was implicitly provided by two independent\n+      // modules. We need to move this code up to a common module.\n+      String parentNamespace = namespace.substring(0, namespace.indexOf('.'));\n+      ProvidedName parentName = providedNames.get(parentNamespace);\n+      Preconditions.checkNotNull(parentName);\n+      Preconditions.checkNotNull(parentName.replacementNode);\n+\n+      Node newNodeParent = parentName.replacementNode.getParent();\n+      newNodeParent.addChildAfter(replacementNode, parentName.replacementNode);\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (explicitNode != null) {\n+      explicitNode.detachFromParent();\n+    }\n+    compiler.reportCodeChange();\n+  }\n+}\n \n     /**\n      * Create the declaration node for this name, without inserting it",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}