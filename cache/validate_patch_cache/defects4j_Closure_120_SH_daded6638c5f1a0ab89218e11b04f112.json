{
    "patch": "          // Only one assignment is allowed outside a loop.\n          int assignmentCount = 0;\n          for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n            if (references.get(i).isAssignment()) {\n              assignmentCount++;\n            }\n          }\n          return assignmentCount <= 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..77663f95 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Only one assignment is allowed outside a loop.\n+          int assignmentCount = 0;\n+          for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n+            if (references.get(i).isAssignment()) {\n+              assignmentCount++;\n+            }\n+          }\n+          return assignmentCount <= 1;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}