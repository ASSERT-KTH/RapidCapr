{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] expandedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = expandedSimplex;\n            } else {\n                // accept the reflected point\n                simplex = new RealPointValuePair[] {best, reflected, original[1], original[2]};\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[] {best};\n            for (int i = 1; i < original.length; i++) {\n                final RealPointValuePair ri = original[i];\n                contractedSimplex[i] = new RealPointValuePair(addAndDivide(best.getPointRef(), ri.getPointRef(), 2.0), evaluate(addAndDivide(best.getPointRef(), ri.getPointRef(), 2.0)));\n            }\n            simplex = contractedSimplex;\n        } else if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex[original.length - 1] = contracted;\n            Arrays.sort(simplex, comparator);\n        } else {\n            // check convergence\n            return;\n        }\n\n    }\n}\n\nprivate double[] addAndDivide(double[] a, double[] b, double divisor) {\n    double[] result = new double[a.length];\n    for (int i = 0; i < a.length; i++) {\n        result[i] = (a[i] + b[i]) / divisor;\n    }\n    return result;\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6a08325e7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,65 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] expandedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = expandedSimplex;\n+            } else {\n+                // accept the reflected point\n+                simplex = new RealPointValuePair[] {best, reflected, original[1], original[2]};\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n-                return;\n-            }\n+        }\n \n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n+            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[] {best};\n+            for (int i = 1; i < original.length; i++) {\n+                final RealPointValuePair ri = original[i];\n+                contractedSimplex[i] = new RealPointValuePair(addAndDivide(best.getPointRef(), ri.getPointRef(), 2.0), evaluate(addAndDivide(best.getPointRef(), ri.getPointRef(), 2.0)));\n+            }\n+            simplex = contractedSimplex;\n+        } else if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex[original.length - 1] = contracted;\n+            Arrays.sort(simplex, comparator);\n+        } else {\n+            // check convergence\n+            return;\n         }\n \n     }\n+}\n+\n+private double[] addAndDivide(double[] a, double[] b, double divisor) {\n+    double[] result = new double[a.length];\n+    for (int i = 0; i < a.length; i++) {\n+        result[i] = (a[i] + b[i]) / divisor;\n+    }\n+    return result;\n+}\n+\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}