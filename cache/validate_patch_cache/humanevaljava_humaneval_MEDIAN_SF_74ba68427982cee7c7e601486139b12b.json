{
    "patch": "public static double median(int[] list) {\n    if (list == null || list.length == 0) {\n        throw new IllegalArgumentException(\"List cannot be null or empty\");\n    }\n    \n    int n = list.length;\n    int middleIndex = n / 2;\n    int[] sortedList = Arrays.copyOf(list, n);\n    Arrays.sort(sortedList);\n\n    if (n % 2 == 0) {\n        return (double) (sortedList[middleIndex] + sortedList[middleIndex - 1]) / 2;\n    } else {\n        return (double) sortedList[middleIndex];\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MEDIAN.java b/src/main/java/humaneval/buggy/MEDIAN.java\nindex 6ba9604..791620c 100644\n--- a/src/main/java/humaneval/buggy/MEDIAN.java\n+++ b/src/main/java/humaneval/buggy/MEDIAN.java\n@@ -9,13 +9,20 @@ import java.util.Arrays;\n 15.0 */\n \n public class MEDIAN {\n-    public static double median(int[] list) {\n-        Arrays.sort(list);\n+public static double median(int[] list) {\n+    if (list == null || list.length == 0) {\n+        throw new IllegalArgumentException(\"List cannot be null or empty\");\n+    }\n+    \n+    int n = list.length;\n+    int middleIndex = n / 2;\n+    int[] sortedList = Arrays.copyOf(list, n);\n+    Arrays.sort(sortedList);\n \n-        if (list.length % 2 == 1) {\n-            return list[(int) (list.length / 2)];\n-        } else {\n-            return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n-        }\n+    if (n % 2 == 0) {\n+        return (double) (sortedList[middleIndex] + sortedList[middleIndex - 1]) / 2;\n+    } else {\n+        return (double) sortedList[middleIndex];\n     }\n }\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}