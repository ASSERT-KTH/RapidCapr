{
    "patch": "protected BasePeriod(long duration) {\n    long remainder = duration;\n    int weeks = 0;\n    int days = 0;\n    int hours = 0;\n    int minutes = 0;\n    int seconds = 0;\n    if (duration >= DateTimeConstants.MILLIS_PER_WEEK) {\n        weeks = (int) (duration / DateTimeConstants.MILLIS_PER_WEEK);\n        remainder = duration % DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    if (remainder >= DateTimeConstants.MILLIS_PER_DAY) {\n        days = (int) (remainder / DateTimeConstants.MILLIS_PER_DAY);\n        remainder = remainder % DateTimeConstants.MILLIS_PER_DAY;\n    }\n    if (remainder >= DateTimeConstants.MILLIS_PER_HOUR) {\n        hours = (int) (remainder / DateTimeConstants.MILLIS_PER_HOUR);\n        remainder = remainder % DateTimeConstants.MILLIS_PER_HOUR;\n    }\n    if (remainder >= DateTimeConstants.MILLIS_PER_MINUTE) {\n        minutes = (int) (remainder / DateTimeConstants.MILLIS_PER_MINUTE);\n        remainder = remainder % DateTimeConstants.MILLIS_PER_MINUTE;\n    }\n    if (remainder >= DateTimeConstants.MILLIS_PER_SECOND) {\n        seconds = (int) (remainder / DateTimeConstants.MILLIS_PER_SECOND);\n    }\n    this(weeks, days, hours, minutes, seconds, 0, 0, 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..2e9f6366 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,34 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+protected BasePeriod(long duration) {\n+    long remainder = duration;\n+    int weeks = 0;\n+    int days = 0;\n+    int hours = 0;\n+    int minutes = 0;\n+    int seconds = 0;\n+    if (duration >= DateTimeConstants.MILLIS_PER_WEEK) {\n+        weeks = (int) (duration / DateTimeConstants.MILLIS_PER_WEEK);\n+        remainder = duration % DateTimeConstants.MILLIS_PER_WEEK;\n+    }\n+    if (remainder >= DateTimeConstants.MILLIS_PER_DAY) {\n+        days = (int) (remainder / DateTimeConstants.MILLIS_PER_DAY);\n+        remainder = remainder % DateTimeConstants.MILLIS_PER_DAY;\n+    }\n+    if (remainder >= DateTimeConstants.MILLIS_PER_HOUR) {\n+        hours = (int) (remainder / DateTimeConstants.MILLIS_PER_HOUR);\n+        remainder = remainder % DateTimeConstants.MILLIS_PER_HOUR;\n+    }\n+    if (remainder >= DateTimeConstants.MILLIS_PER_MINUTE) {\n+        minutes = (int) (remainder / DateTimeConstants.MILLIS_PER_MINUTE);\n+        remainder = remainder % DateTimeConstants.MILLIS_PER_MINUTE;\n+    }\n+    if (remainder >= DateTimeConstants.MILLIS_PER_SECOND) {\n+        seconds = (int) (remainder / DateTimeConstants.MILLIS_PER_SECOND);\n+    }\n+    this(weeks, days, hours, minutes, seconds, 0, 0, 0);\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}