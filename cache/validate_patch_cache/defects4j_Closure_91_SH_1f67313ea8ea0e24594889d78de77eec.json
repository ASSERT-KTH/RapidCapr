{
    "patch": "      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n              jsDoc.isInterface() ||\n              jsDoc.hasThisType() ||\n              jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent == null ? -1 : parent.getType();\n      if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n              pType == Token.CATCH ||\n              NodeUtil.isExpressionNode(parent))) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isGet(lhs) &&\n            NodeUtil.isObjectLiteral(rhs) &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n\n    // Always traverse the body of a function or constructor, even if the\n    // function itself is not traversed. There may be additional declarations\n    // or statements present, which are not covered by the function scope.\n    if ((n.getType() == Token.FUNCTION && !NodeUtil.isFunctionDeclaration(n)) ||\n        n.getType() == Token.SCRIPT) {\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..6a656166 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,49 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+              jsDoc.isInterface() ||\n+              jsDoc.hasThisType() ||\n+              jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent == null ? -1 : parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME ||\n+              pType == Token.ASSIGN ||\n+              pType == Token.CATCH ||\n+              NodeUtil.isExpressionNode(parent))) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (NodeUtil.isGet(lhs) &&\n+            NodeUtil.isObjectLiteral(rhs) &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    // Always traverse the body of a function or constructor, even if the\n+    // function itself is not traversed. There may be additional declarations\n+    // or statements present, which are not covered by the function scope.\n+    if ((n.getType() == Token.FUNCTION && !NodeUtil.isFunctionDeclaration(n)) ||\n+        n.getType() == Token.SCRIPT) {\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}