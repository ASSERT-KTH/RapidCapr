{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Check if all parameters are unreferenced and replace the function with `null`. \n      Node lastArg = argList.getFirstChild();\n      boolean allArgsUnreferenced = true;\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (referenced.contains(var)) {\n          allArgsUnreferenced = false;\n          break;\n        }\n        lastArg = lastArg.getNext();\n      }\n      if (allArgsUnreferenced) {\n        NodeUtil.deleteNode(function, compiler);\n        function = IR.nullNode();\n        function.useSourceInfoIfMissingFromForTree(fnScope.getRootNode());\n        fnScope.replaceWith(function);\n        compiler.reportCodeChange();\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..25c8c6be 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Check if all parameters are unreferenced and replace the function with `null`. \n+      Node lastArg = argList.getFirstChild();\n+      boolean allArgsUnreferenced = true;\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (referenced.contains(var)) {\n+          allArgsUnreferenced = false;\n+          break;\n+        }\n+        lastArg = lastArg.getNext();\n+      }\n+      if (allArgsUnreferenced) {\n+        NodeUtil.deleteNode(function, compiler);\n+        function = IR.nullNode();\n+        function.useSourceInfoIfMissingFromForTree(fnScope.getRootNode());\n+        fnScope.replaceWith(function);\n+        compiler.reportCodeChange();\n+        return;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}