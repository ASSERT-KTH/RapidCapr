{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offset = getOffset(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n    long previousTransition = previousTransition(instantLocal);\n\n    // If instantLocal is exactly at a transition, return it's offset\n    if (instantLocal == nextTransition - offset || instantLocal == previousTransition - getOffset(previousTransition - 1)) {\n        return offset;\n    }\n\n    // If we're in the transition gap, step to outside it\n    if (offset > getOffset(nextTransition - offset)) {\n        instantLocal = nextTransition - offset;\n        offset = getOffset(instantLocal);\n    } else if (offset < getOffset(previousTransition - getOffset(previousTransition - 1))) {\n        instantLocal = previousTransition - getOffset(previousTransition - 1);\n        offset = getOffset(instantLocal);\n    }\n\n    // step forward in increments of one minute until we find a time with a stable offset\n    long nextLocal = nextTransition(instantLocal);\n    while (true) {\n        int nextOffset = getOffset(nextLocal);\n        if (nextOffset == offset) {\n            break;\n        } else if (nextOffset > offset) {\n            if (nextLocal == nextTransition - offset) {\n                break;\n            }\n            offset = nextOffset;\n            instantLocal = nextLocal - nextOffset;\n            nextLocal = nextTransition(instantLocal);\n        } else {\n            if (nextLocal == previousTransition - getOffset(previousTransition - 1)) {\n                throw new IllegalArgumentException(\n                    \"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n            }\n            offset = nextOffset;\n            instantLocal = nextLocal - nextOffset;\n            nextLocal = previousTransition(instantLocal);\n        }\n    }\n\n    return offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d039bf60 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,52 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offset = getOffset(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+    long previousTransition = previousTransition(instantLocal);\n+\n+    // If instantLocal is exactly at a transition, return it's offset\n+    if (instantLocal == nextTransition - offset || instantLocal == previousTransition - getOffset(previousTransition - 1)) {\n+        return offset;\n+    }\n+\n+    // If we're in the transition gap, step to outside it\n+    if (offset > getOffset(nextTransition - offset)) {\n+        instantLocal = nextTransition - offset;\n+        offset = getOffset(instantLocal);\n+    } else if (offset < getOffset(previousTransition - getOffset(previousTransition - 1))) {\n+        instantLocal = previousTransition - getOffset(previousTransition - 1);\n+        offset = getOffset(instantLocal);\n+    }\n+\n+    // step forward in increments of one minute until we find a time with a stable offset\n+    long nextLocal = nextTransition(instantLocal);\n+    while (true) {\n+        int nextOffset = getOffset(nextLocal);\n+        if (nextOffset == offset) {\n+            break;\n+        } else if (nextOffset > offset) {\n+            if (nextLocal == nextTransition - offset) {\n+                break;\n+            }\n+            offset = nextOffset;\n+            instantLocal = nextLocal - nextOffset;\n+            nextLocal = nextTransition(instantLocal);\n+        } else {\n+            if (nextLocal == previousTransition - getOffset(previousTransition - 1)) {\n+                throw new IllegalArgumentException(\n+                    \"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n             }\n+            offset = nextOffset;\n+            instantLocal = nextLocal - nextOffset;\n+            nextLocal = previousTransition(instantLocal);\n         }\n-        return offsetAdjusted;\n     }\n \n+    return offset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}