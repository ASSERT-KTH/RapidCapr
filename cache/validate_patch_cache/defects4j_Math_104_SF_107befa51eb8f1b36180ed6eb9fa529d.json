{
    "patch": "import org.apache.commons.math3.util.*;\n\npublic class GammaFunctions {\n\n    public static double regularizedGammaP(double a, double x) {\n        if (Double.isNaN(a) || Double.isInfinite(a) ||\n                Double.isNaN(x) || Double.isInfinite(x)) {\n            return Double.NaN;\n        }\n        if (a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n\n        double d = 1.0 / (a + 1e-15);\n        double m = d * x;\n        double s = 1.0 + m;\n        double term = 1.0 / a;\n        double sum = term;\n\n        int i = 1;\n        while (Math.abs(term) > 1e-15 * Math.abs(sum)) {\n            term *= m / (a + i);\n            sum += term;\n            i++;\n\n            if (i > 1000) {\n                throw new RuntimeException(\"Over 1000 iterations in regularizedGammaP\");\n            }\n        }\n\n        return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * Math.pow(s, a) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d0ff8afb9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.*;\n+\n+public class GammaFunctions {\n+\n+    public static double regularizedGammaP(double a, double x) {\n+        if (Double.isNaN(a) || Double.isInfinite(a) ||\n+                Double.isNaN(x) || Double.isInfinite(x)) {\n+            return Double.NaN;\n+        }\n+        if (a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+\n+        double d = 1.0 / (a + 1e-15);\n+        double m = d * x;\n+        double s = 1.0 + m;\n+        double term = 1.0 / a;\n+        double sum = term;\n+\n+        int i = 1;\n+        while (Math.abs(term) > 1e-15 * Math.abs(sum)) {\n+            term *= m / (a + i);\n+            sum += term;\n+            i++;\n+\n+            if (i > 1000) {\n+                throw new RuntimeException(\"Over 1000 iterations in regularizedGammaP\");\n+            }\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * Math.pow(s, a) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}