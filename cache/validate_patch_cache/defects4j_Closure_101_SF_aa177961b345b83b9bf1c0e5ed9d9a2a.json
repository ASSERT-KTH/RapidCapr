{
    "patch": "protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level;\n    try {\n        level = CompilationLevel.valueOf(flags.compilation_level.name());\n    } catch (IllegalArgumentException e) {\n        throw new RuntimeException(\"Invalid compilation level: \" + flags.compilation_level.name(), e);\n    }\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel;\n    try {\n        wLevel = WarningLevel.valueOf(flags.warning_level.name());\n    } catch (IllegalArgumentException e) {\n        throw new RuntimeException(\"Invalid warning level: \" + flags.warning_level.name(), e);\n    }\n    wLevel.setOptionsForWarningLevel(options);\n    FormattingOptions formattingOptions = new FormattingOptions();\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(formattingOptions);\n    }\n    formattingOptions.setOptionsForCompilationLevel(options);\n\n    // Fix the bug: set options.closurePass to flags.process_closure_primitives\n    options.closurePass = flags.process_closure_primitives;\n\n    initOptionsFromFlags(options);\n    return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..a84718fc 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,38 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n+    CompilationLevel level;\n+    try {\n+        level = CompilationLevel.valueOf(flags.compilation_level.name());\n+    } catch (IllegalArgumentException e) {\n+        throw new RuntimeException(\"Invalid compilation level: \" + flags.compilation_level.name(), e);\n+    }\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        level.setDebugOptionsForCompilationLevel(options);\n+    }\n+    WarningLevel wLevel;\n+    try {\n+        wLevel = WarningLevel.valueOf(flags.warning_level.name());\n+    } catch (IllegalArgumentException e) {\n+        throw new RuntimeException(\"Invalid warning level: \" + flags.warning_level.name(), e);\n     }\n-\n-    WarningLevel wLevel = flags.warning_level;\n     wLevel.setOptionsForWarningLevel(options);\n+    FormattingOptions formattingOptions = new FormattingOptions();\n     for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n-    }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+        formattingOption.applyToOptions(formattingOptions);\n     }\n+    formattingOptions.setOptionsForCompilationLevel(options);\n+\n+    // Fix the bug: set options.closurePass to flags.process_closure_primitives\n+    options.closurePass = flags.process_closure_primitives;\n \n     initOptionsFromFlags(options);\n     return options;\n-  }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}