{
    "patch": "\n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        int parsedOffset = 0;\n        DateTimeZone parsedZone = null;\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(true, text));\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                parsedOffset = bucket.getOffsetInteger();\n                parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            }\n            else if (bucket.getZone() != null) {\n                parsedOffset = bucket.getZone().getOffset(instantMillis);\n                parsedZone = bucket.getZone();\n            }\n        } else {\n            parsedZone = chrono.getZone();\n        }\n        if (parsedZone != null) {\n            chrono = chrono.withZone(parsedZone);\n        }\n        instant.setChronology(selectChronology(chrono));\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (parsedZone != null) {\n            instant.setZone(parsedZone);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..4e1d3421 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,36 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        long instantMillis = instant.getMillis();\n+        int parsedOffset = 0;\n+        DateTimeZone parsedZone = null;\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantMillis, chrono, iLocale, iPivotYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        instant.setMillis(bucket.computeMillis(true, text));\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                parsedOffset = bucket.getOffsetInteger();\n+                parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            }\n+            else if (bucket.getZone() != null) {\n+                parsedOffset = bucket.getZone().getOffset(instantMillis);\n+                parsedZone = bucket.getZone();\n+            }\n+        } else {\n+            parsedZone = chrono.getZone();\n+        }\n+        if (parsedZone != null) {\n             chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n+        instant.setChronology(selectChronology(chrono));\n         if (iZone != null) {\n             instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+        } else if (parsedZone != null) {\n+            instant.setZone(parsedZone);\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}