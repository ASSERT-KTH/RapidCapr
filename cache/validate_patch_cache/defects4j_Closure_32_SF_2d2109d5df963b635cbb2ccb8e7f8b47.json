{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    char prevChar = '\\0';\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            if (builder.length() > 0 && prevChar != ' ' && prevChar != '*' && !Character.isWhitespace(prevChar)) {\n              builder.append(' ');\n            }\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n          ignoreStar = true;\n          prevChar = '*';\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE && !ignoreStar) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = false;\n          prevChar = '\\n';\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n\n          builder.append(line);\n          if (!line.isEmpty()) {\n            prevChar = line.charAt(line.length() - 1);\n          }\n          token = next();\n      }\n    } while (true);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..092aa130 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,7 +1326,7 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n@@ -1351,6 +1351,7 @@ public final class JsDocInfoParser {\n     token = next();\n \n     boolean ignoreStar = false;\n+    char prevChar = '\\0';\n \n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n@@ -1361,24 +1362,27 @@ public final class JsDocInfoParser {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n+            if (builder.length() > 0 && prevChar != ' ' && prevChar != '*' && !Character.isWhitespace(prevChar)) {\n+              builder.append(' ');\n+            }\n           } else {\n             // The star is part of the comment.\n-            if (builder.length() > 0) {\n+            if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n           }\n-\n+          ignoreStar = true;\n+          prevChar = '*';\n           token = next();\n           continue;\n \n         case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n+          if (option != WhitespaceOption.SINGLE_LINE && !ignoreStar) {\n             builder.append(\"\\n\");\n           }\n-\n-          ignoreStar = true;\n+          ignoreStar = false;\n+          prevChar = '\\n';\n           token = next();\n           continue;\n \n@@ -1386,20 +1390,13 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n+              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n-\n             if (option != WhitespaceOption.PRESERVE) {\n               multilineText = multilineText.trim();\n             }\n-\n             int endLineno = stream.getLineno();\n             int endCharno = stream.getCharno();\n \n@@ -1407,11 +1404,10 @@ public final class JsDocInfoParser {\n               jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                   endLineno, endCharno);\n             }\n-\n             return new ExtractionInfo(multilineText, token);\n           }\n \n-          if (builder.length() > 0) {\n+          if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n             builder.append(' ');\n           }\n           builder.append(toString(token));\n@@ -1419,10 +1415,13 @@ public final class JsDocInfoParser {\n           line = stream.getRemainingJSDocLine();\n \n           if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n+            line = line.trim();\n           }\n \n           builder.append(line);\n+          if (!line.isEmpty()) {\n+            prevChar = line.charAt(line.length() - 1);\n+          }\n           token = next();\n       }\n     } while (true);",
    "result_reason": "junit.framework.AssertionFailedError: Property bar of type SubFoo has been deprecated: CONTRIBUTORS COPYING README all_tests build build.xml closure-compiler.pom contrib defects4j.build.properties externs failing_tests gen javadoc lib src test tools",
    "test_result": "FAIL"
}