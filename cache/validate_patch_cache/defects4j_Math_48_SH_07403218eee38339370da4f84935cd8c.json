{
    "patch": "        // Add evaluation counter\n        int evalCount = 2;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Check if maximum evaluations reached\n            if (evalCount >= getMaxEvaluations()) {\n                throw new ConvergenceException(\"Maximum number of evaluations reached\");\n            }\n\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // Increment evaluation counter\n            evalCount++;\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The value of x1 has switched to the other bound, thus inverting\n                // the interval.\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Detect early that algorithm is stuck, instead of waiting\n                    // for the maximum number of iterations to be exceeded.\n                    if (evalCount % 100 == 0) {\n                        if (FastMath.abs(f1) >= FastMath.abs(f0)) {\n                            // Last three values of x were very close to each other\n                            throw new ConvergenceException(\"Regula Falsi algorithm is stuck\");\n                        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..160c58651 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,53 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+        // Add evaluation counter\n+        int evalCount = 2;\n+\n+        // Keep finding better approximations.\n+        while (true) {\n+            // Check if maximum evaluations reached\n+            if (evalCount >= getMaxEvaluations()) {\n+                throw new ConvergenceException(\"Maximum number of evaluations reached\");\n+            }\n+\n+            // Calculate the next approximation.\n+            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n+            final double fx = computeObjectiveValue(x);\n+\n+            // Increment evaluation counter\n+            evalCount++;\n+\n+            // If the new approximation is the exact root, return it. Since\n+            // this is not an under-approximation or an over-approximation,\n+            // we can return it regardless of the allowed solutions.\n+            if (fx == 0.0) {\n+                return x;\n+            }\n+\n+            // Update the bounds with the new approximation.\n+            if (f1 * fx < 0) {\n+                // The value of x1 has switched to the other bound, thus inverting\n+                // the interval.\n+                x0 = x1;\n+                f0 = f1;\n+                inverted = !inverted;\n+            } else {\n+                switch (method) {\n+                case ILLINOIS:\n+                    f0 *= 0.5;\n+                    break;\n+                case PEGASUS:\n+                    f0 *= f1 / (f1 + fx);\n+                    break;\n+                case REGULA_FALSI:\n+                    // Detect early that algorithm is stuck, instead of waiting\n+                    // for the maximum number of iterations to be exceeded.\n+                    if (evalCount % 100 == 0) {\n+                        if (FastMath.abs(f1) >= FastMath.abs(f0)) {\n+                            // Last three values of x were very close to each other\n+                            throw new ConvergenceException(\"Regula Falsi algorithm is stuck\");\n+                        }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}