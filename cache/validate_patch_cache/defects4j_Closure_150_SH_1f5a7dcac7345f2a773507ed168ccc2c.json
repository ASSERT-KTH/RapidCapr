{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n        if (parent.getType() == Token.LP) {\n          handleFunctionInputs(parent);\n          return;\n        }\n        if (parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..beae0b85 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,17 +1451,23 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+        if (parent.getType() == Token.LP) {\n+          handleFunctionInputs(parent);\n+          return;\n+        }\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}