{
    "patch": "public Fraction reduce() {\n    int gcd = gcd(Math.abs(numerator), denominator);\n\n    // check for numerator being 0\n    if (numerator == 0) {\n        return Fraction.ZERO;\n    }\n\n    // check if fraction can be further reduced\n    if (gcd > 1) {\n        return new Fraction(numerator / gcd, denominator / gcd);\n    }\n\n    return this;\n}\n\nprivate int gcd(int a, int b) {\n    while (b != 0) {\n        int t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..3341e7dc 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,31 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int gcd = gcd(Math.abs(numerator), denominator);\n+\n+    // check for numerator being 0\n+    if (numerator == 0) {\n+        return Fraction.ZERO;\n+    }\n+\n+    // check if fraction can be further reduced\n+    if (gcd > 1) {\n+        return new Fraction(numerator / gcd, denominator / gcd);\n     }\n \n+    return this;\n+}\n+\n+private int gcd(int a, int b) {\n+    while (b != 0) {\n+        int t = b;\n+        b = a % b;\n+        a = t;\n+    }\n+    return a;\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<0/1> was not:<0/1>",
    "test_result": "FAIL"
}