{
    "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    Map<Integer, List<Integer>> digits_number = new HashMap<Integer, List<Integer>>();\n\n    for (int i = 0; i < nums.length; i++) {\n        int n = nums[i];\n        int absN = Math.abs(n);\n        int digit = 0;\n        for (int j = 0; j < (absN + \"\").toCharArray().length; j += 1){\n            digit += ((absN + \"\").toCharArray()[j] - '0');\n        }\n        digits.add(digit * Integer.signum(n));\n        if (!digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(n);\n    }\n\n    Collections.sort(digits);\n\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        List<Integer> numsWithSameDigit = digits_number.get(digits.get(i));\n        if (numsWithSameDigit.size() > 1) {\n            Collections.sort(numsWithSameDigit, new Comparator<Integer>() {\n                @Override\n                public int compare(Integer o1, Integer o2) {\n                    return Integer.compare(Arrays.asList(nums).indexOf(o1), Arrays.asList(nums).indexOf(o2));\n                }\n            });\n        }\n        result.addAll(numsWithSameDigit);\n    }\n\n    return result.toArray(new Integer[] {});\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\nindex 4e6cd94..48f05a5 100644\n--- a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n+++ b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n@@ -14,32 +14,40 @@ For example:\n >>> order_by_points([]) == [] */\n \n public class ORDER_BY_POINTS {\n-    public static Integer[] order_by_points(Integer[] nums) {\n-        ArrayList<Integer> digits = new ArrayList<Integer>();\n-        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n-\n-        for (int i = 0; i < nums.length; i += 1){\n-            int neg = 1;\n-            int n = nums[i];\n-            if (n < 0) {\n-                n = -1 * n;\n-                neg = -1;\n-            }\n-            int digit = 0;\n-            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n-                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n-            }\n-            digits.add(digit);\n-            if (! digits_number.containsKey(digit))\n-                digits_number.put(digit, new ArrayList<Integer>());\n-            digits_number.get(digit).add(nums[i]);\n+public static Integer[] order_by_points(Integer[] nums) {\n+    ArrayList<Integer> digits = new ArrayList<Integer>();\n+    Map<Integer, List<Integer>> digits_number = new HashMap<Integer, List<Integer>>();\n+\n+    for (int i = 0; i < nums.length; i++) {\n+        int n = nums[i];\n+        int absN = Math.abs(n);\n+        int digit = 0;\n+        for (int j = 0; j < (absN + \"\").toCharArray().length; j += 1){\n+            digit += ((absN + \"\").toCharArray()[j] - '0');\n         }\n-        Collections.sort(digits);\n-        \n-        ArrayList<Integer> result = new ArrayList<Integer>();\n-        for (int i = 0; i < digits.size(); i += 1) {\n-            result.addAll(digits_number.get(digits.get(i)));\n+        digits.add(digit * Integer.signum(n));\n+        if (!digits_number.containsKey(digit)) {\n+            digits_number.put(digit, new ArrayList<Integer>());\n         }\n-        return result.toArray(new Integer[] {});\n+        digits_number.get(digit).add(n);\n     }\n+\n+    Collections.sort(digits);\n+\n+    ArrayList<Integer> result = new ArrayList<Integer>();\n+    for (int i = 0; i < digits.size(); i += 1) {\n+        List<Integer> numsWithSameDigit = digits_number.get(digits.get(i));\n+        if (numsWithSameDigit.size() > 1) {\n+            Collections.sort(numsWithSameDigit, new Comparator<Integer>() {\n+                @Override\n+                public int compare(Integer o1, Integer o2) {\n+                    return Integer.compare(Arrays.asList(nums).indexOf(o1), Arrays.asList(nums).indexOf(o2));\n+                }\n+            });\n+        }\n+        result.addAll(numsWithSameDigit);\n+    }\n+\n+    return result.toArray(new Integer[] {});\n+}\n }",
    "result_reason": " /tmp/humaneval-ORDER_BY_POINTS/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java:[19,5] cannot find symbol",
    "test_result": "ERROR"
}