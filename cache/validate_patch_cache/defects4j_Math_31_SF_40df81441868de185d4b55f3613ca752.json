{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n    do {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double deltaN;\n        if (FastMath.abs(b) < small) {\n            deltaN = Double.POSITIVE_INFINITY;\n        } else {\n            deltaN = a / (b + deltaNumeratorPlusDeltaDenominator(a, b, cPrev) / cPrev);\n        }\n\n        final double hNext = hPrev * deltaN + p0;\n        final double cNext = cPrev * deltaN + q1;\n        if (Double.isInfinite(hNext) || Double.isInfinite(cNext)) {\n            final double scaleFactor = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            if (scaleFactor <= 0) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            deltaN = deltaDenominator(a, b, cPrev, q1, epsilon) / (b + deltaNumerator(a, b, cPrev, q1, epsilon) / cPrev);\n            hNext = hPrev * deltaN + p0;\n            cNext = cPrev * deltaN + q1;\n            if (Double.isInfinite(hNext) || Double.isInfinite(cNext)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n\n        if (Double.isNaN(hNext) || Double.isNaN(cNext)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        q1 = cNext;\n        p0 = hPrev;\n        hPrev = hNext;\n        cPrev = cNext;\n        n++;\n    } while (n <= maxIterations);\n\n    if (n > maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}\n\nprivate double deltaNumeratorPlusDeltaDenominator(double a, double b, double c) {\n    final double max = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n    if (max == 0) {\n        return 0;\n    } else {\n        final double aa = a / max;\n        final double bb = b / max;\n        final double cc = c / max;\n        return aa * bb * cc * (aa + bb + 2.0 * cc) / (bb + cc) / (cc + aa);\n    }\n}\n\nprivate double deltaDenominator(double a, double b, double c, double q1, double epsilon) {\n    double delta = 1.0;\n    double deltaN = delta;\n    double deltaD = 0.0;\n\n    for (int i = 1; i <= 100; i++) {\n        final double aN = -a * delta * delta;\n        final double bN = q1 + b * delta * delta;\n        final double cN = a * c - q1 * delta * delta;\n\n        if (FastMath.abs(bN) < 1e-50 || FastMath.abs(aN) < 1e-50) {\n            break;\n        }\n\n        deltaN = cN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaN);\n        deltaD = aN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaD);\n\n        final double deltaNext = deltaN + deltaD;\n        if (FastMath.abs(deltaNext / delta - 1.0) < epsilon) {\n            delta = deltaNext;\n            break;\n        }\n\n        delta = deltaNext;\n    }\n\n    return delta;\n}\n\nprivate double deltaNumerator(double a, double b, double c, double q1, double epsilon) {\n    double delta = 1.0;\n    double deltaN = delta;\n    double deltaD = 0.0;\n\n    for (int i = 1; i <= 100; i++) {\n        final double aN = -a * delta * delta;\n        final double bN = q1 + b * delta * delta;\n        final double cN = a * c - q1 * delta * delta;\n\n        if (FastMath.abs(bN) < 1e-50 || FastMath.abs(aN) < 1e-50) {\n            break;\n        }\n\n        deltaN = cN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaN);\n        deltaD = aN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaD);\n\n        final double deltaNext = deltaN + deltaD;\n        if (FastMath.abs(deltaNext / delta - 1.0) < epsilon) {\n            delta = deltaNext;\n            break;\n        }\n\n        delta = deltaNext;\n    }\n\n    return a * delta * delta - q1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..35ecb703c 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,136 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+    do {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double deltaN;\n+        if (FastMath.abs(b) < small) {\n+            deltaN = Double.POSITIVE_INFINITY;\n+        } else {\n+            deltaN = a / (b + deltaNumeratorPlusDeltaDenominator(a, b, cPrev) / cPrev);\n         }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n+        final double hNext = hPrev * deltaN + p0;\n+        final double cNext = cPrev * deltaN + q1;\n+        if (Double.isInfinite(hNext) || Double.isInfinite(cNext)) {\n+            final double scaleFactor = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+            if (scaleFactor <= 0) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+            }\n+            deltaN = deltaDenominator(a, b, cPrev, q1, epsilon) / (b + deltaNumerator(a, b, cPrev, q1, epsilon) / cPrev);\n+            hNext = hPrev * deltaN + p0;\n+            cNext = cPrev * deltaN + q1;\n+            if (Double.isInfinite(hNext) || Double.isInfinite(cNext)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n+        }\n \n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+        if (Double.isNaN(hNext) || Double.isNaN(cNext)) {\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n+        }\n \n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n-            }\n+        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            break;\n+        }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n-            }\n+        dPrev = q1;\n+        q1 = cNext;\n+        p0 = hPrev;\n+        hPrev = hNext;\n+        cPrev = cNext;\n+        n++;\n+    } while (n <= maxIterations);\n+\n+    if (n > maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n+    }\n+\n+    return hN;\n+}\n+\n+private double deltaNumeratorPlusDeltaDenominator(double a, double b, double c) {\n+    final double max = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+    if (max == 0) {\n+        return 0;\n+    } else {\n+        final double aa = a / max;\n+        final double bb = b / max;\n+        final double cc = c / max;\n+        return aa * bb * cc * (aa + bb + 2.0 * cc) / (bb + cc) / (cc + aa);\n+    }\n+}\n+\n+private double deltaDenominator(double a, double b, double c, double q1, double epsilon) {\n+    double delta = 1.0;\n+    double deltaN = delta;\n+    double deltaD = 0.0;\n \n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n+    for (int i = 1; i <= 100; i++) {\n+        final double aN = -a * delta * delta;\n+        final double bN = q1 + b * delta * delta;\n+        final double cN = a * c - q1 * delta * delta;\n+\n+        if (FastMath.abs(bN) < 1e-50 || FastMath.abs(aN) < 1e-50) {\n+            break;\n         }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+        deltaN = cN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaN);\n+        deltaD = aN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaD);\n+\n+        final double deltaNext = deltaN + deltaD;\n+        if (FastMath.abs(deltaNext / delta - 1.0) < epsilon) {\n+            delta = deltaNext;\n+            break;\n         }\n \n-        return hN;\n+        delta = deltaNext;\n     }\n \n+    return delta;\n+}\n+\n+private double deltaNumerator(double a, double b, double c, double q1, double epsilon) {\n+    double delta = 1.0;\n+    double deltaN = delta;\n+    double deltaD = 0.0;\n+\n+    for (int i = 1; i <= 100; i++) {\n+        final double aN = -a * delta * delta;\n+        final double bN = q1 + b * delta * delta;\n+        final double cN = a * c - q1 * delta * delta;\n+\n+        if (FastMath.abs(bN) < 1e-50 || FastMath.abs(aN) < 1e-50) {\n+            break;\n+        }\n+\n+        deltaN = cN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaN);\n+        deltaD = aN / (bN + deltaNumeratorPlusDeltaDenominator(aN, bN, cN) / deltaD);\n+\n+        final double deltaNext = deltaN + deltaD;\n+        if (FastMath.abs(deltaNext / delta - 1.0) < epsilon) {\n+            delta = deltaNext;\n+            break;\n+        }\n+\n+        delta = deltaNext;\n+    }\n+\n+    return a * delta * delta - q1;\n+}\n+\n }",
    "result_reason": "error: cannot assign a value to final variable hNext",
    "test_result": "ERROR"
}