{
    "patch": "    switch (node.getToken()) {\n      case CALL:\n        Node child = node.getFirstChild();\n        if (child.isName()) {\n          String functionName = child.getString();\n          if (!functionName.startsWith(\"goog.\") && !functionName.startsWith(\"$\")) {\n            changed.add(functionName);\n          }\n        }\n        break;\n      case FUNCTION:\n        // Do not traverse into nested functions\n        return;\n      default:\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..aa3b8f2c 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,21 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+    switch (node.getToken()) {\n+      case CALL:\n+        Node child = node.getFirstChild();\n+        if (child.isName()) {\n+          String functionName = child.getString();\n+          if (!functionName.startsWith(\"goog.\") && !functionName.startsWith(\"$\")) {\n+            changed.add(functionName);\n+          }\n+        }\n+        break;\n+      case FUNCTION:\n+        // Do not traverse into nested functions\n+        return;\n+      default:\n+        break;\n       }\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}