{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n\n    int lineStart = startCharno;\n\n    boolean ignoreStar = false;\n    boolean preserveLinebreak = false;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            lineStart = stream.getCharno() + 1;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n\n          token = next();\n          ignoreStar = true;\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n            preserveLinebreak = true;\n          } else {\n            builder.append(' ');\n          }\n\n          ignoreStar = false;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          // All tokens must be separated by a space.\n          if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno() + 1;\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, lineStart, endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          } else {\n            if (builder.length() > 0) {\n              if (preserveLinebreak) {\n                builder.append(' ');\n              } else {\n                builder.append(' ');\n                lineStart = stream.getCharno() + 1;\n              }\n            }\n\n            builder.append(toString(token));\n\n            line = stream.getRemainingJSDocLine();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              line = line.trim();\n            }\n\n            builder.append(line);\n            token = next();\n            \n            if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {\n              throw new IllegalArgumentException(\"Annotations are not allowed in multiline comments\");\n            } else {\n              preserveLinebreak = false;\n            }\n          }\n      }\n    } while (true);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..ae559d6f 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,11 +1326,10 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n       return new ExtractionInfo(\"\", token);\n     }\n \n@@ -1348,37 +1347,39 @@ public final class JsDocInfoParser {\n     builder.append(line);\n \n     state = State.SEARCHING_ANNOTATION;\n-    token = next();\n \n-    boolean ignoreStar = false;\n+    int lineStart = startCharno;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+    boolean ignoreStar = false;\n+    boolean preserveLinebreak = false;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n+            lineStart = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n           }\n \n           token = next();\n+          ignoreStar = true;\n           continue;\n \n         case EOL:\n           if (option != WhitespaceOption.SINGLE_LINE) {\n             builder.append(\"\\n\");\n+            preserveLinebreak = true;\n+          } else {\n+            builder.append(' ');\n           }\n \n-          ignoreStar = true;\n+          ignoreStar = false;\n           token = next();\n           continue;\n \n@@ -1386,14 +1387,8 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n+          // All tokens must be separated by a space.\n+          if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n             String multilineText = builder.toString();\n \n             if (option != WhitespaceOption.PRESERVE) {\n@@ -1401,29 +1396,40 @@ public final class JsDocInfoParser {\n             }\n \n             int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+            int endCharno = stream.getCharno() + 1;\n \n             if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n+              jsdocBuilder.markText(multilineText, startLineno, lineStart, endLineno, endCharno);\n             }\n \n             return new ExtractionInfo(multilineText, token);\n-          }\n+          } else {\n+            if (builder.length() > 0) {\n+              if (preserveLinebreak) {\n+                builder.append(' ');\n+              } else {\n+                builder.append(' ');\n+                lineStart = stream.getCharno() + 1;\n+              }\n+            }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+            builder.append(toString(token));\n \n-          line = stream.getRemainingJSDocLine();\n+            line = stream.getRemainingJSDocLine();\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+            if (option != WhitespaceOption.PRESERVE) {\n+              line = line.trim();\n+            }\n \n-          builder.append(line);\n-          token = next();\n+            builder.append(line);\n+            token = next();\n+            \n+            if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {\n+              throw new IllegalArgumentException(\"Annotations are not allowed in multiline comments\");\n+            } else {\n+              preserveLinebreak = false;\n+            }\n+          }\n       }\n     } while (true);\n   }",
    "result_reason": "junit.framework.AssertionFailedError: Variable f has been deprecated: @",
    "test_result": "FAIL"
}