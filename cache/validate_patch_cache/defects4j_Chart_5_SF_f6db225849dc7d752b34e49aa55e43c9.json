{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    // Search for an existing item with the same x value\n    XYDataItem existing = null;\n    for (XYDataItem item : this.data) {\n        if (item.getX().equals(x)) {\n            existing = item;\n            break;\n        }\n    }\n\n    if (existing != null && !this.allowDuplicateXValues) {\n        // Found an existing item with the same x value and duplicates are not allowed\n        XYDataItem overwritten = (XYDataItem) existing.clone();\n        existing.setY(y);\n        fireSeriesChanged();\n        return overwritten;\n    } else {\n        // Either a new item or duplicates are allowed\n        XYDataItem newItem = new XYDataItem(x, y);\n        if (this.autoSort) {\n            int index = Collections.binarySearch(this.data, newItem);\n            if (index >= 0 && !this.allowDuplicateXValues) {\n                // There is an existing item with the same x value and duplicates are not allowed\n                XYDataItem overwritten = (XYDataItem) this.data.get(index).clone();\n                this.data.set(index, newItem);\n                fireSeriesChanged();\n                return overwritten;\n            } else if (index >= 0 && this.allowDuplicateXValues) {\n                // There is an existing item with the same x value but duplicates are allowed\n                this.data.add(index + 1, newItem);\n            } else {\n                // No item with same x value, add new item at this position\n                this.data.add(-(index + 1), newItem);\n            }\n        } else {\n            // Sort is not active, just add the new item\n            this.data.add(newItem);\n        }\n\n        // Check max item count\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n\n        fireSeriesChanged();\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..5c6f39c 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,58 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+\n+    // Search for an existing item with the same x value\n+    XYDataItem existing = null;\n+    for (XYDataItem item : this.data) {\n+        if (item.getX().equals(x)) {\n+            existing = item;\n+            break;\n+        }\n+    }\n+\n+    if (existing != null && !this.allowDuplicateXValues) {\n+        // Found an existing item with the same x value and duplicates are not allowed\n+        XYDataItem overwritten = (XYDataItem) existing.clone();\n+        existing.setY(y);\n+        fireSeriesChanged();\n+        return overwritten;\n+    } else {\n+        // Either a new item or duplicates are allowed\n+        XYDataItem newItem = new XYDataItem(x, y);\n+        if (this.autoSort) {\n+            int index = Collections.binarySearch(this.data, newItem);\n+            if (index >= 0 && !this.allowDuplicateXValues) {\n+                // There is an existing item with the same x value and duplicates are not allowed\n+                XYDataItem overwritten = (XYDataItem) this.data.get(index).clone();\n+                this.data.set(index, newItem);\n+                fireSeriesChanged();\n+                return overwritten;\n+            } else if (index >= 0 && this.allowDuplicateXValues) {\n+                // There is an existing item with the same x value but duplicates are allowed\n+                this.data.add(index + 1, newItem);\n+            } else {\n+                // No item with same x value, add new item at this position\n+                this.data.add(-(index + 1), newItem);\n+            }\n+        } else {\n+            // Sort is not active, just add the new item\n+            this.data.add(newItem);\n+        }\n+\n+        // Check max item count\n+        if (getItemCount() > this.maximumItemCount) {\n+            this.data.remove(0);\n+        }\n+\n+        fireSeriesChanged();\n+        return null;\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: for-each loops are not supported in -source 1.4",
    "test_result": "ERROR"
}