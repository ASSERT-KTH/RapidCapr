{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Strip unreferenced args off the end of the function declaration. Note\n    // that we don't do this to getters/setters; there it's not always safe to\n    // remove args because the delete operation needs the same number of arguments.\n    List<Boolean> isReferenced = getFormalParamIsReferenced(function, referenced);\n    for (int i = isReferenced.size() - 1; i >= 0; i--) {\n      if (!isReferenced.get(i) && !argHasJSDocInfo(argList.getChildAtIndex(i))) {\n        argList.removeChildAt(i);\n        compiler.reportCodeChange();\n      }\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b7939eba 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Strip unreferenced args off the end of the function declaration. Note\n+    // that we don't do this to getters/setters; there it's not always safe to\n+    // remove args because the delete operation needs the same number of arguments.\n+    List<Boolean> isReferenced = getFormalParamIsReferenced(function, referenced);\n+    for (int i = isReferenced.size() - 1; i >= 0; i--) {\n+      if (!isReferenced.get(i) && !argHasJSDocInfo(argList.getChildAtIndex(i))) {\n+        argList.removeChildAt(i);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}