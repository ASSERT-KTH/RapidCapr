{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\n// Validate the arguments to the function.\nNode argParent = n;\nif (n.isNew()) {\n  // The parent for the arguments is the constructor, not the NEW node.\n  checkState(n.hasOneChild());\n  argParent = n.getFirstChild();\n}\nNodeUtil.getArgumentsForCallOrNew(argParent, args);\nvalidateArgumentList(t, args, functionType.getParameterTypes(), n);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a8998fc7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n+  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+// Validate the arguments to the function.\n+Node argParent = n;\n+if (n.isNew()) {\n+  // The parent for the arguments is the constructor, not the NEW node.\n+  checkState(n.hasOneChild());\n+  argParent = n.getFirstChild();\n+}\n+NodeUtil.getArgumentsForCallOrNew(argParent, args);\n+validateArgumentList(t, args, functionType.getParameterTypes(), n);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}