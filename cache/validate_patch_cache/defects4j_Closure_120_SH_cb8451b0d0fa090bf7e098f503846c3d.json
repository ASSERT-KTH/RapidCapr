{
    "patch": "          for (int i = block.getIndex() - 1; i >= 0; i--) { // check backwards through function blocks\n            if (references.get(i).name().equals(ref.name()) && references.get(i).getType() == ref.getType()) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2031e3ff 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,11 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          for (int i = block.getIndex() - 1; i >= 0; i--) { // check backwards through function blocks\n+            if (references.get(i).name().equals(ref.name()) && references.get(i).getType() == ref.getType()) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}