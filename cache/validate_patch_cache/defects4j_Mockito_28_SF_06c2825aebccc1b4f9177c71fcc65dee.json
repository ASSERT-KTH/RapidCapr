{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (candidate != null && isAssignable(field.getType(), candidate.getClass())) {\n            try {\n                field.setAccessible(true);\n                field.set(fieldInstance, candidate);\n            } catch (IllegalAccessException e) {\n                throw new IllegalStateException(\"Unable to access field\", e);\n            }\n            injectMockCandidate(field.getType(), mocks, candidate);\n            break;\n        }\n    }\n}\n\nprivate boolean isAssignable(Class<?> fieldType, Class<?> candidateType) {\n    if (fieldType.isAssignableFrom(candidateType)) {\n        return true;\n    }\n    if (fieldType.isPrimitive()) {\n        return PRIMITIVE_TO_WRAPPER.get(fieldType).equals(candidateType);\n    }\n    if (PRIMITIVE_TO_WRAPPER.containsKey(candidateType)) {\n        return fieldType.equals(PRIMITIVE_TO_WRAPPER.get(candidateType));\n    }\n    return false;\n}\n\nprivate static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER = new ImmutableMap.Builder<Class<?>, Class<?>>()\n        .put(boolean.class, Boolean.class)\n        .put(byte.class, Byte.class)\n        .put(char.class, Character.class)\n        .put(double.class, Double.class)\n        .put(float.class, Float.class)\n        .put(int.class, Integer.class)\n        .put(long.class, Long.class)\n        .put(short.class, Short.class)\n        .put(void.class, Void.class)\n        .build();",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..ad36ddff1 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,47 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (candidate != null && isAssignable(field.getType(), candidate.getClass())) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, candidate);\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalStateException(\"Unable to access field\", e);\n+            }\n+            injectMockCandidate(field.getType(), mocks, candidate);\n+            break;\n+        }\n+    }\n+}\n+\n+private boolean isAssignable(Class<?> fieldType, Class<?> candidateType) {\n+    if (fieldType.isAssignableFrom(candidateType)) {\n+        return true;\n+    }\n+    if (fieldType.isPrimitive()) {\n+        return PRIMITIVE_TO_WRAPPER.get(fieldType).equals(candidateType);\n+    }\n+    if (PRIMITIVE_TO_WRAPPER.containsKey(candidateType)) {\n+        return fieldType.equals(PRIMITIVE_TO_WRAPPER.get(candidateType));\n+    }\n+    return false;\n+}\n+\n+private static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER = new ImmutableMap.Builder<Class<?>, Class<?>>()\n+        .put(boolean.class, Boolean.class)\n+        .put(byte.class, Byte.class)\n+        .put(char.class, Character.class)\n+        .put(double.class, Double.class)\n+        .put(float.class, Float.class)\n+        .put(int.class, Integer.class)\n+        .put(long.class, Long.class)\n+        .put(short.class, Short.class)\n+        .put(void.class, Void.class)\n+        .build();\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}