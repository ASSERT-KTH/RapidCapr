{
    "patch": "            } catch (IllegalFieldValueException e) {\n                // retry year==2000 to be more lenient\n                if (DateTimeFieldType.year().getField(iChrono).getDurationType().getField(getBaseInstantMillis()).isLeap()) {\n                    long m = computeMillis(resetFields, \"2000\" + text);\n                    if (m < 0) {\n                        try {\n                            return computeMillis(resetFields, \"2002\" + text);\n                        } catch (IllegalFieldValueException ex) {\n                            // ignore exception\n                        }\n                    }\n                    e.prependMessage(\"Cannot parse \\\"2000\" + text + \"\\\": \");\n                }\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fb08824f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,23 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                // retry year==2000 to be more lenient\n+                if (DateTimeFieldType.year().getField(iChrono).getDurationType().getField(getBaseInstantMillis()).isLeap()) {\n+                    long m = computeMillis(resetFields, \"2000\" + text);\n+                    if (m < 0) {\n+                        try {\n+                            return computeMillis(resetFields, \"2002\" + text);\n+                        } catch (IllegalFieldValueException ex) {\n+                            // ignore exception\n+                        }\n+                    }\n+                    e.prependMessage(\"Cannot parse \\\"2000\" + text + \"\\\": \");\n+                }\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}