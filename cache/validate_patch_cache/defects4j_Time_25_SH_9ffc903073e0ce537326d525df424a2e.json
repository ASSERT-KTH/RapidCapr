{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                long prevTransition = previousTransition(instantAdjusted);\n                if (prevTransition == instantAdjusted) {\n                    // there's a gap preceeding instantAdjusted, which means\n                    // the gap ended at least one rule ago, hence we can use\n                    // the offset at instantAdjusted\n                    return offsetAdjusted;\n                }\n                // there's a gap preceeding instantAdjusted, and one rule\n                // has been effective since the end of the gap. Find out\n                // the offset before the start of the gap.\n                int prevOffset = getOffset(prevTransition);\n                // if the instant is on the wrong side of the gap, return the\n                // local offset, otherwise return the offset before the gap\n                return (offsetAdjusted < prevOffset) ? offsetLocal : prevOffset;\n            } else if (offsetLocal > offsetAdjusted) {\n                long nextTransition = nextTransition(instantAdjusted);\n                if (nextTransition == instantAdjusted + 1) {\n                    // there's a gap succeeding instantAdjusted, which means\n                    // the gap started at least one rule ago, hence we can use\n                    // the offset at instantAdjusted\n                    return offsetAdjusted;\n                }\n                // there's a gap succeeding instantAdjusted, and one rule\n                // has been effective since the start of the gap. Find out\n                // the offset after the end of the gap.\n                int nextOffset = getOffset(nextTransition);\n                // if the instant is on the wrong side of the gap, return the\n                // local offset, otherwise return the offset after the gap\n                return (offsetAdjusted > nextOffset) ? offsetLocal : nextOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4a3fe633 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                long prevTransition = previousTransition(instantAdjusted);\n+                if (prevTransition == instantAdjusted) {\n+                    // there's a gap preceeding instantAdjusted, which means\n+                    // the gap ended at least one rule ago, hence we can use\n+                    // the offset at instantAdjusted\n+                    return offsetAdjusted;\n+                }\n+                // there's a gap preceeding instantAdjusted, and one rule\n+                // has been effective since the end of the gap. Find out\n+                // the offset before the start of the gap.\n+                int prevOffset = getOffset(prevTransition);\n+                // if the instant is on the wrong side of the gap, return the\n+                // local offset, otherwise return the offset before the gap\n+                return (offsetAdjusted < prevOffset) ? offsetLocal : prevOffset;\n+            } else if (offsetLocal > offsetAdjusted) {\n+                long nextTransition = nextTransition(instantAdjusted);\n+                if (nextTransition == instantAdjusted + 1) {\n+                    // there's a gap succeeding instantAdjusted, which means\n+                    // the gap started at least one rule ago, hence we can use\n+                    // the offset at instantAdjusted\n+                    return offsetAdjusted;\n+                }\n+                // there's a gap succeeding instantAdjusted, and one rule\n+                // has been effective since the start of the gap. Find out\n+                // the offset after the end of the gap.\n+                int nextOffset = getOffset(nextTransition);\n+                // if the instant is on the wrong side of the gap, return the\n+                // local offset, otherwise return the offset after the gap\n+                return (offsetAdjusted > nextOffset) ? offsetLocal : nextOffset;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}