{
    "patch": "      if (NodeUtil.getEnclosingType(FunctionTypeBuilder.class, finallyNode) != null) {\n        // Returning the finallyNode does not work because there is a label on the block\n        // that clashes with the finallyNode label.\n        Node jumpTarget = lastStatementInBlock(finallyNode);\n        if (jumpTarget.isLabel()) {\n          jumpTarget = jumpTarget.getLastChild().detachFromParent();\n          jumpTarget.setJSType(VOID_TYPE);\n        }\n        cfa.createEdge(fromNode, Branch.UNCOND, jumpTarget);\n      } else {\n        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..d1cfd1ba 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+      if (NodeUtil.getEnclosingType(FunctionTypeBuilder.class, finallyNode) != null) {\n+        // Returning the finallyNode does not work because there is a label on the block\n+        // that clashes with the finallyNode label.\n+        Node jumpTarget = lastStatementInBlock(finallyNode);\n+        if (jumpTarget.isLabel()) {\n+          jumpTarget = jumpTarget.getLastChild().detachFromParent();\n+          jumpTarget.setJSType(VOID_TYPE);\n+        }\n+        cfa.createEdge(fromNode, Branch.UNCOND, jumpTarget);\n+      } else {\n+        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+      }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}