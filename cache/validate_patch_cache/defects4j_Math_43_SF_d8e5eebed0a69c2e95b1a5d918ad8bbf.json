{
    "patch": "        if (!(meanImpl instanceof Mean) || Double.isNaN(meanImpl.getResult())) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance) || Double.isNaN(varianceImpl.getResult())) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean) || Double.isNaN(geoMeanImpl.getResult())) {\n            geoMeanImpl.increment(value);\n        }\n        if (!(Double.isNaN(value) || Double.isInfinite(value))) {\n            n++;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..61a3ea28a 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,17 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+        if (!(meanImpl instanceof Mean) || Double.isNaN(meanImpl.getResult())) {\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+        if (!(varianceImpl instanceof Variance) || Double.isNaN(varianceImpl.getResult())) {\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+        if (!(geoMeanImpl instanceof GeometricMean) || Double.isNaN(geoMeanImpl.getResult())) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n-    }\n+        if (!(Double.isNaN(value) || Double.isInfinite(value))) {\n+            n++;\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}