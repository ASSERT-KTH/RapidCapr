{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable, VariableLiveness state) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    boolean shouldReevaluate = false;\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        if (shouldReevaluate) {\n          // Reevaluate whether the state is live if a previous child was\n          // marked as KILL.\n          state = isVariableReadBeforeKill(child, variable, state);\n        } else {\n          VariableLiveness childState =\n              isVariableReadBeforeKill(child, variable,\n                                       VariableLiveness.MAYBE_LIVE);\n          if (childState != VariableLiveness.MAYBE_LIVE) {\n            state = childState;\n            if (childState == VariableLiveness.KILL) {\n              shouldReevaluate = true;\n            } else if (childState == VariableLiveness.READ) {\n              return VariableLiveness.READ;\n            }\n          }\n        }\n      }\n    }\n    return state;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..b017683e 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -321,7 +321,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+      Node n, String variable, VariableLiveness state) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n         // The expression to which the assignment is made is evaluated before\n@@ -333,16 +333,30 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       }\n     }\n \n+    boolean shouldReevaluate = false;\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        if (shouldReevaluate) {\n+          // Reevaluate whether the state is live if a previous child was\n+          // marked as KILL.\n+          state = isVariableReadBeforeKill(child, variable, state);\n+        } else {\n+          VariableLiveness childState =\n+              isVariableReadBeforeKill(child, variable,\n+                                       VariableLiveness.MAYBE_LIVE);\n+          if (childState != VariableLiveness.MAYBE_LIVE) {\n+            state = childState;\n+            if (childState == VariableLiveness.KILL) {\n+              shouldReevaluate = true;\n+            } else if (childState == VariableLiveness.READ) {\n+              return VariableLiveness.READ;\n+            }\n+          }\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+    return state;\n   }\n }",
    "result_reason": "error: method isVariableReadBeforeKill in class DeadAssignmentsElimination cannot be applied to given types;",
    "test_result": "ERROR"
}