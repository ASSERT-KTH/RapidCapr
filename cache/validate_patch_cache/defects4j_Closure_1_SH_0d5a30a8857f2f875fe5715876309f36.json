{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    // get all parameter names defined in the function's argList.\n    ArrayList<String> paramNames = new ArrayList<>();\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      paramNames.add(arg.getString());\n    }\n\n    // remove the whole argList and add the params which were referenced.\n    Node replacingArgList = new Node(Token.FORMAL_PARAMETERS);\n    for (String paramName : paramNames) {\n      Var var = fnScope.getVar(paramName);\n      if (referenced.contains(var)) {\n        Node arg = Node.newString(Token.STRING, paramName);\n        replacingArgList.addChildToBack(arg);\n      }\n    }\n\n    if (!replaceCurrentArgList(argList, replacingArgList)) {\n      if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n      } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c8bbc8ba 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    // get all parameter names defined in the function's argList.\n+    ArrayList<String> paramNames = new ArrayList<>();\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      paramNames.add(arg.getString());\n+    }\n+\n+    // remove the whole argList and add the params which were referenced.\n+    Node replacingArgList = new Node(Token.FORMAL_PARAMETERS);\n+    for (String paramName : paramNames) {\n+      Var var = fnScope.getVar(paramName);\n+      if (referenced.contains(var)) {\n+        Node arg = Node.newString(Token.STRING, paramName);\n+        replacingArgList.addChildToBack(arg);\n+      }\n+    }\n+\n+    if (!replaceCurrentArgList(argList, replacingArgList)) {\n+      if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+      } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}