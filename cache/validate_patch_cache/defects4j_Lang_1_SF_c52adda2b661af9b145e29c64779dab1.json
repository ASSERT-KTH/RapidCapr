{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    if (str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n        final String numberStr = '-' + str.substring(3);\n        return createBigInteger(numberStr);\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n        return createBigInteger(str);\n    }\n\n    final int length = str.length();\n    char lastChar = str.charAt(length - 1);\n    int decimalPlaces = -1;\n    boolean hasFloatingPoint = false;\n    boolean hasExponent = false;\n\n    // Check if the number is a floating-point number or has an exponent\n    for (int i = 0; i < length; i++) {\n        final char ch = str.charAt(i);\n        if (ch == '.') {\n            if (hasFloatingPoint || hasExponent) {\n                throw new NumberFormatException(\"Invalid number: \" + str);\n            }\n            decimalPlaces = length - 1 - i;\n            hasFloatingPoint = true;\n        } else if (ch == 'e' || ch == 'E') {\n            if (hasExponent) {\n                throw new NumberFormatException(\"Invalid number: \" + str);\n            }\n            final int exponent = Integer.parseInt(str.substring(i + 1));\n            return parseNumber(str.substring(0, i), exponent);\n        } else if (ch < '0' || ch > '9') {\n            if (i == length - 1 && (ch == 'd' || ch == 'D' || ch == 'f' || ch == 'F')) {\n                lastChar = ch;\n            } else {\n                throw new NumberFormatException(\"Invalid number: \" + str);\n            }\n        }\n    }\n\n    // Check if the number is an integer that was parsed as a floating-point number\n    if (hasFloatingPoint && decimalPlaces == 0) {\n        throw new NumberFormatException(\"Invalid number: \" + str);\n    }\n\n    // Create the appropriate number based on the input string\n    if (hasFloatingPoint) {\n        if (decimalPlaces > 7) {\n            return createBigDecimal(str);\n        }\n        final float floatValue = Float.parseFloat(str);\n        if (!Float.isInfinite(floatValue)) {\n            if (lastChar == 'd' || lastChar == 'D') {\n                return (double) floatValue;\n            }\n            return floatValue;\n        }\n    }\n    return parseNumber(str);\n}\n\nprivate static Number parseNumber(final String str) {\n    try {\n        return createInteger(str);\n    } catch (final NumberFormatException ex1) {\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException ex2) {\n            return createBigInteger(str);\n        }\n    }\n}\n\nprivate static Number parseNumber(final String str, final int exponent) {\n    BigInteger unscaledValue;\n    if (exponent >= 0) {\n        unscaledValue = new BigInteger(str).multiply(BigInteger.TEN.pow(exponent));\n    } else {\n        unscaledValue = new BigInteger(str).divide(BigInteger.TEN.pow(-exponent));\n    }\n    if (unscaledValue.bitLength() <= 31) {\n        return unscaledValue.intValue();\n    } else if (unscaledValue.bitLength() <= 63) {\n        return unscaledValue.longValue();\n    }\n    return unscaledValue;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..316d9b72 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,171 +447,99 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+\n+    if (str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n+        final String numberStr = '-' + str.substring(3);\n+        return createBigInteger(numberStr);\n+    }\n+    if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n+        return createBigInteger(str);\n+    }\n+\n+    final int length = str.length();\n+    char lastChar = str.charAt(length - 1);\n+    int decimalPlaces = -1;\n+    boolean hasFloatingPoint = false;\n+    boolean hasExponent = false;\n+\n+    // Check if the number is a floating-point number or has an exponent\n+    for (int i = 0; i < length; i++) {\n+        final char ch = str.charAt(i);\n+        if (ch == '.') {\n+            if (hasFloatingPoint || hasExponent) {\n+                throw new NumberFormatException(\"Invalid number: \" + str);\n             }\n-            return createInteger(str);\n-        }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n+            decimalPlaces = length - 1 - i;\n+            hasFloatingPoint = true;\n+        } else if (ch == 'e' || ch == 'E') {\n+            if (hasExponent) {\n+                throw new NumberFormatException(\"Invalid number: \" + str);\n             }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n+            final int exponent = Integer.parseInt(str.substring(i + 1));\n+            return parseNumber(str.substring(0, i), exponent);\n+        } else if (ch < '0' || ch > '9') {\n+            if (i == length - 1 && (ch == 'd' || ch == 'D' || ch == 'f' || ch == 'F')) {\n+                lastChar = ch;\n             } else {\n-                mant = str;\n+                throw new NumberFormatException(\"Invalid number: \" + str);\n             }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n \n-            }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n+    // Check if the number is an integer that was parsed as a floating-point number\n+    if (hasFloatingPoint && decimalPlaces == 0) {\n+        throw new NumberFormatException(\"Invalid number: \" + str);\n+    }\n+\n+    // Create the appropriate number based on the input string\n+    if (hasFloatingPoint) {\n+        if (decimalPlaces > 7) {\n+            return createBigDecimal(str);\n         }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+        final float floatValue = Float.parseFloat(str);\n+        if (!Float.isInfinite(floatValue)) {\n+            if (lastChar == 'd' || lastChar == 'D') {\n+                return (double) floatValue;\n             }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n+            return floatValue;\n         }\n+    }\n+    return parseNumber(str);\n+}\n \n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n-            }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n+private static Number parseNumber(final String str) {\n+    try {\n+        return createInteger(str);\n+    } catch (final NumberFormatException ex1) {\n         try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n-            }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            return createLong(str);\n+        } catch (final NumberFormatException ex2) {\n+            return createBigInteger(str);\n         }\n+    }\n+}\n \n-        return createBigDecimal(str);\n+private static Number parseNumber(final String str, final int exponent) {\n+    BigInteger unscaledValue;\n+    if (exponent >= 0) {\n+        unscaledValue = new BigInteger(str).multiply(BigInteger.TEN.pow(exponent));\n+    } else {\n+        unscaledValue = new BigInteger(str).divide(BigInteger.TEN.pow(-exponent));\n     }\n+    if (unscaledValue.bitLength() <= 31) {\n+        return unscaledValue.intValue();\n+    } else if (unscaledValue.bitLength() <= 63) {\n+        return unscaledValue.longValue();\n+    }\n+    return unscaledValue;\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "java.lang.NumberFormatException: Invalid number: 12345L",
    "test_result": "FAIL"
}