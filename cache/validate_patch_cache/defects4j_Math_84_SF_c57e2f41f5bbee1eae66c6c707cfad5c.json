{
    "patch": "                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex;\n                } else {\n                    // perform a shrink step\n                    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n                    for (int i = 0; i < shrinkedSimplex.length; i++) {\n                        final double[] coordinates = new double[original[i].getPoint().length];\n                        for (int j = 0; j < coordinates.length; j++) {\n                            coordinates[j] = best.getPoint()[j] + sigma * (original[i].getPoint()[j] - best.getPoint()[j]);\n                        }\n                        final double value = computeObjectiveValue(coordinates);\n                        final RealPointValuePair pair = new RealPointValuePair(coordinates, value);\n                        shrinkedSimplex[i] = pair;\n                    }\n                    evaluateSimplex(shrinkedSimplex, comparator);\n                }\n\n            }\n\n            // check convergence\n            if (checker != null &&\n                checker.converged(getIterations(), best, simplex[0])) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..4b4c42b65 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,42 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n+\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contractedSimplex;\n+                } else {\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+                    for (int i = 0; i < shrinkedSimplex.length; i++) {\n+                        final double[] coordinates = new double[original[i].getPoint().length];\n+                        for (int j = 0; j < coordinates.length; j++) {\n+                            coordinates[j] = best.getPoint()[j] + sigma * (original[i].getPoint()[j] - best.getPoint()[j]);\n+                        }\n+                        final double value = computeObjectiveValue(coordinates);\n+                        final RealPointValuePair pair = new RealPointValuePair(coordinates, value);\n+                        shrinkedSimplex[i] = pair;\n+                    }\n+                    evaluateSimplex(shrinkedSimplex, comparator);\n+                }\n \n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+            if (checker != null &&\n+                checker.converged(getIterations(), best, simplex[0])) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}