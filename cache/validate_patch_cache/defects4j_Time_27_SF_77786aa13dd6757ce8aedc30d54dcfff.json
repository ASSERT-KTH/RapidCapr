{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 0) {\n        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n    } else if (size == 1) {\n        Object last = elementPairs.get(0);\n        if (last instanceof Separator) {\n            Separator sep = (Separator) last;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            return createFormatter(elementPairs.get(0), notPrinter, notParser);\n        }\n    }\n\n    boolean hasSeparator = false;\n    int numSeparators = 0;\n    for (int i = 0; i < size; i += 2) {\n        if (!(elementPairs.get(i) instanceof Separator)) {\n            throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n        }\n        hasSeparator = true;\n        numSeparators++;\n    }\n\n    if (!hasSeparator) {\n        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n    } else if (numSeparators == 1) {\n        Object obj = elementPairs.get(0) instanceof Separator ? elementPairs.get(1) : elementPairs.get(0);\n        return createFormatter(obj, notPrinter, notParser);\n    } else {\n        Separator firstSep = (Separator) elementPairs.get(0);\n        PeriodFormatter formatter = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n        Separator lastSep = (Separator) elementPairs.get(size - 1);\n        return new PeriodFormatter(firstSep.finish(formatter.getPrinter(), formatter.getParser()), lastSep);\n    }\n}\n\nprivate static PeriodFormatter createFormatter(Object obj, boolean notPrinter, boolean notParser) {\n    if (obj instanceof PeriodPrinter && !notPrinter) {\n        return new PeriodFormatter((PeriodPrinter) obj, null);\n    } else if (obj instanceof PeriodParser && !notParser) {\n        return new PeriodFormatter(null, (PeriodParser) obj);\n    } else if (obj instanceof PeriodFormatter) {\n        return (PeriodFormatter) obj;\n    } else {\n        throw new IllegalStateException(\"Invalid object: \" + obj);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..3ab1251e 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,59 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n+    } else if (size == 1) {\n+        Object last = elementPairs.get(0);\n+        if (last instanceof Separator) {\n+            Separator sep = (Separator) last;\n+            return new PeriodFormatter(sep, sep);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return createFormatter(elementPairs.get(0), notPrinter, notParser);\n+        }\n+    }\n+\n+    boolean hasSeparator = false;\n+    int numSeparators = 0;\n+    for (int i = 0; i < size; i += 2) {\n+        if (!(elementPairs.get(i) instanceof Separator)) {\n+            throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n         }\n+        hasSeparator = true;\n+        numSeparators++;\n     }\n \n+    if (!hasSeparator) {\n+        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n+    } else if (numSeparators == 1) {\n+        Object obj = elementPairs.get(0) instanceof Separator ? elementPairs.get(1) : elementPairs.get(0);\n+        return createFormatter(obj, notPrinter, notParser);\n+    } else {\n+        Separator firstSep = (Separator) elementPairs.get(0);\n+        PeriodFormatter formatter = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+        Separator lastSep = (Separator) elementPairs.get(size - 1);\n+        return new PeriodFormatter(firstSep.finish(formatter.getPrinter(), formatter.getParser()), lastSep);\n+    }\n+}\n+\n+private static PeriodFormatter createFormatter(Object obj, boolean notPrinter, boolean notParser) {\n+    if (obj instanceof PeriodPrinter && !notPrinter) {\n+        return new PeriodFormatter((PeriodPrinter) obj, null);\n+    } else if (obj instanceof PeriodParser && !notParser) {\n+        return new PeriodFormatter(null, (PeriodParser) obj);\n+    } else if (obj instanceof PeriodFormatter) {\n+        return (PeriodFormatter) obj;\n+    } else {\n+        throw new IllegalStateException(\"Invalid object: \" + obj);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IllegalStateException: Invalid elementPairs: [org.joda.time.format.PeriodFormatterBuilder$Separator@4a883b15, org.joda.time.format.PeriodFormatterBuilder$Separator@4a883b15, org.joda.time.format.PeriodFormatterBuilder$FieldFormatter@25641d39, org.joda.time.format.PeriodFormatterBuilder$FieldFormatter@25641d39, org.joda.time.format.PeriodFormatterBuilder$FieldFormatter@7b36aa0c, org.joda.time.format.PeriodFormatterBuilder$FieldFormatter@7b36aa0c, org.joda.time.format.PeriodFormatterBuilder$FieldFormatter@5824a83d, org.joda.time.format.PeriodFormatterBuilder$FieldFormatter@5824a83d]",
    "test_result": "FAIL"
}