{
    "patch": "We apologize for the confusion, and thank you for bringing our attention to this issue. Here is another possible fix for the `shouldTraverse` method:\n\n```\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGetAssignmentTarget(n) &&\n          n.getParent().getGrandparent().getType() == Token.ASSIGN &&\n          n.getGrandparent().getParent().getType() == Token.OBJECTLIT &&\n          n.getGrandparent().getFirstChild() == n.getParent() &&\n          n.getParent().getFirstChild() == n) {\n        Node lvalue = n.getGrandparent().getParent().getParent();\n        if (lvalue.getType() == Token.NAME || lvalue.getType() == Token.STRING || lvalue.getType() == Token.GETPROP) {\n          return true;\n        } else if (lvalue.getType() == Token.ASSIGN) {\n          return NodeUtil.isGetAssignmentTarget(lvalue.getFirstChild());\n        }\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n```\n\nWe added a new condition to check if a function `n` is being lent to a prototype:\n\n```\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGetAssignmentTarget(n) &&\n          n.getParent().getGrandparent().getType() == Token.ASSIGN &&\n          n.getGrandparent().getParent().getType() == Token.OBJECTLIT &&\n          n.getGrandparent().getFirstChild() == n.getParent() &&\n          n.getParent().getFirstChild() == n) {\n        Node lvalue = n.getGrandparent().getParent().getParent();\n        if (lvalue.getType() == Token.NAME || lvalue.getType() == Token.STRING || lvalue.getType() == Token.GETPROP) {\n          return true;\n        } else if (lvalue.getType() == Token.ASSIGN) {\n          return NodeUtil.isGetAssignmentTarget(lvalue.getFirstChild());\n        }\n        return false;\n      }\n``` \n\nThis condition depends on the fact that in JavaScript, a function expression can be used as a value, and can be assigned as a property of an object. When a function `n` is being lent to a prototype, it is assigned as a property of an object that is also an assignment target, e.g.\n\n```\nvar myLib = {};\nmyLib.namespace = function() {...};\n```\n\nThis expression assigns a function expression to the property `namespace` of the object `myLib`, and the object `myLib` is itself an assignment target. In our fixed code, we check if the node `n` is an assignment target of a `GETPROP`, that is itself a child of an `OBJECTLIT`. We also check if the left-hand side of the assignment has an acceptable type: it can be a `NAME`, `STRING`, or `GETPROP` node. If all these conditions are met, we return `true` to traverse the function `n`.\n\nWe hope this fix works for you. Please let us know if you have any further issues or questions.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c5e8856e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,118 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+We apologize for the confusion, and thank you for bringing our attention to this issue. Here is another possible fix for the `shouldTraverse` method:\n+\n+```\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGetAssignmentTarget(n) &&\n+          n.getParent().getGrandparent().getType() == Token.ASSIGN &&\n+          n.getGrandparent().getParent().getType() == Token.OBJECTLIT &&\n+          n.getGrandparent().getFirstChild() == n.getParent() &&\n+          n.getParent().getFirstChild() == n) {\n+        Node lvalue = n.getGrandparent().getParent().getParent();\n+        if (lvalue.getType() == Token.NAME || lvalue.getType() == Token.STRING || lvalue.getType() == Token.GETPROP) {\n+          return true;\n+        } else if (lvalue.getType() == Token.ASSIGN) {\n+          return NodeUtil.isGetAssignmentTarget(lvalue.getFirstChild());\n+        }\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+```\n+\n+We added a new condition to check if a function `n` is being lent to a prototype:\n+\n+```\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGetAssignmentTarget(n) &&\n+          n.getParent().getGrandparent().getType() == Token.ASSIGN &&\n+          n.getGrandparent().getParent().getType() == Token.OBJECTLIT &&\n+          n.getGrandparent().getFirstChild() == n.getParent() &&\n+          n.getParent().getFirstChild() == n) {\n+        Node lvalue = n.getGrandparent().getParent().getParent();\n+        if (lvalue.getType() == Token.NAME || lvalue.getType() == Token.STRING || lvalue.getType() == Token.GETPROP) {\n+          return true;\n+        } else if (lvalue.getType() == Token.ASSIGN) {\n+          return NodeUtil.isGetAssignmentTarget(lvalue.getFirstChild());\n+        }\n+        return false;\n+      }\n+``` \n+\n+This condition depends on the fact that in JavaScript, a function expression can be used as a value, and can be assigned as a property of an object. When a function `n` is being lent to a prototype, it is assigned as a property of an object that is also an assignment target, e.g.\n+\n+```\n+var myLib = {};\n+myLib.namespace = function() {...};\n+```\n+\n+This expression assigns a function expression to the property `namespace` of the object `myLib`, and the object `myLib` is itself an assignment target. In our fixed code, we check if the node `n` is an assignment target of a `GETPROP`, that is itself a child of an `OBJECTLIT`. We also check if the left-hand side of the assignment has an acceptable type: it can be a `NAME`, `STRING`, or `GETPROP` node. If all these conditions are met, we return `true` to traverse the function `n`.\n+\n+We hope this fix works for you. Please let us know if you have any further issues or questions.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}