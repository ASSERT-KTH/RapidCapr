{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchChars.length;\n    final int strLast = strLen - 1;\n    final int searchLast = searchLen - 1;\n    for (int i = 0; i < strLen; i++) {\n        final char ch = sequence.charAt(i);\n        if (searchChars[0] == ch && (i == strLast || searchLen == 1)) {\n            // Found first character, now look at the rest of v2\n            return true;\n        }\n        if (Character.isHighSurrogate(ch)) {\n            if (searchLast == 0) {\n                // Short circuit - 2nd char of 2-char sequence unavailable\n                return false;\n            }\n            if (i < strLast) {\n                final char ch2 = sequence.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    final int uc = Character.toCodePoint(ch, ch2);\n                    for (int j = 1; j < searchLen; j++) {\n                        if (searchChars[j - 1] == ch && searchChars[j] == ch2) {\n                            if (j == searchLast) {\n                                return true;\n                            }\n                            if (i + 1 < strLast && matches(sequence, i + 2, searchChars, j + 1)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            for (int j = 1; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (j == searchLast) {\n                        // Found last character\n                        return true;\n                    } else if (i + j > strLast) {\n                        // Cannot match since we are out of string\n                        return false;\n                    } else {\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean matches(CharSequence sequence, int strIndex, char[] searchChars, int searchIndex) {\n    for (int i = searchIndex; i < searchChars.length; i++, strIndex++) {\n        if (strIndex >= sequence.length() || searchChars[i] != sequence.charAt(strIndex)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..05452d40 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,68 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int strLast = strLen - 1;\n+    final int searchLast = searchLen - 1;\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (searchChars[0] == ch && (i == strLast || searchLen == 1)) {\n+            // Found first character, now look at the rest of v2\n+            return true;\n+        }\n+        if (Character.isHighSurrogate(ch)) {\n+            if (searchLast == 0) {\n+                // Short circuit - 2nd char of 2-char sequence unavailable\n+                return false;\n+            }\n+            if (i < strLast) {\n+                final char ch2 = sequence.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    final int uc = Character.toCodePoint(ch, ch2);\n+                    for (int j = 1; j < searchLen; j++) {\n+                        if (searchChars[j - 1] == ch && searchChars[j] == ch2) {\n+                            if (j == searchLast) {\n+                                return true;\n+                            }\n+                            if (i + 1 < strLast && matches(sequence, i + 2, searchChars, j + 1)) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (int j = 1; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    if (j == searchLast) {\n+                        // Found last character\n+                        return true;\n+                    } else if (i + j > strLast) {\n+                        // Cannot match since we are out of string\n+                        return false;\n+                    } else {\n+                        continue;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean matches(CharSequence sequence, int strIndex, char[] searchChars, int searchIndex) {\n+    for (int i = searchIndex; i < searchChars.length; i++, strIndex++) {\n+        if (strIndex >= sequence.length() || searchChars[i] != sequence.charAt(strIndex)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}