{
    "patch": "private void readTypeVariables() {\n    if (typeVariable.getBounds().length == 0) {\n        registerTypeVariablesOn(Object.class);\n    } else {\n        for (Type type : typeVariable.getBounds()) {\n            if (type instanceof TypeVariable) {\n                TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n                if (this.typeVariable.getGenericDeclaration().equals(typeVariable.getGenericDeclaration()) &&\n                        this.typeVariable.getName().equals(typeVariable.getName())) {\n                    throw new IllegalArgumentException(\"Recursive type variable definition detected: \" + this.typeVariable);\n                }\n            }\n            registerTypeVariablesOn(type);\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3dc904e8c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable.getBounds().length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+    } else {\n+        for (Type type : typeVariable.getBounds()) {\n+            if (type instanceof TypeVariable) {\n+                TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+                if (this.typeVariable.getGenericDeclaration().equals(typeVariable.getGenericDeclaration()) &&\n+                        this.typeVariable.getName().equals(typeVariable.getName())) {\n+                    throw new IllegalArgumentException(\"Recursive type variable definition detected: \" + this.typeVariable);\n+                }\n+            }\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}