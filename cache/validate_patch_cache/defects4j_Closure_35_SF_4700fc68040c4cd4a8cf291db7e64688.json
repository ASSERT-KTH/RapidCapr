{
    "patch": "import com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.Node;\n\npublic class MyProgramRepairTool {\n\n  /**\n   * Infers record types for an object type based on a constraint.\n   */\n  public void inferRecordTypes(\n      JSType type, \n      JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop) || objType.isPropertyTypeInferred(prop) || !objType.getPropertyType(prop).isSubtype(propType)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            } else {\n              typeToInfer = objType.getPropertyType(prop);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  public FlowScope dereferencePointer(\n      Node n, \n      FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..696bdc41 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,7 +1111,18 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.Node;\n+\n+public class MyProgramRepairTool {\n+\n+  /**\n+   * Infers record types for an object type based on a constraint.\n+   */\n+  public void inferRecordTypes(\n+      JSType type, \n+      JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n@@ -1125,9 +1136,10 @@ class TypeInference\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            if (!objType.hasProperty(prop) || objType.isPropertyTypeInferred(prop) || !objType.getPropertyType(prop).isSubtype(propType)) {\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            } else {\n+              typeToInfer = objType.getPropertyType(prop);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1136,11 +1148,14 @@ class TypeInference\n     }\n   }\n \n+\n   /**\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  public FlowScope dereferencePointer(\n+      Node n, \n+      FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n@@ -1150,6 +1165,10 @@ class TypeInference\n     }\n     return scope;\n   }\n+}\n+    }\n+    return scope;\n+  }\n \n   private JSType getPropertyType(JSType objType, String propName,\n       Node n, FlowScope scope) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}