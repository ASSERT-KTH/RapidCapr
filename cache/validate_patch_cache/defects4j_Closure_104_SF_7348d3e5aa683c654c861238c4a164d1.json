{
    "patch": "  @Override\n  public JSType meet(JSType that) {\n    if (this.equals(that)) {\n      return this;\n    }\n    if (that.isUnknownType()) {\n      return this;\n    }\n    if (this.isUnknownType() || this.isAllType()) {\n      return that;\n    }\n    if (this.isBottom() || that.isTop()) {\n      return this;\n    }\n    if (this.isTop()) {\n      return that;\n    }\n    if (that.isBottom()) {\n      return that;\n    }\n\n    if (that.isUnionType()) {\n      ImmutableSet.Builder<JSType> intersectionBuilder = ImmutableSet.builder();\n      ImmutableList.Builder<JSType> unionBuilder = ImmutableList.builder();\n      boolean modified = false;\n      for (JSType t : that.toMaybeUnionType().getAlternates()) {\n        JSType meet = this.meet(t);\n        if (!meet.isBottom()) {\n          if (!this.isSubtype(meet)) {\n            unionBuilder.add(meet);\n            modified = true;\n          }\n          intersectionBuilder.add(meet);\n        }\n      }\n      if (intersectionBuilder.build().isEmpty()) {\n        return getNativeType(JSTypeNative.BOTTOM_TYPE);\n      } else if (!modified) {\n        return this;\n      } else {\n        return createUnionType(unionBuilder.build());\n      }\n    } else {\n      return super.meet(that);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..0f049ff3 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,52 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n+  @Override\n+  public JSType meet(JSType that) {\n+    if (this.equals(that)) {\n+      return this;\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+    if (that.isUnknownType()) {\n+      return this;\n+    }\n+    if (this.isUnknownType() || this.isAllType()) {\n+      return that;\n+    }\n+    if (this.isBottom() || that.isTop()) {\n+      return this;\n+    }\n+    if (this.isTop()) {\n+      return that;\n+    }\n+    if (that.isBottom()) {\n+      return that;\n     }\n-  }\n \n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n+    if (that.isUnionType()) {\n+      ImmutableSet.Builder<JSType> intersectionBuilder = ImmutableSet.builder();\n+      ImmutableList.Builder<JSType> unionBuilder = ImmutableList.builder();\n+      boolean modified = false;\n+      for (JSType t : that.toMaybeUnionType().getAlternates()) {\n+        JSType meet = this.meet(t);\n+        if (!meet.isBottom()) {\n+          if (!this.isSubtype(meet)) {\n+            unionBuilder.add(meet);\n+            modified = true;\n+          }\n+          intersectionBuilder.add(meet);\n+        }\n+      }\n+      if (intersectionBuilder.build().isEmpty()) {\n+        return getNativeType(JSTypeNative.BOTTOM_TYPE);\n+      } else if (!modified) {\n+        return this;\n+      } else {\n+        return createUnionType(unionBuilder.build());\n+      }\n     } else {\n-      return false;\n+      return super.meet(that);\n     }\n   }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n     }\n     return true;\n   }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}