{
    "patch": "private RealMatrix squareRoot(RealMatrix m) throws NotPositiveDefiniteException {\n    double[] diagonal = new double[m.getRowDimension()];\n    try {\n        CholeskyDecomposition decomposition = new CholeskyDecomposition(m);\n        RealMatrix l = decomposition.getL();\n        for (int i = 0; i < l.getRowDimension(); i++) {\n            diagonal[i] = l.getEntry(i, i);\n        }\n        return MatrixUtils.createRealDiagonalMatrix(diagonal);\n    } catch (Exception e) {\n        throw new NotPositiveDefiniteException(\"Matrix is not positive definite.\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..401d9e48d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) throws NotPositiveDefiniteException {\n+    double[] diagonal = new double[m.getRowDimension()];\n+    try {\n+        CholeskyDecomposition decomposition = new CholeskyDecomposition(m);\n+        RealMatrix l = decomposition.getL();\n+        for (int i = 0; i < l.getRowDimension(); i++) {\n+            diagonal[i] = l.getEntry(i, i);\n+        }\n+        return MatrixUtils.createRealDiagonalMatrix(diagonal);\n+    } catch (Exception e) {\n+        throw new NotPositiveDefiniteException(\"Matrix is not positive definite.\", e);\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}