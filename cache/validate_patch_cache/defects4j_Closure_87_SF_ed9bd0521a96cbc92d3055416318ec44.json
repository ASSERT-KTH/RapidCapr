{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Check if child of BLOCK node is an expression or an EXPR_RESULT\n      if (NodeUtil.isExpressionNode(maybeExpr) ||\n          (maybeExpr.getType() == Token.EXPR_RESULT &&\n          NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n        Node parent = n.getParent();\n        boolean inConditional = false;\n\n        while (parent != null && !inConditional) {\n          int type = parent.getType();\n\n          if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n            inConditional = true;\n          } else if (type == Token.IF || type == Token.WHILE || type == Token.DO) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              inConditional = true;\n            }\n            break;\n          } else if (type == Token.FOR || type == Token.FOR_IN) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              inConditional = true;\n            }\n            Node increment = NodeUtil.getForIncr(parent);\n            if (increment != null && NodeUtil.isExpressionNode(increment)) {\n              inConditional = true;\n            }\n            break;\n          }\n          parent = parent.getParent();\n        }\n\n        // If in a conditional or loop, don't fold expression\n        if (inConditional) {\n          return false;\n        }\n\n        return !NodeUtil.mayHaveSideEffects(maybeExpr);\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..5d63c5e3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,54 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Check if child of BLOCK node is an expression or an EXPR_RESULT\n+      if (NodeUtil.isExpressionNode(maybeExpr) ||\n+          (maybeExpr.getType() == Token.EXPR_RESULT &&\n+          NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n+        Node parent = n.getParent();\n+        boolean inConditional = false;\n+\n+        while (parent != null && !inConditional) {\n+          int type = parent.getType();\n+\n+          if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n+            inConditional = true;\n+          } else if (type == Token.IF || type == Token.WHILE || type == Token.DO) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              inConditional = true;\n+            }\n+            break;\n+          } else if (type == Token.FOR || type == Token.FOR_IN) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              inConditional = true;\n+            }\n+            Node increment = NodeUtil.getForIncr(parent);\n+            if (increment != null && NodeUtil.isExpressionNode(increment)) {\n+              inConditional = true;\n+            }\n+            break;\n+          }\n+          parent = parent.getParent();\n+        }\n+\n+        // If in a conditional or loop, don't fold expression\n+        if (inConditional) {\n+          return false;\n+        }\n+\n+        return !NodeUtil.mayHaveSideEffects(maybeExpr);\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}