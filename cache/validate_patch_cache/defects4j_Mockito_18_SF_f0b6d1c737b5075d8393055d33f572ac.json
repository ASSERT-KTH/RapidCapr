{
    "patch": "import org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n\nimport java.util.Collections;\n\nimport static org.junit.Assert.assertFalse;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class IterableTest {\n    @Mock\n    private Values values;\n\n    @Test\n    public void should_return_empty_iterable() {\n        Iterable<String> iterable = getEmptyIterable();\n        assertFalse(iterable.iterator().hasNext());\n    }\n\n    private Iterable<String> getEmptyIterable() {\n        return Collections.emptyList();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f61ef631d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,30 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Collections;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class IterableTest {\n+    @Mock\n+    private Values values;\n+\n+    @Test\n+    public void should_return_empty_iterable() {\n+        Iterable<String> iterable = getEmptyIterable();\n+        assertFalse(iterable.iterator().hasNext());\n+    }\n+\n+    private Iterable<String> getEmptyIterable() {\n+        return Collections.emptyList();\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}