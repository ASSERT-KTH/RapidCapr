{
    "patch": "private void checkPropertyReference(NodeTraversal t, Node n, Node parent) {\n    if (n.isString()) {\n      String propName = n.getString();\n      if (propName.equals(\"eval\") || propName.equals(\"arguments\")) {\n        report(t, n);\n      }\n    } else if (n.isMemberExpr()) {\n      Node curr = n.getFirstChild();\n      if (isFunctionObject(curr)) {\n        report(t, n);\n      }\n      curr = curr.getNext();\n      if (curr.isString() && isDangerousPropertyName(curr.getString())) {\n        report(t, n);\n      }\n    }\n\n    // Do not warn about missing properties in assignment expressions.\n    if (parent != null && parent.isAssign()) {\n      return;\n    }\n\n    // Warn if property is not defined\n    JSType type = n.getJSType();\n    if (type != null && type.isUnknownType()) {\n      report(t, n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}