{
    "patch": "    JSType typeOfThisTemp = safeResolve(typeOfThis, t, scope);\n    if (!(typeOfThisTemp instanceof ObjectType)) {\n      t.report(\n          JSError.make(\n              n,\n              JSError.TYPE_MISMATCH,\n              \"expected an ObjectType, but found \" + typeOfThisTemp));\n    } else {\n      typeOfThis = (ObjectType) typeOfThisTemp;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..327357a6 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,15 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType typeOfThisTemp = safeResolve(typeOfThis, t, scope);\n+    if (!(typeOfThisTemp instanceof ObjectType)) {\n+      t.report(\n+          JSError.make(\n+              n,\n+              JSError.TYPE_MISMATCH,\n+              \"expected an ObjectType, but found \" + typeOfThisTemp));\n+    } else {\n+      typeOfThis = (ObjectType) typeOfThisTemp;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}