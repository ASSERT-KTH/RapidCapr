{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            if (propType.isUnionType()) {\n              for (JSType alternativeType : propType.getUnionMembers()) {\n                JSType narrowedType = alternativeType.normalizeSubtype(nominaltypes);\n                // skip the types that are not subtypes of type\n                if (!narrowedType.isSubtypeOf(objType)) {\n                  continue;\n                }\n                objType.defineInferredProperty(prop, narrowedType, null);\n              }\n            } else {\n              JSType narrowedType = propType.normalizeSubtype(nominaltypes);\n              // skip the types that are not subtypes of type\n              if (narrowedType.isSubtypeOf(objType)) {\n                objType.defineInferredProperty(prop, narrowedType, null);\n              }\n            }\n          }\n        }\n      }\n   }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..440ec7a2 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1129,10 +1129,26 @@ class TypeInference\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            if (propType.isUnionType()) {\n+              for (JSType alternativeType : propType.getUnionMembers()) {\n+                JSType narrowedType = alternativeType.normalizeSubtype(nominaltypes);\n+                // skip the types that are not subtypes of type\n+                if (!narrowedType.isSubtypeOf(objType)) {\n+                  continue;\n+                }\n+                objType.defineInferredProperty(prop, narrowedType, null);\n+              }\n+            } else {\n+              JSType narrowedType = propType.normalizeSubtype(nominaltypes);\n+              // skip the types that are not subtypes of type\n+              if (narrowedType.isSubtypeOf(objType)) {\n+                objType.defineInferredProperty(prop, narrowedType, null);\n+              }\n+            }\n           }\n         }\n       }\n+   }\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}