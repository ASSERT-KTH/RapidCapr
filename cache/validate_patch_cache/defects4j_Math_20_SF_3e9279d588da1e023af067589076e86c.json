{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] result = null;\n    try {\n        double[] repaired = repair(x);\n        result = decode(repaired);\n        if (result != null) {\n            for (int i = 0; i < result.length; i++) {\n                if (Double.isNaN(result[i]) || Double.isInfinite(result[i])) {\n                    result[i] = 0.0;\n                } else if (result[i] < 0.0) {\n                    result[i] = 0.0;\n                } else if (result[i] > 1.0) {\n                    result[i] = 1.0;\n                }\n            }\n        }\n    } catch (Exception e) {\n        result = new double[x.length];\n    }\n    return result != null ? result : new double[x.length];\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..de7952473 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,27 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] result = null;\n+    try {\n+        double[] repaired = repair(x);\n+        result = decode(repaired);\n+        if (result != null) {\n+            for (int i = 0; i < result.length; i++) {\n+                if (Double.isNaN(result[i]) || Double.isInfinite(result[i])) {\n+                    result[i] = 0.0;\n+                } else if (result[i] < 0.0) {\n+                    result[i] = 0.0;\n+                } else if (result[i] > 1.0) {\n+                    result[i] = 1.0;\n+                }\n+            }\n         }\n+    } catch (Exception e) {\n+        result = new double[x.length];\n+    }\n+    return result != null ? result : new double[x.length];\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}