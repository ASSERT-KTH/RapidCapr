{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\npublic class GammaFunction {\n\n    public static double gamma(double x) {\n        if (Double.isNaN(x) || x <= 0.0) {\n            return Double.NaN;\n        } else if (x < 0.5) {\n            return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n        } else if (x >= MathUtils.TWO_PI) {\n            return Double.POSITIVE_INFINITY;\n        } else if (x == 1.0 || x == 2.0) {\n            return 1.0;\n        } else if (x == 0.5) {\n            return Math.sqrt(Math.PI);\n        } else if (x > 2.0) {\n            int n = (int) Math.floor(x) - 1;\n            double prod = 1.0;\n            for (int i = 0; i <= n; i++) {\n                prod *= x - i;\n            }\n            double v = gamma(x - n - 1);\n            return prod * v;\n        } else {\n            double t = 1.0 - x;\n            double y = gamma(t);\n            return y * (1 - t * Gamma.regularizedGammaP(1.0 - x, t));\n        }\n    }\n\n    public static void main(String[] args) {\n        double expected = 0.632120558828558;\n        double actualP = Gamma.regularizedGammaP(2, 1);\n        double precision = 10e-15;\n        if (Precision.equals(expected, actualP, precision)) {\n            System.out.println(\"The function is working properly.\");\n        } else {\n            System.out.println(\"The function is not working properly.\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..025dcf631 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,49 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class GammaFunction {\n+\n+    public static double gamma(double x) {\n+        if (Double.isNaN(x) || x <= 0.0) {\n+            return Double.NaN;\n+        } else if (x < 0.5) {\n+            return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n+        } else if (x >= MathUtils.TWO_PI) {\n+            return Double.POSITIVE_INFINITY;\n+        } else if (x == 1.0 || x == 2.0) {\n+            return 1.0;\n+        } else if (x == 0.5) {\n+            return Math.sqrt(Math.PI);\n+        } else if (x > 2.0) {\n+            int n = (int) Math.floor(x) - 1;\n+            double prod = 1.0;\n+            for (int i = 0; i <= n; i++) {\n+                prod *= x - i;\n+            }\n+            double v = gamma(x - n - 1);\n+            return prod * v;\n+        } else {\n+            double t = 1.0 - x;\n+            double y = gamma(t);\n+            return y * (1 - t * Gamma.regularizedGammaP(1.0 - x, t));\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        double expected = 0.632120558828558;\n+        double actualP = Gamma.regularizedGammaP(2, 1);\n+        double precision = 10e-15;\n+        if (Precision.equals(expected, actualP, precision)) {\n+            System.out.println(\"The function is working properly.\");\n+        } else {\n+            System.out.println(\"The function is not working properly.\");\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}