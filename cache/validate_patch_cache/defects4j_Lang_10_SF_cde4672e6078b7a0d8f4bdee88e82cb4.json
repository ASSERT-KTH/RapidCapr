{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (value == null) {\n        return regex;\n    }\n    boolean inCharClass = false;\n    boolean escaped = false;\n    boolean inGroup = false;\n    int length = value.length();\n    char lastChar = '\\0';\n    for (int i = 0; i < length; ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c) && !inCharClass && !inGroup) {\n            regex.append(\"\\\\s*\");\n            continue;\n        }\n        switch (c) {\n            case '\\\\':\n                if (escaped) {\n                    regex.append(\"\\\\\\\\\");\n                    escaped = false;\n                } else {\n                    escaped = true;\n                }\n                break;\n            case '[':\n                if (escaped) {\n                    regex.append(\"\\\\[\");\n                    escaped = false;\n                    break;\n                }\n                if (!inCharClass && !inGroup) {\n                    inCharClass = true;\n                }\n                regex.append(c);\n                break;\n            case ']':\n                if (escaped) {\n                    regex.append(\"\\\\]\");\n                    escaped = false;\n                    break;\n                }\n                if (inCharClass) {\n                    inCharClass = false;\n                }\n                regex.append(c);\n                break;\n            case '(':\n                if (escaped) {\n                    regex.append(\"\\\\(\");\n                    escaped = false;\n                    break;\n                }\n                if (!inCharClass && !inGroup) {\n                    inGroup = true;\n                }\n                regex.append(c);\n                break;\n            case ')':\n                if (escaped) {\n                    regex.append(\"\\\\)\");\n                    escaped = false;\n                    break;\n                }\n                if (inGroup) {\n                    inGroup = false;\n                }\n                regex.append(c);\n                break;\n            default:\n                if (escaped) {\n                    regex.append('\\\\');\n                    escaped = false;\n                }\n                if (inCharClass) {\n                    if (c == '-') {\n                        regex.append('-');\n                    }\n                    regex.append(c);\n                } else {\n                    switch (c) {\n                        case '?':\n                        case '+':\n                        case '*':\n                            if (inGroup || inCharClass) {\n                                regex.append(c);\n                            } else {\n                                if (lastChar != '(' && lastChar != '|' && lastChar != '\\0') {\n                                    regex.append(\"(?:\\\\Q\");\n                                    regex.append(lastChar);\n                                    regex.append(\"\\\\E)?\");\n                                }\n                            }\n                            break;\n                        case '|':\n                            if (escaped) {\n                                regex.append('|');\n                                escaped = false;\n                                break;\n                            }\n                            if (inGroup || inCharClass) {\n                                regex.append('|');\n                            } else {\n                                regex.append(\"\\\\|\");\n                            }\n                            break;\n                        case '{':\n                            if (!inGroup && !inCharClass) {\n                                regex.append(\"(?:\");\n                            } else {\n                                regex.append('{');\n                            }\n                            break;\n                        case '}':\n                            if (!inGroup && !inCharClass) {\n                                regex.append(\")?\");\n                            } else {\n                                regex.append('}');\n                            }\n                            break;\n                        case '$':\n                        case '^':\n                        case '.':\n                        case '[':\n                        case ']':\n                        case '\\\\':\n                            regex.append('\\\\');\n                            regex.append(c);\n                            break;\n                        default:\n                            regex.append(c);\n                            break;\n                    }\n                    lastChar = c;\n                }\n                break;\n        }\n    }\n    if (inGroup || inCharClass) {\n        regex.append(')');\n    } else if (lastChar == ')') {\n        regex.append('?');\n    }\n    if (unquote) {\n        String pattern = regex.toString();\n        if (pattern.startsWith(\"\\\\Q'\") && pattern.endsWith(\"'\\\\E\")) {\n            int endIndex = pattern.length() - 2;\n            regex.setLength(endIndex);\n            regex.deleteCharAt(0);\n            if (regex.length() > 6 && regex.substring(0, 6).equals(\"\\\\s*\")) {\n                regex.replace(0, 6, \"(?:\\\\s*)?\");\n            }\n        } else {\n            regex.insert(0, \"(?:\\\\Q\");\n            regex.append(\"\\\\E)?\");\n        }\n    } else {\n        regex.insert(0, \"(?:\");\n        regex.append(\")\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..8f19edea 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,167 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (value == null) {\n+        return regex;\n+    }\n+    boolean inCharClass = false;\n+    boolean escaped = false;\n+    boolean inGroup = false;\n+    int length = value.length();\n+    char lastChar = '\\0';\n+    for (int i = 0; i < length; ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c) && !inCharClass && !inGroup) {\n+            regex.append(\"\\\\s*\");\n+            continue;\n+        }\n+        switch (c) {\n+            case '\\\\':\n+                if (escaped) {\n+                    regex.append(\"\\\\\\\\\");\n+                    escaped = false;\n+                } else {\n+                    escaped = true;\n                 }\n                 break;\n-            case '?':\n             case '[':\n+                if (escaped) {\n+                    regex.append(\"\\\\[\");\n+                    escaped = false;\n+                    break;\n+                }\n+                if (!inCharClass && !inGroup) {\n+                    inCharClass = true;\n+                }\n+                regex.append(c);\n+                break;\n             case ']':\n+                if (escaped) {\n+                    regex.append(\"\\\\]\");\n+                    escaped = false;\n+                    break;\n+                }\n+                if (inCharClass) {\n+                    inCharClass = false;\n+                }\n+                regex.append(c);\n+                break;\n             case '(':\n+                if (escaped) {\n+                    regex.append(\"\\\\(\");\n+                    escaped = false;\n+                    break;\n+                }\n+                if (!inCharClass && !inGroup) {\n+                    inGroup = true;\n+                }\n+                regex.append(c);\n+                break;\n             case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                if (escaped) {\n+                    regex.append(\"\\\\)\");\n+                    escaped = false;\n+                    break;\n+                }\n+                if (inGroup) {\n+                    inGroup = false;\n+                }\n+                regex.append(c);\n+                break;\n+            default:\n+                if (escaped) {\n+                    regex.append('\\\\');\n+                    escaped = false;\n+                }\n+                if (inCharClass) {\n+                    if (c == '-') {\n+                        regex.append('-');\n+                    }\n+                    regex.append(c);\n+                } else {\n+                    switch (c) {\n+                        case '?':\n+                        case '+':\n+                        case '*':\n+                            if (inGroup || inCharClass) {\n+                                regex.append(c);\n+                            } else {\n+                                if (lastChar != '(' && lastChar != '|' && lastChar != '\\0') {\n+                                    regex.append(\"(?:\\\\Q\");\n+                                    regex.append(lastChar);\n+                                    regex.append(\"\\\\E)?\");\n+                                }\n+                            }\n+                            break;\n+                        case '|':\n+                            if (escaped) {\n+                                regex.append('|');\n+                                escaped = false;\n+                                break;\n+                            }\n+                            if (inGroup || inCharClass) {\n+                                regex.append('|');\n+                            } else {\n+                                regex.append(\"\\\\|\");\n+                            }\n+                            break;\n+                        case '{':\n+                            if (!inGroup && !inCharClass) {\n+                                regex.append(\"(?:\");\n+                            } else {\n+                                regex.append('{');\n+                            }\n+                            break;\n+                        case '}':\n+                            if (!inGroup && !inCharClass) {\n+                                regex.append(\")?\");\n+                            } else {\n+                                regex.append('}');\n+                            }\n+                            break;\n+                        case '$':\n+                        case '^':\n+                        case '.':\n+                        case '[':\n+                        case ']':\n+                        case '\\\\':\n+                            regex.append('\\\\');\n+                            regex.append(c);\n+                            break;\n+                        default:\n+                            regex.append(c);\n+                            break;\n+                    }\n+                    lastChar = c;\n+                }\n+                break;\n+        }\n+    }\n+    if (inGroup || inCharClass) {\n+        regex.append(')');\n+    } else if (lastChar == ')') {\n+        regex.append('?');\n+    }\n+    if (unquote) {\n+        String pattern = regex.toString();\n+        if (pattern.startsWith(\"\\\\Q'\") && pattern.endsWith(\"'\\\\E\")) {\n+            int endIndex = pattern.length() - 2;\n+            regex.setLength(endIndex);\n+            regex.deleteCharAt(0);\n+            if (regex.length() > 6 && regex.substring(0, 6).equals(\"\\\\s*\")) {\n+                regex.replace(0, 6, \"(?:\\\\s*)?\");\n             }\n-            regex.append(c);\n+        } else {\n+            regex.insert(0, \"(?:\\\\Q\");\n+            regex.append(\"\\\\E)?\");\n         }\n-        return regex;\n+    } else {\n+        regex.insert(0, \"(?:\");\n+        regex.append(\")\");\n     }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}