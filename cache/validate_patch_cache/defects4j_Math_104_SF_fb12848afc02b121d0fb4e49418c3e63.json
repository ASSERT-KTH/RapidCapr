{
    "patch": "public static double regulizedGammaP(double a, double x) {\n    double d = a * Math.log(x) - x - logGamma(a);\n    if (d < -MAXLOG) {\n        return 0.0;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (a >= 1.0 && x > 1.0) {\n        return 1.0 - regulizedGammaQ(a, x);\n    }\n    double sum = 1.0 / a;\n    double del = sum;\n    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n        del *= x / (a + i);\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * EPSILON) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n    throw new IllegalStateException(\"Maximum number of iterations (\" + MAX_ITERATIONS + \") exceeded\");\n}\n\npublic static double regulizedGammaQ(double a, double x) {\n    double d = a * Math.log(x) - x - logGamma(a);\n    if (d < -MAXLOG) {\n        return 0.0;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a >= 1.0 && x > 1.0) {\n        return 1.0 - regulizedGammaP(a, x);\n    }\n    double term = 1.0 / a;\n    double sum = term;\n    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n        term *= x / (a + i);\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * EPSILON) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n    throw new IllegalStateException(\"Maximum number of iterations (\" + MAX_ITERATIONS + \") exceeded\");\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..47c9e0c0d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,57 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regulizedGammaP(double a, double x) {\n+    double d = a * Math.log(x) - x - logGamma(a);\n+    if (d < -MAXLOG) {\n+        return 0.0;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (a >= 1.0 && x > 1.0) {\n+        return 1.0 - regulizedGammaQ(a, x);\n+    }\n+    double sum = 1.0 / a;\n+    double del = sum;\n+    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n+        del *= x / (a + i);\n+        sum += del;\n+        if (Math.abs(del) < Math.abs(sum) * EPSILON) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+    throw new IllegalStateException(\"Maximum number of iterations (\" + MAX_ITERATIONS + \") exceeded\");\n+}\n+\n+public static double regulizedGammaQ(double a, double x) {\n+    double d = a * Math.log(x) - x - logGamma(a);\n+    if (d < -MAXLOG) {\n+        return 0.0;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a >= 1.0 && x > 1.0) {\n+        return 1.0 - regulizedGammaP(a, x);\n+    }\n+    double term = 1.0 / a;\n+    double sum = term;\n+    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * EPSILON) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+    throw new IllegalStateException(\"Maximum number of iterations (\" + MAX_ITERATIONS + \") exceeded\");\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}