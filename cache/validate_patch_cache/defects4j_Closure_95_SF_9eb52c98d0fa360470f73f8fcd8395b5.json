{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n  String variableName = \"\";\n  boolean shouldDeclareOnGlobalThis = false;\n  // Allow declarations of NAMEs and qualified names.\n  switch (n.getToken()) {\n    case NAME:\n      switch (parent.getToken()) {\n        case FUNCTION:\n        case VAR:\n        case LET:\n        case CONST:\n        case LP:\n        case CATCH:\n        case EXPR_RESULT:\n          shouldDeclareOnGlobalThis = scope.isGlobal() &&\n              (parent.getToken() == Token.VAR ||\n               parent.getToken() == Token.LET ||\n               parent.getToken() == Token.FUNCTION ||\n               parent.getToken() == Token.CONST);\n          variableName = n.getString();\n          break;\n        case ASSIGN:\n          if (parent.getFirstChild() != n) {\n            throw new IllegalStateException(\"Invalid parent of NAME node: \" + parent.getToken());\n          }\n          Node grandparent = parent.getParent();\n          if (grandparent.getToken() == Token.EXPR_RESULT) {\n            shouldDeclareOnGlobalThis = scope.isGlobal();\n            variableName = n.getString();\n            break;\n          }\n          // Fallthrough\n        default:\n          throw new IllegalStateException(\"Invalid parent of NAME node: \" + parent.getToken());\n      }\n      break;\n    case GETPROP:\n      if (parent.getToken() == Token.EXPR_RESULT) {\n        shouldDeclareOnGlobalThis = scope.isGlobal();\n        variableName = n.getLastChild().getString();\n        break;\n      }\n      // Fallthrough\n    default:\n      throw new IllegalStateException(\"Invalid node type: \" + n.getToken());\n  }\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  Scope scopeToDeclareIn = scope;\n\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input,\n            superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..091ee20d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,88 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+  String variableName = \"\";\n+  boolean shouldDeclareOnGlobalThis = false;\n+  // Allow declarations of NAMEs and qualified names.\n+  switch (n.getToken()) {\n+    case NAME:\n+      switch (parent.getToken()) {\n+        case FUNCTION:\n+        case VAR:\n+        case LET:\n+        case CONST:\n+        case LP:\n+        case CATCH:\n+        case EXPR_RESULT:\n+          shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+              (parent.getToken() == Token.VAR ||\n+               parent.getToken() == Token.LET ||\n+               parent.getToken() == Token.FUNCTION ||\n+               parent.getToken() == Token.CONST);\n+          variableName = n.getString();\n+          break;\n+        case ASSIGN:\n+          if (parent.getFirstChild() != n) {\n+            throw new IllegalStateException(\"Invalid parent of NAME node: \" + parent.getToken());\n+          }\n+          Node grandparent = parent.getParent();\n+          if (grandparent.getToken() == Token.EXPR_RESULT) {\n+            shouldDeclareOnGlobalThis = scope.isGlobal();\n+            variableName = n.getString();\n+            break;\n+          }\n+          // Fallthrough\n+        default:\n+          throw new IllegalStateException(\"Invalid parent of NAME node: \" + parent.getToken());\n+      }\n+      break;\n+    case GETPROP:\n+      if (parent.getToken() == Token.EXPR_RESULT) {\n+        shouldDeclareOnGlobalThis = scope.isGlobal();\n+        variableName = n.getLastChild().getString();\n+        break;\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n+      // Fallthrough\n+    default:\n+      throw new IllegalStateException(\"Invalid node type: \" + n.getToken());\n+  }\n+  Preconditions.checkArgument(!variableName.isEmpty());\n+\n+  Scope scopeToDeclareIn = scope;\n+\n+  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+  } else {\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+    CompilerInput input = compiler.getInput(sourceName);\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName,\n+            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n       } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+      }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input,\n+            superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}