{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    try {\n        return createMockInstance(settings, handler);\n    } catch (Exception e) {\n        throw new MockitoException(\"Failed to create mock instance\", e);\n    }\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate <T> T createMockInstance(MockCreationSettings<T> settings, MockHandler handler) throws Exception {\n\n    Class<T> typeToMock = settings.getTypeToMock();\n    Class<?>[] extraInterfaces = settings.getExtraInterfaces().toArray(new Class<?>[] {});\n\n    Class<?> enclosingClass = typeToMock.getEnclosingClass();\n    if (enclosingClass != null && !Modifier.isStatic(typeToMock.getModifiers())) {\n        // Creating mock object for inner class non-static\n\n        Constructor<?>[] declaredConstructors = typeToMock.getDeclaredConstructors();\n        for (Constructor<?> c : declaredConstructors) {\n            Class<?>[] parameterTypes = c.getParameterTypes();\n            if (parameterTypes.length == 2 && parameterTypes[0].equals(enclosingClass)\n                    && parameterTypes[1].equals(MockCreationSettings.class)) {\n                c.setAccessible(true);\n                Constructor<T> constructor = (Constructor<T>) c;\n                Object outerInstance = enclosingClass.newInstance();\n                return constructor.newInstance(outerInstance, settings);\n            }\n        }\n\n        throw new MockitoException(String.format(\"Unable to instantiate %s. No valid constructor found.\", typeToMock));\n    } else {\n        // Creating mock object for static and outer classes\n        try {\n            String mockName = \"MockitoMock\" + typeToMock.getSimpleName() + \"$$\" + System.nanoTime();\n            return (T) new ByteBuddy()\n                    .with(new MockitoMethodDelegation())\n                    .mock(typeToMock, NamedMockConstructor.uniqueNameOf(mockName), withDefaultAnswer(), MockitoMockMaker.MockMarker.class, extraInterfaces)\n                    .getLoaded()\n                    .getDeclaredConstructor(MockCreationSettings.class, MockHandler.class)\n                    .newInstance(settings, asInternalMockHandler(handler));\n        } catch (Exception e) {\n            throw new MockitoException(String.format(\"Unable to instantiate %s.\", typeToMock), e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..59f9c0377 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,56 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+\n+    try {\n+        return createMockInstance(settings, handler);\n+    } catch (Exception e) {\n+        throw new MockitoException(\"Failed to create mock instance\", e);\n+    }\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private <T> T createMockInstance(MockCreationSettings<T> settings, MockHandler handler) throws Exception {\n+\n+    Class<T> typeToMock = settings.getTypeToMock();\n+    Class<?>[] extraInterfaces = settings.getExtraInterfaces().toArray(new Class<?>[] {});\n+\n+    Class<?> enclosingClass = typeToMock.getEnclosingClass();\n+    if (enclosingClass != null && !Modifier.isStatic(typeToMock.getModifiers())) {\n+        // Creating mock object for inner class non-static\n+\n+        Constructor<?>[] declaredConstructors = typeToMock.getDeclaredConstructors();\n+        for (Constructor<?> c : declaredConstructors) {\n+            Class<?>[] parameterTypes = c.getParameterTypes();\n+            if (parameterTypes.length == 2 && parameterTypes[0].equals(enclosingClass)\n+                    && parameterTypes[1].equals(MockCreationSettings.class)) {\n+                c.setAccessible(true);\n+                Constructor<T> constructor = (Constructor<T>) c;\n+                Object outerInstance = enclosingClass.newInstance();\n+                return constructor.newInstance(outerInstance, settings);\n+            }\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+        throw new MockitoException(String.format(\"Unable to instantiate %s. No valid constructor found.\", typeToMock));\n+    } else {\n+        // Creating mock object for static and outer classes\n+        try {\n+            String mockName = \"MockitoMock\" + typeToMock.getSimpleName() + \"$$\" + System.nanoTime();\n+            return (T) new ByteBuddy()\n+                    .with(new MockitoMethodDelegation())\n+                    .mock(typeToMock, NamedMockConstructor.uniqueNameOf(mockName), withDefaultAnswer(), MockitoMockMaker.MockMarker.class, extraInterfaces)\n+                    .getLoaded()\n+                    .getDeclaredConstructor(MockCreationSettings.class, MockHandler.class)\n+                    .newInstance(settings, asInternalMockHandler(handler));\n+        } catch (Exception e) {\n+            throw new MockitoException(String.format(\"Unable to instantiate %s.\", typeToMock), e);\n         }\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}