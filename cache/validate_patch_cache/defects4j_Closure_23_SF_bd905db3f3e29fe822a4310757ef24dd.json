{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    if (!isSafeIndex(index)) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    int intIndex = (int) index;\n    Node current = left.getFirstChild();\n\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = null;\n    int i = 0;\n\n    while (current != null) {\n      if (i == intIndex) {\n        elem = current;\n        break;\n      }\n      i++;\n      current = current.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }\n  \n  private boolean isSafeIndex(double index) {\n    return index >= 0 && index < Integer.MAX_VALUE && index % 1 == 0;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..fc3e8dbd 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,8 +1419,9 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n+\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n@@ -1435,22 +1436,28 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n+    if (!isSafeIndex(index)) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    if (intIndex < 0) {\n+    int intIndex = (int) index;\n+    Node current = left.getFirstChild();\n+\n+    if (current == null) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+    int i = 0;\n \n+    while (current != null) {\n+      if (i == intIndex) {\n+        elem = current;\n+        break;\n+      }\n+      i++;\n       current = current.getNext();\n     }\n \n@@ -1470,6 +1477,9 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     reportCodeChange();\n     return elem;\n   }\n+  \n+  private boolean isSafeIndex(double index) {\n+    return index >= 0 && index < Integer.MAX_VALUE && index % 1 == 0;\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}