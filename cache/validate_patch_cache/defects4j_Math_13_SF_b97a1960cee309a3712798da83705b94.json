{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    EigenDecomposition eig = new EigenDecomposition(m);\n    RealMatrix eigenvalues = eig.getD();\n    RealMatrix eigenvectors = eig.getV();\n    RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n    boolean isPositiveDefinite = true;\n    for (int i = 0; i < n; i++) {\n        double d = eigenvalues.getEntry(i, i);\n        if (d < 0) {\n            isPositiveDefinite = false;\n            break;\n        }\n        sqrtEigenvalues.setEntry(i, i, Math.sqrt(d));\n    }\n    if (!isPositiveDefinite) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n    }\n\n    final double eps = Math.ulp(1.0);\n    boolean decomposed = false;\n    int maxIter = 1000;\n    for (int iter = 0; iter < maxIter; ++iter) {\n        try {\n            RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n            RealMatrix residual = m.subtract(sqrt.multiply(sqrt));\n            double maxError = residual.getNorm();\n            if (maxError < eps) {\n                decomposed = true;\n                return sqrt;\n            }\n            double scale = FastMath.sqrt((double) n) * FastMath.max(eps, maxError);\n            eig = new EigenDecomposition(residual.scalarMultiply(1.0 / scale).add(MatrixUtils.createRealIdentityMatrix(n)));\n            eigenvalues = eig.getD();\n            eigenvectors = eig.getV();\n\n            isPositiveDefinite = true;\n            for (int i = 0; i < n; i++) {\n                double d = eigenvalues.getEntry(i, i);\n                if (d < 0) {\n                    isPositiveDefinite = false;\n                    break;\n                }\n                sqrtEigenvalues.setEntry(i, i, Math.sqrt(d));\n            }\n\n            if (!isPositiveDefinite) {\n                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n            }\n        } catch (Exception e) {\n            break;\n        }\n    }\n\n    if (!decomposed) {\n        throw new IllegalArgumentException(\"Matrix square root decomposition failed to converge.\");\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..46ad6c83b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,63 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    EigenDecomposition eig = new EigenDecomposition(m);\n+    RealMatrix eigenvalues = eig.getD();\n+    RealMatrix eigenvectors = eig.getV();\n+    RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+    boolean isPositiveDefinite = true;\n+    for (int i = 0; i < n; i++) {\n+        double d = eigenvalues.getEntry(i, i);\n+        if (d < 0) {\n+            isPositiveDefinite = false;\n+            break;\n+        }\n+        sqrtEigenvalues.setEntry(i, i, Math.sqrt(d));\n+    }\n+    if (!isPositiveDefinite) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+    }\n+\n+    final double eps = Math.ulp(1.0);\n+    boolean decomposed = false;\n+    int maxIter = 1000;\n+    for (int iter = 0; iter < maxIter; ++iter) {\n+        try {\n+            RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+            RealMatrix residual = m.subtract(sqrt.multiply(sqrt));\n+            double maxError = residual.getNorm();\n+            if (maxError < eps) {\n+                decomposed = true;\n+                return sqrt;\n+            }\n+            double scale = FastMath.sqrt((double) n) * FastMath.max(eps, maxError);\n+            eig = new EigenDecomposition(residual.scalarMultiply(1.0 / scale).add(MatrixUtils.createRealIdentityMatrix(n)));\n+            eigenvalues = eig.getD();\n+            eigenvectors = eig.getV();\n+\n+            isPositiveDefinite = true;\n+            for (int i = 0; i < n; i++) {\n+                double d = eigenvalues.getEntry(i, i);\n+                if (d < 0) {\n+                    isPositiveDefinite = false;\n+                    break;\n+                }\n+                sqrtEigenvalues.setEntry(i, i, Math.sqrt(d));\n+            }\n+\n+            if (!isPositiveDefinite) {\n+                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+            }\n+        } catch (Exception e) {\n+            break;\n+        }\n     }\n+\n+    if (!decomposed) {\n+        throw new IllegalArgumentException(\"Matrix square root decomposition failed to converge.\");\n+    }\n+    return null;\n+}\n }",
    "result_reason": "java.lang.IllegalArgumentException: Matrix square root decomposition failed to converge.",
    "test_result": "FAIL"
}