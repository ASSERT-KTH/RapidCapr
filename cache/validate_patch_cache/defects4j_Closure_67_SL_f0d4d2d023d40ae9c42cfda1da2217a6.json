{
    "patch": "```\n&& NodeUtil.isExpressionResultUsed(assign.getParent()) == false)\n``` \n\nThis fix line checks if the expression result of the parent node is unused. If it is unused, then the conditions pass and the method returns `true`.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..ab199e9c 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,11 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+```\n+&& NodeUtil.isExpressionResultUsed(assign.getParent()) == false)\n+``` \n+\n+This fix line checks if the expression result of the parent node is unused. If it is unused, then the conditions pass and the method returns `true`.\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}