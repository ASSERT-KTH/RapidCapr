{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n    handleFunctionInputs(n.getNext().getFirstChild());\n    return;\n  }\n\n  if (n.getType() == Token.FUNCTION) {\n    if (NodeUtil.isFunctionDeclaration(n)) {\n      defineDeclaredFunction(n, parent.getParent());\n    } else if (NodeUtil.isFunctionExpression(n) && isTopLevelFunctionExpression(n, parent)) {\n      defineDeclaredFunction(n, parent.getParent().getParent());\n    }\n    return;\n  }\n\n  if (n.getType() == Token.CATCH) {\n    defineCatch(n, parent);\n    return;\n  }\n\n  if (n.getType() == Token.VAR) {\n    defineVar(n, parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n}\n\nprivate boolean isTopLevelFunctionExpression(Node funcNode, Node parent) {\n  return NodeUtil.isFunctionExpression(funcNode) && parent != null && parent.isExprResult()\n      && parent.getParent().isScript();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e189bac4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,43 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n+    handleFunctionInputs(n.getNext().getFirstChild());\n+    return;\n+  }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+  if (n.getType() == Token.FUNCTION) {\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+      defineDeclaredFunction(n, parent.getParent());\n+    } else if (NodeUtil.isFunctionExpression(n) && isTopLevelFunctionExpression(n, parent)) {\n+      defineDeclaredFunction(n, parent.getParent().getParent());\n     }\n+    return;\n+  }\n+\n+  if (n.getType() == Token.CATCH) {\n+    defineCatch(n, parent);\n+    return;\n+  }\n+\n+  if (n.getType() == Token.VAR) {\n+    defineVar(n, parent);\n+    return;\n+  }\n+\n+  attachLiteralTypes(n);\n+}\n+\n+private boolean isTopLevelFunctionExpression(Node funcNode, Node parent) {\n+  return NodeUtil.isFunctionExpression(funcNode) && parent != null && parent.isExprResult()\n+      && parent.getParent().isScript();\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}