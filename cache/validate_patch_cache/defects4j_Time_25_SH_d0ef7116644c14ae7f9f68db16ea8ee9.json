{
    "patch": "        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            int diff = offsetLocal - offsetAdjusted;\n            long next;\n            if (diff < 0) {\n                next = nextTransition(instantAdjusted);\n            } else {\n                next = previousTransition(instantAdjusted);\n            }\n            long nextAdjusted = next - diff * DateTimeConstants.MILLIS_PER_HOUR;\n            int offsetNext = getOffset(nextAdjusted);\n            if (offsetNext != offsetLocal && offsetNext != offsetAdjusted) {\n                return offsetNext;\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7d98054e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            int diff = offsetLocal - offsetAdjusted;\n+            long next;\n+            if (diff < 0) {\n+                next = nextTransition(instantAdjusted);\n+            } else {\n+                next = previousTransition(instantAdjusted);\n+            }\n+            long nextAdjusted = next - diff * DateTimeConstants.MILLIS_PER_HOUR;\n+            int offsetNext = getOffset(nextAdjusted);\n+            if (offsetNext != offsetLocal && offsetNext != offsetAdjusted) {\n+                return offsetNext;\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}