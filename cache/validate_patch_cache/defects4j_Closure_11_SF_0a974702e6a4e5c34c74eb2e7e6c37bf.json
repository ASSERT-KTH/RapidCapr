{
    "patch": "public String getprop(String property) {\n    try {\n        Process p = Runtime.getRuntime().exec(\n                new String[] { \"/system/bin/getprop\", property });\n        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()), 4096);\n        String line;\n        ArrayList<String> lines = new ArrayList<String>();\n        while ((line = input.readLine()) != null) {\n            lines.add(line);\n        }\n        input.close();\n        if (lines.size() == 0)\n            return null;\n        return lines.get(0);\n    } catch (IOException ex) {\n        System.err.println(\"Unable to read property \" + property + \":\" + ex);\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..c80a3e62 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String property) {\n+    try {\n+        Process p = Runtime.getRuntime().exec(\n+                new String[] { \"/system/bin/getprop\", property });\n+        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()), 4096);\n+        String line;\n+        ArrayList<String> lines = new ArrayList<String>();\n+        while ((line = input.readLine()) != null) {\n+            lines.add(line);\n+        }\n+        input.close();\n+        if (lines.size() == 0)\n+            return null;\n+        return lines.get(0);\n+    } catch (IOException ex) {\n+        System.err.println(\"Unable to read property \" + property + \":\" + ex);\n+        return null;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}