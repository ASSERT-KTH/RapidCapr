{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && (name.isVar() || name.isLet())) {\n        // `name` meets condition (b).\n        inlineVariableIfPossible(name.getOnlyRef(), namespace);\n      } else if (name.localSets == 0 &&\n                 name.aliasingGets > 0 &&\n                 !name.isBleedingFunction()) {\n        // `name` meets condition (c). Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if `name` has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of `name`'s children meet condition (a), so they can be added to the worklist.\n        workList.addAll(name.props);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..77691e72 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,31 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && (name.isVar() || name.isLet())) {\n+        // `name` meets condition (b).\n+        inlineVariableIfPossible(name.getOnlyRef(), namespace);\n+      } else if (name.localSets == 0 &&\n+                 name.aliasingGets > 0 &&\n+                 !name.isBleedingFunction()) {\n+        // `name` meets condition (c). Find all of its local aliases and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n+\n+      // Check if `name` has any aliases left after the\n+      // local-alias-inlining above.\n+      if ((name.type == Name.Type.OBJECTLIT ||\n+           name.type == Name.Type.FUNCTION) &&\n+          name.aliasingGets == 0 && name.props != null) {\n+        // All of `name`'s children meet condition (a), so they can be added to the worklist.\n+        workList.addAll(name.props);\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}