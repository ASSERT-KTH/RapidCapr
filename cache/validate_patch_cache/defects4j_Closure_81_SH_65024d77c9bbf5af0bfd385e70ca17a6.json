{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on. We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.) If there's no\n      // function name, assume the paren was on the same line as the function.\n      Name fnName = functionNode.getFunctionName();\n      int lpLineNo = fnName != null ? fnName.getLineno() : functionNode.getLineno();\n      int lpCharNo = functionNode.getFunctionName() != null ? position2charno(functionNode.getFunctionName().getAbsolutePosition() + functionNode.getFunctionName().getLength() + 1) \n                                                            : position2charno(functionNode.getAbsolutePosition() + functionNode.getLp() + 1);\n      lp.setLineno(lpLineNo);\n      lp.setCharno(lpCharNo);\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9e28cf9e 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,51 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      Boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        newName.setLineno(functionNode.getLineno());\n+        // TODO(bowdidge) Mark line number of paren correctly.\n+        // Same problem as below - the left paren might not be on the\n+        // same line as the function keyword.\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      // The left paren's complicated because it's not represented by an\n+      // AstNode, so there's nothing that has the actual line number that it\n+      // appeared on. We know the paren has to appear on the same line as the\n+      // function name (or else a semicolon will be inserted.) If there's no\n+      // function name, assume the paren was on the same line as the function.\n+      Name fnName = functionNode.getFunctionName();\n+      int lpLineNo = fnName != null ? fnName.getLineno() : functionNode.getLineno();\n+      int lpCharNo = functionNode.getFunctionName() != null ? position2charno(functionNode.getFunctionName().getAbsolutePosition() + functionNode.getFunctionName().getLength() + 1) \n+                                                            : position2charno(functionNode.getAbsolutePosition() + functionNode.getLp() + 1);\n+      lp.setLineno(lpLineNo);\n+      lp.setCharno(lpCharNo);\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+      return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}