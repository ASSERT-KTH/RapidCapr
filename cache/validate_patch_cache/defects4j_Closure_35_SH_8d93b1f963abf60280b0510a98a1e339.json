{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = constraintObj.getPropertyType(prop);\n            if (objType.getOwnPropertyNames().contains(prop) ||\n                objType.getImplicitPrototype().hasProperty(prop)) {\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            } else {\n              warnings.add(JSError.make(\n                  n, UNSAFE_NAMESPACE_WARNING, prop, \" inferred type \", typeToInfer));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..672a9c62 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1122,18 +1122,20 @@ class TypeInference\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            JSType typeToInfer = constraintObj.getPropertyType(prop);\n+            if (objType.getOwnPropertyNames().contains(prop) ||\n+                objType.getImplicitPrototype().hasProperty(prop)) {\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n+            } else {\n+              warnings.add(JSError.make(\n+                  n, UNSAFE_NAMESPACE_WARNING, prop, \" inferred type \", typeToInfer));\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}