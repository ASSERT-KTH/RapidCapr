{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n        Set<String> usedParams = referenced.stream().map(Var::getName).collect(Collectors.toSet());\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg = argList.getLastChild();\n        while (lastArg != null && !usedParams.contains(lastArg.getString())) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n            lastArg = argList.getLastChild();\n        }\n\n        if (lastArg == null) {\n            function.removeChild(argList);\n            compiler.reportCodeChange();\n        } else {\n            Node arg = lastArg.getPrevious();\n            while (arg != null) {\n                Node nextArg = arg.getPrevious();\n                if (!usedParams.contains(arg.getString())) {\n                    argList.removeChild(arg);\n                    compiler.reportCodeChange();\n                }\n                arg = nextArg;\n            }\n        }\n\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..13006f13 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+        Set<String> usedParams = referenced.stream().map(Var::getName).collect(Collectors.toSet());\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg = argList.getLastChild();\n+        while (lastArg != null && !usedParams.contains(lastArg.getString())) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+            lastArg = argList.getLastChild();\n+        }\n+\n+        if (lastArg == null) {\n+            function.removeChild(argList);\n+            compiler.reportCodeChange();\n+        } else {\n+            Node arg = lastArg.getPrevious();\n+            while (arg != null) {\n+                Node nextArg = arg.getPrevious();\n+                if (!usedParams.contains(arg.getString())) {\n+                    argList.removeChild(arg);\n+                    compiler.reportCodeChange();\n+                }\n+                arg = nextArg;\n+            }\n+        }\n+\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}