{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean hasQuotedString = false;\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        if (child.isQuotedString()) {\n          hasQuotedString = true;\n          continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n\n      if (hasQuotedString) {\n        for (Node child = n.getFirstChild();\n            child != null;\n            child = child.getNext()) {\n          if (child.isQuotedString()) {\n            String name = child.getString();\n            Property prop = getProperty(name);\n            T type = typeSystem.getType(getScope(), n, name);\n            if (!prop.scheduleRenaming(child,\n                                        processProperty(t, prop, type, null))) {\n              // TODO(user): It doesn't look like the user can do much in this\n              // case right now.\n              if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child, propertiesToErrorFor.get(name),\n                    Warnings.INVALIDATION, name,\n                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n              }\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..bf6d6d95 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,10 +488,15 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n+      boolean hasQuotedString = false;\n       for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        if (child.isQuotedString()) {\n+          hasQuotedString = true;\n+          continue;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n@@ -510,6 +515,29 @@ class DisambiguateProperties<T> implements CompilerPass {\n           }\n         }\n       }\n+\n+      if (hasQuotedString) {\n+        for (Node child = n.getFirstChild();\n+            child != null;\n+            child = child.getNext()) {\n+          if (child.isQuotedString()) {\n+            String name = child.getString();\n+            Property prop = getProperty(name);\n+            T type = typeSystem.getType(getScope(), n, name);\n+            if (!prop.scheduleRenaming(child,\n+                                        processProperty(t, prop, type, null))) {\n+              // TODO(user): It doesn't look like the user can do much in this\n+              // case right now.\n+              if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                    Warnings.INVALIDATION, name,\n+                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+              }\n+            }\n+          }\n+        }\n+      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>",
    "test_result": "FAIL"
}