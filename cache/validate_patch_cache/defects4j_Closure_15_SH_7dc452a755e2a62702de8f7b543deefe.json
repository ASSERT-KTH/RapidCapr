{
    "patch": "        if (n.isGetProp()) {\n          if (NodeUtil.isLValue(n)) {\n            return false;\n          }\n          Node parent = n.getParent();\n          if (NodeUtil.mayHaveSideEffects(parent.getFirstChild())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..b974720f 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,12 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isGetProp()) {\n+          if (NodeUtil.isLValue(n)) {\n+            return false;\n+          }\n+          Node parent = n.getParent();\n+          if (NodeUtil.mayHaveSideEffects(parent.getFirstChild())) {\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}