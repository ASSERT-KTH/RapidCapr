{
    "patch": "public class Rational {\n    private final int numerator;\n    private final int denominator;\n\n    public Rational(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new IllegalArgumentException(\"Denominator cannot be zero.\");\n        }\n        // Reduce rational to lowest terms\n        int gcd = gcd(numerator, denominator);\n        this.numerator = numerator / gcd;\n        this.denominator = denominator / gcd;\n    }\n    \n    public int getNumerator() {\n        return numerator;\n    }\n    \n    public int getDenominator() {\n        return denominator;\n    }\n\n    public Rational add(Rational other) {\n        int numerator = this.numerator * other.denominator + other.numerator * this.denominator;\n        int denominator = this.denominator * other.denominator;\n        return new Rational(numerator, denominator);\n    }\n\n    public Rational subtract(Rational other) {\n        int numerator = this.numerator * other.denominator - other.numerator * this.denominator;\n        int denominator = this.denominator * other.denominator;\n        return new Rational(numerator, denominator);\n    }\n\n    public Rational multiply(Rational other) {\n        int numerator = this.numerator * other.numerator;\n        int denominator = this.denominator * other.denominator;\n        return new Rational(numerator, denominator);\n    }\n\n    public Rational divide(Rational other) {\n        int numerator = this.numerator * other.denominator;\n        int denominator = this.denominator * other.numerator;\n        return new Rational(numerator, denominator);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Rational)) {\n            return false;\n        }\n        Rational other = (Rational) obj;\n        return this.numerator == other.numerator && this.denominator == other.denominator;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 17;\n        result = 31 * result + numerator;\n        result = 31 * result + denominator;\n        return result;\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\nindex bbd5ddb..96bbfb8 100644\n--- a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n@@ -327,7 +327,79 @@ public class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer {\n      * @param column  the column index (zero-based).\n      * @param pass  the pass index.\n      */\n-    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n+public class Rational {\n+    private final int numerator;\n+    private final int denominator;\n+\n+    public Rational(int numerator, int denominator) {\n+        if (denominator == 0) {\n+            throw new IllegalArgumentException(\"Denominator cannot be zero.\");\n+        }\n+        // Reduce rational to lowest terms\n+        int gcd = gcd(numerator, denominator);\n+        this.numerator = numerator / gcd;\n+        this.denominator = denominator / gcd;\n+    }\n+    \n+    public int getNumerator() {\n+        return numerator;\n+    }\n+    \n+    public int getDenominator() {\n+        return denominator;\n+    }\n+\n+    public Rational add(Rational other) {\n+        int numerator = this.numerator * other.denominator + other.numerator * this.denominator;\n+        int denominator = this.denominator * other.denominator;\n+        return new Rational(numerator, denominator);\n+    }\n+\n+    public Rational subtract(Rational other) {\n+        int numerator = this.numerator * other.denominator - other.numerator * this.denominator;\n+        int denominator = this.denominator * other.denominator;\n+        return new Rational(numerator, denominator);\n+    }\n+\n+    public Rational multiply(Rational other) {\n+        int numerator = this.numerator * other.numerator;\n+        int denominator = this.denominator * other.denominator;\n+        return new Rational(numerator, denominator);\n+    }\n+\n+    public Rational divide(Rational other) {\n+        int numerator = this.numerator * other.denominator;\n+        int denominator = this.denominator * other.numerator;\n+        return new Rational(numerator, denominator);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (!(obj instanceof Rational)) {\n+            return false;\n+        }\n+        Rational other = (Rational) obj;\n+        return this.numerator == other.numerator && this.denominator == other.denominator;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = 17;\n+        result = 31 * result + numerator;\n+        result = 31 * result + denominator;\n+        return result;\n+    }\n+\n+    private int gcd(int a, int b) {\n+        if (b == 0) {\n+            return a;\n+        }\n+        return gcd(b, a % b);\n+    }\n+}\n             Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n             ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n             int pass) {",
    "result_reason": "error: annotations are not supported in -source 1.4",
    "test_result": "ERROR"
}