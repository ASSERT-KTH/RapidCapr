{
    "patch": "import java.nio.charset.Charset;\nimport java.util.*;\nimport java.util.regex.*;\n\npublic static String unescape(String s) {\n    if (s.indexOf('%') == -1) {\n        return s;\n    } else {\n        int n = s.length();\n        StringBuffer sb = new StringBuffer();\n        ByteBuffer bb = ByteBuffer.allocate(n);\n        CharBuffer cb = CharBuffer.allocate(n);\n        Pattern p = Pattern.compile(\"%([0-9A-Fa-f]{2})\");\n\n        int i = 0;\n        while (i < n) {\n            char c = s.charAt(i);\n            if (c == '%') {\n                bb.clear();\n                do {\n                    if (i + 2 >= n) {\n                        throw new IllegalArgumentException(\"Incomplete % sequence at: \" + i);\n                    }\n                    String hex = s.substring(i + 1, i + 3);\n                    try {\n                        int x = Integer.parseInt(hex, 16);\n                        bb.put((byte)x);\n                    } catch (NumberFormatException e) {\n                        throw new IllegalArgumentException(\"Invalid hex number in % sequence at: \" + i, e);\n                    }\n                    i += 3;\n                    if (i >= n) break;\n                    c = s.charAt(i);\n                } while (c == '%');\n                bb.flip();\n                Charset.forName(\"ISO-8859-1\").newDecoder().decode(bb, cb, true);\n                sb.append(cb.flip().toString());\n                continue;\n            }\n            sb.append(c);\n            i++;\n        }\n        return sb.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c4f014a1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,51 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.nio.charset.Charset;\n+import java.util.*;\n+import java.util.regex.*;\n+\n+public static String unescape(String s) {\n+    if (s.indexOf('%') == -1) {\n+        return s;\n+    } else {\n+        int n = s.length();\n+        StringBuffer sb = new StringBuffer();\n+        ByteBuffer bb = ByteBuffer.allocate(n);\n+        CharBuffer cb = CharBuffer.allocate(n);\n+        Pattern p = Pattern.compile(\"%([0-9A-Fa-f]{2})\");\n+\n+        int i = 0;\n+        while (i < n) {\n+            char c = s.charAt(i);\n+            if (c == '%') {\n+                bb.clear();\n+                do {\n+                    if (i + 2 >= n) {\n+                        throw new IllegalArgumentException(\"Incomplete % sequence at: \" + i);\n+                    }\n+                    String hex = s.substring(i + 1, i + 3);\n+                    try {\n+                        int x = Integer.parseInt(hex, 16);\n+                        bb.put((byte)x);\n+                    } catch (NumberFormatException e) {\n+                        throw new IllegalArgumentException(\"Invalid hex number in % sequence at: \" + i, e);\n+                    }\n+                    i += 3;\n+                    if (i >= n) break;\n+                    c = s.charAt(i);\n+                } while (c == '%');\n+                bb.flip();\n+                Charset.forName(\"ISO-8859-1\").newDecoder().decode(bb, cb, true);\n+                sb.append(cb.flip().toString());\n+                continue;\n+            }\n+            sb.append(c);\n+            i++;\n+        }\n+        return sb.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}