{
    "patch": "public static float getTypedPercent(String input) {\n    float count = 0;\n    float total = 0;\n    String[] tokens = input.split(\"\\n\");\n    for (int i = 0; i < tokens.length; i++) {\n        String[] parts = tokens[i].split(\",\");\n        if (parts.length == 2) {\n            total++;\n            if (parts[1].trim().equals(\"typed\")) {\n                count++;\n            }\n        }\n    }\n    return (count / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2b08a5d5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static float getTypedPercent(String input) {\n+    float count = 0;\n+    float total = 0;\n+    String[] tokens = input.split(\"\\n\");\n+    for (int i = 0; i < tokens.length; i++) {\n+        String[] parts = tokens[i].split(\",\");\n+        if (parts.length == 2) {\n+            total++;\n+            if (parts[1].trim().equals(\"typed\")) {\n+                count++;\n+            }\n+        }\n+    }\n+    return (count / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}