{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double small = 1e-15;\n    double big = 0.999999999999999;\n    double g = incompleteGamma(a, x);\n    double h = a * Math.log(x) - x - Gamma.logGamma(a);\n    if (x == 0) {\n        return 0.0;\n    } else if (x < 0 || a <= 0) {\n        return Double.NaN;\n    } else if (x < a + 1) {\n        double s = a;\n        double d = 1.0 / a;\n        double ap = a;\n        double gprev = g;\n        double sum = g;\n        for (int n = 1; n <= 100; n++) {\n            ++ap;\n            d *= x / ap;\n            s += d;\n            if (Math.abs(d) < Math.abs(s) * small) {\n                return sum * Math.exp(h);\n            }\n            sum = incompleteGamma(ap, x);\n            gprev = sum + s * gprev;\n            if (Math.abs(sum - gprev) < Math.abs(sum) * big) {\n                return gprev * Math.exp(h);\n            }\n        }\n    } else {\n        double b = x + 1 - a;\n        double c = 1 / small;\n        double d = 1 / b;\n        double hprev = 1;\n        double aa = b;\n        double del = aa * h - c;\n        for (int n = 1; n <= 100; n++) {\n            ++aa;\n            h = del * hprev + d;\n            if (Math.abs(h) > big) {\n                h *= small;\n                hprev *= small;\n            }\n            del = aa * del - h;\n            if (Math.abs(del - h) < small * Math.abs(del)) {\n                return 1.0 - g * Math.exp(hprev * a) * del / aa;\n            }\n            hprev = h;\n            c = aa + b / c;\n            d = b / d + aa;\n            if (Math.abs(aa - h) < small) {\n                throw new ArithmeticException(\"Underflow error in regularizedGamma\");\n            }\n        }\n    }\n    return Double.NaN;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..df919ce5a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double small = 1e-15;\n+    double big = 0.999999999999999;\n+    double g = incompleteGamma(a, x);\n+    double h = a * Math.log(x) - x - Gamma.logGamma(a);\n+    if (x == 0) {\n+        return 0.0;\n+    } else if (x < 0 || a <= 0) {\n+        return Double.NaN;\n+    } else if (x < a + 1) {\n+        double s = a;\n+        double d = 1.0 / a;\n+        double ap = a;\n+        double gprev = g;\n+        double sum = g;\n+        for (int n = 1; n <= 100; n++) {\n+            ++ap;\n+            d *= x / ap;\n+            s += d;\n+            if (Math.abs(d) < Math.abs(s) * small) {\n+                return sum * Math.exp(h);\n+            }\n+            sum = incompleteGamma(ap, x);\n+            gprev = sum + s * gprev;\n+            if (Math.abs(sum - gprev) < Math.abs(sum) * big) {\n+                return gprev * Math.exp(h);\n+            }\n+        }\n+    } else {\n+        double b = x + 1 - a;\n+        double c = 1 / small;\n+        double d = 1 / b;\n+        double hprev = 1;\n+        double aa = b;\n+        double del = aa * h - c;\n+        for (int n = 1; n <= 100; n++) {\n+            ++aa;\n+            h = del * hprev + d;\n+            if (Math.abs(h) > big) {\n+                h *= small;\n+                hprev *= small;\n+            }\n+            del = aa * del - h;\n+            if (Math.abs(del - h) < small * Math.abs(del)) {\n+                return 1.0 - g * Math.exp(hprev * a) * del / aa;\n+            }\n+            hprev = h;\n+            c = aa + b / c;\n+            d = b / d + aa;\n+            if (Math.abs(aa - h) < small) {\n+                throw new ArithmeticException(\"Underflow error in regularizedGamma\");\n+            }\n+        }\n+    }\n+    return Double.NaN;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}