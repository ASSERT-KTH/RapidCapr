{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n.getParent()) && left.isGetProp()) {\n      // If GETPROP/GETELEM is used as assignment target the array literal is\n      // acting as a temporary we can't fold it here:\n      //    \"[][0] += 1\"\n      return n;\n    }\n\n    if (!NodeUtil.isImmutableValue(right)) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    Object indexValue = NodeUtil.getConstantValue(right);\n    if (indexValue == null || !indexValue.getClass().equals(Double.class)) {\n      return n;\n    }\n    double index = (Double) indexValue;\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n      elem = current;\n      current = current.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(n);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, elem.detach());\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..2b912302 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1421,20 +1421,25 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n+\n+    if (NodeUtil.isAssignmentOp(n.getParent()) && left.isGetProp()) {\n+      // If GETPROP/GETELEM is used as assignment target the array literal is\n+      // acting as a temporary we can't fold it here:\n+      //    \"[][0] += 1\"\n       return n;\n     }\n \n-    if (!right.isNumber()) {\n+    if (!NodeUtil.isImmutableValue(right)) {\n       // Sometimes people like to use complex expressions to index into\n       // arrays, or strings to index into array methods.\n       return n;\n     }\n \n-    double index = right.getDouble();\n+    Object indexValue = NodeUtil.getConstantValue(right);\n+    if (indexValue == null || !indexValue.getClass().equals(Double.class)) {\n+      return n;\n+    }\n+    double index = (Double) indexValue;\n     int intIndex = (int) index;\n     if (intIndex != index) {\n       error(INVALID_GETELEM_INDEX_ERROR, right);\n@@ -1449,8 +1454,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     Node current = left.getFirstChild();\n     Node elem = null;\n     for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+      elem = current;\n       current = current.getNext();\n     }\n \n@@ -1460,13 +1464,13 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+      elem = NodeUtil.newUndefinedNode(n);\n     } else {\n       left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    parent.replaceChild(n, elem.detach());\n     reportCodeChange();\n     return elem;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}