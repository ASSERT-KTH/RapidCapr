{
    "patch": "StringBuilder sb = new StringBuilder();\ntry {\n    int i = 0;\n    while (i < len) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            if (i < len - 5 &&\n                    str.charAt(i+1) == 'u' &&\n                    isHexDigit(str.charAt(i+2)) &&\n                    isHexDigit(str.charAt(i+3)) &&\n                    isHexDigit(str.charAt(i+4)) &&\n                    isHexDigit(str.charAt(i+5))) {\n                // Unescape unicode\n                int value = (Character.digit(str.charAt(i+2), 16) << 12) +\n                        (Character.digit(str.charAt(i+3), 16) << 8) +\n                        (Character.digit(str.charAt(i+4), 16) << 4) +\n                        Character.digit(str.charAt(i+5), 16);\n                sb.append((char)value);\n                i += 6;\n            } else if (i < len - 1) {\n                // Unescape single character escape sequence\n                char ch2 = str.charAt(i+1);\n                if (ch2 == 't') {\n                    sb.append('\\t');\n                } else if (ch2 == 'r') {\n                    sb.append('\\r');\n                } else if (ch2 == 'n') {\n                    sb.append('\\n');\n                } else if (ch2 == 'f') {\n                    sb.append('\\f');\n                } else if (ch2 == 'b') {\n                    sb.append('\\b');\n                } else if (ch2 == '\\'') {\n                    sb.append('\\'');\n                } else if (ch2 == '\"') {\n                    sb.append('\"');\n                } else if (ch2 == '\\\\') {\n                    sb.append('\\\\');\n                } else {\n                    throw new IllegalArgumentException(\"Invalid escape sequence \\\\\" + ch2);\n                }\n                i += 2;\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence at end of input\");\n            }\n        } else if (ch >= ' ' && ch <= '~') {\n            sb.append(ch);\n            i++;\n        } else {\n            throw new IllegalArgumentException(\"Invalid character in input: \" + Integer.toHexString(ch));\n        }\n\n    }\n} catch (IllegalArgumentException e) {\n    return Collections.singletonList(e.getMessage());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}