{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class RegularizedGammaFunction {\n\n    /**\n     * Compute the gamma function of the given value using Apache Commons Math library.\n     *\n     * @param x the value to compute the gamma function for.\n     * @param a the shape parameter. Must be >0.\n     * @param eps the numerical tolerance for the computation.\n     * @return the regularized gamma function of x with shape a.\n     */\n    public static double compute(double x, double a, double eps) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"Shape parameter a must be greater than 0.\");\n        }\n        return Gamma.regularizedGammaP(a, x, eps, Integer.MAX_VALUE);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..2cb7f7a53 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class RegularizedGammaFunction {\n+\n+    /**\n+     * Compute the gamma function of the given value using Apache Commons Math library.\n+     *\n+     * @param x the value to compute the gamma function for.\n+     * @param a the shape parameter. Must be >0.\n+     * @param eps the numerical tolerance for the computation.\n+     * @return the regularized gamma function of x with shape a.\n+     */\n+    public static double compute(double x, double a, double eps) {\n+        if (a <= 0) {\n+            throw new IllegalArgumentException(\"Shape parameter a must be greater than 0.\");\n+        }\n+        return Gamma.regularizedGammaP(a, x, eps, Integer.MAX_VALUE);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}