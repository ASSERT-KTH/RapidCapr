{
    "patch": "        SavedField lastRepeatedType = null;\n        int repeatedCount = 0;\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            \n            if (lastRepeatedType == null || \n                lastRepeatedType.iType != savedField.iType ||\n                lastRepeatedType.iValue != savedField.iValue) {\n                lastRepeatedType = savedField;\n                repeatedCount = 1;\n            } else {\n                repeatedCount += 1;\n            }\n            \n            if (i < count - 1 && repeatedCount == savedField.next.iParseMax) {\n                continue;\n            }\n            \n            millis = savedField.set(millis, resetFields);\n            lastRepeatedType = null;\n            repeatedCount = 0;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..620c484b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastRepeatedType = null;\n+        int repeatedCount = 0;\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            \n+            if (lastRepeatedType == null || \n+                lastRepeatedType.iType != savedField.iType ||\n+                lastRepeatedType.iValue != savedField.iValue) {\n+                lastRepeatedType = savedField;\n+                repeatedCount = 1;\n+            } else {\n+                repeatedCount += 1;\n+            }\n+            \n+            if (i < count - 1 && repeatedCount == savedField.next.iParseMax) {\n+                continue;\n+            }\n+            \n+            millis = savedField.set(millis, resetFields);\n+            lastRepeatedType = null;\n+            repeatedCount = 0;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}