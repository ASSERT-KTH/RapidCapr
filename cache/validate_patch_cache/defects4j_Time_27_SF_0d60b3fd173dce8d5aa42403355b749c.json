{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    for (int i = 0; i < elementPairs.size(); i += 2) {\n        Object printerObject = elementPairs.get(i);\n        Object parserObject = elementPairs.get(i + 1);\n        if (printerObject instanceof PeriodPrinter && !notPrinter) {\n            PeriodPrinter periodPrinter = (PeriodPrinter) printerObject;\n            if (printer == null) {\n                printer = periodPrinter;\n            } else {\n                printer = printer.andThen(periodPrinter);\n            }\n        }\n        if (parserObject instanceof PeriodParser && !notParser) {\n            PeriodParser periodParser = (PeriodParser) parserObject;\n            if (parser == null) {\n                parser = periodParser;\n            } else {\n                parser = parser.withNext(periodParser);\n            }\n        }\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c83260be 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,38 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    for (int i = 0; i < elementPairs.size(); i += 2) {\n+        Object printerObject = elementPairs.get(i);\n+        Object parserObject = elementPairs.get(i + 1);\n+        if (printerObject instanceof PeriodPrinter && !notPrinter) {\n+            PeriodPrinter periodPrinter = (PeriodPrinter) printerObject;\n+            if (printer == null) {\n+                printer = periodPrinter;\n+            } else {\n+                printer = printer.andThen(periodPrinter);\n+            }\n+        }\n+        if (parserObject instanceof PeriodParser && !notParser) {\n+            PeriodParser periodParser = (PeriodParser) parserObject;\n+            if (parser == null) {\n+                parser = periodParser;\n+            } else {\n+                parser = parser.withNext(periodParser);\n+            }\n         }\n     }\n \n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}