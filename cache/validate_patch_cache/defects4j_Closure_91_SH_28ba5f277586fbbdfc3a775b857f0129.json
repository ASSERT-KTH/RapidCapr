{
    "patch": "      Node maybeGetprop = parent.isGetProp() ? parent :\n                           parent.isName() ? parent.getGrandparent() :\n                           null;\n      if (maybeGetprop != null &&\n          maybeGetprop.isGetProp() &&\n          \"prototype\".equals(maybeGetprop.getLastChild().getString())) {\n        return false;\n      }\n\n      if (jsDoc != null && jsDoc.isConstructor()) {\n        return !NodeUtil.isNew(parent);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4262be8b 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node maybeGetprop = parent.isGetProp() ? parent :\n+                           parent.isName() ? parent.getGrandparent() :\n+                           null;\n+      if (maybeGetprop != null &&\n+          maybeGetprop.isGetProp() &&\n+          \"prototype\".equals(maybeGetprop.getLastChild().getString())) {\n+        return false;\n+      }\n+\n+      if (jsDoc != null && jsDoc.isConstructor()) {\n+        return !NodeUtil.isNew(parent);\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}