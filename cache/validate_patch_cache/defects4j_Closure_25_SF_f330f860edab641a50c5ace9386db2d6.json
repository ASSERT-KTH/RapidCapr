{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.autobox().restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType() || constructorType.isNoType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType.isFunctionType()) {\n        ct = constructorType.toMaybeFunctionType();\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(NULL_TYPE);\n  }\n  n.setJSType(type);\n  Node arg = constructor.getNext();\n  if (arg != null) { // Constructor arguments are optional, so the NodeList may be empty.\n    if (!constructorType.isFunctionType()) {\n      warnInvalidType(n);\n      return scope;\n    }\n    FunctionType ft = constructorType.toFunctionType();\n    int i = 0;\n    for (Node param : ft.getParameters()) {\n      if (arg == null) {\n        break;\n      }\n      Node argValueNode = arg.getFirstChild();\n      scope = traverse(argValueNode, scope);\n      JSType paramType = param.getJSType();\n      if (paramType != null) {\n        JSType argType = argValueNode.getJSType();\n        if (argType != null) {\n          JSChecks.checkState(JSType.commonSuperType(paramType,\n              argType).isSubtype(paramType));\n        } else {\n          warnInvalidType(n);\n        }\n      }\n      arg  arg.getNext();\n      i++;\n    }\n    if (arg != null) {\n      warnInvalidType(arg);\n    }\n  }\n  return scope;\n}\n\nprivate void warnInvalidType(Node n) {\n  compiler.report(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..6ab5689e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,66 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.autobox().restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType() || constructorType.isNoType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct == null && constructorType.isFunctionType()) {\n+        ct = constructorType.toMaybeFunctionType();\n+      }\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n+      }\n+    }\n+  }\n+  if (type == null) {\n+    type = getNativeType(NULL_TYPE);\n+  }\n+  n.setJSType(type);\n+  Node arg = constructor.getNext();\n+  if (arg != null) { // Constructor arguments are optional, so the NodeList may be empty.\n+    if (!constructorType.isFunctionType()) {\n+      warnInvalidType(n);\n+      return scope;\n+    }\n+    FunctionType ft = constructorType.toFunctionType();\n+    int i = 0;\n+    for (Node param : ft.getParameters()) {\n+      if (arg == null) {\n+        break;\n+      }\n+      Node argValueNode = arg.getFirstChild();\n+      scope = traverse(argValueNode, scope);\n+      JSType paramType = param.getJSType();\n+      if (paramType != null) {\n+        JSType argType = argValueNode.getJSType();\n+        if (argType != null) {\n+          JSChecks.checkState(JSType.commonSuperType(paramType,\n+              argType).isSubtype(paramType));\n+        } else {\n+          warnInvalidType(n);\n         }\n       }\n+      arg  arg.getNext();\n+      i++;\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    if (arg != null) {\n+      warnInvalidType(arg);\n     }\n-    return scope;\n   }\n+  return scope;\n+}\n+\n+private void warnInvalidType(Node n) {\n+  compiler.report(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}