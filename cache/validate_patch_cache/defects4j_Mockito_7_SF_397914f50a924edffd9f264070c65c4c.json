{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    // Register upper bounds of the type variable, recursively for any type variables.\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        registerBoundAndDependencies(bound);\n    }\n\n    // Register actual type argument for the given type variable if it exists and\n    // is not another type variable.\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null && !(actualTypeArgument instanceof TypeVariable)) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n\n    // Recursively register type variables in dependent type parameters.\n    TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n    for (TypeVariable<?> variable : variables) {\n        if (variable == typeVariable) {\n            continue;\n        }\n        registerTypeVariableFromEnclosingType(variable);\n    }\n}\n\nprivate void registerBoundAndDependencies(Type type) {\n    if (type instanceof TypeVariable) {\n        // Recursively register upper bounds of the dependent type variable.\n        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n        Type[] bounds = typeVariable.getBounds();\n        for (Type bound : bounds) {\n            registerBoundAndDependencies(bound);\n        }\n    } else {\n        registerTypeVariablesOn(type);\n    }\n}\n\nprivate void registerTypeVariableFromEnclosingType(TypeVariable<?> typeVariable) {\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null && !(actualTypeArgument instanceof TypeVariable)) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n\n    TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n    for (TypeVariable<?> variable : variables) {\n        if (variable == typeVariable) {\n            continue;\n        }\n        registerTypeVariableFromEnclosingType(variable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..698a5c50e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,62 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    // Register upper bounds of the type variable, recursively for any type variables.\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        registerBoundAndDependencies(bound);\n+    }\n+\n+    // Register actual type argument for the given type variable if it exists and\n+    // is not another type variable.\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null && !(actualTypeArgument instanceof TypeVariable)) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+\n+    // Recursively register type variables in dependent type parameters.\n+    TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n+    for (TypeVariable<?> variable : variables) {\n+        if (variable == typeVariable) {\n+            continue;\n+        }\n+        registerTypeVariableFromEnclosingType(variable);\n+    }\n+}\n+\n+private void registerBoundAndDependencies(Type type) {\n+    if (type instanceof TypeVariable) {\n+        // Recursively register upper bounds of the dependent type variable.\n+        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+        Type[] bounds = typeVariable.getBounds();\n+        for (Type bound : bounds) {\n+            registerBoundAndDependencies(bound);\n+        }\n+    } else {\n+        registerTypeVariablesOn(type);\n+    }\n+}\n+\n+private void registerTypeVariableFromEnclosingType(TypeVariable<?> typeVariable) {\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null && !(actualTypeArgument instanceof TypeVariable)) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+\n+    TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n+    for (TypeVariable<?> variable : variables) {\n+        if (variable == typeVariable) {\n+            continue;\n+        }\n+        registerTypeVariableFromEnclosingType(variable);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}