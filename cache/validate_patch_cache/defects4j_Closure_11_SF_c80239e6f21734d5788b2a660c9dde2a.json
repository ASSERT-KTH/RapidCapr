{
    "patch": "public int getprop(String key, int def) {\n    String value = System.getProperty(key);\n    if (value == null) {\n        return def;\n    }\n\n    try {\n        return Integer.parseInt(value);\n    } catch (NumberFormatException e) {\n        System.err.println(\"Failed to parse integer value for property '\" + key + \"': \" + value);\n        return def;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3263a775 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public int getprop(String key, int def) {\n+    String value = System.getProperty(key);\n+    if (value == null) {\n+        return def;\n+    }\n+\n+    try {\n+        return Integer.parseInt(value);\n+    } catch (NumberFormatException e) {\n+        System.err.println(\"Failed to parse integer value for property '\" + key + \"': \" + value);\n+        return def;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}