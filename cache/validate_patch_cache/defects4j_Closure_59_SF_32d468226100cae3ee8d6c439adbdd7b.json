{
    "patch": "        setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        setErrorManager(new PrintStreamErrorManager(createMessageFormatter(), outStream));\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(DiagnosticGroups.MISSING_TYPES, CheckLevel.OFF);\n      options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.OFF);\n      options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.OFF);\n      options.setWarningLevel(DiagnosticGroups.UNDECLARED_VARIABLES, CheckLevel.OFF);\n    }\n\n    // Turn off the GLOBAL_THIS diagnostic group if requested.\n    if (options.checkGlobalThisLevel == CheckLevel.OFF) {\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n    } else if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList(\n        new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()), options.getWarningsGuard());\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if ((!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..b076f621 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,17 +223,9 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n-    this.options = options;\n-    if (errorManager == null) {\n-      if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n+        setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n       } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n+        setErrorManager(new PrintStreamErrorManager(createMessageFormatter(), outStream));\n       }\n     }\n \n@@ -246,31 +238,26 @@ public class Compiler extends AbstractCompiler {\n       // If DiagnosticGroups did not override the plain checkTypes\n       // option, and checkTypes is enabled, then turn off the\n       // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n+      options.setWarningLevel(DiagnosticGroups.MISSING_TYPES, CheckLevel.OFF);\n+      options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.OFF);\n+      options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.OFF);\n+      options.setWarningLevel(DiagnosticGroups.UNDECLARED_VARIABLES, CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n+    // Turn off the GLOBAL_THIS diagnostic group if requested.\n+    if (options.checkGlobalThisLevel == CheckLevel.OFF) {\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n+    } else if (options.checkGlobalThisLevel.isOn()) {\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n     }\n \n     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.ES5_STRICT,\n-          CheckLevel.ERROR);\n+      options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);\n     }\n \n     // Initialize the warnings guard.\n-    List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n-    guards.add(options.getWarningsGuard());\n-\n+    List<WarningsGuard> guards = Lists.newArrayList(\n+        new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()), options.getWarningsGuard());\n     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n \n     // All passes must run the variable check. This synthesizes\n@@ -278,14 +265,8 @@ public class Compiler extends AbstractCompiler {\n     // checks the externs file for validity. If you don't want to warn\n     // about missing variable declarations, we shut that specific\n     // error off.\n-    if (!options.checkSymbols &&\n-        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n-      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n-    }\n-\n-    this.warningsGuard = composedGuards;\n-  }\n+    if ((!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))) {\n+      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n \n   /**\n    * Initializes the instance state needed for a compile job.",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}