{
    "patch": "int[] indices = new int[dimension];\nint remainingCount = index + 1;\nint k = last - 1;\n\nwhile (remainingCount > 0 && k >= 0) {\n    if (remainingCount > uniCounterOffset[k] - 1) {\n        remainingCount -= uniCounterOffset[k];\n        indices[k] = uniCounterOffset[k] - 1;\n        k--;\n    } else {\n        indices[k] = remainingCount - 1;\n        remainingCount = 0;\n    }\n}\n\nif (remainingCount != 0) {\n    throw new IllegalStateException(\"Internal error: count = \" + count + \", index = \" + index);\n}\n\nreturn indices;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..919a8d31d 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,26 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int[] indices = new int[dimension];\n+int remainingCount = index + 1;\n+int k = last - 1;\n+\n+while (remainingCount > 0 && k >= 0) {\n+    if (remainingCount > uniCounterOffset[k] - 1) {\n+        remainingCount -= uniCounterOffset[k];\n+        indices[k] = uniCounterOffset[k] - 1;\n+        k--;\n+    } else {\n+        indices[k] = remainingCount - 1;\n+        remainingCount = 0;\n+    }\n+}\n+\n+if (remainingCount != 0) {\n+    throw new IllegalStateException(\"Internal error: count = \" + count + \", index = \" + index);\n+}\n+\n+return indices;\n \n         return indices;\n     }",
    "result_reason": "error: variable indices is already defined in method getCounts(int)",
    "test_result": "ERROR"
}