{
    "patch": "    final Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    // Create ordered lists of all parameters, including those that are never\n    // referenced\n    final List<Node> allParams = new ArrayList<>();\n    final List<Node> unusedParams = new ArrayList<>();\n    Node arg = getFunctionArgList(function).getFirstChild();\n    while (arg != null) {\n      allParams.add(arg);\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        unusedParams.add(arg);\n      }\n      arg = arg.getNext();\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnScope.getRootVar());\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      return;\n    }\n\n    // TODO(b/62705166): With Advanced mode, we will not remove some standard\n    // constructors like Object which use the `arguments` object.\n    while (unusedParams.size() > 0 && haveChangesToApply()) {\n      Node param = unusedParams.remove(unusedParams.size() - 1);\n      if (canRemoveFunctionParameter(param)) {\n        NodeUtil.removeChild(getFunctionArgList(function), param);\n        compiler.reportCodeChange();\n      }\n    }\n\n    // Maintenance note: AllParams[allParams.size()-1] is the last parameter,\n    // occurs in the source code text last, etc.\n    if (allParams.isEmpty()) {\n      return;\n    }\n    Node lastParam = allParams.get(allParams.size() - 1);\n\n    // if a parameter for 'arguments' is added or removed, we must update the\n    // directed function application of the call, or we will miscompute.\n    //\n    // We also perform this operation if a parameter is added, but not if it is\n    // removed. Consider:\n    // function g(){return arguments[0]}\n    // Replace it with\n    // function g(a,b){return arguments[0]}\n    // We would like to recognize that arguments[0] is now simply a, instead of\n    // having an index.\n    //\n    // This standard applies because the rest parameter was introduced in ES\n    // 2015 and because it is significantly more difficult to adapt to parameter\n    // removal when arguments was being used without noAncestorsCheck. Adding\n    // parameters and trying to reuse a variable in the body is not useful for\n    // a similar reason.\n    if (lastParam.getString().equals(\"arguments\")\n        || lastParam.isRest()\n        && parentAssumingCallExists(function)) {\n      ensureArgumentsObject(function);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1bae498e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,72 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    final Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    // Create ordered lists of all parameters, including those that are never\n+    // referenced\n+    final List<Node> allParams = new ArrayList<>();\n+    final List<Node> unusedParams = new ArrayList<>();\n+    Node arg = getFunctionArgList(function).getFirstChild();\n+    while (arg != null) {\n+      allParams.add(arg);\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        unusedParams.add(arg);\n+      }\n+      arg = arg.getNext();\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(fnScope.getRootVar());\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      return;\n+    }\n+\n+    // TODO(b/62705166): With Advanced mode, we will not remove some standard\n+    // constructors like Object which use the `arguments` object.\n+    while (unusedParams.size() > 0 && haveChangesToApply()) {\n+      Node param = unusedParams.remove(unusedParams.size() - 1);\n+      if (canRemoveFunctionParameter(param)) {\n+        NodeUtil.removeChild(getFunctionArgList(function), param);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    // Maintenance note: AllParams[allParams.size()-1] is the last parameter,\n+    // occurs in the source code text last, etc.\n+    if (allParams.isEmpty()) {\n+      return;\n+    }\n+    Node lastParam = allParams.get(allParams.size() - 1);\n+\n+    // if a parameter for 'arguments' is added or removed, we must update the\n+    // directed function application of the call, or we will miscompute.\n+    //\n+    // We also perform this operation if a parameter is added, but not if it is\n+    // removed. Consider:\n+    // function g(){return arguments[0]}\n+    // Replace it with\n+    // function g(a,b){return arguments[0]}\n+    // We would like to recognize that arguments[0] is now simply a, instead of\n+    // having an index.\n+    //\n+    // This standard applies because the rest parameter was introduced in ES\n+    // 2015 and because it is significantly more difficult to adapt to parameter\n+    // removal when arguments was being used without noAncestorsCheck. Adding\n+    // parameters and trying to reuse a variable in the body is not useful for\n+    // a similar reason.\n+    if (lastParam.getString().equals(\"arguments\")\n+        || lastParam.isRest()\n+        && parentAssumingCallExists(function)) {\n+      ensureArgumentsObject(function);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}