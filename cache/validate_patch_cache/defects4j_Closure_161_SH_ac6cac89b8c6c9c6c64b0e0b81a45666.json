{
    "patch": "// check if the access is an assignment target\nif (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n    return n;\n  }\n  Node assignRight = parent.getLastChild();\n  if (NodeUtil.isImmutableValue(assignRight)) {\n    return n;\n  }\n} else if (parent.getType() == Token.ASSIGN_ADD && parent.getFirstChild().isEquivalentTo(n)) {\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n    return n;\n  }\n}\n\nNode gParent = parent.getParent();\nif (gParent != null && gParent.getType() == Token.FOR) {\n  Node assign = gParent.getFirstChild();\n  if (assign.getType() == Token.VAR) {\n    assign = assign.getFirstChild();\n  }\n  Node iterVar = assign.getFirstChild();\n  if (left.isEquivalentTo(iterVar)) {\n    return n;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..9170777f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,34 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// check if the access is an assignment target\n+if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+    return n;\n+  }\n+  Node assignRight = parent.getLastChild();\n+  if (NodeUtil.isImmutableValue(assignRight)) {\n+    return n;\n+  }\n+} else if (parent.getType() == Token.ASSIGN_ADD && parent.getFirstChild().isEquivalentTo(n)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+    return n;\n+  }\n+}\n+\n+Node gParent = parent.getParent();\n+if (gParent != null && gParent.getType() == Token.FOR) {\n+  Node assign = gParent.getFirstChild();\n+  if (assign.getType() == Token.VAR) {\n+    assign = assign.getFirstChild();\n+  }\n+  Node iterVar = assign.getFirstChild();\n+  if (left.isEquivalentTo(iterVar)) {\n+    return n;\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}