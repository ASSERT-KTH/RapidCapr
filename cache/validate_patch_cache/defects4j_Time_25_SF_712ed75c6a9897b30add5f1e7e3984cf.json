{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    final long t_Wall = instantLocal - offsetLocal;\n\n    // Check if there is an overlap at this local time\n    final boolean overlap = isOverlap(t_Wall);\n\n    // get the start and end of the overlap\n    long overlapStart = getOverlapStart(t_Wall);\n    long overlapEnd = getOverlapEnd(t_Wall);\n\n    // handle cases where local time is within the overlap period\n    if (overlap && instantLocal >= overlapStart && instantLocal < overlapEnd) {\n        // if the local time is at the end of the overlap, use the later offset\n        if (instantLocal == overlapEnd - 1) {\n            return getOffset(overlapEnd);\n        }\n\n        // if the local time is at the start of the overlap, use the earlier offset\n        if (instantLocal == overlapStart) {\n            return getOffset(overlapStart - 1);\n        }\n\n        // if the local time is somewhere in between the overlap, return the earlier offset\n        return getOffset(overlapStart - 1);\n    }\n\n    // handle cases where local time is outside the overlap\n    int offsetPrev = getOffset(overlap ? overlapStart - 1 : instantLocal - 1);\n    int offsetNext = getOffset(overlap ? overlapEnd : instantLocal);\n\n    // if there is no transition, return the current offset\n    if (offsetPrev == offsetNext) {\n        return offsetLocal;\n    }\n\n    // get the next and previous transition times\n    long nextTransition = nextTransition(t_Wall);\n    long prevTransition = previousTransition(t_Wall);\n\n    boolean validPrevOffset = offsetPrev >= offsetLocal && offsetPrev <= offsetNext;\n    boolean validNextOffset = offsetNext <= offsetLocal && offsetNext >= offsetPrev;\n\n    // determine which transition to use\n    if (validPrevOffset && (prevTransition <= overlapStart || !overlap)) {\n        if (prevTransition == t_Wall) {\n            offsetPrev = getOffset(prevTransition - 1);\n        }\n        return offsetPrev;\n    } else if (validNextOffset && (nextTransition >= overlapEnd || !overlap)) {\n        if (nextTransition == t_Wall) {\n            offsetNext = getOffset(t_Wall + 1);\n        }\n        return offsetNext;\n    }\n\n    int adjustment = 0;\n\n    // handle case where a transition time occurs between the overlap start and end times\n    if (overlap && (prevTransition >= overlapStart && prevTransition < overlapEnd || nextTransition > overlapStart && nextTransition <= overlapEnd)) {\n        if (validPrevOffset && validNextOffset) {\n            adjustment = offsetPrev < offsetNext ? -1 : +1;\n        } else if (validPrevOffset) {\n            adjustment = -1;\n        } else {\n            adjustment = +1;\n        }\n    }\n\n    // determine which transition to use based on the adjustment\n    if (validPrevOffset && offsetLocal + adjustment == offsetPrev) {\n        if (prevTransition == t_Wall) {\n            offsetPrev = getOffset(prevTransition - 1);\n        }\n        return offsetPrev;\n    } else if (validNextOffset && offsetLocal + adjustment == offsetNext) {\n        if (nextTransition == t_Wall) {\n            offsetNext = getOffset(t_Wall + 1);\n        }\n        return offsetNext;\n    }\n\n    // if we can't decide, return the current offset\n    return offsetLocal;\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..87ef6e64 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,93 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    final long t_Wall = instantLocal - offsetLocal;\n+\n+    // Check if there is an overlap at this local time\n+    final boolean overlap = isOverlap(t_Wall);\n+\n+    // get the start and end of the overlap\n+    long overlapStart = getOverlapStart(t_Wall);\n+    long overlapEnd = getOverlapEnd(t_Wall);\n+\n+    // handle cases where local time is within the overlap period\n+    if (overlap && instantLocal >= overlapStart && instantLocal < overlapEnd) {\n+        // if the local time is at the end of the overlap, use the later offset\n+        if (instantLocal == overlapEnd - 1) {\n+            return getOffset(overlapEnd);\n+        }\n+\n+        // if the local time is at the start of the overlap, use the earlier offset\n+        if (instantLocal == overlapStart) {\n+            return getOffset(overlapStart - 1);\n+        }\n+\n+        // if the local time is somewhere in between the overlap, return the earlier offset\n+        return getOffset(overlapStart - 1);\n+    }\n+\n+    // handle cases where local time is outside the overlap\n+    int offsetPrev = getOffset(overlap ? overlapStart - 1 : instantLocal - 1);\n+    int offsetNext = getOffset(overlap ? overlapEnd : instantLocal);\n+\n+    // if there is no transition, return the current offset\n+    if (offsetPrev == offsetNext) {\n+        return offsetLocal;\n+    }\n+\n+    // get the next and previous transition times\n+    long nextTransition = nextTransition(t_Wall);\n+    long prevTransition = previousTransition(t_Wall);\n+\n+    boolean validPrevOffset = offsetPrev >= offsetLocal && offsetPrev <= offsetNext;\n+    boolean validNextOffset = offsetNext <= offsetLocal && offsetNext >= offsetPrev;\n+\n+    // determine which transition to use\n+    if (validPrevOffset && (prevTransition <= overlapStart || !overlap)) {\n+        if (prevTransition == t_Wall) {\n+            offsetPrev = getOffset(prevTransition - 1);\n+        }\n+        return offsetPrev;\n+    } else if (validNextOffset && (nextTransition >= overlapEnd || !overlap)) {\n+        if (nextTransition == t_Wall) {\n+            offsetNext = getOffset(t_Wall + 1);\n+        }\n+        return offsetNext;\n+    }\n+\n+    int adjustment = 0;\n+\n+    // handle case where a transition time occurs between the overlap start and end times\n+    if (overlap && (prevTransition >= overlapStart && prevTransition < overlapEnd || nextTransition > overlapStart && nextTransition <= overlapEnd)) {\n+        if (validPrevOffset && validNextOffset) {\n+            adjustment = offsetPrev < offsetNext ? -1 : +1;\n+        } else if (validPrevOffset) {\n+            adjustment = -1;\n+        } else {\n+            adjustment = +1;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // determine which transition to use based on the adjustment\n+    if (validPrevOffset && offsetLocal + adjustment == offsetPrev) {\n+        if (prevTransition == t_Wall) {\n+            offsetPrev = getOffset(prevTransition - 1);\n+        }\n+        return offsetPrev;\n+    } else if (validNextOffset && offsetLocal + adjustment == offsetNext) {\n+        if (nextTransition == t_Wall) {\n+            offsetNext = getOffset(t_Wall + 1);\n+        }\n+        return offsetNext;\n+    }\n+\n+    // if we can't decide, return the current offset\n+    return offsetLocal;\n+}\n+\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}