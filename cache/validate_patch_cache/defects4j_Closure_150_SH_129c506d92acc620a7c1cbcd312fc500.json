{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() == Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.LP:\n            if (parent.isFunction()) {\n                handleFunctionInputs(parent);\n                break;\n            }\n            if (parent.getParent().isFunction()) {\n                handleFunctionInputs(parent.getParent());\n                break;\n            }\n            if (parent.getParent().getType() == Token.CALL) {\n                handleFunctionInputs(parent.getParent());\n            }\n            break;\n        case Token.NAME:\n            if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN) {\n                defineVar(n, parent);\n            } else if (parent.getParent().isFunction()) {\n                defineVar(n, parent);\n            }\n            if (parent.getType() == Token.CATCH) {\n                defineCatch(n, parent);\n            }\n            break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..fd7dea53 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,44 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (parent.getType() == Token.NAME) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.LP:\n+            if (parent.isFunction()) {\n+                handleFunctionInputs(parent);\n+                break;\n+            }\n+            if (parent.getParent().isFunction()) {\n+                handleFunctionInputs(parent.getParent());\n+                break;\n+            }\n+            if (parent.getParent().getType() == Token.CALL) {\n+                handleFunctionInputs(parent.getParent());\n+            }\n+            break;\n+        case Token.NAME:\n+            if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN) {\n+                defineVar(n, parent);\n+            } else if (parent.getParent().isFunction()) {\n+                defineVar(n, parent);\n+            }\n+            if (parent.getType() == Token.CATCH) {\n+                defineCatch(n, parent);\n+            }\n+            break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}