{
    "patch": "Node firstChild = n.getFirstChild();\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n            boolean isDeclaration =\n                    parent != null &&\n                    (parent.getType() == Token.VAR ||\n                    parent.getType() == Token.EXPR_RESULT ||\n                    parent.getType() == Token.ASSIGN ||\n                    parent.getType() == Token.COLON);\n\n            if (isDeclaration ||\n                (parent != null &&\n                (parent.getType() == Token.CALL ||\n                parent.getType() == Token.NEW))) {\n                defineDeclaredFunction(n, parent);\n                break;\n            }\n        } else {\n            if (parent != null && parent.getType() == Token.NAME) {\n                return;\n            }\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    default:\n        break;\n}\nattachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7c52c21d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,41 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+Node firstChild = n.getFirstChild();\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (NodeUtil.isFunctionExpression(n)) {\n+            boolean isDeclaration =\n+                    parent != null &&\n+                    (parent.getType() == Token.VAR ||\n+                    parent.getType() == Token.EXPR_RESULT ||\n+                    parent.getType() == Token.ASSIGN ||\n+                    parent.getType() == Token.COLON);\n+\n+            if (isDeclaration ||\n+                (parent != null &&\n+                (parent.getType() == Token.CALL ||\n+                parent.getType() == Token.NEW))) {\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            }\n+        } else {\n+            if (parent != null && parent.getType() == Token.NAME) {\n+                return;\n+            }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    default:\n+        break;\n+}\n+attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}