{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n    public static boolean containsAny(final CharSequence string, final char[] searchChars) {\n        if (string == null || searchChars == null) {\n            return false;\n        }\n        final int len = string.length();\n        final int searchLen = searchChars.length;\n        final int stopSearchIndex = len - searchLen;\n\n        for (int i = 0; i <= stopSearchIndex; i++) {\n            for (int j = 0; j < searchLen; j++) {\n                final char ch = string.charAt(i + j);\n                if (ch >= 0xD800 && ch <= 0xDBFF && j < searchLen - 1) {\n                    // It's a surrogate pair, and it's not the last char in the search array\n                    final char nextCh = string.charAt(i + j + 1);\n                    if (nextCh >= 0xDC00 && nextCh <= 0xDFFF) {\n                        // It's a valid surrogate pair\n                        final int codePoint = 0x10000 + ((ch - 0xD800) << 10) + (nextCh - 0xDC00);\n                        if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n                            return true;\n                        }\n                    }\n                } else {\n                    if (Arrays.binarySearch(searchChars, ch) >= 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..7ccca918 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+    public static boolean containsAny(final CharSequence string, final char[] searchChars) {\n+        if (string == null || searchChars == null) {\n+            return false;\n+        }\n+        final int len = string.length();\n+        final int searchLen = searchChars.length;\n+        final int stopSearchIndex = len - searchLen;\n+\n+        for (int i = 0; i <= stopSearchIndex; i++) {\n+            for (int j = 0; j < searchLen; j++) {\n+                final char ch = string.charAt(i + j);\n+                if (ch >= 0xD800 && ch <= 0xDBFF && j < searchLen - 1) {\n+                    // It's a surrogate pair, and it's not the last char in the search array\n+                    final char nextCh = string.charAt(i + j + 1);\n+                    if (nextCh >= 0xDC00 && nextCh <= 0xDFFF) {\n+                        // It's a valid surrogate pair\n+                        final int codePoint = 0x10000 + ((ch - 0xD800) << 10) + (nextCh - 0xDC00);\n+                        if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n+                            return true;\n+                        }\n+                    }\n+                } else {\n+                    if (Arrays.binarySearch(searchChars, ch) >= 0) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}