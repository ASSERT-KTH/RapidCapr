{
    "patch": "import com.google.javascript.rhino.TypeRegistry;\n\n...\n\nif (functionType.getTypeOfThis() != null &&\n          !NodeUtil.isGet(functionType.getTypeOfThis().getNodeType())) {\n        report(t, n, UNSAFE_THIS, childType.toString());\n        ensureTyped(t, n, functionType.getReturnType() != null\n            ? functionType.getReturnType()\n            : TypeRegistry.get().getNativeType(VOID_TYPE));\n        return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..00d6237f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+import com.google.javascript.rhino.TypeRegistry;\n+\n+...\n+\n+if (functionType.getTypeOfThis() != null &&\n+          !NodeUtil.isGet(functionType.getTypeOfThis().getNodeType())) {\n+        report(t, n, UNSAFE_THIS, childType.toString());\n+        ensureTyped(t, n, functionType.getReturnType() != null\n+            ? functionType.getReturnType()\n+            : TypeRegistry.get().getNativeType(VOID_TYPE));\n+        return;\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}