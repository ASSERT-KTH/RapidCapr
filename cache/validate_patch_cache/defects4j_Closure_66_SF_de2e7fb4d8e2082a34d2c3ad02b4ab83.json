{
    "patch": "public double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n    HashMap<String, Object> map = gson.fromJson(json, type);\n    int totalCount = 0;\n    int typedCount = 0;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n        Object obj = entry.getValue();\n        if (obj instanceof String) {\n            totalCount++;\n            String str = (String) obj;\n            if (!str.isEmpty()) {\n                typedCount++;\n            }\n        } else if (obj instanceof Map) {\n            totalCount++;\n            Map<String, Object> nestedMap = (Map<String, Object>) obj;\n            String nestedJson = gson.toJson(nestedMap);\n            typedCount += getTypedPercent(nestedJson);\n        }\n    }\n    return (double) typedCount / totalCount * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..efd1d096 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n+    HashMap<String, Object> map = gson.fromJson(json, type);\n+    int totalCount = 0;\n+    int typedCount = 0;\n+    for (Map.Entry<String, Object> entry : map.entrySet()) {\n+        Object obj = entry.getValue();\n+        if (obj instanceof String) {\n+            totalCount++;\n+            String str = (String) obj;\n+            if (!str.isEmpty()) {\n+                typedCount++;\n+            }\n+        } else if (obj instanceof Map) {\n+            totalCount++;\n+            Map<String, Object> nestedMap = (Map<String, Object>) obj;\n+            String nestedJson = gson.toJson(nestedMap);\n+            typedCount += getTypedPercent(nestedJson);\n+        }\n+    }\n+    return (double) typedCount / totalCount * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}