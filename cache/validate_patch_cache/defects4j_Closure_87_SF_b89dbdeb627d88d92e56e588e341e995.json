{
    "patch": "        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          if (maybeExpr.isReturn()) {\n            Node functionParent = maybeExpr.getAncestor(NodeUtil.MATCH_FUNCTION);\n            if (functionParent != null && functionParent.getLastChild().equals(maybeExpr)) {\n              return NodeUtil.has(functionParent, new NodeUtil.ErrorPredicate() {\n                @Override\n                public boolean matches(Node n) {\n                  if (n.isExprResult()) {\n                    // We can fold EXPR_RESULT nodes into the return value that\n                    // we are about to inline.\n                    return !n.getParent().isCall();\n                  } else {\n                    // We should not fold nodes that:\n                    // 1. are VARs (their value may already be used elsewhere)\n                    // 2. have other side effects (besides the value)\n                    // 3. have non-constant operands\n                    // 4. are not foldable\n                    return !NodeUtil.isStatement(n) &&\n                           !NodeUtil.mayHaveSideEffects(n) &&\n                           !n.isName() &&\n                           !n.isString() &&\n                           !n.isNumber() &&\n                           !n.isRegExp() &&\n                           !n.isFunction() &&\n                           (!n.isUnary() || !NodeUtil.isExpressionFoldable(n.getLastChild())) &&\n                           (!n.isBinary() || (!NodeUtil.isExpressionFoldable(n.getFirstChild()) ||\n                                               !NodeUtil.isExpressionFoldable(n.getLastChild())));\n                  }\n                }\n              });\n            }\n          } else {\n            return true;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..3fccd4a0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,41 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n-\n-    return false;\n-  }\n+        if (NodeUtil.isExpressionNode(maybeExpr)) {\n+          if (maybeExpr.isReturn()) {\n+            Node functionParent = maybeExpr.getAncestor(NodeUtil.MATCH_FUNCTION);\n+            if (functionParent != null && functionParent.getLastChild().equals(maybeExpr)) {\n+              return NodeUtil.has(functionParent, new NodeUtil.ErrorPredicate() {\n+                @Override\n+                public boolean matches(Node n) {\n+                  if (n.isExprResult()) {\n+                    // We can fold EXPR_RESULT nodes into the return value that\n+                    // we are about to inline.\n+                    return !n.getParent().isCall();\n+                  } else {\n+                    // We should not fold nodes that:\n+                    // 1. are VARs (their value may already be used elsewhere)\n+                    // 2. have other side effects (besides the value)\n+                    // 3. have non-constant operands\n+                    // 4. are not foldable\n+                    return !NodeUtil.isStatement(n) &&\n+                           !NodeUtil.mayHaveSideEffects(n) &&\n+                           !n.isName() &&\n+                           !n.isString() &&\n+                           !n.isNumber() &&\n+                           !n.isRegExp() &&\n+                           !n.isFunction() &&\n+                           (!n.isUnary() || !NodeUtil.isExpressionFoldable(n.getLastChild())) &&\n+                           (!n.isBinary() || (!NodeUtil.isExpressionFoldable(n.getFirstChild()) ||\n+                                               !NodeUtil.isExpressionFoldable(n.getLastChild())));\n+                  }\n+                }\n+              });\n+            }\n+          } else {\n+            return true;\n+          }\n+        }\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}