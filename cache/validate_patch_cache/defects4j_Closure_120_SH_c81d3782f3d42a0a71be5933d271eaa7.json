{
    "patch": "          List<Reference> assignments = getAllAssignments();\n          if (assignments.size() == 1) {\n            // Make sure this assignment is not in a loop.\n            Reference ref = assignments.get(0);\n            for (BasicBlock block = ref.getBasicBlock();\n                 block != null; block = block.getParent()) {\n              if (block.isFunction) {\n                break;\n              } else if (block.isLoop) {\n                return false;\n              }\n            }\n            return true;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2694a5ee 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          List<Reference> assignments = getAllAssignments();\n+          if (assignments.size() == 1) {\n+            // Make sure this assignment is not in a loop.\n+            Reference ref = assignments.get(0);\n+            for (BasicBlock block = ref.getBasicBlock();\n+                 block != null; block = block.getParent()) {\n+              if (block.isFunction) {\n+                break;\n+              } else if (block.isLoop) {\n+                return false;\n+              }\n+            }\n+            return true;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}