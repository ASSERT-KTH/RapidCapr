{
    "patch": "            LocalTime time;\n            int hourOfDay = 0, minuteOfHour = 0, secondOfMinute = 0, millisOfSecond = 0;\n            for (SavedField field : savedFields) {\n                DateTimeFieldType type = field.iField.getType();\n                switch (type) {\n                    case hourOfDay():\n                        hourOfDay = field.restoreValue();\n                        break;\n                    case minuteOfHour():\n                        minuteOfHour = field.restoreValue();\n                        break;\n                    case secondOfMinute():\n                        secondOfMinute = field.restoreValue();\n                        break;\n                    case millisOfSecond():\n                        millisOfSecond = field.restoreValue();\n                        break;\n                    case halfdayOfDay():\n                        int halfdayOfDay = field.restoreValue();\n                        if (hourOfDay == 12) {\n                            hourOfDay = halfdayOfDay == 0 ? 0 : 12;\n                        } else {\n                            hourOfDay = (hourOfDay + (halfdayOfDay == 0 ? 0 : 12)) % 24;\n                        }\n                        break;\n                    case clockhourOfDay():\n                        hourOfDay = field.restoreValue();\n                        if (hourOfDay == 12) {\n                            hourOfDay = 0;\n                        }\n                        break;\n                    case clockhourOfHalfday():\n                        hourOfDay = (field.restoreValue() % 12) + (hourOfDay >= 12 ? 12 : 0);\n                        if (hourOfDay == 24) {\n                            hourOfDay = 0;\n                        }\n                        break;\n                }\n            }\n            time = LocalTime.of(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            millis += time.toDateTimeToday(DateTimeZone.UTC).getMillis() - DateTimeConstants.MILLIS_PER_DAY;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1f1fa70f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,47 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            LocalTime time;\n+            int hourOfDay = 0, minuteOfHour = 0, secondOfMinute = 0, millisOfSecond = 0;\n+            for (SavedField field : savedFields) {\n+                DateTimeFieldType type = field.iField.getType();\n+                switch (type) {\n+                    case hourOfDay():\n+                        hourOfDay = field.restoreValue();\n+                        break;\n+                    case minuteOfHour():\n+                        minuteOfHour = field.restoreValue();\n+                        break;\n+                    case secondOfMinute():\n+                        secondOfMinute = field.restoreValue();\n+                        break;\n+                    case millisOfSecond():\n+                        millisOfSecond = field.restoreValue();\n+                        break;\n+                    case halfdayOfDay():\n+                        int halfdayOfDay = field.restoreValue();\n+                        if (hourOfDay == 12) {\n+                            hourOfDay = halfdayOfDay == 0 ? 0 : 12;\n+                        } else {\n+                            hourOfDay = (hourOfDay + (halfdayOfDay == 0 ? 0 : 12)) % 24;\n+                        }\n+                        break;\n+                    case clockhourOfDay():\n+                        hourOfDay = field.restoreValue();\n+                        if (hourOfDay == 12) {\n+                            hourOfDay = 0;\n+                        }\n+                        break;\n+                    case clockhourOfHalfday():\n+                        hourOfDay = (field.restoreValue() % 12) + (hourOfDay >= 12 ? 12 : 0);\n+                        if (hourOfDay == 24) {\n+                            hourOfDay = 0;\n+                        }\n+                        break;\n+                }\n+            }\n+            time = LocalTime.of(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            millis += time.toDateTimeToday(DateTimeZone.UTC).getMillis() - DateTimeConstants.MILLIS_PER_DAY;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}