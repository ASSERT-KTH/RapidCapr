{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  if (constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // For example, given this constraint:\n  // function f(/** {{foo: string}} */ x) {}\n  //\n  // We want to infer that the type of x.foo is string.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        if (propType == null) {\n          // If the property type is null, set it to the NO_TYPE,\n          // then infer the property as a nullable type.\n          propType = getNativeType(JSTypeNative.NO_TYPE);\n          defineInferredProperty(prop, propType, null);\n          defineInferredProperty(prop, propType.getNullable(), null);\n        } else {\n          // If the property does not exist, infer it with the VOID type.\n          JSType typeToInfer = hasProperty(prop) \n              ? propType \n              : getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..f8e38057 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,37 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match constraints on anonymous types.\n+  if (constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // For example, given this constraint:\n+  // function f(/** {{foo: string}} */ x) {}\n+  //\n+  // We want to infer that the type of x.foo is string.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        if (propType == null) {\n+          // If the property type is null, set it to the NO_TYPE,\n+          // then infer the property as a nullable type.\n+          propType = getNativeType(JSTypeNative.NO_TYPE);\n+          defineInferredProperty(prop, propType, null);\n+          defineInferredProperty(prop, propType.getNullable(), null);\n+        } else {\n+          // If the property does not exist, infer it with the VOID type.\n+          JSType typeToInfer = hasProperty(prop) \n+              ? propType \n+              : getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}