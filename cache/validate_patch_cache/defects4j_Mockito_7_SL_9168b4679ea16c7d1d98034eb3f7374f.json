{
    "patch": "TypeVariable<? extends GenericDeclaration> declaringTypeVariable = typeVariable;\nwhile (declaringTypeVariable.getGenericDeclaration() instanceof TypeVariable) {\n    Type type = getActualTypeArgumentFor((TypeVariable<?>) declaringTypeVariable.getGenericDeclaration());\n    if (type instanceof TypeVariable<?>) {\n        declaringTypeVariable = (TypeVariable<? extends GenericDeclaration>) type;\n    } else {\n        break;\n    }\n}\nType declaringType = declaringTypeVariable.getGenericDeclaration();\nif (declaringType instanceof ParameterizedType) {\n    Type[] typeArguments = ((ParameterizedType) declaringType).getActualTypeArguments();\n    for (Type typeArgument : typeArguments) {\n        if (typeArgument instanceof TypeVariable) {\n            registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable) typeArgument));\n        } else {\n            registerTypeVariablesOn(typeArgument);\n        }\n    }\n} else {\n    Type[] bounds = declaringTypeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(Object.class);\n    } else {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable<?>) {\n                registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) bound));\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7d8f8099a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,44 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+TypeVariable<? extends GenericDeclaration> declaringTypeVariable = typeVariable;\n+while (declaringTypeVariable.getGenericDeclaration() instanceof TypeVariable) {\n+    Type type = getActualTypeArgumentFor((TypeVariable<?>) declaringTypeVariable.getGenericDeclaration());\n+    if (type instanceof TypeVariable<?>) {\n+        declaringTypeVariable = (TypeVariable<? extends GenericDeclaration>) type;\n+    } else {\n+        break;\n+    }\n+}\n+Type declaringType = declaringTypeVariable.getGenericDeclaration();\n+if (declaringType instanceof ParameterizedType) {\n+    Type[] typeArguments = ((ParameterizedType) declaringType).getActualTypeArguments();\n+    for (Type typeArgument : typeArguments) {\n+        if (typeArgument instanceof TypeVariable) {\n+            registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable) typeArgument));\n+        } else {\n+            registerTypeVariablesOn(typeArgument);\n+        }\n+    }\n+} else {\n+    Type[] bounds = declaringTypeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+    } else {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable<?>) {\n+                registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) bound));\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: incompatible types: CAP#1 cannot be converted to Type",
    "test_result": "ERROR"
}