{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n          if (maybeExpr.getType() == Token.CALL) {\n            Node callTarget = maybeExpr.getFirstChild();\n            if (callTarget.getType() == Token.GETPROP) {\n              String propName = callTarget.getLastChild().getString();\n              if (!\"returnValue\".equals(propName)) {\n                return false;\n              }\n            }\n          }\n          return NodeUtil.isExpressionNode(maybeExpr);\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..40a62e61 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,20 +520,28 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+        if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+          // We only have to worry about methods with an implicit 'this'\n+          // param, or this doesn't happen.\n+          if (maybeExpr.getType() == Token.CALL) {\n+            Node callTarget = maybeExpr.getFirstChild();\n+            if (callTarget.getType() == Token.GETPROP) {\n+              String propName = callTarget.getLastChild().getString();\n+              if (!\"returnValue\".equals(propName)) {\n+                return false;\n+              }\n+            }\n+          }\n           return NodeUtil.isExpressionNode(maybeExpr);\n+        }\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}