{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.isFunction() && parent.isExprResult()) {\n        defineDeclaredFunction(n, parent);\n        handleFunctionInputs(n);\n        return; // Return early after processing function declarations\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getToken()) {\n        case FUNCTION:\n          if (parent.isScript()) {\n            defineDeclaredFunction(n.getFirstChild(), n);\n          }\n          break;\n        case CATCH:\n          defineCatch(n, parent);\n          break;\n        case VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..3813d88e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1443,25 +1443,27 @@ final class TypedScopeCreator implements ScopeCreator {\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+      if (n.isFunction() && parent.isExprResult()) {\n+        defineDeclaredFunction(n, parent);\n+        handleFunctionInputs(n);\n+        return; // Return early after processing function declarations\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+      switch (n.getToken()) {\n+        case FUNCTION:\n+          if (parent.isScript()) {\n+            defineDeclaredFunction(n.getFirstChild(), n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        case CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n+        case VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}