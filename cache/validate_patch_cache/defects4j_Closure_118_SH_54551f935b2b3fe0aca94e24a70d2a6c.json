{
    "patch": "        Node key = child.getFirstChild();\n        String name = key.getString();\n        T type = typeSystem.getType(getScope(), key);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(key,\n                processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(JSError.make(\n                        t.getSourceName(), child, propertiesToErrorFor.get(name),\n                        Warnings.INVALIDATION, name,\n                        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..68b1dbd9 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,20 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        Node key = child.getFirstChild();\n+        String name = key.getString();\n+        T type = typeSystem.getType(getScope(), key);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(key,\n+                processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(JSError.make(\n+                        t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                        Warnings.INVALIDATION, name,\n+                        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: method getType in interface TypeSystem<T#2> cannot be applied to given types;",
    "test_result": "ERROR"
}