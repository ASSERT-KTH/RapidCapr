{
    "patch": "Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null) {\n    field.setAccessible(true);\n    try {\n        Object oldValue = field.get(fieldInstance);\n        boolean isFinalField = Modifier.isFinal(field.getModifiers());\n        if (isFinalField) {\n            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n        }\n        \n        field.set(fieldInstance, mockCandidate);\n        \n        if (isFinalField) {\n            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(field, field.getModifiers() | Modifier.FINAL);\n        }\n        \n        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n            innerField.setAccessible(true);\n            if (innerField.get(mockCandidate) == oldValue) {\n                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n            }\n        }\n    } catch (IllegalAccessException | NoSuchFieldException e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0b6374bdf 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,39 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null) {\n+    field.setAccessible(true);\n+    try {\n+        Object oldValue = field.get(fieldInstance);\n+        boolean isFinalField = Modifier.isFinal(field.getModifiers());\n+        if (isFinalField) {\n+            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersField.setAccessible(true);\n+            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+        }\n+        \n+        field.set(fieldInstance, mockCandidate);\n+        \n+        if (isFinalField) {\n+            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersField.setAccessible(true);\n+            modifiersField.setInt(field, field.getModifiers() | Modifier.FINAL);\n+        }\n+        \n+        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+            innerField.setAccessible(true);\n+            if (innerField.get(mockCandidate) == oldValue) {\n+                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n+            }\n+        }\n+    } catch (IllegalAccessException | NoSuchFieldException e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}