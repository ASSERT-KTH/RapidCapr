{
    "patch": "        if (ref.isInsideLoop()) {\n          return false;\n        }\n        if (block.isFunction && block != ref.getBasicBlock()) {\n          // Don't assume assignments in inner function scopes won't\n          // be executed multiple times.\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..92954d44 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref.isInsideLoop()) {\n+          return false;\n+        }\n+        if (block.isFunction && block != ref.getBasicBlock()) {\n+          // Don't assume assignments in inner function scopes won't\n+          // be executed multiple times.\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}