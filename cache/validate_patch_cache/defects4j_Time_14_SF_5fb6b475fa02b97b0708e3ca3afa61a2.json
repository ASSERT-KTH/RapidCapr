{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        Chronology chrono = partial.getChronology();\n        int maxValue = partial.getFieldType(fieldIndex).getField(chrono).getMaximumValue();\n        int minValue = partial.getFieldType(fieldIndex).getField(chrono).getMinimumValue();\n        int newValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n        if (newValue < minValue || newValue > maxValue) {\n            // if new value is out of range, set to minimum or maximum value\n            newValue = (newValue > 0) ? maxValue : minValue;\n        }\n        values[fieldIndex] = newValue;\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = chrono.get(partial, instant);\n        // check if day is within valid range\n        if (result[fieldIndex] < 1) {\n            // day overflowed, clamp to maximum valid day\n            result[fieldIndex] = partial.getFieldType(fieldIndex).getField(chrono).getMaximumValue();\n        } else {\n            int maxDay = partial.getFieldType(fieldIndex).getField(chrono).getMaximumValue();\n            if (result[fieldIndex] > maxDay) {\n                // day overflowed, clamp to maximum valid day\n                result[fieldIndex] = maxDay;\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b3fcc9d5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        Chronology chrono = partial.getChronology();\n+        int maxValue = partial.getFieldType(fieldIndex).getField(chrono).getMaximumValue();\n+        int minValue = partial.getFieldType(fieldIndex).getField(chrono).getMinimumValue();\n+        int newValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+        if (newValue < minValue || newValue > maxValue) {\n+            // if new value is out of range, set to minimum or maximum value\n+            newValue = (newValue > 0) ? maxValue : minValue;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        values[fieldIndex] = newValue;\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n+        }\n+        instant = add(instant, valueToAdd);\n+        int[] result = chrono.get(partial, instant);\n+        // check if day is within valid range\n+        if (result[fieldIndex] < 1) {\n+            // day overflowed, clamp to maximum valid day\n+            result[fieldIndex] = partial.getFieldType(fieldIndex).getField(chrono).getMaximumValue();\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int maxDay = partial.getFieldType(fieldIndex).getField(chrono).getMaximumValue();\n+            if (result[fieldIndex] > maxDay) {\n+                // day overflowed, clamp to maximum valid day\n+                result[fieldIndex] = maxDay;\n+            }\n         }\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}