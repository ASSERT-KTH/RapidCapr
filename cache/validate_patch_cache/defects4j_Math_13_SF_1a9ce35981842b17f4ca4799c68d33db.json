{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix V = dec.getV();\n    RealMatrix D = dec.getD();\n    RealMatrix sqrtD = MatrixUtils.createRealMatrix(D.getRowDimension(), D.getColumnDimension());\n    for (int i = 0; i < D.getRowDimension(); i++) {\n        double value = D.getEntry(i, i);\n        if (value < 0) {\n            throw new ArithmeticException(\"Matrix has complex square root\");\n        } else {\n            sqrtD.setEntry(i, i, FastMath.sqrt(value));\n        }\n    }\n    RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a1ff1ad52 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix V = dec.getV();\n+    RealMatrix D = dec.getD();\n+    RealMatrix sqrtD = MatrixUtils.createRealMatrix(D.getRowDimension(), D.getColumnDimension());\n+    for (int i = 0; i < D.getRowDimension(); i++) {\n+        double value = D.getEntry(i, i);\n+        if (value < 0) {\n+            throw new ArithmeticException(\"Matrix has complex square root\");\n+        } else {\n+            sqrtD.setEntry(i, i, FastMath.sqrt(value));\n+        }\n     }\n+    RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}