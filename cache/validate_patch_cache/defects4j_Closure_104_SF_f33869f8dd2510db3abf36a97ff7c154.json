{
    "patch": "private JSType greatestSubtypeHelper(Set<ObjectType> objs) {\n  Preconditions.checkArgument(!objs.isEmpty());\n  if (objs.contains(getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE))) {\n    if (objs.size() == 1) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      objs = new HashSet<>(objs);\n      objs.remove(getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE));\n    }\n  }\n  JSType result = getBottom();\n  for (ObjectType obj : objs) {\n    if (!obj.isSubClassOf(result.toMaybeObjectType())) {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n    result = obj.getGreatestSubtype(result.toMaybeObjectType()).evaluate();\n  }\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..5b36ce6f 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,25 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n+private JSType greatestSubtypeHelper(Set<ObjectType> objs) {\n+  Preconditions.checkArgument(!objs.isEmpty());\n+  if (objs.contains(getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE))) {\n+    if (objs.size() == 1) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+      objs = new HashSet<>(objs);\n+      objs.remove(getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE));\n     }\n   }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n+  JSType result = getBottom();\n+  for (ObjectType obj : objs) {\n+    if (!obj.isSubClassOf(result.toMaybeObjectType())) {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n     }\n+    result = obj.getGreatestSubtype(result.toMaybeObjectType()).evaluate();\n   }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n+  return result;\n+}\n     }\n     return true;\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}