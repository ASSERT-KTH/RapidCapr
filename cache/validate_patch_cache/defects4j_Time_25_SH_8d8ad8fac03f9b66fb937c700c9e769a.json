{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        // we are in or near a DST gap\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            // we are in a DST gap\n            return (offsetLocal > offsetAdjusted) ? getOffset(prevLocal) : getOffset(nextLocal);\n        } else if (offsetLocal < offsetAdjusted) {\n            // we are near a DST gap, and DST is currently in effect\n            long nextGapLocal = nextTransition(nextLocal);\n            long nextGapAdjusted = nextTransition(nextAdjusted);\n            if (nextGapLocal == nextGapAdjusted) {\n                // there is only one DST gap, so we must be in it\n                return offsetLocal;\n            } else {\n                // determine which DST gap we are in, and return the corresponding offset\n                return (instantLocal + offsetLocal >= nextGapLocal) ? getOffset(nextGapAdjusted) : offsetLocal;\n            }\n        } else {\n            // we are near a DST gap, and DST is not currently in effect\n            long prevGapLocal = previousTransition(prevLocal);\n            long prevGapAdjusted = previousTransition(prevAdjusted);\n            if (prevGapLocal == prevGapAdjusted) {\n                // there is only one DST gap, so we must be in it\n                return offsetLocal;\n            } else {\n                // determine which DST gap we are in, and return the corresponding offset\n                return (instantLocal + offsetLocal >= prevGapLocal) ? offsetLocal : getOffset(prevGapLocal);\n            }\n        }\n    } else {\n        // we are not near a DST gap\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4bdaf90d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,45 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        // we are in or near a DST gap\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            // we are in a DST gap\n+            return (offsetLocal > offsetAdjusted) ? getOffset(prevLocal) : getOffset(nextLocal);\n+        } else if (offsetLocal < offsetAdjusted) {\n+            // we are near a DST gap, and DST is currently in effect\n+            long nextGapLocal = nextTransition(nextLocal);\n+            long nextGapAdjusted = nextTransition(nextAdjusted);\n+            if (nextGapLocal == nextGapAdjusted) {\n+                // there is only one DST gap, so we must be in it\n+                return offsetLocal;\n+            } else {\n+                // determine which DST gap we are in, and return the corresponding offset\n+                return (instantLocal + offsetLocal >= nextGapLocal) ? getOffset(nextGapAdjusted) : offsetLocal;\n+            }\n+        } else {\n+            // we are near a DST gap, and DST is not currently in effect\n+            long prevGapLocal = previousTransition(prevLocal);\n+            long prevGapAdjusted = previousTransition(prevAdjusted);\n+            if (prevGapLocal == prevGapAdjusted) {\n+                // there is only one DST gap, so we must be in it\n+                return offsetLocal;\n+            } else {\n+                // determine which DST gap we are in, and return the corresponding offset\n+                return (instantLocal + offsetLocal >= prevGapLocal) ? offsetLocal : getOffset(prevGapLocal);\n+            }\n+        }\n+    } else {\n+        // we are not near a DST gap\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}