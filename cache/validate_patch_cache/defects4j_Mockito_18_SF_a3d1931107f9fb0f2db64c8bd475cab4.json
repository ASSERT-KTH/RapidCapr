{
    "patch": "public Iterable<String> getValues(Request request) {\n    // initialize an empty list to hold the values\n    List<String> values = new ArrayList<>();\n    \n    // loop over all parameters in the request\n    for (Parameter parameter : request.getParameters()) {\n        // add the parameter value to the list of values\n        values.add(parameter.getValue());\n    }\n    \n    // return an iterable of the values list\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..d4228401c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable<String> getValues(Request request) {\n+    // initialize an empty list to hold the values\n+    List<String> values = new ArrayList<>();\n+    \n+    // loop over all parameters in the request\n+    for (Parameter parameter : request.getParameters()) {\n+        // add the parameter value to the list of values\n+        values.add(parameter.getValue());\n+    }\n+    \n+    // return an iterable of the values list\n+    return values;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}