{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, alpha, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            final RealPointValuePair[] pointsToCompare = expandedSimplex(expanded, original, comparator);\n            if (comparator.compare(pointsToCompare[0], best) < 0) {\n                simplex = pointsToCompare;\n            } else {\n                simplex = reflectedSimplex;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair[] contractedSimplex = contractedSimplex(original, comparator, best);\n            final RealPointValuePair contracted = contractedSimplex[contractedSimplex.length - 1];\n\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = contractedSimplex;\n            } else {\n                final RealPointValuePair[] pointsToCompare = contractedSimplex(original, comparator, best);\n                simplex = pointsToCompare;\n            }\n        }\n\n        final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n        final double simplexSpread = computeSimplexSpread(simplex);\n        final boolean converged = convergenceChecker.converged(getIterations(),\n                                                              best, simplex[0], range, simplexSpread);\n        if (converged || getIterations() >= maxIterations) {\n            return;\n        }\n    }\n}\n\nprivate RealPointValuePair[] contractedSimplex(RealPointValuePair[] original,\n                                                Comparator<RealPointValuePair> comparator,\n                                                RealPointValuePair best) {\n    final RealPointValuePair[] contractedSimplex = simplex;\n    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        return expandedSimplex(contracted, original, comparator);\n    } else {\n        final RealPointValuePair[] pointsToCompare = new RealPointValuePair[original.length];\n        pointsToCompare[0] = best;\n        for (int i = 1; i < original.length; i++) {\n            final RealPointValuePair old = contractedSimplex[i];\n            final double[] contractedPoint = new double[old.getPointRef().length];\n            for (int j = 0; j < old.getPointRef().length; j++) {\n                contractedPoint[j] = contractionCoefficient * old.getPointRef()[j] +\n                    (1 - contractionCoefficient) * best.getPointRef()[j];\n            }\n            final double contractedValue = computeObjectiveValue(contractedPoint);\n            final RealPointValuePair contractedVertex = new RealPointValuePair(\n                    contractedPoint, contractedValue, false);\n            if (comparator.compare(contractedVertex, old) < 0) {\n                pointsToCompare[i] = contractedVertex;\n            } else {\n                pointsToCompare[i] = old;\n            }\n        }\n        return pointsToCompare;\n    }\n}\n\nprivate RealPointValuePair[] expandedSimplex(RealPointValuePair expanded, RealPointValuePair[] original,\n                                              Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair[] pointsToCompare = new RealPointValuePair[original.length];\n    pointsToCompare[0] = original[0];\n    for (int i = 1; i < original.length; i++) {\n        final RealPointValuePair old = simplex[i];\n        final double[] expandedPoint = new double[old.getPointRef().length];\n        for (int j = 0; j < old.getPointRef().length; j++) {\n            expandedPoint[j] = expansionCoefficient * old.getPointRef()[j] +\n                (1 - expansionCoefficient) * expanded.getPointRef()[j];\n        }\n        final double expandedValue = computeObjectiveValue(expandedPoint);\n        final RealPointValuePair expandedVertex = new RealPointValuePair(\n                expandedPoint, expandedValue, false);\n        if (comparator.compare(expandedVertex, old) <= 0) {\n            pointsToCompare[i] = expandedVertex;\n        } else {\n            pointsToCompare[i] = old;\n        }\n    }\n    return pointsToCompare;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3b970ab26 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,107 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, alpha, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair[] pointsToCompare = expandedSimplex(expanded, original, comparator);\n+            if (comparator.compare(pointsToCompare[0], best) < 0) {\n+                simplex = pointsToCompare;\n+            } else {\n+                simplex = reflectedSimplex;\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            final RealPointValuePair[] contractedSimplex = contractedSimplex(original, comparator, best);\n+            final RealPointValuePair contracted = contractedSimplex[contractedSimplex.length - 1];\n \n-            // check convergence\n-                return;\n+            if (comparator.compare(contracted, best) < 0) {\n+                simplex = contractedSimplex;\n+            } else {\n+                final RealPointValuePair[] pointsToCompare = contractedSimplex(original, comparator, best);\n+                simplex = pointsToCompare;\n             }\n+        }\n \n+        final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n+        final double simplexSpread = computeSimplexSpread(simplex);\n+        final boolean converged = convergenceChecker.converged(getIterations(),\n+                                                              best, simplex[0], range, simplexSpread);\n+        if (converged || getIterations() >= maxIterations) {\n+            return;\n         }\n+    }\n+}\n \n+private RealPointValuePair[] contractedSimplex(RealPointValuePair[] original,\n+                                                Comparator<RealPointValuePair> comparator,\n+                                                RealPointValuePair best) {\n+    final RealPointValuePair[] contractedSimplex = simplex;\n+    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+    if (comparator.compare(contracted, best) < 0) {\n+        return expandedSimplex(contracted, original, comparator);\n+    } else {\n+        final RealPointValuePair[] pointsToCompare = new RealPointValuePair[original.length];\n+        pointsToCompare[0] = best;\n+        for (int i = 1; i < original.length; i++) {\n+            final RealPointValuePair old = contractedSimplex[i];\n+            final double[] contractedPoint = new double[old.getPointRef().length];\n+            for (int j = 0; j < old.getPointRef().length; j++) {\n+                contractedPoint[j] = contractionCoefficient * old.getPointRef()[j] +\n+                    (1 - contractionCoefficient) * best.getPointRef()[j];\n+            }\n+            final double contractedValue = computeObjectiveValue(contractedPoint);\n+            final RealPointValuePair contractedVertex = new RealPointValuePair(\n+                    contractedPoint, contractedValue, false);\n+            if (comparator.compare(contractedVertex, old) < 0) {\n+                pointsToCompare[i] = contractedVertex;\n+            } else {\n+                pointsToCompare[i] = old;\n+            }\n+        }\n+        return pointsToCompare;\n+    }\n+}\n+\n+private RealPointValuePair[] expandedSimplex(RealPointValuePair expanded, RealPointValuePair[] original,\n+                                              Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair[] pointsToCompare = new RealPointValuePair[original.length];\n+    pointsToCompare[0] = original[0];\n+    for (int i = 1; i < original.length; i++) {\n+        final RealPointValuePair old = simplex[i];\n+        final double[] expandedPoint = new double[old.getPointRef().length];\n+        for (int j = 0; j < old.getPointRef().length; j++) {\n+            expandedPoint[j] = expansionCoefficient * old.getPointRef()[j] +\n+                (1 - expansionCoefficient) * expanded.getPointRef()[j];\n+        }\n+        final double expandedValue = computeObjectiveValue(expandedPoint);\n+        final RealPointValuePair expandedVertex = new RealPointValuePair(\n+                expandedPoint, expandedValue, false);\n+        if (comparator.compare(expandedVertex, old) <= 0) {\n+            pointsToCompare[i] = expandedVertex;\n+        } else {\n+            pointsToCompare[i] = old;\n+        }\n     }\n+    return pointsToCompare;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}