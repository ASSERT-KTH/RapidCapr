{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if (index <= seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start <= seqEnd - 1) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while (end <= seqEnd - 1 && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end > seqEnd - 1 || end == start) {\n                // Return 0 for an unfinished entity or an empty one\n                return 0;\n            }\n\n            // If entity contains '#;' and no digits in between then it is an invalid entity\n            if (end - start == 1 && input.charAt(start) == '#') {\n                return 0;\n            }\n\n            int entityValue = 0;\n            try {\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n\n            // If character value in entity is below 0 or above maximum\n            if (entityValue < 0 || entityValue > 0x10FFFF\n                    || (entityValue >= 0xD800 && entityValue <= 0xDFFF)) {\n                return 0;\n            }\n\n            if (entityValue > 0x00FFFF) {\n                //character out side of BMP\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs);\n            } else {\n                out.write(entityValue);\n            }\n\n            return end - index + 1;\n        }\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..6bb180d9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,64 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n+    if (index <= seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n+\n+        if (start <= seqEnd - 1) {\n             char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+            if (firstChar == 'x' || firstChar == 'X') {\n                 start++;\n                 isHex = true;\n-\n-                // Check there's more than just an x after the &#\n             }\n \n             int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            while (end <= seqEnd - 1 && input.charAt(end) != ';') {\n                 end++;\n             }\n \n-            int entityValue;\n+            if (end > seqEnd - 1 || end == start) {\n+                // Return 0 for an unfinished entity or an empty one\n+                return 0;\n+            }\n+\n+            // If entity contains '#;' and no digits in between then it is an invalid entity\n+            if (end - start == 1 && input.charAt(start) == '#') {\n+                return 0;\n+            }\n+\n+            int entityValue = 0;\n             try {\n-                if(isHex) {\n+                if (isHex) {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                 } else {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            } catch (NumberFormatException nfe) {\n+                return 0;\n+            }\n+\n+            // If character value in entity is below 0 or above maximum\n+            if (entityValue < 0 || entityValue > 0x10FFFF\n+                    || (entityValue >= 0xD800 && entityValue <= 0xDFFF)) {\n                 return 0;\n             }\n \n-            if(entityValue > 0xFFFF) {\n+            if (entityValue > 0x00FFFF) {\n+                //character out side of BMP\n                 char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+                out.write(chrs);\n             } else {\n                 out.write(entityValue);\n             }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            return end - index + 1;\n         }\n-        return 0;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 55295 expected:<\ud7ff[?]> but was:<\ud7ff[&#xd800;]>",
    "test_result": "FAIL"
}