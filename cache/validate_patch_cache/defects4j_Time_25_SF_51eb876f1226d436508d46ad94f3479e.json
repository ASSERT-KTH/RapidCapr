{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - initialOffset;\n    final int adjustedOffset = getOffset(instantAdjusted);\n    if (initialOffset == adjustedOffset) {\n        return initialOffset;\n    }\n\n    long nextLocal = nextTransition(instantLocal);\n    long nextAdjusted = nextTransition(instantAdjusted);\n\n    if (nextLocal == nextAdjusted) {\n        return initialOffset;\n    }\n\n    if (nextLocal > instantLocal) {\n        // We are in a gap\n        long gapStartLocal = instantLocal;\n        long gapEndLocal = nextLocal;\n        long gapStartAdjusted = instantAdjusted - initialOffset;\n        long gapEndAdjusted = nextAdjusted - adjustedOffset;\n\n        // Find the future and past offsets on either side of the gap\n        int futureOffset = getOffset(gapEndLocal);\n        int pastOffset = getOffset(gapStartLocal);\n\n        if (futureOffset == pastOffset) {\n            // There's no ambiguity, return the future offset\n            return futureOffset;\n        }\n\n        if (gapEndAdjusted <= (gapStartLocal - pastOffset)) {\n            // We are in the wall time after the gap\n            return futureOffset;\n        }\n\n        if (gapStartAdjusted >= (gapEndLocal - futureOffset)) {\n            // We are in the wall time before the gap\n            return pastOffset;\n        }\n\n        // We are in the overlapping time, before the gap end local time\n        // but after the wall time of the gap end adjusted time\n        return initialOffset;\n\n    } else {\n        // We are in an overlap\n        long overlapStartLocal = nextLocal - 1;\n        long overlapEndLocal = instantLocal;\n        long overlapStartAdjusted = nextAdjusted - 1;\n        long overlapEndAdjusted = instantAdjusted;\n\n        // Find the future and past offsets on either side of the overlap\n        int futureOffset = getOffset(overlapStartLocal);\n        int pastOffset = getOffset(overlapEndLocal);\n\n        if (futureOffset == pastOffset) {\n            // There's no ambiguity, return the future offset\n            return futureOffset;\n        }\n\n        if (overlapEndAdjusted <= (overlapStartLocal - pastOffset)) {\n            // We are in the wall time of the overlap end adjusted time\n            return pastOffset;\n        }\n\n        if (overlapStartAdjusted >= (overlapEndLocal - futureOffset)) {\n            // We are in the wall time of the overlap start adjusted time\n            return futureOffset;\n        }\n\n        // We are in the overlapping time, after the overlap start local time\n        // but before the wall time of the overlap end adjusted time\n        return initialOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a90e0329 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,82 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - initialOffset;\n+    final int adjustedOffset = getOffset(instantAdjusted);\n+    if (initialOffset == adjustedOffset) {\n+        return initialOffset;\n+    }\n+\n+    long nextLocal = nextTransition(instantLocal);\n+    long nextAdjusted = nextTransition(instantAdjusted);\n+\n+    if (nextLocal == nextAdjusted) {\n+        return initialOffset;\n+    }\n+\n+    if (nextLocal > instantLocal) {\n+        // We are in a gap\n+        long gapStartLocal = instantLocal;\n+        long gapEndLocal = nextLocal;\n+        long gapStartAdjusted = instantAdjusted - initialOffset;\n+        long gapEndAdjusted = nextAdjusted - adjustedOffset;\n+\n+        // Find the future and past offsets on either side of the gap\n+        int futureOffset = getOffset(gapEndLocal);\n+        int pastOffset = getOffset(gapStartLocal);\n+\n+        if (futureOffset == pastOffset) {\n+            // There's no ambiguity, return the future offset\n+            return futureOffset;\n+        }\n+\n+        if (gapEndAdjusted <= (gapStartLocal - pastOffset)) {\n+            // We are in the wall time after the gap\n+            return futureOffset;\n+        }\n+\n+        if (gapStartAdjusted >= (gapEndLocal - futureOffset)) {\n+            // We are in the wall time before the gap\n+            return pastOffset;\n+        }\n+\n+        // We are in the overlapping time, before the gap end local time\n+        // but after the wall time of the gap end adjusted time\n+        return initialOffset;\n+\n+    } else {\n+        // We are in an overlap\n+        long overlapStartLocal = nextLocal - 1;\n+        long overlapEndLocal = instantLocal;\n+        long overlapStartAdjusted = nextAdjusted - 1;\n+        long overlapEndAdjusted = instantAdjusted;\n+\n+        // Find the future and past offsets on either side of the overlap\n+        int futureOffset = getOffset(overlapStartLocal);\n+        int pastOffset = getOffset(overlapEndLocal);\n+\n+        if (futureOffset == pastOffset) {\n+            // There's no ambiguity, return the future offset\n+            return futureOffset;\n+        }\n+\n+        if (overlapEndAdjusted <= (overlapStartLocal - pastOffset)) {\n+            // We are in the wall time of the overlap end adjusted time\n+            return pastOffset;\n         }\n-        return offsetAdjusted;\n+\n+        if (overlapStartAdjusted >= (overlapEndLocal - futureOffset)) {\n+            // We are in the wall time of the overlap start adjusted time\n+            return futureOffset;\n+        }\n+\n+        // We are in the overlapping time, after the overlap start local time\n+        // but before the wall time of the overlap end adjusted time\n+        return initialOffset;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}