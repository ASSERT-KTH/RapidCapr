{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    PartialConverter converter = new PartialConverter(partial);\n    Chronology chrono = converter.getChronology();\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType fieldType = partial.getFieldType(i);\n        DateTimeField field = fieldType.getField(chrono);\n        int value = values[i];\n        if (i == fieldIndex) {\n            value = FieldUtils.safeAdd(field.get(instant, value), valueToAdd);\n        }\n        instant = field.set(instant, value);\n    }\n    instant = add(chrono, instant, valueToAdd);\n    return converter.getPartial(instant);\n}\n\nprivate long add(Chronology chrono, long instant, int months) {\n    if (months == 0) {\n        return instant;\n    }\n    long newInstant = chrono.months().add(instant, months);\n    // If we cross over a leap year boundary, we need to adjust the date\n    if (chrono.dayOfMonth().get(newInstant) < chrono.dayOfMonth().get(instant)) {\n        DateTimeField dayField = chrono.dayOfMonth();\n        int maxDayOfMonth = dayField.getMaximumValue(newInstant);\n        int dayOfMonth = dayField.get(newInstant);\n        if (dayOfMonth > maxDayOfMonth) {\n            newInstant = dayField.set(newInstant, maxDayOfMonth);\n        }\n    }\n    return newInstant;\n}\n\nprivate static class PartialConverter {\n    private final DateTimeFieldType[] iTypes;\n\n    PartialConverter(ReadablePartial partial) {\n        int size = partial.size();\n        iTypes = new DateTimeFieldType[size];\n        for (int i = 0; i < size; i++) {\n            iTypes[i] = partial.getFieldType(i);\n        }\n    }\n\n    Chronology getChronology() {\n        return DateTimeUtils.getChronology(iTypes);\n    }\n\n    int[] getPartial(long instant) {\n        int[] values = new int[iTypes.length];\n        for (int i = 0, size = iTypes.length; i < size; i++) {\n            values[i] = iTypes[i].getField(getChronology()).get(instant);\n        }\n        return values;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1ec2e780 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,67 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    PartialConverter converter = new PartialConverter(partial);\n+    Chronology chrono = converter.getChronology();\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType fieldType = partial.getFieldType(i);\n+        DateTimeField field = fieldType.getField(chrono);\n+        int value = values[i];\n+        if (i == fieldIndex) {\n+            value = FieldUtils.safeAdd(field.get(instant, value), valueToAdd);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        instant = field.set(instant, value);\n+    }\n+    instant = add(chrono, instant, valueToAdd);\n+    return converter.getPartial(instant);\n+}\n+\n+private long add(Chronology chrono, long instant, int months) {\n+    if (months == 0) {\n+        return instant;\n+    }\n+    long newInstant = chrono.months().add(instant, months);\n+    // If we cross over a leap year boundary, we need to adjust the date\n+    if (chrono.dayOfMonth().get(newInstant) < chrono.dayOfMonth().get(instant)) {\n+        DateTimeField dayField = chrono.dayOfMonth();\n+        int maxDayOfMonth = dayField.getMaximumValue(newInstant);\n+        int dayOfMonth = dayField.get(newInstant);\n+        if (dayOfMonth > maxDayOfMonth) {\n+            newInstant = dayField.set(newInstant, maxDayOfMonth);\n+        }\n+    }\n+    return newInstant;\n+}\n+\n+private static class PartialConverter {\n+    private final DateTimeFieldType[] iTypes;\n+\n+    PartialConverter(ReadablePartial partial) {\n+        int size = partial.size();\n+        iTypes = new DateTimeFieldType[size];\n+        for (int i = 0; i < size; i++) {\n+            iTypes[i] = partial.getFieldType(i);\n         }\n     }\n \n+    Chronology getChronology() {\n+        return DateTimeUtils.getChronology(iTypes);\n+    }\n+\n+    int[] getPartial(long instant) {\n+        int[] values = new int[iTypes.length];\n+        for (int i = 0, size = iTypes.length; i < size; i++) {\n+            values[i] = iTypes[i].getField(getChronology()).get(instant);\n+        }\n+        return values;\n+    }\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}