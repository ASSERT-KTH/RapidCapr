{
    "patch": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // check for unknown types\n    if (this.isUnknownType() || that.isUnknownType()) {\n      return new TypePair(this, that);\n    }\n\n    // restrict types by not null or undefined\n    TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n\n    // check for equivalent types\n    if (pair.typeA.isEquivalentTo(pair.typeB)) {\n      return new TypePair(pair.typeA, pair.typeB);\n    }\n\n    return pair;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..d9a6219d 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,28 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+  public TypePair getTypesUnderInequality(JSType that) {\n+    // unions types\n+    if (that instanceof UnionType) {\n+      TypePair p = that.getTypesUnderInequality(this);\n+      return new TypePair(p.typeB, p.typeA);\n+    }\n+\n+    // check for unknown types\n+    if (this.isUnknownType() || that.isUnknownType()) {\n+      return new TypePair(this, that);\n+    }\n+\n+    // restrict types by not null or undefined\n+    TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+\n+    // check for equivalent types\n+    if (pair.typeA.isEquivalentTo(pair.typeB)) {\n+      return new TypePair(pair.typeA, pair.typeB);\n+    }\n+\n+    return pair;\n+  }\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}