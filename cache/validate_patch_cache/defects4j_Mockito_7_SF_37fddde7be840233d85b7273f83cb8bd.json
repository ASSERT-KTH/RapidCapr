{
    "patch": "private void readTypeVariables() {\n    if (typeVariable instanceof TypeVariable) {\n        Type[] bounds = ((TypeVariable) typeVariable).getBounds();\n        for (Type bound : bounds) {\n            if (bound instanceof WildcardType) {\n                Type upperBound = ((WildcardType) bound).getUpperBounds()[0];\n                registerTypeVariablesOn(getActualTypeArgumentFor(upperBound));\n            } else if (bound instanceof ParameterizedType) {\n                Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n                for (Type typeArg : typeArgs) {\n                    registerTypeVariablesOn(typeArg);\n                }\n            } else if (bound instanceof TypeVariable) {\n                Type actualTypeArg = getActualTypeArgumentFor(bound);\n                if (actualTypeArg != null) {\n                    registerTypeVariablesOn(actualTypeArg);\n                }\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n\n        if (typeVariable != null) {\n            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..26d3149d0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,37 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable instanceof TypeVariable) {\n+        Type[] bounds = ((TypeVariable) typeVariable).getBounds();\n+        for (Type bound : bounds) {\n+            if (bound instanceof WildcardType) {\n+                Type upperBound = ((WildcardType) bound).getUpperBounds()[0];\n+                registerTypeVariablesOn(getActualTypeArgumentFor(upperBound));\n+            } else if (bound instanceof ParameterizedType) {\n+                Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n+                for (Type typeArg : typeArgs) {\n+                    registerTypeVariablesOn(typeArg);\n+                }\n+            } else if (bound instanceof TypeVariable) {\n+                Type actualTypeArg = getActualTypeArgumentFor(bound);\n+                if (actualTypeArg != null) {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                }\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+\n+        if (typeVariable != null) {\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: Type cannot be converted to TypeVariable",
    "test_result": "ERROR"
}