{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.isInterface() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            // Don't traverse functions that are constructors, interfaces\n            // or have the @this or @override annotation\n            return false;\n        }\n\n        if (NodeUtil.getEnclosingType(n) == Token.OBJECTLIT &&\n            !NodeUtil.isObjectLitKey(n.getParent())) {\n            // Don't traverse function expressions in object literals.\n            return false;\n        }\n\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n              pType == Token.VAR ||\n              pType == Token.FOR ||\n              pType == Token.IF ||\n              pType == Token.CATCH ||\n              pType == Token.EXPR_RESULT ||\n\n              // object literal keys\n              pType == Token.STRING ||\n              pType == Token.NUMBER)) {\n            // Don't traverse the body of a function unless it is a legal\n            // expression to be used as a value (except in an object literal).\n            return NodeUtil.isStatementBlock(n.getParent());\n        }\n\n        if (NodeUtil.isAssignmentOp(parent.getType())) {\n            Node lhs = parent.getFirstChild();\n            Node rhs = lhs.getNext();\n\n            if (n == lhs) {\n                // Always traverse the left side of the assignment. To handle\n                // nested assignments properly (e.g., (a = this).property = c;),\n                // assignLhsChild should not be overridden.\n                if (assignLhsChild == null) {\n                    assignLhsChild = lhs;\n                }\n            } else {\n                if (NodeUtil.isPrototypeProperty(lhs)) {\n                    // Don't traverse functions being assigned to prototype\n                    // properties.\n                    return false;\n                }\n\n                if (NodeUtil.isObjectLitKey(parent, lhs)) {\n                    // Don't traverse function expressions in object literals.\n                    if (!NodeUtil.isFunctionExpression(n)) {\n                        return false;\n                    }\n\n                    // Don't traverse function expressions assigned to\n                    // object literal keys.\n                    Node grandparent = parent.getParent();\n                    if (grandparent == null) { // should never happen, but just in case\n                      return false;\n                    }\n\n                    int gType = grandparent.getType();\n                    if (!(gType == Token.ASSIGN ||\n                          gType == Token.VAR)) {\n                        return false;\n                    }\n                    Node greatgrandparent = grandparent.getParent();\n                    if (greatgrandparent == null) { // should never happen, but just in case\n                      return false;\n                    }\n\n                    int ggType = greatgrandparent.getType();\n                    if (!(ggType == Token.OBJECTLIT ||\n                          ggType == Token.ASSIGN)) {\n                        return false;\n                    }\n                } else if (!NodeUtil.isFunctionExpression(n) &&\n                           !NodeUtil.isName(n)) {\n                    // Only traverse function declarations, function expressions, and variables.\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..228417e4 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,101 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+             jsDoc.isInterface() ||\n+             jsDoc.hasThisType() ||\n+             jsDoc.isOverride())) {\n+            // Don't traverse functions that are constructors, interfaces\n+            // or have the @this or @override annotation\n+            return false;\n+        }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+        if (NodeUtil.getEnclosingType(n) == Token.OBJECTLIT &&\n+            !NodeUtil.isObjectLitKey(n.getParent())) {\n+            // Don't traverse function expressions in object literals.\n+            return false;\n+        }\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME ||\n+              pType == Token.ASSIGN ||\n+              pType == Token.VAR ||\n+              pType == Token.FOR ||\n+              pType == Token.IF ||\n+              pType == Token.CATCH ||\n+              pType == Token.EXPR_RESULT ||\n+\n+              // object literal keys\n+              pType == Token.STRING ||\n+              pType == Token.NUMBER)) {\n+            // Don't traverse the body of a function unless it is a legal\n+            // expression to be used as a value (except in an object literal).\n+            return NodeUtil.isStatementBlock(n.getParent());\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+\n+        if (NodeUtil.isAssignmentOp(parent.getType())) {\n+            Node lhs = parent.getFirstChild();\n+            Node rhs = lhs.getNext();\n+\n+            if (n == lhs) {\n+                // Always traverse the left side of the assignment. To handle\n+                // nested assignments properly (e.g., (a = this).property = c;),\n+                // assignLhsChild should not be overridden.\n+                if (assignLhsChild == null) {\n+                    assignLhsChild = lhs;\n+                }\n+            } else {\n+                if (NodeUtil.isPrototypeProperty(lhs)) {\n+                    // Don't traverse functions being assigned to prototype\n+                    // properties.\n+                    return false;\n+                }\n+\n+                if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+                    // Don't traverse function expressions in object literals.\n+                    if (!NodeUtil.isFunctionExpression(n)) {\n+                        return false;\n+                    }\n+\n+                    // Don't traverse function expressions assigned to\n+                    // object literal keys.\n+                    Node grandparent = parent.getParent();\n+                    if (grandparent == null) { // should never happen, but just in case\n+                      return false;\n+                    }\n+\n+                    int gType = grandparent.getType();\n+                    if (!(gType == Token.ASSIGN ||\n+                          gType == Token.VAR)) {\n+                        return false;\n+                    }\n+                    Node greatgrandparent = grandparent.getParent();\n+                    if (greatgrandparent == null) { // should never happen, but just in case\n+                      return false;\n+                    }\n+\n+                    int ggType = greatgrandparent.getType();\n+                    if (!(ggType == Token.OBJECTLIT ||\n+                          ggType == Token.ASSIGN)) {\n+                        return false;\n+                    }\n+                } else if (!NodeUtil.isFunctionExpression(n) &&\n+                           !NodeUtil.isName(n)) {\n+                    // Only traverse function declarations, function expressions, and variables.\n+                    return false;\n+                }\n+            }\n         }\n-      }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}