{
    "patch": "    Preconditions.checkState(referenced != null);\n    if (argList != null) {\n      int numArgs = 0;\n      Node args = argList.getFirstChild();\n      while (args != null) {\n        Node name = args.getFirstChild();\n        Var var = fnScope.getVar(name.getString());\n        // We'll assume that caller modification is only an issue\n        // if we're actually removing something.\n        if (referenced.contains(var)) {\n          args = args.getNext();\n          numArgs++;\n          continue;\n        }\n        Node defaultValue = name.getFirstChild();\n        Preconditions.checkState(name.isName());\n        Preconditions.checkState(defaultValue == null || defaultValue.isDefaultValue());\n        Preconditions.checkState(numArgs < function.getMaxFunctionCallArguments());\n        args = args.getNext();\n        argList.removeChild(name);\n        compiler.reportCodeChange();\n        defaultParameters.remove(name.getString());\n        numArgs++;\n      }\n    }\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d55b1ad4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(referenced != null);\n+    if (argList != null) {\n+      int numArgs = 0;\n+      Node args = argList.getFirstChild();\n+      while (args != null) {\n+        Node name = args.getFirstChild();\n+        Var var = fnScope.getVar(name.getString());\n+        // We'll assume that caller modification is only an issue\n+        // if we're actually removing something.\n+        if (referenced.contains(var)) {\n+          args = args.getNext();\n+          numArgs++;\n+          continue;\n+        }\n+        Node defaultValue = name.getFirstChild();\n+        Preconditions.checkState(name.isName());\n+        Preconditions.checkState(defaultValue == null || defaultValue.isDefaultValue());\n+        Preconditions.checkState(numArgs < function.getMaxFunctionCallArguments());\n+        args = args.getNext();\n+        argList.removeChild(name);\n+        compiler.reportCodeChange();\n+        defaultParameters.remove(name.getString());\n+        numArgs++;\n+      }\n+    }\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}