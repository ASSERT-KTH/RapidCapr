{
    "patch": "// Requires should be removed before further processing.\n// Some clients run closure pass multiple times, first with\n// the checks for broken requires turned off. In these cases, we\n// allow broken requires to be preserved by the first run to\n// let them be caught in the subsequent run.\nif (parent.getParent() != null) {\n    Node grandparent = parent.getParent();\n    if (grandparent.isExprResult()) {\n        Node greatGrandparent = grandparent.getParent();\n        if (greatGrandparent != null && NodeUtil.isStatement(greatGrandparent)) {\n            grandparent.removeChild(parent);\n            compiler.reportCodeChange();\n        } else {\n            grandparent.replaceWith(parent.removeFirstChild());\n            compiler.reportCodeChange();\n        }\n    } else {\n        grandparent.removeChild(parent);\n        compiler.reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..d4141db2 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,27 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+// Requires should be removed before further processing.\n+// Some clients run closure pass multiple times, first with\n+// the checks for broken requires turned off. In these cases, we\n+// allow broken requires to be preserved by the first run to\n+// let them be caught in the subsequent run.\n+if (parent.getParent() != null) {\n+    Node grandparent = parent.getParent();\n+    if (grandparent.isExprResult()) {\n+        Node greatGrandparent = grandparent.getParent();\n+        if (greatGrandparent != null && NodeUtil.isStatement(greatGrandparent)) {\n+            grandparent.removeChild(parent);\n+            compiler.reportCodeChange();\n+        } else {\n+            grandparent.replaceWith(parent.removeFirstChild());\n+            compiler.reportCodeChange();\n+        }\n+    } else {\n+        grandparent.removeChild(parent);\n+        compiler.reportCodeChange();\n+    }\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}