{
    "patch": "// If the return type is an Iterable, return an empty iterable\nif (Iterable.class.isAssignableFrom(returnType)) {\n    return new ArrayList<>().iterator();\n}\n\n// If the return type is a Collection, return an empty collection\nif (Collection.class.isAssignableFrom(returnType)) {\n    return new ArrayList<>();\n}\n\n// If the return type is an array, return an empty array\nif (returnType.isArray()) {\n    return Array.newInstance(returnType.getComponentType(), 0);\n}\n\n// For all other types, return null\nreturn null;",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}