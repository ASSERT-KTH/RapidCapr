{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n    final RealMatrix y = MatrixUtils.createRealMatrix(n, n);\n    final RealMatrix z = MatrixUtils.createRealMatrix(n, n);\n    final RealMatrix I = MatrixUtils.createRealIdentityMatrix(n);\n\n    // Compute trace of matrix m\n    double trace = 0.0;\n    for (int i = 0; i < n; i++) {\n        trace += m.getEntry(i, i);\n    }\n\n    // Initialize x to estimate trace(sqrt(m)) I\n    final double alpha = Math.sqrt(trace/n);\n    x.scalarMultiply(alpha).copyTo(y);\n\n    // Iterate until convergence\n    double err = Double.POSITIVE_INFINITY;\n    while (err > 1e-9) {\n        z.setSubMatrix(y.getData(), 0, 0);\n        y.setSubMatrix(x.getData(), 0, 0);\n        x.setSubMatrix(z.getData(), 0, 0);\n        x.multiply(2).subtract(I).multiply(y).add(m).multiply(0.5).copyTo(y);\n        err = y.subtract(x).getNorm()/x.getNorm();\n    }\n\n    // Compute the square root of the matrix using y\n    final RealMatrix q = new QRDecomposition(y).getR();\n    final RealMatrix d = new DiagonalMatrix(n);\n    for (int i = 0; i < n; i++) {\n        d.setEntry(i, i, Math.sqrt(q.getEntry(i, i)));\n    }\n    final RealMatrix qInv = new QRDecomposition(q.transpose()).getQ();\n    return q.multiply(d).multiply(qInv);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..970c5e268 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,40 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n+    final RealMatrix y = MatrixUtils.createRealMatrix(n, n);\n+    final RealMatrix z = MatrixUtils.createRealMatrix(n, n);\n+    final RealMatrix I = MatrixUtils.createRealIdentityMatrix(n);\n+\n+    // Compute trace of matrix m\n+    double trace = 0.0;\n+    for (int i = 0; i < n; i++) {\n+        trace += m.getEntry(i, i);\n     }\n+\n+    // Initialize x to estimate trace(sqrt(m)) I\n+    final double alpha = Math.sqrt(trace/n);\n+    x.scalarMultiply(alpha).copyTo(y);\n+\n+    // Iterate until convergence\n+    double err = Double.POSITIVE_INFINITY;\n+    while (err > 1e-9) {\n+        z.setSubMatrix(y.getData(), 0, 0);\n+        y.setSubMatrix(x.getData(), 0, 0);\n+        x.setSubMatrix(z.getData(), 0, 0);\n+        x.multiply(2).subtract(I).multiply(y).add(m).multiply(0.5).copyTo(y);\n+        err = y.subtract(x).getNorm()/x.getNorm();\n+    }\n+\n+    // Compute the square root of the matrix using y\n+    final RealMatrix q = new QRDecomposition(y).getR();\n+    final RealMatrix d = new DiagonalMatrix(n);\n+    for (int i = 0; i < n; i++) {\n+        d.setEntry(i, i, Math.sqrt(q.getEntry(i, i)));\n+    }\n+    final RealMatrix qInv = new QRDecomposition(q.transpose()).getQ();\n+    return q.multiply(d).multiply(qInv);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}