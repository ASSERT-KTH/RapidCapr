{
    "patch": "if (cfa != null && finallyNode != null) {\n  // adds an edge from fromNode to the finallyNode block\n  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n  Node nodeAfterFinally = NodeUtil.getSuccessorIgnoringEmptyStatements(\n    finallyNode);\n  // adds an edge from the finallyNode block to the node following it\n  cfa.createEdge(finallyNode, Branch.UNCOND, nodeAfterFinally);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..3a4cc4ed 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,14 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && finallyNode != null) {\n+  // adds an edge from fromNode to the finallyNode block\n+  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  Node nodeAfterFinally = NodeUtil.getSuccessorIgnoringEmptyStatements(\n+    finallyNode);\n+  // adds an edge from the finallyNode block to the node following it\n+  cfa.createEdge(finallyNode, Branch.UNCOND, nodeAfterFinally);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}