{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // We try to detect the case where EXPR_RESULT is used instead of a regular expression statement.\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        maybeExpr = maybeExpr.getFirstChild();\n        // We only have to worry about methods with an implicit 'this' param.\n        if (maybeExpr.isGetProp() && maybeExpr.getFirstChild().isThis()) {\n          maybeExpr = maybeExpr.getNext();\n        }\n        return NodeUtil.isExpressionNode(maybeExpr);\n      } else {\n        return NodeUtil.isExpressionNode(n.getFirstChild());\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..4a8e18fc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,20 +517,18 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      // We try to detect the case where EXPR_RESULT is used instead of a regular expression statement.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        maybeExpr = maybeExpr.getFirstChild();\n+        // We only have to worry about methods with an implicit 'this' param.\n+        if (maybeExpr.isGetProp() && maybeExpr.getFirstChild().isThis()) {\n+          maybeExpr = maybeExpr.getNext();\n+        }\n+        return NodeUtil.isExpressionNode(maybeExpr);\n+      } else {\n+        return NodeUtil.isExpressionNode(n.getFirstChild());\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}