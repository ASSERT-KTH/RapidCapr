{
    "patch": "          int indexOfDot = namespace.lastIndexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..3f04a019 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,18 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+          int indexOfDot = namespace.lastIndexOf('.');\n+          if (indexOfDot == -1) {\n+            // Any old place is fine.\n+            compiler.getNodeForCodeInsertion(minimumModule)\n+                .addChildToBack(replacementNode);\n+          } else {\n+            // Add it after the parent namespace.\n+            ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n+            Preconditions.checkNotNull(parentName);\n+            Preconditions.checkNotNull(parentName.replacementNode);\n+            parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n+          }\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "java.lang.IllegalArgumentException",
    "test_result": "FAIL"
}