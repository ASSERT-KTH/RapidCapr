{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                // ensure instantLocal is on or after the next transition\n                instantAdjusted = nextAdjusted - offsetAdjusted;\n                final int offset = getOffset(instantAdjusted);\n                if (offset != offsetAdjusted) {\n                    if ((offset - offsetLocal) < 0) {\n                        // needs to be on or after nextTransition(instantLocal)\n                        final long next = nextTransition(instantLocal - offsetLocal);\n                        instantAdjusted = next - offsetLocal;\n                    }\n                }\n            } else {\n                // ensure instantLocal is strictly before the current transition\n                instantAdjusted = Math.min(instantLocal - offsetLocal, prevTransition(instantLocal - offsetAdjusted) - offsetAdjusted);\n                final int offset = getOffset(instantAdjusted);\n                if (offset != offsetAdjusted) {\n                    if ((offsetLocal - offset) >= 0) {\n                        final long next = nextTransition(instantLocal - offsetLocal);\n                        instantAdjusted = next - offsetAdjusted;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f3ef0bd4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // ensure instantLocal is on or after the next transition\n+                instantAdjusted = nextAdjusted - offsetAdjusted;\n+                final int offset = getOffset(instantAdjusted);\n+                if (offset != offsetAdjusted) {\n+                    if ((offset - offsetLocal) < 0) {\n+                        // needs to be on or after nextTransition(instantLocal)\n+                        final long next = nextTransition(instantLocal - offsetLocal);\n+                        instantAdjusted = next - offsetLocal;\n+                    }\n+                }\n+            } else {\n+                // ensure instantLocal is strictly before the current transition\n+                instantAdjusted = Math.min(instantLocal - offsetLocal, prevTransition(instantLocal - offsetAdjusted) - offsetAdjusted);\n+                final int offset = getOffset(instantAdjusted);\n+                if (offset != offsetAdjusted) {\n+                    if ((offsetLocal - offset) >= 0) {\n+                        final long next = nextTransition(instantLocal - offsetLocal);\n+                        instantAdjusted = next - offsetAdjusted;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot assign a value to final variable instantAdjusted",
    "test_result": "ERROR"
}