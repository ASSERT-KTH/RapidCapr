{
    "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    for (; !iterator1.isDone() && !iterator2.isDone(); iterator1.next(), iterator2.next()) {\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n    }\n    return iterator1.isDone() && iterator2.isDone();\n}",
    "patch_diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..d332b97 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,32 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+public static boolean equal(GeneralPath p1, GeneralPath p2) {\n+    if (p1 == null) {\n+        return (p2 == null);\n+    }\n+    if (p2 == null) {\n+        return false;\n+    }\n+    if (p1.getWindingRule() != p2.getWindingRule()) {\n+        return false;\n+    }\n+    PathIterator iterator1 = p1.getPathIterator(null);\n+    PathIterator iterator2 = p2.getPathIterator(null);\n+    double[] d1 = new double[6];\n+    double[] d2 = new double[6];\n+    for (; !iterator1.isDone() && !iterator2.isDone(); iterator1.next(), iterator2.next()) {\n+        int seg1 = iterator1.currentSegment(d1);\n+        int seg2 = iterator2.currentSegment(d2);\n+        if (seg1 != seg2) {\n+            return false;\n+        }\n+        if (!Arrays.equals(d1, d2)) {\n+            return false;\n+        }\n+    }\n+    return iterator1.isDone() && iterator2.isDone();\n+}\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}