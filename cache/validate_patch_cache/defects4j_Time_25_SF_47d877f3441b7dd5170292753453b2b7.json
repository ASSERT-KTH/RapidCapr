{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalculate the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // Compute the transitions surrounding instantLocal and instantAdjusted\n        long nextTransition = nextTransition(instantAdjusted);\n        long previousTransition = previousTransition(instantAdjusted);\n\n        if (offsetLocal > offsetAdjusted) { // gap\n            // If the gap is exactly one hour long, adjust the transition accordingly\n            if (nextTransition == instantLocal - offsetLocal) {\n                nextTransition = nextTransition - 1;\n            }\n            // Compute the next offset and check if it's greater than the adjusted offset\n            int nextOffset = getOffset(nextTransition);\n            if (nextOffset > offsetAdjusted) {\n                return nextOffset;\n            } else {\n                // Check if instantLocal is in the gap\n                long nextInstant = nextTransition + nextOffset * MILLIS_PER_SECOND;\n                if (nextInstant <= instantLocal) {\n                    // If it is, move it to the other side of the gap\n                    return getOffset(nextInstant);\n                } else {\n                    return offsetLocal;\n                }\n            }\n        } else { // overlap\n            // If the overlap is exactly one hour long, adjust the transition accordingly\n            if (previousTransition == instantLocal - offsetLocal) {\n                previousTransition = previousTransition - 1;\n            }\n            // Compute the previous offset and check if it's greater than or equal to the local offset\n            int prevOffset = getOffset(previousTransition);\n            if (prevOffset >= offsetLocal) {\n                // Check if instantLocal is in the overlap\n                long prevInstant = previousTransition + prevOffset * MILLIS_PER_SECOND;\n                long nextInstant = nextTransition + offsetLocal * MILLIS_PER_SECOND;\n                if (prevInstant <= instantLocal && instantLocal < nextInstant) {\n                    // If it is, return the previous (standard) offset\n                    return prevOffset;\n                } else {\n                    return offsetLocal;\n                }\n            } else {\n                // Check if instantLocal is in the overlap\n                long nextInstant = nextTransition + offsetAdjusted * MILLIS_PER_SECOND;\n                if (nextInstant <= instantLocal) {\n                    // If it is, move it to the other side of the overlap\n                    return getOffset(nextInstant);\n                } else {\n                    return offsetLocal;\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..db226c5a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,68 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalculate the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // Compute the transitions surrounding instantLocal and instantAdjusted\n+        long nextTransition = nextTransition(instantAdjusted);\n+        long previousTransition = previousTransition(instantAdjusted);\n+\n+        if (offsetLocal > offsetAdjusted) { // gap\n+            // If the gap is exactly one hour long, adjust the transition accordingly\n+            if (nextTransition == instantLocal - offsetLocal) {\n+                nextTransition = nextTransition - 1;\n+            }\n+            // Compute the next offset and check if it's greater than the adjusted offset\n+            int nextOffset = getOffset(nextTransition);\n+            if (nextOffset > offsetAdjusted) {\n+                return nextOffset;\n+            } else {\n+                // Check if instantLocal is in the gap\n+                long nextInstant = nextTransition + nextOffset * MILLIS_PER_SECOND;\n+                if (nextInstant <= instantLocal) {\n+                    // If it is, move it to the other side of the gap\n+                    return getOffset(nextInstant);\n+                } else {\n+                    return offsetLocal;\n+                }\n+            }\n+        } else { // overlap\n+            // If the overlap is exactly one hour long, adjust the transition accordingly\n+            if (previousTransition == instantLocal - offsetLocal) {\n+                previousTransition = previousTransition - 1;\n+            }\n+            // Compute the previous offset and check if it's greater than or equal to the local offset\n+            int prevOffset = getOffset(previousTransition);\n+            if (prevOffset >= offsetLocal) {\n+                // Check if instantLocal is in the overlap\n+                long prevInstant = previousTransition + prevOffset * MILLIS_PER_SECOND;\n+                long nextInstant = nextTransition + offsetLocal * MILLIS_PER_SECOND;\n+                if (prevInstant <= instantLocal && instantLocal < nextInstant) {\n+                    // If it is, return the previous (standard) offset\n+                    return prevOffset;\n+                } else {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                // Check if instantLocal is in the overlap\n+                long nextInstant = nextTransition + offsetAdjusted * MILLIS_PER_SECOND;\n+                if (nextInstant <= instantLocal) {\n+                    // If it is, move it to the other side of the overlap\n+                    return getOffset(nextInstant);\n+                } else {\n                     return offsetLocal;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}