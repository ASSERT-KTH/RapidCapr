{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Input is NaN\");\n    }\n    if (Double.isInfinite(x)) {\n        return x < 0 ? 0.0 : 1.0;\n    }\n    double dev = (x - mean) / standardDeviation;\n    double ret;\n    try {\n        ret = Erf.erf(dev / Math.sqrt(2.0));\n        ret = 0.5d * (1d + ret);\n    } catch (MaxIterationsExceededException e) {\n        // Use approximation for extreme values\n        double z = dev / Math.sqrt(2) / standardDeviation;\n        if (Math.abs(z) > 6.0) {\n            ret = z < 0.0 ? 0.0 : 1.0;\n        } else {\n            double t = 1.0 / (1.0 + 0.3275911 * Math.abs(z));\n            ret = 1.0 - ((0.254829592 * t) - (0.284496736 * t * t) + (1.421413741 * t * t * t)\n                    - (1.453152027 * t * t * t * t) + (1.061405429 * t * t * t * t * t))\n                    * Math.exp(-z * z / 2.0);\n            ret = z < 0.0 ? 1.0 - ret : ret;\n        }\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..7718dd542 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,33 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Input is NaN\");\n     }\n+    if (Double.isInfinite(x)) {\n+        return x < 0 ? 0.0 : 1.0;\n+    }\n+    double dev = (x - mean) / standardDeviation;\n+    double ret;\n+    try {\n+        ret = Erf.erf(dev / Math.sqrt(2.0));\n+        ret = 0.5d * (1d + ret);\n+    } catch (MaxIterationsExceededException e) {\n+        // Use approximation for extreme values\n+        double z = dev / Math.sqrt(2) / standardDeviation;\n+        if (Math.abs(z) > 6.0) {\n+            ret = z < 0.0 ? 0.0 : 1.0;\n+        } else {\n+            double t = 1.0 / (1.0 + 0.3275911 * Math.abs(z));\n+            ret = 1.0 - ((0.254829592 * t) - (0.284496736 * t * t) + (1.421413741 * t * t * t)\n+                    - (1.453152027 * t * t * t * t) + (1.061405429 * t * t * t * t * t))\n+                    * Math.exp(-z * z / 2.0);\n+            ret = z < 0.0 ? 1.0 - ret : ret;\n+        }\n+    }\n+    return ret;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}