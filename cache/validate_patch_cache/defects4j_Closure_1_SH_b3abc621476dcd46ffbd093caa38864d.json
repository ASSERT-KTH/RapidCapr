{
    "patch": "    // Find all the referenced function parameters.\n    Set<String> referencedNames = new HashSet<>();\n    NodeTraversal.traverse(compiler, fnScope.getRootNode(),\n        new AbstractPreOrderCallback() {\n          @Override\n          public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n            if (NodeUtil.isFunctionDeclaration(n) || n.isFunction()) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName()) {\n              Var var = t.getScope().getVar(n.getString());\n              if (var != null && var.getParentNode() != null\n                  && NodeUtil.isFunctionExpression(var.getParentNode())) {\n                // Don't count function expression names.\n                return;\n              }\n              if (var != null && referenced.contains(var)) {\n                referencedNames.add(n.getString());\n              }\n            }\n          }\n        });\n\n    Node function = fnScope.getRootNode();\n    Node paramList = getFunctionParametersNode(function);\n    Preconditions.checkState(paramList != null && paramList.isParamList(), paramList);\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced parameters from the function declaration.\n      // Explicitly made to operate backwards over the child list so that we don't revisit nodes removed\n      // and only the last element is revisited if there are contiguous last elements to remove.\n      for (Node param = paramList.getLastChild(); param != null; param = param.getPrevious()) {\n        if (!referencedNames.contains(param.getString())) {\n          paramList.removeChild(param);\n        }\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..caf321a6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,53 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Find all the referenced function parameters.\n+    Set<String> referencedNames = new HashSet<>();\n+    NodeTraversal.traverse(compiler, fnScope.getRootNode(),\n+        new AbstractPreOrderCallback() {\n+          @Override\n+          public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+            if (NodeUtil.isFunctionDeclaration(n) || n.isFunction()) {\n+              return false;\n+            }\n+            return true;\n+          }\n+\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isName()) {\n+              Var var = t.getScope().getVar(n.getString());\n+              if (var != null && var.getParentNode() != null\n+                  && NodeUtil.isFunctionExpression(var.getParentNode())) {\n+                // Don't count function expression names.\n+                return;\n+              }\n+              if (var != null && referenced.contains(var)) {\n+                referencedNames.add(n.getString());\n+              }\n+            }\n+          }\n+        });\n+\n+    Node function = fnScope.getRootNode();\n+    Node paramList = getFunctionParametersNode(function);\n+    Preconditions.checkState(paramList != null && paramList.isParamList(), paramList);\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced parameters from the function declaration.\n+      // Explicitly made to operate backwards over the child list so that we don't revisit nodes removed\n+      // and only the last element is revisited if there are contiguous last elements to remove.\n+      for (Node param = paramList.getLastChild(); param != null; param = param.getPrevious()) {\n+        if (!referencedNames.contains(param.getString())) {\n+          paramList.removeChild(param);\n+        }\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}