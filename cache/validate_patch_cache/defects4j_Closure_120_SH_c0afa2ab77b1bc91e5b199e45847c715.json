{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        } else if (block.isBranch) {\n          // A branch can execute multiple times based on its condition, so if a variable is\n          // assigned in one branch and read in another branch, it is considered to be assigned\n          // more than once in its lifetime.\n          List<DiGraphEdge<BasicBlock, Branch>> outEdges = getCfg().getOutEdges(block);\n          Set<BasicBlock> visitedBlocks = new HashSet<>();\n          for (DiGraphEdge<BasicBlock, Branch> edge : outEdges) {\n            BasicBlock nextBlock = edge.getDestination();\n            if (visitedBlocks.contains(nextBlock)) {\n              return false;\n            } else {\n              visitedBlocks.add(nextBlock);\n            }\n          }\n        }\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..38231501 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.isBranch) {\n+          // A branch can execute multiple times based on its condition, so if a variable is\n+          // assigned in one branch and read in another branch, it is considered to be assigned\n+          // more than once in its lifetime.\n+          List<DiGraphEdge<BasicBlock, Branch>> outEdges = getCfg().getOutEdges(block);\n+          Set<BasicBlock> visitedBlocks = new HashSet<>();\n+          for (DiGraphEdge<BasicBlock, Branch> edge : outEdges) {\n+            BasicBlock nextBlock = edge.getDestination();\n+            if (visitedBlocks.contains(nextBlock)) {\n+              return false;\n+            } else {\n+              visitedBlocks.add(nextBlock);\n+            }\n+          }\n+        }\n+      }\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}