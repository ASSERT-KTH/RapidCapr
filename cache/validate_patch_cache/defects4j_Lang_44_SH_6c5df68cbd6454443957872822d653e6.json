{
    "patch": "if (val.startsWith(\"-\")) {\n    if (val.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        return null;\n    } else if (val.length() > 1 && \n               !Character.isDigit(val.charAt(1)) && \n               val.charAt(1) != '.') {\n        // if it is minus something parse rest of string as number\n        try {\n            String rest = val.substring(1);\n            if (rest.startsWith(\"0x\") || rest.startsWith(\"-0x\")) {\n                return createInteger(rest);\n            }\n            final int point = rest.indexOf('.');\n            final int exp = rest.indexOf('e') + rest.indexOf('E') + 1;\n\n            if (point > -1) {\n                if (exp > -1) {\n                    if (exp < point || exp > rest.length()) {\n                        // Illegal exponent position\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    String intString = rest.substring(0, exp);\n                    String fractional = rest.substring(point + 1, exp);\n                    String exponent = rest.substring(exp + 1);\n                    return createBigDecimal(intString + fractional + exponent);\n                } else {\n                    String intString = rest.substring(0, point);\n                    String fractional = rest.substring(point + 1);\n                    return createBigDecimal(intString + fractional);\n                }\n            } else {\n                if (exp > -1) {\n                    if (exp > rest.length()) {\n                        // Illegal exponent position\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    String intString = rest.substring(0, exp);\n                    String exponent = rest.substring(exp + 1);\n                    return createBigDecimal(intString + exponent);\n                } else {\n                    return createBigDecimal(rest);\n                }\n            }\n        } catch (NumberFormatException e) {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..3d49f312 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,58 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.startsWith(\"-\")) {\n+    if (val.startsWith(\"--\")) {\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear \n+        // to be in specification of class. OS X Java parses it to \n+        // a wrong value.\n+        return null;\n+    } else if (val.length() > 1 && \n+               !Character.isDigit(val.charAt(1)) && \n+               val.charAt(1) != '.') {\n+        // if it is minus something parse rest of string as number\n+        try {\n+            String rest = val.substring(1);\n+            if (rest.startsWith(\"0x\") || rest.startsWith(\"-0x\")) {\n+                return createInteger(rest);\n+            }\n+            final int point = rest.indexOf('.');\n+            final int exp = rest.indexOf('e') + rest.indexOf('E') + 1;\n+\n+            if (point > -1) {\n+                if (exp > -1) {\n+                    if (exp < point || exp > rest.length()) {\n+                        // Illegal exponent position\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n+                    }\n+                    String intString = rest.substring(0, exp);\n+                    String fractional = rest.substring(point + 1, exp);\n+                    String exponent = rest.substring(exp + 1);\n+                    return createBigDecimal(intString + fractional + exponent);\n+                } else {\n+                    String intString = rest.substring(0, point);\n+                    String fractional = rest.substring(point + 1);\n+                    return createBigDecimal(intString + fractional);\n+                }\n+            } else {\n+                if (exp > -1) {\n+                    if (exp > rest.length()) {\n+                        // Illegal exponent position\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n+                    }\n+                    String intString = rest.substring(0, exp);\n+                    String exponent = rest.substring(exp + 1);\n+                    return createBigDecimal(intString + exponent);\n+                } else {\n+                    return createBigDecimal(rest);\n+                }\n+            }\n+        } catch (NumberFormatException e) {\n+            return null;\n+        }\n+    }\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: 0",
    "test_result": "FAIL"
}