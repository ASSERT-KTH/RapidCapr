{
    "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  switch (n.getToken()) {\n    case FUNCTION:\n      if (!NodeUtil.isFunctionDeclaration(n)) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case CATCH:\n      defineCatch(n, parent);\n      break;\n    case VAR:\n    case LET:\n    case CONST:\n      defineVar(n, parent);\n      break;\n    case CALL:\n      if (parent != null && parent.getToken() == Token.EXPR_RESULT) {\n        Node grandParent = parent.getParent();\n        if (grandParent != null && grandParent.getToken() == Token.BLOCK) {\n          Node greatGrandParent = grandParent.getParent();\n          if (greatGrandParent != null && greatGrandParent.getToken() == Token.FUNCTION) {\n            handleFunctionInputs(greatGrandParent);\n          }\n        }\n      }\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f0d3017d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,41 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+  switch (n.getToken()) {\n+    case FUNCTION:\n+      if (!NodeUtil.isFunctionDeclaration(n)) {\n+        defineDeclaredFunction(n, parent);\n       }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+      break;\n+    case CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case VAR:\n+    case LET:\n+    case CONST:\n+      defineVar(n, parent);\n+      break;\n+    case CALL:\n+      if (parent != null && parent.getToken() == Token.EXPR_RESULT) {\n+        Node grandParent = parent.getParent();\n+        if (grandParent != null && grandParent.getToken() == Token.BLOCK) {\n+          Node greatGrandParent = grandParent.getParent();\n+          if (greatGrandParent != null && greatGrandParent.getToken() == Token.FUNCTION) {\n+            handleFunctionInputs(greatGrandParent);\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+        }\n       }\n-    }\n+      break;\n+    default:\n+      attachLiteralTypes(n);\n+      break;\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}