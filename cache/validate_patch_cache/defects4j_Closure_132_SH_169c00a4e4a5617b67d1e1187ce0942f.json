{
    "patch": "              Node maybeName2 = elseAssign.getFirstChild();\n\n              if (name1.hasChildren() &&\n                  maybeName2.isName() &&\n                  name1.getString().equals(maybeName2.getString()) &&\n                  !mayHaveSideEffects(name1) &&\n                  !mayHaveSideEffects(elseAssign.getLastChild())) {\n\n                Node thenExpr = name1.removeChildren();\n                Node elseExpr = elseAssign.getLastChild().detachFromParent();\n                cond.detachFromParent();\n                Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(n);\n                var.detachFromParent();\n                name1.addChildrenToBack(hookNode);\n                parent.replaceChild(n, var);\n                reportCodeChange();\n                return var;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..2583ddce 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,25 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node maybeName2 = elseAssign.getFirstChild();\n+\n+              if (name1.hasChildren() &&\n+                  maybeName2.isName() &&\n+                  name1.getString().equals(maybeName2.getString()) &&\n+                  !mayHaveSideEffects(name1) &&\n+                  !mayHaveSideEffects(elseAssign.getLastChild())) {\n+\n+                Node thenExpr = name1.removeChildren();\n+                Node elseExpr = elseAssign.getLastChild().detachFromParent();\n+                cond.detachFromParent();\n+                Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n+                                    .srcref(n);\n+                var.detachFromParent();\n+                name1.addChildrenToBack(hookNode);\n+                parent.replaceChild(n, var);\n+                reportCodeChange();\n+                return var;\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}