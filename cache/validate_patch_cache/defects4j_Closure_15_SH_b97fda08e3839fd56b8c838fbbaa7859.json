{
    "patch": "if (n.isBlock()) {\n  // Special logic to avoid code that is obviously empty.\n  if (n.hasChildren() &&\n      !n.getFirstChild().isBlock()) {\n    if (NodeUtil.mayHaveSideEffects(n)) {\n      return true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..22a8d27f 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,15 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isBlock()) {\n+  // Special logic to avoid code that is obviously empty.\n+  if (n.hasChildren() &&\n+      !n.getFirstChild().isBlock()) {\n+    if (NodeUtil.mayHaveSideEffects(n)) {\n+      return true;\n+    }\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}