{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Separator sep = null;\n    int sepIndex = -1;\n    int i = 0;\n    for (Object obj : elementPairs) {\n        if (obj instanceof Separator) {\n            sepIndex = i;\n            sep = (Separator) obj;\n            break;\n        }\n        i++;\n    }\n    if (sep != null) {\n        List<Object> preSepPairs = elementPairs.subList(0, sepIndex);\n        List<Object> postSepPairs = elementPairs.subList(sepIndex + 1, elementPairs.size());\n        PeriodFormatter preSepFormatter = toFormatter(preSepPairs, notPrinter, true);\n        PeriodFormatter postSepFormatter = toFormatter(postSepPairs, true, notParser);\n        sep = sep.finish(preSepFormatter.getPrinter(), postSepFormatter.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..fecec127 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,42 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Separator sep = null;\n+    int sepIndex = -1;\n+    int i = 0;\n+    for (Object obj : elementPairs) {\n+        if (obj instanceof Separator) {\n+            sepIndex = i;\n+            sep = (Separator) obj;\n+            break;\n         }\n+        i++;\n+    }\n+    if (sep != null) {\n+        List<Object> preSepPairs = elementPairs.subList(0, sepIndex);\n+        List<Object> postSepPairs = elementPairs.subList(sepIndex + 1, elementPairs.size());\n+        PeriodFormatter preSepFormatter = toFormatter(preSepPairs, notPrinter, true);\n+        PeriodFormatter postSepFormatter = toFormatter(postSepPairs, true, notParser);\n+        sep = sep.finish(preSepFormatter.getPrinter(), postSepFormatter.getParser());\n+        return new PeriodFormatter(sep, sep);\n     }\n \n+    Object[] comp = createComposite(elementPairs);\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IllegalStateException: Builder has created neither a printer nor a parser",
    "test_result": "FAIL"
}