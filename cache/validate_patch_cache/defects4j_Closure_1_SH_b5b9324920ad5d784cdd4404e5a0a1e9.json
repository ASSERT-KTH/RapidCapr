{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n        \n    if (!modifyCallers) {\n      boolean allReferenced = true;\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (var == null || (var.isParam() && !referenced.contains(var))) {\n          arg.detachFromParent();\n          compiler.reportCodeChange();\n        } else {\n          allReferenced = false;\n        }\n      }\n      if (allReferenced) {\n        return;\n      }\n      Node firstUnusedArg = argList.getFirstChild();\n      Preconditions.checkNotNull(firstUnusedArg);\n      Preconditions.checkState(fnScope.getVar(firstUnusedArg.getString()).isParam());\n      Node nameNode = firstUnusedArg.getOnlyChild();\n      String newName = nameNode.getString() + \"_\";\n      if (fnScope.isDeclared(newName)) {\n        newName += \"_\";\n      }\n      nameNode.setString(newName);\n      fnScope.declare(nameNode.getString(), nameNode, null, false);\n      compiler.reportCodeChange();\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5342c9a0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+        \n+    if (!modifyCallers) {\n+      boolean allReferenced = true;\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (var == null || (var.isParam() && !referenced.contains(var))) {\n+          arg.detachFromParent();\n+          compiler.reportCodeChange();\n+        } else {\n+          allReferenced = false;\n+        }\n+      }\n+      if (allReferenced) {\n+        return;\n+      }\n+      Node firstUnusedArg = argList.getFirstChild();\n+      Preconditions.checkNotNull(firstUnusedArg);\n+      Preconditions.checkState(fnScope.getVar(firstUnusedArg.getString()).isParam());\n+      Node nameNode = firstUnusedArg.getOnlyChild();\n+      String newName = nameNode.getString() + \"_\";\n+      if (fnScope.isDeclared(newName)) {\n+        newName += \"_\";\n+      }\n+      nameNode.setString(newName);\n+      fnScope.declare(nameNode.getString(), nameNode, null, false);\n+      compiler.reportCodeChange();\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}