{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n == null || n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n  \n  Node child = n.getFirstChild();\n  \n  if (NodeUtil.isExpressionNode(child)) {\n    Node parent = n.getParent();\n    if (parent != null && (parent.isCall() || parent.isNew())) {\n      return false;\n    }\n    \n    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n      return false;\n    }\n\n    if (child.getType() == Token.IF) {\n      Node grandParent = n.getParent().getParent();\n      if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n        return false;\n      }\n      Node firstChild = child.getFirstChild();\n      return firstChild != null && firstChild.getType() == Token.NOT;\n    }\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..401e4875 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n == null || n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+  \n+  Node child = n.getFirstChild();\n+  \n+  if (NodeUtil.isExpressionNode(child)) {\n+    Node parent = n.getParent();\n+    if (parent != null && (parent.isCall() || parent.isNew())) {\n+      return false;\n+    }\n+    \n+    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+      return false;\n     }\n \n-    return false;\n+    if (child.getType() == Token.IF) {\n+      Node grandParent = n.getParent().getParent();\n+      if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+        return false;\n+      }\n+      Node firstChild = child.getFirstChild();\n+      return firstChild != null && firstChild.getType() == Token.NOT;\n+    }\n+    return true;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}