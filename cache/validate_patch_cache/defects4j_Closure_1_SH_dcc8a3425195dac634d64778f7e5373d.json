{
    "patch": "        \n    // Store the number of arguments removed in order to update the function length at the end of\n    // the loop.\n    int numArgsRemoved = 0;\n        \n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          lastArg = argList.getLastChild();\n          \n          // Increment the number of arguments removed.\n          numArgsRemoved++;\n          \n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    \n    // Update the function length to reflect the number of remaining arguments.\n    int newLength = argList.getChildCount() - numArgsRemoved;\n    function.putProp(Node.LENGTH, newLength);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7b746292 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        \n+    // Store the number of arguments removed in order to update the function length at the end of\n+    // the loop.\n+    int numArgsRemoved = 0;\n+        \n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          lastArg = argList.getLastChild();\n+          \n+          // Increment the number of arguments removed.\n+          numArgsRemoved++;\n+          \n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    \n+    // Update the function length to reflect the number of remaining arguments.\n+    int newLength = argList.getChildCount() - numArgsRemoved;\n+    function.putProp(Node.LENGTH, newLength);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}