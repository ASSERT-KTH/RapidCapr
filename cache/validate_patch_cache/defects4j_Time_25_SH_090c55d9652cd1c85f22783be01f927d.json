{
    "patch": "            // we must be near a DST boundary\n            int diff = offsetLocal - offsetAdjusted;\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                // we are actually already correctly adjusted\n                return offsetAdjusted;\n            } else if (diff > 0 && instantAdjusted + diff < nextLocal) {\n                // we need to push the instantAdjustment forward\n                return offsetAdjusted;\n            } else if (diff < 0 && instantLocal < nextAdjusted - diff) {\n                // we need to pull the instantAdjustment back\n                return offsetAdjusted;\n            } else {\n                // normal case, leave as is\n                return offsetLocal;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a7d3c6a2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we must be near a DST boundary\n+            int diff = offsetLocal - offsetAdjusted;\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                // we are actually already correctly adjusted\n+                return offsetAdjusted;\n+            } else if (diff > 0 && instantAdjusted + diff < nextLocal) {\n+                // we need to push the instantAdjustment forward\n+                return offsetAdjusted;\n+            } else if (diff < 0 && instantLocal < nextAdjusted - diff) {\n+                // we need to pull the instantAdjustment back\n+                return offsetAdjusted;\n+            } else {\n+                // normal case, leave as is\n+                return offsetLocal;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}