{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    boolean exprResultOrBlockParent = parent != null && (parent.isExprResult() || parent.isBlock());\n    boolean simpleStmtParent = parent != null && (parent.isForIn() || parent.isForOf() || parent.isFor());\n\n    // If the parent is a comma expression, do extra checks\n    if (parent != null && parent.isComma() && parent.getFirstChild() == n) {\n        Node gramps = parent.getParent();\n        if (gramps.isCall() && parent == gramps.getFirstChild() && parent.getChildCount() == 2\n                && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n            return;\n        }\n\n        // Traverse up the ancestors of the comma, and for each ancestor that is an expression block or a block,\n        // check whether the expression may have side effects. Only if no ancestor requires side effects,\n        // return and do not raise an error.\n        for (Node an : parent.getAncestors()) {\n            int ancestorType = an.getType();\n            if (ancestorType != Token.COMMA) {\n                boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n                if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n                    if (mayHaveSideEffects) {\n                        return;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    // Only affects expressions that aren't the children of expr_result, blocks, for loops\n    if (exprResultOrBlockParent || simpleStmtParent || parent == null) {\n        return;\n    }\n\n    boolean resultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean simpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n\n    if (!resultUsed && (simpleOp || !mayHaveSideEffects)) {\n        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n            return;\n        }\n        String msg;\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (simpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                    \"' operator is not being used.\";\n        } else {\n            msg = \"This code lacks side-effects. Is there a bug?\";\n        }\n        \n        t.getCompiler().report(t.makeError(n, Level.ERROR, USELESS_CODE_ERROR, msg));\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..e2335d36 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,65 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n-    }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    boolean exprResultOrBlockParent = parent != null && (parent.isExprResult() || parent.isBlock());\n+    boolean simpleStmtParent = parent != null && (parent.isForIn() || parent.isForOf() || parent.isFor());\n+\n+    // If the parent is a comma expression, do extra checks\n+    if (parent != null && parent.isComma() && parent.getFirstChild() == n) {\n+        Node gramps = parent.getParent();\n+        if (gramps.isCall() && parent == gramps.getFirstChild() && parent.getChildCount() == 2\n+                && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+            return;\n         }\n-    }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n+        // Traverse up the ancestors of the comma, and for each ancestor that is an expression block or a block,\n+        // check whether the expression may have side effects. Only if no ancestor requires side effects,\n+        // return and do not raise an error.\n         for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+            int ancestorType = an.getType();\n+            if (ancestorType != Token.COMMA) {\n+                boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n+                if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n+                    if (mayHaveSideEffects) {\n+                        return;\n+                    }\n+                } else {\n+                    break;\n+                }\n+            }\n         }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    // Only affects expressions that aren't the children of expr_result, blocks, for loops\n+    if (exprResultOrBlockParent || simpleStmtParent || parent == null) {\n         return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+    }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    boolean resultUsed = NodeUtil.isExpressionResultUsed(n);\n+    boolean simpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+    boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n+\n+    if (!resultUsed && (simpleOp || !mayHaveSideEffects)) {\n+        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+            return;\n+        }\n+        String msg;\n+        if (n.isString()) {\n+            msg = \"Is there a missing '+' on the previous line?\";\n+        } else if (simpleOp) {\n+            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n+                    \"' operator is not being used.\";\n+        } else {\n+            msg = \"This code lacks side-effects. Is there a bug?\";\n+        }\n+        \n+        t.getCompiler().report(t.makeError(n, Level.ERROR, USELESS_CODE_ERROR, msg));\n+        if (!NodeUtil.isStatement(n)) {\n+            problemNodes.add(n);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}