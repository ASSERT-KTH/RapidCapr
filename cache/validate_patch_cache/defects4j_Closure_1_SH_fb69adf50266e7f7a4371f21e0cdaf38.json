{
    "patch": "      int indexToRemove = -1;\n      for (int i = 0, max = argList.getChildCount(); i < max; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          if (indexToRemove == -1) {\n            indexToRemove = i;\n          }\n        } else {\n          indexToRemove = -1;\n        }\n      }\n      if (indexToRemove != -1) {\n        for (int i = argList.getChildCount() - 1; i >= indexToRemove; i--) {\n          Node arg = argList.getChildAtIndex(i);\n          argList.removeChild(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e29724a0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int indexToRemove = -1;\n+      for (int i = 0, max = argList.getChildCount(); i < max; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          if (indexToRemove == -1) {\n+            indexToRemove = i;\n+          }\n+        } else {\n+          indexToRemove = -1;\n+        }\n+      }\n+      if (indexToRemove != -1) {\n+        for (int i = argList.getChildCount() - 1; i >= indexToRemove; i--) {\n+          Node arg = argList.getChildAtIndex(i);\n+          argList.removeChild(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}