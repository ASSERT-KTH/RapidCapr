{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono;\n    DateTimeZone zone;\n    if (instant.getChronology() == null) {\n        // If the instant's chronology is not set, use the default configured in the parser.\n        chrono = ((DateTimeParserInternal) parser).getChronology();\n        if (chrono == null) {\n            chrono = ISOChronology.getInstance();\n        }\n        zone = ((DateTimeParserInternal) parser).getZone();\n        if (zone == null) {\n            zone = DateTimeZone.getDefault();\n        }\n    } else {\n        // Otherwise, use the instant's chronology.\n        chrono = instant.getChronology();\n        zone = instant.getZone();\n        if (zone == null) {\n            zone = chrono.getZone();\n        }\n    }\n\n    DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(parser)\n            .toFormatter().withChronology(chrono).withZone(zone);\n    DateTimeParsingContext context = new DateTimeParsingContext(formatter, text);\n\n    if (position < 0) {\n        try {\n            boolean parsed = parser.parseInto(context, text, 0) >= 0;\n            if (!parsed || context.getParsed().fractionAny() < 0) {\n                instant.setMillis(context.getZone().previousTransition(context.getMillis()));\n                return 0;\n            }\n        } catch (IllegalArgumentException e) {\n            instant.setMillis(context.getZone().previousTransition(context.getMillis()));\n            return 0;\n        }\n    } else {\n        context.setCurrentIndex(position);\n    }\n\n    boolean strictISO = (chrono instanceof GregorianChronology)\n            && ((GregorianChronology) chrono).isStrictISO();\n    InstantConverter converter = strictISO ? new LenientDateTimeConverter(chrono)\n            : InstantConverter.INSTANCE;\n\n    long instantMillis = context.getParsed().convertToInstant(converter)\n            .getMillis();\n    context.setCurrentMillis(instantMillis);\n    long offsetMillis = zone.getOffsetFromLocal(context.getCurrentMillis());\n\n    long instantLocal = instantMillis + offsetMillis;\n    chrono = chrono.withUTC();\n    bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, bucket_getDefaultYear());\n    int newPos = parser.parseInto(bucket, text, context.getCurrentIndex());\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        instant.setZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        instant.setZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..31e04358 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,78 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono;\n+    DateTimeZone zone;\n+    if (instant.getChronology() == null) {\n+        // If the instant's chronology is not set, use the default configured in the parser.\n+        chrono = ((DateTimeParserInternal) parser).getChronology();\n+        if (chrono == null) {\n+            chrono = ISOChronology.getInstance();\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        zone = ((DateTimeParserInternal) parser).getZone();\n+        if (zone == null) {\n+            zone = DateTimeZone.getDefault();\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    } else {\n+        // Otherwise, use the instant's chronology.\n+        chrono = instant.getChronology();\n+        zone = instant.getZone();\n+        if (zone == null) {\n+            zone = chrono.getZone();\n         }\n-        return newPos;\n     }\n \n+    DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(parser)\n+            .toFormatter().withChronology(chrono).withZone(zone);\n+    DateTimeParsingContext context = new DateTimeParsingContext(formatter, text);\n+\n+    if (position < 0) {\n+        try {\n+            boolean parsed = parser.parseInto(context, text, 0) >= 0;\n+            if (!parsed || context.getParsed().fractionAny() < 0) {\n+                instant.setMillis(context.getZone().previousTransition(context.getMillis()));\n+                return 0;\n+            }\n+        } catch (IllegalArgumentException e) {\n+            instant.setMillis(context.getZone().previousTransition(context.getMillis()));\n+            return 0;\n+        }\n+    } else {\n+        context.setCurrentIndex(position);\n+    }\n+\n+    boolean strictISO = (chrono instanceof GregorianChronology)\n+            && ((GregorianChronology) chrono).isStrictISO();\n+    InstantConverter converter = strictISO ? new LenientDateTimeConverter(chrono)\n+            : InstantConverter.INSTANCE;\n+\n+    long instantMillis = context.getParsed().convertToInstant(converter)\n+            .getMillis();\n+    context.setCurrentMillis(instantMillis);\n+    long offsetMillis = zone.getOffsetFromLocal(context.getCurrentMillis());\n+\n+    long instantLocal = instantMillis + offsetMillis;\n+    chrono = chrono.withUTC();\n+    bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, bucket_getDefaultYear());\n+    int newPos = parser.parseInto(bucket, text, context.getCurrentIndex());\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        instant.setZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        instant.setZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}