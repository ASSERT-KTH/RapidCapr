{
    "patch": "import org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.commons.math3.fraction.Fraction;\n\npublic class Fraction {\n\n    private int numerator;\n    private int denominator;\n\n    public Fraction(int numerator, int denominator) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n\n    public double decimal() {\n        return (double) numerator / denominator;\n    }\n\n    public Fraction multiply(Fraction other) {\n        int num = numerator * other.numerator;\n        int den = denominator * other.denominator;\n        return new Fraction(num, den);\n    }\n\n    public Fraction add(Fraction other) {\n        int num = numerator * other.denominator + other.numerator * denominator;\n        int den = denominator * other.denominator;\n        return new Fraction(num, den);\n    }\n\n    public Fraction subtract(Fraction other) {\n        int num = numerator * other.denominator - other.numerator * denominator;\n        int den = denominator * other.denominator;\n        return new Fraction(num, den);\n    }\n\n    public Fraction divide(Fraction other) {\n        int num = numerator * other.denominator;\n        int den = denominator * other.numerator;\n        return new Fraction(num, den);\n    }\n\n    public Fraction reduce() {\n        int gcd = gcd(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return new Fraction(numerator / gcd, denominator / gcd);\n    }\n\n    public static int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n\n    public static Fraction getFraction(String str) {\n        if (!NumberUtils.isNumber(str)) {\n            throw new IllegalArgumentException(\"String \" + str + \" does not represent a number\");\n        }\n        return Fraction.getFraction(Double.parseDouble(str));\n    }\n\n    public static Fraction getFraction(double value) {\n        final int MAX_DENOMINATOR = 1000000;\n        final double EPSILON = 0.000001;\n        int sign = value < 0 ? -1 : 1;\n        value = Math.abs(value);\n        int whole = (int) value;\n        double frac = value - whole;\n        int denom = 1;\n        double frac2 = Math.abs(frac - (int) frac);\n        \n        while (frac2 > EPSILON && denom < MAX_DENOMINATOR) {\n            denom++;\n            frac = value * denom - whole * denom;\n            frac2 = Math.abs(frac - (int) frac);\n        }\n        int num = (int) frac;\n        if (whole > 0) {\n            num += whole * denom;\n        }\n        return new Fraction(sign * num, denom);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..dbc85e2c 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,96 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.commons.math3.fraction.Fraction;\n+\n+public class Fraction {\n+\n+    private int numerator;\n+    private int denominator;\n+\n+    public Fraction(int numerator, int denominator) {\n+        this.numerator = numerator;\n+        this.denominator = denominator;\n+    }\n+\n+    public int getNumerator() {\n+        return numerator;\n+    }\n+\n+    public int getDenominator() {\n+        return denominator;\n+    }\n+\n+    public double decimal() {\n+        return (double) numerator / denominator;\n+    }\n+\n+    public Fraction multiply(Fraction other) {\n+        int num = numerator * other.numerator;\n+        int den = denominator * other.denominator;\n+        return new Fraction(num, den);\n+    }\n+\n+    public Fraction add(Fraction other) {\n+        int num = numerator * other.denominator + other.numerator * denominator;\n+        int den = denominator * other.denominator;\n+        return new Fraction(num, den);\n+    }\n+\n+    public Fraction subtract(Fraction other) {\n+        int num = numerator * other.denominator - other.numerator * denominator;\n+        int den = denominator * other.denominator;\n+        return new Fraction(num, den);\n+    }\n+\n+    public Fraction divide(Fraction other) {\n+        int num = numerator * other.denominator;\n+        int den = denominator * other.numerator;\n+        return new Fraction(num, den);\n+    }\n+\n+    public Fraction reduce() {\n+        int gcd = gcd(Math.abs(numerator), denominator);\n+        if (gcd == 1) {\n+            return this;\n+        }\n+        return new Fraction(numerator / gcd, denominator / gcd);\n+    }\n+\n+    public static int gcd(int a, int b) {\n+        return b == 0 ? a : gcd(b, a % b);\n+    }\n+\n+    public static Fraction getFraction(String str) {\n+        if (!NumberUtils.isNumber(str)) {\n+            throw new IllegalArgumentException(\"String \" + str + \" does not represent a number\");\n+        }\n+        return Fraction.getFraction(Double.parseDouble(str));\n+    }\n+\n+    public static Fraction getFraction(double value) {\n+        final int MAX_DENOMINATOR = 1000000;\n+        final double EPSILON = 0.000001;\n+        int sign = value < 0 ? -1 : 1;\n+        value = Math.abs(value);\n+        int whole = (int) value;\n+        double frac = value - whole;\n+        int denom = 1;\n+        double frac2 = Math.abs(frac - (int) frac);\n+        \n+        while (frac2 > EPSILON && denom < MAX_DENOMINATOR) {\n+            denom++;\n+            frac = value * denom - whole * denom;\n+            frac2 = Math.abs(frac - (int) frac);\n+        }\n+        int num = (int) frac;\n+        if (whole > 0) {\n+            num += whole * denom;\n+        }\n+        return new Fraction(sign * num, denom);\n+    }\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}