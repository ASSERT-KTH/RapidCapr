{
    "patch": "public String getLine(int lineNumber) {\n    String js;\n    try {\n        js = getCode();\n    } catch (IOException e) {\n        return null;\n    }\n\n    int numberOfNewLines = 0;\n    int length = js.length();\n\n    for (int i = 0; i < length; i++) {\n        if (js.charAt(i) == '\\n') {\n            numberOfNewLines++;\n        }\n    }\n\n    if (lineNumber <= 0 || lineNumber > numberOfNewLines + 1) {\n        return null;\n    }\n\n    int start = 0;\n\n    for (int i = 1; i < lineNumber; i++) {\n        start = js.indexOf('\\n', start) + 1;\n    }\n\n    int end = js.indexOf('\\n', start);\n\n    if (end == -1) {\n        return js.substring(start);\n    } else {\n        return js.substring(start, end);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex fc0cf3fc..490731f6 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -202,48 +202,41 @@ public class SourceFile implements StaticSourceFile, Serializable {\n    *     of the file. Returns {@code null} if it does not exist,\n    *     or if there was an IO exception.\n    */\n-  public String getLine(int lineNumber) {\n-    String js = \"\";\n+public String getLine(int lineNumber) {\n+    String js;\n     try {\n-      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n-      // This is probably the right trade-off, but will be slow if there\n-      // are lots of warnings in one file.\n-      js = getCode();\n+        js = getCode();\n     } catch (IOException e) {\n-      return null;\n+        return null;\n     }\n \n-    int pos = 0;\n-    int startLine = 1;\n+    int numberOfNewLines = 0;\n+    int length = js.length();\n \n-    // If we've saved a previous offset and it's for a line less than the\n-    // one we're searching for, then start at that point.\n-    if (lineNumber >= lastLine) {\n-      pos = lastOffset;\n-      startLine = lastLine;\n+    for (int i = 0; i < length; i++) {\n+        if (js.charAt(i) == '\\n') {\n+            numberOfNewLines++;\n+        }\n     }\n \n-    for (int n = startLine; n < lineNumber; n++) {\n-      int nextpos = js.indexOf('\\n', pos);\n-      if (nextpos == -1) {\n+    if (lineNumber <= 0 || lineNumber > numberOfNewLines + 1) {\n         return null;\n-      }\n-      pos = nextpos + 1;\n     }\n \n-    // Remember this offset for the next search we do.\n-    lastOffset = pos;\n-    lastLine = lineNumber;\n+    int start = 0;\n \n-    if (js.indexOf('\\n', pos) == -1) {\n-      // If next new line cannot be found, there are two cases\n-      // 1. pos already reaches the end of file, then null should be returned\n-      // 2. otherwise, return the contents between pos and the end of file.\n-        return null;\n+    for (int i = 1; i < lineNumber; i++) {\n+        start = js.indexOf('\\n', start) + 1;\n+    }\n+\n+    int end = js.indexOf('\\n', start);\n+\n+    if (end == -1) {\n+        return js.substring(start);\n     } else {\n-      return js.substring(pos, js.indexOf('\\n', pos));\n+        return js.substring(start, end);\n     }\n-  }\n+}\n \n   /**\n    * Get a region around the indicated line number. The exact definition of a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<null> but was:<>",
    "test_result": "FAIL"
}