{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n  switch (n.getType()) {\n    case Token.SCRIPT:\n    case Token.BLOCK:\n    case Token.FUNCTION:\n      return;\n\n    case Token.WHILE:\n    case Token.DO:\n    case Token.IF:\n      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n      computeGenKill(n.getFirstChild(), gen, kill, true);\n      if (n.getChildCount() == 3) {\n        computeGenKill(n.getLastChild(), gen, kill, true);\n      }\n      return;\n\n    case Token.FOR:\n      if (NodeUtil.isForIn(n)) {\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        computeGenKill(rhs, gen, kill, true);\n        addToSetIfLocal(lhs, gen);\n      } else {\n        Node cond = NodeUtil.getConditionExpression(n);\n        if (cond != null) {\n          computeGenKill(cond, gen, kill, true);\n        }\n        Node incr = NodeUtil.getForIncr(n);\n        if (incr != null) {\n          computeGenKill(incr, gen, kill, true);\n        }\n      }\n      // fall through\n\n    case Token.VAR:\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (c.hasChildren()) {\n          computeGenKill(c.getFirstChild(), gen, kill, true);\n          if (!conditional) {\n            addToSetIfLocal(c.getFirstChild(), kill);\n          }\n        }\n      }\n      return;\n\n    case Token.AND:\n    case Token.OR:\n      computeGenKill(n.getFirstChild(), gen, kill, true);\n      // May short circuit.\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n\n    case Token.HOOK:\n      computeGenKill(n.getFirstChild(), gen, kill, true);\n      // Assume both sides are conditional.\n      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n\n    case Token.NAME:\n      if (isArgumentsName(n)) {\n        markAllParametersEscaped();\n      } else {\n        addToSetIfLocal(n, gen);\n        if (!conditional) {\n          addToSetIfLocal(n, kill);\n        }\n      }\n      return;\n\n    default:\n      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n        Node lhs = n.getFirstChild();\n        computeGenKill(lhs.getNext(), gen, kill, true);\n        if (!conditional) {\n          addToSetIfLocal(lhs, kill);\n        }\n        if (!NodeUtil.isAssign(n)) {\n          // assignments such as a += 1 reads a.\n          addToSetIfLocal(lhs, gen);\n        }\n      } else {\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          try {\n            computeGenKill(c, gen, kill, true);\n          } catch (Exception ex) {\n            // Ignore exceptions\n          }\n        }\n      }\n      return;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..dd796854 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,100 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n+  switch (n.getType()) {\n+    case Token.SCRIPT:\n+    case Token.BLOCK:\n+    case Token.FUNCTION:\n+      return;\n+\n+    case Token.WHILE:\n+    case Token.DO:\n+    case Token.IF:\n+      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+      computeGenKill(n.getFirstChild(), gen, kill, true);\n+      if (n.getChildCount() == 3) {\n+        computeGenKill(n.getLastChild(), gen, kill, true);\n+      }\n+      return;\n+\n+    case Token.FOR:\n+      if (NodeUtil.isForIn(n)) {\n+        Node lhs = n.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        computeGenKill(rhs, gen, kill, true);\n+        addToSetIfLocal(lhs, gen);\n+      } else {\n+        Node cond = NodeUtil.getConditionExpression(n);\n+        if (cond != null) {\n+          computeGenKill(cond, gen, kill, true);\n+        }\n+        Node incr = NodeUtil.getForIncr(n);\n+        if (incr != null) {\n+          computeGenKill(incr, gen, kill, true);\n         }\n-        return;\n+      }\n+      // fall through\n \n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n-            }\n+    case Token.VAR:\n+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (c.hasChildren()) {\n+          computeGenKill(c.getFirstChild(), gen, kill, true);\n+          if (!conditional) {\n+            addToSetIfLocal(c.getFirstChild(), kill);\n           }\n         }\n-        return;\n+      }\n+      return;\n \n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n+    case Token.AND:\n+    case Token.OR:\n+      computeGenKill(n.getFirstChild(), gen, kill, true);\n+      // May short circuit.\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      return;\n \n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n+    case Token.HOOK:\n+      computeGenKill(n.getFirstChild(), gen, kill, true);\n+      // Assume both sides are conditional.\n+      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      return;\n \n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n+    case Token.NAME:\n+      if (isArgumentsName(n)) {\n+        markAllParametersEscaped();\n+      } else {\n+        addToSetIfLocal(n, gen);\n+        if (!conditional) {\n+          addToSetIfLocal(n, kill);\n         }\n-        return;\n+      }\n+      return;\n \n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+    default:\n+      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+        Node lhs = n.getFirstChild();\n+        computeGenKill(lhs.getNext(), gen, kill, true);\n+        if (!conditional) {\n+          addToSetIfLocal(lhs, kill);\n+        }\n+        if (!NodeUtil.isAssign(n)) {\n+          // assignments such as a += 1 reads a.\n+          addToSetIfLocal(lhs, gen);\n+        }\n+      } else {\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          try {\n+            computeGenKill(c, gen, kill, true);\n+          } catch (Exception ex) {\n+            // Ignore exceptions\n           }\n         }\n-        return;\n-    }\n+      }\n+      return;\n   }\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}