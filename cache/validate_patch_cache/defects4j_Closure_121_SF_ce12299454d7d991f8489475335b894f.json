{
    "patch": "private void inlineNonConstants(Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference initializingReference = referenceInfo.getInitializingReference();\n\n  if (isImmutableAndWellDefinedVariable(v, referenceInfo) &&\n          referenceInfo.references.size() > 1) {\n      if (initializingReference != null) {\n          Node value = initializingReference.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(v, value, referenceInfo.references);\n          staleVars.add(v);\n      }\n      return;\n  }\n\n  if (refCount == 2 && declaration != initializingReference &&\n          isValidDeclaration(declaration) && isValidInitialization(initializingReference)) {\n      Node value = initializingReference.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n      return;\n  }\n\n  int firstRefAfterInit = (initializingReference == null ||\n          referenceInfo.references.get(1) == initializingReference) ? 2 : 3;\n\n  if (refCount == firstRefAfterInit && isSafeToInline(referenceInfo.references.get(firstRefAfterInit - 1))) {\n      inline(v, declaration, initializingReference, referenceInfo.references.get(firstRefAfterInit - 1));\n      staleVars.add(v);\n      return;\n  }\n\n  for (int i = firstRefAfterInit; i < refCount; i++) {\n      Reference cur = referenceInfo.references.get(i);\n      if (!cur.isLvalue()) {\n          continue;\n      }\n\n      if (i == firstRefAfterInit &&\n              refCount == firstRefAfterInit + 1 && isValidInitialization(initializingReference)) {\n          Node value = initializingReference.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(v, value, referenceInfo.references);\n          staleVars.add(v);\n          return;\n      }\n\n      if (i == refCount - 1 &&\n              declaration != initializingReference &&\n              isValidDeclaration(declaration) && isValidInitialization(initializingReference) &&\n              isSafeToInline(cur)) {\n          inline(v, declaration, initializingReference, cur);\n          staleVars.add(v);\n          return;\n      }\n\n      if (canInline(declaration, initializingReference, cur)) {\n          inline(v, declaration, initializingReference, cur);\n          staleVars.add(v);\n          return;\n      }\n  }\n\n  if (!maybeModifiedArguments &&\n          referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n      List<Reference> refs = referenceInfo.references;\n      for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n          Node nameNode = refs.get(i).getNode();\n          if (aliasCandidates.containsKey(nameNode)) {\n              AliasCandidate candidate = aliasCandidates.get(nameNode);\n              if (!staleVars.contains(candidate.alias) &&\n                      !isVarInlineForbidden(candidate.alias)) {\n                  Reference candidateInit = candidate.refInfo.getInitializingReference();\n                  Node value = candidateInit.getAssignedValue();\n                  Preconditions.checkNotNull(value);\n                  inlineWellDefinedVariable(candidate.alias,\n                          value,\n                          candidate.refInfo.references);\n                  staleVars.add(candidate.alias);\n              }\n          }\n      }\n  }\n\n  staleVars.remove(v);\n}\n\nprivate boolean isSafeToInline(Reference reference) {\n  Node value = reference.getAssignedValue();\n  if (value == null) {\n      return false;\n  }\n\n  switch (value.getToken()) {\n      case ARRAYLIT:\n          return value.hasOneChild() && isSafeToInline(value.getFirstChild());\n\n      case TRUE:\n      case FALSE:\n      case NULL:\n      case NUMBER:\n      case TEMPLATELIT_STRING:\n      case STRING:\n          return true;\n\n      case OBJECTLIT: // empty object literal\n          return !value.hasChildren();\n\n      default:\n          return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..7346ffa7 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,121 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n-        }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n+private void inlineNonConstants(Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {\n+  int refCount = referenceInfo.references.size();\n+  Reference declaration = referenceInfo.references.get(0);\n+  Reference initializingReference = referenceInfo.getInitializingReference();\n+\n+  if (isImmutableAndWellDefinedVariable(v, referenceInfo) &&\n+          referenceInfo.references.size() > 1) {\n+      if (initializingReference != null) {\n+          Node value = initializingReference.getAssignedValue();\n+          Preconditions.checkNotNull(value);\n+          inlineWellDefinedVariable(v, value, referenceInfo.references);\n           staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n+      }\n+      return;\n+  }\n+\n+  if (refCount == 2 && declaration != initializingReference &&\n+          isValidDeclaration(declaration) && isValidInitialization(initializingReference)) {\n+      Node value = initializingReference.getAssignedValue();\n+      Preconditions.checkNotNull(value);\n+      inlineWellDefinedVariable(v, value, referenceInfo.references);\n+      staleVars.add(v);\n+      return;\n+  }\n+\n+  int firstRefAfterInit = (initializingReference == null ||\n+          referenceInfo.references.get(1) == initializingReference) ? 2 : 3;\n+\n+  if (refCount == firstRefAfterInit && isSafeToInline(referenceInfo.references.get(firstRefAfterInit - 1))) {\n+      inline(v, declaration, initializingReference, referenceInfo.references.get(firstRefAfterInit - 1));\n+      staleVars.add(v);\n+      return;\n+  }\n+\n+  for (int i = firstRefAfterInit; i < refCount; i++) {\n+      Reference cur = referenceInfo.references.get(i);\n+      if (!cur.isLvalue()) {\n+          continue;\n+      }\n+\n+      if (i == firstRefAfterInit &&\n+              refCount == firstRefAfterInit + 1 && isValidInitialization(initializingReference)) {\n+          Node value = initializingReference.getAssignedValue();\n           Preconditions.checkNotNull(value);\n           inlineWellDefinedVariable(v, value, referenceInfo.references);\n           staleVars.add(v);\n-        }\n+          return;\n+      }\n+\n+      if (i == refCount - 1 &&\n+              declaration != initializingReference &&\n+              isValidDeclaration(declaration) && isValidInitialization(initializingReference) &&\n+              isSafeToInline(cur)) {\n+          inline(v, declaration, initializingReference, cur);\n+          staleVars.add(v);\n+          return;\n       }\n \n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n+      if (canInline(declaration, initializingReference, cur)) {\n+          inline(v, declaration, initializingReference, cur);\n+          staleVars.add(v);\n+          return;\n+      }\n+  }\n+\n+  if (!maybeModifiedArguments &&\n           referenceInfo.isWellDefined() &&\n           referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n+      List<Reference> refs = referenceInfo.references;\n+      for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n           Node nameNode = refs.get(i).getNode();\n           if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n+              AliasCandidate candidate = aliasCandidates.get(nameNode);\n+              if (!staleVars.contains(candidate.alias) &&\n+                      !isVarInlineForbidden(candidate.alias)) {\n+                  Reference candidateInit = candidate.refInfo.getInitializingReference();\n+                  Node value = candidateInit.getAssignedValue();\n+                  Preconditions.checkNotNull(value);\n+                  inlineWellDefinedVariable(candidate.alias,\n+                          value,\n+                          candidate.refInfo.references);\n+                  staleVars.add(candidate.alias);\n+              }\n           }\n-        }\n       }\n-    }\n+  }\n+\n+  staleVars.remove(v);\n+}\n+\n+private boolean isSafeToInline(Reference reference) {\n+  Node value = reference.getAssignedValue();\n+  if (value == null) {\n+      return false;\n+  }\n+\n+  switch (value.getToken()) {\n+      case ARRAYLIT:\n+          return value.hasOneChild() && isSafeToInline(value.getFirstChild());\n+\n+      case TRUE:\n+      case FALSE:\n+      case NULL:\n+      case NUMBER:\n+      case TEMPLATELIT_STRING:\n+      case STRING:\n+          return true;\n+\n+      case OBJECTLIT: // empty object literal\n+          return !value.hasChildren();\n+\n+      default:\n+          return false;\n+  }\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}