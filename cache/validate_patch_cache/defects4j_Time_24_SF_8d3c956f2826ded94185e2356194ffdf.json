{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // check if the week year needs adjusting\n        int year = iDefaultYear;\n        int firstOfWeekField = -1;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (field == null || !field.getName().startsWith(\"weekyear\")) {\n                continue;\n            }\n            firstOfWeekField = i;\n            if (!(field instanceof DecoratedDateTimeField)) {\n                continue;\n            }\n            DecoratedDateTimeField dfield = (DecoratedDateTimeField)field;\n            if (dfield.getRangeDurationField().getType() == DurationFieldType.weekyears()) {\n                year = dfield.getWrappedField().get(iDefaultYear);\n            }\n            break;\n        }\n        DurationFieldType firstField = savedFields[firstOfWeekField].iField.getType();\n        if (firstOfWeekField >= 0 && firstOfWeekField < count && (\n                firstField == DateTimeFieldType.weekyear() ||\n                        firstField == DateTimeFieldType.weekyearOfCentury() ||\n                        firstField == DateTimeFieldType.weekyearOfEra() ||\n                        firstField == DateTimeFieldType.weekOfWeekyear())) {\n            int weekyear = iChrono.weekyear().get(millis);\n            if (iChrono.weekyear().remainder(weekyear) <= 0) {\n                // recompute year but avoid duplicating the work we just did above\n            } else {\n                year = iChrono.weekyear().add(weekyear, 0);\n                if (firstField == DateTimeFieldType.weekyear()) {\n                    // Already converted to primary field\n                } else if (firstField == DateTimeFieldType.weekOfWeekyear()) {\n                    iDefaultYear = iChrono.weekyear().add(year, 0); // Default to current week year\n                } else if (firstField == DateTimeFieldType.weekyearOfCentury()) {\n                    year = iChrono.weekyearOfCentury().add(year, -iChrono.weekyearOfCentury().get(year) + 1);\n                    iDefaultYear = iChrono.weekyear().set(iDefaultYear, year);\n                } else if (firstField == DateTimeFieldType.weekyearOfEra()) {\n                    int century = iChrono.centuryOfEra().get(year);\n                    year = iChrono.weekyearOfCentury().add(year, (-iChrono.weekyearOfCentury().get(year) + 1) + (century - 1) * 100);\n                    iDefaultYear = iChrono.weekyear().setYearOfCentury(iDefaultYear, iChrono.weekyearOfCentury().get(year));\n                }\n            }\n        }\n        if (firstField == DateTimeFieldType.monthOfYear() || firstField == DateTimeFieldType.dayOfMonth() || firstField == DateTimeFieldType.dayOfYear()) {\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[firstOfWeekField].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                int month = iChrono.monthOfYear().get(millis);\n                int day = iChrono.dayOfMonth().get(millis);\n                int yearBeingAdjusted = iDefaultYear;\n                iDefaultYear = year; // Store default year to use for leap year calculation\n                if (iChrono.year().isLeap(yearBeingAdjusted)) {\n                    if (month == 1 && day > 29) {\n                        // Adjust for February being too short\n                        day = 29;\n                    }\n                } else {\n                    if (month == 1 && day > 28) {\n                        // Adjust for February being too short\n                        day = 28;\n                    }\n                }\n                // Recalculate millis with updated default year\n                millis = getChronology().year().set(millis, iDefaultYear);\n                millis = getChronology().millisOfDay().set(millis, 0); // Set time to midnight\n                millis = getChronology().monthOfYear().set(millis, month);\n                millis = getChronology().dayOfMonth().set(millis, day);\n            }\n        }\n    }\n\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ac7fbed6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,115 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // check if the week year needs adjusting\n+        int year = iDefaultYear;\n+        int firstOfWeekField = -1;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (field == null || !field.getName().startsWith(\"weekyear\")) {\n+                continue;\n+            }\n+            firstOfWeekField = i;\n+            if (!(field instanceof DecoratedDateTimeField)) {\n+                continue;\n+            }\n+            DecoratedDateTimeField dfield = (DecoratedDateTimeField)field;\n+            if (dfield.getRangeDurationField().getType() == DurationFieldType.weekyears()) {\n+                year = dfield.getWrappedField().get(iDefaultYear);\n+            }\n+            break;\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n+        DurationFieldType firstField = savedFields[firstOfWeekField].iField.getType();\n+        if (firstOfWeekField >= 0 && firstOfWeekField < count && (\n+                firstField == DateTimeFieldType.weekyear() ||\n+                        firstField == DateTimeFieldType.weekyearOfCentury() ||\n+                        firstField == DateTimeFieldType.weekyearOfEra() ||\n+                        firstField == DateTimeFieldType.weekOfWeekyear())) {\n+            int weekyear = iChrono.weekyear().get(millis);\n+            if (iChrono.weekyear().remainder(weekyear) <= 0) {\n+                // recompute year but avoid duplicating the work we just did above\n+            } else {\n+                year = iChrono.weekyear().add(weekyear, 0);\n+                if (firstField == DateTimeFieldType.weekyear()) {\n+                    // Already converted to primary field\n+                } else if (firstField == DateTimeFieldType.weekOfWeekyear()) {\n+                    iDefaultYear = iChrono.weekyear().add(year, 0); // Default to current week year\n+                } else if (firstField == DateTimeFieldType.weekyearOfCentury()) {\n+                    year = iChrono.weekyearOfCentury().add(year, -iChrono.weekyearOfCentury().get(year) + 1);\n+                    iDefaultYear = iChrono.weekyear().set(iDefaultYear, year);\n+                } else if (firstField == DateTimeFieldType.weekyearOfEra()) {\n+                    int century = iChrono.centuryOfEra().get(year);\n+                    year = iChrono.weekyearOfCentury().add(year, (-iChrono.weekyearOfCentury().get(year) + 1) + (century - 1) * 100);\n+                    iDefaultYear = iChrono.weekyear().setYearOfCentury(iDefaultYear, iChrono.weekyearOfCentury().get(year));\n+                }\n+            }\n+        }\n+        if (firstField == DateTimeFieldType.monthOfYear() || firstField == DateTimeFieldType.dayOfMonth() || firstField == DateTimeFieldType.dayOfYear()) {\n             DurationField months = DurationFieldType.months().getField(iChrono);\n             DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n+            DurationField first = savedFields[firstOfWeekField].iField.getDurationField();\n             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+                int month = iChrono.monthOfYear().get(millis);\n+                int day = iChrono.dayOfMonth().get(millis);\n+                int yearBeingAdjusted = iDefaultYear;\n+                iDefaultYear = year; // Store default year to use for leap year calculation\n+                if (iChrono.year().isLeap(yearBeingAdjusted)) {\n+                    if (month == 1 && day > 29) {\n+                        // Adjust for February being too short\n+                        day = 29;\n+                    }\n+                } else {\n+                    if (month == 1 && day > 28) {\n+                        // Adjust for February being too short\n+                        day = 28;\n+                    }\n+                }\n+                // Recalculate millis with updated default year\n+                millis = getChronology().year().set(millis, iDefaultYear);\n+                millis = getChronology().millisOfDay().set(millis, 0); // Set time to midnight\n+                millis = getChronology().monthOfYear().set(millis, month);\n+                millis = getChronology().dayOfMonth().set(millis, day);\n             }\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}