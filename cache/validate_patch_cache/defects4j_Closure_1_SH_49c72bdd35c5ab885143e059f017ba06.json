{
    "patch": "      int numberOfArgs = argList.getChildCount();\n      for (int i = 0; i < numberOfArgs; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          Node nextArg = arg.getNext();\n          if (nextArg != null) {\n            argList.removeChildrenInRange(i, numberOfArgs - i - 1);\n            compiler.reportCodeChange();\n          } else {\n            arg.detachFromParent();\n          }\n          i--;\n          numberOfArgs--;\n        } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b37c87b4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int numberOfArgs = argList.getChildCount();\n+      for (int i = 0; i < numberOfArgs; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          Node nextArg = arg.getNext();\n+          if (nextArg != null) {\n+            argList.removeChildrenInRange(i, numberOfArgs - i - 1);\n+            compiler.reportCodeChange();\n+          } else {\n+            arg.detachFromParent();\n+          }\n+          i--;\n+          numberOfArgs--;\n+        } \n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}