{
    "patch": "Node value = initialization.getAssignedValue();\nPreconditions.checkNotNull(value);\n\nif (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (callNode != null && callNode.isCall()) {\n        CodingConvention convention = compiler.getCodingConvention();\n        // Bug 2388531: Don't inline subclass definitions into class defining\n        // calls as this confused class removing logic.\n        SubclassRelationship relationship =\n                convention.getClassesDefinedByCall(callNode);\n        if (relationship != null) {\n            return false;\n        }\n\n        // issue 668: Don't inline singleton getter methods\n        // calls as this confused class removing logic.\n        Node callee = callNode.getFirstChild();\n        if (closureSupport.isSingletonGetter(callee)) {\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..cc23cf71 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,29 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+Node value = initialization.getAssignedValue();\n+Preconditions.checkNotNull(value);\n+\n+if (value.isFunction()) {\n+    Node callNode = reference.getParent();\n+    if (callNode != null && callNode.isCall()) {\n+        CodingConvention convention = compiler.getCodingConvention();\n+        // Bug 2388531: Don't inline subclass definitions into class defining\n+        // calls as this confused class removing logic.\n+        SubclassRelationship relationship =\n+                convention.getClassesDefinedByCall(callNode);\n+        if (relationship != null) {\n+            return false;\n+        }\n+\n+        // issue 668: Don't inline singleton getter methods\n+        // calls as this confused class removing logic.\n+        Node callee = callNode.getFirstChild();\n+        if (closureSupport.isSingletonGetter(callee)) {\n+            return false;\n+        }\n+    }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable value is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}