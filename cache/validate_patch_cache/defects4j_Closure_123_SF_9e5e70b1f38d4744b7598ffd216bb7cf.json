{
    "patch": "public static String fixCode(String code) {\n    Pattern pattern = Pattern.compile(\"\\\\[((\\\\s)*\\\\d+(\\\\s)*)in(\\\\s)*(\\\\w+)(\\\\s)*\\\\]\");\n    Matcher matcher = pattern.matcher(code);\n    StringBuilder sb = new StringBuilder();\n    int lastMatchEnd = 0;\n    while (matcher.find()) {\n        sb.append(code.substring(lastMatchEnd, matcher.start()));\n        sb.append(\"[\").append(\"(\").append(matcher.group(1).trim()).append(\")\").append(\" in \").append(matcher.group(4).trim()).append(\"]\");\n        lastMatchEnd = matcher.end();\n    }\n    sb.append(code.substring(lastMatchEnd));\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..86e85dda 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,19 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    Pattern pattern = Pattern.compile(\"\\\\[((\\\\s)*\\\\d+(\\\\s)*)in(\\\\s)*(\\\\w+)(\\\\s)*\\\\]\");\n+    Matcher matcher = pattern.matcher(code);\n+    StringBuilder sb = new StringBuilder();\n+    int lastMatchEnd = 0;\n+    while (matcher.find()) {\n+        sb.append(code.substring(lastMatchEnd, matcher.start()));\n+        sb.append(\"[\").append(\"(\").append(matcher.group(1).trim()).append(\")\").append(\" in \").append(matcher.group(4).trim()).append(\"]\");\n+        lastMatchEnd = matcher.end();\n+    }\n+    sb.append(code.substring(lastMatchEnd));\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}