{
    "patch": "import org.jfree.data.xy.XYDataItem;\nimport org.jfree.data.xy.XYDataset;\nimport org.jfree.data.xy.XYSeries;\n\npublic class MySeries extends XYSeries {\n\n    private int maximumItemCount;\n\n    public MySeries(Comparable key) {\n        super(key);\n    }\n\n    public MySeries(Comparable key, boolean autoSort, boolean allowDuplicateXValues, int maxItemCount) {\n        super(key, autoSort, allowDuplicateXValues);\n        this.maximumItemCount = maxItemCount;\n    }\n\n    public MySeries(Comparable key, boolean autoSort, boolean allowDuplicateXValues, int maxItemCount, XYDataset dataset) {\n        super(key, autoSort, allowDuplicateXValues);\n        this.maximumItemCount = maxItemCount;\n        int itemCount = dataset.getItemCount(0);\n        for (int i = 0; i < itemCount; i++) {\n            addOrUpdate(dataset.getXValue(0, i), dataset.getYValue(0, i));\n        }\n    }\n\n    public int getMaximumItemCount() {\n        return maximumItemCount;\n    }\n\n    public void setMaximumItemCount(int maximum) {\n        this.maximumItemCount = maximum;\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n\n    /**\n     * Adds a data item to the series, or updates an existing item.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     *\n     * @return A flag indicating whether an existing item was updated.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            XYDataItem newItem = new XYDataItem(x, y);\n\n            if (this.autoSort) {\n                if (index >= 0) {\n                    // Existing item with this X -- remove it.\n                    this.data.remove(index);\n                    newItem = new XYDataItem(x, y);\n                }\n                else {\n                    // We need to preserve order.\n                    index = -index - 1;\n                    if (index == this.data.size()) {\n                        this.data.add(newItem);\n                    }\n                    else {\n                        this.data.add(index, newItem);\n                    }\n                }\n            }\n            else {\n                if (index >= 0) {\n                    XYDataItem existingItem = this.data.get(index);\n                    overwritten = (XYDataItem) existingItem.clone();\n                    existingItem.setY(y);\n                }\n                else {\n                    this.data.add(newItem);\n                }\n            }\n\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n\n        fireSeriesChanged();\n        return overwritten;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..956fc87 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,109 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+import org.jfree.data.xy.XYDataItem;\n+import org.jfree.data.xy.XYDataset;\n+import org.jfree.data.xy.XYSeries;\n+\n+public class MySeries extends XYSeries {\n+\n+    private int maximumItemCount;\n+\n+    public MySeries(Comparable key) {\n+        super(key);\n+    }\n+\n+    public MySeries(Comparable key, boolean autoSort, boolean allowDuplicateXValues, int maxItemCount) {\n+        super(key, autoSort, allowDuplicateXValues);\n+        this.maximumItemCount = maxItemCount;\n+    }\n+\n+    public MySeries(Comparable key, boolean autoSort, boolean allowDuplicateXValues, int maxItemCount, XYDataset dataset) {\n+        super(key, autoSort, allowDuplicateXValues);\n+        this.maximumItemCount = maxItemCount;\n+        int itemCount = dataset.getItemCount(0);\n+        for (int i = 0; i < itemCount; i++) {\n+            addOrUpdate(dataset.getXValue(0, i), dataset.getYValue(0, i));\n+        }\n+    }\n+\n+    public int getMaximumItemCount() {\n+        return maximumItemCount;\n+    }\n+\n+    public void setMaximumItemCount(int maximum) {\n+        this.maximumItemCount = maximum;\n+        if (getItemCount() > this.maximumItemCount) {\n+            this.data.remove(0);\n+        }\n+    }\n+\n+    /**\n+     * Adds a data item to the series, or updates an existing item.\n+     *\n+     * @param x  the x-value.\n+     * @param y  the y-value.\n+     *\n+     * @return A flag indicating whether an existing item was updated.\n+     */\n+    public XYDataItem addOrUpdate(Number x, Number y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"Null 'x' argument.\");\n+        }\n+\n+        XYDataItem overwritten = null;\n+        int index = indexOf(x);\n+\n+        if (index >= 0 && !this.allowDuplicateXValues) {\n+            XYDataItem existing = (XYDataItem) this.data.get(index);\n+            try {\n+                overwritten = (XYDataItem) existing.clone();\n+            }\n+            catch (CloneNotSupportedException e) {\n+                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+            }\n+            existing.setY(y);\n+        }\n+        else {\n+            XYDataItem newItem = new XYDataItem(x, y);\n+\n+            if (this.autoSort) {\n+                if (index >= 0) {\n+                    // Existing item with this X -- remove it.\n+                    this.data.remove(index);\n+                    newItem = new XYDataItem(x, y);\n+                }\n+                else {\n+                    // We need to preserve order.\n+                    index = -index - 1;\n+                    if (index == this.data.size()) {\n+                        this.data.add(newItem);\n+                    }\n+                    else {\n+                        this.data.add(index, newItem);\n+                    }\n+                }\n+            }\n+            else {\n+                if (index >= 0) {\n+                    XYDataItem existingItem = this.data.get(index);\n+                    overwritten = (XYDataItem) existingItem.clone();\n+                    existingItem.setY(y);\n+                }\n+                else {\n+                    this.data.add(newItem);\n+                }\n+            }\n+\n+            if (getItemCount() > this.maximumItemCount) {\n+                this.data.remove(0);\n+            }\n+        }\n+\n+        fireSeriesChanged();\n+        return overwritten;\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}