{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            \n            //abort if the invalid field is a week field.\n            DateTimeField invalidField = e.getDateTimeFieldType().getField(iChrono);\n            DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            if (weeks.equals(invalidField.getDurationField())) {\n                if (compareReverse(savedFields[0].getField().getDurationField(), months) == 0) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                } else {\n                    if (compareReverse(savedFields[0].getField().getDurationField(), days) == 0) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        saveField(DateTimeFieldType.monthOfYear(), 1);\n                    }\n                }\n            } else {\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a8df9873 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            \n+            //abort if the invalid field is a week field.\n+            DateTimeField invalidField = e.getDateTimeFieldType().getField(iChrono);\n+            DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+            DurationField months = DurationFieldType.months().getField(iChrono);\n+            DurationField days = DurationFieldType.days().getField(iChrono);\n+            if (weeks.equals(invalidField.getDurationField())) {\n+                if (compareReverse(savedFields[0].getField().getDurationField(), months) == 0) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                } else {\n+                    if (compareReverse(savedFields[0].getField().getDurationField(), days) == 0) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        saveField(DateTimeFieldType.monthOfYear(), 1);\n+                    }\n+                }\n+            } else {\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}