{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    str = str.trim(); // Remove leading and trailing whitespaces.\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (str.charAt(0) == '_') {\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Must be at least 3 chars if starts with underscore: \" + str);\n        }\n\n        if (str.charAt(1) == '_') {\n            // Variant is empty, e.g. _GB_\n            return new Locale(\"\", str.substring(2));\n        } else {\n            // Both language and country codes are missing, e.g. _desert_\n            int index = str.indexOf('_', 2);\n            if (index == -1) {\n                return new Locale(\"\", str.substring(1));\n            } else {\n                return new Locale(\"\", str.substring(1, index), str.substring(index + 1));\n            }\n        }\n    }\n\n    // Regular case\n    String[] parts = str.split(\"_\", -1);\n    if (parts.length == 1) {\n        return new Locale(parts[0]);\n    } else if (parts.length == 2) {\n        return new Locale(parts[0], parts[1]);\n    } else if (parts.length == 3) {\n        return new Locale(parts[0], parts[1], parts[2]);\n    } else {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..49991d2f 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,48 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+public static Locale toLocale(String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    str = str.trim(); // Remove leading and trailing whitespaces.\n+    int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (str.charAt(0) == '_') {\n+        if (len < 3) {\n+            throw new IllegalArgumentException(\"Must be at least 3 chars if starts with underscore: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n+        if (str.charAt(1) == '_') {\n+            // Variant is empty, e.g. _GB_\n+            return new Locale(\"\", str.substring(2));\n+        } else {\n+            // Both language and country codes are missing, e.g. _desert_\n+            int index = str.indexOf('_', 2);\n+            if (index == -1) {\n+                return new Locale(\"\", str.substring(1));\n+            } else {\n+                return new Locale(\"\", str.substring(1, index), str.substring(index + 1));\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n+    }\n+\n+    // Regular case\n+    String[] parts = str.split(\"_\", -1);\n+    if (parts.length == 1) {\n+        return new Locale(parts[0]);\n+    } else if (parts.length == 2) {\n+        return new Locale(parts[0], parts[1]);\n+    } else if (parts.length == 3) {\n+        return new Locale(parts[0], parts[1], parts[2]);\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: Must be uppercase if starts with underscore",
    "test_result": "FAIL"
}