{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        Node parent = n.getParent();\n        boolean inConditional = false;\n        while (parent != null && !inConditional) {\n          int type = parent.getType();\n\n          if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n            inConditional = true;\n          } else if (type == Token.IF) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              inConditional = true;\n            }\n          } else if (NodeUtil.isLoopStructure(parent)) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              inConditional = true;\n            }\n            break;\n          }\n          parent = parent.getParent();\n        }\n\n        if (inConditional) {\n          return false;\n        }\n\n        boolean isSimpleName = maybeExpr.isName();\n\n        // Check if the expression has side effects and \n        // doesn't have an optional chain operator '?.' in its structure\n        if (!NodeUtil.mayHaveSideEffects(maybeExpr) ||\n            CodePatternAnalysisUtil.hasOptionalChain(maybeExpr)) {\n          return false;\n        }\n\n        // Check that the expression has no arguments\n        if (maybeExpr.hasChildren()) {\n          if (isSimpleName && maybeExpr.getFirstChild().getType() == Token.OPTCHAIN_GETPROP) {\n            return false;\n          }\n          if (isSimpleName && maybeExpr.getFirstChild().getType() == Token.FUNCTION) {\n            Node fnNode = maybeExpr.getFirstChild();\n            if (NodeUtil.getFunctionParameters(fnNode).hasChildren()) {\n              return false;\n            }\n            if (NodeUtil.doesFunctionReferenceOwnArgumentsArray(fnNode)) {\n              return false;\n            }\n          } else {\n            return false;\n          }\n        }\n        \n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..e6a4b4b4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,70 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        Node parent = n.getParent();\n+        boolean inConditional = false;\n+        while (parent != null && !inConditional) {\n+          int type = parent.getType();\n+\n+          if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n+            inConditional = true;\n+          } else if (type == Token.IF) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              inConditional = true;\n+            }\n+          } else if (NodeUtil.isLoopStructure(parent)) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              inConditional = true;\n+            }\n+            break;\n+          }\n+          parent = parent.getParent();\n+        }\n+\n+        if (inConditional) {\n+          return false;\n+        }\n+\n+        boolean isSimpleName = maybeExpr.isName();\n+\n+        // Check if the expression has side effects and \n+        // doesn't have an optional chain operator '?.' in its structure\n+        if (!NodeUtil.mayHaveSideEffects(maybeExpr) ||\n+            CodePatternAnalysisUtil.hasOptionalChain(maybeExpr)) {\n+          return false;\n+        }\n+\n+        // Check that the expression has no arguments\n+        if (maybeExpr.hasChildren()) {\n+          if (isSimpleName && maybeExpr.getFirstChild().getType() == Token.OPTCHAIN_GETPROP) {\n+            return false;\n+          }\n+          if (isSimpleName && maybeExpr.getFirstChild().getType() == Token.FUNCTION) {\n+            Node fnNode = maybeExpr.getFirstChild();\n+            if (NodeUtil.getFunctionParameters(fnNode).hasChildren()) {\n+              return false;\n+            }\n+            if (NodeUtil.doesFunctionReferenceOwnArgumentsArray(fnNode)) {\n+              return false;\n+            }\n+          } else {\n+            return false;\n+          }\n+        }\n+        \n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}