{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean isConditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            isConditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n) && !NodeUtil.isForOf(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              true);\n        } else {\n          // Iterate over object properties\n          Node rhs = null;\n          if (NodeUtil.isForIn(n)) {\n            // for (var x in obj) {...}\n            rhs = n.getLastChild();\n          } else if (NodeUtil.isForOf(n)) {\n            // for (var x of arr) {...}\n            rhs = NodeUtil.getEnclosingStatement(n);\n          }\n          // lhs can be NAME, VAR or ARRAY_DECL and is used only in rhs\n          computeGenKill(rhs, gen, kill, isConditional);\n          return;\n        }\n        computeGenKill(NodeUtil.getLoopCodeBlock(n), gen, kill, true);\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, true);\n            if (!isConditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.ASSIGN:\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        addToSetIfLocal(lhs, kill);\n        if (!NodeUtil.isAssign(n)) {\n          // assignments such as a += 1 reads a.\n          addToSetIfLocal(lhs, gen);\n        }\n        computeGenKill(rhs, gen, kill, true);\n        computeGenKill(lhs.getNext(), gen, kill, true);\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Other expressions\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeGenKill(c, gen, kill, true);\n        }\n        return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..8816ee9a 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,8 +175,8 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n+private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+      boolean isConditional) {\n \n     switch (n.getType()) {\n       case Token.SCRIPT:\n@@ -188,47 +188,62 @@ class LiveVariablesAnalysis extends\n       case Token.DO:\n       case Token.IF:\n         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+            isConditional);\n         return;\n \n       case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n+        if (!NodeUtil.isForIn(n) && !NodeUtil.isForOf(n)) {\n           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+              true);\n         } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n+          // Iterate over object properties\n+          Node rhs = null;\n+          if (NodeUtil.isForIn(n)) {\n+            // for (var x in obj) {...}\n+            rhs = n.getLastChild();\n+          } else if (NodeUtil.isForOf(n)) {\n+            // for (var x of arr) {...}\n+            rhs = NodeUtil.getEnclosingStatement(n);\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+          // lhs can be NAME, VAR or ARRAY_DECL and is used only in rhs\n+          computeGenKill(rhs, gen, kill, isConditional);\n+          return;\n         }\n+        computeGenKill(NodeUtil.getLoopCodeBlock(n), gen, kill, true);\n         return;\n \n       case Token.VAR:\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n+            computeGenKill(c.getFirstChild(), gen, kill, true);\n+            if (!isConditional) {\n               addToSetIfLocal(c, kill);\n             }\n           }\n         }\n         return;\n \n+      case Token.ASSIGN:\n+        Node lhs = n.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        addToSetIfLocal(lhs, kill);\n+        if (!NodeUtil.isAssign(n)) {\n+          // assignments such as a += 1 reads a.\n+          addToSetIfLocal(lhs, gen);\n+        }\n+        computeGenKill(rhs, gen, kill, true);\n+        computeGenKill(lhs.getNext(), gen, kill, true);\n+        return;\n+\n       case Token.AND:\n       case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         // May short circuit.\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n \n       case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         // Assume both sides are conditional.\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n@@ -243,20 +258,9 @@ class LiveVariablesAnalysis extends\n         return;\n \n       default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n+        // Other expressions\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          computeGenKill(c, gen, kill, true);\n         }\n         return;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}