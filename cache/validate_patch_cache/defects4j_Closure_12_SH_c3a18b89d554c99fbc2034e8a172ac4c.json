{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    NodeList<Node> successors = cfgNode.getSuccessors();\n    for (Node successor : successors) {\n        if (successor instanceof ExceptionalReturn) {\n            return true;\n        } else if (successor instanceof BasicBlock) {\n            List<Node> nodes = ((BasicBlock) successor).getNodes();\n            Node lastNode = nodes.get(nodes.size() - 1);\n            if (lastNode instanceof Jump) {\n                Jump jump = (Jump) lastNode;\n                if (jump.getTarget() instanceof ExceptionHandler) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..7039c758 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,24 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    NodeList<Node> successors = cfgNode.getSuccessors();\n+    for (Node successor : successors) {\n+        if (successor instanceof ExceptionalReturn) {\n+            return true;\n+        } else if (successor instanceof BasicBlock) {\n+            List<Node> nodes = ((BasicBlock) successor).getNodes();\n+            Node lastNode = nodes.get(nodes.size() - 1);\n+            if (lastNode instanceof Jump) {\n+                Jump jump = (Jump) lastNode;\n+                if (jump.getTarget() instanceof ExceptionHandler) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}