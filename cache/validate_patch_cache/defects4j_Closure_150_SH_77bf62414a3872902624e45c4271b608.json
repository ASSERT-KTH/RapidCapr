{
    "patch": "Node grandParent = parent.getParent();\nattachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.LP:\n        if (grandParent != null) {\n            if (grandParent.getType() == Token.CALL) {\n                handleFunctionInputs(grandParent);\n            } else if (grandParent.getType() == Token.EXPR_RESULT) {\n                grandParent = grandParent.getParent();\n                if (grandParent.getType() == Token.BLOCK) {\n                    handleFunctionInputs(grandParent.getParent());\n                } else if (grandParent.getType() == Token.CALL) {\n                    handleFunctionInputs(grandParent);\n                } else if (NodeUtil.isFunctionExpression(grandParent)) {\n                    handleFunctionInputs(parent);\n                }\n            } else if (grandParent.getType() == Token.ASSIGN) {\n                handleFunctionInputs(parent);\n            } else if (grandParent.getType() == Token.FUNCTION) {\n                handleFunctionInputs(parent);\n            }\n        }\n        break;\n    case Token.NAME:\n        if (parent.getType() == Token.VAR) {\n            defineVar(n, grandParent);\n        } else if (parent.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n        }\n        break;\n    default:\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..98addb7d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,51 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+Node grandParent = parent.getParent();\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.LP:\n+        if (grandParent != null) {\n+            if (grandParent.getType() == Token.CALL) {\n+                handleFunctionInputs(grandParent);\n+            } else if (grandParent.getType() == Token.EXPR_RESULT) {\n+                grandParent = grandParent.getParent();\n+                if (grandParent.getType() == Token.BLOCK) {\n+                    handleFunctionInputs(grandParent.getParent());\n+                } else if (grandParent.getType() == Token.CALL) {\n+                    handleFunctionInputs(grandParent);\n+                } else if (NodeUtil.isFunctionExpression(grandParent)) {\n+                    handleFunctionInputs(parent);\n+                }\n+            } else if (grandParent.getType() == Token.ASSIGN) {\n+                handleFunctionInputs(parent);\n+            } else if (grandParent.getType() == Token.FUNCTION) {\n+                handleFunctionInputs(parent);\n+            }\n+        }\n+        break;\n+    case Token.NAME:\n+        if (parent.getType() == Token.VAR) {\n+            defineVar(n, grandParent);\n+        } else if (parent.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+        }\n+        break;\n+    default:\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}