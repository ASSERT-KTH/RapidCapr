{
    "patch": "      Node lastArg = argList.getLastChild();\n      Var var = null;\n      while (lastArg != null) {\n        var = fnScope.getVar(lastArg.getString());\n        if (var != null && !referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n        lastArg = argList.getLastChild();\n      }\n      \n      if (var == null) {\n        // There was no argument; set the parent list to null.\n        function.setSecondChild(null);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..76df6cc2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      Var var = null;\n+      while (lastArg != null) {\n+        var = fnScope.getVar(lastArg.getString());\n+        if (var != null && !referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+        lastArg = argList.getLastChild();\n+      }\n+      \n+      if (var == null) {\n+        // There was no argument; set the parent list to null.\n+        function.setSecondChild(null);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}