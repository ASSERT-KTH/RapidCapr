{
    "patch": "        if (this.equals(object)) {\n            return 0;\n        }\n        \n        int lcm = (this.denominator * object.denominator) / gcd(this.denominator, object.denominator);\n        int thisNum = this.numerator * (lcm / this.denominator);\n        int objNum = object.numerator * (lcm / object.denominator);\n\n        return (thisNum < objNum) ? -1 : ((thisNum > objNum) ? +1 : 0);\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex 0706f8c41..65f02215c 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -256,8 +256,21 @@ public class Fraction extends Number implements Comparable<Fraction> {\n      *         than <tt>object</tt>, 0 if they are equal.\n      */\n     public int compareTo(Fraction object) {\n-        double nOd = doubleValue();\n-        double dOn = object.doubleValue();\n+        if (this.equals(object)) {\n+            return 0;\n+        }\n+        \n+        int lcm = (this.denominator * object.denominator) / gcd(this.denominator, object.denominator);\n+        int thisNum = this.numerator * (lcm / this.denominator);\n+        int objNum = object.numerator * (lcm / object.denominator);\n+\n+        return (thisNum < objNum) ? -1 : ((thisNum > objNum) ? +1 : 0);\n+    }\n+\n+    private int gcd(int a, int b) {\n+        if (b == 0)\n+            return a;\n+        return gcd(b, a % b);\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}