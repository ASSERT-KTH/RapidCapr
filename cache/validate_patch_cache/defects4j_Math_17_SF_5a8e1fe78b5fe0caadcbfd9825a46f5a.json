{
    "patch": "public Dfp multiply(final int x) {\n    final DfpField field = getField();\n    final Dfp r = field.newDfp();\n    final int[] product = field.getMultiplicationTable().multiplyByInteger(getMantissa(), x);\n    r.sign = sign == 1 ? 1 : -1;\n    r.exp = exp;\n    r.mant = product;\n    if (isNaN()) {\n        r.mant = field.getZero();\n        r.sign = 0;\n    }\n    return r;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..9a1069478 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,19 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n-    }\n+public Dfp multiply(final int x) {\n+    final DfpField field = getField();\n+    final Dfp r = field.newDfp();\n+    final int[] product = field.getMultiplicationTable().multiplyByInteger(getMantissa(), x);\n+    r.sign = sign == 1 ? 1 : -1;\n+    r.exp = exp;\n+    r.mant = product;\n+    if (isNaN()) {\n+        r.mant = field.getZero();\n+        r.sign = 0;\n+    }\n+    return r;\n+}\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}