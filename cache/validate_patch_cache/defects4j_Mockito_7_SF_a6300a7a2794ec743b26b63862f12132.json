{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable && !type.equals(typeVariable)) {\n            readTypeVariableBounds((TypeVariable<?>) type);\n        } else if (type instanceof ParameterizedType) {\n            for (Type argType : ((ParameterizedType) type).getActualTypeArguments()) {\n                if (argType instanceof TypeVariable && !argType.equals(typeVariable)) {\n                    readTypeVariableBounds((TypeVariable<?>) argType);\n                }\n            }\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n        readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n    }\n}\n\nprivate void readTypeVariableBounds(TypeVariable<?> variable) {\n    for (Type type : variable.getBounds()) {\n        if (type instanceof TypeVariable && !type.equals(variable)) {\n            readTypeVariableBounds((TypeVariable<?>) type);\n        } else if (type instanceof ParameterizedType) {\n            for (Type argType : ((ParameterizedType) type).getActualTypeArguments()) {\n                if (argType instanceof TypeVariable && !argType.equals(typeVariable)) {\n                    readTypeVariableBounds((TypeVariable<?>) argType);\n                }\n            }\n        } else if (!(type instanceof WildcardType)) {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c205a3e3c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,45 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable && !type.equals(typeVariable)) {\n+            readTypeVariableBounds((TypeVariable<?>) type);\n+        } else if (type instanceof ParameterizedType) {\n+            for (Type argType : ((ParameterizedType) type).getActualTypeArguments()) {\n+                if (argType instanceof TypeVariable && !argType.equals(typeVariable)) {\n+                    readTypeVariableBounds((TypeVariable<?>) argType);\n+                }\n+            }\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n+        readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n+    }\n+}\n+\n+private void readTypeVariableBounds(TypeVariable<?> variable) {\n+    for (Type type : variable.getBounds()) {\n+        if (type instanceof TypeVariable && !type.equals(variable)) {\n+            readTypeVariableBounds((TypeVariable<?>) type);\n+        } else if (type instanceof ParameterizedType) {\n+            for (Type argType : ((ParameterizedType) type).getActualTypeArguments()) {\n+                if (argType instanceof TypeVariable && !argType.equals(typeVariable)) {\n+                    readTypeVariableBounds((TypeVariable<?>) argType);\n+                }\n+            }\n+        } else if (!(type instanceof WildcardType)) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.reflect.TypeVariable",
    "test_result": "FAIL"
}