{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // handle cases where yMin or yMax is close to zero\n        if (Math.abs(yMin) < 1e-15) {\n            return min;\n        }\n        if (Math.abs(yMax) < 1e-15) {\n            return max;\n        }\n        \n        // check if endpoints bracket the root\n        if (yMin * yMax > 0) {\n            throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n        \n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n        \n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..01479e704 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,7 +122,7 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException, \n         FunctionEvaluationException {\n         \n         clearResult();\n@@ -133,21 +133,26 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         double yMin = f.value(min);\n         double yMax = f.value(max);\n         \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n+        // handle cases where yMin or yMax is close to zero\n+        if (Math.abs(yMin) < 1e-15) {\n+            return min;\n+        }\n+        if (Math.abs(yMax) < 1e-15) {\n+            return max;\n+        }\n+        \n+        // check if endpoints bracket the root\n+        if (yMin * yMax > 0) {\n+            throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n         }\n-\n+        \n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n+        // either min or max is a root\n+        \n         return ret;\n     }\n         ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}