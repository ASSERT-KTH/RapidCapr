{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if(a <= 0 || x < 0)\n        throw new IllegalArgumentException(\"Invalid arguments for regularized gamma function.\");\n    double gamma = specialGamma(a);\n    double lowerIncompleteGamma = lowerIncompleteGamma(a, x);\n    return lowerIncompleteGamma / gamma;\n}\n\npublic static double specialGamma(double x) {\n    if(x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for special gamma function.\");\n    }\n    if(x == 0) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if(x == 1 || x == 2) {\n        return 1;\n    }\n    double result = 1;\n    while(x > 2) {\n        x--;\n        result *= x;\n    }\n    return result;\n}\n\npublic static double lowerIncompleteGamma(double a, double x) {\n    double epsilon = 0.00000000000001;\n    double result = 0;\n    double term = 1;\n    int n = 1;\n    while(Math.abs(term) >= epsilon) {\n        term *= x / (a + n);\n        result += term;\n        n++;\n    }\n    return result * Math.exp(-x) * Math.pow(x, a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..2c411722f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,44 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if(a <= 0 || x < 0)\n+        throw new IllegalArgumentException(\"Invalid arguments for regularized gamma function.\");\n+    double gamma = specialGamma(a);\n+    double lowerIncompleteGamma = lowerIncompleteGamma(a, x);\n+    return lowerIncompleteGamma / gamma;\n+}\n+\n+public static double specialGamma(double x) {\n+    if(x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for special gamma function.\");\n+    }\n+    if(x == 0) {\n+        return Double.POSITIVE_INFINITY;\n+    }\n+    if(x == 1 || x == 2) {\n+        return 1;\n+    }\n+    double result = 1;\n+    while(x > 2) {\n+        x--;\n+        result *= x;\n+    }\n+    return result;\n+}\n+\n+public static double lowerIncompleteGamma(double a, double x) {\n+    double epsilon = 0.00000000000001;\n+    double result = 0;\n+    double term = 1;\n+    int n = 1;\n+    while(Math.abs(term) >= epsilon) {\n+        term *= x / (a + n);\n+        result += term;\n+        n++;\n+    }\n+    return result * Math.exp(-x) * Math.pow(x, a);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}