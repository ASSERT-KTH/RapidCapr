{
    "patch": "private static final int[][] fields = {\n        { Calendar.MILLISECOND },\n        { Calendar.SECOND },\n        { Calendar.MINUTE },\n        { Calendar.HOUR_OF_DAY, Calendar.HOUR },\n        { Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM\n                /** not used for rounding */, Calendar.YEAR, Calendar.ERA }};\n\nprivate static final int[][] fieldsForRounding = {\n        { Calendar.MILLISECOND },\n        { Calendar.SECOND },\n        { Calendar.MINUTE },\n        { Calendar.HOUR_OF_DAY, Calendar.HOUR }};\n\nprivate static void truncate(Calendar date, int field) {\n    for (int[] fieldsForTruncating : fields) {\n        boolean found = false;\n        for (int j = 0; j < fieldsForTruncating.length; j++) {\n            if (fieldsForTruncating[j] == field) {\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            continue;\n        }\n\n        // Reset the lower fields\n        for (int j = 0; j < fieldsForTruncating.length; j++) {\n            int f = fieldsForTruncating[j];\n            if (f == Calendar.AM_PM) {\n                continue;\n            }\n\n            date.set(f, f == Calendar.MONTH ? date.getActualMinimum(Calendar.MONTH) : 0);\n        }\n\n        // Calculate the rounded value of this field\n        int val = date.get(field);\n        int idx = -1;\n        for (int j = 0; j < fieldsForRounding.length; j++) {\n            int[] roundingFields = fieldsForRounding[j];\n            boolean useRoundField = false;\n            for (int k = 0; k < roundingFields.length; k++) {\n                if (roundingFields[k] == field) {\n                    useRoundField = true;\n                    break;\n                }\n            }\n\n            if (useRoundField) {\n                idx = j;\n                break;\n            }\n        }\n\n        if (idx != -1 && val >= 0) {\n            final int max = date.getActualMaximum(field);\n            int nextVal = val + 1;\n            if (nextVal <= max) {\n                // We have a next value. Calculate the round value\n                Calendar cal2 = (Calendar) date.clone();\n                cal2.set(field, nextVal);\n                for (int j = 0; j < fieldsForRounding[idx].length; j++) {\n                    int f = fieldsForRounding[idx][j];\n                    if (f == field || f == Calendar.AM_PM) {\n                        continue;\n                    }\n\n                    cal2.set(f, f == Calendar.MONTH ? cal2.getActualMinimum(Calendar.MONTH) : 0);\n                }\n\n                // If the difference is less than half way, round down\n                long diff = date.getTimeInMillis() - cal2.getTimeInMillis();\n                if (diff < ((long) (max - val) / 2 * date.getActualMaximum(Calendar.MILLISECOND))) {\n                    date.set(field, nextVal);\n                }\n            }\n        }\n\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..70f9c2df 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,101 +616,90 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+private static final int[][] fields = {\n+        { Calendar.MILLISECOND },\n+        { Calendar.SECOND },\n+        { Calendar.MINUTE },\n+        { Calendar.HOUR_OF_DAY, Calendar.HOUR },\n+        { Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM\n+                /** not used for rounding */, Calendar.YEAR, Calendar.ERA }};\n+\n+private static final int[][] fieldsForRounding = {\n+        { Calendar.MILLISECOND },\n+        { Calendar.SECOND },\n+        { Calendar.MINUTE },\n+        { Calendar.HOUR_OF_DAY, Calendar.HOUR }};\n+\n+private static void truncate(Calendar date, int field) {\n+    for (int[] fieldsForTruncating : fields) {\n+        boolean found = false;\n+        for (int j = 0; j < fieldsForTruncating.length; j++) {\n+            if (fieldsForTruncating[j] == field) {\n+                found = true;\n+                break;\n+            }\n         }\n-        \n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n-                }\n+        if (!found) {\n+            continue;\n+        }\n+\n+        // Reset the lower fields\n+        for (int j = 0; j < fieldsForTruncating.length; j++) {\n+            int f = fieldsForTruncating[j];\n+            if (f == Calendar.AM_PM) {\n+                continue;\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n+\n+            date.set(f, f == Calendar.MONTH ? date.getActualMinimum(Calendar.MONTH) : 0);\n+        }\n+\n+        // Calculate the rounded value of this field\n+        int val = date.get(field);\n+        int idx = -1;\n+        for (int j = 0; j < fieldsForRounding.length; j++) {\n+            int[] roundingFields = fieldsForRounding[j];\n+            boolean useRoundField = false;\n+            for (int k = 0; k < roundingFields.length; k++) {\n+                if (roundingFields[k] == field) {\n+                    useRoundField = true;\n                     break;\n+                }\n+            }\n+\n+            if (useRoundField) {\n+                idx = j;\n+                break;\n             }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n+        }\n+\n+        if (idx != -1 && val >= 0) {\n+            final int max = date.getActualMaximum(field);\n+            int nextVal = val + 1;\n+            if (nextVal <= max) {\n+                // We have a next value. Calculate the round value\n+                Calendar cal2 = (Calendar) date.clone();\n+                cal2.set(field, nextVal);\n+                for (int j = 0; j < fieldsForRounding[idx].length; j++) {\n+                    int f = fieldsForRounding[idx][j];\n+                    if (f == field || f == Calendar.AM_PM) {\n+                        continue;\n+                    }\n+\n+                    cal2.set(f, f == Calendar.MONTH ? cal2.getActualMinimum(Calendar.MONTH) : 0);\n+                }\n+\n+                // If the difference is less than half way, round down\n+                long diff = date.getTimeInMillis() - cal2.getTimeInMillis();\n+                if (diff < ((long) (max - val) / 2 * date.getActualMaximum(Calendar.MILLISECOND))) {\n+                    date.set(field, nextVal);\n+                }\n             }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n+        break;\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}