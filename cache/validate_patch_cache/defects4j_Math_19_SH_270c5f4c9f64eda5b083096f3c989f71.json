{
    "patch": "        if (boundaries != null) {\n            boolean allFiniteBounds = true;\n            for (int i = 0; i < lB.length; i++) {\n                if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n                    allFiniteBounds = false;\n                    break;\n                }\n            }\n            if (allFiniteBounds && Arrays.stream(uB).map(x -> x-lB[0]).anyMatch(x -> Double.isInfinite(x))) {\n                throw new NumberIsTooLargeException(uB[0] - lB[0], 0, true);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..939ae4cb2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,18 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+        if (boundaries != null) {\n+            boolean allFiniteBounds = true;\n+            for (int i = 0; i < lB.length; i++) {\n+                if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+                    allFiniteBounds = false;\n+                    break;\n+                }\n+            }\n+            if (allFiniteBounds && Arrays.stream(uB).map(x -> x-lB[0]).anyMatch(x -> Double.isInfinite(x))) {\n+                throw new NumberIsTooLargeException(uB[0] - lB[0], 0, true);\n+            }\n+        }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}