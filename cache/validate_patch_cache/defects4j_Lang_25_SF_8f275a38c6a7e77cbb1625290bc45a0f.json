{
    "patch": "public static String unescape(String str) {\n    StringBuilder result = new StringBuilder(str.length());\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        switch (c) {\n            case '\\\\':\n                if (++i < str.length()) {\n                    char nextChar = str.charAt(i);\n                    switch (nextChar) {\n                        case '\\\\':\n                            c = '\\\\';\n                            break;\n                        case 'n':\n                            c = '\\n';\n                            break;\n                        case 'r':\n                            c = '\\r';\n                            break;\n                        case 't':\n                            c = '\\t';\n                            break;\n                        case 'f':\n                            c = '\\f';\n                            break;\n                        case 'b':\n                            c = '\\b';\n                            break;\n                        case '\\\"':\n                            c = '\\\"';\n                            break;\n                        default:\n                            // Handle UNICODE escape sequence.\n                            if (nextChar == 'u') {\n                                if (i + 4 < str.length()) {\n                                    String unicodeStr = str.substring(i + 1, i + 5);\n                                    try {\n                                        c = (char) Integer.parseInt(unicodeStr, 16);\n                                        i += 4;\n                                    } catch (NumberFormatException e) {\n                                        throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicodeStr, e);\n                                    }\n                                } else {\n                                    throw new IllegalArgumentException(\"Invalid unicode sequence: \" + str.substring(i));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\"Unsupported escape sequence: \\\\\" + nextChar);\n                            }\n                            break;\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Invalid input string: \" + str);\n                }\n                break;\n        }\n        result.append(c);\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..0ec9c432 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,64 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    StringBuilder result = new StringBuilder(str.length());\n+    for (int i = 0; i < str.length(); i++) {\n+        char c = str.charAt(i);\n+        switch (c) {\n+            case '\\\\':\n+                if (++i < str.length()) {\n+                    char nextChar = str.charAt(i);\n+                    switch (nextChar) {\n+                        case '\\\\':\n+                            c = '\\\\';\n+                            break;\n+                        case 'n':\n+                            c = '\\n';\n+                            break;\n+                        case 'r':\n+                            c = '\\r';\n+                            break;\n+                        case 't':\n+                            c = '\\t';\n+                            break;\n+                        case 'f':\n+                            c = '\\f';\n+                            break;\n+                        case 'b':\n+                            c = '\\b';\n+                            break;\n+                        case '\\\"':\n+                            c = '\\\"';\n+                            break;\n+                        default:\n+                            // Handle UNICODE escape sequence.\n+                            if (nextChar == 'u') {\n+                                if (i + 4 < str.length()) {\n+                                    String unicodeStr = str.substring(i + 1, i + 5);\n+                                    try {\n+                                        c = (char) Integer.parseInt(unicodeStr, 16);\n+                                        i += 4;\n+                                    } catch (NumberFormatException e) {\n+                                        throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicodeStr, e);\n+                                    }\n+                                } else {\n+                                    throw new IllegalArgumentException(\"Invalid unicode sequence: \" + str.substring(i));\n+                                }\n+                            } else {\n+                                throw new IllegalArgumentException(\"Unsupported escape sequence: \\\\\" + nextChar);\n+                            }\n+                            break;\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid input string: \" + str);\n+                }\n+                break;\n+        }\n+        result.append(c);\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}