{
    "patch": "                if (millis == Long.MIN_VALUE) {\n                    throw new IllegalFieldValueException(savedFields[i].iField.getType(), \n                        savedFields[i].getValue(), savedFields[i].getName() + \" is too large or too small\");\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n>>> [ INFILL ] <<<",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9f0e6f0c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,13 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (millis == Long.MIN_VALUE) {\n+                    throw new IllegalFieldValueException(savedFields[i].iField.getType(), \n+                        savedFields[i].getValue(), savedFields[i].getName() + \" is too large or too small\");\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+>>> [ INFILL ] <<<\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}