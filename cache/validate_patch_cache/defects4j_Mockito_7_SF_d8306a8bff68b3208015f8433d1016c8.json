{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        if (bounds.length == 0) {\n            return;\n        }\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable) {\n                readTypeVariablesOn(bound);\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n}\n\nprivate void readTypeVariablesOn(Type type) {\n    if (type instanceof TypeVariable) {\n        TypeVariable<?> variable = (TypeVariable<?>) type;\n        readTypeVariablesOn(variable.getBounds()[0]);\n    } else if (type instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n        for (Type argument : actualTypeArguments) {\n            readTypeVariablesOn(argument);\n        }\n    } else if (type instanceof WildcardType) {\n        Type[] upperBounds = ((WildcardType) type).getUpperBounds();\n        if (upperBounds.length == 0) {\n            registerTypeVariablesOn(Object.class);\n        } else {\n            readTypeVariablesOn(upperBounds[0]);\n        }\n    } else {\n        registerTypeVariablesOn(type);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..016266a16 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,47 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        if (bounds.length == 0) {\n+            return;\n+        }\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable) {\n+                readTypeVariablesOn(bound);\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOn(Type type) {\n+    if (type instanceof TypeVariable) {\n+        TypeVariable<?> variable = (TypeVariable<?>) type;\n+        readTypeVariablesOn(variable.getBounds()[0]);\n+    } else if (type instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n+        for (Type argument : actualTypeArguments) {\n+            readTypeVariablesOn(argument);\n+        }\n+    } else if (type instanceof WildcardType) {\n+        Type[] upperBounds = ((WildcardType) type).getUpperBounds();\n+        if (upperBounds.length == 0) {\n+            registerTypeVariablesOn(Object.class);\n+        } else {\n+            readTypeVariablesOn(upperBounds[0]);\n+        }\n+    } else {\n+        registerTypeVariablesOn(type);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}