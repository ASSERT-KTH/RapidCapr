{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition eig = new EigenDecomposition(m);\n    RealMatrix evecs = eig.getV();\n    RealMatrix evals = eig.getD();\n    for (int i = 0; i < evals.getRowDimension(); i++) {\n        evals.setEntry(i, i, FastMath.sqrt(evals.getEntry(i, i)));\n    }\n    RealMatrix evecsInv = new LUDecomposition(evecs).getSolver().getInverse();\n    RealMatrix sqrt = evecs.multiply(evals).multiply(evecsInv);\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9e7da85af 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition eig = new EigenDecomposition(m);\n+    RealMatrix evecs = eig.getV();\n+    RealMatrix evals = eig.getD();\n+    for (int i = 0; i < evals.getRowDimension(); i++) {\n+        evals.setEntry(i, i, FastMath.sqrt(evals.getEntry(i, i)));\n     }\n+    RealMatrix evecsInv = new LUDecomposition(evecs).getSolver().getInverse();\n+    RealMatrix sqrt = evecs.multiply(evals).multiply(evecsInv);\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}