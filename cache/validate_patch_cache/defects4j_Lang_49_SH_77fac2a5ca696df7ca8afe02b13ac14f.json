{
    "patch": "    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof Fraction)) {\n            return false;\n        }\n        Fraction other = (Fraction) obj;\n        int thisGcd = greatestCommonDivisor(this.numerator, this.denominator);\n        int otherGcd = greatestCommonDivisor(other.numerator, other.denominator);\n        return (this.numerator / thisGcd) == (other.numerator / otherGcd)\n                && (this.denominator / thisGcd) == (other.denominator / otherGcd);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..b5851267 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,20 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!(obj instanceof Fraction)) {\n+            return false;\n+        }\n+        Fraction other = (Fraction) obj;\n+        int thisGcd = greatestCommonDivisor(this.numerator, this.denominator);\n+        int otherGcd = greatestCommonDivisor(other.numerator, other.denominator);\n+        return (this.numerator / thisGcd) == (other.numerator / otherGcd)\n+                && (this.denominator / thisGcd) == (other.denominator / otherGcd);\n+    }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: annotations are not supported in -source 1.3",
    "test_result": "ERROR"
}