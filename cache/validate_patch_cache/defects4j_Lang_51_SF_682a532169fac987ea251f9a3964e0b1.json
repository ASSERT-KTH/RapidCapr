{
    "patch": " public static boolean toBoolean(String str) {\n        if (str == null) {\n            return false;\n        }\n        str = str.trim().toLowerCase();",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/BooleanUtils.java b/src/java/org/apache/commons/lang/BooleanUtils.java\nindex 3fda4ecc..ee76d114 100644\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -646,58 +646,11 @@ public class BooleanUtils {\n      * @param str  the String to check\n      * @return the boolean value of the string, <code>false</code> if no match\n      */\n-    public static boolean toBoolean(String str) {\n-        // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n-        // Non interned 'true' matched 15 times slower.\n-        // \n-        // Optimisation provides same performance as before for interned 'true'.\n-        // Similar performance for null, 'false', and other strings not length 2/3/4.\n-        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n-        if (str == \"true\") {\n-            return true;\n-        }\n+ public static boolean toBoolean(String str) {\n         if (str == null) {\n             return false;\n         }\n-        switch (str.length()) {\n-            case 2: {\n-                char ch0 = str.charAt(0);\n-                char ch1 = str.charAt(1);\n-                return \n-                    (ch0 == 'o' || ch0 == 'O') &&\n-                    (ch1 == 'n' || ch1 == 'N');\n-            }\n-            case 3: {\n-                char ch = str.charAt(0);\n-                if (ch == 'y') {\n-                    return \n-                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n-                        (str.charAt(2) == 's' || str.charAt(2) == 'S');\n-                }\n-                if (ch == 'Y') {\n-                    return \n-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n-                }\n-            }\n-            case 4: {\n-                char ch = str.charAt(0);\n-                if (ch == 't') {\n-                    return \n-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n-                }\n-                if (ch == 'T') {\n-                    return \n-                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n-                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n-                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n-                }\n-            }\n-        }\n-        return false;\n-    }\n+        str = str.trim().toLowerCase();\n     \n //    public static void main(String[] args) {\n //        long start = System.currentTimeMillis();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}