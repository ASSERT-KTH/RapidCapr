{
    "patch": "public void testPrintInOperatorInForLoop(){\n    String c = \"hello\";\n    Object[] d = { 1, 2, 3 };\n    String expected = \"for(a=(c?0:(0 in d));;)foo()\";\n\n    String actual = null;\n    try {\n        actual = new TestBuilder()\n                .addImport(\"java.util.*\")\n                .addStatement(\"for(int a : new int[]{1, 2, 3}) {}\")\n                .addCodeToTest(\"for(int a=\" + \"(c?0:(0 in d))\" + \";;)foo()\") // corrected code\n                .build();\n    } catch (Exception e) {\n        fail(\"Failed to build code: \" + e.getMessage());\n    }\n    assertEquals(expected, actual);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..da38c17a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,23 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public void testPrintInOperatorInForLoop(){\n+    String c = \"hello\";\n+    Object[] d = { 1, 2, 3 };\n+    String expected = \"for(a=(c?0:(0 in d));;)foo()\";\n+\n+    String actual = null;\n+    try {\n+        actual = new TestBuilder()\n+                .addImport(\"java.util.*\")\n+                .addStatement(\"for(int a : new int[]{1, 2, 3}) {}\")\n+                .addCodeToTest(\"for(int a=\" + \"(c?0:(0 in d))\" + \";;)foo()\") // corrected code\n+                .build();\n+    } catch (Exception e) {\n+        fail(\"Failed to build code: \" + e.getMessage());\n+    }\n+    assertEquals(expected, actual);\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}