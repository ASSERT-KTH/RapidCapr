{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n\n    boolean hasPrinter = false;\n    boolean hasParser = false;\n\n    for (Object pair : elementPairs) {\n        if (pair instanceof PeriodPrinter) {\n            hasPrinter = true;\n        }\n        if (pair instanceof PeriodParser) {\n            hasParser = true;\n        }\n    }\n\n    if (!hasPrinter && !notPrinter) {\n        throw new IllegalArgumentException(\"Builder has created neither a printer nor a parser for \" + elementPairs);\n    }\n\n    if (!hasParser && !notParser) {\n        throw new IllegalArgumentException(\"Builder has created neither a printer nor a parser for \" + elementPairs);\n    }\n\n    if (hasPrinter && hasParser) {\n        Object[] comp = createComposite(elementPairs);\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n\n    Separator sep = null;\n    List<Object> subPairs = new ArrayList<>(elementPairs.size() - 1);\n\n    for (Object pair : elementPairs) {\n        if (pair instanceof Separator) {\n            if (sep == null) {\n                sep = (Separator) pair;\n            } else {\n                subPairs.add(pair);\n            }\n        } else {\n            subPairs.add(pair);\n        }\n    }\n\n    subPairs = Collections.unmodifiableList(subPairs);\n\n    if (hasPrinter) {\n        PeriodFormatter subFormatter = toFormatter(subPairs, false, notParser);\n        return new PeriodFormatter(new CompositePrinter((PeriodPrinter) subFormatter.getPrinter(), sep), subFormatter.getParser());\n    } else {\n        PeriodFormatter subFormatter = toFormatter(subPairs, notPrinter, false);\n        return new PeriodFormatter(subFormatter.getPrinter(), new CompositeParser((PeriodParser) subFormatter.getParser(), sep));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e4b49394 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,75 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    }\n+\n+    boolean hasPrinter = false;\n+    boolean hasParser = false;\n+\n+    for (Object pair : elementPairs) {\n+        if (pair instanceof PeriodPrinter) {\n+            hasPrinter = true;\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+        if (pair instanceof PeriodParser) {\n+            hasParser = true;\n         }\n+    }\n+\n+    if (!hasPrinter && !notPrinter) {\n+        throw new IllegalArgumentException(\"Builder has created neither a printer nor a parser for \" + elementPairs);\n+    }\n+\n+    if (!hasParser && !notParser) {\n+        throw new IllegalArgumentException(\"Builder has created neither a printer nor a parser for \" + elementPairs);\n+    }\n+\n+    if (hasPrinter && hasParser) {\n         Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+\n+    Separator sep = null;\n+    List<Object> subPairs = new ArrayList<>(elementPairs.size() - 1);\n+\n+    for (Object pair : elementPairs) {\n+        if (pair instanceof Separator) {\n+            if (sep == null) {\n+                sep = (Separator) pair;\n+            } else {\n+                subPairs.add(pair);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            subPairs.add(pair);\n         }\n     }\n \n+    subPairs = Collections.unmodifiableList(subPairs);\n+\n+    if (hasPrinter) {\n+        PeriodFormatter subFormatter = toFormatter(subPairs, false, notParser);\n+        return new PeriodFormatter(new CompositePrinter((PeriodPrinter) subFormatter.getPrinter(), sep), subFormatter.getParser());\n+    } else {\n+        PeriodFormatter subFormatter = toFormatter(subPairs, notPrinter, false);\n+        return new PeriodFormatter(subFormatter.getPrinter(), new CompositeParser((PeriodParser) subFormatter.getParser(), sep));\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}