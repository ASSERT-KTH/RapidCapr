{
    "patch": "NodeTraversal.Callback renamingCallback =\n          new NodeTraversal.AbstractPreOrderCallback() {\n            @Override\n            public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n              if (n.isBlock() && n.getParent().isCatch()) {\n                try {\n                  typeSystem.invalidateCatchType(n.getParent());\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              } else if ((n.isVar() || n.isFunction()) && !NodeUtil.isFor(parent)) {\n                // We'll do all our renaming and property gathering in a second pass.\n                gatherAllPropertiesCallback.addDeclaredProperties(n, getScope());\n              }\n              return true;\n            }\n          };",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..21975da7 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,23 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+NodeTraversal.Callback renamingCallback =\n+          new NodeTraversal.AbstractPreOrderCallback() {\n+            @Override\n+            public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+              if (n.isBlock() && n.getParent().isCatch()) {\n+                try {\n+                  typeSystem.invalidateCatchType(n.getParent());\n+                } catch (Exception e) {\n+                  throw new RuntimeException(e);\n+                }\n+              } else if ((n.isVar() || n.isFunction()) && !NodeUtil.isFor(parent)) {\n+                // We'll do all our renaming and property gathering in a second pass.\n+                gatherAllPropertiesCallback.addDeclaredProperties(n, getScope());\n+              }\n+              return true;\n+            }\n+          };\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}