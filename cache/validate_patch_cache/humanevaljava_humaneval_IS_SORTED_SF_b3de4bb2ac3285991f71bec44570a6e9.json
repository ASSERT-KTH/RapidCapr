{
    "patch": "public static boolean is_sorted(int[] lst) {\n    if (lst == null || lst.length < 2) {\n        return true;\n    }\n\n    boolean isAscending = true;\n    boolean hasTriplets = false;\n    int[] count = new int[lst.length];\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < lst[i - 1]) {\n            isAscending = false;\n            break;\n        } else if (lst[i] == lst[i - 1]) {\n            count[i] = count[i - 1] + 1;\n            if (count[i] == 3) {\n                hasTriplets = true;\n                break;\n            }\n        }\n    }\n\n    return isAscending && !hasTriplets;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/IS_SORTED.java b/src/main/java/humaneval/buggy/IS_SORTED.java\nindex 173398c..fe0e12e 100644\n--- a/src/main/java/humaneval/buggy/IS_SORTED.java\n+++ b/src/main/java/humaneval/buggy/IS_SORTED.java\n@@ -19,20 +19,27 @@ import java.util.HashMap;\n  */\n \n public class IS_SORTED {\n-    public static boolean is_sorted(int[] lst) {\n-        HashMap<Integer, Integer> count_num = new HashMap<>();\n-        for(int i = 0; i < lst.length; i++) {\n-            count_num.put(lst[i], 0);\n-        }\n-        for(int i = 0; i < lst.length; i++) {\n-            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n-        }\n-        for(int i = 0; i < lst.length; i++) {\n-            if(count_num.get(lst[i]) > 2) return false;\n-        }\n-        for(int i = 0; i < lst.length - 1; i++) {\n-            if(lst[i] <= lst[i + 1]) return false;\n-        }\n+public static boolean is_sorted(int[] lst) {\n+    if (lst == null || lst.length < 2) {\n         return true;\n     }\n+\n+    boolean isAscending = true;\n+    boolean hasTriplets = false;\n+    int[] count = new int[lst.length];\n+    for (int i = 1; i < lst.length; i++) {\n+        if (lst[i] < lst[i - 1]) {\n+            isAscending = false;\n+            break;\n+        } else if (lst[i] == lst[i - 1]) {\n+            count[i] = count[i - 1] + 1;\n+            if (count[i] == 3) {\n+                hasTriplets = true;\n+                break;\n+            }\n+        }\n+    }\n+\n+    return isAscending && !hasTriplets;\n+}\n }",
    "result_reason": "   TEST_IS_SORTED.test_10:57 expected:<false> but was:<true>",
    "test_result": "FAIL"
}