{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        if (bound instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType) bound).getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeParameters[i] == typeVariable && actualTypeArguments.length > i) {\n                    registerTypeVariablesOn(actualTypeArguments[i]);\n                    break;\n                }\n            }\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1c1a95b73 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        if (bound instanceof ParameterizedType) {\n+            Type[] actualTypeArguments = ((ParameterizedType) bound).getActualTypeArguments();\n+            TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeParameters[i] == typeVariable && actualTypeArguments.length > i) {\n+                    registerTypeVariablesOn(actualTypeArguments[i]);\n+                    break;\n+                }\n+            }\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}