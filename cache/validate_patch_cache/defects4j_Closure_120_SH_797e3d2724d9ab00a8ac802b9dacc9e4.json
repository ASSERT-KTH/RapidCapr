{
    "patch": "      int countAssignments = 0;\n      int size = references.size();\n      for (int i = 0; i < size; i++) {\n        if (references.get(i).isMutableAssignment()) {\n          countAssignments++;\n          if (countAssignments > 1) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a5d282ec 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int countAssignments = 0;\n+      int size = references.size();\n+      for (int i = 0; i < size; i++) {\n+        if (references.get(i).isMutableAssignment()) {\n+          countAssignments++;\n+          if (countAssignments > 1) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}