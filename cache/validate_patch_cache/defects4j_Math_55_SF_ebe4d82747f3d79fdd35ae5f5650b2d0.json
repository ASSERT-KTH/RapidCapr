{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double vx = v1.y * v2.z - v1.z * v2.y;\n      final double vy = v1.z * v2.x - v1.x * v2.z;\n      final double vz = v1.x * v2.y - v1.y * v2.x;\n\n      final double normVxVy = FastMath.hypot(vx, vy);\n      if (normVxVy == 0.0) {\n          return new Vector3D(0.0, 0.0, 0.0);\n      }\n\n      final double invDenom = 1.0 / FastMath.hypot(normVxVy, vz);\n\n      return new Vector3D(invDenom * vx, invDenom * vy, invDenom * vz);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..bb335f826 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,21 +456,18 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double vx = v1.y * v2.z - v1.z * v2.y;\n+      final double vy = v1.z * v2.x - v1.x * v2.z;\n+      final double vz = v1.x * v2.y - v1.y * v2.x;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      final double normVxVy = FastMath.hypot(vx, vy);\n+      if (normVxVy == 0.0) {\n+          return new Vector3D(0.0, 0.0, 0.0);\n+      }\n \n+      final double invDenom = 1.0 / FastMath.hypot(normVxVy, vz);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      return new Vector3D(invDenom * vx, invDenom * vy, invDenom * vz);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<1.5707963267948968>",
    "test_result": "FAIL"
}