{
    "patch": "for (int i = 0; i < input.length(); i++) {\n    char c = input.charAt(i);\n    if (c == ESCAPE_CHAR) {\n        if (++i < input.length()) {\n            char escaped = input.charAt(i);\n            if (ESCAPE_CODES.indexOf(escaped) >= 0) {\n                tmp.append(escaped);\n            } else if (escaped == UNICODE_ESCAPE) {\n                int remaining = input.length() - i - 1;\n                if (remaining >= UNICODE_LEN) {\n                    // Expressed in hexadecimal\n                    char tmpChar = 0;\n                    boolean error = false;\n                    for (int j = 0; j < UNICODE_LEN; j++) {\n                        char ch = input.charAt(++i);\n                        tmpChar <<= 4;\n                        if (ch >= '0' && ch <= '9') {\n                            tmpChar += (ch - '0');\n                        } else if (ch >= 'a' && ch <= 'f') {\n                            tmpChar += (ch - 'a' + 10);\n                        } else if (ch >= 'A' && ch <= 'F') {\n//*[@6_2]\n                            tmpChar += (ch - 'A' + 10); \n//@6_2= was '+='\n                        } else {\n                            error = true;\n                            break;\n                        }\n                    }\n                    if (!error) {\n                        tmp.append(tmpChar);\n                    } else {\n                        throw new IllegalArgumentException(\n                                \"Unable to parse unicode value: \\\\u\"\n                                        + input.substring(i - UNICODE_LEN - 1, i + 1));\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Less than 4 digits in unicode escape sequence: '\\\\u\"\n                            + input.substring(i, Math.min(i + remaining, input.length())) + \"'\");\n                }\n            } else {\n                throw new IllegalArgumentException(\"Illegal escape sequence: '\\\\\" + escaped + \"'\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Escape found at end of input string\");\n        }\n    } else {\n        tmp.append(c);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}