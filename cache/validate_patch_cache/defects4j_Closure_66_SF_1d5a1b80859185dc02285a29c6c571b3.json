{
    "patch": "public static double getTypedPercent(String json) {\n    double totalCount = 0.0;\n    double typedCount = 0.0;\n\n    try {\n        JSONParser jsonParser = new JSONParser();\n        JSONObject jsonObject = (JSONObject) jsonParser.parse(json);\n        JSONArray array = (JSONArray) jsonObject.get(\"data\");\n\n        for (Object obj : array) {\n            totalCount++;\n            JSONObject dataObject = (JSONObject) obj;\n            if (dataObject.get(\"type\") != null && !dataObject.get(\"type\").toString().isEmpty()) {\n                typedCount++;\n            }\n        }\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n\n    if (totalCount == 0) {\n        return 0.0;\n    } else {\n        return (typedCount / totalCount) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c36d3a5d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    double totalCount = 0.0;\n+    double typedCount = 0.0;\n+\n+    try {\n+        JSONParser jsonParser = new JSONParser();\n+        JSONObject jsonObject = (JSONObject) jsonParser.parse(json);\n+        JSONArray array = (JSONArray) jsonObject.get(\"data\");\n+\n+        for (Object obj : array) {\n+            totalCount++;\n+            JSONObject dataObject = (JSONObject) obj;\n+            if (dataObject.get(\"type\") != null && !dataObject.get(\"type\").toString().isEmpty()) {\n+                typedCount++;\n+            }\n+        }\n+    } catch (ParseException e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (totalCount == 0) {\n+        return 0.0;\n+    } else {\n+        return (typedCount / totalCount) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}