{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            List<Object> sublist = elementPairs.subList(1, size);\n            while (sublist.size() >= 2 && sublist.get(0) instanceof Separator) {\n                Separator innerSep = (Separator) sublist.get(0);\n                sublist = sublist.subList(1, sublist.size());\n                PeriodFormatter innerFormatter = toFormatter(sublist, notPrinter, notParser);\n                sublist = new ArrayList<>(innerFormatter.getMutableValues());\n                sublist.remove(0);\n                innerSep = innerSep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n                sublist.add(0, innerSep);\n            }\n            PeriodFormatter innerFormatter = toFormatter(sublist, notPrinter, notParser);\n            sep = sep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n            return new PeriodFormatter(sep, sep);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..604a9f68 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,26 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            List<Object> sublist = elementPairs.subList(1, size);\n+            while (sublist.size() >= 2 && sublist.get(0) instanceof Separator) {\n+                Separator innerSep = (Separator) sublist.get(0);\n+                sublist = sublist.subList(1, sublist.size());\n+                PeriodFormatter innerFormatter = toFormatter(sublist, notPrinter, notParser);\n+                sublist = new ArrayList<>(innerFormatter.getMutableValues());\n+                sublist.remove(0);\n+                innerSep = innerSep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n+                sublist.add(0, innerSep);\n+            }\n+            PeriodFormatter innerFormatter = toFormatter(sublist, notPrinter, notParser);\n+            sep = sep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n+            return new PeriodFormatter(sep, sep);\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}