{
    "patch": "private static String fixInOperatorInForLoop(String original) {\n    String fixed = original.replaceAll(\"for\\\\(([a-zA-z]+)\\\\s*=\\\\s*([^;]+);\\\\s*([^)]+)\\\\)\", \"for($1 = fixInOperatorInForLoopHelper($2, $3);\") // replace loop var initializations\n            .replaceAll(\"function\\\\s*[a-zA-z]*\\\\(\", \"function(\"); // remove function name\n    return fixed;\n}\n   \nprivate static String fixInOperatorInForLoopHelper(String loopVarInitializer, String loopCondition) {\n    boolean inForLoopInit = false;\n    return loopVarInitializer.replaceAll(\"([^=]+)=([^=]+)\", \"$1=fixInOperatorInForLoopRHS($2, \" + inForLoopInit + \")\") // replace RHS only in loop var initializations\n            + \";\" + loopCondition;\n}\n\nprivate static int fixInOperatorInForLoopRHS(Object rhs, boolean inForLoopInit) {\n    Context rhsContext = inForLoopInit ? Context.IN_FOR_LOOP_INITIALIZER : Context.OTHER;\n    if (rhs instanceof String) {\n        return fixInOperatorInForLoopRHS((String) rhs, rhsContext);\n    }\n    return -1;\n}\n\nprivate static int fixInOperatorInForLoopRHS(String rhs, Context context) {\n    Matcher matcher = Pattern.compile(\"(^|[^a-zA-Z0-9_])\\\\s*(\\\\w+)\\\\s+in\\\\s+([\\\\S&&[^);]]+)\", Pattern.MULTILINE).matcher(rhs);\n    if (matcher.find()) {\n        String lhs = matcher.group(2);\n        String object = matcher.group(3);\n\n        int start = matcher.start(2);\n        int end = start + lhs.length();\n\n        if (context == Context.IN_FOR_LOOP_INITIALIZER) {\n            return start - 1;\n        } else {\n            return fixInOperatorInForLoopRHS(new StringBuilder(rhs).replace(start, end, \"Object.keys(\" + object + \")\").toString(), context); // fix this occurrence and recurse for others\n        }\n    } else {\n        return -1; // done\n    }\n}\n\nenum Context {\n    IN_FOR_LOOP_INITIALIZER,\n    IN_COND_EXPR,\n    OTHER;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}