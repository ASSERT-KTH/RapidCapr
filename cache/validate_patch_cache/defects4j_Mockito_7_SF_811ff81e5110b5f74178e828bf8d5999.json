{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        return;\n    }\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        return;\n    }\n    if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        TypeVariable<?>[] typeParameters = getTypeParametersFromActualTypeVariable(actualTypeVariable);\n        if (typeParameters == null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        } else {\n            int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n            if (index >= 0) {\n                Type actualTypeArgumentForParameter = ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n                readTypeVariablesOn(actualTypeArgumentForParameter);\n            }\n        }\n    } else {\n        readTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6b1ea89d3 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,35 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        return;\n+    }\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        TypeVariable<?>[] typeParameters = getTypeParametersFromActualTypeVariable(actualTypeVariable);\n+        if (typeParameters == null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        } else {\n+            int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n+            if (index >= 0) {\n+                Type actualTypeArgumentForParameter = ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n+                readTypeVariablesOn(actualTypeArgumentForParameter);\n+            }\n+        }\n+    } else {\n+        readTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}