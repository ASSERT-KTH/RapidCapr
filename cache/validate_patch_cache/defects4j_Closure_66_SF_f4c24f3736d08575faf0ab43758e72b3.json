{
    "patch": "public static double getTypedPercent(JSONArray jsonArray) {\n    int count = 0;\n    int typedCount = 0;\n    \n    for (int i = 0; i < jsonArray.length(); i++) {\n        Object current = jsonArray.get(i);\n        if (current instanceof JSONObject && ((JSONObject) current).has(\"type\")) {\n            count++;\n            String type = ((JSONObject) current).getString(\"type\").trim();\n            if (!type.isEmpty()) {\n                typedCount++;\n            }\n        }\n    }\n    \n    return count == 0 ? 0.0 : Math.round((double) typedCount / count * 1000.0) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..9d59c7a0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONArray jsonArray) {\n+    int count = 0;\n+    int typedCount = 0;\n+    \n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        Object current = jsonArray.get(i);\n+        if (current instanceof JSONObject && ((JSONObject) current).has(\"type\")) {\n+            count++;\n+            String type = ((JSONObject) current).getString(\"type\").trim();\n+            if (!type.isEmpty()) {\n+                typedCount++;\n+            }\n+        }\n+    }\n+    \n+    return count == 0 ? 0.0 : Math.round((double) typedCount / count * 1000.0) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}