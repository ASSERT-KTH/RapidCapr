{
    "patch": "public boolean canBeCalled() {\n  return isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a linked hash map to preserve the order of the properties.\n    Map<String, String> properties = new LinkedHashMap<>();\n\n    // Recursively add properties from prototype chain.\n    Set<ObjectType> visitedObjects = new HashSet<>();\n    addProperties(properties, visitedObjects, this, forAnnotations);\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : properties.keySet()) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n      sb.append(properties.get(property));\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}\n\n// Recursively add properties from prototype chain.\nprivate void addProperties(\n    Map<String, String> properties, Set<ObjectType> visitedObjects,\n    ObjectType objectType, boolean forAnnotations) {\n  if (visitedObjects.contains(objectType)) {\n    return; // Avoid infinite recursion.\n  }\n  visitedObjects.add(objectType);\n  for (String propertyName : objectType.getOwnPropertyNames()) {\n    JSType propertyType = objectType.getPropertyType(propertyName);\n    if (propertyType instanceof ObjectType) {\n      ObjectType propertyObjectType = (ObjectType) propertyType;\n      if (!propertyObjectType.isNativeObjectType()) {\n        Map<String, String> subProperties = new LinkedHashMap<>();\n        addProperties(\n            subProperties, visitedObjects, propertyObjectType, forAnnotations);\n        properties.put(propertyName, subProperties.toString());\n      } else {\n        properties.put(propertyName, propertyType.toString());\n      }\n    } else {\n      properties.put(propertyName, propertyType.toString());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..ca99443f 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,79 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+  return isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  } else if (prettyPrint) {\n+    // Don't pretty print recursively.\n+    prettyPrint = false;\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+    // Use a linked hash map to preserve the order of the properties.\n+    Map<String, String> properties = new LinkedHashMap<>();\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+    // Recursively add properties from prototype chain.\n+    Set<ObjectType> visitedObjects = new HashSet<>();\n+    addProperties(properties, visitedObjects, this, forAnnotations);\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{\");\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n+    int i = 0;\n+    for (String property : properties.keySet()) {\n+      if (i > 0) {\n+        sb.append(\", \");\n+      }\n+\n+      sb.append(property);\n+      sb.append(\": \");\n+      sb.append(properties.get(property));\n+\n+      ++i;\n+      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(\", ...\");\n+        break;\n       }\n+    }\n+\n+    sb.append(\"}\");\n \n-      sb.append(\"}\");\n+    prettyPrint = true;\n+    return sb.toString();\n+  } else {\n+    return \"{...}\";\n+  }\n+}\n \n-      prettyPrint = true;\n-      return sb.toString();\n+// Recursively add properties from prototype chain.\n+private void addProperties(\n+    Map<String, String> properties, Set<ObjectType> visitedObjects,\n+    ObjectType objectType, boolean forAnnotations) {\n+  if (visitedObjects.contains(objectType)) {\n+    return; // Avoid infinite recursion.\n+  }\n+  visitedObjects.add(objectType);\n+  for (String propertyName : objectType.getOwnPropertyNames()) {\n+    JSType propertyType = objectType.getPropertyType(propertyName);\n+    if (propertyType instanceof ObjectType) {\n+      ObjectType propertyObjectType = (ObjectType) propertyType;\n+      if (!propertyObjectType.isNativeObjectType()) {\n+        Map<String, String> subProperties = new LinkedHashMap<>();\n+        addProperties(\n+            subProperties, visitedObjects, propertyObjectType, forAnnotations);\n+        properties.put(propertyName, subProperties.toString());\n+      } else {\n+        properties.put(propertyName, propertyType.toString());\n+      }\n     } else {\n-      return \"{...}\";\n+      properties.put(propertyName, propertyType.toString());\n     }\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}