{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }        \n        sort(savedFields, count);\n        \n        int firstChangingField = Integer.MAX_VALUE;\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis != millis) {\n                    firstChangingField = i;\n                    break;\n                }\n                millis = newMillis;\n            }\n            \n            if (firstChangingField < count) {\n                DurationField months = DurationFieldType.months().getField(iChrono);\n                DurationField days = DurationFieldType.days().getField(iChrono);\n                DurationField firstChanging = savedFields[firstChangingField].iField.getDurationField();\n                if (compareReverse(firstChanging, months) >= 0 && compareReverse(firstChanging, days) <= 0) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                    return computeMillis(resetFields, text);\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..34ee5d05 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -329,28 +329,35 @@ public class DateTimeParserBucket {\n      * @since 1.3\n      */\n     public long computeMillis(boolean resetFields, String text) {\n+\n         SavedField[] savedFields = iSavedFields;\n         int count = iSavedFieldsCount;\n         if (iSavedFieldsShared) {\n             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n             iSavedFieldsShared = false;\n-        }\n+        }        \n         sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n-\n+        \n+        int firstChangingField = Integer.MAX_VALUE;\n         long millis = iMillis;\n         try {\n             for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis != millis) {\n+                    firstChangingField = i;\n+                    break;\n+                }\n+                millis = newMillis;\n+            }\n+            \n+            if (firstChangingField < count) {\n+                DurationField months = DurationFieldType.months().getField(iChrono);\n+                DurationField days = DurationFieldType.days().getField(iChrono);\n+                DurationField firstChanging = savedFields[firstChangingField].iField.getDurationField();\n+                if (compareReverse(firstChanging, months) >= 0 && compareReverse(firstChanging, days) <= 0) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    return computeMillis(resetFields, text);\n+                }\n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n@@ -365,8 +372,7 @@ public class DateTimeParserBucket {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}