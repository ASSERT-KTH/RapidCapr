{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n        if (resetFields && millis < iMillis) {\n            for (int j = i - 1; j >= 0; j--) {\n                try {\n                    millis = savedFields[j].set(millis, true);\n                } catch (IllegalArgumentException e) {\n                    if (text != null) {\n                        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n                    }\n                    throw e;\n                }\n                if (millis > iMillis) {\n                    break;\n                }\n            }\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bc13a8e6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+        if (resetFields && millis < iMillis) {\n+            for (int j = i - 1; j >= 0; j--) {\n+                try {\n+                    millis = savedFields[j].set(millis, true);\n+                } catch (IllegalArgumentException e) {\n+                    if (text != null) {\n+                        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+                    }\n+                    throw e;\n+                }\n+                if (millis > iMillis) {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: DOMM1b expected:<-1> but was:<0>",
    "test_result": "FAIL"
}