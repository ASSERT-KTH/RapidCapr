{
    "patch": "public static double regularizedGammaP(double a, double x){\n    if(a<=0.0D || x<0.0D){\n        throw new IllegalArgumentException(\"Invalid input argument values for regularizedGammaP\");\n    }\n    double gamma = gamma(a);\n    double igf = incompleteGammaP(a, x);\n    return igf / gamma;\n}\n\npublic static double gamma(double x) {\n    double tmp=(x-0.5d)*Math.log(x+4.5d)-(x+4.5d);\n    double ser=1.0d+76.18009173d/(x+0.0d)-86.50532033d/(x+1.0d)+24.01409822d/(x+2.0d)-1.231739516d/(x+3.0d)+0.00120858003d/(x+4.0d)-0.00000536382d/(x+5.0d);\n    return Math.exp(tmp+Math.log(ser*Math.sqrt(2.0d*Math.PI)/x));\n}\n\npublic static double incompleteGammaP(double a, double x){\n    if(a<=0.0D || x<0.0D){\n        throw new IllegalArgumentException(\"Invalid input argument values for incompleteGammaP\");\n    }\n    double igf = 0.0D;\n    double big = 1.0E10;\n    double eps = 1.0E-14;\n    double a1 = a - 1.0D;\n    double lna1 = Math.log(a1);\n    double sqrta1 = Math.sqrt(a1);\n    double gln = gammaLn(a);\n    if(x > a1){\n        igf = 1.0D - incompleteGammaQ(a, x);\n    } else {\n        double ap = a;\n        double del = 1.0D;\n        double sum = 1.0D / a;\n        for(int n = 1; n <= 100; ++n){\n            ++ap;\n            del *= x / ap;\n            sum += del / ap;\n            if(Math.abs(del) < Math.abs(sum) * eps){\n                igf = sum * Math.exp(-x + a1 * Math.log(x) - gln) / sqrta1;\n                return igf;\n            }\n            if (sum * big > 1.0D){\n                del *= 0.1D;\n                sum *= 0.1D;\n            }\n        }\n        throw new ArithmeticException(\"Unable to compute incomplete gamma function\");\n    }\n    return igf;\n}\n\npublic static double incompleteGammaQ(double a, double x){\n    if(a<=0.0D || x<0.0D){\n        throw new IllegalArgumentException(\"Invalid input argument values for incompleteGammaQ\");\n    }\n    double igf = 0.0D;\n    double big = 1.0E10;\n    double eps = 1.0E-14;\n    double a1 = a - 1.0D;\n    double lna1 = Math.log(a1);\n    double sqrta1 = Math.sqrt(a1);\n    double gln = gammaLn(a);\n    if(x < a1){\n        igf = 1.0D - incompleteGammaP(a, x);\n    } else {\n        double ap = a;\n        double del = 1.0D;\n        double sum = 1.0D / a;\n        double lnsum = Math.log(sum);\n        for(int n = 1; n <= 100; ++n){\n            ++ap;\n            del *= x / ap;\n            sum += del;\n            if(Math.abs(del) < Math.abs(sum) * eps){\n                igf = Math.exp(-x + a1 * Math.log(x) - gln - lnsum) / sqrta1;\n                return igf;\n            }\n            lnsum = Math.log(sum);\n            if (lnsum < -big){\n                del *= Math.exp(lnsum/-big);\n                sum *= Math.exp(lnsum/-big);\n            }\n        }\n        throw new ArithmeticException(\"Unable to compute incomplete gamma function\");\n    }\n    return igf;\n}\n\npublic static double gammaLn(double x) {\n    double i,j,y,xm,ret,sum,sgn;\n    double[] cof = new double[]{76.18009172947146,-86.50532032941677,\n            24.01409824083091,-1.231739572450155,0.1208650973866179e-2,\n            -0.5395239384953e-5};\n    sgn = 1;\n    if (x <= 0.0D){\n        if (x == (int)x){\n            throw new ArithmeticException(\"Gamma of negative integer is undefined\");\n        }\n        sgn=-1;\n        y=-x;\n        j=(int)y;\n        if (j==y){\n            throw new ArithmeticException(\"Gamma of negative integer is undefined\");\n        }\n        xm=y-j;\n        if (xm==0.0D){\n            throw new ArithmeticException(\"Gamma of negative integer is undefined\");\n        }\n        xm=1.0D-xm;\n        ret = sgn * Math.PI / (GammaUtil.gammaLn(xm) * Math.sin(Math.PI * xm));\n        return ret;\n    }\n    y = x;\n    j = 0;\n    if (y < 7.0D){\n        j = (int)(7.0D - y);\n        y += j;\n    }\n    y = Math.log(y);\n    double cof1 = cof[0];\n    sum = cof1;\n    for (i = 1; i < cof.length; ++i){\n        ++j;\n        cof1 *= 1+j/x;\n        sum += cof1 / cof[i];\n    }\n    double tmp = x + 0.5d;\n    ret = (Math.log(Math.sqrt(2.0d*Math.PI)) + (x+0.5d)*y - tmp + Math.log(sum) - y);\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bbcf79934 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,135 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x){\n+    if(a<=0.0D || x<0.0D){\n+        throw new IllegalArgumentException(\"Invalid input argument values for regularizedGammaP\");\n+    }\n+    double gamma = gamma(a);\n+    double igf = incompleteGammaP(a, x);\n+    return igf / gamma;\n+}\n+\n+public static double gamma(double x) {\n+    double tmp=(x-0.5d)*Math.log(x+4.5d)-(x+4.5d);\n+    double ser=1.0d+76.18009173d/(x+0.0d)-86.50532033d/(x+1.0d)+24.01409822d/(x+2.0d)-1.231739516d/(x+3.0d)+0.00120858003d/(x+4.0d)-0.00000536382d/(x+5.0d);\n+    return Math.exp(tmp+Math.log(ser*Math.sqrt(2.0d*Math.PI)/x));\n+}\n+\n+public static double incompleteGammaP(double a, double x){\n+    if(a<=0.0D || x<0.0D){\n+        throw new IllegalArgumentException(\"Invalid input argument values for incompleteGammaP\");\n+    }\n+    double igf = 0.0D;\n+    double big = 1.0E10;\n+    double eps = 1.0E-14;\n+    double a1 = a - 1.0D;\n+    double lna1 = Math.log(a1);\n+    double sqrta1 = Math.sqrt(a1);\n+    double gln = gammaLn(a);\n+    if(x > a1){\n+        igf = 1.0D - incompleteGammaQ(a, x);\n+    } else {\n+        double ap = a;\n+        double del = 1.0D;\n+        double sum = 1.0D / a;\n+        for(int n = 1; n <= 100; ++n){\n+            ++ap;\n+            del *= x / ap;\n+            sum += del / ap;\n+            if(Math.abs(del) < Math.abs(sum) * eps){\n+                igf = sum * Math.exp(-x + a1 * Math.log(x) - gln) / sqrta1;\n+                return igf;\n+            }\n+            if (sum * big > 1.0D){\n+                del *= 0.1D;\n+                sum *= 0.1D;\n+            }\n+        }\n+        throw new ArithmeticException(\"Unable to compute incomplete gamma function\");\n+    }\n+    return igf;\n+}\n+\n+public static double incompleteGammaQ(double a, double x){\n+    if(a<=0.0D || x<0.0D){\n+        throw new IllegalArgumentException(\"Invalid input argument values for incompleteGammaQ\");\n+    }\n+    double igf = 0.0D;\n+    double big = 1.0E10;\n+    double eps = 1.0E-14;\n+    double a1 = a - 1.0D;\n+    double lna1 = Math.log(a1);\n+    double sqrta1 = Math.sqrt(a1);\n+    double gln = gammaLn(a);\n+    if(x < a1){\n+        igf = 1.0D - incompleteGammaP(a, x);\n+    } else {\n+        double ap = a;\n+        double del = 1.0D;\n+        double sum = 1.0D / a;\n+        double lnsum = Math.log(sum);\n+        for(int n = 1; n <= 100; ++n){\n+            ++ap;\n+            del *= x / ap;\n+            sum += del;\n+            if(Math.abs(del) < Math.abs(sum) * eps){\n+                igf = Math.exp(-x + a1 * Math.log(x) - gln - lnsum) / sqrta1;\n+                return igf;\n+            }\n+            lnsum = Math.log(sum);\n+            if (lnsum < -big){\n+                del *= Math.exp(lnsum/-big);\n+                sum *= Math.exp(lnsum/-big);\n+            }\n+        }\n+        throw new ArithmeticException(\"Unable to compute incomplete gamma function\");\n+    }\n+    return igf;\n+}\n+\n+public static double gammaLn(double x) {\n+    double i,j,y,xm,ret,sum,sgn;\n+    double[] cof = new double[]{76.18009172947146,-86.50532032941677,\n+            24.01409824083091,-1.231739572450155,0.1208650973866179e-2,\n+            -0.5395239384953e-5};\n+    sgn = 1;\n+    if (x <= 0.0D){\n+        if (x == (int)x){\n+            throw new ArithmeticException(\"Gamma of negative integer is undefined\");\n+        }\n+        sgn=-1;\n+        y=-x;\n+        j=(int)y;\n+        if (j==y){\n+            throw new ArithmeticException(\"Gamma of negative integer is undefined\");\n+        }\n+        xm=y-j;\n+        if (xm==0.0D){\n+            throw new ArithmeticException(\"Gamma of negative integer is undefined\");\n+        }\n+        xm=1.0D-xm;\n+        ret = sgn * Math.PI / (GammaUtil.gammaLn(xm) * Math.sin(Math.PI * xm));\n+        return ret;\n+    }\n+    y = x;\n+    j = 0;\n+    if (y < 7.0D){\n+        j = (int)(7.0D - y);\n+        y += j;\n+    }\n+    y = Math.log(y);\n+    double cof1 = cof[0];\n+    sum = cof1;\n+    for (i = 1; i < cof.length; ++i){\n+        ++j;\n+        cof1 *= 1+j/x;\n+        sum += cof1 / cof[i];\n+    }\n+    double tmp = x + 0.5d;\n+    ret = (Math.log(Math.sqrt(2.0d*Math.PI)) + (x+0.5d)*y - tmp + Math.log(sum) - y);\n+    return ret;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}