{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild(); // get the constructor node\n  scope = traverse(constructor, scope); // traverse it\n  JSType constructorType = constructor.getJSType(); // get its type\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined(); // restrict type to not null/undefined\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else if (constructorType.isFunctionType()) { // if constructor is a function type\n      FunctionType ct = constructorType.toMaybeFunctionType(); \n      if (ct != null && ct.isConstructor()) { // if the function is a constructor, we can create an instance of its instance type\n        type = ct.getInstanceType();\n      } else { // if the function is not a constructor, set target type as unknown.\n        type = getNativeType(UNKNOWN_TYPE);\n      }\n    } else if (constructorType.isObjectType()) { // if the constructor is an object type\n      ObjectType ot = constructorType.toObjectType();\n      FunctionType ctor = ot.getConstructor(); // Get the constructor from the object and get its instance type\n      if (ctor != null) {\n          type = ctor.getInstanceType();\n      } else { // if there is no constructor, set target type as unknown\n          type = getNativeType(UNKNOWN_TYPE);\n      }\n    }\n  } else { // constructor has no type, set target type as unknown\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n  n.setJSType(type); // set the type of the new target node\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) { // traverse any arguments\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..05863e24 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,40 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild(); // get the constructor node\n+  scope = traverse(constructor, scope); // traverse it\n+  JSType constructorType = constructor.getJSType(); // get its type\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined(); // restrict type to not null/undefined\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else if (constructorType.isFunctionType()) { // if constructor is a function type\n+      FunctionType ct = constructorType.toMaybeFunctionType(); \n+      if (ct != null && ct.isConstructor()) { // if the function is a constructor, we can create an instance of its instance type\n+        type = ct.getInstanceType();\n+      } else { // if the function is not a constructor, set target type as unknown.\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+      }\n+    } else if (constructorType.isObjectType()) { // if the constructor is an object type\n+      ObjectType ot = constructorType.toObjectType();\n+      FunctionType ctor = ot.getConstructor(); // Get the constructor from the object and get its instance type\n+      if (ctor != null) {\n+          type = ctor.getInstanceType();\n+      } else { // if there is no constructor, set target type as unknown\n+          type = getNativeType(UNKNOWN_TYPE);\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n+  } else { // constructor has no type, set target type as unknown\n+    type = getNativeType(UNKNOWN_TYPE);\n   }\n+  n.setJSType(type); // set the type of the new target node\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) { // traverse any arguments\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}