{
    "patch": "import org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.special.Gamma;\n\npublic class GammaDistribution {\n\n    private final double alpha;\n    private final double beta;\n\n    public GammaDistribution(double alpha, double beta) {\n        if (alpha <= 0.0 || beta <= 0.0) {\n            throw new IllegalArgumentException(\"The shape and scale parameters must be positive.\");\n        }\n        this.alpha = alpha;\n        this.beta = beta;\n    }\n\n    public double pdf(double x) {\n        if (x < 0.0) {\n            return 0.0;\n        }\n        return Math.pow(beta, alpha) / Gamma.gamma(alpha) * Math.pow(x, alpha - 1.0) * Math.exp(-beta * x);\n    }\n\n    public double cdf(double x) {\n        if (x < 0.0) {\n            return 0.0;\n        }\n        return Gamma.regularizedGammaP(alpha, beta * x);\n    }\n\n    public double inv(double p) {\n        if (p < 0.0 || p > 1.0) {\n            throw new IllegalArgumentException(\"Probability argument must be between 0 and 1.\");\n        }\n        if (p == 0.0) {\n            return 0.0;\n        }\n        if (p == 1.0) {\n            return Double.POSITIVE_INFINITY;\n        }\n        return Gamma.inverseRegularizedGammaP(alpha, p) / beta;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ea22684a9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,49 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaDistribution {\n+\n+    private final double alpha;\n+    private final double beta;\n+\n+    public GammaDistribution(double alpha, double beta) {\n+        if (alpha <= 0.0 || beta <= 0.0) {\n+            throw new IllegalArgumentException(\"The shape and scale parameters must be positive.\");\n+        }\n+        this.alpha = alpha;\n+        this.beta = beta;\n+    }\n+\n+    public double pdf(double x) {\n+        if (x < 0.0) {\n+            return 0.0;\n+        }\n+        return Math.pow(beta, alpha) / Gamma.gamma(alpha) * Math.pow(x, alpha - 1.0) * Math.exp(-beta * x);\n+    }\n+\n+    public double cdf(double x) {\n+        if (x < 0.0) {\n+            return 0.0;\n+        }\n+        return Gamma.regularizedGammaP(alpha, beta * x);\n+    }\n+\n+    public double inv(double p) {\n+        if (p < 0.0 || p > 1.0) {\n+            throw new IllegalArgumentException(\"Probability argument must be between 0 and 1.\");\n+        }\n+        if (p == 0.0) {\n+            return 0.0;\n+        }\n+        if (p == 1.0) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        return Gamma.inverseRegularizedGammaP(alpha, p) / beta;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}