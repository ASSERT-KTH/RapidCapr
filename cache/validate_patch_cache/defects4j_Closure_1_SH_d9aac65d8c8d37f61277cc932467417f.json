{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // NEW: if there are no referenced arguments, and the function has an explicit return, remove the arguments and inline the return value\n        Node block = function.getLastChild();\n        Node lastStatement = block.getLastChild();\n        Node returnValue = NodeUtil.getReturnValueOfEnclosingFunction(lastStatement);\n        boolean explicitReturn = returnValue != null;\n        Node lastArg = null;\n        boolean allArgsReferenced = true;\n        while ((lastArg = argList.getLastChild()) != null) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                allArgsReferenced = false;\n                argList.removeChild(lastArg);\n                lastStatement.addChildAfter(lastArg.detach(), lastStatement.getFirstChild());\n                if (explicitReturn) {\n                    lastStatement.removeChild(returnValue);\n                    returnValue.useSourceInfoIfMissingFrom(lastArg);\n                    block.addChildBefore(returnValue.detach(), lastStatement);\n                    compiler.reportCodeChange();\n                    return;\n                }\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n        // if all arguments were referenced, and there is an explicit return, try to inline it.\n        if (explicitReturn && allArgsReferenced) {\n            Node enclosingStatement = NodeUtil.getEnclosingStatement(returnValue);\n            Node grandparent = enclosingStatement.getParent();\n            grandparent.addChildAfter(returnValue.detach(), enclosingStatement);\n            grandparent.addChildBefore(argList.detach(), enclosingStatement);\n            compiler.reportCodeChange();\n        }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..489d1018 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,57 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // NEW: if there are no referenced arguments, and the function has an explicit return, remove the arguments and inline the return value\n+        Node block = function.getLastChild();\n+        Node lastStatement = block.getLastChild();\n+        Node returnValue = NodeUtil.getReturnValueOfEnclosingFunction(lastStatement);\n+        boolean explicitReturn = returnValue != null;\n+        Node lastArg = null;\n+        boolean allArgsReferenced = true;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+            Var var = fnScope.getVar(lastArg.getString());\n+            if (!referenced.contains(var)) {\n+                allArgsReferenced = false;\n+                argList.removeChild(lastArg);\n+                lastStatement.addChildAfter(lastArg.detach(), lastStatement.getFirstChild());\n+                if (explicitReturn) {\n+                    lastStatement.removeChild(returnValue);\n+                    returnValue.useSourceInfoIfMissingFrom(lastArg);\n+                    block.addChildBefore(returnValue.detach(), lastStatement);\n+                    compiler.reportCodeChange();\n+                    return;\n+                }\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n+        }\n+        // if all arguments were referenced, and there is an explicit return, try to inline it.\n+        if (explicitReturn && allArgsReferenced) {\n+            Node enclosingStatement = NodeUtil.getEnclosingStatement(returnValue);\n+            Node grandparent = enclosingStatement.getParent();\n+            grandparent.addChildAfter(returnValue.detach(), enclosingStatement);\n+            grandparent.addChildBefore(argList.detach(), enclosingStatement);\n+            compiler.reportCodeChange();\n+        }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}