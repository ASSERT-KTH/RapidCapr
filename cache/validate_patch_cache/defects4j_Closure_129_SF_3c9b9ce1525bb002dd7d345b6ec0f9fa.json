{
    "patch": "      if (NodeUtil.isNormalGet(first)) {\n        Node name = first.getFirstChild();\n        if (name.isName()) {\n          Scope.Var var = getScope().getVar(name.getString());\n          if (var != null) {\n            var.setAssigned(true);\n          }\n        }\n      } else if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..e2f0bcb9 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -155,16 +155,15 @@ class PrepareAst implements CompilerPass {\n      * There are two types of calls we are interested in calls without explicit\n      * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n      */\n-    private void annotateCalls(Node n) {\n-      Preconditions.checkState(n.isCall());\n-\n-      // Keep track of of the \"this\" context of a call.  A call without an\n-      // explicit \"this\" is a free call.\n-      Node first = n.getFirstChild();\n-\n-      // ignore cast nodes.\n-\n-      if (!NodeUtil.isGet(first)) {\n+      if (NodeUtil.isNormalGet(first)) {\n+        Node name = first.getFirstChild();\n+        if (name.isName()) {\n+          Scope.Var var = getScope().getVar(name.getString());\n+          if (var != null) {\n+            var.setAssigned(true);\n+          }\n+        }\n+      } else if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n       }\n \n@@ -174,7 +173,6 @@ class PrepareAst implements CompilerPass {\n           \"eval\".equals(first.getString())) {\n         first.putBooleanProp(Node.DIRECT_EVAL, true);\n       }\n-    }\n \n     /**\n      * Translate dispatcher info into the property expected node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}