{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // check if either value is close to a zero\n        double y = f.value((min + max) / 2);\n        if (y == 0) {\n            // midpoint is a root\n            ret = (min + max) / 2;\n        } else {\n            // use bisection method\n            double mid = (min + max) / 2;\n            double yMid = f.value(mid);\n            int i = 0;\n            while (i < getMaxIterations()) {\n                if (yMid == 0) {\n                    ret = mid;\n                    break;\n                } else if (yMid * yMin < 0) {\n                    max = mid;\n                    yMax = yMid;\n                } else {\n                    min = mid;\n                    yMin = yMid;\n                }\n                mid = (min + max) / 2;\n                yMid = f.value(mid);\n                i++;\n            }\n            if (i >= getMaxIterations()) {\n                throw new MaxIterationsExceededException(getMaxIterations());\n            }\n            ret = mid;\n        }\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    setResult(ret);\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..25e4cd74a 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,59 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+public double solve(double min, double max) throws MaxIterationsExceededException, \n+    FunctionEvaluationException {\n+    \n+    clearResult();\n+    verifyInterval(min, max);\n+    \n+    double ret = Double.NaN;\n+    \n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    \n+    // Verify bracketing\n+    double sign = yMin * yMax;\n+    if (sign >= 0) {\n+        // check if either value is close to a zero\n+        double y = f.value((min + max) / 2);\n+        if (y == 0) {\n+            // midpoint is a root\n+            ret = (min + max) / 2;\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            // use bisection method\n+            double mid = (min + max) / 2;\n+            double yMid = f.value(mid);\n+            int i = 0;\n+            while (i < getMaxIterations()) {\n+                if (yMid == 0) {\n+                    ret = mid;\n+                    break;\n+                } else if (yMid * yMin < 0) {\n+                    max = mid;\n+                    yMax = yMid;\n+                } else {\n+                    min = mid;\n+                    yMin = yMid;\n+                }\n+                mid = (min + max) / 2;\n+                yMid = f.value(mid);\n+                i++;\n+            }\n+            if (i >= getMaxIterations()) {\n+                throw new MaxIterationsExceededException(getMaxIterations());\n+            }\n+            ret = mid;\n         }\n-\n-        return ret;\n+    } else {\n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n+        // either min or max is a root\n     }\n+\n+    setResult(ret);\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}