{
    "patch": "        if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n            return offsetLocal;\n        }\n\n        if (offsetLocal < 0 && offsetAdjusted == 0) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n            if (prevLocal != prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n\n        if (offsetLocal < offsetAdjusted) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            if (prevLocal != prevAdjusted) {\n                return offsetLocal;\n            }\n        } else {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                int previousOffset = getOffset(nextAdjusted - 1);\n                // Offset changed without a transition, so we are near\n                // the border of a transition. Choose the greater of the\n                // two offsets\n                return Math.max(offsetLocal, previousOffset);\n            }\n            // if nextLocal == nextAdjusted then we were already at a\n            // transition, but we need to choose the correct side.\n            int offsetNext = getOffset(nextLocal);\n            if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n                return offsetLocal;\n            }\n        }\n\n        if (offsetLocal < offsetAdjusted) {\n            // we need to check if we are just over a DST gap\n            // find when the new offset comes into effect\n            long transition = previousTransition(instantAdjusted);\n            if ((instantAdjusted - transition) < (offsetAdjusted - offsetLocal)) {\n                // new offset has come into effect and is less than old offset\n                // this means we are just over the DST gap\n                return offsetLocal;\n            }\n        } else {\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                long prevLocal = previousTransition(instantAdjusted);\n                int prevOffset = getOffset(prevLocal);\n                if ((prevOffset - offsetAdjusted) >= 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    int nextOffset = getOffset(nextLocal);\n                    if (nextOffset == offsetLocal) {\n                        return offsetLocal;\n                    }\n                }\n            } else {\n                long nextLocal = nextTransition(instantAdjusted);\n                int nextOffset = getOffset(nextLocal);\n                if ((nextOffset - offsetAdjusted) < 0) {\n                    return offsetLocal;\n                }\n            }\n        }\n\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..937ebe6c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,80 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n+            return offsetLocal;\n+        }\n+\n+        if (offsetLocal < 0 && offsetAdjusted == 0) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+            if (prevLocal != prevAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+\n+        if (offsetLocal < offsetAdjusted) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            if (prevLocal != prevAdjusted) {\n+                return offsetLocal;\n+            }\n+        } else {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                int previousOffset = getOffset(nextAdjusted - 1);\n+                // Offset changed without a transition, so we are near\n+                // the border of a transition. Choose the greater of the\n+                // two offsets\n+                return Math.max(offsetLocal, previousOffset);\n+            }\n+            // if nextLocal == nextAdjusted then we were already at a\n+            // transition, but we need to choose the correct side.\n+            int offsetNext = getOffset(nextLocal);\n+            if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n+                return offsetLocal;\n+            }\n+        }\n+\n+        if (offsetLocal < offsetAdjusted) {\n+            // we need to check if we are just over a DST gap\n+            // find when the new offset comes into effect\n+            long transition = previousTransition(instantAdjusted);\n+            if ((instantAdjusted - transition) < (offsetAdjusted - offsetLocal)) {\n+                // new offset has come into effect and is less than old offset\n+                // this means we are just over the DST gap\n+                return offsetLocal;\n+            }\n+        } else {\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                int prevOffset = getOffset(prevLocal);\n+                if ((prevOffset - offsetAdjusted) >= 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    int nextOffset = getOffset(nextLocal);\n+                    if (nextOffset == offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                int nextOffset = getOffset(nextLocal);\n+                if ((nextOffset - offsetAdjusted) < 0) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}