{
    "patch": "      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          // Allow variables that are initialized inside for-loops to be\n          // reassigned to different values, since they are function-scoped, not\n          // loop-scoped.\n          if (isInitializingAssignmentAt(ref.getIndex())\n              && maybeLoopVariableDeclaration(ref.getValue().<Node>getTarget())) {\n            break;\n          }\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..82eb9b42 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          // Allow variables that are initialized inside for-loops to be\n+          // reassigned to different values, since they are function-scoped, not\n+          // loop-scoped.\n+          if (isInitializingAssignmentAt(ref.getIndex())\n+              && maybeLoopVariableDeclaration(ref.getValue().<Node>getTarget())) {\n+            break;\n+          }\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}