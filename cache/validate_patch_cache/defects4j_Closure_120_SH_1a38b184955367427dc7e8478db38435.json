{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphNode<Node, Branch>> nodes = getCfg().getNodes();\n    for (DiGraphNode<Node, Branch> node : nodes) {\n      if (node.getValue() instanceof ExceptionHandlingNode) {\n        ExceptionHandlingNode excNode = (ExceptionHandlingNode) node.getValue();\n        if (excNode.getProtectedNodes().contains(cfgNode)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..55d6e23e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphNode<Node, Branch>> nodes = getCfg().getNodes();\n+    for (DiGraphNode<Node, Branch> node : nodes) {\n+      if (node.getValue() instanceof ExceptionHandlingNode) {\n+        ExceptionHandlingNode excNode = (ExceptionHandlingNode) node.getValue();\n+        if (excNode.getProtectedNodes().contains(cfgNode)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}