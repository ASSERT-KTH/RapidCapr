{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n        TypePair p = that.getTypesUnderInequality(this);\n        return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    if (this.isTop() || that.isBottom()) {\n        return new TypePair(null, null);\n    } else if (this.isEquivalentTo(that)) {\n        return new TypePair(null, null);\n    } else if (!this.isSubtypeOf(that) && !that.isSubtypeOf(this)) {\n        return new TypePair(this, that);\n    } else {\n        return new TypePair(null, null);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..e36208aa 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,26 +693,24 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n+public TypePair getTypesUnderInequality(JSType that) {\n     // unions types\n     if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n+        TypePair p = that.getTypesUnderInequality(this);\n+        return new TypePair(p.typeB, p.typeA);\n     }\n \n     // other types\n-    switch (this.testForEquality(that)) {\n-      case TRUE:\n+    if (this.isTop() || that.isBottom()) {\n         return new TypePair(null, null);\n-\n-      case FALSE:\n-      case UNKNOWN:\n+    } else if (this.isEquivalentTo(that)) {\n+        return new TypePair(null, null);\n+    } else if (!this.isSubtypeOf(that) && !that.isSubtypeOf(this)) {\n         return new TypePair(this, that);\n+    } else {\n+        return new TypePair(null, null);\n     }\n-\n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n-  }\n+}\n \n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}