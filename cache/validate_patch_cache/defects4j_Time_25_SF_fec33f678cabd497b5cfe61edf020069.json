{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n\n    int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - initialOffset;\n    int secondOffset = getOffset(instantAdjusted);\n    \n    if (initialOffset == secondOffset) {\n        return initialOffset;\n    }\n\n    boolean gap = initialOffset < secondOffset;\n\n    // find the transition that instantLocal falls within\n    long lastTransition = initialValue;\n    long nextTransition = nextTransition(instantAdjusted);\n    while (nextTransition > instantAdjusted) {\n        lastTransition = nextTransition;\n        nextTransition = nextTransition(lastTransition - 1);\n    }\n\n    int lastOffset = getOffset(lastTransition);\n    int nextOffset = getOffset(nextTransition);\n\n    // if we're in a gap, use the offset of the next transition\n    if (gap) {\n        if (initialOffset < lastOffset && instantLocal == lastTransition - initialOffset) {\n            return nextOffset;\n        }\n        if (withinGap(instantLocal, lastOffset, nextTransition)) {\n            return nextOffset;\n        }\n    }\n    // if we're in an overlap, use the offset of the last transition\n    else {\n        if (initialOffset >= lastOffset && instantLocal == nextTransition - secondOffset) {\n            return lastOffset;\n        }\n        if (withinOverlap(instantLocal, nextTransition, gap, lastOffset, nextTransition, nextOffset)) {\n            return lastOffset;\n        }\n    }\n\n    return secondOffset;\n}\n\nprivate boolean withinGap(long instantLocal, int lastOffset, long nextTransition) {\n    return instantLocal >= nextTransition - lastOffset && instantLocal < nextTransition;\n}\n\nprivate boolean withinOverlap(long instantLocal, long nextTransition, boolean gap, int lastOffset, long nextTransition1, int nextOffset) {\n    if (gap && !isOverlap(instantLocal, nextTransition)) {\n        return false;\n    }\n    long diff1 = instantLocal - nextTransition;\n    long diff2 = instantLocal - (nextTransition1 - nextOffset); \n    return (diff1 >= 0 && diff1 < (gap ? lastOffset : nextOffset - lastOffset)) || (diff2 >= 0 && diff2 < (gap ? nextOffset - lastOffset : lastOffset));\n}\n\nprivate boolean isOverlap(long instant, long nextTransition) {\n    int nextOffset = getOffset(nextTransition);\n    return getOffset(instant - nextOffset) > nextOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2c0bd064 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,69 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+\n+    int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - initialOffset;\n+    int secondOffset = getOffset(instantAdjusted);\n+    \n+    if (initialOffset == secondOffset) {\n+        return initialOffset;\n+    }\n+\n+    boolean gap = initialOffset < secondOffset;\n+\n+    // find the transition that instantLocal falls within\n+    long lastTransition = initialValue;\n+    long nextTransition = nextTransition(instantAdjusted);\n+    while (nextTransition > instantAdjusted) {\n+        lastTransition = nextTransition;\n+        nextTransition = nextTransition(lastTransition - 1);\n+    }\n+\n+    int lastOffset = getOffset(lastTransition);\n+    int nextOffset = getOffset(nextTransition);\n+\n+    // if we're in a gap, use the offset of the next transition\n+    if (gap) {\n+        if (initialOffset < lastOffset && instantLocal == lastTransition - initialOffset) {\n+            return nextOffset;\n+        }\n+        if (withinGap(instantLocal, lastOffset, nextTransition)) {\n+            return nextOffset;\n+        }\n+    }\n+    // if we're in an overlap, use the offset of the last transition\n+    else {\n+        if (initialOffset >= lastOffset && instantLocal == nextTransition - secondOffset) {\n+            return lastOffset;\n+        }\n+        if (withinOverlap(instantLocal, nextTransition, gap, lastOffset, nextTransition, nextOffset)) {\n+            return lastOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n+    return secondOffset;\n+}\n+\n+private boolean withinGap(long instantLocal, int lastOffset, long nextTransition) {\n+    return instantLocal >= nextTransition - lastOffset && instantLocal < nextTransition;\n+}\n+\n+private boolean withinOverlap(long instantLocal, long nextTransition, boolean gap, int lastOffset, long nextTransition1, int nextOffset) {\n+    if (gap && !isOverlap(instantLocal, nextTransition)) {\n+        return false;\n+    }\n+    long diff1 = instantLocal - nextTransition;\n+    long diff2 = instantLocal - (nextTransition1 - nextOffset); \n+    return (diff1 >= 0 && diff1 < (gap ? lastOffset : nextOffset - lastOffset)) || (diff2 >= 0 && diff2 < (gap ? nextOffset - lastOffset : lastOffset));\n+}\n+\n+private boolean isOverlap(long instant, long nextTransition) {\n+    int nextOffset = getOffset(nextTransition);\n+    return getOffset(instant - nextOffset) > nextOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}