{
    "patch": "int c = in.read();\nwhile(c != -1) {\n    if(c == ESCAPE_CHAR) {\n        c = in.read();\n        if(c == -1) {\n            throw new IllegalArgumentException(\"Invalid escape sequence: \" +\n                \"found EOF when expecting a second hex digit of a 2-byte hex sequence\");\n        }\n        if(!isHexDigit((char)c)) {\n            throw new IllegalArgumentException(\"Invalid escape sequence: \" +\n                \"non-hex character '\" + (char)c + \"' found at position \" +\n                (in.position() - 1));\n        } \n        int value = (Character.digit((char)c,16) << 4);\n        c = in.read();\n        if(c == -1) {\n            throw new IllegalArgumentException(\"Invalid escape sequence: \" +\n                \"found EOF when expecting a second hex digit of a 2-byte hex sequence\");\n        }\n        if(!isHexDigit((char)c)) {\n            throw new IllegalArgumentException(\"Invalid escape sequence: \" +\n                \"non-hex character '\" + (char)c + \"' found at position \" +\n                (in.position() - 1));\n        }\n        value += Character.digit((char)c,16);\n        out.write((byte)value);\n\n    } else {\n        out.write((byte)c);\n    } \n    c = in.read();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}