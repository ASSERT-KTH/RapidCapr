{
    "patch": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    double rhs;\n    double entry;\n    double ratio;\n\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            ratio = rhs / entry;\n            int cmp = Double.compare(ratio, minRatio);\n\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        List<Integer> potentialRows = new ArrayList<>();\n        for(Integer row : minRatioPositions) {\n            boolean isPotentialRow = true;\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    isPotentialRow = false;\n                    break;\n                }\n            }\n            if(isPotentialRow) {\n                potentialRows.add(row);\n            }\n        }\n        if (!potentialRows.isEmpty()) {\n            // there are no basic artificial variables that should be forced out of the basis\n            int minIndex = tableau.getWidth();\n            Integer minRow = null;\n            for (Integer row : potentialRows) {\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }\n            }\n            // return a row with the smallest index of corresponding basic variable\n            return minRow;\n        } else {\n            // if multiple rows has the same minimum ratio and they're not potential rows,\n            // we just return a random one\n            return minRatioPositions.get(0);\n        }\n    }\n    return minRatioPositions.get(0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d9b..c5c00ee36 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -87,71 +87,74 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n-        List<Integer> minRatioPositions = new ArrayList<Integer>();\n-        double minRatio = Double.MAX_VALUE;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                final double ratio = rhs / entry;\n-                // check if the entry is strictly equal to the current min ratio\n-                // do not use a ulp/epsilon check\n-                final int cmp = Double.compare(ratio, minRatio);\n-                if (cmp == 0) {\n-                    minRatioPositions.add(i);\n-                } else if (cmp < 0) {\n-                    minRatio = ratio;\n-                    minRatioPositions = new ArrayList<Integer>();\n-                    minRatioPositions.add(i);\n-                }\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+    List<Integer> minRatioPositions = new ArrayList<Integer>();\n+    double minRatio = Double.MAX_VALUE;\n+    double rhs;\n+    double entry;\n+    double ratio;\n+\n+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n+        rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+        entry = tableau.getEntry(i, col);\n+\n+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            ratio = rhs / entry;\n+            int cmp = Double.compare(ratio, minRatio);\n+\n+            if (cmp == 0) {\n+                minRatioPositions.add(i);\n+            } else if (cmp < 0) {\n+                minRatio = ratio;\n+                minRatioPositions.clear();\n+                minRatioPositions.add(i);\n             }\n         }\n+    }\n \n-        if (minRatioPositions.size() == 0) {\n-            return null;\n-        } else if (minRatioPositions.size() > 1) {\n-            // there's a degeneracy as indicated by a tie in the minimum ratio test\n-\n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n+    if (minRatioPositions.size() == 0) {\n+        return null;\n+    } else if (minRatioPositions.size() > 1) {\n+        List<Integer> potentialRows = new ArrayList<>();\n+        for(Integer row : minRatioPositions) {\n+            boolean isPotentialRow = true;\n+            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+                int column = i + tableau.getArtificialVariableOffset();\n+                final double entry = tableau.getEntry(row, column);\n+                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                    isPotentialRow = false;\n+                    break;\n                 }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n-            //    take the row for which the corresponding basic variable has the smallest index\n-            //\n-            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            //\n-            // Additional heuristic: if we did not get a solution after half of maxIterations\n-            //                       revert to the simple case of just returning the top-most row\n-            // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+            }\n+            if(isPotentialRow) {\n+                potentialRows.add(row);\n+            }\n+        }\n+        if (!potentialRows.isEmpty()) {\n+            // there are no basic artificial variables that should be forced out of the basis\n+            int minIndex = tableau.getWidth();\n+            Integer minRow = null;\n+            for (Integer row : potentialRows) {\n+                int i = tableau.getNumObjectiveFunctions();\n+                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+                    if (row == tableau.getBasicRow(i)) {\n+                        if (i < minIndex) {\n+                            minIndex = i;\n+                            minRow = row;\n                         }\n                     }\n                 }\n-                return minRow;\n+            }\n+            // return a row with the smallest index of corresponding basic variable\n+            return minRow;\n+        } else {\n+            // if multiple rows has the same minimum ratio and they're not potential rows,\n+            // we just return a random one\n+            return minRatioPositions.get(0);\n         }\n-        return minRatioPositions.get(0);\n     }\n+    return minRatioPositions.get(0);\n+}\n \n     /**\n      * Runs one iteration of the Simplex method on the given model.",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}