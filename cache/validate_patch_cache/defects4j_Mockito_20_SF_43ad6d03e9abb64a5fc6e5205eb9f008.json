{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler){\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());\n    T mockInstance;\n    try {\n        if(!mockedProxyType.isAnonymousClass() && isLocalOrAnonymousClass(mockedProxyType)){\n            Class<?> outerClass = mockedProxyType.getEnclosingClass();\n            Constructor<? extends T> constructor;\n            Object[] constructorArgs = new Object[3];\n            if(outerClass != null){\n                constructor = mockedProxyType.getDeclaredConstructor(outerClass,MockCreationSettings.class, MockHandler.class);\n                constructorArgs[0] = settings.getTypeToMock().getDeclaredConstructor(outerClass).newInstance();\n                constructorArgs[1] = settings;\n                constructorArgs[2] = asInternalMockHandler(handler);\n            }\n            else{\n                constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n                constructorArgs[0] = settings;\n                constructorArgs[1] = asInternalMockHandler(handler);\n            }\n            mockInstance = constructor.newInstance(constructorArgs);\n        } else {\n            Constructor<? extends T> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class,MockHandler.class);\n            mockInstance = constructor.newInstance(settings, asInternalMockHandler(handler));\n        }\n    } catch (NoSuchMethodException |\n            InstantiationException |\n            IllegalAccessException |\n            InvocationTargetException |\n            NoSuchMethodError e) {\n        throw new MockitoException(\"Failed to create mock instance\", e);\n    }\n\n\n    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n}\n\nprivate boolean isLocalOrAnonymousClass(Class<?> mockedType) {\n    return mockedType.isLocalClass() || mockedType.isAnonymousClass();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..fb1b63875 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,37 +21,53 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler){\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());\n+    T mockInstance;\n+    try {\n+        if(!mockedProxyType.isAnonymousClass() && isLocalOrAnonymousClass(mockedProxyType)){\n+            Class<?> outerClass = mockedProxyType.getEnclosingClass();\n+            Constructor<? extends T> constructor;\n+            Object[] constructorArgs = new Object[3];\n+            if(outerClass != null){\n+                constructor = mockedProxyType.getDeclaredConstructor(outerClass,MockCreationSettings.class, MockHandler.class);\n+                constructorArgs[0] = settings.getTypeToMock().getDeclaredConstructor(outerClass).newInstance();\n+                constructorArgs[1] = settings;\n+                constructorArgs[2] = asInternalMockHandler(handler);\n+            }\n+            else{\n+                constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n+                constructorArgs[0] = settings;\n+                constructorArgs[1] = asInternalMockHandler(handler);\n+            }\n+            mockInstance = constructor.newInstance(constructorArgs);\n+        } else {\n+            Constructor<? extends T> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class,MockHandler.class);\n+            mockInstance = constructor.newInstance(settings, asInternalMockHandler(handler));\n         }\n+    } catch (NoSuchMethodException |\n+            InstantiationException |\n+            IllegalAccessException |\n+            InvocationTargetException |\n+            NoSuchMethodError e) {\n+        throw new MockitoException(\"Failed to create mock instance\", e);\n     }\n \n+\n+    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+\n+    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+\n+}\n+\n+private boolean isLocalOrAnonymousClass(Class<?> mockedType) {\n+    return mockedType.isLocalClass() || mockedType.isAnonymousClass();\n+}\n+\n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of\n         // relying on the JVM to implicitly cast on the client call site.",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}