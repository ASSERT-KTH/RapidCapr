{
    "patch": "// Ignore variables declared in functions and loops, as their lifetime is not easily analyzed.\nfor (BasicBlock searchBlock = ref.getBasicBlock(); searchBlock != null; searchBlock = searchBlock.getParent()) {\n  if (searchBlock != ref.getBasicBlock()) {\n    if (searchBlock.isFunction || searchBlock.isLoop) {\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..aa524de2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Ignore variables declared in functions and loops, as their lifetime is not easily analyzed.\n+for (BasicBlock searchBlock = ref.getBasicBlock(); searchBlock != null; searchBlock = searchBlock.getParent()) {\n+  if (searchBlock != ref.getBasicBlock()) {\n+    if (searchBlock.isFunction || searchBlock.isLoop) {\n+      return false;\n+    }\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}