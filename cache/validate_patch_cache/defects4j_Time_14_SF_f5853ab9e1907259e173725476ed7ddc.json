{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        int monthFieldIndex = -1;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                monthFieldIndex = i;\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        if (monthFieldIndex != -1) {\n            int year = iChronology.year().get(instant);\n            int month = iChronology.monthOfYear().get(instant) + valueToAdd;\n            int maxMonth = iChronology.monthOfYear().getMaximumValue();\n            int maxDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n            if (month > maxMonth) {\n               // Handle overflow into the next year.\n                int yearsToAdd = (month - 1) / maxMonth;\n                year += yearsToAdd;\n                month -= yearsToAdd * maxMonth;\n            } else if (month < 1) {\n                // Handle underflow into the previous year.\n                int yearsToSubtract = (-month) / maxMonth + 1;\n                year -= yearsToSubtract;\n                month += yearsToSubtract * maxMonth;\n            }\n            int[] newValues = Arrays.copyOf(values, values.length);\n            newValues[monthFieldIndex] = month;\n            int day = iChronology.dayOfMonth().get(instant);\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n            if (day > maxDay) {\n                day = maxDay;\n            }\n            int[] result = iChronology.get(partial.getFieldTypes(), instant);\n            result = iChronology.set(result, monthFieldIndex, newValues[monthFieldIndex]);\n            result = iChronology.set(result, iChronology.dayOfMonth(), day);\n            return result;\n        } else {\n            int instant = (int) add(iChronology.set(partial, 0), valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..82cf0d40 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        int monthFieldIndex = -1;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                monthFieldIndex = i;\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        if (monthFieldIndex != -1) {\n+            int year = iChronology.year().get(instant);\n+            int month = iChronology.monthOfYear().get(instant) + valueToAdd;\n+            int maxMonth = iChronology.monthOfYear().getMaximumValue();\n+            int maxDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n+            if (month > maxMonth) {\n+               // Handle overflow into the next year.\n+                int yearsToAdd = (month - 1) / maxMonth;\n+                year += yearsToAdd;\n+                month -= yearsToAdd * maxMonth;\n+            } else if (month < 1) {\n+                // Handle underflow into the previous year.\n+                int yearsToSubtract = (-month) / maxMonth + 1;\n+                year -= yearsToSubtract;\n+                month += yearsToSubtract * maxMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            newValues[monthFieldIndex] = month;\n+            int day = iChronology.dayOfMonth().get(instant);\n+            int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n+            if (day > maxDay) {\n+                day = maxDay;\n+            }\n+            int[] result = iChronology.get(partial.getFieldTypes(), instant);\n+            result = iChronology.set(result, monthFieldIndex, newValues[monthFieldIndex]);\n+            result = iChronology.set(result, iChronology.dayOfMonth(), day);\n+            return result;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int instant = (int) add(iChronology.set(partial, 0), valueToAdd);\n+            return iChronology.get(partial, instant);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for getMaximumValue(int,int)",
    "test_result": "ERROR"
}