{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - offsetLocal;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (offsetLocal == offsetAdjusted) {\n        return offsetLocal;\n    }\n\n    // If the time zone is fixed, always return fixed offset\n    if (!isInDaylightTime(new Date(instantLocal))) {\n        return getStandardOffset(instantLocal);\n    }\n\n    long currentTransition;\n    if (offsetLocal < offsetAdjusted) {\n        currentTransition = previousTransition(instantAdjusted);\n        while (currentTransition > instantAdjusted) {\n            int offset = getOffset(currentTransition - 1);\n            if (offset == offsetLocal) {\n                return offsetLocal;\n            }\n            if (offset == offsetAdjusted) {\n                return offsetAdjusted;\n            }\n            currentTransition = previousTransition(currentTransition - 1);\n        }\n    } else {\n        currentTransition = nextTransition(instantLocal - offsetLocal);\n        while (currentTransition <= instantLocal - offsetLocal) {\n            int offset = getOffset(currentTransition);\n            if (offset == offsetLocal || offset == offsetAdjusted) {\n                return offset;\n            }\n            currentTransition = nextTransition(currentTransition);\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..84510496 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - offsetLocal;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (offsetLocal == offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+\n+    // If the time zone is fixed, always return fixed offset\n+    if (!isInDaylightTime(new Date(instantLocal))) {\n+        return getStandardOffset(instantLocal);\n+    }\n+\n+    long currentTransition;\n+    if (offsetLocal < offsetAdjusted) {\n+        currentTransition = previousTransition(instantAdjusted);\n+        while (currentTransition > instantAdjusted) {\n+            int offset = getOffset(currentTransition - 1);\n+            if (offset == offsetLocal) {\n+                return offsetLocal;\n+            }\n+            if (offset == offsetAdjusted) {\n+                return offsetAdjusted;\n             }\n+            currentTransition = previousTransition(currentTransition - 1);\n+        }\n+    } else {\n+        currentTransition = nextTransition(instantLocal - offsetLocal);\n+        while (currentTransition <= instantLocal - offsetLocal) {\n+            int offset = getOffset(currentTransition);\n+            if (offset == offsetLocal || offset == offsetAdjusted) {\n+                return offset;\n+            }\n+            currentTransition = nextTransition(currentTransition);\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}