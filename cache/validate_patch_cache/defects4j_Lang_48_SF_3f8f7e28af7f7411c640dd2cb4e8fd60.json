{
    "patch": "        Class<?> lhsClass = lhs.getClass();\n        Class<?> rhsClass = rhs.getClass();\n        if (!lhsClass.isArray() && !rhsClass.isArray()) { // both are non-array objects\n            isEquals = lhs.equals(rhs);\n        } else if (lhsClass != rhsClass) { // different types of arrays\n            this.setEquals(false);\n        } else if (lhs instanceof long[]) { // long array comparison\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) { // int array comparison\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) { // short array comparison\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) { // char array comparison\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) { // byte array comparison\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) { // double array comparison\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) { // float array comparison\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) { // boolean array comparison\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else { // object array comparison",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..9c18761e 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,29 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+        Class<?> lhsClass = lhs.getClass();\n+        Class<?> rhsClass = rhs.getClass();\n+        if (!lhsClass.isArray() && !rhsClass.isArray()) { // both are non-array objects\n+            isEquals = lhs.equals(rhs);\n+        } else if (lhsClass != rhsClass) { // different types of arrays\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        } else if (lhs instanceof long[]) { // long array comparison\n             append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n+        } else if (lhs instanceof int[]) { // int array comparison\n             append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n+        } else if (lhs instanceof short[]) { // short array comparison\n             append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n+        } else if (lhs instanceof char[]) { // char array comparison\n             append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n+        } else if (lhs instanceof byte[]) { // byte array comparison\n             append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n+        } else if (lhs instanceof double[]) { // double array comparison\n             append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n+        } else if (lhs instanceof float[]) { // float array comparison\n             append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n+        } else if (lhs instanceof boolean[]) { // boolean array comparison\n             append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n-        }\n-        return this;\n-    }\n+        } else { // object array comparison\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}