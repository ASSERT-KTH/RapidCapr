{
    "patch": "    private void inlineAliases(GlobalNamespace namespace) {\n    Map<Name, List<Ref>> localAliases = Maps.newLinkedHashMap();\n    for (Name name : namespace.getNameForest()) {\n      // Collect all the local aliases of each name.\n      if (!name.isGlobal() && name.ref != null &&\n          name.ref.type == Ref.Type.ALIASING_DEF) {\n        Name aliasedName = getAliasedName(name.ref);\n        if (aliasedName != null && aliasedName.scope == name.scope.getParent()) {\n          if (!localAliases.containsKey(aliasedName)) {\n            localAliases.put(aliasedName, Lists.<Ref>newArrayList());\n          }\n          localAliases.get(aliasedName).add(name.ref);\n        }\n      }\n    }\n\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.ref != null && name.ref.type == Ref.Type.SET_FROM_GLOBAL) {\n        // {@code name} meets condition (b).\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type != Ref.Type.ALIASING_GET || !ref.scope.isLocal() ||\n              !localAliases.containsKey(name)) {\n            continue;\n          }\n          // {@code name} meets condition (c).\n          List<Ref> aliases = localAliases.get(name);\n          for (Ref alias : aliases) {\n            if (inlineAliasIfPossible(alias, namespace)) {\n              name.removeRef(alias);\n              workList.add(name);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n          && (name.aliasingGets == 0 || (name.aliasingGets == 1 && name.ref != null\n              && name.ref.type == Ref.Type.ALIASING_GET))\n          && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..31aedd52 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,8 +158,22 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n+    private void inlineAliases(GlobalNamespace namespace) {\n+    Map<Name, List<Ref>> localAliases = Maps.newLinkedHashMap();\n+    for (Name name : namespace.getNameForest()) {\n+      // Collect all the local aliases of each name.\n+      if (!name.isGlobal() && name.ref != null &&\n+          name.ref.type == Ref.Type.ALIASING_DEF) {\n+        Name aliasedName = getAliasedName(name.ref);\n+        if (aliasedName != null && aliasedName.scope == name.scope.getParent()) {\n+          if (!localAliases.containsKey(aliasedName)) {\n+            localAliases.put(aliasedName, Lists.<Ref>newArrayList());\n+          }\n+          localAliases.get(aliasedName).add(name.ref);\n+        }\n+      }\n+    }\n+\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n@@ -170,15 +184,20 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+          name.ref != null && name.ref.type == Ref.Type.SET_FROM_GLOBAL) {\n+        // {@code name} meets condition (b).\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+          if (ref.type != Ref.Type.ALIASING_GET || !ref.scope.isLocal() ||\n+              !localAliases.containsKey(name)) {\n+            continue;\n+          }\n+          // {@code name} meets condition (c).\n+          List<Ref> aliases = localAliases.get(name);\n+          for (Ref alias : aliases) {\n+            if (inlineAliasIfPossible(alias, namespace)) {\n+              name.removeRef(alias);\n+              workList.add(name);\n             }\n           }\n         }\n@@ -186,15 +205,11 @@ class CollapseProperties implements CompilerPass {\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n-    }\n-  }\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+          && (name.aliasingGets == 0 || (name.aliasingGets == 1 && name.ref != null\n+              && name.ref.type == Ref.Type.ALIASING_GET))\n+          && name.props != null) {\n+        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}