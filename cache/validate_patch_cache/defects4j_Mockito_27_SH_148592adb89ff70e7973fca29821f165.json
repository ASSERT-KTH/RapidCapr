{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        if (mock instanceof Factory) {\n            ((Factory) mock).setCallback(0, newFilter);\n        } else {\n            Field field = null;\n            try {\n                field = mock.getClass().getSuperclass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n                field.setAccessible(true);\n                field.set(mock, newFilter);\n            } catch(NoSuchFieldException | IllegalAccessException e) {\n                throw new RuntimeException(\"Error resetting mock: \" + e.getMessage());\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..71ac6b972 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        if (mock instanceof Factory) {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        } else {\n+            Field field = null;\n+            try {\n+                field = mock.getClass().getSuperclass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+                field.setAccessible(true);\n+                field.set(mock, newFilter);\n+            } catch(NoSuchFieldException | IllegalAccessException e) {\n+                throw new RuntimeException(\"Error resetting mock: \" + e.getMessage());\n+            }\n+        }\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}