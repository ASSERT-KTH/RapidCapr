{
    "patch": "public Fraction reduce() {\n        int n = numerator;\n        int d = denominator;\n\n        if (numerator == 0) {\n            return this; // zero is already in the lowest terms\n        }\n\n        // If numerator is negative, make it positive and note that we\n        // need to negate the resulting fraction.\n        if (numerator < 0) {\n            n = -n;\n        }\n\n        // Always work with positive denominators.\n        if (denominator < 0) {\n            // assert n >= 0 && d < 0;\n            n = -n;\n            d = -d;\n        }\n\n        int gcd = greatestCommonDivisor(n, d);\n\n        if (gcd == 1) {\n            return this;\n        }\n\n        return Fraction.getFraction(n / gcd, d / gcd);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..551c1c89 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,34 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+        int n = numerator;\n+        int d = denominator;\n+\n+        if (numerator == 0) {\n+            return this; // zero is already in the lowest terms\n+        }\n+\n+        // If numerator is negative, make it positive and note that we\n+        // need to negate the resulting fraction.\n+        if (numerator < 0) {\n+            n = -n;\n+        }\n+\n+        // Always work with positive denominators.\n+        if (denominator < 0) {\n+            // assert n >= 0 && d < 0;\n+            n = -n;\n+            d = -d;\n+        }\n+\n+        int gcd = greatestCommonDivisor(n, d);\n+\n+        if (gcd == 1) {\n+            return this;\n+        }\n+\n+        return Fraction.getFraction(n / gcd, d / gcd);\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}