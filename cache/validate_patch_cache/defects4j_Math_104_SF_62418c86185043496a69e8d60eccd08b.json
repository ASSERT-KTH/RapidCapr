{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (0.0 == x) {\n        return 0.0;\n    }\n    if (Double.isInfinite(a)) {\n        return x < a ? 1.0 : 0.0;\n    }\n    if (Double.isInfinite(x)) {\n        return 1.0;\n    }\n\n    int i = 0;\n    double igamma = Double.NaN;\n    double logGamma = Double.NaN;\n    double gamma = Double.NaN;\n    double aLn = Math.log(a);\n    double xLn = Math.log(x);\n    double term = Double.POSITIVE_INFINITY;\n    double sum = 0.0;\n\n    if (x > a + 1.0) {\n        logGamma = Gamma.logGamma(a);\n        gamma = Math.exp(logGamma);\n        igamma = Gamma.regularizedGammaQ(a, x, epsilon, maxIterations);\n        return igamma;\n    }\n\n    term = sum = 1.0 / a;\n    while (Math.abs(term) > epsilon && i < maxIterations) {\n        ++i;\n        term *= x / (a + i);\n        sum += term;\n    }\n\n    logGamma = Gamma.logGamma(a);\n    gamma = Math.exp(logGamma);\n\n    igamma = sum * Math.exp(-x + aLn - logGamma);\n    return igamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ab6574e87 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,49 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (0.0 == x) {\n+        return 0.0;\n+    }\n+    if (Double.isInfinite(a)) {\n+        return x < a ? 1.0 : 0.0;\n+    }\n+    if (Double.isInfinite(x)) {\n+        return 1.0;\n+    }\n+\n+    int i = 0;\n+    double igamma = Double.NaN;\n+    double logGamma = Double.NaN;\n+    double gamma = Double.NaN;\n+    double aLn = Math.log(a);\n+    double xLn = Math.log(x);\n+    double term = Double.POSITIVE_INFINITY;\n+    double sum = 0.0;\n+\n+    if (x > a + 1.0) {\n+        logGamma = Gamma.logGamma(a);\n+        gamma = Math.exp(logGamma);\n+        igamma = Gamma.regularizedGammaQ(a, x, epsilon, maxIterations);\n+        return igamma;\n+    }\n+\n+    term = sum = 1.0 / a;\n+    while (Math.abs(term) > epsilon && i < maxIterations) {\n+        ++i;\n+        term *= x / (a + i);\n+        sum += term;\n+    }\n+\n+    logGamma = Gamma.logGamma(a);\n+    gamma = Math.exp(logGamma);\n+\n+    igamma = sum * Math.exp(-x + aLn - logGamma);\n+    return igamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}