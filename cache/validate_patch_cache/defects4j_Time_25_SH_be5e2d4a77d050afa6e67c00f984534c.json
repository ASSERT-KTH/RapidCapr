{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                // we need to go back one step in time\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(nextLocal - 1);\n                if (nextLocal == nextAdjusted) {\n                    return offsetLocal;\n                }\n                // there are two valid offsets, we choose the one after the transition\n                return getOffset(nextLocal);\n            } else {\n                // we need to go forward one step in time\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n                long nextLocal = nextTransition(nextAdjusted - 1);\n                if (nextAdjusted == nextLocal) {\n                    return offsetLocal;\n                }\n                // there are two valid offsets, we choose the one before the transition\n                return getOffset(nextLocal);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5650717a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                // we need to go back one step in time\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(nextLocal - 1);\n+                if (nextLocal == nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // there are two valid offsets, we choose the one after the transition\n+                return getOffset(nextLocal);\n+            } else {\n+                // we need to go forward one step in time\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n+                long nextLocal = nextTransition(nextAdjusted - 1);\n+                if (nextAdjusted == nextLocal) {\n+                    return offsetLocal;\n+                }\n+                // there are two valid offsets, we choose the one before the transition\n+                return getOffset(nextLocal);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}