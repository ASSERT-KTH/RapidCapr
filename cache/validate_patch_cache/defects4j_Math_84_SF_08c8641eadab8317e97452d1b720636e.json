{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = copyOf(reflected.getPoint(), reflected.getValue(), expanded.getPoint(), expanded.getValue(),\n                        original[2], original[3]);\n            } else {\n                // accept the reflected simplex\n                simplex = copyOf(reflected.getPoint(), reflected.getValue(), original[1], original[1].getValue(),\n                        original[2], original[3]);\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, 0.5, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = copyOf(contracted.getPoint(), contracted.getValue(), original[1], original[1].getValue(),\n                        original[2], original[3]);\n            } else {\n                // perform a shrink\n                final RealPointValuePair one = original[0];\n                final int dimension = one.getPoint().length;\n                RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[simplex.length];\n                shrinkedSimplex[0] = one;\n                for (int i = 1; i < shrinkedSimplex.length; i++) {\n                    final RealPointValuePair pi = original[i];\n                    final double[] arr = new double[dimension];\n                    final double[] p = pi.getPoint();\n                    for (int j = 0; j < dimension; j++) {\n                        arr[j] = one.getPoint()[j] + delta * (p[j] - one.getPoint()[j]);\n                    }\n                    shrinkedSimplex[i] = new RealPointValuePair(arr, Double.NaN, false);\n                }\n                simplex = shrinkedSimplex;\n            }\n        }\n\n        // check convergence\n        final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n        final double centroidSpread = computeCentroidSpread();\n        final boolean minimumSpread = range < convergenceChecker.getRelativeThreshold() *\n                                            (Math.abs(simplex[simplex.length - 1].getValue()) +\n                                             Math.abs(simplex[0].getValue())) * 0.5 &&\n                                        centroidSpread < convergenceChecker.getAbsoluteThreshold();\n\n        if (minimumSpread) {\n            return;\n        }\n    }\n}\n\nprivate RealPointValuePair[] copyOf(final double[] p0, double v0, final RealPointValuePair p1, double v1,\n        final RealPointValuePair p2, final RealPointValuePair p3) {\n    return new RealPointValuePair[] { new RealPointValuePair(p0, v0), new RealPointValuePair(p1.getPoint(), v1),\n            new RealPointValuePair(p2.getPoint(), p2.getValue()), new RealPointValuePair(p3.getPoint(), p3.getValue()) };\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ec34e4328 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,79 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = copyOf(reflected.getPoint(), reflected.getValue(), expanded.getPoint(), expanded.getValue(),\n+                        original[2], original[3]);\n+            } else {\n+                // accept the reflected simplex\n+                simplex = copyOf(reflected.getPoint(), reflected.getValue(), original[1], original[1].getValue(),\n+                        original[2], original[3]);\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, 0.5, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = copyOf(contracted.getPoint(), contracted.getValue(), original[1], original[1].getValue(),\n+                        original[2], original[3]);\n+            } else {\n+                // perform a shrink\n+                final RealPointValuePair one = original[0];\n+                final int dimension = one.getPoint().length;\n+                RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[simplex.length];\n+                shrinkedSimplex[0] = one;\n+                for (int i = 1; i < shrinkedSimplex.length; i++) {\n+                    final RealPointValuePair pi = original[i];\n+                    final double[] arr = new double[dimension];\n+                    final double[] p = pi.getPoint();\n+                    for (int j = 0; j < dimension; j++) {\n+                        arr[j] = one.getPoint()[j] + delta * (p[j] - one.getPoint()[j]);\n+                    }\n+                    shrinkedSimplex[i] = new RealPointValuePair(arr, Double.NaN, false);\n+                }\n+                simplex = shrinkedSimplex;\n             }\n-\n         }\n \n+        // check convergence\n+        final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n+        final double centroidSpread = computeCentroidSpread();\n+        final boolean minimumSpread = range < convergenceChecker.getRelativeThreshold() *\n+                                            (Math.abs(simplex[simplex.length - 1].getValue()) +\n+                                             Math.abs(simplex[0].getValue())) * 0.5 &&\n+                                        centroidSpread < convergenceChecker.getAbsoluteThreshold();\n+\n+        if (minimumSpread) {\n+            return;\n+        }\n     }\n+}\n+\n+private RealPointValuePair[] copyOf(final double[] p0, double v0, final RealPointValuePair p1, double v1,\n+        final RealPointValuePair p2, final RealPointValuePair p3) {\n+    return new RealPointValuePair[] { new RealPointValuePair(p0, v0), new RealPointValuePair(p1.getPoint(), v1),\n+            new RealPointValuePair(p2.getPoint(), p2.getValue()), new RealPointValuePair(p3.getPoint(), p3.getValue()) };\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: method copyOf in class MultiDirectional cannot be applied to given types;",
    "test_result": "ERROR"
}