{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    int initialOffset = getOffset(instantLocal);\n\n    // calculate the transition times to handle DST gaps and overlaps\n    long nextTransitionLocal = nextTransition(instantLocal - initialOffset);\n    long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset - initialOffset);\n\n    // first check if the current offset is OK\n    boolean dstGap = false;\n    if (nextTransitionLocal != nextTransitionAdjusted) {\n        int offsetBeforeTransLocal = getOffset(nextTransitionLocal - 1);\n        int offsetBeforeTransAdjusted = getOffset(nextTransitionAdjusted - 1);\n        int offsetAfterTransLocal = getOffset(nextTransitionLocal);\n        int offsetAfterTransAdjusted = getOffset(nextTransitionAdjusted);\n        if (offsetBeforeTransLocal > offsetAfterTransLocal || offsetBeforeTransAdjusted > offsetAfterTransAdjusted) {\n            dstGap = true;\n        } else if (offsetBeforeTransLocal < offsetAfterTransLocal || offsetBeforeTransAdjusted < offsetAfterTransAdjusted) {\n            // handle overlap cases\n            if (initialOffset >= 0) {\n                initialOffset = offsetBeforeTransLocal;\n            } else {\n                initialOffset = offsetAfterTransLocal;\n            }\n        }\n    }\n\n    // if the current offset is not OK due to a gap, find the correct offset\n    if (dstGap) {\n        long prevTransitionLocal = previousTransition(instantLocal - initialOffset);\n        long prevTransitionAdjusted = previousTransition(instantLocal - initialOffset - initialOffset);\n        int offsetBeforeGapLocal = getOffset(prevTransitionLocal);\n        int offsetBeforeGapAdjusted = getOffset(prevTransitionAdjusted);\n        if (offsetBeforeGapLocal == offsetBeforeGapAdjusted) {\n            initialOffset = offsetBeforeGapLocal;\n        } else {\n            if (offsetBeforeGapLocal > offsetBeforeGapAdjusted) {\n                nextTransitionLocal = nextTransition(prevTransitionLocal - offsetBeforeGapLocal);\n                nextTransitionAdjusted = nextTransition(prevTransitionAdjusted - offsetBeforeGapAdjusted);\n            } else {\n                nextTransitionLocal = nextTransition(prevTransitionLocal - offsetBeforeGapLocal + 1);\n                nextTransitionAdjusted = nextTransition(prevTransitionAdjusted - offsetBeforeGapAdjusted + 1);\n            }\n            if (nextTransitionLocal == nextTransitionAdjusted) {\n                initialOffset = getOffset(nextTransitionLocal - 1);\n            } else {\n                // fallback to first algorithm\n                return getOffsetFromLocal(instantLocal);\n            }\n        }\n    }\n\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..188dbe83 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,61 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // calculate the transition times to handle DST gaps and overlaps\n+    long nextTransitionLocal = nextTransition(instantLocal - initialOffset);\n+    long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset - initialOffset);\n+\n+    // first check if the current offset is OK\n+    boolean dstGap = false;\n+    if (nextTransitionLocal != nextTransitionAdjusted) {\n+        int offsetBeforeTransLocal = getOffset(nextTransitionLocal - 1);\n+        int offsetBeforeTransAdjusted = getOffset(nextTransitionAdjusted - 1);\n+        int offsetAfterTransLocal = getOffset(nextTransitionLocal);\n+        int offsetAfterTransAdjusted = getOffset(nextTransitionAdjusted);\n+        if (offsetBeforeTransLocal > offsetAfterTransLocal || offsetBeforeTransAdjusted > offsetAfterTransAdjusted) {\n+            dstGap = true;\n+        } else if (offsetBeforeTransLocal < offsetAfterTransLocal || offsetBeforeTransAdjusted < offsetAfterTransAdjusted) {\n+            // handle overlap cases\n+            if (initialOffset >= 0) {\n+                initialOffset = offsetBeforeTransLocal;\n+            } else {\n+                initialOffset = offsetAfterTransLocal;\n+            }\n+        }\n+    }\n+\n+    // if the current offset is not OK due to a gap, find the correct offset\n+    if (dstGap) {\n+        long prevTransitionLocal = previousTransition(instantLocal - initialOffset);\n+        long prevTransitionAdjusted = previousTransition(instantLocal - initialOffset - initialOffset);\n+        int offsetBeforeGapLocal = getOffset(prevTransitionLocal);\n+        int offsetBeforeGapAdjusted = getOffset(prevTransitionAdjusted);\n+        if (offsetBeforeGapLocal == offsetBeforeGapAdjusted) {\n+            initialOffset = offsetBeforeGapLocal;\n+        } else {\n+            if (offsetBeforeGapLocal > offsetBeforeGapAdjusted) {\n+                nextTransitionLocal = nextTransition(prevTransitionLocal - offsetBeforeGapLocal);\n+                nextTransitionAdjusted = nextTransition(prevTransitionAdjusted - offsetBeforeGapAdjusted);\n+            } else {\n+                nextTransitionLocal = nextTransition(prevTransitionLocal - offsetBeforeGapLocal + 1);\n+                nextTransitionAdjusted = nextTransition(prevTransitionAdjusted - offsetBeforeGapAdjusted + 1);\n+            }\n+            if (nextTransitionLocal == nextTransitionAdjusted) {\n+                initialOffset = getOffset(nextTransitionLocal - 1);\n+            } else {\n+                // fallback to first algorithm\n+                return getOffsetFromLocal(instantLocal);\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    return initialOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}