{
    "patch": "    if (!patternMatcher.find()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n    currentFormatField = patternMatcher.group();\n    currentStrategy = getStrategy(currentFormatField);\n    while (patternMatcher.find()) {\n        String nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if (currentStrategy == null || nextStrategy == null || !currentStrategy.getClass().equals(nextStrategy.getClass())) {\n            if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            } else {\n                throw new IllegalArgumentException(\"Invalid pattern\");\n            }\n            currentStrategy = nextStrategy;\n        }\n        currentFormatField = nextFormatField;\n    }\n    if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    } else {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n    currentFormatField = null;\n    strategies = collector.toArray(new Strategy[collector.size()]);\n    parsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..03149a1e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,32 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+    if (!patternMatcher.find()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+    currentFormatField = patternMatcher.group();\n+    currentStrategy = getStrategy(currentFormatField);\n+    while (patternMatcher.find()) {\n+        String nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if (currentStrategy == null || nextStrategy == null || !currentStrategy.getClass().equals(nextStrategy.getClass())) {\n+            if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid pattern\");\n+            }\n+            currentStrategy = nextStrategy;\n+        }\n+        currentFormatField = nextFormatField;\n+    }\n+    if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+    currentFormatField = null;\n+    strategies = collector.toArray(new Strategy[collector.size()]);\n+    parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}