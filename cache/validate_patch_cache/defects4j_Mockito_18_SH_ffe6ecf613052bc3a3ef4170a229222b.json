{
    "patch": "public Object process(ProceedingJoinPoint pjp) throws Throwable {\n    Object result = pjp.proceed();\n    if (result == null) {\n        for (Method method : pjp.getSignature().getDeclaringType().getMethods()) {\n            if (method.getName().equals(pjp.getSignature().getName())) {\n                Class<?>[] paramTypes = method.getParameterTypes();\n                if (paramTypes.length == pjp.getArgs().length) {\n                    boolean hasNonNullArgs = true;\n                    for (int i = 0; i < pjp.getArgs().length; i++) {\n                        if (pjp.getArgs()[i] == null && !paramTypes[i].equals(Optional.class)) {\n                            hasNonNullArgs = false;\n                            break;\n                        }\n                    }\n                    if (hasNonNullArgs) {\n                        result = method.getReturnType().newInstance();\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}