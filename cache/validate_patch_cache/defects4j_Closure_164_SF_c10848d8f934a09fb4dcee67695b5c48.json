{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n  if (this.parameters.hasChildren() != that.parameters.hasChildren()) {\n    return false;\n  }\n\n  // If the counts of parameters are different or both function have no parameters, return true\n  if (this.parameters.getChildCount() == 0 && that.parameters.getChildCount() == 0 ||\n      this.parameters.getChildCount() != that.parameters.getChildCount()) {\n    return true;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParamType != null && thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n      return false;\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    if (thisIsVarArgs != thatIsVarArgs) {\n      return false;\n    }\n\n    // If both are varargs, check the types for varargs.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      JSType thisVarArgsType = thisParam.getFirstChild().getJSType();\n      JSType thatVarArgsType = thatParam.getFirstChild().getJSType();\n\n      Node thisVarArgsChild = thisParam.getLastChild().getFirstChild();\n      Node thatVarArgsChild = thatParam.getLastChild().getFirstChild();\n\n      while (thisVarArgsChild != null && thatVarArgsChild != null) {\n        JSType thisVarArgsChildType = thisVarArgsChild.getJSType();\n        JSType thatVarArgsChildType = thatVarArgsChild.getJSType();\n\n        if (!thatVarArgsChildType.isSubtype(thisVarArgsChildType)) {\n          return false;\n        }\n\n        thisVarArgsChild = thisVarArgsChild.getNext();\n        thatVarArgsChild = thatVarArgsChild.getNext();\n      }\n\n      if (thisVarArgsChild != null || thatVarArgsChild != null) {\n        // If one list runs out before the other, they aren't compatible.\n        return false;\n      }\n\n      if (thisVarArgsType != null && thatVarArgsType != null && !thatVarArgsType.isSubtype(thisVarArgsType)) {\n        return false;\n      }\n    }\n\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  // If we get to the end of the loop, then everything is compatible.\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..9bfc0621 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,78 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n+\n+  ArrowType that = (ArrowType) other;\n+  if (this.parameters.hasChildren() != that.parameters.hasChildren()) {\n+    return false;\n+  }\n+\n+  // If the counts of parameters are different or both function have no parameters, return true\n+  if (this.parameters.getChildCount() == 0 && that.parameters.getChildCount() == 0 ||\n+      this.parameters.getChildCount() != that.parameters.getChildCount()) {\n+    return true;\n+  }\n+\n+  Node thisParam = parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n+\n+  while (thisParam != null && thatParam != null) {\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = thatParam.getJSType();\n+\n+    if (thisParamType != null && thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n       return false;\n     }\n \n-    ArrowType that = (ArrowType) other;\n+    boolean thisIsVarArgs = thisParam.isVarArgs();\n+    boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n-\n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n+    if (thisIsVarArgs != thatIsVarArgs) {\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+    // If both are varargs, check the types for varargs.\n+    if (thisIsVarArgs && thatIsVarArgs) {\n+      JSType thisVarArgsType = thisParam.getFirstChild().getJSType();\n+      JSType thatVarArgsType = thatParam.getFirstChild().getJSType();\n+\n+      Node thisVarArgsChild = thisParam.getLastChild().getFirstChild();\n+      Node thatVarArgsChild = thatParam.getLastChild().getFirstChild();\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+      while (thisVarArgsChild != null && thatVarArgsChild != null) {\n+        JSType thisVarArgsChildType = thisVarArgsChild.getJSType();\n+        JSType thatVarArgsChildType = thatVarArgsChild.getJSType();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        if (!thatVarArgsChildType.isSubtype(thisVarArgsChildType)) {\n+          return false;\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n+        thisVarArgsChild = thisVarArgsChild.getNext();\n+        thatVarArgsChild = thatVarArgsChild.getNext();\n       }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+\n+      if (thisVarArgsChild != null || thatVarArgsChild != null) {\n+        // If one list runs out before the other, they aren't compatible.\n+        return false;\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      if (thisVarArgsType != null && thatVarArgsType != null && !thatVarArgsType.isSubtype(thisVarArgsType)) {\n+        return false;\n       }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n-    return true;\n+    thisParam = thisParam.getNext();\n+    thatParam = thatParam.getNext();\n   }\n \n+  // If we get to the end of the loop, then everything is compatible.\n+  return true;\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}