{
    "patch": "    if (n.getToken() != Token.CALL) {\n      return NodeUtil.isFunctionExpression(n);\n    }\n    Node target = n.getFirstChild();\n    return target.isName() && !n.hasChildren();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..4a69844b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,11 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (n.getToken() != Token.CALL) {\n+      return NodeUtil.isFunctionExpression(n);\n+    }\n+    Node target = n.getFirstChild();\n+    return target.isName() && !n.hasChildren();\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}