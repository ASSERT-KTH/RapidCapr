{
    "patch": "public double getTypedPercent(String[] lines) {\n    int typed = 0;\n    int total = 0;\n    for (String line : lines) {\n        for (int i = 0; i < line.length(); i++) {\n            char c = line.charAt(i);\n            if (c == '\\'') {\n                i++;\n                while (i < line.length() && line.charAt(i) != '\\'') {\n                    i++;\n                }\n            } else if (c == '\"' || c == '/') {\n                i = skip(line, i, c);\n            } else if (c == ' ' || c == '\\t') {\n                // Ignore whitespace.\n            } else {\n                total++;\n                if (c != '(' && !isUnary(line, i)) {\n                    typed++;\n                }\n            }\n        }\n    }\n    return (double) typed / total * 100;\n}\n\nprivate int skip(String line, int i, char c) {\n    if (c == '\"' || c == '/') {\n        i++;\n        while (i < line.length()) {\n            char cur = line.charAt(i);\n            if (cur == '\\\\') {\n                i++;\n            } else if (cur == c) {\n                return i;\n            }\n            i++;\n        }\n    }\n    return i;\n}\n\nprivate boolean isUnary(String line, int i) {\n    if (i >= line.length() || !Character.isJavaIdentifierPart(line.charAt(i))) {\n        return false;\n    }\n    int start = i - 1;\n    while (start >= 0 && (line.charAt(start) == ' ' || line.charAt(start) == '\\t')) {\n        start--;\n    }\n    if (start < 0 || !Character.isJavaIdentifierPart(line.charAt(start))) {\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..70754802 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,61 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String[] lines) {\n+    int typed = 0;\n+    int total = 0;\n+    for (String line : lines) {\n+        for (int i = 0; i < line.length(); i++) {\n+            char c = line.charAt(i);\n+            if (c == '\\'') {\n+                i++;\n+                while (i < line.length() && line.charAt(i) != '\\'') {\n+                    i++;\n+                }\n+            } else if (c == '\"' || c == '/') {\n+                i = skip(line, i, c);\n+            } else if (c == ' ' || c == '\\t') {\n+                // Ignore whitespace.\n+            } else {\n+                total++;\n+                if (c != '(' && !isUnary(line, i)) {\n+                    typed++;\n+                }\n+            }\n+        }\n+    }\n+    return (double) typed / total * 100;\n+}\n+\n+private int skip(String line, int i, char c) {\n+    if (c == '\"' || c == '/') {\n+        i++;\n+        while (i < line.length()) {\n+            char cur = line.charAt(i);\n+            if (cur == '\\\\') {\n+                i++;\n+            } else if (cur == c) {\n+                return i;\n+            }\n+            i++;\n+        }\n+    }\n+    return i;\n+}\n+\n+private boolean isUnary(String line, int i) {\n+    if (i >= line.length() || !Character.isJavaIdentifierPart(line.charAt(i))) {\n+        return false;\n+    }\n+    int start = i - 1;\n+    while (start >= 0 && (line.charAt(start) == ' ' || line.charAt(start) == '\\t')) {\n+        start--;\n+    }\n+    if (start < 0 || !Character.isJavaIdentifierPart(line.charAt(start))) {\n+        return true;\n+    }\n+    return false;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}