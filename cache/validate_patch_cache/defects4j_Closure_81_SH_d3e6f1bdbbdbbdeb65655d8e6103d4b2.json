{
    "patch": "Name functionNameNode = functionNode.getFunctionName();\nNode newName = null;\n\nif (functionNameNode == null || functionNameNode.getLength() == 0) {\n  newName = newStringNode(\"\");\n  newName.setLineno(functionNode.getLineno());\n  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n\n} else {\n  newName = transform(functionNameNode);\n}\n\nif (newName != null) {\n  node.addChildToBack(newName);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..91cf2e7f 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,21 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name functionNameNode = functionNode.getFunctionName();\n+Node newName = null;\n+\n+if (functionNameNode == null || functionNameNode.getLength() == 0) {\n+  newName = newStringNode(\"\");\n+  newName.setLineno(functionNode.getLineno());\n+  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+\n+} else {\n+  newName = transform(functionNameNode);\n+}\n+\n+if (newName != null) {\n+  node.addChildToBack(newName);\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}