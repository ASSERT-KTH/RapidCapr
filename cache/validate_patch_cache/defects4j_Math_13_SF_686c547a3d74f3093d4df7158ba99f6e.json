{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    if (n > 100) {\n        // Compute the square root recursively using the block matrix decomposition\n        final int blockSize = 50;\n        final int numBlocks = (n + blockSize - 1) / blockSize;\n        RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < numBlocks; i++) {\n            int startRow = i * blockSize;\n            int endRow = Math.min(startRow + blockSize, n);\n            int blockRows = endRow - startRow;\n            RealMatrix b = m.getSubMatrix(startRow, endRow - 1, startRow, endRow - 1);\n            RealMatrix sb = squareRoot(b);\n            s.setSubMatrix(sb.getData(), startRow, startRow);\n            for (int j = i + 1; j < numBlocks; j++) {\n                int startCol = j * blockSize;\n                int endCol = Math.min(startCol + blockSize, n);\n                int blockCols = endCol - startCol;\n                RealMatrix c = m.getSubMatrix(startRow, endRow - 1, startCol, endCol - 1);\n                RealMatrix sc = c.multiply(sb).scalarMultiply(1.0 / blockRows);\n                s.setSubMatrix(sc.getData(), startRow, startCol);\n            }\n        }\n        EigenDecomposition dec = new EigenDecomposition(s);\n        RealMatrix eigenvalues = dec.getD();\n        RealMatrix scaledEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n        for (int i = 0; i < eigenvalues.getRowDimension(); i++) {\n            double entry = eigenvalues.getEntry(i, i);\n            if (entry > 0) {\n                scaledEigenvalues.setEntry(i, i, Math.sqrt(entry));\n            } else if (entry < 0) {\n                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n            }\n        }\n        RealMatrix eigenvectors = dec.getV();\n        RealMatrix scaledEigenvectors = eigenvectors.multiply(scaledEigenvalues).multiply(eigenvectors.transpose());\n        return scaledEigenvectors;\n    } else {\n        // Compute the square root directly using the Eigen decomposition\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix d = dec.getD();\n        final RealMatrix v = dec.getV();\n        final RealMatrix e = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            e.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        }\n        final RealMatrix sqrt = v.multiply(e).multiply(v.transpose());\n        return sqrt;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f9df4c249 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,54 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    if (n > 100) {\n+        // Compute the square root recursively using the block matrix decomposition\n+        final int blockSize = 50;\n+        final int numBlocks = (n + blockSize - 1) / blockSize;\n+        RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < numBlocks; i++) {\n+            int startRow = i * blockSize;\n+            int endRow = Math.min(startRow + blockSize, n);\n+            int blockRows = endRow - startRow;\n+            RealMatrix b = m.getSubMatrix(startRow, endRow - 1, startRow, endRow - 1);\n+            RealMatrix sb = squareRoot(b);\n+            s.setSubMatrix(sb.getData(), startRow, startRow);\n+            for (int j = i + 1; j < numBlocks; j++) {\n+                int startCol = j * blockSize;\n+                int endCol = Math.min(startCol + blockSize, n);\n+                int blockCols = endCol - startCol;\n+                RealMatrix c = m.getSubMatrix(startRow, endRow - 1, startCol, endCol - 1);\n+                RealMatrix sc = c.multiply(sb).scalarMultiply(1.0 / blockRows);\n+                s.setSubMatrix(sc.getData(), startRow, startCol);\n+            }\n+        }\n+        EigenDecomposition dec = new EigenDecomposition(s);\n+        RealMatrix eigenvalues = dec.getD();\n+        RealMatrix scaledEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n+        for (int i = 0; i < eigenvalues.getRowDimension(); i++) {\n+            double entry = eigenvalues.getEntry(i, i);\n+            if (entry > 0) {\n+                scaledEigenvalues.setEntry(i, i, Math.sqrt(entry));\n+            } else if (entry < 0) {\n+                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+            }\n+        }\n+        RealMatrix eigenvectors = dec.getV();\n+        RealMatrix scaledEigenvectors = eigenvectors.multiply(scaledEigenvalues).multiply(eigenvectors.transpose());\n+        return scaledEigenvectors;\n+    } else {\n+        // Compute the square root directly using the Eigen decomposition\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix d = dec.getD();\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix e = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            e.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        }\n+        final RealMatrix sqrt = v.multiply(e).multiply(v.transpose());\n+        return sqrt;\n     }\n }\n+}",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}