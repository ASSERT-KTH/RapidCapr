{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      if (NodeUtil.isExprCall(maybeExpr)) {\n        return false;\n      }\n\n      if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.mayHaveSideEffects(maybeExpr)) {\n        Node parent = n.getParent();\n        if (parent != null && parent.getType() == Token.BLOCK\n            && (NodeUtil.isLoop(parent) || NodeUtil.isIfStatement(parent))) {\n          return false;\n        }\n        return true;\n      } else if (NodeUtil.isName(maybeExpr)\n          && NodeUtil.isAssignmentOp(maybeExpr.getParent())\n          && maybeExpr.getNext() == null) {\n        // x = something\n        Node assignment = maybeExpr.getParent();\n        Node parent = assignment.getParent();\n        if (parent.isExprResult() && parent.getParent() != null && parent.getParent().isNormalBlock()) {\n          if (!NodeUtil.mayHaveSideEffects(assignment.getLastChild())) {\n            // Check that there is no if-block or loop containing the node\n            Node ancestor = maybeExpr;\n            while (ancestor != null && ancestor != n.getParent()\n                && !NodeUtil.isControlStructureBlock(ancestor.getParent())) {\n              ancestor = ancestor.getParent();\n            }\n            if (ancestor == n.getParent()) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..e86d11a6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,46 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      if (NodeUtil.isExprCall(maybeExpr)) {\n+        return false;\n       }\n-    }\n \n-    return false;\n+      if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+        Node parent = n.getParent();\n+        if (parent != null && parent.getType() == Token.BLOCK\n+            && (NodeUtil.isLoop(parent) || NodeUtil.isIfStatement(parent))) {\n+          return false;\n+        }\n+        return true;\n+      } else if (NodeUtil.isName(maybeExpr)\n+          && NodeUtil.isAssignmentOp(maybeExpr.getParent())\n+          && maybeExpr.getNext() == null) {\n+        // x = something\n+        Node assignment = maybeExpr.getParent();\n+        Node parent = assignment.getParent();\n+        if (parent.isExprResult() && parent.getParent() != null && parent.getParent().isNormalBlock()) {\n+          if (!NodeUtil.mayHaveSideEffects(assignment.getLastChild())) {\n+            // Check that there is no if-block or loop containing the node\n+            Node ancestor = maybeExpr;\n+            while (ancestor != null && ancestor != n.getParent()\n+                && !NodeUtil.isControlStructureBlock(ancestor.getParent())) {\n+              ancestor = ancestor.getParent();\n+            }\n+            if (ancestor == n.getParent()) {\n+              return true;\n+            }\n+          }\n+        }\n+      }\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}