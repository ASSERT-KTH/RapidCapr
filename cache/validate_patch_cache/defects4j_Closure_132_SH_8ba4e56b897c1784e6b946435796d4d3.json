{
    "patch": "              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              boolean defBeforeUse = NodeUtil.definitelyAssignedBeforeX(\n                  getEnclosingFunction(), lhs, cond);\n              boolean maybeDefBeforeUse = defBeforeUse ||\n                  NodeUtil.mayHaveSideEffects(lhs);\n              if (maybeDefBeforeUse && NodeUtil.mayHaveSideEffects(cond)) {\n                return n;\n              }\n\n              n.removeChild(cond);\n              Node assignName = thenOp.removeFirstChild();\n              Node thenExpr = thenOp.removeFirstChild();\n              Node elseExpr = elseOp.getLastChild();\n              elseOp.removeChild(elseExpr);\n\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                                .srcref(thenOp);\n              Node expr = NodeUtil.newExpr(assign);\n              parent.replaceChild(n, expr);\n              reportCodeChange();\n\n              return expr;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..7737406f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,31 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE - there are some circumstances where we can\n+              // proceed even if there are side effects...\n+              boolean defBeforeUse = NodeUtil.definitelyAssignedBeforeX(\n+                  getEnclosingFunction(), lhs, cond);\n+              boolean maybeDefBeforeUse = defBeforeUse ||\n+                  NodeUtil.mayHaveSideEffects(lhs);\n+              if (maybeDefBeforeUse && NodeUtil.mayHaveSideEffects(cond)) {\n+                return n;\n+              }\n+\n+              n.removeChild(cond);\n+              Node assignName = thenOp.removeFirstChild();\n+              Node thenExpr = thenOp.removeFirstChild();\n+              Node elseExpr = elseOp.getLastChild();\n+              elseOp.removeChild(elseExpr);\n+\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                                .srcref(thenOp);\n+              Node expr = NodeUtil.newExpr(assign);\n+              parent.replaceChild(n, expr);\n+              reportCodeChange();\n+\n+              return expr;\n+            }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}