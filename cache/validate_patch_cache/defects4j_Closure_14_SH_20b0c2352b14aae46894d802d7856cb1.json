{
    "patch": "      case Token.TRY:\n        if (parent.getFirstChild() == node) { // If we are coming out of the TRY block...\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return parent.getLastChild().getFirstFirstChild(); // goto finally.\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        } else if (NodeUtil.getCatchBlock(parent) == node) {  // CATCH block.\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return parent.getLastChild().getFirstFirstChild();\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        } else if (parent.getLastChild() == node) { // If we are coming out of the FINALLY block...\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..7744ee14 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,23 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+      case Token.TRY:\n+        if (parent.getFirstChild() == node) { // If we are coming out of the TRY block...\n+          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+            return parent.getLastChild().getFirstFirstChild(); // goto finally.\n+          } else { // and have no FINALLY.\n+            return computeFollowNode(fromNode, parent, cfa);\n+          }\n+        } else if (NodeUtil.getCatchBlock(parent) == node) {  // CATCH block.\n+          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+            return parent.getLastChild().getFirstFirstChild();\n+          } else {\n+            return computeFollowNode(fromNode, parent, cfa);\n+          }\n+        } else if (parent.getLastChild() == node) { // If we are coming out of the FINALLY block...\n+          return computeFollowNode(fromNode, parent, cfa);\n+        }\n+        break;\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}