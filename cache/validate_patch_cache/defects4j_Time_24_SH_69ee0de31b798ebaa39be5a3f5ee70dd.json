{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                if (resetFields || savedFields[i].iField.getType() != DateTimeFieldType.year()) {\n                    millis = savedFields[i].set(millis, resetFields);\n                } else {\n                    // A year field that is not being reset is the base year.\n                    // To avoid under/overflow, we use either MIN or MAX.\n                    int y = savedFields[i].iValue;\n                    if (y < 0) {\n                        millis = iChrono.year().set(0, y).roundFloor(millis);\n                    } else {\n                        millis = iChrono.year().set(Integer.MAX_VALUE, y).roundCeiling(millis);\n                    }\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fb337ee8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                if (resetFields || savedFields[i].iField.getType() != DateTimeFieldType.year()) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } else {\n+                    // A year field that is not being reset is the base year.\n+                    // To avoid under/overflow, we use either MIN or MAX.\n+                    int y = savedFields[i].iValue;\n+                    if (y < 0) {\n+                        millis = iChrono.year().set(0, y).roundFloor(millis);\n+                    } else {\n+                        millis = iChrono.year().set(Integer.MAX_VALUE, y).roundCeiling(millis);\n+                    }\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: long cannot be dereferenced",
    "test_result": "ERROR"
}