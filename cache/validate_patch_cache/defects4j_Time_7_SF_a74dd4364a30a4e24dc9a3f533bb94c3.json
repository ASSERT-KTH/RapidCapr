{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, null);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        long bucketMillis = bucket.computeMillis(false, text);\n        int parsedDayOfMonth = bucket.dayOfMonth.get(bucketMillis);\n        if (parsedDayOfMonth == 29 && bucket.monthOfYear.getInt(bucketMillis) == 2) {\n            // Handle 29th February for non-leap years\n            int year = bucket.year.get(bucketMillis);\n            if ((year & 3) != 0 || ((year % 100 == 0) && (year % 400) != 0)) {\n                bucketMillis = chrono.dayOfMonth().set(bucketMillis, 1);\n            }\n        }\n        instant.setMillis(bucketMillis);\n        if (bucket.getOffsetInteger() != null) {\n            instant.setChronology(DateTimeUtils.getInstantChronology(chrono, bucket.getZone()));\n        } else if (bucket.getZone() != null) {\n            instant.setChronology(chrono.withZone(bucket.getZone()));\n        } else {\n            instant.setChronology(chrono);\n        }\n    }\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..11d64436 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,41 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantMillis, chrono, iLocale, iPivotYear, null);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        long bucketMillis = bucket.computeMillis(false, text);\n+        int parsedDayOfMonth = bucket.dayOfMonth.get(bucketMillis);\n+        if (parsedDayOfMonth == 29 && bucket.monthOfYear.getInt(bucketMillis) == 2) {\n+            // Handle 29th February for non-leap years\n+            int year = bucket.year.get(bucketMillis);\n+            if ((year & 3) != 0 || ((year % 100 == 0) && (year % 400) != 0)) {\n+                bucketMillis = chrono.dayOfMonth().set(bucketMillis, 1);\n+            }\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+        instant.setMillis(bucketMillis);\n+        if (bucket.getOffsetInteger() != null) {\n+            instant.setChronology(DateTimeUtils.getInstantChronology(chrono, bucket.getZone()));\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+            instant.setChronology(chrono.withZone(bucket.getZone()));\n+        } else {\n+            instant.setChronology(chrono);\n         }\n-        return newPos;\n     }\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: incompatible types: <null> cannot be converted to int",
    "test_result": "ERROR"
}