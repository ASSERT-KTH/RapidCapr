{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n    InvocationContainer invocationContainer = newMockHandler.getInvocationContainer();\n    MockitoCore mockitoCore = new MockitoCore();\n    MockitoSession mockitoSession = mockitoCore.mockitoSession().startMockingSession();\n    invocationContainer.setNotifier((listener) -> {\n        mockitoSession.getListeners().forEach(l -> {\n            MethodInvocationReport methodInvocationReport = new MethodInvocationReport(listener);\n            try {\n                l.reportInvocation(methodInvocationReport);\n            } catch (Exception ex) {\n                throw new RuntimeException(ex);\n            }\n        });\n    });\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e6bcc934c 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+    InvocationContainer invocationContainer = newMockHandler.getInvocationContainer();\n+    MockitoCore mockitoCore = new MockitoCore();\n+    MockitoSession mockitoSession = mockitoCore.mockitoSession().startMockingSession();\n+    invocationContainer.setNotifier((listener) -> {\n+        mockitoSession.getListeners().forEach(l -> {\n+            MethodInvocationReport methodInvocationReport = new MethodInvocationReport(listener);\n+            try {\n+                l.reportInvocation(methodInvocationReport);\n+            } catch (Exception ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        });\n+    });\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}