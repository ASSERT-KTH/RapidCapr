{
    "patch": "public String getprop() {\n    String warnings = \"\";\n    Properties props = System.getProperties();\n    Object val = props.get(\"myprop\");\n    if (val != null) {\n        warnings += \"myprop is already set\\n\";\n    } else {\n        props.put(\"myprop\", \"myvalue\");\n    }\n    return warnings;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..4aea5583 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop() {\n+    String warnings = \"\";\n+    Properties props = System.getProperties();\n+    Object val = props.get(\"myprop\");\n+    if (val != null) {\n+        warnings += \"myprop is already set\\n\";\n+    } else {\n+        props.put(\"myprop\", \"myvalue\");\n+    }\n+    return warnings;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}