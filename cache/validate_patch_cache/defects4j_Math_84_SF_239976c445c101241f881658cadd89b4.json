{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n\t    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n\t\twhile (true) {\n\n\t\t\tincrementIterationsCounter();\n\n\t\t\t// save the original vertex\n\t\t\tfinal RealPointValuePair[] original = simplex;\n\t\t\tfinal RealPointValuePair best = original[0];\n\n\t\t\t// perform a reflection step\n\t\t\tfinal RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\t\t\tif (comparator.compare(reflected, best) < 0) {\n\n\t\t\t\t// compute the expanded simplex\n\t\t\t\tfinal RealPointValuePair[] reflectedSimplex = simplex;\n\t\t\t\tfinal RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n\n\t\t\t\tif (comparator.compare(expanded, reflected) < 0) {\n\t\t\t\t\t// accept the expanded simplex\n\t\t\t\t\tsimplex = expanded.getPoint() != reflected.getPoint() ? expanded.getPoint() : reflectedSimplex;\n\n\t\t\t\t} else {\n\t\t\t\t\t// accept the reflected simplex\n\t\t\t\t\tsimplex = reflectedSimplex;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// compute the contracted simplex\n\t\t\tfinal RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\t\t\tif (comparator.compare(contracted, best) < 0) {\n\t\t\t\t// accept the contracted simplex\n\t\t\t\tsimplex = contracted.getPoint() != best.getPoint() ? contracted.getPoint() : original;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// shrink the simplex\n\t\t\tsimplex = shrink(original, comparator);\n\t\t}\n\n\t}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e2118986d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,52 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+\t    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+\t\twhile (true) {\n \n-            incrementIterationsCounter();\n+\t\t\tincrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+\t\t\t// save the original vertex\n+\t\t\tfinal RealPointValuePair[] original = simplex;\n+\t\t\tfinal RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+\t\t\t// perform a reflection step\n+\t\t\tfinal RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+\t\t\tif (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+\t\t\t\t// compute the expanded simplex\n+\t\t\t\tfinal RealPointValuePair[] reflectedSimplex = simplex;\n+\t\t\t\tfinal RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n \n-                return;\n+\t\t\t\tif (comparator.compare(expanded, reflected) < 0) {\n+\t\t\t\t\t// accept the expanded simplex\n+\t\t\t\t\tsimplex = expanded.getPoint() != reflected.getPoint() ? expanded.getPoint() : reflectedSimplex;\n \n-            }\n+\t\t\t\t} else {\n+\t\t\t\t\t// accept the reflected simplex\n+\t\t\t\t\tsimplex = reflectedSimplex;\n+\t\t\t\t}\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+\t\t\t\treturn;\n \n-            // check convergence\n-                return;\n-            }\n+\t\t\t}\n \n-        }\n+\t\t\t// compute the contracted simplex\n+\t\t\tfinal RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+\t\t\tif (comparator.compare(contracted, best) < 0) {\n+\t\t\t\t// accept the contracted simplex\n+\t\t\t\tsimplex = contracted.getPoint() != best.getPoint() ? contracted.getPoint() : original;\n \n-    }\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// shrink the simplex\n+\t\t\tsimplex = shrink(original, comparator);\n+\t\t}\n+\n+\t}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}