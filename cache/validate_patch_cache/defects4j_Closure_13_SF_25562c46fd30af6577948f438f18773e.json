{
    "patch": "private void traverse(Node node) {\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    Queue<Node> queue = new LinkedList<>();\n    queue.offer(node);\n\n    int visits = 0;\n    boolean shouldContinue = true;\n    while (shouldContinue && visits < 10000) {\n        int size = queue.size();\n        shouldContinue = false;\n        for (int i = 0; i < size; i++) {\n            Node current = queue.poll();\n            Node c = current.getFirstChild();\n            while (c != null) {\n                Node next = c.getNext();\n                queue.offer(c);\n                c = next;\n            }\n\n            visit(current);\n\n            if (shouldRetraverse(current)) {\n                shouldContinue = true;\n            }\n        }\n\n        visits++;\n    }\n\n    if (visits >= 10000) {\n        throw new IllegalStateException(\"Too many iterations.\");\n    }\n\n    exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..879f8daa 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,44 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n+private void traverse(Node node) {\n     if (!shouldVisit(node)) {\n-      return;\n+        return;\n     }\n \n+    Queue<Node> queue = new LinkedList<>();\n+    queue.offer(node);\n+\n     int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+    boolean shouldContinue = true;\n+    while (shouldContinue && visits < 10000) {\n+        int size = queue.size();\n+        shouldContinue = false;\n+        for (int i = 0; i < size; i++) {\n+            Node current = queue.poll();\n+            Node c = current.getFirstChild();\n+            while (c != null) {\n+                Node next = c.getNext();\n+                queue.offer(c);\n+                c = next;\n+            }\n+\n+            visit(current);\n+\n+            if (shouldRetraverse(current)) {\n+                shouldContinue = true;\n+            }\n+        }\n \n-      visit(node);\n-      visits++;\n+        visits++;\n+    }\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    if (visits >= 10000) {\n+        throw new IllegalStateException(\"Too many iterations.\");\n+    }\n \n     exitNode(node);\n-  }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}