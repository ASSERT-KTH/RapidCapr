{
    "patch": "public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) { // use regularizedGammaQ because its faster than regularizedGammaP\n        double regularizedGammaQ = Gamma.regularizedGammaQ(a, x, epsilon, maxIterations);\n        return 1.0 - regularizedGammaQ;\n    }\n    double previous = 0.0;\n    double current = 1.0 / a;\n    double gln = Gamma.logGamma(a);\n    for (int i = 1; i <= maxIterations; i++) {\n        double aPlusI = a + i;\n        double denominator = aPlusI * current + x;\n        previous = current;\n        current = 1.0 / denominator;\n        if (Math.abs(current - previous) < Math.abs(previous) * epsilon) {\n            return Math.exp(-x + a * Math.log(x) - gln) * current * Math.pow(x / a, a);\n        }\n    }\n    throw new MaxIterationsExceededException(maxIterations);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..f6f505cce 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,31 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) { // use regularizedGammaQ because its faster than regularizedGammaP\n+        double regularizedGammaQ = Gamma.regularizedGammaQ(a, x, epsilon, maxIterations);\n+        return 1.0 - regularizedGammaQ;\n+    }\n+    double previous = 0.0;\n+    double current = 1.0 / a;\n+    double gln = Gamma.logGamma(a);\n+    for (int i = 1; i <= maxIterations; i++) {\n+        double aPlusI = a + i;\n+        double denominator = aPlusI * current + x;\n+        previous = current;\n+        current = 1.0 / denominator;\n+        if (Math.abs(current - previous) < Math.abs(previous) * epsilon) {\n+            return Math.exp(-x + a * Math.log(x) - gln) * current * Math.pow(x / a, a);\n+        }\n+    }\n+    throw new MaxIterationsExceededException(maxIterations);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}