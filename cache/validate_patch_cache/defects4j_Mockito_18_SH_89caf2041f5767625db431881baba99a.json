{
    "patch": "public Object handleMethodReturn(JoinPoint.StaticPart staticPart, Method method, Object returnValue) {\n    // check if method has an @Cacheable annotation\n    if (method.isAnnotationPresent(Cacheable.class)) {\n        // retrieve cache key\n        String key = generateCacheKey(staticPart, method, method.getAnnotation(Cacheable.class).key(), method.getParameters(), new Object[]{});\n        // store return value into cache\n        cache.put(key, returnValue);\n        return returnValue;  // fixed code\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}