{
    "patch": "import static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\n\npublic class SampleTest {\n\n    private Values values;\n\n    @BeforeEach\n    void setUp() {\n        this.values = Mockito.mock(Values.class);\n    }\n\n    @Test\n    void should_return_empty_iterable() {\n        Mockito.when(values.returnValueFor(Iterable.class)).thenReturn(null);\n\n        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..da2a48d97 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,30 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+\n+public class SampleTest {\n+\n+    private Values values;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.values = Mockito.mock(Values.class);\n+    }\n+\n+    @Test\n+    void should_return_empty_iterable() {\n+        Mockito.when(values.returnValueFor(Iterable.class)).thenReturn(null);\n+\n+        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n+    }\n+\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}