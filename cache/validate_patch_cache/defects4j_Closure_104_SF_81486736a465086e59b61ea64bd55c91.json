{
    "patch": "  private JSType greatestSubtypeHelper_(\n      ImmutableSet<String> googTypes, SubtypeCache subSuperMap) {\n    checkArgument(!googTypes.isEmpty());\n    List<JSType> types = new ArrayList<>();\n    int nNativeTypes = 0;\n    for (String typeString : googTypes) {\n      JSType type = createTypeFromComment(typeString);\n      if (type != null) {\n        ++nNativeTypes;\n        if (!type.isBottom()) {\n          types.add(type);\n        }\n      }\n    }\n\n    // a bottom type in the list makes the greatest subtype the bottom type.\n    if (types.isEmpty()) {\n      return JSType.BOTTOM;\n    }\n\n    // a native type in the list makes the greatest subtype a union over the non-native types, and,\n    // if the native type is a loose subtype of the others but is not a subtype of their\n    // intersection, we return JSType.TOP, which means that the greatest subtype is unknown.\n    if (nNativeTypes == googTypes.size()) {\n      JSTypeBuilder builder = new JSTypeBuilder(registry());\n      for (JSType type : types) {\n        builder.addAlternate(type);\n      }\n      JSType result = builder.build();\n      return result;\n    }\n\n    JSType result = null;\n    for (JSType type : types) {\n      if (result == null) {\n        result = type;\n      } else {\n        result = result.getGreatestSubtype(type, subSuperMap);\n        // If the intersection of the types is bottom, return bottom because there is no overlap.\n        if (result.isBottom()) {\n          return result;\n        }\n      }\n    }\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..de1ffda3 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,55 +279,53 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+  private JSType greatestSubtypeHelper_(\n+      ImmutableSet<String> googTypes, SubtypeCache subSuperMap) {\n+    checkArgument(!googTypes.isEmpty());\n+    List<JSType> types = new ArrayList<>();\n+    int nNativeTypes = 0;\n+    for (String typeString : googTypes) {\n+      JSType type = createTypeFromComment(typeString);\n+      if (type != null) {\n+        ++nNativeTypes;\n+        if (!type.isBottom()) {\n+          types.add(type);\n         }\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n \n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n+    // a bottom type in the list makes the greatest subtype the bottom type.\n+    if (types.isEmpty()) {\n+      return JSType.BOTTOM;\n     }\n-  }\n \n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n+    // a native type in the list makes the greatest subtype a union over the non-native types, and,\n+    // if the native type is a loose subtype of the others but is not a subtype of their\n+    // intersection, we return JSType.TOP, which means that the greatest subtype is unknown.\n+    if (nNativeTypes == googTypes.size()) {\n+      JSTypeBuilder builder = new JSTypeBuilder(registry());\n+      for (JSType type : types) {\n+        builder.addAlternate(type);\n+      }\n+      JSType result = builder.build();\n+      return result;\n+    }\n \n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n+    JSType result = null;\n+    for (JSType type : types) {\n+      if (result == null) {\n+        result = type;\n+      } else {\n+        result = result.getGreatestSubtype(type, subSuperMap);\n+        // If the intersection of the types is bottom, return bottom because there is no overlap.\n+        if (result.isBottom()) {\n+          return result;\n+        }\n       }\n     }\n+    return result;\n+  }\n+    }\n     return true;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}