{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    // Validate input parameters\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    int newPos = -1;\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    try {\n        // Attempt to parse the input string\n        newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            // Compute the millisecond value based on the parsed fields\n            instantMillis = bucket.computeMillis(true, text);\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                // If an offset was parsed, adjust the millisecond value to the corresponding time in its zone.\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                if (!zone.equals(parsedZone)) {\n                    chrono = chrono.withZone(parsedZone);\n                    zone = parsedZone;\n                    instantMillis = instantMillis + zone.getOffset(instantMillis);\n                }\n            } else {\n                // If no offset was parsed, adjust the millisecond value to the current time in its zone.\n                instantMillis = instantMillis + zone.getOffset(instantMillis);\n            }\n            instant.setMillis(instantMillis);\n            if (bucket.getZone() != null && !bucket.getZone().equals(zone)) {\n                // If a time zone was parsed, adjust the instant and chronology accordingly.\n                chrono = chrono.withZone(bucket.getZone());\n                zone = bucket.getZone();\n                instant.setMillis(instant.getMillis() + zone.getOffset(instantMillis));\n                instant.setChronology(chrono);\n            }\n            instant.setZone(zone);\n        }\n    } catch (IllegalArgumentException e) {\n        // Exception occurred during parsing, do nothing\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..12dababd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,55 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    // Validate input parameters\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    \n+    int newPos = -1;\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+    try {\n+        // Attempt to parse the input string\n+        newPos = parser.parseInto(bucket, text, position);\n+        if (newPos >= 0) {\n+            // Compute the millisecond value based on the parsed fields\n+            instantMillis = bucket.computeMillis(true, text);\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                // If an offset was parsed, adjust the millisecond value to the corresponding time in its zone.\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                if (!zone.equals(parsedZone)) {\n+                    chrono = chrono.withZone(parsedZone);\n+                    zone = parsedZone;\n+                    instantMillis = instantMillis + zone.getOffset(instantMillis);\n+                }\n+            } else {\n+                // If no offset was parsed, adjust the millisecond value to the current time in its zone.\n+                instantMillis = instantMillis + zone.getOffset(instantMillis);\n+            }\n+            instant.setMillis(instantMillis);\n+            if (bucket.getZone() != null && !bucket.getZone().equals(zone)) {\n+                // If a time zone was parsed, adjust the instant and chronology accordingly.\n+                chrono = chrono.withZone(bucket.getZone());\n+                zone = bucket.getZone();\n+                instant.setMillis(instant.getMillis() + zone.getOffset(instantMillis));\n+                instant.setChronology(chrono);\n+            }\n+            instant.setZone(zone);\n         }\n-        return newPos;\n+    } catch (IllegalArgumentException e) {\n+        // Exception occurred during parsing, do nothing\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}