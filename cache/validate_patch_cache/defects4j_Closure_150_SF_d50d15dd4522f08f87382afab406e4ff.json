{
    "patch": "    @Override \n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) {\n            return;\n        }\n        \n        attachLiteralTypes(n);\n\n        int type = n.getType();\n        if (type == Token.FUNCTION) {\n            if (NodeUtil.isFunctionExpression(n) || parent == null ||\n                    parent.getType() == Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n        } else if (type == Token.CATCH) {\n            defineCatch(n, parent);\n        } else if (type == Token.LP) {\n            if (isArgumentList(parent)\n                    || isFunctionNode(parent) \n                    || parent.getType() == Token.SCRIPT) {\n                handleFunctionInputs(n);\n            }\n        } else if (type == Token.NAME || type == Token.VAR) {\n            defineVar(n, parent);\n        }\n    }\n\n    private boolean isFunctionNode(Node node) {\n        return node.getType() == Token.FUNCTION\n                || node.getType() == Token.FUNCTION_DECL\n                || node.getType() == Token.GETTER_DEF\n                || node.getType() == Token.SETTER_DEF\n                || node.getType() == Token.METHOD_DEF;\n    }\n\n    private boolean isArgumentList(Node node) {\n        return node.getType() == Token.CALL || node.getType() == Token.NEW;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e717803e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,44 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override \n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) {\n+            return;\n+        }\n+        \n+        attachLiteralTypes(n);\n+\n+        int type = n.getType();\n+        if (type == Token.FUNCTION) {\n+            if (NodeUtil.isFunctionExpression(n) || parent == null ||\n+                    parent.getType() == Token.NAME) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+        } else if (type == Token.CATCH) {\n+            defineCatch(n, parent);\n+        } else if (type == Token.LP) {\n+            if (isArgumentList(parent)\n+                    || isFunctionNode(parent) \n+                    || parent.getType() == Token.SCRIPT) {\n+                handleFunctionInputs(n);\n+            }\n+        } else if (type == Token.NAME || type == Token.VAR) {\n+            defineVar(n, parent);\n+        }\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    private boolean isFunctionNode(Node node) {\n+        return node.getType() == Token.FUNCTION\n+                || node.getType() == Token.FUNCTION_DECL\n+                || node.getType() == Token.GETTER_DEF\n+                || node.getType() == Token.SETTER_DEF\n+                || node.getType() == Token.METHOD_DEF;\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    private boolean isArgumentList(Node node) {\n+        return node.getType() == Token.CALL || node.getType() == Token.NEW;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}