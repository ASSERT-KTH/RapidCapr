{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n    JSType type;\n    if (constructorType.equals(getNativeType(UNKNOWN_TYPE))) {\n        type = getNativeType(UNKNOWN_TYPE);\n    } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n            ct = (FunctionType) constructorType;\n        }\n\n        if (ct != null && ct.isConstructor()) {\n            type = ct.getInstanceType();\n        } else {\n            type = getNativeType(OBJECT_TYPE);\n        }\n    }\n    if (n.getNext() != null) { // Handle type annotations for new expressions, which have non-null\n                               // next nodes in the parse tree.\n        scope = traverse(n.getNext(), scope);\n        type = pickAnnotationDeclarationType(type, n.getJSDocInfo(), constructorType);\n        setTypeI(n.getNext(), getNativeType(NUMBER_STRING_BOOLEAN_VOID_TYPE), false);\n    }\n\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..42bab81d 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,38 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n+    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n+    JSType type;\n+    if (constructorType.equals(getNativeType(UNKNOWN_TYPE))) {\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+    } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n         if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+            ct = (FunctionType) constructorType;\n         }\n+\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+            type = ct.getInstanceType();\n+        } else {\n+            type = getNativeType(OBJECT_TYPE);\n         }\n-      }\n     }\n+    if (n.getNext() != null) { // Handle type annotations for new expressions, which have non-null\n+                               // next nodes in the parse tree.\n+        scope = traverse(n.getNext(), scope);\n+        type = pickAnnotationDeclarationType(type, n.getJSDocInfo(), constructorType);\n+        setTypeI(n.getNext(), getNativeType(NUMBER_STRING_BOOLEAN_VOID_TYPE), false);\n+    }\n+\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}