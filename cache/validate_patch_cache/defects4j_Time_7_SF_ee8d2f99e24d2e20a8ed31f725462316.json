{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n\n    DateTimeParserBucket bucket;\n    if (iPivotYear != null) {\n        bucket = new DateTimeParserBucket(instant.getMillis(), chrono, iLocale,\n                iPivotYear.intValue(), chrono.year().get(instant));\n    } else {\n        bucket = new DateTimeParserBucket(instant.getMillis(), chrono, iLocale);\n    }\n\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos < 0) {\n        instant.setMillis(bucket.computeMillis(true, text));\n        if (bucket.getOffsetInteger() != null) {\n            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n            chrono = chrono.withZone(zone);\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            chrono = chrono.withZone(zone);\n        }\n    } else {\n        if (bucket.getOffsetInteger() != null) {\n            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n            chrono = chrono.withZone(zone);\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            chrono = chrono.withZone(zone);\n            instant.setChronology(chrono);\n            newPos = bucket.old0;\n        } else if (iZone != null) {\n            zone = iZone;\n            if (chrono.getZone() != zone) {\n                chrono = chrono.withZone(zone);\n                instant.setChronology(chrono);\n            }\n        } else if (iOffsetParsed) {\n            long parsedMillis = bucket.computeMillis(true, text);\n            int parsedOffset = bucket.getOffsetInteger() != null ? bucket.getOffsetInteger() : 0;\n            parsedMillis -= parsedOffset;\n            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n            instant.setMillis(parsedMillis);\n            if (chrono.getZone() != zone) {\n                chrono = chrono.withZone(zone);\n                instant.setChronology(chrono);\n            }\n        } else if (bucket.getOffsetInteger() == null) {\n            instant.setMillis(bucket.computeMillis(false, text));\n        } else {\n            instant.setMillis(bucket.computeMillis(true, text));\n        }\n    }\n\n    instant.setZone(zone);\n    instant.setChronology(chrono);\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..77c3f7ef 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,71 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+\n+    DateTimeParserBucket bucket;\n+    if (iPivotYear != null) {\n+        bucket = new DateTimeParserBucket(instant.getMillis(), chrono, iLocale,\n+                iPivotYear.intValue(), chrono.year().get(instant));\n+    } else {\n+        bucket = new DateTimeParserBucket(instant.getMillis(), chrono, iLocale);\n+    }\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos < 0) {\n+        instant.setMillis(bucket.computeMillis(true, text));\n+        if (bucket.getOffsetInteger() != null) {\n+            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+            chrono = chrono.withZone(zone);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n+            chrono = chrono.withZone(zone);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    } else {\n+        if (bucket.getOffsetInteger() != null) {\n+            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+            chrono = chrono.withZone(zone);\n+        } else if (bucket.getZone() != null) {\n+            zone = bucket.getZone();\n+            chrono = chrono.withZone(zone);\n+            instant.setChronology(chrono);\n+            newPos = bucket.old0;\n+        } else if (iZone != null) {\n+            zone = iZone;\n+            if (chrono.getZone() != zone) {\n+                chrono = chrono.withZone(zone);\n+                instant.setChronology(chrono);\n+            }\n+        } else if (iOffsetParsed) {\n+            long parsedMillis = bucket.computeMillis(true, text);\n+            int parsedOffset = bucket.getOffsetInteger() != null ? bucket.getOffsetInteger() : 0;\n+            parsedMillis -= parsedOffset;\n+            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            instant.setMillis(parsedMillis);\n+            if (chrono.getZone() != zone) {\n+                chrono = chrono.withZone(zone);\n+                instant.setChronology(chrono);\n+            }\n+        } else if (bucket.getOffsetInteger() == null) {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+        } else {\n+            instant.setMillis(bucket.computeMillis(true, text));\n         }\n-        return newPos;\n     }\n \n+    instant.setZone(zone);\n+    instant.setChronology(chrono);\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: incompatible types: ReadWritableInstant cannot be converted to long",
    "test_result": "ERROR"
}