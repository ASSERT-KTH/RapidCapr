{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // Norm computation.\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // Normalize v1 in order to have (v1'|v1') = (u1|u1).\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // Adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2).\n    Vector3D v2Prime = new Vector3D(v2.subtract(new Vector3D(u2).scalarMultiply(u1.dotProduct(u2) / u1u1)));\n    double v1v2Prime = v1.dotProduct(v2Prime);\n    double v2PrimeNorm = v2Prime.getNorm();\n    if (v2PrimeNorm == 0) { // Unlikely case where u1 is parallel to u2 and also v1 to v2.\n        /*\n         * The problem reduces to finding the rotation between u1 and v1. If k = cross(u1, v1)\n         * is zero, u1 and v1 are parallel. Any rotation about u1 axis can transform u1 to v1.\n         * Otherwise q = u1*w*sin(theta/2); q0^2 = cos(theta/2)\n         * where w = k/|k|. Therefore sin^2(theta/2) = |k|^2/(u1^2 v1^2).\n         * cos^2(theta/2) = u1*v1/|k|.\n         */\n        Vector3D k = Vector3D.crossProduct(u1, v1);\n        double sin = k.getNorm() / (u1.getNorm() * v1.getNorm());\n        double cos = u1.dotProduct(v1) / k.getNorm();\n        q0 = FastMath.sqrt(0.5 * (cos + 1));\n        double qr = FastMath.sqrt(0.5 * (1 - cos));\n        if (FastMath.abs(sin) < qr) {\n            q1 = qr * u1.getX();\n            q2 = qr * u1.getY();\n            q3 = qr * u1.getZ();\n        } else {\n            qr = FastMath.sqrt(0.5 / FastMath.abs(sin));\n            if (sin < 0) {\n                qr = -qr;\n            }\n            q1 = qr * k.getX();\n            q2 = qr * k.getY();\n            q3 = qr * k.getZ();\n        }\n        return;\n    }\n    v2Prime = new Vector3D(v2Prime.scalarMultiply(1 / v2PrimeNorm));\n    double alpha = FastMath.sqrt(v2v2 - v1v2Prime * v1v2Prime);\n    q0 = (v1v2Prime * u1.dotProduct(u2) + alpha * u1.dotProduct(v2Prime)) / (u1u1 * v2PrimeNorm);\n    q1 = (v1v2Prime * u2.getX() + alpha * v2Prime.getX()) / u1u1;\n    q2 = (v1v2Prime * u2.getY() + alpha * v2Prime.getY()) / u1u1;\n    q3 = (v1v2Prime * u2.getZ() + alpha * v2Prime.getZ()) / u1u1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..0b184500d 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,69 +310,59 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n-\n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+\n+    // Norm computation.\n+    double u1u1 = u1.getNormSq();\n+    double u2u2 = u2.getNormSq();\n+    double v1v1 = v1.getNormSq();\n+    double v2v2 = v2.getNormSq();\n+    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+    }\n \n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n+    // Normalize v1 in order to have (v1'|v1') = (u1|u1).\n+    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n+\n+    // Adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2).\n+    Vector3D v2Prime = new Vector3D(v2.subtract(new Vector3D(u2).scalarMultiply(u1.dotProduct(u2) / u1u1)));\n+    double v1v2Prime = v1.dotProduct(v2Prime);\n+    double v2PrimeNorm = v2Prime.getNorm();\n+    if (v2PrimeNorm == 0) { // Unlikely case where u1 is parallel to u2 and also v1 to v2.\n+        /*\n+         * The problem reduces to finding the rotation between u1 and v1. If k = cross(u1, v1)\n+         * is zero, u1 and v1 are parallel. Any rotation about u1 axis can transform u1 to v1.\n+         * Otherwise q = u1*w*sin(theta/2); q0^2 = cos(theta/2)\n+         * where w = k/|k|. Therefore sin^2(theta/2) = |k|^2/(u1^2 v1^2).\n+         * cos^2(theta/2) = u1*v1/|k|.\n+         */\n+        Vector3D k = Vector3D.crossProduct(u1, v1);\n+        double sin = k.getNorm() / (u1.getNorm() * v1.getNorm());\n+        double cos = u1.dotProduct(v1) / k.getNorm();\n+        q0 = FastMath.sqrt(0.5 * (cos + 1));\n+        double qr = FastMath.sqrt(0.5 * (1 - cos));\n+        if (FastMath.abs(sin) < qr) {\n+            q1 = qr * u1.getX();\n+            q2 = qr * u1.getY();\n+            q3 = qr * u1.getZ();\n+        } else {\n+            qr = FastMath.sqrt(0.5 / FastMath.abs(sin));\n+            if (sin < 0) {\n+                qr = -qr;\n+            }\n+            q1 = qr * k.getX();\n+            q2 = qr * k.getY();\n+            q3 = qr * k.getZ();\n+        }\n         return;\n-      }\n-\n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n-\n     }\n-\n-  }\n+    v2Prime = new Vector3D(v2Prime.scalarMultiply(1 / v2PrimeNorm));\n+    double alpha = FastMath.sqrt(v2v2 - v1v2Prime * v1v2Prime);\n+    q0 = (v1v2Prime * u1.dotProduct(u2) + alpha * u1.dotProduct(v2Prime)) / (u1u1 * v2PrimeNorm);\n+    q1 = (v1v2Prime * u2.getX() + alpha * v2Prime.getX()) / u1u1;\n+    q2 = (v1v2Prime * u2.getY() + alpha * v2Prime.getY()) / u1u1;\n+    q3 = (v1v2Prime * u2.getZ() + alpha * v2Prime.getZ()) / u1u1;\n+}\n \n   // compute the vectorial part\n   c = FastMath.sqrt(c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}