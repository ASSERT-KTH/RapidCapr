{
    "patch": "      if (n.getType() == Token.FUNCTION && NodeUtil.mayHaveSideEffects(n)) {\n        // if this function definition may have side-effects (such as code\n        // generation), then don't traverse it because traversing it now might\n        // interfere with codegen later. E.g., in\n        // var f = function() { return 1; };\n        // a(); f(); b();\n        // if we traverse f(), then we'll move its definition to the top\n        // level, and we'll end up with\n        // var f; a(); f(); b(); f=function(){return1};\n        // f will be invoked prematurely.\n        return false;\n      }\n\n      if (NodeUtil.isFunctionExpression(n)) {\n        Node lp = parent.getParent();\n        if (NodeUtil.isNameDeclaration(lp)) {\n          return NodeUtil.getBestJSDocInfo(lp) == null;\n        }\n        return NodeUtil.isGet(parent) && NodeUtil.isGet(lp) &&\n            parent.getLastChild().getString().equals(\"prototype\") &&\n            lp.getLastChild().getString().equals(\"prototype\");\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          boolean isLhsGetProp = NodeUtil.isGet(lhs);\n          if (isLhsGetProp) {\n            Node llhs = lhs.getFirstChild();\n            isLhsGetProp = llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\");\n          }\n          if (isLhsGetProp) {\n            return false;\n          }\n        }\n      }\n\n      return true;        ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..917c2dfc 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,56 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getType() == Token.FUNCTION && NodeUtil.mayHaveSideEffects(n)) {\n+        // if this function definition may have side-effects (such as code\n+        // generation), then don't traverse it because traversing it now might\n+        // interfere with codegen later. E.g., in\n+        // var f = function() { return 1; };\n+        // a(); f(); b();\n+        // if we traverse f(), then we'll move its definition to the top\n+        // level, and we'll end up with\n+        // var f; a(); f(); b(); f=function(){return1};\n+        // f will be invoked prematurely.\n+        return false;\n+      }\n+\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        Node lp = parent.getParent();\n+        if (NodeUtil.isNameDeclaration(lp)) {\n+          return NodeUtil.getBestJSDocInfo(lp) == null;\n+        }\n+        return NodeUtil.isGet(parent) && NodeUtil.isGet(lp) &&\n+            parent.getLastChild().getString().equals(\"prototype\") &&\n+            lp.getLastChild().getString().equals(\"prototype\");\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          boolean isLhsGetProp = NodeUtil.isGet(lhs);\n+          if (isLhsGetProp) {\n+            Node llhs = lhs.getFirstChild();\n+            isLhsGetProp = llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\");\n+          }\n+          if (isLhsGetProp) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;        \n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}