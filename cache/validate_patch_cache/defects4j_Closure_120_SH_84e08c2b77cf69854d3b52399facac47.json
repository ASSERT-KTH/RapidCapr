{
    "patch": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      break;\n    } else if (block.isLoop) {\n      return !isAssignedInLoop();\n    }\n  }\n\n  return true;\n}\n\n/**\n * @return Whether the variable is assigned again inside the loop where it\n *     was initialized.\n */\nprivate boolean isAssignedInLoop() {\n  for (Reference use : getAllNonDeclarationReferences()) {\n    if (use.getBasicBlock().isLoop && use.getParentIndex() > getDeclarationIndex()) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..643548ff 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,37 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n+\n+  // Make sure this assignment is not in a loop.\n+  for (BasicBlock block = ref.getBasicBlock();\n+       block != null; block = block.getParent()) {\n+    if (block.isFunction) {\n+      break;\n+    } else if (block.isLoop) {\n+      return !isAssignedInLoop();\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+/**\n+ * @return Whether the variable is assigned again inside the loop where it\n+ *     was initialized.\n+ */\n+private boolean isAssignedInLoop() {\n+  for (Reference use : getAllNonDeclarationReferences()) {\n+    if (use.getBasicBlock().isLoop && use.getParentIndex() > getDeclarationIndex()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}