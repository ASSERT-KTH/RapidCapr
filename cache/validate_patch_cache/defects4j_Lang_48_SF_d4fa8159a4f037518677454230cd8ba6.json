{
    "patch": "import java.lang.reflect.Array;\nimport java.math.BigDecimal;\nimport java.util.Arrays;\n\npublic class EqualsBuilder {\n\n    private boolean isEquals;\n\n    public EqualsBuilder() {\n        this.isEquals = true;\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            // If any previous comparison failed, just return\n            return this;\n        }\n        if (lhs == rhs) {\n            // If both objects are the same instance, no need to compare\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            // If one is null and the other is not, the objects are not equal\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.getClass().isArray() && rhs.getClass().isArray()) {\n            // Both arguments are arrays\n            \n            if (!lhs.getClass().equals(rhs.getClass())) {\n                // Different array types are not equal\n                this.setEquals(false);\n                return this;\n            }\n            int lhsLength = Array.getLength(lhs);\n            int rhsLength = Array.getLength(rhs);\n            if (lhsLength != rhsLength) {\n                // Arrays of different length are not equal\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0 ; i < lhsLength ; i++) {\n                Object lhsObj = Array.get(lhs, i);\n                Object rhsObj = Array.get(rhs, i);\n                this.append(lhsObj, rhsObj);\n                if (isEquals == false) {\n                    return this;\n                }\n            }\n        } else if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {\n            // We need to use the compareTo method to compare BigDecimal objects\n            this.setEquals(((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0);\n        } else {\n            // Default object comparison\n            this.setEquals(lhs.equals(rhs));\n        }\n        return this;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    private void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..4341629a 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,50 +364,75 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.lang.reflect.Array;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+public class EqualsBuilder {\n+\n+    private boolean isEquals;\n+\n+    public EqualsBuilder() {\n+        this.isEquals = true;\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n+            // If any previous comparison failed, just return\n             return this;\n         }\n         if (lhs == rhs) {\n+            // If both objects are the same instance, no need to compare\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n+            // If one is null and the other is not, the objects are not equal\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+        if (lhs.getClass().isArray() && rhs.getClass().isArray()) {\n+            // Both arguments are arrays\n+            \n+            if (!lhs.getClass().equals(rhs.getClass())) {\n+                // Different array types are not equal\n+                this.setEquals(false);\n+                return this;\n+            }\n+            int lhsLength = Array.getLength(lhs);\n+            int rhsLength = Array.getLength(rhs);\n+            if (lhsLength != rhsLength) {\n+                // Arrays of different length are not equal\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0 ; i < lhsLength ; i++) {\n+                Object lhsObj = Array.get(lhs, i);\n+                Object rhsObj = Array.get(rhs, i);\n+                this.append(lhsObj, rhsObj);\n+                if (isEquals == false) {\n+                    return this;\n+                }\n+            }\n+        } else if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {\n+            // We need to use the compareTo method to compare BigDecimal objects\n+            this.setEquals(((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0);\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Default object comparison\n+            this.setEquals(lhs.equals(rhs));\n         }\n         return this;\n     }\n \n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    private void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}