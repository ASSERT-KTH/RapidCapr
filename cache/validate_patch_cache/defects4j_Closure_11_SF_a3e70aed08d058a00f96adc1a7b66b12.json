{
    "patch": "/**\n * Gets the system property with the given key and logs a warning if it is not set\n *\n * @param key the key of the system property to get\n * @return the value of the system property, or {@code null} if it is not set\n */\npublic static String getProp(String key) {\n    String value = System.getProperty(key);\n    if (value == null || value.trim().isEmpty()) {\n        Logger.getLogger(YourClassName.class.getName())\n                .log(Level.WARNING, \"System property {0} not set\", key);\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..782b2b9b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+/**\n+ * Gets the system property with the given key and logs a warning if it is not set\n+ *\n+ * @param key the key of the system property to get\n+ * @return the value of the system property, or {@code null} if it is not set\n+ */\n+public static String getProp(String key) {\n+    String value = System.getProperty(key);\n+    if (value == null || value.trim().isEmpty()) {\n+        Logger.getLogger(YourClassName.class.getName())\n+                .log(Level.WARNING, \"System property {0} not set\", key);\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}