{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode lastArg;\nwhile ((lastArg = argList.getLastChild()) != null) {\n  Var var = fnScope.getVar(lastArg.getString());\n  if (!referenced.contains(var)) {\n    argList.removeChild(lastArg);\n    compiler.reportCodeChange();\n  } else {\n    if (lastArg.isDefaultValue() || lastArg.getChildCount() > 0) {\n      // Don't strip arguments that have default values or are object patterns\n      // or array patterns. Removing these can change argument behavior.\n      return;\n    }\n    break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..dab7aea0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg;\n+while ((lastArg = argList.getLastChild()) != null) {\n+  Var var = fnScope.getVar(lastArg.getString());\n+  if (!referenced.contains(var)) {\n+    argList.removeChild(lastArg);\n+    compiler.reportCodeChange();\n+  } else {\n+    if (lastArg.isDefaultValue() || lastArg.getChildCount() > 0) {\n+      // Don't strip arguments that have default values or are object patterns\n+      // or array patterns. Removing these can change argument behavior.\n+      return;\n+    }\n+    break;\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}