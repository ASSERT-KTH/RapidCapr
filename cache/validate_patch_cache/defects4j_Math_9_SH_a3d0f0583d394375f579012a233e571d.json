{
    "patch": "public void testRevert() {\n    // setup\n    Line line = new Line(new Vector3D(0.05, 0.10, -0.50), new Vector3D(-0.5, 0.2, -0.1));\n    // exercise\n    Line result = line.revert();\n    // verify\n    assertEquals(result.getDirection().getX(), 0.5, 1e-9);\n    assertEquals(result.getDirection().getY(), -0.2, 1e-9);\n    assertEquals(result.getDirection().getZ(), 0.1, 1e-9);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..c852dd231 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+public void testRevert() {\n+    // setup\n+    Line line = new Line(new Vector3D(0.05, 0.10, -0.50), new Vector3D(-0.5, 0.2, -0.1));\n+    // exercise\n+    Line result = line.revert();\n+    // verify\n+    assertEquals(result.getDirection().getX(), 0.5, 1e-9);\n+    assertEquals(result.getDirection().getY(), -0.2, 1e-9);\n+    assertEquals(result.getDirection().getZ(), 0.1, 1e-9);\n+}\n         return reverted;\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}