{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  switch (n.getToken()) {\n    case VAR:\n    case LET:\n    case CONST:\n      // Record global variable declarations\n      if (t.inGlobalScope()) {\n        NameInformation ns = createNameInformation(t, n);\n        if (ns != null) {\n          recordSet(ns.name, n);\n        }\n      }\n      break;\n\n    case FUNCTION:\n      // Record global function declarations\n      if (t.inGlobalScope()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          JsName nameInfo = getName(nameNode.getString(), true);\n          recordSet(nameInfo.name, nameNode);\n        }\n      }\n      break;\n\n    case ASSIGN:\n      // Record assignments\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        if (ns.isPrototype) {\n          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n        } else {\n          recordSet(ns.name, nameNode);\n        }\n      }\n      break;\n\n    case CALL:\n    case NEW:\n      // Record call sites\n      Node callee = n.getFirstChild();\n      if (callee != null) {\n        NameInformation ns = createNameInformation(t, callee, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(\n                name, n, parent, parent.getParent()));\n          }\n        }\n      }\n      break;\n\n    case MEMBER_FUNCTION_DEF:\n    case GETPROP:\n    case GETELEM:\n      // Record property accesses\n      ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        JsName name = getName(ns.name, false);\n        if (name != null) {\n          recordSet(name, n);\n        }\n      }\n      break;\n\n    default:\n      // Ignore other nodes\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..d5c68b7a 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,79 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  switch (n.getToken()) {\n+    case VAR:\n+    case LET:\n+    case CONST:\n+      // Record global variable declarations\n       if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n+        NameInformation ns = createNameInformation(t, n);\n+        if (ns != null) {\n           recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n         }\n       }\n+      break;\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n+    case FUNCTION:\n+      // Record global function declarations\n+      if (t.inGlobalScope()) {\n         Node nameNode = n.getFirstChild();\n-\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+          JsName nameInfo = getName(nameNode.getString(), true);\n+          recordSet(nameInfo.name, nameNode);\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n+      }\n+      break;\n+\n+    case ASSIGN:\n+      // Record assignments\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        if (ns.isPrototype) {\n+          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+        } else {\n+          recordSet(ns.name, nameNode);\n+        }\n+      }\n+      break;\n+\n+    case CALL:\n+    case NEW:\n+      // Record call sites\n+      Node callee = n.getFirstChild();\n+      if (callee != null) {\n+        NameInformation ns = createNameInformation(t, callee, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n           JsName name = getName(ns.name, false);\n           if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n+            refNodes.add(new ClassDefiningFunctionNode(\n+                name, n, parent, parent.getParent()));\n           }\n         }\n       }\n-    }\n+      break;\n+\n+    case MEMBER_FUNCTION_DEF:\n+    case GETPROP:\n+    case GETELEM:\n+      // Record property accesses\n+      ns = createNameInformation(t, n, parent);\n+      if (ns != null) {\n+        JsName name = getName(ns.name, false);\n+        if (name != null) {\n+          recordSet(name, n);\n+        }\n+      }\n+      break;\n+\n+    default:\n+      // Ignore other nodes\n+      break;\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}