{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n    RealMatrix eigenvectors = dec.getV();\n    RealMatrix transpose = eigenvectors.transpose();\n    RealMatrix sqrtEigenvalues = squareRootDiagonal(eigenvalues);\n    RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(transpose);\n    return sqrt;\n}\n\nprivate RealMatrix squareRootDiagonal(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    RealMatrix x = m;\n    RealMatrix z = identity;\n    while (true) {\n        final RealMatrix prevX = x;\n        final RealMatrix prevZ = z;\n        x = x.add(z).scalarMultiply(0.5);\n        z = prevZ.multiply(prevX).scalarMultiply(0.5).add(\n            identity.scalarMultiply(0.5).multiply(prevX).multiply(prevZ)\n        );\n        if (x.subtract(prevX).getNorm() < 1E-6) {\n            break;\n        }\n    }\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1ac7de39c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+    RealMatrix eigenvectors = dec.getV();\n+    RealMatrix transpose = eigenvectors.transpose();\n+    RealMatrix sqrtEigenvalues = squareRootDiagonal(eigenvalues);\n+    RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(transpose);\n+    return sqrt;\n+}\n+\n+private RealMatrix squareRootDiagonal(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    RealMatrix x = m;\n+    RealMatrix z = identity;\n+    while (true) {\n+        final RealMatrix prevX = x;\n+        final RealMatrix prevZ = z;\n+        x = x.add(z).scalarMultiply(0.5);\n+        z = prevZ.multiply(prevX).scalarMultiply(0.5).add(\n+            identity.scalarMultiply(0.5).multiply(prevX).multiply(prevZ)\n+        );\n+        if (x.subtract(prevX).getNorm() < 1E-6) {\n+            break;\n+        }\n     }\n+    return x;\n+}\n }",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}