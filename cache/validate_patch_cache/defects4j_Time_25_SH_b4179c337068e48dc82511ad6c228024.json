{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    } else {\n        int nextOffset = getOffset(nextLocal);\n        if (nextOffset > offsetLocal) {\n            return nextOffset;\n        }\n    }\n} else {\n    long nextLocal = previousTransition(instantAdjusted);\n    long nextAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    } else {\n        int nextOffset = getOffset(nextLocal);\n        if (nextOffset < offsetLocal) {\n            return nextOffset;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..fc522da9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    } else {\n+        int nextOffset = getOffset(nextLocal);\n+        if (nextOffset > offsetLocal) {\n+            return nextOffset;\n+        }\n+    }\n+} else {\n+    long nextLocal = previousTransition(instantAdjusted);\n+    long nextAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    } else {\n+        int nextOffset = getOffset(nextLocal);\n+        if (nextOffset < offsetLocal) {\n+            return nextOffset;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}