{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Count the number of referenced args.\n  int numArgs = 0;\n  boolean foundVarargs = false;\n  for (Node arg : argList.children()) {\n    if (arg.isRest()) {\n      foundVarargs = true;\n      break;\n    }\n    if (referenced.contains(fnScope.getVar(arg.getString()))) {\n      numArgs++;\n    }\n  }\n  int maxArgs = numArgs;\n  if (foundVarargs) {\n    maxArgs++;\n  }\n  int minArgs = maxArgs;\n  // We'll keep the last args if they have side-effects.\n  for (int i = argList.getChildCount() - 1; i >= maxArgs; i--) {\n    Node arg = argList.getChildAtIndex(i);\n    if (NodeUtil.mayHaveSideEffects(arg)) {\n      minArgs = i + 1;\n      break;\n    }\n  }\n  // And the first arg if it is used as a type annotation.\n  if (!referenced.contains(fnScope.getVar(argList.getChildAtIndex(0).getString()))) {\n    for (int i = 0; i < argList.getChildCount(); i++) {\n      Node arg = argList.getChildAtIndex(i);\n      boolean isTypeDeclaration = arg.hasChildren() && arg.getLastChild().isString()\n          && arg.getLastChild().getString().equals(\"type\");\n      if (isTypeDeclaration) {\n        minArgs = i + 1;\n        break;\n      }\n    }\n  }\n  // Strip unreferenced args off the function declaration.\n  while (argList.getChildCount() > maxArgs) {\n    Node lastArg = argList.getLastChild();\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n    } else {\n      break;\n    }\n  }\n  // If we removed all optional arguments and there are only mandatory ones,\n  // then the min argument count must be updated accordingly.\n  while (minArgs > 0 && !argList.getFirstChild().isDefaultValue()) {\n    minArgs--;\n  }\n  function.putBooleanProp(Node.FUNCTION_VARIADIC_PARAMETERS, foundVarargs);\n  function.putIntProp(Node.FUNCTION_MIN_PARAMETERS, minArgs);\n  // maxArgs might be greater than number of children when there are varargs.\n  function.putIntProp(Node.FUNCTION_MAX_PARAMETERS, Math.max(argList.getChildCount(), maxArgs));\n  compiler.reportCodeChange();\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..adacb598 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,76 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Count the number of referenced args.\n+  int numArgs = 0;\n+  boolean foundVarargs = false;\n+  for (Node arg : argList.children()) {\n+    if (arg.isRest()) {\n+      foundVarargs = true;\n+      break;\n+    }\n+    if (referenced.contains(fnScope.getVar(arg.getString()))) {\n+      numArgs++;\n+    }\n+  }\n+  int maxArgs = numArgs;\n+  if (foundVarargs) {\n+    maxArgs++;\n+  }\n+  int minArgs = maxArgs;\n+  // We'll keep the last args if they have side-effects.\n+  for (int i = argList.getChildCount() - 1; i >= maxArgs; i--) {\n+    Node arg = argList.getChildAtIndex(i);\n+    if (NodeUtil.mayHaveSideEffects(arg)) {\n+      minArgs = i + 1;\n+      break;\n+    }\n+  }\n+  // And the first arg if it is used as a type annotation.\n+  if (!referenced.contains(fnScope.getVar(argList.getChildAtIndex(0).getString()))) {\n+    for (int i = 0; i < argList.getChildCount(); i++) {\n+      Node arg = argList.getChildAtIndex(i);\n+      boolean isTypeDeclaration = arg.hasChildren() && arg.getLastChild().isString()\n+          && arg.getLastChild().getString().equals(\"type\");\n+      if (isTypeDeclaration) {\n+        minArgs = i + 1;\n+        break;\n+      }\n+    }\n+  }\n+  // Strip unreferenced args off the function declaration.\n+  while (argList.getChildCount() > maxArgs) {\n+    Node lastArg = argList.getLastChild();\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+    } else {\n+      break;\n+    }\n+  }\n+  // If we removed all optional arguments and there are only mandatory ones,\n+  // then the min argument count must be updated accordingly.\n+  while (minArgs > 0 && !argList.getFirstChild().isDefaultValue()) {\n+    minArgs--;\n+  }\n+  function.putBooleanProp(Node.FUNCTION_VARIADIC_PARAMETERS, foundVarargs);\n+  function.putIntProp(Node.FUNCTION_MIN_PARAMETERS, minArgs);\n+  // maxArgs might be greater than number of children when there are varargs.\n+  function.putIntProp(Node.FUNCTION_MAX_PARAMETERS, Math.max(argList.getChildCount(), maxArgs));\n+  compiler.reportCodeChange();\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}