{
    "patch": "import java.math.BigDecimal;\nimport java.util.Arrays;\n\npublic class EqualsBuilder {\n\n    private boolean isEquals;\n\n    public EqualsBuilder() {\n        isEquals = true;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public EqualsBuilder setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n        return this;\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n\n        if (lhs == rhs) {\n            return this;\n        }\n\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            this.setEquals(false);\n            return this;\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // The rhs object must be an array of objects\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n\n        return this;\n    }\n\n    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(int[] lhs, int[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(short[] lhs, short[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(char[] lhs, char[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(double[] lhs, double[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(float[] lhs, float[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs, new EqualsBuilder());\n        return this;\n    }\n\n    public EqualsBuilder append(BigDecimal lhs, BigDecimal rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs.compareTo(rhs) == 0;\n        return this;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..e69047b0 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,28 +364,47 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+public class EqualsBuilder {\n+\n+    private boolean isEquals;\n+\n+    public EqualsBuilder() {\n+        isEquals = true;\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    public EqualsBuilder setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+        return this;\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n         }\n+\n         if (lhs == rhs) {\n             return this;\n         }\n+\n         if (lhs == null || rhs == null) {\n             this.setEquals(false);\n             return this;\n         }\n+\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+            return this;\n+        } else if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -402,12 +421,94 @@ public class EqualsBuilder {\n         } else if (lhs instanceof boolean[]) {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            // Not an array of primitives\n+            // The rhs object must be an array of objects\n             append((Object[]) lhs, (Object[]) rhs);\n         }\n+\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long[] lhs, long[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int[] lhs, int[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n         return this;\n     }\n \n+    public EqualsBuilder append(short[] lhs, short[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(char[] lhs, char[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double[] lhs, double[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float[] lhs, float[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs, new EqualsBuilder());\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(BigDecimal lhs, BigDecimal rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs.compareTo(rhs) == 0;\n+        return this;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}