{
    "patch": "import org.joda.time.DateTimeField;\nimport org.joda.time.DateTimeFieldType;\nimport org.joda.time.DateTimeUtils;\nimport org.joda.time.MonthDay;\nimport org.joda.time.chrono.ISOChronology;\n\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n    int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n    int year = values[DateTimeFieldType.year().getFieldIndex()];\n\n    long instant = 0L;\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        // month is largest field and being added to, such as month-day\n        \n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(ISOChronology.getInstanceUTC()).set(instant, values[i]);\n        }\n\n        instant = add(instant, valueToAdd);\n\n        int[] result = ISOChronology.getInstanceUTC().get(partial, instant);\n\n        // Check for leap year and February 29\n        MonthDay monthDay = new MonthDay(result[DateTimeFieldType.monthOfYear().getFieldIndex()], \n                                         result[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n        DateTimeField dayField = monthDay.getField(DateTimeFieldType.dayOfMonth());\n        int maxDayOfMonth = dayField.getMaximumValue(result[DateTimeFieldType.year().getFieldIndex()]);\n        if (monthDay.getMonthOfYear() == 2 && monthDay.getDayOfMonth() > maxDayOfMonth) {\n            monthDay = monthDay.withDayOfMonth(maxDayOfMonth);\n            result[DateTimeFieldType.monthOfYear().getFieldIndex()] = monthDay.getMonthOfYear();\n            result[DateTimeFieldType.dayOfMonth().getFieldIndex()] = monthDay.getDayOfMonth();\n        }\n\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate long add(long instant, int months) {\n    if (months == 0) {\n        return instant;\n    }\n\n    // Save time part of instant as it may be lost when updating month\n    int savedTime = ISOChronology.getInstanceUTC().millisOfDay().get(instant);\n\n    // Calculate new year/month\n    long newInstant = ISOChronology.getInstanceUTC().monthOfYear().add(instant, months);\n\n    // Restore time part of instant\n    newInstant = ISOChronology.getInstanceUTC().millisOfDay().set(newInstant, savedTime);\n\n    return newInstant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..93a772c8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,70 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.MonthDay;\n+import org.joda.time.chrono.ISOChronology;\n+\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+    int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+    int year = values[DateTimeFieldType.year().getFieldIndex()];\n+\n+    long instant = 0L;\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // month is largest field and being added to, such as month-day\n+        \n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(ISOChronology.getInstanceUTC()).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+        instant = add(instant, valueToAdd);\n+\n+        int[] result = ISOChronology.getInstanceUTC().get(partial, instant);\n+\n+        // Check for leap year and February 29\n+        MonthDay monthDay = new MonthDay(result[DateTimeFieldType.monthOfYear().getFieldIndex()], \n+                                         result[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n+        DateTimeField dayField = monthDay.getField(DateTimeFieldType.dayOfMonth());\n+        int maxDayOfMonth = dayField.getMaximumValue(result[DateTimeFieldType.year().getFieldIndex()]);\n+        if (monthDay.getMonthOfYear() == 2 && monthDay.getDayOfMonth() > maxDayOfMonth) {\n+            monthDay = monthDay.withDayOfMonth(maxDayOfMonth);\n+            result[DateTimeFieldType.monthOfYear().getFieldIndex()] = monthDay.getMonthOfYear();\n+            result[DateTimeFieldType.dayOfMonth().getFieldIndex()] = monthDay.getDayOfMonth();\n         }\n+\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+}\n+\n+private long add(long instant, int months) {\n+    if (months == 0) {\n+        return instant;\n     }\n \n+    // Save time part of instant as it may be lost when updating month\n+    int savedTime = ISOChronology.getInstanceUTC().millisOfDay().get(instant);\n+\n+    // Calculate new year/month\n+    long newInstant = ISOChronology.getInstanceUTC().monthOfYear().add(instant, months);\n+\n+    // Restore time part of instant\n+    newInstant = ISOChronology.getInstanceUTC().millisOfDay().set(newInstant, savedTime);\n+\n+    return newInstant;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}