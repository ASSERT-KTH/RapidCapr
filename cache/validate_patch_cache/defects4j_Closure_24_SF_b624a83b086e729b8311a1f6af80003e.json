{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    boolean isAliasVar = false;\n\n    if (parent != null && parent.isVar()) {\n      // A var declaration may have a child node with a qualified name if it\n      // defines an alias; otherwise, it's a plain local variable.\n      Node initializer = n.getFirstChild().getNext();\n      if (initializer != null && initializer.isQualifiedName()) {\n        isAliasVar = true;\n        String name = n.getFirstChild().getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n        }\n      }\n    }\n\n    if (!isAliasVar && parent != null && parent.getParent() != null && parent.getParent().isFunction() &&\n        !v.isLocal()) {\n      // Non-alias vars must be in a function. Those found here are local.\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..d2a4b961 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,33 +269,37 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    boolean isAliasVar = false;\n+\n+    if (parent != null && parent.isVar()) {\n+      // A var declaration may have a child node with a qualified name if it\n+      // defines an alias; otherwise, it's a plain local variable.\n+      Node initializer = n.getFirstChild().getNext();\n+      if (initializer != null && initializer.isQualifiedName()) {\n+        isAliasVar = true;\n+        String name = n.getFirstChild().getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n         }\n       }\n     }\n \n+    if (!isAliasVar && parent != null && parent.getParent() != null && parent.getParent().isFunction() &&\n+        !v.isLocal()) {\n+      // Non-alias vars must be in a function. Those found here are local.\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+    }\n+  }\n+}\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}