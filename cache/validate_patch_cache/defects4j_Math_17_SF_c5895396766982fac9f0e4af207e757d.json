{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(getField(), this);\n            }\n\n            Dfp result = newInstance(getField());\n            boolean lostDigits = false;\n\n            for (int i = 0; i < size(); i++) {\n                result.mant[i] = ((long)mant[i] * x) + (lostDigits ? 1 : 0);\n\n                if (result.mant[i] < 0) {\n                    lostDigits = true;\n                } else {\n                    lostDigits = false;\n                }\n            }\n\n            if (lostDigits) {\n                for (int i = 0; i < size(); i++) {\n                    result.mant[i] = ~mant[i];\n\n                    if (result.mant[i] < 0) {\n                        result.mant[i]++;\n                    } else {\n                        break;\n                    }\n                }\n                result.exp = exp;\n                result.sign = sign;\n                result.round(0);\n                getField().setIEEEFlagsBits(4);\n                return newInstance(getField(), result);\n            }\n\n            result.exp = exp;\n            result.sign = sign;\n            result.round(bitLength() + 1);\n\n            return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..a542ca7b9 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,45 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+            if (isNaN()) {\n+                return newInstance(getField(), this);\n+            }\n+\n+            Dfp result = newInstance(getField());\n+            boolean lostDigits = false;\n+\n+            for (int i = 0; i < size(); i++) {\n+                result.mant[i] = ((long)mant[i] * x) + (lostDigits ? 1 : 0);\n+\n+                if (result.mant[i] < 0) {\n+                    lostDigits = true;\n+                } else {\n+                    lostDigits = false;\n+                }\n+            }\n+\n+            if (lostDigits) {\n+                for (int i = 0; i < size(); i++) {\n+                    result.mant[i] = ~mant[i];\n+\n+                    if (result.mant[i] < 0) {\n+                        result.mant[i]++;\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                result.exp = exp;\n+                result.sign = sign;\n+                result.round(0);\n+                getField().setIEEEFlagsBits(4);\n+                return newInstance(getField(), result);\n+            }\n+\n+            result.exp = exp;\n+            result.sign = sign;\n+            result.round(bitLength() + 1);\n+\n+            return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: no suitable method found for newInstance(DfpField,Dfp)",
    "test_result": "ERROR"
}