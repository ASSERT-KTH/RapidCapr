{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double oldSum = Double.NaN;\n    double newSum = 1.0 / a;\n    double term = newSum;\n\n    int i = 1;\n    while (i <= maxIterations && Math.abs(newSum - oldSum) > epsilon * Math.abs(oldSum)) {\n        oldSum = newSum;\n        term *= x / (a + i);\n        newSum += term;\n        i++;\n    }\n\n    if (i > maxIterations) {\n        throw new RuntimeException();\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * newSum;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double sum = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(sum * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..df905c538 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double oldSum = Double.NaN;\n+    double newSum = 1.0 / a;\n+    double term = newSum;\n+\n+    int i = 1;\n+    while (i <= maxIterations && Math.abs(newSum - oldSum) > epsilon * Math.abs(oldSum)) {\n+        oldSum = newSum;\n+        term *= x / (a + i);\n+        newSum += term;\n+        i++;\n+    }\n+\n+    if (i > maxIterations) {\n+        throw new RuntimeException();\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * newSum;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double sum = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(sum * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}