{
    "patch": "if (this.isUnknownType() || that.isUnknownType()) {\n  return new TypePair(null, null);\n} else {\n  TypePair p = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n  if (p.typeA.isEquivalentTo(p.typeB)) {\n    return new TypePair(p.typeA, p.typeB);\n  } else {\n    return p;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..682d55f1 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,16 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+if (this.isUnknownType() || that.isUnknownType()) {\n+  return new TypePair(null, null);\n+} else {\n+  TypePair p = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+  if (p.typeA.isEquivalentTo(p.typeB)) {\n+    return new TypePair(p.typeA, p.typeB);\n+  } else {\n+    return p;\n+  }\n+}\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}