{
    "patch": "switch (c[pos.getIndex()]) {\n    case QUOTE:\n        next(pos);\n        return appendTo == null ? null : appendTo.append(c, lastHold,\n                pos.getIndex() - lastHold);\n    case 'd':\n        if (pos.getIndex() - lastHold >= 2) {\n            next(pos);\n            return appendTo == null ? null : appendTo.append(c, lastHold,\n                    pos.getIndex() - lastHold);\n        }\n        break;\n    default:\n        next(pos);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..3ca8ba1a 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,21 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+switch (c[pos.getIndex()]) {\n+    case QUOTE:\n+        next(pos);\n+        return appendTo == null ? null : appendTo.append(c, lastHold,\n+                pos.getIndex() - lastHold);\n+    case 'd':\n+        if (pos.getIndex() - lastHold >= 2) {\n+            next(pos);\n+            return appendTo == null ? null : appendTo.append(c, lastHold,\n+                    pos.getIndex() - lastHold);\n+        }\n+        break;\n+    default:\n+        next(pos);\n+}\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}