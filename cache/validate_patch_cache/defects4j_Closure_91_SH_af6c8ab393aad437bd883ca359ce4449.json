{
    "patch": "      if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.isInterface() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n          return false;\n        }\n        if (NodeUtil.isGet(parent)) {\n          Node getTarget = parent.getFirstChild();\n          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n        if (n.getFirstChild() != null && NodeUtil.isGet(n.getFirstChild())) {\n          Node getTarget = n.getFirstChild();\n          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          boolean isLhsGetProp = NodeUtil.isGet(lhs);\n          if (isLhsGetProp) {\n            Node llhs = lhs.getFirstChild();\n            isLhsGetProp = llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\");\n          }\n          if (isLhsGetProp) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b283e7ae 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,55 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+             jsDoc.isInterface() ||\n+             jsDoc.hasThisType() ||\n+             jsDoc.isOverride())) {\n+          return false;\n+        }\n+        if (NodeUtil.isGet(parent)) {\n+          Node getTarget = parent.getFirstChild();\n+          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+        if (n.getFirstChild() != null && NodeUtil.isGet(n.getFirstChild())) {\n+          Node getTarget = n.getFirstChild();\n+          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          boolean isLhsGetProp = NodeUtil.isGet(lhs);\n+          if (isLhsGetProp) {\n+            Node llhs = lhs.getFirstChild();\n+            isLhsGetProp = llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\");\n+          }\n+          if (isLhsGetProp) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}