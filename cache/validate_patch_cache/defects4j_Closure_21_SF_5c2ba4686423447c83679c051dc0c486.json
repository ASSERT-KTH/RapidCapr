{
    "patch": "/**\n * Returns true if the given node may have side effects, i.e., if its evaluation\n * could change the state of the program or have other observable effects (such\n * as throwing an exception).\n */\nprivate boolean mayHaveSideEffects(Node n) {\n  switch (n.getToken()) {\n    // Control flow.\n    case AWAIT:\n    case YIELD:\n    case NEW:\n    case CALL:\n    case TAGGED_TEMPLATELIT:\n    case GETPROP:\n    case GETELEM:\n    case TYPEOF:\n    case VOID:\n    case NOT:\n    case BITNOT:\n    case POS:\n    case NEG:\n    case THROW:\n    case RETURN:\n    case BREAK:\n    case CONTINUE:\n    case DEBUGGER:\n      return true;\n\n    // Operators with side effects.\n    case ASSIGN:\n    case ADDEQ:\n    case SUBEQ:\n    case MULEQ:\n    case DIV_EQ:\n    case MOD_EQ:\n    case LSH_EQ:\n    case RSH_EQ:\n    case URSH_EQ:\n    case ANDEQ:\n    case OREQ:\n    case XOREQ:\n    case INC:\n    case DEC:\n    case DELPROP:\n    case IN:\n      return true;\n\n    // These operators can return NaN or Infinity.\n    case DIV:\n    case MOD:\n      return true;\n\n    // Control flow statements that can break out of a loop.\n    case THROW:\n    case RETURN:\n    case BREAK:\n    case CONTINUE:\n      return true;\n\n    // Any node with a side-effect annotation.\n    case EXPR_RESULT:\n      return hasSideEffectAnnotation(n);\n\n    default:\n      return false;\n  }\n}\n\n/**\n * Returns true if the given node has a @nosideeffects annotation.\n */\nprivate boolean hasSideEffectAnnotation(Node n) {\n  return n.getJSDocInfo() != null && n.getJSDocInfo().isNoSideEffects();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..2da640c3 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,80 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n-    }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n-    }\n-\n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n-    }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n-    }\n+/**\n+ * Returns true if the given node may have side effects, i.e., if its evaluation\n+ * could change the state of the program or have other observable effects (such\n+ * as throwing an exception).\n+ */\n+private boolean mayHaveSideEffects(Node n) {\n+  switch (n.getToken()) {\n+    // Control flow.\n+    case AWAIT:\n+    case YIELD:\n+    case NEW:\n+    case CALL:\n+    case TAGGED_TEMPLATELIT:\n+    case GETPROP:\n+    case GETELEM:\n+    case TYPEOF:\n+    case VOID:\n+    case NOT:\n+    case BITNOT:\n+    case POS:\n+    case NEG:\n+    case THROW:\n+    case RETURN:\n+    case BREAK:\n+    case CONTINUE:\n+    case DEBUGGER:\n+      return true;\n+\n+    // Operators with side effects.\n+    case ASSIGN:\n+    case ADDEQ:\n+    case SUBEQ:\n+    case MULEQ:\n+    case DIV_EQ:\n+    case MOD_EQ:\n+    case LSH_EQ:\n+    case RSH_EQ:\n+    case URSH_EQ:\n+    case ANDEQ:\n+    case OREQ:\n+    case XOREQ:\n+    case INC:\n+    case DEC:\n+    case DELPROP:\n+    case IN:\n+      return true;\n+\n+    // These operators can return NaN or Infinity.\n+    case DIV:\n+    case MOD:\n+      return true;\n+\n+    // Control flow statements that can break out of a loop.\n+    case THROW:\n+    case RETURN:\n+    case BREAK:\n+    case CONTINUE:\n+      return true;\n+\n+    // Any node with a side-effect annotation.\n+    case EXPR_RESULT:\n+      return hasSideEffectAnnotation(n);\n+\n+    default:\n+      return false;\n   }\n+}\n+\n+/**\n+ * Returns true if the given node has a @nosideeffects annotation.\n+ */\n+private boolean hasSideEffectAnnotation(Node n) {\n+  return n.getJSDocInfo() != null && n.getJSDocInfo().isNoSideEffects();\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: CheckSideEffects is not abstract and does not override abstract method visit(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}