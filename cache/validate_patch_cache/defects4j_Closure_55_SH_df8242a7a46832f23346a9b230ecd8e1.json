{
    "patch": "if (n.getType() != Token.FUNCTION) {\n    return false;\n}\nNode parent = n.getParent();\nif (parent == null || (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.ASSIGN &&\n    parent.getType() != Token.VAR && parent.getType() != Token.RETURN &&\n    (parent.getType() != Token.BLOCK || !NodeUtil.isFunctionExpression(parent.getParent())))) {\n    return false;\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..536a3368 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,16 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (n.getType() != Token.FUNCTION) {\n+    return false;\n+}\n+Node parent = n.getParent();\n+if (parent == null || (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.ASSIGN &&\n+    parent.getType() != Token.VAR && parent.getType() != Token.RETURN &&\n+    (parent.getType() != Token.BLOCK || !NodeUtil.isFunctionExpression(parent.getParent())))) {\n+    return false;\n+}\n+return true;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}