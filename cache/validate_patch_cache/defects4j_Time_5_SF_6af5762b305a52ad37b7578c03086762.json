{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // add the weeks to the days\n    days += weeks * 7;\n\n    // normalize the millis\n    seconds += (int) (millis / DateTimeConstants.MILLIS_PER_SECOND);\n    millis = millis % DateTimeConstants.MILLIS_PER_SECOND;\n    if (millis < 0) {\n        millis += DateTimeConstants.MILLIS_PER_SECOND;\n        seconds--;\n    }\n    minutes += seconds / DateTimeConstants.SECONDS_PER_MINUTE;\n    seconds = seconds % DateTimeConstants.SECONDS_PER_MINUTE;\n    if (seconds < 0) {\n        seconds += DateTimeConstants.SECONDS_PER_MINUTE;\n        minutes--;\n    }\n    hours += minutes / DateTimeConstants.MINUTES_PER_HOUR;\n    minutes = minutes % DateTimeConstants.MINUTES_PER_HOUR;\n    if (minutes < 0) {\n        minutes += DateTimeConstants.MINUTES_PER_HOUR;\n        hours--;\n    }\n    days += hours / DateTimeConstants.HOURS_PER_DAY;\n    hours = hours % DateTimeConstants.HOURS_PER_DAY;\n    if (hours < 0) {\n        hours += DateTimeConstants.HOURS_PER_DAY;\n        days--;\n    }\n\n    // normalize the months and years\n    if (type.isSupported(DurationFieldType.years())) {\n        months += years * 12;\n        years = 0;\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        years += months / 12;\n        months = months % 12;\n    }\n\n    // adjust the period based on the period type requested\n    switch (type.getName()) {\n        case \"Standard\":\n            return new Period(0, years, months, days, hours, minutes, seconds, millis, PeriodType.standard());\n        case \"YearMonthDayTime\":\n            return new Period(0, years, months, days, hours, minutes, seconds, millis, PeriodType.yearMonthDayTime());\n        case \"YearWeekDayTime\":\n            return new Period(0, years, 0, days + (weeks * 7), hours, minutes, seconds, millis, PeriodType.yearWeekDayTime());\n        case \"YearDayTime\":\n            return new Period(0, years, 0, days, hours, minutes, seconds, millis, PeriodType.yearDayTime());\n        case \"DayTime\":\n            return new Period(0, 0, 0, days, hours, minutes, seconds, millis, PeriodType.dayTime());\n        case \"Time\":\n            return new Period(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());\n        default:\n            throw new UnsupportedOperationException(\"Unknown period type: \" + type.getName());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..9e23c8a5 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,74 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // add the weeks to the days\n+    days += weeks * 7;\n+\n+    // normalize the millis\n+    seconds += (int) (millis / DateTimeConstants.MILLIS_PER_SECOND);\n+    millis = millis % DateTimeConstants.MILLIS_PER_SECOND;\n+    if (millis < 0) {\n+        millis += DateTimeConstants.MILLIS_PER_SECOND;\n+        seconds--;\n+    }\n+    minutes += seconds / DateTimeConstants.SECONDS_PER_MINUTE;\n+    seconds = seconds % DateTimeConstants.SECONDS_PER_MINUTE;\n+    if (seconds < 0) {\n+        seconds += DateTimeConstants.SECONDS_PER_MINUTE;\n+        minutes--;\n+    }\n+    hours += minutes / DateTimeConstants.MINUTES_PER_HOUR;\n+    minutes = minutes % DateTimeConstants.MINUTES_PER_HOUR;\n+    if (minutes < 0) {\n+        minutes += DateTimeConstants.MINUTES_PER_HOUR;\n+        hours--;\n+    }\n+    days += hours / DateTimeConstants.HOURS_PER_DAY;\n+    hours = hours % DateTimeConstants.HOURS_PER_DAY;\n+    if (hours < 0) {\n+        hours += DateTimeConstants.HOURS_PER_DAY;\n+        days--;\n+    }\n+\n+    // normalize the months and years\n+    if (type.isSupported(DurationFieldType.years())) {\n+        months += years * 12;\n+        years = 0;\n+    }\n+    if (type.isSupported(DurationFieldType.months())) {\n+        years += months / 12;\n+        months = months % 12;\n+    }\n+\n+    // adjust the period based on the period type requested\n+    switch (type.getName()) {\n+        case \"Standard\":\n+            return new Period(0, years, months, days, hours, minutes, seconds, millis, PeriodType.standard());\n+        case \"YearMonthDayTime\":\n+            return new Period(0, years, months, days, hours, minutes, seconds, millis, PeriodType.yearMonthDayTime());\n+        case \"YearWeekDayTime\":\n+            return new Period(0, years, 0, days + (weeks * 7), hours, minutes, seconds, millis, PeriodType.yearWeekDayTime());\n+        case \"YearDayTime\":\n+            return new Period(0, years, 0, days, hours, minutes, seconds, millis, PeriodType.yearDayTime());\n+        case \"DayTime\":\n+            return new Period(0, 0, 0, days, hours, minutes, seconds, millis, PeriodType.dayTime());\n+        case \"Time\":\n+            return new Period(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());\n+        default:\n+            throw new UnsupportedOperationException(\"Unknown period type: \" + type.getName());\n     }\n+}\n \n }",
    "result_reason": "error: strings in switch are not supported in -source 1.5",
    "test_result": "ERROR"
}