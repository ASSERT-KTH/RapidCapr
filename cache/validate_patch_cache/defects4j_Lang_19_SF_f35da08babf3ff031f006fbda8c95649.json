{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index >= seqEnd - 1 || input.charAt(index) != '&') {\n        return 0;\n    }\n    int nextIndex = index + 1;\n    if (nextIndex >= seqEnd) {\n        return 0;\n    }\n    if (input.charAt(nextIndex) == '#') {\n        long charValue = 0;\n        int base = 10;\n        nextIndex++;\n        if (nextIndex >= seqEnd) {\n            return 0;\n        }\n        if (input.charAt(nextIndex) == 'x' || input.charAt(nextIndex) == 'X') {\n            base = 16;\n            nextIndex++;\n        }\n        int i = nextIndex;\n        while (i < seqEnd && input.charAt(i) != ';') {\n            char c = input.charAt(i);\n            if (c >= '0' && c <= '9') {\n                charValue = charValue * base + (c - '0');\n            } else if (base == 16 && c >= 'a' && c <= 'f') {\n                charValue = charValue * base + (c - 'a' + 10);\n            } else if (base == 16 && c >= 'A' && c <= 'F') {\n                charValue = charValue * base + (c - 'A' + 10);\n            } else {\n                return 0;\n            }\n            if (charValue > Character.MAX_CODE_POINT) {\n                return 0;\n            }\n            i++;\n        }\n        if (i >= seqEnd || input.charAt(i) != ';') {\n            return 0;\n        }\n        int len = i - index + 1;\n        if (Character.isSupplementaryCodePoint((int) charValue)) {\n            out.write(Character.highSurrogate((int) charValue));\n            out.write(Character.lowSurrogate((int) charValue));\n        } else {\n            out.write((char) charValue);\n        }\n        return len;\n    } else {\n        int semicolonIndex = input.subSequence(nextIndex, seqEnd).toString().indexOf(';');\n        if (semicolonIndex == -1) {\n            return 0;\n        }\n        String entityName = input.subSequence(nextIndex, nextIndex + semicolonIndex + 1).toString();\n        int charValue = EntitiesHtml4.INSTANCE.getEntityValue(entityName);\n        if (charValue == -1) {\n            return 0;\n        }\n        if (Character.isSupplementaryCodePoint(charValue)) {\n            out.write(Character.highSurrogate(charValue));\n            out.write(Character.lowSurrogate(charValue));\n        } else {\n            out.write(charValue);\n        }\n        return semicolonIndex + 2;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..008f2546 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,71 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index >= seqEnd - 1 || input.charAt(index) != '&') {\n+        return 0;\n+    }\n+    int nextIndex = index + 1;\n+    if (nextIndex >= seqEnd) {\n+        return 0;\n+    }\n+    if (input.charAt(nextIndex) == '#') {\n+        long charValue = 0;\n+        int base = 10;\n+        nextIndex++;\n+        if (nextIndex >= seqEnd) {\n+            return 0;\n+        }\n+        if (input.charAt(nextIndex) == 'x' || input.charAt(nextIndex) == 'X') {\n+            base = 16;\n+            nextIndex++;\n+        }\n+        int i = nextIndex;\n+        while (i < seqEnd && input.charAt(i) != ';') {\n+            char c = input.charAt(i);\n+            if (c >= '0' && c <= '9') {\n+                charValue = charValue * base + (c - '0');\n+            } else if (base == 16 && c >= 'a' && c <= 'f') {\n+                charValue = charValue * base + (c - 'a' + 10);\n+            } else if (base == 16 && c >= 'A' && c <= 'F') {\n+                charValue = charValue * base + (c - 'A' + 10);\n+            } else {\n                 return 0;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+            if (charValue > Character.MAX_CODE_POINT) {\n+                return 0;\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            i++;\n         }\n-        return 0;\n+        if (i >= seqEnd || input.charAt(i) != ';') {\n+            return 0;\n+        }\n+        int len = i - index + 1;\n+        if (Character.isSupplementaryCodePoint((int) charValue)) {\n+            out.write(Character.highSurrogate((int) charValue));\n+            out.write(Character.lowSurrogate((int) charValue));\n+        } else {\n+            out.write((char) charValue);\n+        }\n+        return len;\n+    } else {\n+        int semicolonIndex = input.subSequence(nextIndex, seqEnd).toString().indexOf(';');\n+        if (semicolonIndex == -1) {\n+            return 0;\n+        }\n+        String entityName = input.subSequence(nextIndex, nextIndex + semicolonIndex + 1).toString();\n+        int charValue = EntitiesHtml4.INSTANCE.getEntityValue(entityName);\n+        if (charValue == -1) {\n+            return 0;\n+        }\n+        if (Character.isSupplementaryCodePoint(charValue)) {\n+            out.write(Character.highSurrogate(charValue));\n+            out.write(Character.lowSurrogate(charValue));\n+        } else {\n+            out.write(charValue);\n+        }\n+        return semicolonIndex + 2;\n     }\n }\n+}",
    "result_reason": "error: package EntitiesHtml4 does not exist",
    "test_result": "ERROR"
}