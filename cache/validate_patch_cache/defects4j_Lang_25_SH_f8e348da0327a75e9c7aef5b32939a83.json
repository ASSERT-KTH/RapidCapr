{
    "patch": "// Convert encoded character sequence into a String\npublic static String convertFromEscape(String input)\n{\n    StringBuilder sb = new StringBuilder(input.length());\n    for (int i = 0; i < input.length(); i++)\n    {\n        char currentChar = input.charAt(i);\n        if (currentChar == '\\\\')\n        {\n            i++;\n            currentChar = input.charAt(i);\n            switch(currentChar)\n            {\n                case '\\\\':\n                    sb.append('\\\\');\n                    break;\n                case 't':\n                    sb.append('\\t');\n                    break;\n                case 'r':\n                    sb.append('\\r');\n                    break;\n                case 'n':\n                    sb.append('\\n');\n                    break;\n                case 'f':\n                    sb.append('\\f');\n                    break;\n                case '\\'':\n                    sb.append('\\'');\n                    break;\n                case '\\\"':\n                    sb.append('\\\"');\n                    break;\n                case '0':\n                    sb.append('\\0');\n                    break;\n                default:\n                    if (currentChar >= '0' && currentChar <= '9')\n                    {\n                        String octal = \"\" + currentChar;\n                        i++;\n                        currentChar = input.charAt(i);\n                        octal += currentChar;\n                        i++;\n                        currentChar = input.charAt(i);\n                        if (currentChar >= '0' && currentChar <= '9')\n                        {\n                            octal += currentChar;\n                            i++;\n                            currentChar = input.charAt(i);\n                        }\n                        i--;\n                        int charCode = Integer.parseInt(octal, 8);\n                        sb.append((char)charCode);\n                    }\n                    else\n                    {\n                        // Fix bug here - added append statement to handle invalid escape sequence\n                        sb.append('\\\\');\n                        sb.append(currentChar);\n                    }\n                    break;\n            }\n        }\n        else\n        {\n            sb.append(currentChar);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}