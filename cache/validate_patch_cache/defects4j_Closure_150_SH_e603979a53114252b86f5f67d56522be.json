{
    "patch": "      attachLiteralTypes(n);\n      Node grandparent = parent.getParent();\n      if(parent == null){\n          return;\n      }\n      switch (n.getType()) {\n          case Token.FUNCTION:\n              if (parent.getType() == Token.NAME) {\n                return;\n              }\n              defineDeclaredFunction(n, parent);\n              break;\n          case Token.CATCH:\n              defineCatch(n, parent);\n              break;\n          case Token.VAR:\n              defineVar(n, parent);\n              break;\n          case Token.LP:\n              if (grandparent.getType() == Token.FUNCTION) {\n                defineDeclaredFunction(grandparent, grandparent.getParent());\n              } else if (parent == scope.getRootNode() || parent.getType() == Token.SCRIPT) {\n                handleFunctionInputs(parent);\n              }\n              break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..8cab20b4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,20 +1449,31 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      Node grandparent = parent.getParent();\n+      if(parent == null){\n+          return;\n       }\n+      switch (n.getType()) {\n+          case Token.FUNCTION:\n+              if (parent.getType() == Token.NAME) {\n+                return;\n+              }\n+              defineDeclaredFunction(n, parent);\n+              break;\n+          case Token.CATCH:\n+              defineCatch(n, parent);\n+              break;\n+          case Token.VAR:\n+              defineVar(n, parent);\n+              break;\n+          case Token.LP:\n+              if (grandparent.getType() == Token.FUNCTION) {\n+                defineDeclaredFunction(grandparent, grandparent.getParent());\n+              } else if (parent == scope.getRootNode() || parent.getType() == Token.SCRIPT) {\n+                handleFunctionInputs(parent);\n+              }\n+              break;\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}