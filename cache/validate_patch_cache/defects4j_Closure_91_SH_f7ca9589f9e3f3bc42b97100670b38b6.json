{
    "patch": "if (parent != null) {\n  switch (parent.getType()) {\n    case Token.ASSIGN:\n      // Don't traverse functions that are getting lent to a prototype.\n      if (n == parent.getLastChild() &&\n          NodeUtil.isGet(parent.getFirstChild()) &&\n          parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      // Always traverse the left side of an assignment.\n      if (n == parent.getFirstChild()) {\n        if (assignLhsChild == null) {\n          // To handle nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          assignLhsChild = n;\n        }\n      } else {\n        if (NodeUtil.mayHaveSideEffects(parent.getLastChild()) ||\n            NodeUtil.isObjectDefinePropertyDefinition(n)) {\n          // Don't traverse the right side of an assignment it there are side-effects or if it's defining a\n          // property via Object.defineProperty.\n          return false;\n        }\n      }\n      break;\n\n    case Token.CALL:\n      // Don't traverse the argument expressions of a call. They will be traversed when the function\n      // itself is traversed.\n      if (n != parent.getFirstChild()) {\n        return false;\n      }\n      break;\n\n    case Token.PARAM_LIST:\n      // Don't traverse function parameters\n      return false;\n\n    default:\n      break;\n  }\n}\n\n// Don't traverse functions that are constructors, unless there is a @this parameter in the function's jsdoc.\nif (n.getType() == Token.FUNCTION) {\n  JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n  if (jsDoc != null && jsDoc.isConstructor() && !jsDoc.hasThisType()) {\n    return false;\n  }\n\n  // Don't traverse functions that are getting lent to a prototype.\n  Node enclosingNode = NodeUtil.getEnclosingNode(n, NodeUtil.MATCH_NOT_FUNCTION);\n  if (enclosingNode != null && NodeUtil.isGet(enclosingNode)) {\n    Node getTarget = enclosingNode.getFirstChild();\n    if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n  }\n}\n\n// Don't traverse functions that may declare classes as a sibling variable declaration.\nif (n.getType() == Token.VAR || n.getType() == Token.LET || n.getType() == Token.CONST) {\n  Node sibling = n.getNext();\n  while (sibling != null && sibling.getType() == Token.VAR) {\n    sibling = sibling.getNext();\n  }\n\n  if (sibling != null && sibling.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(sibling);\n    if (jsDoc != null && (jsDoc.isInterface() || jsDoc.isConstructor())) {\n      return false;\n    }\n  }\n}\n\n// Don't traverse functions that assign prototypes\nif (NodeUtil.isObjectDefinePropertyDefinition(n)) {\n  return false;\n}\n\n// Traversing function names is an error.\nif (parent != null && parent.getType() == Token.NAME && parent.getFirstChild() == n) {\n  return false;\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..34c0358e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,93 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null) {\n+  switch (parent.getType()) {\n+    case Token.ASSIGN:\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n == parent.getLastChild() &&\n+          NodeUtil.isGet(parent.getFirstChild()) &&\n+          parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      // Always traverse the left side of an assignment.\n+      if (n == parent.getFirstChild()) {\n+        if (assignLhsChild == null) {\n+          // To handle nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          assignLhsChild = n;\n+        }\n+      } else {\n+        if (NodeUtil.mayHaveSideEffects(parent.getLastChild()) ||\n+            NodeUtil.isObjectDefinePropertyDefinition(n)) {\n+          // Don't traverse the right side of an assignment it there are side-effects or if it's defining a\n+          // property via Object.defineProperty.\n+          return false;\n+        }\n+      }\n+      break;\n+\n+    case Token.CALL:\n+      // Don't traverse the argument expressions of a call. They will be traversed when the function\n+      // itself is traversed.\n+      if (n != parent.getFirstChild()) {\n+        return false;\n+      }\n+      break;\n+\n+    case Token.PARAM_LIST:\n+      // Don't traverse function parameters\n+      return false;\n+\n+    default:\n+      break;\n+  }\n+}\n+\n+// Don't traverse functions that are constructors, unless there is a @this parameter in the function's jsdoc.\n+if (n.getType() == Token.FUNCTION) {\n+  JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+  if (jsDoc != null && jsDoc.isConstructor() && !jsDoc.hasThisType()) {\n+    return false;\n+  }\n+\n+  // Don't traverse functions that are getting lent to a prototype.\n+  Node enclosingNode = NodeUtil.getEnclosingNode(n, NodeUtil.MATCH_NOT_FUNCTION);\n+  if (enclosingNode != null && NodeUtil.isGet(enclosingNode)) {\n+    Node getTarget = enclosingNode.getFirstChild();\n+    if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n+    }\n+  }\n+}\n+\n+// Don't traverse functions that may declare classes as a sibling variable declaration.\n+if (n.getType() == Token.VAR || n.getType() == Token.LET || n.getType() == Token.CONST) {\n+  Node sibling = n.getNext();\n+  while (sibling != null && sibling.getType() == Token.VAR) {\n+    sibling = sibling.getNext();\n+  }\n+\n+  if (sibling != null && sibling.getType() == Token.FUNCTION) {\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(sibling);\n+    if (jsDoc != null && (jsDoc.isInterface() || jsDoc.isConstructor())) {\n+      return false;\n+    }\n+  }\n+}\n+\n+// Don't traverse functions that assign prototypes\n+if (NodeUtil.isObjectDefinePropertyDefinition(n)) {\n+  return false;\n+}\n+\n+// Traversing function names is an error.\n+if (parent != null && parent.getType() == Token.NAME && parent.getFirstChild() == n) {\n+  return false;\n+}\n+\n+return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}