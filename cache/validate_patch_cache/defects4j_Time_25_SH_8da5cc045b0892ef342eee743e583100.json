{
    "patch": "        final int initialOffset = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - initialOffset;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n\n        if (initialOffset != offsetAdjusted) {\n            long startSearch = (instantLocal < Long.MAX_VALUE - 61000) ? instantLocal + 61000 : Long.MAX_VALUE;\n            long endSearch = (instantLocal > Long.MIN_VALUE + 61000) ? instantLocal - 61000 : Long.MIN_VALUE;\n\n            long transition = startSearch;\n            int nextOffset = initialOffset;\n            while (true) {\n                transition = previousTransition(transition);\n                if (transition < endSearch) {\n                    break;\n                }\n                nextOffset = getOffset(transition);\n                if (initialOffset > offsetAdjusted && nextOffset > offsetAdjusted) {\n                    break;\n                }\n                if (initialOffset < offsetAdjusted && nextOffset < offsetAdjusted) {\n                    break;\n                }\n            }\n\n            if (initialOffset > offsetAdjusted && nextOffset < offsetAdjusted) {\n                return nextOffset;\n            }\n            if (initialOffset < offsetAdjusted && nextOffset > offsetAdjusted) {\n                return initialOffset;\n            }\n            if (initialOffset > offsetAdjusted) {\n                transition = nextTransition(instantAdjusted);\n            } else {\n                transition = previousTransition(instantAdjusted);\n            }\n            return getOffset(transition);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0650e5cc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        final int initialOffset = getOffset(instantLocal);\n+        final long instantAdjusted = instantLocal - initialOffset;\n+        final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+        if (initialOffset != offsetAdjusted) {\n+            long startSearch = (instantLocal < Long.MAX_VALUE - 61000) ? instantLocal + 61000 : Long.MAX_VALUE;\n+            long endSearch = (instantLocal > Long.MIN_VALUE + 61000) ? instantLocal - 61000 : Long.MIN_VALUE;\n+\n+            long transition = startSearch;\n+            int nextOffset = initialOffset;\n+            while (true) {\n+                transition = previousTransition(transition);\n+                if (transition < endSearch) {\n+                    break;\n+                }\n+                nextOffset = getOffset(transition);\n+                if (initialOffset > offsetAdjusted && nextOffset > offsetAdjusted) {\n+                    break;\n+                }\n+                if (initialOffset < offsetAdjusted && nextOffset < offsetAdjusted) {\n+                    break;\n+                }\n+            }\n+\n+            if (initialOffset > offsetAdjusted && nextOffset < offsetAdjusted) {\n+                return nextOffset;\n+            }\n+            if (initialOffset < offsetAdjusted && nextOffset > offsetAdjusted) {\n+                return initialOffset;\n+            }\n+            if (initialOffset > offsetAdjusted) {\n+                transition = nextTransition(instantAdjusted);\n+            } else {\n+                transition = previousTransition(instantAdjusted);\n+            }\n+            return getOffset(transition);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}