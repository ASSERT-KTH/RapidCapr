{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n    \n    public static double regularizedGamma(double a, double x) {\n        double epsilon = 1e-15;\n        \n        double sum = 0;\n        double term = 1;\n        int n = 0;\n        \n        while (Math.abs(term) > epsilon) {\n            double numerator = Math.pow(x, a+n-1);\n            double denominator = Gamma.gamma(a+n);\n            term = numerator / denominator;\n            sum += term;\n            n++;\n        }\n        \n        return Math.exp(-x) * Math.pow(x, a-1) * sum / Gamma.gamma(a);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..035d8ee09 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+    \n+    public static double regularizedGamma(double a, double x) {\n+        double epsilon = 1e-15;\n+        \n+        double sum = 0;\n+        double term = 1;\n+        int n = 0;\n+        \n+        while (Math.abs(term) > epsilon) {\n+            double numerator = Math.pow(x, a+n-1);\n+            double denominator = Gamma.gamma(a+n);\n+            term = numerator / denominator;\n+            sum += term;\n+            n++;\n+        }\n+        \n+        return Math.exp(-x) * Math.pow(x, a-1) * sum / Gamma.gamma(a);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}