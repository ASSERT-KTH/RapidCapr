{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!NodeUtil.isGetOrSetKey(child)) {\n      // Check if this is a string or number key\n      String name = null;\n      if (child.isStringKey() || child.isString()) {\n        name = child.getString();\n      } else if (child.isGetProp()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        if (firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \".\" + secondChild.getString();\n        }\n      } else if (child.isGetElem()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        if (firstChild.isString() || firstChild.isNumber()) {\n          name = firstChild.getString();\n        }\n\n        if (firstChild != null && secondChild != null && secondChild.isString()) {\n          if (firstChild.isNumber()) {  // Handle number keys\n            if (!n.isArrayLit()) {\n              // If the parent node is not an array, then this is a computed property that\n              // happens to be a number, so we skip it\n              continue;\n            }\n            name += \"[\" + firstChild.getString() + \"]\";\n          } else {\n            name += \"[\" + secondChild.getString() + \"]\";\n          }\n        }\n      } else if (child.isSetElem()) {  // Handle SETELEM cases\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        if (firstChild.isString() || firstChild.isNumber()) {\n          name = firstChild.getString();\n        }\n\n        if (firstChild != null && secondChild != null) {\n          if (firstChild.isNumber()) {  // Handle number keys\n            if (!n.isArrayLit()) {\n              // If the parent node is not an array, then this is a computed property that\n              // happens to be a number, so we skip it\n              continue;\n            }\n            name += \"[\" + firstChild.getString() + \"]\";\n          } else {\n            processObjectProperty(t, secondChild, name);\n          }\n        }\n      } else {\n        // Ignore other kinds of nodes\n        continue;\n      }\n\n      if (name == null) {\n        continue;\n      }\n\n      // Get the type of the property\n      T type = typeSystem.getType(getScope(), n, name);\n\n      // Get the property object for this property name\n      Property prop = getProperty(name);\n\n      // Schedule renaming for this property\n      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        // Report an error if we could not schedule renaming for this property\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(\n            t.getSourceName(),\n            child,\n            propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,\n            name,\n            (type == null ? \"null\" : type.toString()),\n            n.toString(),\n            \"\"\n          ));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..ccf0e7c4 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,91 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (!NodeUtil.isGetOrSetKey(child)) {\n+      // Check if this is a string or number key\n+      String name = null;\n+      if (child.isStringKey() || child.isString()) {\n+        name = child.getString();\n+      } else if (child.isGetProp()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        if (firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \".\" + secondChild.getString();\n+        }\n+      } else if (child.isGetElem()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        if (firstChild.isString() || firstChild.isNumber()) {\n+          name = firstChild.getString();\n+        }\n+\n+        if (firstChild != null && secondChild != null && secondChild.isString()) {\n+          if (firstChild.isNumber()) {  // Handle number keys\n+            if (!n.isArrayLit()) {\n+              // If the parent node is not an array, then this is a computed property that\n+              // happens to be a number, so we skip it\n+              continue;\n+            }\n+            name += \"[\" + firstChild.getString() + \"]\";\n+          } else {\n+            name += \"[\" + secondChild.getString() + \"]\";\n+          }\n+        }\n+      } else if (child.isSetElem()) {  // Handle SETELEM cases\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        if (firstChild.isString() || firstChild.isNumber()) {\n+          name = firstChild.getString();\n+        }\n+\n+        if (firstChild != null && secondChild != null) {\n+          if (firstChild.isNumber()) {  // Handle number keys\n+            if (!n.isArrayLit()) {\n+              // If the parent node is not an array, then this is a computed property that\n+              // happens to be a number, so we skip it\n+              continue;\n+            }\n+            name += \"[\" + firstChild.getString() + \"]\";\n+          } else {\n+            processObjectProperty(t, secondChild, name);\n           }\n         }\n+      } else {\n+        // Ignore other kinds of nodes\n+        continue;\n+      }\n+\n+      if (name == null) {\n+        continue;\n+      }\n+\n+      // Get the type of the property\n+      T type = typeSystem.getType(getScope(), n, name);\n+\n+      // Get the property object for this property name\n+      Property prop = getProperty(name);\n+\n+      // Schedule renaming for this property\n+      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+        // Report an error if we could not schedule renaming for this property\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(JSError.make(\n+            t.getSourceName(),\n+            child,\n+            propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION,\n+            name,\n+            (type == null ? \"null\" : type.toString()),\n+            n.toString(),\n+            \"\"\n+          ));\n+        }\n       }\n     }\n+  }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}