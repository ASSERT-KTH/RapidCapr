{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean var_args = false;\n\n    while (arguments.hasNext() || parameters.hasNext()) {\n      if (!parameters.hasNext()) {\n        // If there are no parameters left in the list, then this must be\n        // a var_args function.\n        var_args = true;\n        break;\n      }\n      parameter = parameters.next();\n      ordinal++;\n      if (!arguments.hasNext() && !parameter.isOptional()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(ordinal),\n            \" or more argument(s)\");\n        return;\n      }\n      if (arguments.hasNext()) {\n        argument = arguments.next();\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      } else {\n        if (!parameter.isOptional()) {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(ordinal),\n              \" or more argument(s)\");\n          return;\n        }\n        // Parameter has no matching argument.\n        break;\n      }\n    }\n\n    if (var_args) {\n      // For var_args function, the rest of the arguments (if any) must be of\n      // the same type as the parameter type of the last parameter in the list.\n      parameter = null;\n      while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (!parameter.isVarArgs()) {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(ordinal),\n              \" or more argument(s)\");\n          return;\n        }\n      }\n      if (parameter == null) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(ordinal),\n            \" or more argument(s)\");\n        return;\n      }\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n        ordinal++;\n      }\n    } else {\n      // For non-var_args function, the number of arguments must be equal to the\n      // number of parameters.\n      while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (parameter.isVarArgs()) {\n          var_args = true;\n          break;\n        }\n        if (!arguments.hasNext() && !parameter.isOptional()) {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(ordinal),\n              \" or more argument(s)\");\n          return;\n        }\n        if (arguments.hasNext()) {\n          argument = arguments.next();\n          validator.expectArgumentMatchesParameter(t, argument,\n                  getJSType(argument), getJSType(parameter), call, ordinal);\n        } else if (!parameter.isOptional()) {\n          // Parameter has no matching argument.\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(ordinal),\n              \" or more argument(s)\");\n          return;\n        } else {\n          // Optional parameter has no matching argument.\n          break;\n        }\n        ordinal++;\n      }\n\n      if (var_args) {\n        // For a non-var_args function with a variable argument list,\n        // any number of arguments can be passed.\n        while (arguments.hasNext()) {\n          argument = arguments.next();\n          validator.expectArgumentMatchesParameter(t, argument,\n                  getJSType(argument), getJSType(parameter), call, ordinal);\n          ordinal++;\n        }\n      } else {\n        // For a non-var_args function without a variable argument list,\n        // the number of arguments must be equal to the number of parameters.\n        if (arguments.hasNext()) {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(ordinal),\n              \" or fewer argument(s)\");\n          return;\n        }\n        int numParams = functionType.getMaxArguments();\n        if (numParams > 0 && ordinal < numParams) {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(numParams),\n              \" argument(s)\");\n          return;\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..b7e291fe 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,27 +1405,130 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+    boolean var_args = false;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    while (arguments.hasNext() || parameters.hasNext()) {\n+      if (!parameters.hasNext()) {\n+        // If there are no parameters left in the list, then this must be\n+        // a var_args function.\n+        var_args = true;\n+        break;\n+      }\n+      parameter = parameters.next();\n+      ordinal++;\n+      if (!arguments.hasNext() && !parameter.isOptional()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(ordinal),\n+            \" or more argument(s)\");\n+        return;\n+      }\n+      if (arguments.hasNext()) {\n+        argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+      } else {\n+        if (!parameter.isOptional()) {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(ordinal),\n+              \" or more argument(s)\");\n+          return;\n+        }\n+        // Parameter has no matching argument.\n+        break;\n+      }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n+    if (var_args) {\n+      // For var_args function, the rest of the arguments (if any) must be of\n+      // the same type as the parameter type of the last parameter in the list.\n+      parameter = null;\n+      while (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        if (!parameter.isVarArgs()) {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              String.valueOf(ordinal), String.valueOf(ordinal),\n+              \" or more argument(s)\");\n+          return;\n+        }\n+      }\n+      if (parameter == null) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(ordinal),\n+            \" or more argument(s)\");\n+        return;\n+      }\n+      while (arguments.hasNext()) {\n+        argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n+        ordinal++;\n+      }\n+    } else {\n+      // For non-var_args function, the number of arguments must be equal to the\n+      // number of parameters.\n+      while (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        if (parameter.isVarArgs()) {\n+          var_args = true;\n+          break;\n+        }\n+        if (!arguments.hasNext() && !parameter.isOptional()) {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(ordinal),\n+              \" or more argument(s)\");\n+          return;\n+        }\n+        if (arguments.hasNext()) {\n+          argument = arguments.next();\n+          validator.expectArgumentMatchesParameter(t, argument,\n+                  getJSType(argument), getJSType(parameter), call, ordinal);\n+        } else if (!parameter.isOptional()) {\n+          // Parameter has no matching argument.\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(ordinal),\n+              \" or more argument(s)\");\n+          return;\n+        } else {\n+          // Optional parameter has no matching argument.\n+          break;\n+        }\n+        ordinal++;\n+      }\n+\n+      if (var_args) {\n+        // For a non-var_args function with a variable argument list,\n+        // any number of arguments can be passed.\n+        while (arguments.hasNext()) {\n+          argument = arguments.next();\n+          validator.expectArgumentMatchesParameter(t, argument,\n+                  getJSType(argument), getJSType(parameter), call, ordinal);\n+          ordinal++;\n+        }\n+      } else {\n+        // For a non-var_args function without a variable argument list,\n+        // the number of arguments must be equal to the number of parameters.\n+        if (arguments.hasNext()) {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(ordinal),\n+              \" or fewer argument(s)\");\n+          return;\n+        }\n+        int numParams = functionType.getMaxArguments();\n+        if (numParams > 0 && ordinal < numParams) {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(numParams),\n+              \" argument(s)\");\n+          return;\n+        }\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}