{
    "patch": "if (offsetLocal == offsetAdjusted) {\n    return offsetAdjusted;\n}\nlong nextLocal = nextTransition(instantAdjusted);\nlong nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\nif (nextLocal == nextAdjusted) {\n    // we are in a DST gap or overlap\n    int nextOffset = getOffset(nextLocal);\n    if (offsetLocal < nextOffset && offsetAdjusted < nextOffset) {\n        // we are in an overlap on a DST start date - return the standard offset\n        return getStandardOffset(instantAdjusted);\n    } else if (offsetLocal > nextOffset && offsetAdjusted > nextOffset) {\n        // we are in a gap on a DST end date - return the standard offset\n        return getStandardOffset(instantAdjusted);\n    } else if (offsetLocal > offsetAdjusted) {\n        // we are near a DST start date - return the local offset\n        return offsetLocal;\n    } else if (offsetLocal < offsetAdjusted) {\n        // we are near a DST end date - return the adjusted offset\n        return offsetAdjusted;\n    } else {\n        // unexpected state - return the adjusted offset\n        return offsetAdjusted;\n    }\n} else {\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        int prevOffsetLocal = getOffset(previousTransition(instantAdjusted));\n        if (prevOffsetLocal < offsetLocal) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n            if (prevLocal != prevAdjusted) {\n                int prevOffsetAdjusted = getOffset(prevAdjusted);\n                if (prevOffsetLocal == prevOffsetAdjusted) {\n                    return prevOffsetLocal;\n                } else {\n                    return offsetLocal;\n                }\n            } else {\n                return prevOffsetLocal;\n            }\n        } else {\n            return offsetLocal;\n        }\n    } else {\n        int prevOffsetAdjusted = getOffset(previousTransition(instantLocal - offsetAdjusted - 1));\n        if (prevOffsetAdjusted < offsetAdjusted) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n            if (prevLocal != prevAdjusted) {\n                int prevOffsetLocal = getOffset(prevLocal);\n                if (prevOffsetLocal == prevOffsetAdjusted) {\n                    return prevOffsetLocal;\n                } else {\n                    return prevOffsetAdjusted;\n                }\n            } else {\n                return prevOffsetAdjusted;\n            }\n        } else {\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b6a6c1f9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,69 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal == offsetAdjusted) {\n+    return offsetAdjusted;\n+}\n+long nextLocal = nextTransition(instantAdjusted);\n+long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+if (nextLocal == nextAdjusted) {\n+    // we are in a DST gap or overlap\n+    int nextOffset = getOffset(nextLocal);\n+    if (offsetLocal < nextOffset && offsetAdjusted < nextOffset) {\n+        // we are in an overlap on a DST start date - return the standard offset\n+        return getStandardOffset(instantAdjusted);\n+    } else if (offsetLocal > nextOffset && offsetAdjusted > nextOffset) {\n+        // we are in a gap on a DST end date - return the standard offset\n+        return getStandardOffset(instantAdjusted);\n+    } else if (offsetLocal > offsetAdjusted) {\n+        // we are near a DST start date - return the local offset\n+        return offsetLocal;\n+    } else if (offsetLocal < offsetAdjusted) {\n+        // we are near a DST end date - return the adjusted offset\n+        return offsetAdjusted;\n+    } else {\n+        // unexpected state - return the adjusted offset\n+        return offsetAdjusted;\n+    }\n+} else {\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        int prevOffsetLocal = getOffset(previousTransition(instantAdjusted));\n+        if (prevOffsetLocal < offsetLocal) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+            if (prevLocal != prevAdjusted) {\n+                int prevOffsetAdjusted = getOffset(prevAdjusted);\n+                if (prevOffsetLocal == prevOffsetAdjusted) {\n+                    return prevOffsetLocal;\n+                } else {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                return prevOffsetLocal;\n+            }\n+        } else {\n+            return offsetLocal;\n+        }\n+    } else {\n+        int prevOffsetAdjusted = getOffset(previousTransition(instantLocal - offsetAdjusted - 1));\n+        if (prevOffsetAdjusted < offsetAdjusted) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+            if (prevLocal != prevAdjusted) {\n+                int prevOffsetLocal = getOffset(prevLocal);\n+                if (prevOffsetLocal == prevOffsetAdjusted) {\n+                    return prevOffsetLocal;\n+                } else {\n+                    return prevOffsetAdjusted;\n+                }\n+            } else {\n+                return prevOffsetAdjusted;\n+            }\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}