{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\n\n// Collect all references to function arguments.\nfinal Set<Node> references = Sets.newIdentityHashSet();\nfinal Variable[] args = fnScope.getArguments();\nNodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n  @Override\n  public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n    return true;\n  }\n\n  @Override\n  public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n    if (NodeUtil.isReferenceName(n) && referenced.contains(fnScope.getVar(n.getString()))) {\n      for (Variable arg : args) {\n        if (arg.getName().equals(n.getString())) {\n          references.add(n);\n          return;\n        }\n      }\n    }\n  }\n});\n\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    if (!references.contains(lastArg)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7f249ffc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,54 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+\n+// Collect all references to function arguments.\n+final Set<Node> references = Sets.newIdentityHashSet();\n+final Variable[] args = fnScope.getArguments();\n+NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+  @Override\n+  public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+    return true;\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+    if (NodeUtil.isReferenceName(n) && referenced.contains(fnScope.getVar(n.getString()))) {\n+      for (Variable arg : args) {\n+        if (arg.getName().equals(n.getString())) {\n+          references.add(n);\n+          return;\n+        }\n+      }\n+    }\n+  }\n+});\n+\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    if (!references.contains(lastArg)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}