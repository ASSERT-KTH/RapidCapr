{
    "patch": "for (int i = 0; i < len_i; i++) {\n    char c = escapeJava[i];\n    if (c >= '\\u0080') {\n        out.write(convertOutsideOfAscii(c));\n        continue;\n    }\n    if (c == '\\b') {\n        out.write('\\\\');\n        out.write('b');\n    } else if (c == '\\t') {\n        out.write('\\\\');\n        out.write('t');\n    } else if (c == '\\n') {\n        out.write('\\\\');\n        out.write('n');\n    } else if (c == '\\f') {\n        out.write('\\\\');\n        out.write('f');\n    } else if (c == '\\r') {\n        out.write('\\\\');\n        out.write('r');\n    } else if (c == '\\\"') {\n        out.write('\\\\');\n        out.write('\\\"');\n    } else if (c == '\\\\') {\n        out.write('\\\\');\n        out.write('\\\\');\n    } else if (ESCAPE_ISO_CONTROL && (c < ' ')) { \n        if (c == '\\u007f') { // special case: DEL (no control character tabulated) \n            out.write(\"\\\\u007f\");\n        }\n        else {\n            out.write('\\\\');\n            out.write('u');\n            out.write('0');\n            out.write('0');\n            final int x = c / 16;\n            out.write(toHex(x));\n               x = c % 16;\n            out.write(toHex(x));\n        }\n    } else {\n        out.write(c);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}