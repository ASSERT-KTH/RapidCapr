{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double countValues = 0.0;\n    double countTypedValues = 0.0;\n    for (String key : jsonObject.keySet()) {\n        Object value = jsonObject.get(key);\n        if (value != null) {\n            countValues++;\n\n            if (value instanceof Boolean || value instanceof Double || value instanceof Integer) {\n                countTypedValues++;\n            }\n        }\n    }\n    return (countValues == 0) ? 0.0 : ((100.0 * countTypedValues) / countValues);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..48085fbf 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double countValues = 0.0;\n+    double countTypedValues = 0.0;\n+    for (String key : jsonObject.keySet()) {\n+        Object value = jsonObject.get(key);\n+        if (value != null) {\n+            countValues++;\n+\n+            if (value instanceof Boolean || value instanceof Double || value instanceof Integer) {\n+                countTypedValues++;\n+            }\n+        }\n+    }\n+    return (countValues == 0) ? 0.0 : ((100.0 * countTypedValues) / countValues);\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}