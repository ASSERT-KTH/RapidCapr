{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean propertiesResolved = true;\n    if (resolved) {\n      // Only call resolveViaProperties if resolveViaRegistry succeeded.\n      propertiesResolved = resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      if (isResolved()) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration()\n            ? getReferencedType()\n            : this;\n      }\n    }\n    // registry resolution failed; fall back to properties\n    if (propertiesResolved && resolveViaRegistry(t, enclosing)) {\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      if (isResolved()) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration()\n            ? getReferencedType()\n            : this;\n      }\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration()\n        ? getReferencedType()\n        : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..94d03c11 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,45 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n+    boolean propertiesResolved = true;\n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      // Only call resolveViaProperties if resolveViaRegistry succeeded.\n+      propertiesResolved = resolveViaProperties(t, enclosing);\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      if (isResolved()) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration()\n+            ? getReferencedType()\n+            : this;\n+      }\n+    }\n+    // registry resolution failed; fall back to properties\n+    if (propertiesResolved && resolveViaRegistry(t, enclosing)) {\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      if (isResolved()) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration()\n+            ? getReferencedType()\n+            : this;\n+      }\n     }\n-\n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration()\n+        ? getReferencedType()\n+        : this;\n   }\n \n   /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}