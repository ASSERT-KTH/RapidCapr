{
    "patch": "           // check if the variable is also declared in a parent function\n            for (BasicBlock b = block.getParent(); b != null; b = b.getParent()) {\n              if (b.getVarsDeclaredInBlock().contains(name)) {\n                // Also assigned in a parent\n                return false;\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b73d3d20 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+           // check if the variable is also declared in a parent function\n+            for (BasicBlock b = block.getParent(); b != null; b = b.getParent()) {\n+              if (b.getVarsDeclaredInBlock().contains(name)) {\n+                // Also assigned in a parent\n+                return false;\n+              }\n+            }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}