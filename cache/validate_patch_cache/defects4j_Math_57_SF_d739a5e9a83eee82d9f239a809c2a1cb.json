{
    "patch": "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n    // create the initial clusters\n    List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n    assignPointsToClusters(clusters, points);\n\n    // iterate through updating the centers until we're done\n    final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n    for (int count = 0; count < max; count++) {\n        boolean clusteringChanged = false;\n        List<Cluster<T>> newClusters = new ArrayList<>();\n        for (final Cluster<T> cluster : clusters) {\n            final T newCenter;\n            if (cluster.getPoints().isEmpty()) {\n                switch (emptyStrategy) {\n                    case LARGEST_VARIANCE:\n                        newCenter = getPointFromLargestVarianceCluster(clusters);\n                        break;\n                    case LARGEST_POINTS_NUMBER:\n                        newCenter = getPointFromLargestNumberCluster(clusters);\n                        break;\n                    case FARTHEST_POINT:\n                        newCenter = getFarthestPoint(clusters);\n                        break;\n                    default:\n                        throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                }\n                clusteringChanged = true;\n            } else {\n                newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                if (!newCenter.equals(cluster.getCenter())) {\n                    clusteringChanged = true;\n                }\n            }\n            newClusters.add(new Cluster<>(newCenter));\n        }\n        if (!clusteringChanged) {\n            return clusters;\n        }\n        assignPointsToClusters(newClusters, points);\n        clusters = newClusters;\n    }\n    return clusters;\n}\n\n/**\n * Adds the given points to the closest {@link Cluster}.\n *\n * @param <T> type of the points to cluster\n * @param clusters the {@link Cluster}s to add the points to\n * @param points the points to add to the given {@link Cluster}s\n */\nprivate static <T extends Clusterable<T>> void assignPointsToClusters(\n        final Collection<Cluster<T>> clusters, final Collection<T> points) {\n    for (final T p : points) {\n        final Cluster<T> cluster = getNearestCluster(clusters, p);\n        cluster.addPoint(p);\n    }\n}\n\n/**\n * Use K-means++ to choose the initial centers.\n *\n * @param <T> type of the points to cluster\n * @param points the points to choose the initial centers from\n * @param k the number of centers to choose\n * @param random random generator to use\n * @return the initial centers\n */\nprivate static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(\n        final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<>(k);\n    final long p = 1000000;\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    final Cluster<T> firstCluster = new Cluster<>(firstPoint);\n    resultSet.add(firstCluster);\n\n    double totalDist = 0.0;\n    final double[] d = new double[pointSet.size()];\n    for (int i = 0; i < pointSet.size(); i++) {\n        d[i] = firstPoint.distanceFrom(pointSet.get(i));\n        totalDist += d[i] * d[i];\n    }\n\n    // Add up to k-1 centers, one at a time\n    for (int j = 1; j < k; j++) {\n        double bestDist = Double.NEGATIVE_INFINITY;\n        final double[] sumD = new double[pointSet.size()];\n        T bestPoint = null;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T pnt = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, pnt);\n            double dist = d[i] * d[i] / totalDist;\n            dist += p * nearest.getSquaredDistance(pnt) / totalDist;\n            sumD[i] = dist;\n            if (dist > bestDist) {\n                bestDist = dist;\n                bestPoint = pnt;\n            }\n        }\n        if (bestPoint == null) {\n            // We could not find a good point to add\n            break;\n        }\n        pointSet.remove(bestPoint);\n        resultSet.add(new Cluster<>(bestPoint));\n        totalDist = 0.0;\n        d[0] = bestPoint.distanceFrom(resultSet.get(0).getCenter());\n        totalDist += d[0] * d[0];\n        for (int i = 1; i < pointSet.size(); i++) {\n            final T pnt = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, pnt);\n            double dist = d[i] * d[i] / totalDist;\n            dist += p * nearest.getSquaredDistance(pnt) / totalDist;\n            d[i] = pnt.distanceFrom(bestPoint);\n            sumD[i] += dist;\n            totalDist += d[i] * d[i];\n        }\n    }\n\n    return resultSet;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..6566f344f 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -89,114 +89,131 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n      *     for.  If negative, no maximum will be used\n      * @return a list of clusters containing the points\n      */\n-    public List<Cluster<T>> cluster(final Collection<T> points,\n-                                    final int k, final int maxIterations) {\n-        // create the initial clusters\n-        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n-        assignPointsToClusters(clusters, points);\n-\n-        // iterate through updating the centers until we're done\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        for (int count = 0; count < max; count++) {\n-            boolean clusteringChanged = false;\n-            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n-            for (final Cluster<T> cluster : clusters) {\n-                final T newCenter;\n-                if (cluster.getPoints().isEmpty()) {\n-                    switch (emptyStrategy) {\n-                        case LARGEST_VARIANCE :\n-                            newCenter = getPointFromLargestVarianceCluster(clusters);\n-                            break;\n-                        case LARGEST_POINTS_NUMBER :\n-                            newCenter = getPointFromLargestNumberCluster(clusters);\n-                            break;\n-                        case FARTHEST_POINT :\n-                            newCenter = getFarthestPoint(clusters);\n-                            break;\n-                        default :\n-                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n-                    }\n+public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n+    // create the initial clusters\n+    List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n+    assignPointsToClusters(clusters, points);\n+\n+    // iterate through updating the centers until we're done\n+    final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+    for (int count = 0; count < max; count++) {\n+        boolean clusteringChanged = false;\n+        List<Cluster<T>> newClusters = new ArrayList<>();\n+        for (final Cluster<T> cluster : clusters) {\n+            final T newCenter;\n+            if (cluster.getPoints().isEmpty()) {\n+                switch (emptyStrategy) {\n+                    case LARGEST_VARIANCE:\n+                        newCenter = getPointFromLargestVarianceCluster(clusters);\n+                        break;\n+                    case LARGEST_POINTS_NUMBER:\n+                        newCenter = getPointFromLargestNumberCluster(clusters);\n+                        break;\n+                    case FARTHEST_POINT:\n+                        newCenter = getFarthestPoint(clusters);\n+                        break;\n+                    default:\n+                        throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n+                }\n+                clusteringChanged = true;\n+            } else {\n+                newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n+                if (!newCenter.equals(cluster.getCenter())) {\n                     clusteringChanged = true;\n-                } else {\n-                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n-                    if (!newCenter.equals(cluster.getCenter())) {\n-                        clusteringChanged = true;\n-                    }\n                 }\n-                newClusters.add(new Cluster<T>(newCenter));\n             }\n-            if (!clusteringChanged) {\n-                return clusters;\n-            }\n-            assignPointsToClusters(newClusters, points);\n-            clusters = newClusters;\n+            newClusters.add(new Cluster<>(newCenter));\n+        }\n+        if (!clusteringChanged) {\n+            return clusters;\n         }\n-        return clusters;\n+        assignPointsToClusters(newClusters, points);\n+        clusters = newClusters;\n     }\n+    return clusters;\n+}\n \n-    /**\n-     * Adds the given points to the closest {@link Cluster}.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param clusters the {@link Cluster}s to add the points to\n-     * @param points the points to add to the given {@link Cluster}s\n-     */\n-    private static <T extends Clusterable<T>> void\n-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n-        for (final T p : points) {\n-            Cluster<T> cluster = getNearestCluster(clusters, p);\n-            cluster.addPoint(p);\n-        }\n+/**\n+ * Adds the given points to the closest {@link Cluster}.\n+ *\n+ * @param <T> type of the points to cluster\n+ * @param clusters the {@link Cluster}s to add the points to\n+ * @param points the points to add to the given {@link Cluster}s\n+ */\n+private static <T extends Clusterable<T>> void assignPointsToClusters(\n+        final Collection<Cluster<T>> clusters, final Collection<T> points) {\n+    for (final T p : points) {\n+        final Cluster<T> cluster = getNearestCluster(clusters, p);\n+        cluster.addPoint(p);\n     }\n+}\n \n-    /**\n-     * Use K-means++ to choose the initial centers.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param points the points to choose the initial centers from\n-     * @param k the number of centers to choose\n-     * @param random random generator to use\n-     * @return the initial centers\n-     */\n-    private static <T extends Clusterable<T>> List<Cluster<T>>\n-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n-\n-        final List<T> pointSet = new ArrayList<T>(points);\n-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n-\n-        // Choose one center uniformly at random from among the data points.\n-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n-        resultSet.add(new Cluster<T>(firstPoint));\n-\n-        final double[] dx2 = new double[pointSet.size()];\n-        while (resultSet.size() < k) {\n-            // For each data point x, compute D(x), the distance between x and\n-            // the nearest center that has already been chosen.\n-            int sum = 0;\n-            for (int i = 0; i < pointSet.size(); i++) {\n-                final T p = pointSet.get(i);\n-                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n-                final double d = p.distanceFrom(nearest.getCenter());\n-                sum += d * d;\n-                dx2[i] = sum;\n-            }\n+/**\n+ * Use K-means++ to choose the initial centers.\n+ *\n+ * @param <T> type of the points to cluster\n+ * @param points the points to choose the initial centers from\n+ * @param k the number of centers to choose\n+ * @param random random generator to use\n+ * @return the initial centers\n+ */\n+private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(\n+        final Collection<T> points, final int k, final Random random) {\n+    final List<T> pointSet = new ArrayList<>(points);\n+    final List<Cluster<T>> resultSet = new ArrayList<>(k);\n+    final long p = 1000000;\n+\n+    // Choose one center uniformly at random from among the data points.\n+    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n+    final Cluster<T> firstCluster = new Cluster<>(firstPoint);\n+    resultSet.add(firstCluster);\n+\n+    double totalDist = 0.0;\n+    final double[] d = new double[pointSet.size()];\n+    for (int i = 0; i < pointSet.size(); i++) {\n+        d[i] = firstPoint.distanceFrom(pointSet.get(i));\n+        totalDist += d[i] * d[i];\n+    }\n \n-            // Add one new data point as a center. Each point x is chosen with\n-            // probability proportional to D(x)2\n-            final double r = random.nextDouble() * sum;\n-            for (int i = 0 ; i < dx2.length; i++) {\n-                if (dx2[i] >= r) {\n-                    final T p = pointSet.remove(i);\n-                    resultSet.add(new Cluster<T>(p));\n-                    break;\n-                }\n+    // Add up to k-1 centers, one at a time\n+    for (int j = 1; j < k; j++) {\n+        double bestDist = Double.NEGATIVE_INFINITY;\n+        final double[] sumD = new double[pointSet.size()];\n+        T bestPoint = null;\n+        for (int i = 0; i < pointSet.size(); i++) {\n+            final T pnt = pointSet.get(i);\n+            final Cluster<T> nearest = getNearestCluster(resultSet, pnt);\n+            double dist = d[i] * d[i] / totalDist;\n+            dist += p * nearest.getSquaredDistance(pnt) / totalDist;\n+            sumD[i] = dist;\n+            if (dist > bestDist) {\n+                bestDist = dist;\n+                bestPoint = pnt;\n             }\n         }\n-\n-        return resultSet;\n-\n+        if (bestPoint == null) {\n+            // We could not find a good point to add\n+            break;\n+        }\n+        pointSet.remove(bestPoint);\n+        resultSet.add(new Cluster<>(bestPoint));\n+        totalDist = 0.0;\n+        d[0] = bestPoint.distanceFrom(resultSet.get(0).getCenter());\n+        totalDist += d[0] * d[0];\n+        for (int i = 1; i < pointSet.size(); i++) {\n+            final T pnt = pointSet.get(i);\n+            final Cluster<T> nearest = getNearestCluster(resultSet, pnt);\n+            double dist = d[i] * d[i] / totalDist;\n+            dist += p * nearest.getSquaredDistance(pnt) / totalDist;\n+            d[i] = pnt.distanceFrom(bestPoint);\n+            sumD[i] += dist;\n+            totalDist += d[i] * d[i];\n+        }\n     }\n \n+    return resultSet;\n+}\n+\n     /**\n      * Get a random point from the {@link Cluster} with the largest distance variance.\n      *",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}