{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            int order = comparator.compare(reflected, best);\n            if (order < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] expandedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                int expandedOrder = comparator.compare(expanded, reflected);\n                if (expandedOrder < 0) {\n                    \n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                }\n                else {\n                    // accept the reflected simplex\n                    simplex = reflected.getPoint() == best.getPoint() ? reflected.getPoint() != expanded.getPoint() ? replaceWorstPoint(expandedSimplex, expanded) : contract() : replaceWorstPoint(original, reflected);\n                }\n\n                return;\n\n            }\n\n            // Perform a contraction\n            if (order >= simplex.length ) {\n                simplex = contract();\n            }\n            else {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                int contractedOrder = comparator.compare(contracted, best);\n                if (contractedOrder < 0) {\n                    \n                    // accept the contracted simplex\n                    simplex = replaceWorstPoint(original, contracted);\n                }\n                else {\n\n                    simplex = contract();\n                }\n            }\n        }\n\n    }\n\n    private RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair point) {\n        RealPointValuePair[] simplex = Arrays.copyOf(original, original.length);\n        simplex[simplex.length - 1] = point;\n        return simplex;\n    }\n\n    private RealPointValuePair[] contract() {\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n        for (int i = 1; i < original.length; i++) {\n            original[i] = new RealPointValuePair(contractPoint(best.getPoint(), original[i].getPoint()), Double.NaN);\n        }\n        return original;\n    }\n\n    private double[] contractPoint(double[] best, double[] point) {\n        double[] contracted = new double[best.length];\n        for (int i = 0; i < best.length; i++) {\n            contracted[i] = (point[i] + best[i]) / 2;\n        }\n        return contracted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..92e73642f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,44 +58,81 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+            int order = comparator.compare(reflected, best);\n+            if (order < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair[] expandedSimplex = simplex.clone();\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                int expandedOrder = comparator.compare(expanded, reflected);\n+                if (expandedOrder < 0) {\n+                    \n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                }\n+                else {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = reflected.getPoint() == best.getPoint() ? reflected.getPoint() != expanded.getPoint() ? replaceWorstPoint(expandedSimplex, expanded) : contract() : replaceWorstPoint(original, reflected);\n                 }\n \n                 return;\n \n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            // Perform a contraction\n+            if (order >= simplex.length ) {\n+                simplex = contract();\n+            }\n+            else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                int contractedOrder = comparator.compare(contracted, best);\n+                if (contractedOrder < 0) {\n+                    \n+                    // accept the contracted simplex\n+                    simplex = replaceWorstPoint(original, contracted);\n+                }\n+                else {\n \n-            // check convergence\n-                return;\n+                    simplex = contract();\n+                }\n             }\n+        }\n \n+    }\n+\n+    private RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair point) {\n+        RealPointValuePair[] simplex = Arrays.copyOf(original, original.length);\n+        simplex[simplex.length - 1] = point;\n+        return simplex;\n+    }\n+\n+    private RealPointValuePair[] contract() {\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n+        for (int i = 1; i < original.length; i++) {\n+            original[i] = new RealPointValuePair(contractPoint(best.getPoint(), original[i].getPoint()), Double.NaN);\n         }\n+        return original;\n+    }\n \n+    private double[] contractPoint(double[] best, double[] point) {\n+        double[] contracted = new double[best.length];\n+        for (int i = 0; i < best.length; i++) {\n+            contracted[i] = (point[i] + best[i]) / 2;\n+        }\n+        return contracted;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}