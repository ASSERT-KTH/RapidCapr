{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (elementPairs.isEmpty()) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    // Special case: Only one element left, it has to be the printer/parser\n    if (elementPairs.size() == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            throw new IllegalStateException(\"Builder has created a separator but no printer/parser\");\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n\n    // Find index of first non-separator element\n    int firstNonSepIdx = 0;\n    for (Object obj : elementPairs) {\n        if (obj instanceof Separator) {\n            firstNonSepIdx++;\n        } else {\n            break;\n        }\n    }\n\n    // No non-separator found, must have created a separator but no printer/parser\n    if (firstNonSepIdx == elementPairs.size()) {\n        throw new IllegalStateException(\"Builder has created a separator but no printer/parser\");\n    }\n\n    // Special case: Only one non-separator element left, it has to be the printer/parser\n    if (firstNonSepIdx == elementPairs.size() - 1) {\n        Object obj = elementPairs.get(firstNonSepIdx);\n        if (obj instanceof Separator) {\n            throw new IllegalStateException(\"Builder has created a separator but no printer/parser\");\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n\n    // Get the first separator and split the element pairs list in two\n    Separator separator = (Separator) elementPairs.get(firstNonSepIdx);\n    List<Object> beforeSep = elementPairs.subList(0, firstNonSepIdx);\n    List<Object> afterSep = elementPairs.subList(firstNonSepIdx + 1, elementPairs.size());\n\n    // Create a formatter from the first part of the list, refuse the undesired type creation in the second one\n    PeriodFormatter formatter = toFormatter(beforeSep, notPrinter, notParser);\n    if (notPrinter) {\n        notParser = true;\n    } else if (notParser) {\n        notPrinter = true;\n    }\n\n    // Recursively create a formatter from the second part of the list, append the separator to it\n    return separator.finish(formatter.getPrinter(), formatter.getParser(), toFormatter(afterSep, notPrinter, notParser));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..63ed5cee 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,77 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (elementPairs.isEmpty()) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    // Special case: Only one element left, it has to be the printer/parser\n+    if (elementPairs.size() == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            throw new IllegalStateException(\"Builder has created a separator but no printer/parser\");\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    }\n+\n+    // Find index of first non-separator element\n+    int firstNonSepIdx = 0;\n+    for (Object obj : elementPairs) {\n+        if (obj instanceof Separator) {\n+            firstNonSepIdx++;\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    // No non-separator found, must have created a separator but no printer/parser\n+    if (firstNonSepIdx == elementPairs.size()) {\n+        throw new IllegalStateException(\"Builder has created a separator but no printer/parser\");\n+    }\n+\n+    // Special case: Only one non-separator element left, it has to be the printer/parser\n+    if (firstNonSepIdx == elementPairs.size() - 1) {\n+        Object obj = elementPairs.get(firstNonSepIdx);\n+        if (obj instanceof Separator) {\n+            throw new IllegalStateException(\"Builder has created a separator but no printer/parser\");\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n     }\n \n+    // Get the first separator and split the element pairs list in two\n+    Separator separator = (Separator) elementPairs.get(firstNonSepIdx);\n+    List<Object> beforeSep = elementPairs.subList(0, firstNonSepIdx);\n+    List<Object> afterSep = elementPairs.subList(firstNonSepIdx + 1, elementPairs.size());\n+\n+    // Create a formatter from the first part of the list, refuse the undesired type creation in the second one\n+    PeriodFormatter formatter = toFormatter(beforeSep, notPrinter, notParser);\n+    if (notPrinter) {\n+        notParser = true;\n+    } else if (notParser) {\n+        notPrinter = true;\n+    }\n+\n+    // Recursively create a formatter from the second part of the list, append the separator to it\n+    return separator.finish(formatter.getPrinter(), formatter.getParser(), toFormatter(afterSep, notPrinter, notParser));\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: method finish in class Separator cannot be applied to given types;",
    "test_result": "ERROR"
}