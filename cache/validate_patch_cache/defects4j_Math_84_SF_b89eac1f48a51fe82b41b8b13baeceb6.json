{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, worst) < 0) {\n\n                final RealPointValuePair[] reflectedSimplex = simplex;\n\n                // perform an expansion\n                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = expanded.getPoint();\n                } else {\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            RealPointValuePair contracted;\n            if (comparator.compare(reflected, worst) >= 0) {\n                // Perform an outside contraction\n                contracted = evaluateNewSimplex(original, psi, comparator);\n                if (comparator.compare(contracted, worst) < 0) {\n                    simplex = contracted.getPoint();\n                    return;\n                }\n            } else {\n                // Perform an inside contraction\n                contracted = evaluateNewSimplex(original, chi, comparator);\n                if (comparator.compare(contracted, reflected) < 0) {\n                    simplex = contracted.getPoint();\n                    return;\n                }\n            }\n\n            // Perform a shrink\n            final RealPointValuePair[] shrunk = new RealPointValuePair[n + 1];\n            shrunk[0] = best;\n            for (int i = 1; i < shrunk.length; i++) {\n                shrunk[i] = evaluateAt(new RealPoint((original[i].getPoint()).add(best.getPoint()).mapMultiply(0.5)), comparator);\n            }\n            simplex = shrunk;\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..49830936d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -71,13 +71,15 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+            if (comparator.compare(reflected, worst) < 0) {\n \n-                // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+\n+                // perform an expansion\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = expanded.getPoint();\n+                } else {\n                     simplex = reflectedSimplex;\n                 }\n \n@@ -85,14 +87,30 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            RealPointValuePair contracted;\n+            if (comparator.compare(reflected, worst) >= 0) {\n+                // Perform an outside contraction\n+                contracted = evaluateNewSimplex(original, psi, comparator);\n+                if (comparator.compare(contracted, worst) < 0) {\n+                    simplex = contracted.getPoint();\n+                    return;\n+                }\n+            } else {\n+                // Perform an inside contraction\n+                contracted = evaluateNewSimplex(original, chi, comparator);\n+                if (comparator.compare(contracted, reflected) < 0) {\n+                    simplex = contracted.getPoint();\n+                    return;\n+                }\n+            }\n \n-            // check convergence\n-                return;\n+            // Perform a shrink\n+            final RealPointValuePair[] shrunk = new RealPointValuePair[n + 1];\n+            shrunk[0] = best;\n+            for (int i = 1; i < shrunk.length; i++) {\n+                shrunk[i] = evaluateAt(new RealPoint((original[i].getPoint()).add(best.getPoint()).mapMultiply(0.5)), comparator);\n             }\n+            simplex = shrunk;\n \n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}