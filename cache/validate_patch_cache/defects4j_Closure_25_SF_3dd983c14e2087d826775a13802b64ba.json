{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    // check if constructor type is non-null and constructor function\n    if (constructorType != null && constructorType.isConstructor()) {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      type = ct.getInstanceType();\n    } else {\n      // the constructor type is either null, not a constructor function, or an unknown type\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n\n    n.setJSType(type);\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..8c563ac4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1038,27 +1038,22 @@ class TypeInference\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n+\n+    // check if constructor type is non-null and constructor function\n+    if (constructorType != null && constructorType.isConstructor()) {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      type = ct.getInstanceType();\n+    } else {\n+      // the constructor type is either null, not a constructor function, or an unknown type\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n+\n     n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+\n     return scope;\n   }\n ",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}