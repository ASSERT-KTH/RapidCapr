{
    "patch": "          if (parent.getLastChild().getString().startsWith(\"$$\")) {\n            // Properties with names starting with $$% can be internal\n            // names, so we should ignore them.\n            continue;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..851e2612 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,11 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          if (parent.getLastChild().getString().startsWith(\"$$\")) {\n+            // Properties with names starting with $$% can be internal\n+            // names, so we should ignore them.\n+            continue;\n+          }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}