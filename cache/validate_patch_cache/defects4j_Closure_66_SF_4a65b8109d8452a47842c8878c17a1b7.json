{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type dataType = new TypeToken<Map<String, List<Map<String, Object>>>>() {}.getType();\n    Map<String, List<Map<String, Object>>> data = gson.fromJson(json, dataType);\n    int count = 0;\n    int total = 0;\n    for (Map<String, Object> map : data.get(\"data\")) {\n        total++;\n        String type = map.get(\"type\").toString();\n        if (type.equals(\"typed\")) {\n            count++;\n        }\n    }\n    return (double) count / total * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..961a0c3e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type dataType = new TypeToken<Map<String, List<Map<String, Object>>>>() {}.getType();\n+    Map<String, List<Map<String, Object>>> data = gson.fromJson(json, dataType);\n+    int count = 0;\n+    int total = 0;\n+    for (Map<String, Object> map : data.get(\"data\")) {\n+        total++;\n+        String type = map.get(\"type\").toString();\n+        if (type.equals(\"typed\")) {\n+            count++;\n+        }\n+    }\n+    return (double) count / total * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}