{
    "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);\nDateTimeFieldType fieldType = newPartial.getFieldType(index);\nif (!fieldType.getField(iChronology).isSupported()) {\n    throw new UnsupportedOperationException(\"Field \" + fieldType + \" is not supported\");\n}\n\n// Create a new Partial without the milliseconds field and validate it\nPartial validPartial = newPartial.without(DateTimeFieldType.millisOfDay());\niChronology.validate(validPartial, newValues);\n\n// Return the validated Partial\nreturn validPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..6683aa56 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,18 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+DateTimeFieldType fieldType = newPartial.getFieldType(index);\n+if (!fieldType.getField(iChronology).isSupported()) {\n+    throw new UnsupportedOperationException(\"Field \" + fieldType + \" is not supported\");\n+}\n+\n+// Create a new Partial without the milliseconds field and validate it\n+Partial validPartial = newPartial.without(DateTimeFieldType.millisOfDay());\n+iChronology.validate(validPartial, newValues);\n+\n+// Return the validated Partial\n+return validPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: variable fieldType is already defined in method with(DateTimeFieldType,int)",
    "test_result": "ERROR"
}