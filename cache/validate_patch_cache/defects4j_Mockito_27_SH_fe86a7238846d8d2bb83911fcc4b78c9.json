{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\nMockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nCallback[] callbacks = ((Factory) mock).getCallbacks();\nList<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\nint filterIndex = -1;\nfor (int i = 0; i < callbackList.size(); i++) {\n    if (callbackList.get(i) instanceof MethodInterceptorFilter) {\n        filterIndex = i;\n        break;\n    }\n}\nif (filterIndex == -1) {\n    callbackList.add(newFilter);\n} else {\n    callbackList.set(filterIndex, newFilter);\n}\n((Factory) mock).setCallbacks(callbackList.toArray(new Callback[callbackList.size()]));",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..cfbd8928d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+Callback[] callbacks = ((Factory) mock).getCallbacks();\n+List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n+int filterIndex = -1;\n+for (int i = 0; i < callbackList.size(); i++) {\n+    if (callbackList.get(i) instanceof MethodInterceptorFilter) {\n+        filterIndex = i;\n+        break;\n+    }\n+}\n+if (filterIndex == -1) {\n+    callbackList.add(newFilter);\n+} else {\n+    callbackList.set(filterIndex, newFilter);\n+}\n+((Factory) mock).setCallbacks(callbackList.toArray(new Callback[callbackList.size()]));\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}