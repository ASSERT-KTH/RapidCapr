{
    "patch": "              // NOTE: assignments to 'this' or LHS of a plus operator may change the value of 'lhs' and\n              // should be treated as an external effect.\n              lhs = findSideEffectFreeReplacement(lhs, cond);\n              if (lhs != null) {\n                n.removeChild(cond);\n                Node assignName = thenOp.removeFirstChild();\n                Node thenExpr = thenOp.removeFirstChild();\n                Node elseExpr = elseOp.getLastChild();\n                elseOp.removeChild(elseExpr);\n\n                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n                Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                    .srcref(thenOp);\n                Node expr = NodeUtil.newExpr(assign);\n                parent.replaceChild(n, expr);\n                reportCodeChange();\n\n                return expr;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..07dd0c74 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,25 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE: assignments to 'this' or LHS of a plus operator may change the value of 'lhs' and\n+              // should be treated as an external effect.\n+              lhs = findSideEffectFreeReplacement(lhs, cond);\n+              if (lhs != null) {\n+                n.removeChild(cond);\n+                Node assignName = thenOp.removeFirstChild();\n+                Node thenExpr = thenOp.removeFirstChild();\n+                Node elseExpr = elseOp.getLastChild();\n+                elseOp.removeChild(elseExpr);\n+\n+                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+                Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                    .srcref(thenOp);\n+                Node expr = NodeUtil.newExpr(assign);\n+                parent.replaceChild(n, expr);\n+                reportCodeChange();\n+\n+                return expr;\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}