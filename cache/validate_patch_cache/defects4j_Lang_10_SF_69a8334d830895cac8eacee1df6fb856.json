{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean inQuotes = false;\n    boolean escape = false;\n\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n\n        if (inQuotes) {\n            regex.append(c);\n            if (!escape && c == '\\'') {\n                inQuotes = false;\n            }\n            escape = (!escape && c == '\\\\');\n            continue;\n        }\n\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        break;\n                    }\n                    c = value.charAt(i);\n                }\n                regex.append('\\\\').append('Q');\n                inQuotes = true;\n                break;\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '?':\n            case '^':\n                regex.append('\\\\').append(c);\n                escape = false;\n                break;\n            case '\\\\':\n                if (!escape && i < value.length() - 1 && value.charAt(i + 1) == 's') {\n                    regex.append(\"\\\\s+\");\n                    i++; // skip the 's' character\n                    wasWhite = true;\n                } else {\n                    regex.append('\\\\').append(c);\n                    escape = !escape;\n                }\n                break;\n            case '$':\n            case '.':\n                if ((!escape && i == 0) || (i > 0 && value.charAt(i - 1) != '\\\\')) {\n                    regex.append('\\\\');\n                }\n                regex.append(c);\n                escape = false;\n                break;\n            default:\n                if (Character.isWhitespace(c)) {\n                    if (!wasWhite && !escape) {\n                        regex.append(\"\\\\s+\");\n                        wasWhite = true;\n                    }\n                } else {\n                    regex.append(c);\n                    wasWhite = false;\n                }\n                escape = false;\n                break;\n        }\n    }\n\n    if (inQuotes) {\n        regex.append('\\\\').append('Q');\n    }\n\n    if (wasWhite || escape) {\n        regex.append(\"\\\\s+\");\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..01c658b2 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,92 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean inQuotes = false;\n+    boolean escape = false;\n+\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+\n+        if (inQuotes) {\n+            regex.append(c);\n+            if (!escape && c == '\\'') {\n+                inQuotes = false;\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            escape = (!escape && c == '\\\\');\n+            continue;\n+        }\n+\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (unquote) {\n+                    if (++i == value.length()) {\n+                        break;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n+                regex.append('\\\\').append('Q');\n+                inQuotes = true;\n                 break;\n-            case '?':\n             case '[':\n             case ']':\n             case '(':\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n+            case '?':\n             case '^':\n+                regex.append('\\\\').append(c);\n+                escape = false;\n+                break;\n+            case '\\\\':\n+                if (!escape && i < value.length() - 1 && value.charAt(i + 1) == 's') {\n+                    regex.append(\"\\\\s+\");\n+                    i++; // skip the 's' character\n+                    wasWhite = true;\n+                } else {\n+                    regex.append('\\\\').append(c);\n+                    escape = !escape;\n+                }\n+                break;\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                if ((!escape && i == 0) || (i > 0 && value.charAt(i - 1) != '\\\\')) {\n+                    regex.append('\\\\');\n+                }\n+                regex.append(c);\n+                escape = false;\n+                break;\n+            default:\n+                if (Character.isWhitespace(c)) {\n+                    if (!wasWhite && !escape) {\n+                        regex.append(\"\\\\s+\");\n+                        wasWhite = true;\n+                    }\n+                } else {\n+                    regex.append(c);\n+                    wasWhite = false;\n+                }\n+                escape = false;\n+                break;\n         }\n-        return regex;\n     }\n \n+    if (inQuotes) {\n+        regex.append('\\\\').append('Q');\n+    }\n+\n+    if (wasWhite || escape) {\n+        regex.append(\"\\\\s+\");\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}