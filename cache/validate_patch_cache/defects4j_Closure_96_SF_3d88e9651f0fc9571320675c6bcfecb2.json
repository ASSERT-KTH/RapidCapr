{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  \n  if (numArgs < minArgs || numArgs > maxArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ? \" and \" + (maxArgs - minArgs) + \" argument(s) beyond the minimum\" : \"\");\n    throw new RuntimeException(\"Invalid argument count: \" + call);\n  }\n\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  \n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    if (!arguments.hasNext()) {\n      break;\n    }\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n  \n  if (parameters.hasNext() && parameter.isVarArgs()) {\n    // Handle varargs functions\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), parameter.getJSType(), call, ordinal++);\n    }\n  }\n\n  if (arguments.hasNext()) {\n    // There are too many arguments, throw an exception.\n    throw new RuntimeException(\"Too many arguments: \" + call);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..cfa30392 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,53 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  \n+  if (numArgs < minArgs || numArgs > maxArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(minArgs),\n+        maxArgs != Integer.MAX_VALUE ? \" and \" + (maxArgs - minArgs) + \" argument(s) beyond the minimum\" : \"\");\n+    throw new RuntimeException(\"Invalid argument count: \" + call);\n+  }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  \n+  while (parameters.hasNext()) {\n+    parameter = parameters.next();\n+    if (!arguments.hasNext()) {\n+      break;\n     }\n+    argument = arguments.next();\n+    ordinal++;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+  \n+  if (parameters.hasNext() && parameter.isVarArgs()) {\n+    // Handle varargs functions\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      validator.expectArgumentMatchesParameter(t, argument,\n+          getJSType(argument), parameter.getJSType(), call, ordinal++);\n     }\n   }\n \n+  if (arguments.hasNext()) {\n+    // There are too many arguments, throw an exception.\n+    throw new RuntimeException(\"Too many arguments: \" + call);\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<-2>",
    "test_result": "FAIL"
}