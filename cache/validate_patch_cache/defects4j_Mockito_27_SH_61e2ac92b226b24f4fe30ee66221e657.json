{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                .spiedInstance(mock)\n                .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n// Check if callbacks are set to null, if so initialize them before assigning the newFilter\nCallback[] callbacks = ((Factory) mock).getCallbacks();\nif (callbacks == null) {\n    callbacks = new Callback[1];\n} else {\n    // Otherwise, iterate through the callbacks, and replace any existing MethodInterceptorFilters with newFilter\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof MethodInterceptorFilter) {\n            callbacks[i] = newFilter;\n            return;\n        }\n    }\n    // If no MethodInterceptorFilters were found, add the newFilter to the end of the existing callbacks\n    List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n    callbackList.add(newFilter);\n    callbacks = callbackList.toArray(new Callback[callbackList.size()]);\n}\n((Factory) mock).setCallbacks(callbacks);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..704462770 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                .spiedInstance(mock)\n+                .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+// Check if callbacks are set to null, if so initialize them before assigning the newFilter\n+Callback[] callbacks = ((Factory) mock).getCallbacks();\n+if (callbacks == null) {\n+    callbacks = new Callback[1];\n+} else {\n+    // Otherwise, iterate through the callbacks, and replace any existing MethodInterceptorFilters with newFilter\n+    for (int i = 0; i < callbacks.length; i++) {\n+        if (callbacks[i] instanceof MethodInterceptorFilter) {\n+            callbacks[i] = newFilter;\n+            return;\n+        }\n+    }\n+    // If no MethodInterceptorFilters were found, add the newFilter to the end of the existing callbacks\n+    List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n+    callbackList.add(newFilter);\n+    callbacks = callbackList.toArray(new Callback[callbackList.size()]);\n+}\n+((Factory) mock).setCallbacks(callbacks);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}