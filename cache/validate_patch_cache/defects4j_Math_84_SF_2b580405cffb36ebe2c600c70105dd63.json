{
    "patch": "                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() == best.getPoint() ? reflectedSimplex : simplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPoint() == best.getPoint() ? reflected.getPoint() == best.getPoint() ?\n                        contract(original[0], 0.5) : reflected.getPoint() == original[1].getPoint() ?\n                                contract(original[0], 0.5) : contract(original[0], psi) : simplex;\n\n            // check convergence\n            } else {\n                boolean simplexChanged = true;\n                for (int i = 0; i < simplex.length; i++) {\n                    if (!simplex[i].getPoint().equals(original[i].getPoint())) {\n                        simplexChanged = false;\n                        break;\n                    }\n                }\n                if (simplexChanged) {\n                    return;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..cccb4409b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,25 +58,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() == best.getPoint() ? reflectedSimplex : simplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n@@ -89,14 +74,21 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contracted.getPoint() == best.getPoint() ? reflected.getPoint() == best.getPoint() ?\n+                        contract(original[0], 0.5) : reflected.getPoint() == original[1].getPoint() ?\n+                                contract(original[0], 0.5) : contract(original[0], psi) : simplex;\n \n             // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+            } else {\n+                boolean simplexChanged = true;\n+                for (int i = 0; i < simplex.length; i++) {\n+                    if (!simplex[i].getPoint().equals(original[i].getPoint())) {\n+                        simplexChanged = false;\n+                        break;\n+                    }\n+                }\n+                if (simplexChanged) {\n+                    return;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}