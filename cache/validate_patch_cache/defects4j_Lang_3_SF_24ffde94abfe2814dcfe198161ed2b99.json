{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    final String trimmedStr = str.trim();\n    if (trimmedStr.isEmpty()) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (trimmedStr.equalsIgnoreCase(\"NaN\")) {\n        return Double.NaN;\n    }\n    if (trimmedStr.equalsIgnoreCase(\"INF\") || trimmedStr.equalsIgnoreCase(\"+INF\")) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (trimmedStr.equalsIgnoreCase(\"-INF\")) {\n        return Double.NEGATIVE_INFINITY;\n    }\n    // Do hex and decimal separately\n    if (trimmedStr.charAt(0) == '+') {\n        // Must omit leading plus sign\n        trimmedStr = trimmedStr.substring(1);\n    }\n    if (trimmedStr.charAt(0) == '-') {\n        // Negative hex string\n        if (trimmedStr.startsWith(\"-0x\") || trimmedStr.startsWith(\"-0X\")) {\n            try {\n                return createBigInteger(trimmedStr.substring(1), 16).negate();\n            } catch (final NumberFormatException nfe) {\n                // Fall through\n            }\n        } else {\n            try {\n                return createLong(trimmedStr);\n            } catch (final NumberFormatException nfe) {\n                // Fall through\n            }\n            return createBigInteger(trimmedStr);\n        }\n    }\n    // Not negative, check hex and decimal\n    final char lastChar = trimmedStr.charAt(trimmedStr.length() - 1);\n    // DOUBLE hex string\n    final int hexDigits;\n    if (lastChar == 'd' || lastChar == 'D') {\n        hexDigits = trimmedStr.length() - 3;\n        try {\n            final Double value = Double.valueOf(trimmedStr.substring(0, hexDigits));\n            if (!value.isInfinite()) {\n                return value;\n            }\n        } catch (final NumberFormatException ignored) {\n            /* Ignore the bad number */\n        }\n        return createBigDecimal(trimmedStr);\n    }\n    // FLOAT hex string?\n    if (lastChar == 'f' || lastChar == 'F') {\n        hexDigits = trimmedStr.length() - 2;\n        try {\n            final Float value = Float.valueOf(trimmedStr.substring(0, hexDigits));\n            if (!value.isInfinite()) {\n                return value;\n            }\n        } catch (final NumberFormatException ignored) {\n            /* Ignore the bad number */\n        }\n        // Fall through\n    }\n    // HEX string\n    if (trimmedStr.startsWith(\"0x\") || trimmedStr.startsWith(\"0X\")) {\n        try {\n            final boolean negative = trimmedStr.charAt(0) == '-';\n            final int radix = 16;\n            final int index = negative ? 1 : 0;\n            final BigInteger value = createBigInteger(trimmedStr.substring(index), radix);\n            return negative ? value.negate() : value;\n        } catch (final NumberFormatException nfe) {\n            final Double value = createDouble(trimmedStr);\n            if (value.isInfinite()) {\n                return createBigDecimal(trimmedStr);\n            }\n            return value;\n        }\n    }\n    // Plain floating point number\n    expPos = trimmedStr.indexOf('e') + trimmedStr.indexOf('E') + 1; // of exponent\n    if (expPos > 0) {\n        try {\n            // We need to use a string without any locale specific stuff in it to avoid\n            // issues with parseDouble and such.\n            final String newStr = trimmedStr.substring(0, expPos) + trimmedStr.substring(expPos).toUpperCase(Locale.ENGLISH);\n            final Double value = Double.valueOf(newStr);\n            if (!value.isInfinite()) {\n                return value;\n            }\n        } catch (final NumberFormatException ignored) {\n            /* Ignore the bad number */\n        }\n    } else {\n        decPos = trimmedStr.indexOf('.');\n        if (decPos == -1) { // no decimal point\n            try {\n                final Long value = Long.valueOf(trimmedStr);\n                if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) {\n                    return value.intValue();\n                }\n                return value;\n            } catch (final NumberFormatException ignored) {\n                /* Ignore the bad number */\n            }\n        } else { // decimal point\n            if (decPos == 0) {\n                trimmedStr = \"0\" + trimmedStr;\n                decPos = 1;\n            }\n            try {\n                final boolean allZeros = isAllZeros(trimmedStr.substring(0, decPos));\n                if (allZeros) {\n                    final int i = Integer.parseInt(trimmedStr.substring(decPos + 1));\n                    if (i == 0) {\n                        return new Integer(0);\n                    }\n                }\n                if (expPos > 0) {\n                    final String newStr = trimmedStr.substring(0, expPos) + trimmedStr.substring(expPos).toUpperCase(Locale.ENGLISH);\n                    final Double value = Double.valueOf(newStr);\n                    if (!value.isInfinite()) {\n                        return value;\n                    }\n                } else {\n                    final String newStr = trimmedStr.toUpperCase(Locale.ENGLISH);\n                    final Double value = Double.valueOf(newStr);\n                    if (!value.isInfinite()) {\n                        return value;\n                    }\n                }\n            } catch (final NumberFormatException ignored) {\n                /* Ignore the bad number */\n            }\n        }\n    }\n    return createBigDecimal(trimmedStr);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex c5840215..6be4ff50 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,167 +447,149 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    final String trimmedStr = str.trim();\n+    if (trimmedStr.isEmpty()) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    if (trimmedStr.equalsIgnoreCase(\"NaN\")) {\n+        return Double.NaN;\n+    }\n+    if (trimmedStr.equalsIgnoreCase(\"INF\") || trimmedStr.equalsIgnoreCase(\"+INF\")) {\n+        return Double.POSITIVE_INFINITY;\n+    }\n+    if (trimmedStr.equalsIgnoreCase(\"-INF\")) {\n+        return Double.NEGATIVE_INFINITY;\n+    }\n+    // Do hex and decimal separately\n+    if (trimmedStr.charAt(0) == '+') {\n+        // Must omit leading plus sign\n+        trimmedStr = trimmedStr.substring(1);\n+    }\n+    if (trimmedStr.charAt(0) == '-') {\n+        // Negative hex string\n+        if (trimmedStr.startsWith(\"-0x\") || trimmedStr.startsWith(\"-0X\")) {\n+            try {\n+                return createBigInteger(trimmedStr.substring(1), 16).negate();\n+            } catch (final NumberFormatException nfe) {\n+                // Fall through\n             }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n+        } else {\n+            try {\n+                return createLong(trimmedStr);\n+            } catch (final NumberFormatException nfe) {\n+                // Fall through\n             }\n-            return createInteger(str);\n+            return createBigInteger(trimmedStr);\n         }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n+    }\n+    // Not negative, check hex and decimal\n+    final char lastChar = trimmedStr.charAt(trimmedStr.length() - 1);\n+    // DOUBLE hex string\n+    final int hexDigits;\n+    if (lastChar == 'd' || lastChar == 'D') {\n+        hexDigits = trimmedStr.length() - 3;\n+        try {\n+            final Double value = Double.valueOf(trimmedStr.substring(0, hexDigits));\n+            if (!value.isInfinite()) {\n+                return value;\n             }\n-            dec = null;\n+        } catch (final NumberFormatException ignored) {\n+            /* Ignore the bad number */\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n+        return createBigDecimal(trimmedStr);\n+    }\n+    // FLOAT hex string?\n+    if (lastChar == 'f' || lastChar == 'F') {\n+        hexDigits = trimmedStr.length() - 2;\n+        try {\n+            final Float value = Float.valueOf(trimmedStr.substring(0, hexDigits));\n+            if (!value.isInfinite()) {\n+                return value;\n             }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n+        } catch (final NumberFormatException ignored) {\n+            /* Ignore the bad number */\n+        }\n+        // Fall through\n+    }\n+    // HEX string\n+    if (trimmedStr.startsWith(\"0x\") || trimmedStr.startsWith(\"0X\")) {\n+        try {\n+            final boolean negative = trimmedStr.charAt(0) == '-';\n+            final int radix = 16;\n+            final int index = negative ? 1 : 0;\n+            final BigInteger value = createBigInteger(trimmedStr.substring(index), radix);\n+            return negative ? value.negate() : value;\n+        } catch (final NumberFormatException nfe) {\n+            final Double value = createDouble(trimmedStr);\n+            if (value.isInfinite()) {\n+                return createBigDecimal(trimmedStr);\n             }\n+            return value;\n         }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n+    }\n+    // Plain floating point number\n+    expPos = trimmedStr.indexOf('e') + trimmedStr.indexOf('E') + 1; // of exponent\n+    if (expPos > 0) {\n+        try {\n+            // We need to use a string without any locale specific stuff in it to avoid\n+            // issues with parseDouble and such.\n+            final String newStr = trimmedStr.substring(0, expPos) + trimmedStr.substring(expPos).toUpperCase(Locale.ENGLISH);\n+            final Double value = Double.valueOf(newStr);\n+            if (!value.isInfinite()) {\n+                return value;\n+            }\n+        } catch (final NumberFormatException ignored) {\n+            /* Ignore the bad number */\n         }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n+    } else {\n+        decPos = trimmedStr.indexOf('.');\n+        if (decPos == -1) { // no decimal point\n             try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+                final Long value = Long.valueOf(trimmedStr);\n+                if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) {\n+                    return value.intValue();\n+                }\n+                return value;\n+            } catch (final NumberFormatException ignored) {\n+                /* Ignore the bad number */\n             }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+        } else { // decimal point\n+            if (decPos == 0) {\n+                trimmedStr = \"0\" + trimmedStr;\n+                decPos = 1;\n             }\n-            return createBigInteger(str);\n-        }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n+            try {\n+                final boolean allZeros = isAllZeros(trimmedStr.substring(0, decPos));\n+                if (allZeros) {\n+                    final int i = Integer.parseInt(trimmedStr.substring(decPos + 1));\n+                    if (i == 0) {\n+                        return new Integer(0);\n+                    }\n                 }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-        try {\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n+                if (expPos > 0) {\n+                    final String newStr = trimmedStr.substring(0, expPos) + trimmedStr.substring(expPos).toUpperCase(Locale.ENGLISH);\n+                    final Double value = Double.valueOf(newStr);\n+                    if (!value.isInfinite()) {\n+                        return value;\n+                    }\n+                } else {\n+                    final String newStr = trimmedStr.toUpperCase(Locale.ENGLISH);\n+                    final Double value = Double.valueOf(newStr);\n+                    if (!value.isInfinite()) {\n+                        return value;\n+                    }\n                 }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            } catch (final NumberFormatException ignored) {\n+                /* Ignore the bad number */\n+            }\n         }\n-\n-        return createBigDecimal(str);\n     }\n+    return createBigDecimal(trimmedStr);\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot assign a value to final variable trimmedStr",
    "test_result": "ERROR"
}