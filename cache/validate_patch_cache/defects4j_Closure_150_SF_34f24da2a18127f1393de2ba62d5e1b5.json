{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Do not visit the root scope\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (NodeUtil.isFunctionExpression(n)) {\n        if (isAssignedToVariableOrProperty(parent)) {\n          // Do not visit this function expression, it is likely a function parameter\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n      if (NodeUtil.isFunctionDeclaration(n)) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n      break;\n\n    case Token.VAR:\n      defineVar(n, parent);\n      return;\n\n    case Token.CATCH:\n      defineCatch(n, parent);\n      return;\n\n    case Token.LP:\n      if (NodeUtil.getEnclosingType(parent) == Token.FUNCTION) {\n        handleFunctionInputs(parent);\n        return;\n      }\n      break;\n  }\n\n  attachLiteralTypes(n);\n}\n\nprivate boolean isAssignedToVariableOrProperty(Node node) {\n  Node parent = node.getParent();\n  if (parent.getType() == Token.ASSIGN ||\n      parent.getType() == Token.NAME && \n      NodeUtil.isNameDeclaration(parent.getParent())) {\n    return true;\n  }\n  if (NodeUtil.isGet(parent)) {\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d9dd82a6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,60 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // Do not visit the root scope\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        if (isAssignedToVariableOrProperty(parent)) {\n+          // Do not visit this function expression, it is likely a function parameter\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        return;\n+      }\n+      if (NodeUtil.isFunctionDeclaration(n)) {\n+        defineDeclaredFunction(n, parent);\n         return;\n       }\n+      break;\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      return;\n+\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      return;\n+\n+    case Token.LP:\n+      if (NodeUtil.getEnclosingType(parent) == Token.FUNCTION) {\n+        handleFunctionInputs(parent);\n+        return;\n       }\n-    }\n+      break;\n+  }\n+\n+  attachLiteralTypes(n);\n+}\n+\n+private boolean isAssignedToVariableOrProperty(Node node) {\n+  Node parent = node.getParent();\n+  if (parent.getType() == Token.ASSIGN ||\n+      parent.getType() == Token.NAME && \n+      NodeUtil.isNameDeclaration(parent.getParent())) {\n+    return true;\n+  }\n+  if (NodeUtil.isGet(parent)) {\n+    return true;\n+  }\n+  return false;\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}