{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final int n = m.getRowDimension();\n\n    // Diagonalize the matrix into D * D, in which the diagonal entries of D\n    // are the square roots of the eigenvalues of the input matrix\n    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(\n        DoubleStream.of(dec.getRealEigenvalues())\n            .map(val -> Math.max(0, val))\n            .map(Math::sqrt)\n            .toArray());\n\n    // Compute the square root of the matrix by multiplying V * D * V^T\n    final RealMatrix Vt = v.transpose();\n    final RealMatrix sqrtM = v.multiply(D).multiply(Vt);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..eb337585e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final int n = m.getRowDimension();\n+\n+    // Diagonalize the matrix into D * D, in which the diagonal entries of D\n+    // are the square roots of the eigenvalues of the input matrix\n+    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(\n+        DoubleStream.of(dec.getRealEigenvalues())\n+            .map(val -> Math.max(0, val))\n+            .map(Math::sqrt)\n+            .toArray());\n+\n+    // Compute the square root of the matrix by multiplying V * D * V^T\n+    final RealMatrix Vt = v.transpose();\n+    final RealMatrix sqrtM = v.multiply(D).multiply(Vt);\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}