{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix x = new Array2DRowRealMatrix(n, n);\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    final RealMatrix y = m.subtract(identity).scalarMultiply(0.5);\n    final double tolerance = 1e-10;\n\n    // Iterate until convergence\n    while (true) {\n        final RealMatrix xInv = new LUDecomposition(x).getSolver().getInverse();\n        final RealMatrix xNext = x.add(xInv.multiply(y).multiply(x));\n\n        // Check for convergence\n        double delta = xNext.subtract(x).getNorm();\n        if (delta < tolerance) {\n            return xNext;\n        }\n\n        x.copySubMatrix(xNext.getData());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..984974504 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix x = new Array2DRowRealMatrix(n, n);\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    final RealMatrix y = m.subtract(identity).scalarMultiply(0.5);\n+    final double tolerance = 1e-10;\n+\n+    // Iterate until convergence\n+    while (true) {\n+        final RealMatrix xInv = new LUDecomposition(x).getSolver().getInverse();\n+        final RealMatrix xNext = x.add(xInv.multiply(y).multiply(x));\n+\n+        // Check for convergence\n+        double delta = xNext.subtract(x).getNorm();\n+        if (delta < tolerance) {\n+            return xNext;\n+        }\n+\n+        x.copySubMatrix(xNext.getData());\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}