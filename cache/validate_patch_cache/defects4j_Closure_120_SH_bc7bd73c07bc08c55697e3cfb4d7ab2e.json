{
    "patch": "        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            // We're analyzing a stub or function entry point and we can't assume\n            // that side effects here go away once the function is fully\n            // analyzed.\n            return false;\n>>> [ INFILL ] <<<\n          } else if (block.isLoop) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..85578179 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            // We're analyzing a stub or function entry point and we can't assume\n+            // that side effects here go away once the function is fully\n+            // analyzed.\n+            return false;\n+>>> [ INFILL ] <<<\n+          } else if (block.isLoop) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}