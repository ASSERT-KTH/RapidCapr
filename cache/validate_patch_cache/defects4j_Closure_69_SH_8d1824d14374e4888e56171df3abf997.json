{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.getTypeOfThis() != null &&\n          n.getParent() != null &&\n          (n.getParent().isGetProp() ||\n           n.getParent().isGetElem())) {\n        visitParameterList(t, n, functionType);\n      } else {\n        report(t, n, FUNCTION_WITHOUT_TYPE_THIS, childType.toString());\n        ensureTyped(t, n);\n      }\n\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..1e74fc46 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,61 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+  private void visitCall(NodeTraversal t, Node n) {\n+    Node child = n.getFirstChild();\n+    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+\n+    if (!childType.canBeCalled()) {\n+      report(t, n, NOT_CALLABLE, childType.toString());\n+      ensureTyped(t, n);\n+      return;\n+    }\n+\n+    // A couple of types can be called as if they were functions.\n+    // If it is a function type, then validate parameters.\n+    if (childType instanceof FunctionType) {\n+      FunctionType functionType = (FunctionType) childType;\n+\n+      boolean isExtern = false;\n+      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+      if(functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.getTypeOfThis() != null &&\n+          n.getParent() != null &&\n+          (n.getParent().isGetProp() ||\n+           n.getParent().isGetElem())) {\n+        visitParameterList(t, n, functionType);\n+      } else {\n+        report(t, n, FUNCTION_WITHOUT_TYPE_THIS, childType.toString());\n+        ensureTyped(t, n);\n+      }\n+\n+      ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+      ensureTyped(t, n);\n+    }\n+\n+    // TODO: Add something to check for calls of RegExp objects, which is not\n+    // supported by IE.  Either say something about the return type or warn\n+    // about the non-portability of the call or both.\n+  }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}