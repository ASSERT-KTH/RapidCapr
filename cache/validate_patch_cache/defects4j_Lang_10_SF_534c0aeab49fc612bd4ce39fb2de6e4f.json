{
    "patch": "public static DateFormat getDateFormat(String pattern) {\n    Locale bg = new Locale(\"bg\", \"BG\");\n    DateFormatSymbols symbols = new DateFormatSymbols(bg);\n    int eraIndex = pattern.indexOf(\"G\");\n    boolean hasEra = eraIndex != -1 && eraIndex != pattern.lastIndexOf(\"G\");\n\n    if (hasEra) {\n        symbols.setEras(new String[]{\"\u043f\u0440.\u043d.\u0435.\", \"\u0441\u043b.\u043d.\u0435.\"});\n    }\n\n    DateFormat format = new SimpleDateFormat(pattern, symbols);\n\n    if (hasEra) {\n        // If era is in the date format pattern, we have to adjust the year accordingly\n        format.setDateFormatSymbols(Locale.ENGLISH.getDateFormatSymbols());\n        format.set2DigitYearStart(new GregorianCalendar(-9999, Calendar.JANUARY, 1).getTime());\n    }\n\n    return format;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..e2d6cc7c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,27 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n-        }\n-        return regex;\n+public static DateFormat getDateFormat(String pattern) {\n+    Locale bg = new Locale(\"bg\", \"BG\");\n+    DateFormatSymbols symbols = new DateFormatSymbols(bg);\n+    int eraIndex = pattern.indexOf(\"G\");\n+    boolean hasEra = eraIndex != -1 && eraIndex != pattern.lastIndexOf(\"G\");\n+\n+    if (hasEra) {\n+        symbols.setEras(new String[]{\"\u043f\u0440.\u043d.\u0435.\", \"\u0441\u043b.\u043d.\u0435.\"});\n     }\n \n+    DateFormat format = new SimpleDateFormat(pattern, symbols);\n+\n+    if (hasEra) {\n+        // If era is in the date format pattern, we have to adjust the year accordingly\n+        format.setDateFormatSymbols(Locale.ENGLISH.getDateFormatSymbols());\n+        format.set2DigitYearStart(new GregorianCalendar(-9999, Calendar.JANUARY, 1).getTime());\n+    }\n+\n+    return format;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}