{
    "patch": "try {\n    int lastErrorIndex = -1;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n            }\n            if (i > lastErrorIndex) {\n                lastErrorIndex = i;\n            }\n            throw e;\n        }\n        if (resetFields && millis < iMillis) {\n            for (int j = i + 1; j < count; j++) {\n                try {\n                    millis = savedFields[j].set(millis, resetFields);\n                    if (millis == Long.MAX_VALUE) {\n                        if (text != null) {\n                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": maximum value exceeded\");\n                        } else {\n                            throw new IllegalArgumentException(\"maximum value exceeded\");\n                        }\n                    }\n                    if (millis == Long.MIN_VALUE) {\n                        if (text != null) {\n                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": minimum value exceeded\");\n                        } else {\n                            throw new IllegalArgumentException(\"minimum value exceeded\");\n                        }\n                    }\n                } catch (IllegalArgumentException e) {\n                    if (text != null) {\n                        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n                    }\n                    if (j > lastErrorIndex) {\n                        lastErrorIndex = j;\n                    }\n                }\n            }\n            for (int j = lastErrorIndex + 1; j <= i; j++) {\n                millis = savedFields[j].set(millis, true);\n            }\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..25171db3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,58 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int lastErrorIndex = -1;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n+            }\n+            if (i > lastErrorIndex) {\n+                lastErrorIndex = i;\n+            }\n+            throw e;\n+        }\n+        if (resetFields && millis < iMillis) {\n+            for (int j = i + 1; j < count; j++) {\n+                try {\n+                    millis = savedFields[j].set(millis, resetFields);\n+                    if (millis == Long.MAX_VALUE) {\n+                        if (text != null) {\n+                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": maximum value exceeded\");\n+                        } else {\n+                            throw new IllegalArgumentException(\"maximum value exceeded\");\n+                        }\n+                    }\n+                    if (millis == Long.MIN_VALUE) {\n+                        if (text != null) {\n+                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": minimum value exceeded\");\n+                        } else {\n+                            throw new IllegalArgumentException(\"minimum value exceeded\");\n+                        }\n+                    }\n+                } catch (IllegalArgumentException e) {\n+                    if (text != null) {\n+                        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n+                    }\n+                    if (j > lastErrorIndex) {\n+                        lastErrorIndex = j;\n+                    }\n+                }\n+            }\n+            for (int j = lastErrorIndex + 1; j <= i; j++) {\n+                millis = savedFields[j].set(millis, true);\n+            }\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}