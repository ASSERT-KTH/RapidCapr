{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean hasString = false;\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        if (child.isQuotedString()) {\n          hasString = true;\n          continue;\n        }\n\n        T type = typeSystem.getType(getScope(), n, child.getString());\n\n        Property prop = getProperty(child.getString());\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(child.getString())) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(child.getString()),\n                Warnings.INVALIDATION, child.getString(),\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n\n      if (hasString) {\n        for (Node child = n.getFirstChild();\n            child != null;\n            child = child.getNext()) {\n          if (!child.isQuotedString()) {\n            T type = typeSystem.getType(getScope(), n, child.getString());\n\n            Property prop = getProperty(child.getString());\n            if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n              // TODO(user): It doesn't look like the user can do much in this\n              // case right now.\n              if (propertiesToErrorFor.containsKey(child.getString())) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child, propertiesToErrorFor.get(child.getString()),\n                    Warnings.INVALIDATION, child.getString(),\n                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n              }\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..8ee6e204 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,56 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+      boolean hasString = false;\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        // Maybe STRING, GET, SET\n+        if (child.isQuotedString()) {\n+          hasString = true;\n+          continue;\n+        }\n+\n+        T type = typeSystem.getType(getScope(), n, child.getString());\n+\n+        Property prop = getProperty(child.getString());\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+          // TODO(user): It doesn't look like the user can do much in this\n+          // case right now.\n+          if (propertiesToErrorFor.containsKey(child.getString())) {\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(child.getString()),\n+                Warnings.INVALIDATION, child.getString(),\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+      }\n+\n+      if (hasString) {\n+        for (Node child = n.getFirstChild();\n+            child != null;\n+            child = child.getNext()) {\n+          if (!child.isQuotedString()) {\n+            T type = typeSystem.getType(getScope(), n, child.getString());\n+\n+            Property prop = getProperty(child.getString());\n+            if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+              // TODO(user): It doesn't look like the user can do much in this\n+              // case right now.\n+              if (propertiesToErrorFor.containsKey(child.getString())) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child, propertiesToErrorFor.get(child.getString()),\n+                    Warnings.INVALIDATION, child.getString(),\n+                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}