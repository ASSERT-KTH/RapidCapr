{
    "patch": "    // Get the index of the first unreferenced argument. \n    int index = 0;\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (referenced.contains(var)) {\n        break;\n      }\n      index++;\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int i = argList.getChildCount() - 1;\n      while (i >= index) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        }\n        i--;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..14b3c350 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Get the index of the first unreferenced argument. \n+    int index = 0;\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (referenced.contains(var)) {\n+        break;\n+      }\n+      index++;\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int i = argList.getChildCount() - 1;\n+      while (i >= index) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        }\n+        i--;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}