{
    "patch": "                    int newOffsetLocal = getOffset(nextLocal);\n                    int newOffsetAdjusted = getOffset(nextAdjusted);\n                    if (newOffsetLocal == newOffsetAdjusted) {\n                        // gap is too small to push time into the same zone\n>>> [ INFILL ] <<<\n                        return offsetLocal;\n                    } else if ((offsetLocal - newOffsetLocal) >= 0) {\n                        // big enough to push time back out of the zone entirely\n                        return offsetLocal;\n                    } else {\n                        return newOffsetLocal;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1f21d876 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                    int newOffsetLocal = getOffset(nextLocal);\n+                    int newOffsetAdjusted = getOffset(nextAdjusted);\n+                    if (newOffsetLocal == newOffsetAdjusted) {\n+                        // gap is too small to push time into the same zone\n+>>> [ INFILL ] <<<\n+                        return offsetLocal;\n+                    } else if ((offsetLocal - newOffsetLocal) >= 0) {\n+                        // big enough to push time back out of the zone entirely\n+                        return offsetLocal;\n+                    } else {\n+                        return newOffsetLocal;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}