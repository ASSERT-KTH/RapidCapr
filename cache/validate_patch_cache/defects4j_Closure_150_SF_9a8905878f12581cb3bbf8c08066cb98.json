{
    "patch": "    @Override\n    public boolean visit(NodeTraversal t, Node n, Node parent) {\n        attachLiteralTypes(n);\n\n        if (NodeUtil.isFunctionExpression(n)) {\n            if (scope.getParent() != null) {\n                // ignore function expressions inside a function.\n                return false;\n            }\n            defineFunctionExpression(n);\n            return false;\n        }\n\n        switch (n.getType()) {\n            case Token.FUNCTION:\n                if (parent != null && parent.getType() == Token.NAME) {\n                    return false;\n                }\n                defineDeclaredFunction(n, parent);\n                break;\n            case Token.CATCH:\n                defineCatch(n, parent);\n                break;\n            case Token.VAR:\n                defineVar(n, parent);\n                break;\n            case Token.LP:\n                if (parent == scope.getRootNode()) {\n                    handleFunctionInputs(n);\n                }\n                break;\n            default:\n                break;\n        }\n        return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..aa3144dc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,41 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public boolean visit(NodeTraversal t, Node n, Node parent) {\n+        attachLiteralTypes(n);\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        if (NodeUtil.isFunctionExpression(n)) {\n+            if (scope.getParent() != null) {\n+                // ignore function expressions inside a function.\n+                return false;\n+            }\n+            defineFunctionExpression(n);\n+            return false;\n+        }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        switch (n.getType()) {\n+            case Token.FUNCTION:\n+                if (parent != null && parent.getType() == Token.NAME) {\n+                    return false;\n+                }\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            case Token.CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case Token.VAR:\n+                defineVar(n, parent);\n+                break;\n+            case Token.LP:\n+                if (parent == scope.getRootNode()) {\n+                    handleFunctionInputs(n);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+        return true;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: visit(NodeTraversal,Node,Node) in TypedScopeCreator.LocalScopeBuilder cannot implement visit(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}