{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int origDayOfMonth = iChronology.getDayOfMonth(instant);\n        instant = add(instant, valueToAdd);\n        // check if the resulting month has a lower number of days than the day of the original date\n        int month = iChronology.getMonthOfYear(instant);\n        if (DateTimeUtils.getDaysInMonth(month, iChronology.getYear(instant)) < origDayOfMonth) {\n            // adjust the day of the month to the last day of the previous month\n            instant = iChronology.dayOfMonth().set(instant, 1);\n            instant = iChronology.monthOfYear().add(instant, -1);\n            instant = iChronology.dayOfMonth().getMaximumValue(instant);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..95b00f54 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        int origDayOfMonth = iChronology.getDayOfMonth(instant);\n+        instant = add(instant, valueToAdd);\n+        // check if the resulting month has a lower number of days than the day of the original date\n+        int month = iChronology.getMonthOfYear(instant);\n+        if (DateTimeUtils.getDaysInMonth(month, iChronology.getYear(instant)) < origDayOfMonth) {\n+            // adjust the day of the month to the last day of the previous month\n+            instant = iChronology.dayOfMonth().set(instant, 1);\n+            instant = iChronology.monthOfYear().add(instant, -1);\n+            instant = iChronology.dayOfMonth().getMaximumValue(instant);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}