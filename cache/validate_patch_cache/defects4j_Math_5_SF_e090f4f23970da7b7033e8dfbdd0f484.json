{
    "patch": "    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            return NaN;\n        }\n\n        if (isInfinite) {\n            if (real == Double.POSITIVE_INFINITY) {\n                return createComplex(0.0, Double.POSITIVE_INFINITY);\n            } else if (real == Double.NEGATIVE_INFINITY) {\n                return createComplex(0.0, Double.NEGATIVE_INFINITY);\n            } else {\n                return createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n            }\n        }\n\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary;\n            double scale = 1. / (real * q + imaginary);\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real;\n            double scale = 1. / (imaginary * q + real);\n            return createComplex(scale, -scale * q);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..6f2982e3d 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -306,7 +306,13 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n         }\n \n         if (isInfinite) {\n-            return ZERO;\n+            if (real == Double.POSITIVE_INFINITY) {\n+                return createComplex(0.0, Double.POSITIVE_INFINITY);\n+            } else if (real == Double.NEGATIVE_INFINITY) {\n+                return createComplex(0.0, Double.NEGATIVE_INFINITY);\n+            } else {\n+                return createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n+            }\n         }\n \n         if (FastMath.abs(real) < FastMath.abs(imaginary)) {",
    "result_reason": "junit.framework.AssertionFailedError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>",
    "test_result": "FAIL"
}