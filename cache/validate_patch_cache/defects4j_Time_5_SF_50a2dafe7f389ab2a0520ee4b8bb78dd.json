{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            // Check if months are supported in the given period type\n            boolean supportsMonths = false;\n            for (DurationFieldType fieldType : type.getFieldTypes()) {\n                if (fieldType == DurationFieldType.months()) {\n                    supportsMonths = true;\n                    break;\n                }\n            }\n            if (supportsMonths) {\n                years = FieldUtils.safeAdd(years, months / 12);\n                months = months % 12;\n                if (years != 0) {\n                    result = result.withYears(years);\n                }\n                if (months != 0) {\n                    result = result.withMonths(months);\n                }\n            } else {\n                // If months are not supported, add them in as days\n                int totalMonths = FieldUtils.safeMultiply(years, 12) + months;\n                int days = FieldUtils.safeMultiply(totalMonths, DateTimeConstants.DAYS_PER_MONTH);\n                result = result.withDays(FieldUtils.safeAdd(result.getDays(), days));\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..a34801e3 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1625,13 +1625,28 @@ public final class Period\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+            // Check if months are supported in the given period type\n+            boolean supportsMonths = false;\n+            for (DurationFieldType fieldType : type.getFieldTypes()) {\n+                if (fieldType == DurationFieldType.months()) {\n+                    supportsMonths = true;\n+                    break;\n+                }\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (supportsMonths) {\n+                years = FieldUtils.safeAdd(years, months / 12);\n+                months = months % 12;\n+                if (years != 0) {\n+                    result = result.withYears(years);\n+                }\n+                if (months != 0) {\n+                    result = result.withMonths(months);\n+                }\n+            } else {\n+                // If months are not supported, add them in as days\n+                int totalMonths = FieldUtils.safeMultiply(years, 12) + months;\n+                int days = FieldUtils.safeMultiply(totalMonths, DateTimeConstants.DAYS_PER_MONTH);\n+                result = result.withDays(FieldUtils.safeAdd(result.getDays(), days));\n             }\n         }\n         return result;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}