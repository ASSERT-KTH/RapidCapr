{
    "patch": "class HTMLEncoder {\n    // ...\n    public String encode(char[] buf, int offset, int length, boolean flag) {\n        StringBuilder strBuff = new StringBuilder();\n\n        for (int i = offset; i < offset + length; i++) {\n            char ch = buf[i];\n            boolean found = false;\n            for (int j = 0; j < escapesArr.length; j++) {\n                if (ch == escapesArr[j]) {\n                    strBuff.append(escapePrefix);\n                    strBuff.append(hex[j]);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found)\n                strBuff.append(ch);\n        }\n        return strBuff.toString();\n    }\n\n    public String decode(String str) throws UnsupportedEncodingException {\n        int start = str.indexOf(escapePrefix);\n        if (start < 0)\n            return str;\n        StringBuilder strBuff = new StringBuilder(str.substring(0, start));\n\n        for (int i = start; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            if (ch != escapePrefix)\n                strBuff.append(ch);\n            else {\n                String strHex = str.substring(i + 1, i + 3);\n                try {\n                    strBuff.append((char) Integer.parseInt(strHex, 16));\n                    i += 2;\n                } catch (NumberFormatException e) {\n                    throw new UnsupportedEncodingException();\n                }\n            }\n        }\n        return strBuff.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}