{
    "patch": "private void checkReassign(JsNodeTraversal t, Node n, Node parent, String nodeName) {\n    if (n == null || parent == null) {\n        return; // ignore non-nodes.\n    }\n\n    Node nameNode = n.getFirstChild();\n    if (nameNode == null) {\n        return;\n    }\n\n    if (nameNode.isName() && nameNode.getString().equals(nodeName)) {\n        if (n.getJSType() != null && parent.isAssign()) {\n            if (n.getJSType().isFunctionType()) {      \n                warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, nodeName));\n            } else {\n                return;\n            }\n        }\n    }\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!child.equals(nameNode)) {\n            checkReassign(t, child, n, nodeName);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}