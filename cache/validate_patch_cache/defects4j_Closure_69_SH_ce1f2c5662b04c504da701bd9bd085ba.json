{
    "patch": "if (childType.restrictByNotNullOrUndefined().isUnknownType() ||\n          childType.restrictByNotNullOrUndefined().isEmptyType()) {\n        // Attempting to call an unknown or empty value is an error.\n        report(t, n, NOT_CALLABLE_UNKNOWN_EMPTY, childType.toString());\n        ensureTyped(t, n);\n        return;\n      }\n\n      // A couple of types can be called as if they were functions.\n      // If it is a function type, then validate parameters.\n      if (childType.restrictByNotNullOrUndefined().isFunctionType()) {\n        FunctionType functionType = childType.restrictByNotNullOrUndefined().toMaybeFunctionType();\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n          String sourceName = functionJSDocInfo.getSourceFileName();\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          isExtern = functionSource.isExtern();\n        }\n\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() &&\n            !functionType.isNativeObjectType() &&\n            (functionType.getReturnType().isUnknownType() ||\n            functionType.getReturnType().isVoidType() || !isExtern)) {\n          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n        if (functionType.getTypeOfThis() != null &&\n            !NodeUtil.isGet(functionType.getTypeOfThis().getNodeType())) {\n          report(t, n, UNSAFE_THIS, childType.toString());\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n      } else if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n      } else {\n        ensureTyped(t, n);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..4b27826b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,51 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType.restrictByNotNullOrUndefined().isUnknownType() ||\n+          childType.restrictByNotNullOrUndefined().isEmptyType()) {\n+        // Attempting to call an unknown or empty value is an error.\n+        report(t, n, NOT_CALLABLE_UNKNOWN_EMPTY, childType.toString());\n+        ensureTyped(t, n);\n+        return;\n+      }\n+\n+      // A couple of types can be called as if they were functions.\n+      // If it is a function type, then validate parameters.\n+      if (childType.restrictByNotNullOrUndefined().isFunctionType()) {\n+        FunctionType functionType = childType.restrictByNotNullOrUndefined().toMaybeFunctionType();\n+\n+        boolean isExtern = false;\n+        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+        if (functionJSDocInfo != null) {\n+          String sourceName = functionJSDocInfo.getSourceFileName();\n+          CompilerInput functionSource = compiler.getInput(sourceName);\n+          isExtern = functionSource.isExtern();\n+        }\n+\n+        // Non-native constructors should not be called directly\n+        // unless they specify a return type and are defined\n+        // in an extern.\n+        if (functionType.isConstructor() &&\n+            !functionType.isNativeObjectType() &&\n+            (functionType.getReturnType().isUnknownType() ||\n+            functionType.getReturnType().isVoidType() || !isExtern)) {\n+          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+        }\n+\n+        // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+        if (functionType.getTypeOfThis() != null &&\n+            !NodeUtil.isGet(functionType.getTypeOfThis().getNodeType())) {\n+          report(t, n, UNSAFE_THIS, childType.toString());\n+        }\n+\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n+      } else if (!childType.canBeCalled()) {\n+        report(t, n, NOT_CALLABLE, childType.toString());\n+        ensureTyped(t, n);\n+      } else {\n+        ensureTyped(t, n);\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}