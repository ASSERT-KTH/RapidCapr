{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_ROWS_COLS = 10000; // Maximum number of rows or columns allowed for the matrix\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n\n    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) { // Check the matrix size\n        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n    }\n\n    final long availableMemory = Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()); // Compute the available memory\n    final long maxElements = availableMemory / 8; // Compute the maximum number of matrix elements that can be allocated\n\n    if ((long) rows * cols > maxElements) { // Check if the matrix can fit in the available memory\n        throw new RuntimeException(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n    }\n\n    EigenDecomposition dec;\n    try {\n        dec = new EigenDecomposition(m);\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n    }\n\n    final double[][] vData = dec.getV().getData();\n    final double[][] sqrtData = getSqrtArray(dec.getRealEigenvalues());\n\n    final double[][] resData = new double[rows][cols];\n\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            double sum = 0;\n            for (int k = 0; k < cols; ++k) {\n                sum += sqrtData[k][k] * vData[i][k] * vData[j][k];\n            }\n            resData[i][j] = sum;\n        }\n    }\n\n    return MatrixUtils.createRealMatrix(resData);\n}\n\nprivate double[][] getSqrtArray(double[] ar) {\n    final int dim = ar.length;\n    final double[][] res = new double[dim][dim];\n    for (int i = 0; i < dim; i++) {\n        res[i][i] = Math.sqrt(Math.abs(ar[i]));\n    }\n    return res;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9e7221263 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,53 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_ROWS_COLS = 10000; // Maximum number of rows or columns allowed for the matrix\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+\n+    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) { // Check the matrix size\n+        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n     }\n+\n+    final long availableMemory = Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()); // Compute the available memory\n+    final long maxElements = availableMemory / 8; // Compute the maximum number of matrix elements that can be allocated\n+\n+    if ((long) rows * cols > maxElements) { // Check if the matrix can fit in the available memory\n+        throw new RuntimeException(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n+    }\n+\n+    EigenDecomposition dec;\n+    try {\n+        dec = new EigenDecomposition(m);\n+    } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n+    }\n+\n+    final double[][] vData = dec.getV().getData();\n+    final double[][] sqrtData = getSqrtArray(dec.getRealEigenvalues());\n+\n+    final double[][] resData = new double[rows][cols];\n+\n+    for (int i = 0; i < rows; ++i) {\n+        for (int j = 0; j < cols; ++j) {\n+            double sum = 0;\n+            for (int k = 0; k < cols; ++k) {\n+                sum += sqrtData[k][k] * vData[i][k] * vData[j][k];\n+            }\n+            resData[i][j] = sum;\n+        }\n+    }\n+\n+    return MatrixUtils.createRealMatrix(resData);\n+}\n+\n+private double[][] getSqrtArray(double[] ar) {\n+    final int dim = ar.length;\n+    final double[][] res = new double[dim][dim];\n+    for (int i = 0; i < dim; i++) {\n+        res[i][i] = Math.sqrt(Math.abs(ar[i]));\n+    }\n+    return res;\n+}\n }",
    "result_reason": "java.lang.RuntimeException: Matrix size exceeds maximum limit. Please use a smaller matrix.",
    "test_result": "FAIL"
}