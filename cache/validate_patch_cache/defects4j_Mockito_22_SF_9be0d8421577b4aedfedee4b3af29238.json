{
    "patch": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == o2) {\n        return true;\n    } else if (o1 == null || o2 == null) {\n        return false;\n    } else if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        return areArraysEqual(o1, o2);\n    } else if (o1 instanceof Object[] && o2 instanceof Object[]) {\n        return areArraysEqual((Object[]) o1, (Object[]) o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean areArraysEqual(Object o1, Object o2) {\n    if (o1.getClass() != o2.getClass()) {\n        return false;\n    }\n    if (o1 instanceof int[]) {\n        return Arrays.equals((int[]) o1, (int[]) o2);\n    } else if (o1 instanceof long[]) {\n        return Arrays.equals((long[]) o1, (long[]) o2);\n    } else if (o1 instanceof byte[]) {\n        return Arrays.equals((byte[]) o1, (byte[]) o2);\n    } else if (o1 instanceof boolean[]) {\n        return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n    } else if (o1 instanceof char[]) {\n        return Arrays.equals((char[]) o1, (char[]) o2);\n    } else if (o1 instanceof short[]) {\n        return Arrays.equals((short[]) o1, (short[]) o2);\n    } else if (o1 instanceof float[]) {\n        return Arrays.equals((float[]) o1, (float[]) o2);\n    } else if (o1 instanceof double[]) {\n        return Arrays.equals((double[]) o1, (double[]) o2);\n    } else {\n        return Arrays.equals((Object[]) o1, (Object[]) o2);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/matchers/Equality.java b/src/org/mockito/internal/matchers/Equality.java\nindex 43e11fca9..0661d5f37 100644\n--- a/src/org/mockito/internal/matchers/Equality.java\n+++ b/src/org/mockito/internal/matchers/Equality.java\n@@ -9,15 +9,45 @@ import java.lang.reflect.Array;\n //stolen from hamcrest because I didn't want to have more dependency than Matcher class \n public class Equality {\n \n-    public static boolean areEqual(Object o1, Object o2) {\n-        if (o1 == null || o2 == null) {\n-            return o1 == null && o2 == null;\n-        } else if (isArray(o1)) {\n-            return isArray(o2) && areArraysEqual(o1, o2);\n-        } else {\n-            return o1.equals(o2);\n-        }\n-    }\n+\n+public static boolean areEqual(Object o1, Object o2) {\n+    if (o1 == o2) {\n+        return true;\n+    } else if (o1 == null || o2 == null) {\n+        return false;\n+    } else if (o1.getClass().isArray() && o2.getClass().isArray()) {\n+        return areArraysEqual(o1, o2);\n+    } else if (o1 instanceof Object[] && o2 instanceof Object[]) {\n+        return areArraysEqual((Object[]) o1, (Object[]) o2);\n+    } else {\n+        return o1.equals(o2);\n+    }\n+}\n+\n+private static boolean areArraysEqual(Object o1, Object o2) {\n+    if (o1.getClass() != o2.getClass()) {\n+        return false;\n+    }\n+    if (o1 instanceof int[]) {\n+        return Arrays.equals((int[]) o1, (int[]) o2);\n+    } else if (o1 instanceof long[]) {\n+        return Arrays.equals((long[]) o1, (long[]) o2);\n+    } else if (o1 instanceof byte[]) {\n+        return Arrays.equals((byte[]) o1, (byte[]) o2);\n+    } else if (o1 instanceof boolean[]) {\n+        return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n+    } else if (o1 instanceof char[]) {\n+        return Arrays.equals((char[]) o1, (char[]) o2);\n+    } else if (o1 instanceof short[]) {\n+        return Arrays.equals((short[]) o1, (short[]) o2);\n+    } else if (o1 instanceof float[]) {\n+        return Arrays.equals((float[]) o1, (float[]) o2);\n+    } else if (o1 instanceof double[]) {\n+        return Arrays.equals((double[]) o1, (double[]) o2);\n+    } else {\n+        return Arrays.equals((Object[]) o1, (Object[]) o2);\n+    }\n+}\n \n     static boolean areArraysEqual(Object o1, Object o2) {\n         return areArrayLengthsEqual(o1, o2)\n@@ -38,4 +68,4 @@ public class Equality {\n     static boolean isArray(Object o) {\n         return o.getClass().isArray();\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: method areArraysEqual(Object,Object) is already defined in class Equality",
    "test_result": "ERROR"
}