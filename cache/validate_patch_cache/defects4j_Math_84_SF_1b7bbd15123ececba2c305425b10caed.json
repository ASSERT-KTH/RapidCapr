{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                simplex = contract(original, comparator, best);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        simplex = contract(original, comparator, best);\n\n        // check convergence\n        // ...\n\n    }\n\n}\n\nprivate RealPointValuePair[] contract(final RealPointValuePair[] original,\n        final Comparator<RealPointValuePair> comparator,\n        final RealPointValuePair best) {\n    final RealPointValuePair[] contractedSimplex = simplex;\n    doShrink = false;\n    for (int i = 1; i < simplex.length; i++) {\n        final RealPointValuePair[] point = simplex[i].getPointRef();\n        for (int j = 0; j < point.length; j++) {\n            point[j].setPoint(0.5 * (best.getPointRef()[j].getPoint() + point[j].getPoint()));\n        }\n        final RealPointValuePair reflected = new RealPointValuePair(point, Double.NaN);\n        evaluate(reflected.getPointRef());\n        if (comparator.compare(reflected, best) < 0) {\n            best.setPoint(reflected.getPoint());\n            best.setValue(reflected.getValue());\n        } else {\n            doShrink = true;\n        }\n        contractedSimplex[i] = reflected;\n    }\n    return doShrink ? contractedSimplex : original;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6d6d6c5d6 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,67 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = contract(original, comparator, best);\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // compute the contracted simplex\n+        simplex = contract(original, comparator, best);\n \n-            // check convergence\n-                return;\n-            }\n+        // check convergence\n+        // ...\n \n-        }\n+    }\n \n+}\n+\n+private RealPointValuePair[] contract(final RealPointValuePair[] original,\n+        final Comparator<RealPointValuePair> comparator,\n+        final RealPointValuePair best) {\n+    final RealPointValuePair[] contractedSimplex = simplex;\n+    doShrink = false;\n+    for (int i = 1; i < simplex.length; i++) {\n+        final RealPointValuePair[] point = simplex[i].getPointRef();\n+        for (int j = 0; j < point.length; j++) {\n+            point[j].setPoint(0.5 * (best.getPointRef()[j].getPoint() + point[j].getPoint()));\n+        }\n+        final RealPointValuePair reflected = new RealPointValuePair(point, Double.NaN);\n+        evaluate(reflected.getPointRef());\n+        if (comparator.compare(reflected, best) < 0) {\n+            best.setPoint(reflected.getPoint());\n+            best.setValue(reflected.getValue());\n+        } else {\n+            doShrink = true;\n+        }\n+        contractedSimplex[i] = reflected;\n     }\n+    return doShrink ? contractedSimplex : original;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}