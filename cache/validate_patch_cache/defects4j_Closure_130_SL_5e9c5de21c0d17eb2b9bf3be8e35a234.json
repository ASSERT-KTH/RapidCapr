{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n\n        if (name.aliasingGets == 0 && name.localSets == 0 && name.globalSets == 1 && name.getDeclaration() != null) {\n            List<Ref> refs = Lists.newArrayList(name.getRefs());\n            for (Ref ref : refs) {\n                if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n                    if (inlineAliasIfPossible(ref, namespace)) {\n                        name.removeRef(ref);\n                    }\n                }\n            }\n        }\n\n        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n                name.aliasingGets == 0 && name.props != null) {\n            workList.addAll(name.props);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..1c6a45c8 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,32 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+private void inlineAliases(GlobalNamespace namespace) {\n+    // Invariant: All the names in the worklist meet condition (a).\n+    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n+    while (!workList.isEmpty()) {\n+        Name name = workList.pop();\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n+\n+        if (name.aliasingGets == 0 && name.localSets == 0 && name.globalSets == 1 && name.getDeclaration() != null) {\n+            List<Ref> refs = Lists.newArrayList(name.getRefs());\n+            for (Ref ref : refs) {\n+                if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n+                    if (inlineAliasIfPossible(ref, namespace)) {\n+                        name.removeRef(ref);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n+                name.aliasingGets == 0 && name.props != null) {\n+            workList.addAll(name.props);\n+        }\n+    }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}