{
    "patch": "        Node child = n.getFirstChild();\n\n        while (child != null) {\n          if (child.isStringKey()) {\n            TypeI type = typeSystem.getType(getScope(), n, child.getString());\n\n            Property prop = getProperty(child.getString());\n\n            if (!prop.scheduleRenaming(child,\n                processProperty(t, prop, type, null))) {\n              if (propertiesToErrorFor.containsKey(child.getString())) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child,\n                    propertiesToErrorFor.get(child.getString()),\n                    Warnings.INVALIDATION, child.getString(),\n                    (type == null ? \"null\" : type.toString()),\n                    n.toString(), \"\"));\n              }\n            }\n          }\n\n          child = child.getNext();\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..a373e432 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,29 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        Node child = n.getFirstChild();\n+\n+        while (child != null) {\n+          if (child.isStringKey()) {\n+            TypeI type = typeSystem.getType(getScope(), n, child.getString());\n+\n+            Property prop = getProperty(child.getString());\n+\n+            if (!prop.scheduleRenaming(child,\n+                processProperty(t, prop, type, null))) {\n+              if (propertiesToErrorFor.containsKey(child.getString())) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child,\n+                    propertiesToErrorFor.get(child.getString()),\n+                    Warnings.INVALIDATION, child.getString(),\n+                    (type == null ? \"null\" : type.toString()),\n+                    n.toString(), \"\"));\n+              }\n+            }\n+          }\n+\n+          child = child.getNext();\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}