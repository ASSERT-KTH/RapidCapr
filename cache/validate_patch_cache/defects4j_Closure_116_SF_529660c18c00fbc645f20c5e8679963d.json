{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // FUNCTIONS CALLED VIA 'call' and 'apply' have a this-object as the\n    // first parameter, but this is not part of the called function's\n    // parameter list.\n    boolean isFunctionObjectCall = NodeUtil.isFunctionObjectCall(callNode);\n    boolean isFunctionObjectApply = NodeUtil.isFunctionObjectApply(callNode);\n    boolean isDirectCalleeThis =\n        !isFunctionObjectCall && !isFunctionObjectApply && !fnNode.isGeneratorFunction() && !fnNode.isAsyncFunction();\n    if (!callNode.getFirstChild().isName()) {\n      if (isFunctionObjectCall) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (callNode.getChildCount() > 2 && !callNode.getFirstChild().getNext().isThis()) {\n          return CanInlineResult.NO;\n        }\n      } else if (isFunctionObjectApply) {\n        // apply is not supported.\n        return CanInlineResult.NO;\n      } else {\n        // direct calls w/o a arguments list match a 'this' node.\n        if (!callNode.getFirstChild().isThis()) {\n          return CanInlineResult.NO;\n        }\n      }\n    }\n\n    Node cArg = callNode.getFirstChild().getNext();\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    while (fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one\n      // and check for side-effects.\n      if (cArg == null) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n          NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      // Increment the function parameters and the call arguments.\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();\n    }\n\n    if (cArg != null) {\n      // More arguments than named parameters.\n      return CanInlineResult.NO;\n    }\n\n    if (isDirectCalleeThis) {\n      if (callNode.getFirstChild().isThis()) {\n        return CanInlineResult.YES_WITH_SAFE_THIS;\n      }\n    }\n\n    return (fnParam == null && !isFunctionObjectApply) ?\n           CanInlineResult.YES :\n           CanInlineResult.NO_ARGUMENTS_MATCH;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..a24d13a9 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,66 +686,76 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n+    // FUNCTIONS CALLED VIA 'call' and 'apply' have a this-object as the\n+    // first parameter, but this is not part of the called function's\n     // parameter list.\n+    boolean isFunctionObjectCall = NodeUtil.isFunctionObjectCall(callNode);\n+    boolean isFunctionObjectApply = NodeUtil.isFunctionObjectApply(callNode);\n+    boolean isDirectCalleeThis =\n+        !isFunctionObjectCall && !isFunctionObjectApply && !fnNode.isGeneratorFunction() && !fnNode.isAsyncFunction();\n     if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      if (isFunctionObjectCall) {\n         // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+        if (callNode.getChildCount() > 2 && !callNode.getFirstChild().getNext().isThis()) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+      } else if (isFunctionObjectApply) {\n+        // apply is not supported.\n+        return CanInlineResult.NO;\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        // direct calls w/o a arguments list match a 'this' node.\n+        if (!callNode.getFirstChild().isThis()) {\n+          return CanInlineResult.NO;\n+        }\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    Node cArg = callNode.getFirstChild().getNext();\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    while (fnParam != null) {\n+      // For each named parameter check if a mutable argument use more than one\n+      // and check for side-effects.\n+      if (cArg == null) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n+          NodeUtil.getNameReferenceCount(\n+              block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      // Increment the function parameters and the call arguments.\n+      fnParam = fnParam.getNext();\n+      cArg = cArg.getNext();\n+    }\n+\n+    if (cArg != null) {\n+      // More arguments than named parameters.\n+      return CanInlineResult.NO;\n+    }\n+\n+    if (isDirectCalleeThis) {\n+      if (callNode.getFirstChild().isThis()) {\n+        return CanInlineResult.YES_WITH_SAFE_THIS;\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    return (fnParam == null && !isFunctionObjectApply) ?\n+           CanInlineResult.YES :\n+           CanInlineResult.NO_ARGUMENTS_MATCH;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}