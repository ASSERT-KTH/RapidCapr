{
    "patch": "      Node parent = n.getParent();\n      if (parent.isGetProp() || parent.isGetElem()) {\n        if (parent.isGetProp() && \"prototype\".equals(parent.getLastChild().getString())) {\n          // instance methods don't need to have their 'this' qualified...\n        } else {\n          Node receiver = parent.getFirstChild();\n          JSType rType =\n            receiver.getJSType().restrictByNotNullOrUndefined();\n          if (!rType.isSubtypeOf(functionType.getTypeOfThis())) {\n            report(\n              t, receiver, CALLBACK_RECEIVER_MISMATCH, functionType.toString());\n          }\n        }\n      } else if (n.isName() && \"apply\".equals(n.getString())) {\n          // Don't bother checking; we can't tell anyways.\n      } else {\n        report(t, n, FUNCTION_CALLED_NOT_IN_GET, functionType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..cfdbeee8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = n.getParent();\n+      if (parent.isGetProp() || parent.isGetElem()) {\n+        if (parent.isGetProp() && \"prototype\".equals(parent.getLastChild().getString())) {\n+          // instance methods don't need to have their 'this' qualified...\n+        } else {\n+          Node receiver = parent.getFirstChild();\n+          JSType rType =\n+            receiver.getJSType().restrictByNotNullOrUndefined();\n+          if (!rType.isSubtypeOf(functionType.getTypeOfThis())) {\n+            report(\n+              t, receiver, CALLBACK_RECEIVER_MISMATCH, functionType.toString());\n+          }\n+        }\n+      } else if (n.isName() && \"apply\".equals(n.getString())) {\n+          // Don't bother checking; we can't tell anyways.\n+      } else {\n+        report(t, n, FUNCTION_CALLED_NOT_IN_GET, functionType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}