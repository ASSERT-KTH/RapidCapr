{
    "patch": "    // Adjust base year if input starts with a week-based field\n    DateTimeFieldType firstFieldType = savedFields[0].iField.getType();\n    if (firstFieldType == DateTimeFieldType.weekyear() ||\n        firstFieldType == DateTimeFieldType.weekyearOfCentury() ||\n        firstFieldType == DateTimeFieldType.weekOfWeekyear() ||\n        firstFieldType == DateTimeFieldType.weekyearOfEra()) {\n        LocalDate earliestDate = LocalDate.forWeekYearWeekAndDay(iDefaultYear, 1, 1, iChrono);\n        if (compareReverse(savedFields[0].iField.getDurationField(), earliestDate.getChronology().days()) < 0) {\n            earliestDate = earliestDate.plusYears(1);\n        }\n        iDefaultYear = earliestDate.getYear();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ea1fb50d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    // Adjust base year if input starts with a week-based field\n+    DateTimeFieldType firstFieldType = savedFields[0].iField.getType();\n+    if (firstFieldType == DateTimeFieldType.weekyear() ||\n+        firstFieldType == DateTimeFieldType.weekyearOfCentury() ||\n+        firstFieldType == DateTimeFieldType.weekOfWeekyear() ||\n+        firstFieldType == DateTimeFieldType.weekyearOfEra()) {\n+        LocalDate earliestDate = LocalDate.forWeekYearWeekAndDay(iDefaultYear, 1, 1, iChrono);\n+        if (compareReverse(savedFields[0].iField.getDurationField(), earliestDate.getChronology().days()) < 0) {\n+            earliestDate = earliestDate.plusYears(1);\n+        }\n+        iDefaultYear = earliestDate.getYear();\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}