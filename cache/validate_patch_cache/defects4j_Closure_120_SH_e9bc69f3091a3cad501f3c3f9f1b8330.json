{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        } else if (block.isConditionalBranch()) {\n          for (int i = block.getFirstNodeIndex(); i < block.getLastNodeIndex(); i++) {\n            Node node = block.getNode(i);\n            if (node.isIf()) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..230d6b68 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.isConditionalBranch()) {\n+          for (int i = block.getFirstNodeIndex(); i < block.getLastNodeIndex(); i++) {\n+            Node node = block.getNode(i);\n+            if (node.isIf()) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}