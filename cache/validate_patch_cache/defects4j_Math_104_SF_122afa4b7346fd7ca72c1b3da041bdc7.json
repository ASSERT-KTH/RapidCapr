{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (x >= a + 1) {\n        double igf = incompleteGammaFraction(a, x);\n        return 1 - igf / gamma(a);\n    }\n    double sum = 1 / a;\n    double term = 1 / a;\n    int n = 1;\n    while (Math.abs(term / sum) > 1e-15) {\n        term *= x / (a + n);\n        sum += term;\n        n++;\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double logGamma(double a) {\n    if (a <= 0) {\n        throw new IllegalArgumentException();\n    }\n    double[] c = { 1.0 / 12, -1.0 / 360, 1.0 / 1260, -1.0 / 1680, 1.0 / 1188, -691.0 / 360360,\n            1.0 / 156, -3617.0 / 122400, 43867.0 / 2441880, -174611.0 / 125993872 };\n    double sum = c[0];\n    for (int i = 1; i < c.length; i++) {\n        sum += c[i] * Math.pow(a, -2 * i);\n    }\n    return (a - 0.5) * Math.log(a) - a + 0.5 * Math.log(2 * Math.PI) + sum / a;\n}\n\npublic static double gamma(double a) {\n    return Math.exp(logGamma(a));\n}\n\npublic static double incompleteGammaFraction(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n    double p0 = 0;\n    double q0 = 1;\n    double p1 = 1;\n    double q1 = 1;\n    double p, q, ans;\n    double gln = logGamma(a);\n    for (int i = 1; i <= 100; i++) {\n        double a1 = 2 * i * (i - 1);\n        double a2 = (a + 2 * i - 1) * x;\n        double a3 = -i * x;\n        double a4 = a2 + a3 + a1;\n        double a5 = i * (a - i) * x;\n        p = a1 * p1 + a2 * p0;\n        q = a1 * q1 + a2 * q0;\n        p0 = p1;\n        p1 = p;\n        q0 = q1;\n        q1 = q;\n        if (q != 0) {\n            double err = p / q * (a4 + a5 / q);\n            ans = p / q * Math.exp(-x) * Math.pow(x, a);\n            if (Math.abs(err) < 1e-15) {\n                return ans;\n            }\n        }\n    }\n    throw new RuntimeException();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b639069b5 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,77 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    if (x >= a + 1) {\n+        double igf = incompleteGammaFraction(a, x);\n+        return 1 - igf / gamma(a);\n+    }\n+    double sum = 1 / a;\n+    double term = 1 / a;\n+    int n = 1;\n+    while (Math.abs(term / sum) > 1e-15) {\n+        term *= x / (a + n);\n+        sum += term;\n+        n++;\n+    }\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double logGamma(double a) {\n+    if (a <= 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    double[] c = { 1.0 / 12, -1.0 / 360, 1.0 / 1260, -1.0 / 1680, 1.0 / 1188, -691.0 / 360360,\n+            1.0 / 156, -3617.0 / 122400, 43867.0 / 2441880, -174611.0 / 125993872 };\n+    double sum = c[0];\n+    for (int i = 1; i < c.length; i++) {\n+        sum += c[i] * Math.pow(a, -2 * i);\n+    }\n+    return (a - 0.5) * Math.log(a) - a + 0.5 * Math.log(2 * Math.PI) + sum / a;\n+}\n+\n+public static double gamma(double a) {\n+    return Math.exp(logGamma(a));\n+}\n+\n+public static double incompleteGammaFraction(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    double p0 = 0;\n+    double q0 = 1;\n+    double p1 = 1;\n+    double q1 = 1;\n+    double p, q, ans;\n+    double gln = logGamma(a);\n+    for (int i = 1; i <= 100; i++) {\n+        double a1 = 2 * i * (i - 1);\n+        double a2 = (a + 2 * i - 1) * x;\n+        double a3 = -i * x;\n+        double a4 = a2 + a3 + a1;\n+        double a5 = i * (a - i) * x;\n+        p = a1 * p1 + a2 * p0;\n+        q = a1 * q1 + a2 * q0;\n+        p0 = p1;\n+        p1 = p;\n+        q0 = q1;\n+        q1 = q;\n+        if (q != 0) {\n+            double err = p / q * (a4 + a5 / q);\n+            ans = p / q * Math.exp(-x) * Math.pow(x, a);\n+            if (Math.abs(err) < 1e-15) {\n+                return ans;\n+            }\n+        }\n+    }\n+    throw new RuntimeException();\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}