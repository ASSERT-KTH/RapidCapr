{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    List<Callback> callbacks = ((Factory) mock).getCallbacks();\n    int callbackIndex = findMethodInterceptorFilterIndex(callbacks);\n    if (callbackIndex >= 0) {\n        callbacks.set(callbackIndex, new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)));\n        ((Factory) mock).setCallbacks(callbacks);\n    } else {\n        ((Factory) mock).setCallback(0, new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)));\n    }\n}\n\nprivate int findMethodInterceptorFilterIndex(List<Callback> callbacks) {\n    for (int i = 0; i < callbacks.size(); i++) {\n        if (callbacks.get(i) instanceof MethodInterceptorFilter) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ace62b9e7 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    List<Callback> callbacks = ((Factory) mock).getCallbacks();\n+    int callbackIndex = findMethodInterceptorFilterIndex(callbacks);\n+    if (callbackIndex >= 0) {\n+        callbacks.set(callbackIndex, new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)));\n+        ((Factory) mock).setCallbacks(callbacks);\n+    } else {\n+        ((Factory) mock).setCallback(0, new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)));\n+    }\n+}\n+\n+private int findMethodInterceptorFilterIndex(List<Callback> callbacks) {\n+    for (int i = 0; i < callbacks.size(); i++) {\n+        if (callbacks.get(i) instanceof MethodInterceptorFilter) {\n+            return i;\n+        }\n+    }\n+    return -1;\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}