{
    "patch": "          if (block.getBackEdge() == null || block.getOutEdges().size() > 2) {\n            return false;\n          }\n          ref = getOneAndOnlyAssignment();\n          if (ref == null) {\n            return false;\n          }\n          if (!block.getOutEdges().get(0).getDestination().equals(ref.getBasicBlock())) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c1043f20 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          if (block.getBackEdge() == null || block.getOutEdges().size() > 2) {\n+            return false;\n+          }\n+          ref = getOneAndOnlyAssignment();\n+          if (ref == null) {\n+            return false;\n+          }\n+          if (!block.getOutEdges().get(0).getDestination().equals(ref.getBasicBlock())) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}