{
    "patch": "public double getNumericalMean() {\n    if (getPopulationSize() <= 0 || getSampleSize() < 0 || getNumberOfSuccesses() < 0 || getNumberOfSuccesses() > getSampleSize() || getPopulationSize() < getSampleSize()) {\n        return Double.NaN;\n    }\n    return ((double) getNumberOfSuccesses() / (double) getSampleSize()) * (double) getPopulationSize();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..f8155d639 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -264,9 +264,12 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * For population size {@code N}, number of successes {@code m}, and sample\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n-    public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+public double getNumericalMean() {\n+    if (getPopulationSize() <= 0 || getSampleSize() < 0 || getNumberOfSuccesses() < 0 || getNumberOfSuccesses() > getSampleSize() || getPopulationSize() < getSampleSize()) {\n+        return Double.NaN;\n     }\n+    return ((double) getNumberOfSuccesses() / (double) getSampleSize()) * (double) getPopulationSize();\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "junit.framework.AssertionFailedError: expected:<600.0> but was:<2.6666666666666665>",
    "test_result": "FAIL"
}