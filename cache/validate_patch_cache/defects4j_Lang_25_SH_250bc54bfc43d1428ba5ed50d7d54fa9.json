{
    "patch": "StringBuilder escaped = new StringBuilder();\nwhile (pos < input.length()) {\n    int c = input.codePointAt(pos);\n    if (c < 128) {\n        if (map[c]) {\n            escaped.append(\"\\\\\").append((char) c);\n        } else {\n            escaped.append((char) c);\n        }\n    } else if (c == '\\t') {\n        escaped.append(\"\\\\t\");\n    } else if (c == '\\r') {\n        escaped.append(\"\\\\r\");\n    } else if (c == '\\n') {\n        escaped.append(\"\\\\n\");\n    } else if (c == '\\f') {\n        escaped.append(\"\\\\f\");\n    } else if (c == '\\b') {\n        escaped.append(\"\\\\b\");\n    } else if (c == '\\\\') {\n        escaped.append(\"\\\\\\\\\");\n    } else if (c == '\"') {\n        escaped.append(\"\\\\\\\"\");\n    } else if (c >= 0xD800 && c <= 0xDBFF && pos + 1 < input.length()) {\n        int d = input.codePointAt(pos + 1);\n        if (d >= 0xDC00 && d <= 0xDFFF) {\n            pos++;\n            int a = c & 0xFFFF;\n            a <<= 10;\n            a |= d & 0xFFFF;\n            a += 0x10000;\n            escaped.append(\"\\\\u\").append(Integer.toHexString(a));\n        } else {\n            escaped.append((char) c);\n        }\n    } else {\n        escaped.append(\"\\\\u\").append(String.format(\"%04x\", c));\n    }\n    pos++;\n}\nreturn escaped.toString();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}