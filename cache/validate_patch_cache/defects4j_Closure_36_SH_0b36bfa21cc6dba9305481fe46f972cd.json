{
    "patch": "        if (value.isFunction()) {\n          Node callNode = reference.getParent();\n          if (reference.getParent().isCall()) {\n            CodingConvention convention = compiler.getCodingConvention();\n            // Bug 2388531: Don't inline subclass definitions into class defining\n            // calls as this confused class removing logic.\n            SubclassRelationship relationship =\n                convention.getClassesDefinedByCall(callNode);\n            if (relationship != null) {\n              return false;\n            }\n\n            // issue 668: Don't inline singleton getter methods\n            // calls as this confused class removing logic.\n            String className = convention.getSingletonGetterClassName(callNode);\n            if (className != null && !isCallTo(className, value)) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..b30b5dcb 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,24 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+        if (value.isFunction()) {\n+          Node callNode = reference.getParent();\n+          if (reference.getParent().isCall()) {\n+            CodingConvention convention = compiler.getCodingConvention();\n+            // Bug 2388531: Don't inline subclass definitions into class defining\n+            // calls as this confused class removing logic.\n+            SubclassRelationship relationship =\n+                convention.getClassesDefinedByCall(callNode);\n+            if (relationship != null) {\n+              return false;\n+            }\n+\n+            // issue 668: Don't inline singleton getter methods\n+            // calls as this confused class removing logic.\n+            String className = convention.getSingletonGetterClassName(callNode);\n+            if (className != null && !isCallTo(className, value)) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}