{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        throw new IllegalStateException(\"JSDoc line is null\");\n    }\n\n    result = result.trim();\n    if (result.isEmpty()) {\n        return \"\";\n    }\n\n    StringBuilder sb = new StringBuilder();\n    boolean insideBlock = false;\n    boolean lastCharIsSpace = false;\n\n    for (int i = 0; i < result.length(); i++) {\n        char c = result.charAt(i);\n\n        if (c == '*') {\n            insideBlock = true;\n        } else if (insideBlock && c == ' ') {\n            if (!lastCharIsSpace) {\n                sb.append(c);\n            }\n            lastCharIsSpace = true;\n        } else {\n            sb.append(c);\n            insideBlock = false;\n            lastCharIsSpace = false;\n        }\n    }\n\n    return sb.toString().trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..b0cd997a 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,40 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+    if (result == null) {\n+        throw new IllegalStateException(\"JSDoc line is null\");\n+    }\n+\n+    result = result.trim();\n+    if (result.isEmpty()) {\n+        return \"\";\n+    }\n+\n+    StringBuilder sb = new StringBuilder();\n+    boolean insideBlock = false;\n+    boolean lastCharIsSpace = false;\n+\n+    for (int i = 0; i < result.length(); i++) {\n+        char c = result.charAt(i);\n+\n+        if (c == '*') {\n+            insideBlock = true;\n+        } else if (insideBlock && c == ' ') {\n+            if (!lastCharIsSpace) {\n+                sb.append(c);\n+            }\n+            lastCharIsSpace = true;\n+        } else {\n+            sb.append(c);\n+            insideBlock = false;\n+            lastCharIsSpace = false;\n+        }\n+    }\n+\n+    return sb.toString().trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}