{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type type = field.getGenericType();\n    if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Type[] typeArgs = parameterizedType.getActualTypeArguments();\n        int nestedIndex = 0;\n        while (typeArgs[nestedIndex] instanceof ParameterizedType) {\n            nestedIndex++;\n        }\n        Type rawType = typeArgs[nestedIndex];\n        if (rawType instanceof Class<?>) {\n            return (Class<?>) rawType;\n        }\n        // If the rawType is not a class but a parameterized type, traverse recursively to get the raw type.\n        if (rawType instanceof ParameterizedType) {\n            return getRawType((ParameterizedType) rawType);\n        }\n    }\n    return Object.class;\n}\n\nprivate Class<?> getRawType(ParameterizedType parameterizedType) {\n    Type rawType = parameterizedType.getRawType();\n    if (rawType instanceof Class<?>) {\n        return (Class<?>) rawType;\n    }\n    if (rawType instanceof ParameterizedType) {\n        return getRawType((ParameterizedType) rawType);\n    }\n    // If the rawType is neither a class nor a parameterized type, return Object.class.\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..ea7918a24 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,36 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type type = field.getGenericType();\n+    if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        Type[] typeArgs = parameterizedType.getActualTypeArguments();\n+        int nestedIndex = 0;\n+        while (typeArgs[nestedIndex] instanceof ParameterizedType) {\n+            nestedIndex++;\n+        }\n+        Type rawType = typeArgs[nestedIndex];\n+        if (rawType instanceof Class<?>) {\n+            return (Class<?>) rawType;\n+        }\n+        // If the rawType is not a class but a parameterized type, traverse recursively to get the raw type.\n+        if (rawType instanceof ParameterizedType) {\n+            return getRawType((ParameterizedType) rawType);\n+        }\n+    }\n+    return Object.class;\n+}\n+\n+private Class<?> getRawType(ParameterizedType parameterizedType) {\n+    Type rawType = parameterizedType.getRawType();\n+    if (rawType instanceof Class<?>) {\n+        return (Class<?>) rawType;\n+    }\n+    if (rawType instanceof ParameterizedType) {\n+        return getRawType((ParameterizedType) rawType);\n+    }\n+    // If the rawType is neither a class nor a parameterized type, return Object.class.\n+    return Object.class;\n+}\n }",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 1",
    "test_result": "FAIL"
}