{
    "patch": "import org.apache.commons.math3.util.Precision;\n \npublic Line revert() {\n    final Vector3D zero = Vector3D.ZERO;\n    final Vector3D revertedDirection = direction.negate();\n    return new Line(zero, revertedDirection);\n}\n \npublic static void testRevert() {\n    Line line = new Line(new Vector3D(0.0, 0.0, 0.0), new Vector3D(0.1, 0.2, 0.3));\n    Line reversed = line.revert();\n    Vector3D expected = new Vector3D(0.0, 0.0, 0.0).subtract(line.getDirection());\n    Vector3D actual = reversed.getDirection();\n    assertTrue(Precision.equals(expected.getX(), actual.getX(), 1.0e-12));\n    assertTrue(Precision.equals(expected.getY(), actual.getY(), 1.0e-12));\n    assertTrue(Precision.equals(expected.getZ(), actual.getZ(), 1.0e-12));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..0c7595f27 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,23 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+import org.apache.commons.math3.util.Precision;\n+ \n+public Line revert() {\n+    final Vector3D zero = Vector3D.ZERO;\n+    final Vector3D revertedDirection = direction.negate();\n+    return new Line(zero, revertedDirection);\n+}\n+ \n+public static void testRevert() {\n+    Line line = new Line(new Vector3D(0.0, 0.0, 0.0), new Vector3D(0.1, 0.2, 0.3));\n+    Line reversed = line.revert();\n+    Vector3D expected = new Vector3D(0.0, 0.0, 0.0).subtract(line.getDirection());\n+    Vector3D actual = reversed.getDirection();\n+    assertTrue(Precision.equals(expected.getX(), actual.getX(), 1.0e-12));\n+    assertTrue(Precision.equals(expected.getY(), actual.getY(), 1.0e-12));\n+    assertTrue(Precision.equals(expected.getZ(), actual.getZ(), 1.0e-12));\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}