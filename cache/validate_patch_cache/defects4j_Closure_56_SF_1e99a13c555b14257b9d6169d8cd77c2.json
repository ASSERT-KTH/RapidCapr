{
    "patch": "public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    if (lineNumber <= 0) {\n        return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    int lineCount = 0;\n    for (int i = pos; i < js.length(); i++) {\n        if (js.charAt(i) == '\\n') {\n            lineCount++;\n            if (lineNumber == lineCount) {\n                // Get the line from the start position to the end of the current line.\n                return js.substring(pos, i);\n            }\n            // Set the start position to the start of the next line.\n            pos = i + 1;\n        }\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex fc0cf3fc..46baee1a 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -202,7 +202,7 @@ public class SourceFile implements StaticSourceFile, Serializable {\n    *     of the file. Returns {@code null} if it does not exist,\n    *     or if there was an IO exception.\n    */\n-  public String getLine(int lineNumber) {\n+public String getLine(int lineNumber) {\n     String js = \"\";\n     try {\n       // NOTE(nicksantos): Right now, this is optimized for few warnings.\n@@ -213,6 +213,10 @@ public class SourceFile implements StaticSourceFile, Serializable {\n       return null;\n     }\n \n+    if (lineNumber <= 0) {\n+        return null;\n+    }\n+\n     int pos = 0;\n     int startLine = 1;\n \n@@ -223,27 +227,25 @@ public class SourceFile implements StaticSourceFile, Serializable {\n       startLine = lastLine;\n     }\n \n-    for (int n = startLine; n < lineNumber; n++) {\n-      int nextpos = js.indexOf('\\n', pos);\n-      if (nextpos == -1) {\n-        return null;\n-      }\n-      pos = nextpos + 1;\n+    int lineCount = 0;\n+    for (int i = pos; i < js.length(); i++) {\n+        if (js.charAt(i) == '\\n') {\n+            lineCount++;\n+            if (lineNumber == lineCount) {\n+                // Get the line from the start position to the end of the current line.\n+                return js.substring(pos, i);\n+            }\n+            // Set the start position to the start of the next line.\n+            pos = i + 1;\n+        }\n     }\n \n     // Remember this offset for the next search we do.\n     lastOffset = pos;\n     lastLine = lineNumber;\n \n-    if (js.indexOf('\\n', pos) == -1) {\n-      // If next new line cannot be found, there are two cases\n-      // 1. pos already reaches the end of file, then null should be returned\n-      // 2. otherwise, return the contents between pos and the end of file.\n-        return null;\n-    } else {\n-      return js.substring(pos, js.indexOf('\\n', pos));\n-    }\n-  }\n+    return null;\n+}\n \n   /**\n    * Get a region around the indicated line number. The exact definition of a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<foo2:third line> but was:<null>",
    "test_result": "FAIL"
}