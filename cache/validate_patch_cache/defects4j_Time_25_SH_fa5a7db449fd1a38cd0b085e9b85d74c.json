{
    "patch": "    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal == nextAdjusted) {\n            return offsetAdjusted;\n        } else {\n            int nextLocalOffset = getOffset(nextLocal);\n            int nextAdjustedOffset = getOffset(nextAdjusted);\n            if (nextLocal > instantLocal - offsetAdjusted && nextLocalOffset <= nextAdjustedOffset) {\n                return offsetLocal;\n            } else if (nextAdjusted > instantAdjusted - offsetLocal && nextAdjustedOffset <= nextLocalOffset) {\n                return offsetAdjusted;\n            } else if (nextLocalOffset <= nextAdjustedOffset) {\n                return nextLocalOffset;\n            } else {\n                return nextAdjustedOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4690f26e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal == nextAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            int nextLocalOffset = getOffset(nextLocal);\n+            int nextAdjustedOffset = getOffset(nextAdjusted);\n+            if (nextLocal > instantLocal - offsetAdjusted && nextLocalOffset <= nextAdjustedOffset) {\n+                return offsetLocal;\n+            } else if (nextAdjusted > instantAdjusted - offsetLocal && nextAdjustedOffset <= nextLocalOffset) {\n+                return offsetAdjusted;\n+            } else if (nextLocalOffset <= nextAdjustedOffset) {\n+                return nextLocalOffset;\n+            } else {\n+                return nextAdjustedOffset;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}