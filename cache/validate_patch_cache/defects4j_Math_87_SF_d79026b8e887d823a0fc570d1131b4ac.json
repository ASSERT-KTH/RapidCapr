{
    "patch": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        double maxValue = Double.MIN_VALUE;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            double value = Math.abs(getEntry(i, col));\n            if (MathUtils.equals(value, 0.0, epsilon)) {\n                continue;\n            }\n            if (value > maxValue) {\n                maxValue = value;\n                row = i;\n            } else {\n                return null;\n            }\n        }\n        return row;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..4a78e3fab 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -271,13 +271,17 @@ class SimplexTableau implements Serializable {\n      */\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n+        double maxValue = Double.MIN_VALUE;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n+            double value = Math.abs(getEntry(i, col));\n+            if (MathUtils.equals(value, 0.0, epsilon)) {\n+                continue;\n+            }\n+            if (value > maxValue) {\n+                maxValue = value;\n                 row = i;\n-                } else {\n+            } else {\n                 return null;\n-                }\n             }\n         }\n         return row;",
    "result_reason": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>",
    "test_result": "FAIL"
}