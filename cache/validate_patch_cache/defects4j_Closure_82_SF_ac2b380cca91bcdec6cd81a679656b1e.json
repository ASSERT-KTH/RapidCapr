{
    "patch": "/**\n * Returns true if this type is empty.\n *\n * An empty type is one that has no members and is not a valid type, such as:\n * - void\n * - null\n * - no type\n * - unresolved type\n * - unknown type\n * - no object type\n *\n * @return true if this type is empty, false otherwise.\n */\npublic final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isUnknownType() || isNoResolvedType() || isVoidType() || isNullType();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..8ffd0b9d 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -159,9 +159,22 @@ public abstract class JSType implements Serializable {\n     return false;\n   }\n \n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+/**\n+ * Returns true if this type is empty.\n+ *\n+ * An empty type is one that has no members and is not a valid type, such as:\n+ * - void\n+ * - null\n+ * - no type\n+ * - unresolved type\n+ * - unknown type\n+ * - no object type\n+ *\n+ * @return true if this type is empty, false otherwise.\n+ */\n+public final boolean isEmptyType() {\n+    return isNoType() || isNoObjectType() || isUnknownType() || isNoResolvedType() || isVoidType() || isNullType();\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "junit.framework.ComparisonFailure: expected:</**",
    "test_result": "FAIL"
}