{
    "patch": "// We only want to match constraints on anonymous types.\nif (constraintObj.isNominalType() || constraintObj.isFunctionType()) {\n  return;\n}\n\n// Handle the case where the constraint object is a record type.\n//\n// param constraintObj {{prop: (number|undefined)}}\n// function f(constraintObj) {}\n// f({});\n//\n// We want to modify the object literal to match the constraint, by\n// taking each property on the record and trying to match properties on this object.\nif (constraintObj.isRecordType()) {\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!isPropertyTypeDeclared(prop)) {\n      // If the property is not declared, infer its type.\n      JSType typeToInfer = propType;\n      if (!hasProperty(prop)) {\n        // If the property does not exist on this object, define it with a void type.\n        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n          .getLeastSupertype(propType);\n      }\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..49a57aef 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,34 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types.\n+if (constraintObj.isNominalType() || constraintObj.isFunctionType()) {\n+  return;\n+}\n+\n+// Handle the case where the constraint object is a record type.\n+//\n+// param constraintObj {{prop: (number|undefined)}}\n+// function f(constraintObj) {}\n+// f({});\n+//\n+// We want to modify the object literal to match the constraint, by\n+// taking each property on the record and trying to match properties on this object.\n+if (constraintObj.isRecordType()) {\n+  for (String prop : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(prop);\n+    if (!isPropertyTypeDeclared(prop)) {\n+      // If the property is not declared, infer its type.\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(prop)) {\n+        // If the property does not exist on this object, define it with a void type.\n+        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+          .getLeastSupertype(propType);\n+      }\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}