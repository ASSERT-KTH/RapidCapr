{
    "patch": "    if (left.isNumber() || left.isNull() || left.isString()) {\n      checkArgument(right.isNumber(), \"Expected right parameter to be a number but was %s\", right);\n      double index = right.getDouble();\n      int intIndex = (int) index;\n      if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      if (left.isArrayLit()) {\n        Node element = left.getFirstChild();\n        while (element != null && intIndex > 0) {\n          intIndex--;\n          element = element.getNext();\n        }\n        if (element == null) {\n          error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n          return n;\n        } else {\n          n.getParent().replaceChild(n, element.detach());\n          reportCodeChange();\n          return element;\n        }\n      }\n    }\n    return n;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..87e93db5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,31 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.isNumber() || left.isNull() || left.isString()) {\n+      checkArgument(right.isNumber(), \"Expected right parameter to be a number but was %s\", right);\n+      double index = right.getDouble();\n+      int intIndex = (int) index;\n+      if (intIndex < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+      if (left.isArrayLit()) {\n+        Node element = left.getFirstChild();\n+        while (element != null && intIndex > 0) {\n+          intIndex--;\n+          element = element.getNext();\n+        }\n+        if (element == null) {\n+          error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+          return n;\n+        } else {\n+          n.getParent().replaceChild(n, element.detach());\n+          reportCodeChange();\n+          return element;\n+        }\n+      }\n+    }\n+    return n;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}