{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int numParams = functionType.getParameters().size();\n    int numArgs = call.getChildCount() - 1; // exclude function name\n    int numUnmatchedArgs = Math.max(numArgs - numParams, 0);\n    int ordinal = 0;\n\n    while (parameters.hasNext()) {\n      Node parameter = parameters.next();\n      Node argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    while (arguments.hasNext()) {\n      Node argument = arguments.next();\n      ordinal++;\n\n      report(t, argument, WRONG_ARGUMENT_TYPE, argument.getQualifiedName(), \"\", call, ordinal);\n    }\n\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    String expectedCountStr;\n    if (minArgs == maxArgs) {\n      if (numParams == minArgs) {\n        expectedCountStr = String.valueOf(minArgs);\n      } else {\n        expectedCountStr = \"exactly \" + numParams;\n      }\n    } else if (maxArgs == Integer.MAX_VALUE) {\n      expectedCountStr = \"at least \" + minArgs;\n    } else {\n      expectedCountStr =\n          \"between \" + minArgs + \" and \" + maxArgs + \" argument(s)\";\n    }\n\n    if (numUnmatchedArgs > 0) {\n      report(\n          t,\n          call,\n          WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs),\n          expectedCountStr + \" and no more than \" + numParams + \" argument(s)\");\n    } else if (numArgs < minArgs) {\n      report(\n          t,\n          call,\n          WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs),\n          \"at least \" + minArgs + \" argument(s)\");\n    } else if (numArgs > maxArgs) {\n      report(\n          t,\n          call,\n          WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs),\n          expectedCountStr);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..fffad33d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,36 +1396,73 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n+    int numParams = functionType.getParameters().size();\n+    int numArgs = call.getChildCount() - 1; // exclude function name\n+    int numUnmatchedArgs = Math.max(numArgs - numParams, 0);\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+\n+    while (parameters.hasNext()) {\n+      Node parameter = parameters.next();\n+      Node argument = arguments.next();\n+      ordinal++;\n+\n+      validator.expectArgumentMatchesParameter(\n+          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+    }\n+\n+    while (arguments.hasNext()) {\n+      Node argument = arguments.next();\n       ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      report(t, argument, WRONG_ARGUMENT_TYPE, argument.getQualifiedName(), \"\", call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    String expectedCountStr;\n+    if (minArgs == maxArgs) {\n+      if (numParams == minArgs) {\n+        expectedCountStr = String.valueOf(minArgs);\n+      } else {\n+        expectedCountStr = \"exactly \" + numParams;\n+      }\n+    } else if (maxArgs == Integer.MAX_VALUE) {\n+      expectedCountStr = \"at least \" + minArgs;\n+    } else {\n+      expectedCountStr =\n+          \"between \" + minArgs + \" and \" + maxArgs + \" argument(s)\";\n+    }\n+\n+    if (numUnmatchedArgs > 0) {\n+      report(\n+          t,\n+          call,\n+          WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs),\n+          expectedCountStr + \" and no more than \" + numParams + \" argument(s)\");\n+    } else if (numArgs < minArgs) {\n+      report(\n+          t,\n+          call,\n+          WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs),\n+          \"at least \" + minArgs + \" argument(s)\");\n+    } else if (numArgs > maxArgs) {\n+      report(\n+          t,\n+          call,\n+          WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs),\n+          expectedCountStr);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}