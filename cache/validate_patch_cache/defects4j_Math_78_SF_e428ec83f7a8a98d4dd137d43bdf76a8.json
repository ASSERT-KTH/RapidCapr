{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n\n        int signum = Integer.signum(ga);\n        int signChanges = 0;\n        while (tb < t1 + convergence / 2) {\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            if (Double.isNaN(gb) || Double.isInfinite(gb)) {\n                throw new ConvergenceException(new Localizable(\"Infinite or NaN event function value\"));\n            }\n\n            int eventSignum = Integer.signum(gb);\n            if (eventSignum * signum < 0) {\n                // We have a sign change; reduce the interval until we bracket the root\n\n                // variation direction, with respect to the integration direction\n                increasing = eventSignum > 0;\n                \n                // Find the root inside [ta, tb]\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = solver.solve(f, ta, tb);\n                if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // We were already waiting for this event, which was\n                        // found during a previous call for a step that was\n                        // rejected. This step must now be accepted since it\n                        // properly ends exactly at the event occurrence.\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                } else {\n                    // We have found a duplicate event (it occurred at the same time as a previous event)\n                    ta = root;\n                    ga = handler.g(ta, interpolator.getInterpolatedState());\n                    signChanges = 0;\n                }\n\n            } else {\n                // No sign change so far; move the interval forward\n                ta = tb;\n                ga = gb;\n                signChanges += signum == 0 ? 1 : signum * eventSignum < 0 ? 1 : 0;\n                signum = eventSignum;\n            }\n\n            tb = ta + (signChanges % 2 == 0 ? convergence : -convergence);\n        }\n\n        // No event during the whole step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..6c19b2b8e 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,104 +164,99 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n+    try {\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h  = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+\n+        int signum = Integer.signum(ga);\n+        int signChanges = 0;\n+        while (tb < t1 + convergence / 2) {\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            if (Double.isNaN(gb) || Double.isInfinite(gb)) {\n+                throw new ConvergenceException(new Localizable(\"Infinite or NaN event function value\"));\n+            }\n+\n+            int eventSignum = Integer.signum(gb);\n+            if (eventSignum * signum < 0) {\n+                // We have a sign change; reduce the interval until we bracket the root\n+\n+                // variation direction, with respect to the integration direction\n+                increasing = eventSignum > 0;\n+                \n+                // Find the root inside [ta, tb]\n+                final UnivariateRealFunction f = new UnivariateRealFunction() {\n+                    public double value(final double t) throws FunctionEvaluationException {\n+                        try {\n+                            interpolator.setInterpolatedTime(t);\n+                            return handler.g(t, interpolator.getInterpolatedState());\n+                        } catch (DerivativeException e) {\n+                            throw new FunctionEvaluationException(e, t);\n+                        } catch (EventException e) {\n+                            throw new FunctionEvaluationException(e, t);\n                         }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n-\n+                };\n+                final BrentSolver solver = new BrentSolver();\n+                solver.setAbsoluteAccuracy(convergence);\n+                solver.setMaximalIterationCount(maxIterationCount);\n+                final double root = solver.solve(f, ta, tb);\n+                if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {\n+                    pendingEventTime = root;\n+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n+                        // We were already waiting for this event, which was\n+                        // found during a previous call for a step that was\n+                        // rejected. This step must now be accepted since it\n+                        // properly ends exactly at the event occurrence.\n+                        return false;\n+                    }\n+                    pendingEvent = true;\n+                    return true;\n                 } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    // We have found a duplicate event (it occurred at the same time as a previous event)\n+                    ta = root;\n+                    ga = handler.g(ta, interpolator.getInterpolatedState());\n+                    signChanges = 0;\n                 }\n \n+            } else {\n+                // No sign change so far; move the interval forward\n+                ta = tb;\n+                ga = gb;\n+                signChanges += signum == 0 ? 1 : signum * eventSignum < 0 ? 1 : 0;\n+                signum = eventSignum;\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n-\n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n+            tb = ta + (signChanges % 2 == 0 ? convergence : -convergence);\n         }\n \n+        // No event during the whole step\n+        pendingEvent = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n     }\n \n+}\n+\n     /** Get the occurrence time of the event triggered in the current\n      * step.\n      * @return occurrence time of the event triggered in the current",
    "result_reason": "error: method signum in class Integer cannot be applied to given types;",
    "test_result": "ERROR"
}