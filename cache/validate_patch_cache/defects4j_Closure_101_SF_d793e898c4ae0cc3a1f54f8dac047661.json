{
    "patch": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    // added check for null flags\n    if (flags != null && flags.process_closure_primitives) {\n      options.setProcessClosurePrimitives(true);\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..612c4b04 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -430,8 +430,10 @@ public class CommandLineRunner extends\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+\n+    // added check for null flags\n+    if (flags != null && flags.process_closure_primitives) {\n+      options.setProcessClosurePrimitives(true);\n     }\n \n     initOptionsFromFlags(options);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}