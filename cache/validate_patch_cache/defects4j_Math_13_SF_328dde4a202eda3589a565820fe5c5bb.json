{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 100; // choose an appropriate block size\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n    final double[] sqrtEigenValues = new double[n];\n    for (int i = 0; i < n; i++) {\n        sqrtEigenValues[i] = FastMath.sqrt(dec.getRealEigenvalue(i));\n    }\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n    final RealMatrix v = dec.getV();\n    final RealMatrix vT = v.transpose();\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i += blockSize) {\n        final int blockSizeI = Math.min(blockSize, n - i);\n        final RealMatrix blockV = v.getSubMatrix(0, n - 1, i, i + blockSizeI - 1);\n        final RealMatrix blockVT = blockV.transpose();\n        final RealMatrix blockD = sqrtD.getSubMatrix(i, i + blockSizeI - 1, i, i + blockSizeI - 1);\n        final RealMatrix blockM = blockV.multiply(blockD).multiply(blockVT);\n        sqrtM.setSubMatrix(blockM.getData(), i, i);\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5f5366d18 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 100; // choose an appropriate block size\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n+    final double[] sqrtEigenValues = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        sqrtEigenValues[i] = FastMath.sqrt(dec.getRealEigenvalue(i));\n     }\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vT = v.transpose();\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i += blockSize) {\n+        final int blockSizeI = Math.min(blockSize, n - i);\n+        final RealMatrix blockV = v.getSubMatrix(0, n - 1, i, i + blockSizeI - 1);\n+        final RealMatrix blockVT = blockV.transpose();\n+        final RealMatrix blockD = sqrtD.getSubMatrix(i, i + blockSizeI - 1, i, i + blockSizeI - 1);\n+        final RealMatrix blockM = blockV.multiply(blockD).multiply(blockVT);\n+        sqrtM.setSubMatrix(blockM.getData(), i, i);\n+    }\n+    return sqrtM;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.OutOfRangeException: row index (200)",
    "test_result": "FAIL"
}