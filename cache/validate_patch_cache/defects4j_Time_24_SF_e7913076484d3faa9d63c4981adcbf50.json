{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            // compute the year based on the saved fields\n            int year = iDefaultYear;\n            DurationField years = DurationFieldType.years().getField(iChrono);\n            for (SavedField field : savedFields) {\n                if (field.iField.getType() == DateTimeFieldType.year()) {\n                    year = field.iValue;\n                    break;\n                } else if (field.iField.getDurationField().getType() == DurationFieldType.weekyears()) {\n                    int weekyear = field.iValue;\n                    if (weekyear <= 0) {\n                        year = weekyear;\n                    } else {\n                        year = iChrono.weekyear().set(0, weekyear);\n                    }\n                    break;\n                } else if (field.iField.getDurationField().getType() == DurationFieldType.weeks()) {\n                    // find the first day of the first week of the year\n                    int weekyear = iChrono.weekyear().get(year);\n                    int week = field.iValue;\n                    weekyear = iChrono.weekOfWeekyear().set(0, weekyear, week);\n                    year = iChrono.year().get(weekyear);\n                    break;\n                } else if (field.iField.getType() == DateTimeFieldType.era()) {\n                    int era = field.iValue;\n                    CalendarSystem minSystem = iChrono.getMinimumDaysInFirstWeekYearCalendarSystem();\n                    int beginYear = minSystem.getMinimumYearOfEra(era);\n                    year = beginYear + iChrono.year().getDifference(year, beginYear + minSystem.getYear(era, 1), 1);\n                    break;\n                } else {\n                    DurationField fieldDuration = field.iField.getDurationField();\n                    if (fieldDuration.getType() == DurationFieldType.days() ||\n                            fieldDuration.getType() == DurationFieldType.hours() ||\n                            fieldDuration.getType() == DurationFieldType.minutes() ||\n                            fieldDuration.getType() == DurationFieldType.seconds() ||\n                            fieldDuration.getType() == DurationFieldType.millis()) {\n                        continue;\n                    } else {\n                        // we don't know how to handle this field, so bail out\n                        break;\n                    }\n                }\n            }\n            // save the computed year\n            saveField(DateTimeFieldType.year(), year);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..549ccde2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,55 +328,98 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            // compute the year based on the saved fields\n+            int year = iDefaultYear;\n+            DurationField years = DurationFieldType.years().getField(iChrono);\n+            for (SavedField field : savedFields) {\n+                if (field.iField.getType() == DateTimeFieldType.year()) {\n+                    year = field.iValue;\n+                    break;\n+                } else if (field.iField.getDurationField().getType() == DurationFieldType.weekyears()) {\n+                    int weekyear = field.iValue;\n+                    if (weekyear <= 0) {\n+                        year = weekyear;\n+                    } else {\n+                        year = iChrono.weekyear().set(0, weekyear);\n+                    }\n+                    break;\n+                } else if (field.iField.getDurationField().getType() == DurationFieldType.weeks()) {\n+                    // find the first day of the first week of the year\n+                    int weekyear = iChrono.weekyear().get(year);\n+                    int week = field.iValue;\n+                    weekyear = iChrono.weekOfWeekyear().set(0, weekyear, week);\n+                    year = iChrono.year().get(weekyear);\n+                    break;\n+                } else if (field.iField.getType() == DateTimeFieldType.era()) {\n+                    int era = field.iValue;\n+                    CalendarSystem minSystem = iChrono.getMinimumDaysInFirstWeekYearCalendarSystem();\n+                    int beginYear = minSystem.getMinimumYearOfEra(era);\n+                    year = beginYear + iChrono.year().getDifference(year, beginYear + minSystem.getYear(era, 1), 1);\n+                    break;\n+                } else {\n+                    DurationField fieldDuration = field.iField.getDurationField();\n+                    if (fieldDuration.getType() == DurationFieldType.days() ||\n+                            fieldDuration.getType() == DurationFieldType.hours() ||\n+                            fieldDuration.getType() == DurationFieldType.minutes() ||\n+                            fieldDuration.getType() == DurationFieldType.seconds() ||\n+                            fieldDuration.getType() == DurationFieldType.millis()) {\n+                        continue;\n+                    } else {\n+                        // we don't know how to handle this field, so bail out\n+                        break;\n+                    }\n+                }\n             }\n+            // save the computed year\n+            saveField(DateTimeFieldType.year(), year);\n+            return computeMillis(resetFields, text);\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    \n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n     \n+    return millis;\n+}\n+    \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right\n      * choice since it always creates an internal copy of the array, even if it",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}