{
    "patch": "                // Detect early that algorithm is stuck, instead of waiting\n                // for the maximum number of iterations to be exceeded.\n                if (FastMath.abs(x - x1) <= atol && FastMath.abs(fx - f1) <= ftol) {\n                    throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);\n                }\n                // Detect if root finding stopped making progress.\n                if (FastMath.abs(f1) > 1E-15 && FastMath.abs(f1) >= FastMath.abs(f0)) {\n                    throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..943ff399c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,14 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                // Detect early that algorithm is stuck, instead of waiting\n+                // for the maximum number of iterations to be exceeded.\n+                if (FastMath.abs(x - x1) <= atol && FastMath.abs(fx - f1) <= ftol) {\n+                    throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);\n+                }\n+                // Detect if root finding stopped making progress.\n+                if (FastMath.abs(f1) > 1E-15 && FastMath.abs(f1) >= FastMath.abs(f0)) {\n+                    throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}