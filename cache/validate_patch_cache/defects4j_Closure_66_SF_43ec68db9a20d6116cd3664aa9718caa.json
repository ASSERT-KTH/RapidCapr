{
    "patch": "public static double getTypedPercent(JSONArray jsonArray) {\n    int totalObjects = 0, typedObjects = 0;\n    for (int i = 0; i < jsonArray.length(); i++) {\n        try {\n            JSONObject jsonObj = jsonArray.getJSONObject(i); \n            if (jsonObj.has(\"type\") && !jsonObj.getString(\"type\").isEmpty()) {\n                typedObjects++;\n            }\n            totalObjects++;\n        } catch (JSONException e) {\n            continue;\n        }\n    }\n    return totalObjects == 0 ? 0 : ((double)typedObjects / totalObjects) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..442df131 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONArray jsonArray) {\n+    int totalObjects = 0, typedObjects = 0;\n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        try {\n+            JSONObject jsonObj = jsonArray.getJSONObject(i); \n+            if (jsonObj.has(\"type\") && !jsonObj.getString(\"type\").isEmpty()) {\n+                typedObjects++;\n+            }\n+            totalObjects++;\n+        } catch (JSONException e) {\n+            continue;\n+        }\n+    }\n+    return totalObjects == 0 ? 0 : ((double)typedObjects / totalObjects) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}