{
    "patch": "// Remove unreferenced function arguments, if possible.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Notice that removing unreferenced function arguments breaks Function.prototype.length.\n  // In advanced mode, we consider \"length\" the equivalent of reflecting on the function's lexical source.\n  // In general, if the user is removing globals, we assume it is also okay to remove unused function arguments.\n  // For more context, see http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n\n  // If the function is a setter or a call site can be modified, don't remove any arguments.\n  boolean canRemoveUnusedArgs = !modifyCallSites || !callSiteOptimizer.canModifyCallers(function);\n  if (!canRemoveUnusedArgs) {\n    return;\n  }\n\n  // Strip unreferenced args off the end of the function declaration.\n  // Note: The \"arguments\" object is always considered referenced, regardless of whether it is actually used.\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (lastArg.matchesName(\"arguments\")) {\n        referenced.add(var);\n        break;\n    }\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..68c4025d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove unreferenced function arguments, if possible.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  // Notice that removing unreferenced function arguments breaks Function.prototype.length.\n+  // In advanced mode, we consider \"length\" the equivalent of reflecting on the function's lexical source.\n+  // In general, if the user is removing globals, we assume it is also okay to remove unused function arguments.\n+  // For more context, see http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+\n+  // If the function is a setter or a call site can be modified, don't remove any arguments.\n+  boolean canRemoveUnusedArgs = !modifyCallSites || !callSiteOptimizer.canModifyCallers(function);\n+  if (!canRemoveUnusedArgs) {\n+    return;\n+  }\n+\n+  // Strip unreferenced args off the end of the function declaration.\n+  // Note: The \"arguments\" object is always considered referenced, regardless of whether it is actually used.\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (lastArg.matchesName(\"arguments\")) {\n+        referenced.add(var);\n+        break;\n+    }\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}