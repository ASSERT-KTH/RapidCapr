{
    "patch": "private int nextInputPosition(int consumed, int pos) {\n    int res = pos + consumed;\n    if (res >= input.length()) {\n        return res;\n    }\n    char highSurrogate = input.charAt(res - 1);\n    if (Character.isHighSurrogate(highSurrogate)) {\n        if (res < input.length()) {\n            char lowSurrogate = input.charAt(res);\n            if (Character.isLowSurrogate(lowSurrogate)) {\n                res++;\n            }\n        }\n    }\n    return res;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ba987af5 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,22 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+private int nextInputPosition(int consumed, int pos) {\n+    int res = pos + consumed;\n+    if (res >= input.length()) {\n+        return res;\n+    }\n+    char highSurrogate = input.charAt(res - 1);\n+    if (Character.isHighSurrogate(highSurrogate)) {\n+        if (res < input.length()) {\n+            char lowSurrogate = input.charAt(res);\n+            if (Character.isLowSurrogate(lowSurrogate)) {\n+                res++;\n+            }\n+        }\n+    }\n+    return res;\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}