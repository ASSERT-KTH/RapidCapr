{
    "patch": "public static double getTypedPercent(JsonStructure json) {\n    double total = 0, typed = 0;\n    if (json.getValueType() == ValueType.ARRAY) {\n        for (JsonValue value : (JsonArray)json) {\n            total++;\n            if (value.getValueType() == ValueType.OBJECT) {\n                JsonObject obj = (JsonObject) value;\n                if (obj.containsKey(\"type\")) {\n                    String type = obj.getString(\"type\");\n                    if (!type.isEmpty()) {\n                        typed++;\n                    }\n                }\n            }\n        }\n    }\n    if (total == 0) {\n        return 0;\n    } else {\n        return (typed / total) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d288f6ed 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonStructure json) {\n+    double total = 0, typed = 0;\n+    if (json.getValueType() == ValueType.ARRAY) {\n+        for (JsonValue value : (JsonArray)json) {\n+            total++;\n+            if (value.getValueType() == ValueType.OBJECT) {\n+                JsonObject obj = (JsonObject) value;\n+                if (obj.containsKey(\"type\")) {\n+                    String type = obj.getString(\"type\");\n+                    if (!type.isEmpty()) {\n+                        typed++;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 0;\n+    } else {\n+        return (typed / total) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}