{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final double[] realEigenvalues = dec.getRealEigenvalues();\n        for (double eigenvalue : realEigenvalues) {\n            if (eigenvalue < -TOLERANCE) {\n                // If eigenvalue is negative, matrix is not positive semi-definite\n                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n            }\n        }\n        final RealMatrix sqrtMatrix = dec.getSquareRoot();\n        if (Double.isNaN(sqrtMatrix.getEntry(0, 0))) {\n            //! Check if matrix can be square rooted\n            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n        }\n        return sqrtMatrix;\n    } catch (OutOfMemoryError e) {\n        //! Catch out of memory error\n        System.gc();\n        long maxMemory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + maxMemory + \" MB)\");\n    } catch (Exception e) {\n        //! Catch any exception thrown by EigenDecomposition\n        throw new IllegalArgumentException(e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..584d80bc6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final double[] realEigenvalues = dec.getRealEigenvalues();\n+        for (double eigenvalue : realEigenvalues) {\n+            if (eigenvalue < -TOLERANCE) {\n+                // If eigenvalue is negative, matrix is not positive semi-definite\n+                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+            }\n+        }\n+        final RealMatrix sqrtMatrix = dec.getSquareRoot();\n+        if (Double.isNaN(sqrtMatrix.getEntry(0, 0))) {\n+            //! Check if matrix can be square rooted\n+            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+        }\n+        return sqrtMatrix;\n+    } catch (OutOfMemoryError e) {\n+        //! Catch out of memory error\n+        System.gc();\n+        long maxMemory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + maxMemory + \" MB)\");\n+    } catch (Exception e) {\n+        //! Catch any exception thrown by EigenDecomposition\n+        throw new IllegalArgumentException(e.getMessage());\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}