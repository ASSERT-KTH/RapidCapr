{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode rootNode = mapper.readTree(json);\n        JsonNode commitsNode = rootNode.path(\"commits\");\n        int total = commitsNode.size();\n        int typed = 0;\n        for (JsonNode commitNode : commitsNode) {\n            JsonNode messageNode = commitNode.path(\"message\");\n            if (messageNode.asText().matches(\".*\\\\bfix\\\\b.*|.*\\\\bfixed\\\\b.*\")) {\n                typed++;\n            }\n        }\n        if (total == 0) {\n            return 0;\n        }\n        double percentage = ((double) typed / total) * 100;\n        return percentage;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ccdad52c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode rootNode = mapper.readTree(json);\n+        JsonNode commitsNode = rootNode.path(\"commits\");\n+        int total = commitsNode.size();\n+        int typed = 0;\n+        for (JsonNode commitNode : commitsNode) {\n+            JsonNode messageNode = commitNode.path(\"message\");\n+            if (messageNode.asText().matches(\".*\\\\bfix\\\\b.*|.*\\\\bfixed\\\\b.*\")) {\n+                typed++;\n+            }\n+        }\n+        if (total == 0) {\n+            return 0;\n+        }\n+        double percentage = ((double) typed / total) * 100;\n+        return percentage;\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+        return 0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}