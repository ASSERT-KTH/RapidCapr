{
    "patch": "    if (isNoType() || isNoObjectType() || isNoResolvedType()) {\n      return false;\n    }\n    if (isReferenceType()) {\n      return isAssignableFrom(other);\n    }\n    if (isArrayType()) {\n      if (!other.isArrayType()) return false;\n      return getComponentType().isAssignableFrom(other.getComponentType());\n    }\n    if (isIntersectionType()) {\n      for (DexType intersectionType : asIntersectionType().getIntersectionType()) {\n        if (!intersectionType.isAssignableFrom(other)) return false;\n      }\n      return true;\n    }\n    if (isObjectArray()) {\n      if (!other.isObjectArray()) return false;\n      return getBaseType().isAssignableFrom(other.getBaseType());\n    }\n    if (isPrimitive()) {\n      return isSamePrimitiveType(other);\n    }\n    if(isVoidType() && other.isVoidType()) {\n      return true;\n    }\n    if (isTypeVariable()) {\n      TypeVariable typeVariable = asTypeVariable();\n      if (other.isTypeVariable()) {\n        return typeVariable == other.asTypeVariable();\n      }\n      // A type that is a subtype of an interface may not be a subtype of some of the interface's\n      // type arguments.\n      DexType upperBound = typeVariable.getUpperBound();\n      return upperBound.isAssignableFrom(other);\n    }\n\n    // Won't compile without this case but not currently reached by tests?\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..69b8bdaa 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -160,7 +160,45 @@ public abstract class JSType implements Serializable {\n   }\n \n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+    if (isNoType() || isNoObjectType() || isNoResolvedType()) {\n+      return false;\n+    }\n+    if (isReferenceType()) {\n+      return isAssignableFrom(other);\n+    }\n+    if (isArrayType()) {\n+      if (!other.isArrayType()) return false;\n+      return getComponentType().isAssignableFrom(other.getComponentType());\n+    }\n+    if (isIntersectionType()) {\n+      for (DexType intersectionType : asIntersectionType().getIntersectionType()) {\n+        if (!intersectionType.isAssignableFrom(other)) return false;\n+      }\n+      return true;\n+    }\n+    if (isObjectArray()) {\n+      if (!other.isObjectArray()) return false;\n+      return getBaseType().isAssignableFrom(other.getBaseType());\n+    }\n+    if (isPrimitive()) {\n+      return isSamePrimitiveType(other);\n+    }\n+    if(isVoidType() && other.isVoidType()) {\n+      return true;\n+    }\n+    if (isTypeVariable()) {\n+      TypeVariable typeVariable = asTypeVariable();\n+      if (other.isTypeVariable()) {\n+        return typeVariable == other.asTypeVariable();\n+      }\n+      // A type that is a subtype of an interface may not be a subtype of some of the interface's\n+      // type arguments.\n+      DexType upperBound = typeVariable.getUpperBound();\n+      return upperBound.isAssignableFrom(other);\n+    }\n+\n+    // Won't compile without this case but not currently reached by tests?\n+    return false;\n   }\n \n   public boolean isNumberObjectType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}