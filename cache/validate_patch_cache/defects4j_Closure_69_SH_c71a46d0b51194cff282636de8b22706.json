{
    "patch": "JSType thisType = functionType.getTypeOfThis();\nif (thisType != null && !NodeUtil.isGet(n.getParent())) {\n  boolean isCallInNew = NodeUtil.isCallNew(n.getParent());\n  if (!functionType.isConstructor() || !isCallInNew) {\n    report(t, n, EXPECTED_THIS_TYPE);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c12b31c8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+JSType thisType = functionType.getTypeOfThis();\n+if (thisType != null && !NodeUtil.isGet(n.getParent())) {\n+  boolean isCallInNew = NodeUtil.isCallNew(n.getParent());\n+  if (!functionType.isConstructor() || !isCallInNew) {\n+    report(t, n, EXPECTED_THIS_TYPE);\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}