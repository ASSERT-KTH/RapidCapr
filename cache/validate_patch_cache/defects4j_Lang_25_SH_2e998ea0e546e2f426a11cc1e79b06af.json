{
    "patch": "public static String unescapeJava(String input) {\n    StringBuffer sb = new StringBuffer(input.length());\n    parseUnicodeEscape(sb, input);\n    return sb.toString();\n}\n\nprivate static void parseUnicodeEscape(StringBuffer accum, String input) {\n    boolean hadSlash = false;\n    boolean inUnicode = false;\n    int unicode = 0;\n    for (int i = 0; i < input.length(); ++i) {\n        char ch = input.charAt(i);\n\n        if (inUnicode) {\n            unicode <<= 4;\n            int hexValue = Character.digit(ch, 16);\n            if (hexValue >= 0) {\n                unicode += hexValue;\n            } else {\n                throw new IllegalArgumentException(\"Malformed Unicode escape\");\n            }\n            if (--unicodeCounter == 0) {\n                inUnicode = false;\n                accum.append((char) unicode);\n            }\n        } else {\n            if (hadSlash) {\n                hadSlash = false;\n                switch (ch) {\n                    case '\\\\':\n                        accum.append('\\\\');\n                        break;\n                    case '\\'':\n                        accum.append('\\'');\n                        break;\n                    case '\\\"':\n                        accum.append('\"');\n                        break;\n                    case 'r':\n                        accum.append('\\r');\n                        break;\n                    case 'f':\n                        accum.append('\\f');\n                        break;\n                    case 't':\n                        accum.append('\\t');\n                        break;\n                    case 'n':\n                        accum.append('\\n');\n                        break;\n                    case 'b':\n                        accum.append('\\b');\n                        break;\n                    case 'u':\n                        unicodeCounter = 4;\n                        inUnicode = true;\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Illegal escape character\");\n                }\n            } else if (ch == '\\\\') hadSlash = true;\n            else accum.append(ch);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}