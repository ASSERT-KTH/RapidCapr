{
    "patch": "} else if (value.isFunction()\n          && value.hasOneChild()\n          && value.getFirstChild().isName()) {\n        // Don't inline a function if it references itself\n        String name = value.getFirstChild().getString();\n        if (name.equals(declaration.getIdentifier())) {\n          return false;\n        }\n        // Don't inline a function if it is defined below the usage\n        if (!ScopeUtils.statementInsideScope(initialization, value)) {\n          return false;\n        }\n        // Don't inline function if it is not called exactly once\n        List<Node> calls = findAllCalls(value);\n        if (calls.size() != 1) {\n          return false;\n        }\n        Node callNode = calls.get(0);\n        CodingConvention convention = compiler.getCodingConvention();\n        // Bug 2388531: Don't inline subclass definitions into class defining\n        // calls as this confused class removing logic.\n        SubclassRelationship relationship =\n            convention.getClassesDefinedByCall(callNode);\n        if (relationship != null) {\n          return false;\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..eab042d2 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,33 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+} else if (value.isFunction()\n+          && value.hasOneChild()\n+          && value.getFirstChild().isName()) {\n+        // Don't inline a function if it references itself\n+        String name = value.getFirstChild().getString();\n+        if (name.equals(declaration.getIdentifier())) {\n+          return false;\n+        }\n+        // Don't inline a function if it is defined below the usage\n+        if (!ScopeUtils.statementInsideScope(initialization, value)) {\n+          return false;\n+        }\n+        // Don't inline function if it is not called exactly once\n+        List<Node> calls = findAllCalls(value);\n+        if (calls.size() != 1) {\n+          return false;\n+        }\n+        Node callNode = calls.get(0);\n+        CodingConvention convention = compiler.getCodingConvention();\n+        // Bug 2388531: Don't inline subclass definitions into class defining\n+        // calls as this confused class removing logic.\n+        SubclassRelationship relationship =\n+            convention.getClassesDefinedByCall(callNode);\n+        if (relationship != null) {\n+          return false;\n+        }\n+        return true;\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}