{
    "patch": "    Node function = fnScope.getRootNode();\n    \n    // add a set of vars to track if an argument is referenced\n    Set<String> referencedArgs = new HashSet<>();\n\n    // iterate through all references in the function body\n    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node p) {\n        if (n.isName()) {\n          String name = n.getString();\n          Var var = fnScope.getVar(name);\n          boolean isArgument = n.getParent() == argList;\n          if (isArgument) {\n            // mark the argument as referenced\n            referencedArgs.add(name);\n          } else if (var != null && var.isParam()) {\n            // mark the parameter as referenced\n            referencedArgs.add(name);\n          }\n        }\n      }\n    });\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referencedArgs.contains(lastArg.getString()) && !var.isArguments()) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          // check if we need to remove default value too\n          Node defaultValue = lastArg.getFirstChild();\n          if (defaultValue != null) {\n            argList.removeChild(defaultValue);\n            compiler.reportCodeChange();\n          }\n        } else {\n          break;\n        }\n        lastArg = argList.getLastChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6a5e1cd8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,61 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    \n+    // add a set of vars to track if an argument is referenced\n+    Set<String> referencedArgs = new HashSet<>();\n+\n+    // iterate through all references in the function body\n+    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node p) {\n+        if (n.isName()) {\n+          String name = n.getString();\n+          Var var = fnScope.getVar(name);\n+          boolean isArgument = n.getParent() == argList;\n+          if (isArgument) {\n+            // mark the argument as referenced\n+            referencedArgs.add(name);\n+          } else if (var != null && var.isParam()) {\n+            // mark the parameter as referenced\n+            referencedArgs.add(name);\n+          }\n+        }\n+      }\n+    });\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referencedArgs.contains(lastArg.getString()) && !var.isArguments()) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          // check if we need to remove default value too\n+          Node defaultValue = lastArg.getFirstChild();\n+          if (defaultValue != null) {\n+            argList.removeChild(defaultValue);\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          break;\n+        }\n+        lastArg = argList.getLastChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}