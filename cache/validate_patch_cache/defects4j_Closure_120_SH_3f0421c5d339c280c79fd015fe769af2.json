{
    "patch": "          if (block.isLoop) {\n            return false;\n          }\n        }\n      }\n\n      int numAssignments = 0;\n      for (Reference reference : references) {\n        if (reference.isDeclaration() && reference.isInitializingDeclaration()) {\n          numAssignments++;\n        } else if (reference.isAssignment() && reference.isInitializingAssignment()) {\n          // Only count assignments outside of loops.\n          for (BasicBlock block = reference.getBasicBlock();\n              block != null; block = block.getParent()) {\n            if (block.isFunction) {\n              numAssignments++;\n              break;\n            } else if (block.isLoop) {\n              break;\n            }\n          }\n        }\n      }\n\n      return numAssignments == 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..cc2c3663 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,31 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          if (block.isLoop) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      int numAssignments = 0;\n+      for (Reference reference : references) {\n+        if (reference.isDeclaration() && reference.isInitializingDeclaration()) {\n+          numAssignments++;\n+        } else if (reference.isAssignment() && reference.isInitializingAssignment()) {\n+          // Only count assignments outside of loops.\n+          for (BasicBlock block = reference.getBasicBlock();\n+              block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+              numAssignments++;\n+              break;\n+            } else if (block.isLoop) {\n+              break;\n+            }\n+          }\n+        }\n+      }\n+\n+      return numAssignments == 1;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}