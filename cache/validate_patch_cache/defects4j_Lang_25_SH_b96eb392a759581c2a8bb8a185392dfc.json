{
    "patch": "private static String decode(String source) {\n    int length = source.length();\n    StringBuilder sb = new StringBuilder(length);\n    for (int i = 0; i < length; ) {\n        char c = source.charAt(i);\n        switch (c) {\n            case '+':\n                sb.append(' ');\n                i++;\n                break;\n            case '%':\n                try {\n                    sb.append((char) Integer.parseInt(source.substring(i + 1, i + 3), 16));\n                    i += 3;\n                } catch (NumberFormatException nfe) {\n                    throw new IllegalArgumentException(\n                            \"Unable to parse unicode value: \" + source.substring(i + 1, i + 3), nfe);\n                } catch (StringIndexOutOfBoundsException e) {\n                    String rest = source.substring(i);\n                    if (rest.length() == 2) {\n                        sb.append((char) Integer.parseInt(rest, 16));\n                        i += 2;\n                    } else {\n                        throw new IllegalArgumentException(\n                                \"Unable to parse unicode value: \" + rest, e);\n                    }\n                }\n                break;\n            default:\n                sb.append(c);\n                i++;\n                break;\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}