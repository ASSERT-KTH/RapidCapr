{
    "patch": "    // Remove any function parameters that are not declared as variables\n>>> [ INFILL ] <<<\n    for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n      String argName = child.getString();\n      if (fnScope.isDeclared(argName, false)) {\n        continue;\n      }\n      boolean hasRestParam = NodeUtil.isRestArg(child);\n      if (!hasRestParam && NodeUtil.isDefaultValue(child)) {\n        child = child.getFirstChild();\n      }\n      NodeUtil.deleteNode(child, compiler);\n      if (modifyCallers) {\n        callSiteOptimizer.removeArguments(fnScope, argName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3532284e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Remove any function parameters that are not declared as variables\n+>>> [ INFILL ] <<<\n+    for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n+      String argName = child.getString();\n+      if (fnScope.isDeclared(argName, false)) {\n+        continue;\n+      }\n+      boolean hasRestParam = NodeUtil.isRestArg(child);\n+      if (!hasRestParam && NodeUtil.isDefaultValue(child)) {\n+        child = child.getFirstChild();\n+      }\n+      NodeUtil.deleteNode(child, compiler);\n+      if (modifyCallers) {\n+        callSiteOptimizer.removeArguments(fnScope, argName);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}