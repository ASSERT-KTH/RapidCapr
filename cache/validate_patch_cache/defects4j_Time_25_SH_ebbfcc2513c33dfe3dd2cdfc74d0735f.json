{
    "patch": "                // if both offsets indicate a DST start...\n                if (offsetAdjusted > offsetLocal && instantLocal < nextTransition(instantAdjusted)) {\n                    // ... then the local date-time is in a gap and should be moved forward\n                    return offsetAdjusted;\n                } else if (offsetAdjusted < offsetLocal && instantLocal >= nextTransition(instantAdjusted)) {\n                    // ... then the local date-time is in an overlap and should be moved back\n                    return offsetAdjusted;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c75fdff4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,14 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if both offsets indicate a DST start...\n+                if (offsetAdjusted > offsetLocal && instantLocal < nextTransition(instantAdjusted)) {\n+                    // ... then the local date-time is in a gap and should be moved forward\n+                    return offsetAdjusted;\n+                } else if (offsetAdjusted < offsetLocal && instantLocal >= nextTransition(instantAdjusted)) {\n+                    // ... then the local date-time is in an overlap and should be moved back\n+                    return offsetAdjusted;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}