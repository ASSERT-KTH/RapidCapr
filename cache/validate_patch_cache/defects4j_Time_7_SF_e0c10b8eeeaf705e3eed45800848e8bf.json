{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    if (position > text.length()) {\n        return ~position;\n    }\n    int offset = 0;\n    if (iOffsetParser == null) {\n        // there was no offset parser so handle this ourselves\n        offset = bucket.getZone().getOffset(bucket.getMillis());\n    }\n    // parse the string\n    ParsingPosition ppos = new ParsingPosition(position);\n    int newPos = (iOffsetParser != null ? iOffsetParser.parseInto(bucket, text, ppos) : position);\n    if (newPos >= 0) {\n        if (ppos.getErrorIndex() == newPos) {\n            return ~newPos;\n        }\n        position = newPos;\n        if (iPrintZeroSetting == PrintZeroSetting.ALWAYS ||\n            (bucket.getPivotYear() <= 0 && iPrintZeroSetting == PrintZeroSetting.EXCEEDS_PAD)) {\n            while (true) {\n                newPos = iFieldValueParser.parseInto(bucket, text, position);\n                if (newPos < 0) {\n                    if (newPos != ~position) {\n                        return ~newPos;\n                    }\n                    if (ppos.getErrorIndex() < 0 && offset != 0) {\n                        break;\n                    }\n                    if (bucket.getFraction() < 1) {\n                        break;\n                    }\n                } else {\n                    position = newPos;\n                    if (ppos.getErrorIndex() >= 0) {\n                        break;\n                    }\n                }\n                if (position >= text.length()) {\n                    break;\n                }\n                if (iSeparatorParser == null) {\n                    // separator is required between fields\n                    return ~position;\n                }\n                newPos = iSeparatorParser.parseInto(null, text, position);\n                if (newPos < 0) {\n                    return ~newPos;\n                }\n                position = newPos;\n            }\n        } else {\n            int lastPPosErrorIndex = ppos.getErrorIndex();\n            if (bucket.getPivotYear() < 0 && iPrintZeroSetting == PrintZeroSetting.NOT_NEGATIVE) {\n                if (iSignedYearParser != null) {\n                    int nullablePPosErrorIndex = ppos.getErrorIndex();\n                    newPos = iSignedYearParser.parseInto(bucket, text, position);\n                    if (newPos >= 0 && (ppos.getErrorIndex() >= 0 || bucket.getPivotYear() >= 0)) {\n                        return position;\n                    }\n                    ppos.setErrorIndex(nullablePPosErrorIndex);  // restore to error, or -1 below\n                }\n                return ~(lastPPosErrorIndex >= 0 ? lastPPosErrorIndex : position);\n            }\n            while (true) {\n                newPos = iFieldValueParser.parseInto(bucket, text, position);\n                if (newPos < 0) {\n                    if (newPos != ~position) {\n                        return ~newPos;\n                    }\n                    if (ppos.getErrorIndex() >= 0 && bucket.getFraction() == 0) {\n                        break;\n                    }\n                } else {\n                    position = newPos;\n                    if (ppos.getErrorIndex() >= 0) {\n                        break;\n                    }\n                }\n                if (position >= text.length()) {\n                    lastPPosErrorIndex = ppos.getErrorIndex();\n                    break;\n                }\n                if (iSeparatorParser == null) {\n                    // separator is required between fields\n                    lastPPosErrorIndex = ppos.getErrorIndex();\n                    break;\n                }\n                newPos = iSeparatorParser.parseInto(null, text, position);\n                if (newPos < 0) {\n                    lastPPosErrorIndex = ppos.getErrorIndex();\n                    break;\n                }\n                position = newPos;\n            }\n            if (lastPPosErrorIndex >= 0) {\n                return ~lastPPosErrorIndex;\n            }\n        }\n        if (offset != 0) {\n            bucket.setOffset(offset);\n        }\n    }\n    return position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..f6d645dc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,110 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    if (position > text.length()) {\n+        return ~position;\n+    }\n+    int offset = 0;\n+    if (iOffsetParser == null) {\n+        // there was no offset parser so handle this ourselves\n+        offset = bucket.getZone().getOffset(bucket.getMillis());\n+    }\n+    // parse the string\n+    ParsingPosition ppos = new ParsingPosition(position);\n+    int newPos = (iOffsetParser != null ? iOffsetParser.parseInto(bucket, text, ppos) : position);\n+    if (newPos >= 0) {\n+        if (ppos.getErrorIndex() == newPos) {\n+            return ~newPos;\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        position = newPos;\n+        if (iPrintZeroSetting == PrintZeroSetting.ALWAYS ||\n+            (bucket.getPivotYear() <= 0 && iPrintZeroSetting == PrintZeroSetting.EXCEEDS_PAD)) {\n+            while (true) {\n+                newPos = iFieldValueParser.parseInto(bucket, text, position);\n+                if (newPos < 0) {\n+                    if (newPos != ~position) {\n+                        return ~newPos;\n+                    }\n+                    if (ppos.getErrorIndex() < 0 && offset != 0) {\n+                        break;\n+                    }\n+                    if (bucket.getFraction() < 1) {\n+                        break;\n+                    }\n+                } else {\n+                    position = newPos;\n+                    if (ppos.getErrorIndex() >= 0) {\n+                        break;\n+                    }\n+                }\n+                if (position >= text.length()) {\n+                    break;\n+                }\n+                if (iSeparatorParser == null) {\n+                    // separator is required between fields\n+                    return ~position;\n+                }\n+                newPos = iSeparatorParser.parseInto(null, text, position);\n+                if (newPos < 0) {\n+                    return ~newPos;\n+                }\n+                position = newPos;\n+            }\n+        } else {\n+            int lastPPosErrorIndex = ppos.getErrorIndex();\n+            if (bucket.getPivotYear() < 0 && iPrintZeroSetting == PrintZeroSetting.NOT_NEGATIVE) {\n+                if (iSignedYearParser != null) {\n+                    int nullablePPosErrorIndex = ppos.getErrorIndex();\n+                    newPos = iSignedYearParser.parseInto(bucket, text, position);\n+                    if (newPos >= 0 && (ppos.getErrorIndex() >= 0 || bucket.getPivotYear() >= 0)) {\n+                        return position;\n+                    }\n+                    ppos.setErrorIndex(nullablePPosErrorIndex);  // restore to error, or -1 below\n+                }\n+                return ~(lastPPosErrorIndex >= 0 ? lastPPosErrorIndex : position);\n+            }\n+            while (true) {\n+                newPos = iFieldValueParser.parseInto(bucket, text, position);\n+                if (newPos < 0) {\n+                    if (newPos != ~position) {\n+                        return ~newPos;\n+                    }\n+                    if (ppos.getErrorIndex() >= 0 && bucket.getFraction() == 0) {\n+                        break;\n+                    }\n+                } else {\n+                    position = newPos;\n+                    if (ppos.getErrorIndex() >= 0) {\n+                        break;\n+                    }\n+                }\n+                if (position >= text.length()) {\n+                    lastPPosErrorIndex = ppos.getErrorIndex();\n+                    break;\n+                }\n+                if (iSeparatorParser == null) {\n+                    // separator is required between fields\n+                    lastPPosErrorIndex = ppos.getErrorIndex();\n+                    break;\n+                }\n+                newPos = iSeparatorParser.parseInto(null, text, position);\n+                if (newPos < 0) {\n+                    lastPPosErrorIndex = ppos.getErrorIndex();\n+                    break;\n+                }\n+                position = newPos;\n+            }\n+            if (lastPPosErrorIndex >= 0) {\n+                return ~lastPPosErrorIndex;\n+            }\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (offset != 0) {\n+            bucket.setOffset(offset);\n         }\n-        return newPos;\n     }\n+    return position;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}