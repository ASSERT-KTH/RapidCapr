{
    "patch": "...\nif (name == null) {\n  name = new Name();\n  name.setIdentifier(\"\");\n  isUnnamedFunction = true;\n  newName = transform(name);\n  // if \"function\" keyword is on a different line than \"(\"\n  if (functionNode.getFunctionType().equals(FunctionNode.FUNCTION_EXPRESSION)) {\n      newName.setLineno(functionNode.getLineno());\n      int orgEndLineno = functionNode.getBody().getLineno()+1;\n      newName.setLength(orgEndLineOffset(newName.getLineno(), orgEndLineno));\n  }\n}\n...",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..892764ee 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,20 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+...\n+if (name == null) {\n+  name = new Name();\n+  name.setIdentifier(\"\");\n+  isUnnamedFunction = true;\n+  newName = transform(name);\n+  // if \"function\" keyword is on a different line than \"(\"\n+  if (functionNode.getFunctionType().equals(FunctionNode.FUNCTION_EXPRESSION)) {\n+      newName.setLineno(functionNode.getLineno());\n+      int orgEndLineno = functionNode.getBody().getLineno()+1;\n+      newName.setLength(orgEndLineOffset(newName.getLineno(), orgEndLineno));\n+  }\n+}\n+...\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}