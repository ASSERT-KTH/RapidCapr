{
    "patch": "public static String printInOperatorInForLoop(boolean c, Object[] d) {\n   Context lhsContext = Context.OTHER;\n   boolean[] results = new boolean[d.length];\n   String expected = \"for(a=c?0:[\";\n   for(int i = 0; i < d.length; i++) {\n       try {\n           lhsContext.getSafe(new InOperator(lhsContext, d[i], Boolean.TRUE));\n           results[i] = true;\n       } catch(Error e) {\n           results[i] = false;\n       }\n   }\n   boolean breakLoop = results[0];\n   // Check if all results are same\n   for(int i = 1; i < results.length; i++) {\n       if(results[i] != breakLoop) {\n           breakLoop = !c;\n           break;\n       }\n   }\n   expected += breakLoop ? \"0 in d\" : \"1 in d\";       \n   expected += c ? \"]++;)foo()\" : \"];)foo()\";\n   return expected;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}