{
    "patch": "          // We only care about one assignment on function level. Variable\n          // shadowing ensures that there is no mixing with outer scope.\n          return getOneAndOnlyAssignment() != null && !getOneAndOnlyAssignment().getBasicBlock().isLoop;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e7fb8623 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,9 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // We only care about one assignment on function level. Variable\n+          // shadowing ensures that there is no mixing with outer scope.\n+          return getOneAndOnlyAssignment() != null && !getOneAndOnlyAssignment().getBasicBlock().isLoop;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}