{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        Object[] rawArguments = invocation.getRawArguments();\n        int argIndex = 0;\n        for (int i = 0; i < matchers.size(); i++) {\n            Matcher m = matchers.get(i);\n            if (m instanceof CapturesArguments) {\n                if (argIndex >= rawArguments.length) {\n                    break;\n                }\n                if (m instanceof VarargMatcher) {\n                    int varArgsIndex = rawArguments.length - m.getExpectedArgumentTypes().length + 1;\n                    int varArgCount = (rawArguments.length - varArgsIndex);\n                    if (varArgCount > 0) {\n                        Object[] varArgs = new Object[varArgCount];\n                        for (int j = 0; j < varArgCount; j++) {\n                            varArgs[j] = rawArguments[varArgsIndex + j];\n                        }\n                        ((CapturesArguments) m).captureFrom(varArgs);\n                        argIndex += varArgCount;\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(rawArguments[argIndex]);\n                    argIndex++;\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5db20a46f 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,33 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        Object[] rawArguments = invocation.getRawArguments();\n+        int argIndex = 0;\n+        for (int i = 0; i < matchers.size(); i++) {\n+            Matcher m = matchers.get(i);\n+            if (m instanceof CapturesArguments) {\n+                if (argIndex >= rawArguments.length) {\n+                    break;\n+                }\n+                if (m instanceof VarargMatcher) {\n+                    int varArgsIndex = rawArguments.length - m.getExpectedArgumentTypes().length + 1;\n+                    int varArgCount = (rawArguments.length - varArgsIndex);\n+                    if (varArgCount > 0) {\n+                        Object[] varArgs = new Object[varArgCount];\n+                        for (int j = 0; j < varArgCount; j++) {\n+                            varArgs[j] = rawArguments[varArgsIndex + j];\n+                        }\n+                        ((CapturesArguments) m).captureFrom(varArgs);\n+                        argIndex += varArgCount;\n+                    }\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(rawArguments[argIndex]);\n+                    argIndex++;\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}