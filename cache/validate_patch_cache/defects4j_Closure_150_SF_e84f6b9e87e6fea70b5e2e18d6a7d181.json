{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n      return;\n    }\n    \n    if (n.isFunction() && !NodeUtil.isFunctionExpression(n)) {\n      defineDeclaredFunction(n, parent);\n    } else if (n.isName() && parent != null) {\n      int parentType = parent.getType();\n      if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n        defineVar(n, parent);\n      } else if (parentType == Token.ASSIGN) {\n        if (n == parent.getFirstChild()) {\n          defineVar(n, parent.getParent());\n        } else {\n          attachLiteralTypes(n);\n        }\n      } else if (parentType == Token.FUNCTION) {\n        n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n      } else if (parentType != Token.LABEL) {\n        attachLiteralTypes(n);\n      }\n    } else if (n.isVar()) {\n      defineVar(n, parent);\n    } else if (n.isCatch()) {\n      defineCatch(n, parent);\n    } else if (n.isParamList() && parent != null) {\n      int parentType = parent.getType();\n      if (parentType == Token.CALL || (parentType == Token.NEW && parent.getParent().isAwait())) {\n        handleFunctionInputs(parent);\n      } else if (parentType == Token.FUNCTION && !NodeUtil.isFunctionExpression(parent)) {\n        handleFunctionInputs(parent);\n      } else if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n        attachLiteralTypes(n);\n      }\n    } else {\n      attachLiteralTypes(n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..247dbc8c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,46 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+      return;\n+    }\n+    \n+    if (n.isFunction() && !NodeUtil.isFunctionExpression(n)) {\n+      defineDeclaredFunction(n, parent);\n+    } else if (n.isName() && parent != null) {\n+      int parentType = parent.getType();\n+      if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n+        defineVar(n, parent);\n+      } else if (parentType == Token.ASSIGN) {\n+        if (n == parent.getFirstChild()) {\n+          defineVar(n, parent.getParent());\n+        } else {\n+          attachLiteralTypes(n);\n+        }\n+      } else if (parentType == Token.FUNCTION) {\n+        n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+      } else if (parentType != Token.LABEL) {\n+        attachLiteralTypes(n);\n+      }\n+    } else if (n.isVar()) {\n+      defineVar(n, parent);\n+    } else if (n.isCatch()) {\n+      defineCatch(n, parent);\n+    } else if (n.isParamList() && parent != null) {\n+      int parentType = parent.getType();\n+      if (parentType == Token.CALL || (parentType == Token.NEW && parent.getParent().isAwait())) {\n         handleFunctionInputs(parent);\n-        return;\n+      } else if (parentType == Token.FUNCTION && !NodeUtil.isFunctionExpression(parent)) {\n+        handleFunctionInputs(parent);\n+      } else if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n+        attachLiteralTypes(n);\n       }\n-\n+    } else {\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n     }\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}