{
    "patch": "    boolean hasAssignment = false;\n    Reference firstAssignment = null;\n    int size = references.size();\n\n    for (int i = 1; i < size; i++) {\n      if (references.get(i).isDeclaration()) {\n        // Ignore declarations after first assignment.\n        break;\n      }\n      if (references.get(i).isAssignmentTo()) {\n        if (hasAssignment) {\n          // Multiple assignments.\n          return null;\n        }\n        firstAssignment = references.get(i);\n        hasAssignment = true;\n      }\n    }\n\n    if (!hasAssignment) {\n      return null;\n    }\n    Reference prevWrite = firstAssignment;\n    for (int i = 1; i < size; i++) {\n      Reference reference = references.get(i);\n      if (prevWrite.getNameNode() == reference.getNameNode()) {\n        if (reference.isDeclaration()) {\n          break;\n        } else if (!reference.isAssignmentTo()) {\n          return null;\n        }\n        prevWrite = reference;\n      }\n    }\n\n    return prevWrite;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..31df35e3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,42 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    boolean hasAssignment = false;\n+    Reference firstAssignment = null;\n+    int size = references.size();\n+\n+    for (int i = 1; i < size; i++) {\n+      if (references.get(i).isDeclaration()) {\n+        // Ignore declarations after first assignment.\n+        break;\n+      }\n+      if (references.get(i).isAssignmentTo()) {\n+        if (hasAssignment) {\n+          // Multiple assignments.\n+          return null;\n+        }\n+        firstAssignment = references.get(i);\n+        hasAssignment = true;\n+      }\n+    }\n+\n+    if (!hasAssignment) {\n+      return null;\n+    }\n+    Reference prevWrite = firstAssignment;\n+    for (int i = 1; i < size; i++) {\n+      Reference reference = references.get(i);\n+      if (prevWrite.getNameNode() == reference.getNameNode()) {\n+        if (reference.isDeclaration()) {\n+          break;\n+        } else if (!reference.isAssignmentTo()) {\n+          return null;\n+        }\n+        prevWrite = reference;\n+      }\n+    }\n+\n+    return prevWrite;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}