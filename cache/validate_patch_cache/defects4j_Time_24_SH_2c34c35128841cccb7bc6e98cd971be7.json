{
    "patch": "            if (savedFields[i].iValue == savedFields[i].iField.getMinimumValue() &&\n                (iSavedFieldsCount == 1 || iSavedFields[iSavedFieldsCount - 2].iField.getType() != DateTimeFieldType.weekyear())) {\n                // day zero of first week must be in first year\n                DateTimeFieldType yearField = DateTimeFieldType.weekyear();\n                if (savedFields[0].iField.getType() == yearField) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                } else {\n                    saveField(yearField, iChrono.weekyear().add(iDefaultYear, -1));\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..62bafcea 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iValue == savedFields[i].iField.getMinimumValue() &&\n+                (iSavedFieldsCount == 1 || iSavedFields[iSavedFieldsCount - 2].iField.getType() != DateTimeFieldType.weekyear())) {\n+                // day zero of first week must be in first year\n+                DateTimeFieldType yearField = DateTimeFieldType.weekyear();\n+                if (savedFields[0].iField.getType() == yearField) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                } else {\n+                    saveField(yearField, iChrono.weekyear().add(iDefaultYear, -1));\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}