{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    // Check if input index is within range\n    if (index < 0 || index >= seqEnd) {\n        return 0;\n    }\n\n    // Check if input starts with \"&#\" or \"&#x\"\n    if (seqEnd - index < 3 || input.charAt(index) != '&' || input.charAt(index + 1) != '#' ||\n            (input.charAt(index + 2) != 'x' && input.charAt(index + 2) != 'X' &&\n             !Character.isDigit(input.charAt(index + 2)))) {\n        return 0;\n    }\n\n    // Determine the end of the sequence\n    int end = index + 3;\n    while (end < seqEnd && (Character.isDigit(input.charAt(end)) ||\n                            (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n                            (input.charAt(end) >= 'A' && input.charAt(end) <= 'F'))) {\n        end++;\n    }\n    if (end == seqEnd || input.charAt(end) != ';') {\n        return 0; // Malformed entity, missing semicolon\n    }\n\n    // Parse the value of the entity\n    String entityValue = input.subSequence(index + 2, end).toString();\n    int codePoint = -1;\n    try {\n        if (entityValue.charAt(0) == 'x' || entityValue.charAt(0) == 'X') {\n            codePoint = Integer.parseInt(entityValue.substring(1), 16);\n        } else {\n            codePoint = Integer.parseInt(entityValue);\n        }\n    } catch (NumberFormatException e) {\n        return 0; // Invalid entity value, parse failure\n    }\n\n    // Write the entity to the output\n    if (codePoint < 0 || codePoint > Character.MAX_CODE_POINT ||\n            (codePoint >= Character.MIN_SURROGATE && codePoint <= Character.MAX_SURROGATE)) {\n        // Invalid character, write as escape sequence\n        out.write(\"&#\");\n        if (entityValue.charAt(0) == 'x' || entityValue.charAt(0) == 'X') {\n            out.write('x');\n        }\n        out.write(entityValue);\n        out.write(';');\n    } else if (codePoint >= 0 && codePoint <= 0x7f) {\n        // ASCII character, write as is\n        out.write(codePoint);\n    } else {\n        // Non-ASCII character, use character encoding\n        char[] chars = Character.toChars(codePoint);\n        out.write(chars);\n    }\n\n    // Return length of the entity that was processed\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..8a392819 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,65 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    // Check if input index is within range\n+    if (index < 0 || index >= seqEnd) {\n+        return 0;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+    // Check if input starts with \"&#\" or \"&#x\"\n+    if (seqEnd - index < 3 || input.charAt(index) != '&' || input.charAt(index + 1) != '#' ||\n+            (input.charAt(index + 2) != 'x' && input.charAt(index + 2) != 'X' &&\n+             !Character.isDigit(input.charAt(index + 2)))) {\n+        return 0;\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    // Determine the end of the sequence\n+    int end = index + 3;\n+    while (end < seqEnd && (Character.isDigit(input.charAt(end)) ||\n+                            (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n+                            (input.charAt(end) >= 'A' && input.charAt(end) <= 'F'))) {\n+        end++;\n+    }\n+    if (end == seqEnd || input.charAt(end) != ';') {\n+        return 0; // Malformed entity, missing semicolon\n+    }\n \n+    // Parse the value of the entity\n+    String entityValue = input.subSequence(index + 2, end).toString();\n+    int codePoint = -1;\n+    try {\n+        if (entityValue.charAt(0) == 'x' || entityValue.charAt(0) == 'X') {\n+            codePoint = Integer.parseInt(entityValue.substring(1), 16);\n+        } else {\n+            codePoint = Integer.parseInt(entityValue);\n+        }\n+    } catch (NumberFormatException e) {\n+        return 0; // Invalid entity value, parse failure\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+    // Write the entity to the output\n+    if (codePoint < 0 || codePoint > Character.MAX_CODE_POINT ||\n+            (codePoint >= Character.MIN_SURROGATE && codePoint <= Character.MAX_SURROGATE)) {\n+        // Invalid character, write as escape sequence\n+        out.write(\"&#\");\n+        if (entityValue.charAt(0) == 'x' || entityValue.charAt(0) == 'X') {\n+            out.write('x');\n         }\n-        return 0;\n+        out.write(entityValue);\n+        out.write(';');\n+    } else if (codePoint >= 0 && codePoint <= 0x7f) {\n+        // ASCII character, write as is\n+        out.write(codePoint);\n+    } else {\n+        // Non-ASCII character, use character encoding\n+        char[] chars = Character.toChars(codePoint);\n+        out.write(chars);\n     }\n+\n+    // Return length of the entity that was processed\n+    return end - index + 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 55295 expected:<\ud7ff[?]> but was:<\ud7ff[&#xxd800;]>",
    "test_result": "FAIL"
}