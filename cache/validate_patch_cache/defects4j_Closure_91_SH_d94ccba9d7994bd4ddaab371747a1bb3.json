{
    "patch": "      if (parent != null && NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild()) &&\n          parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n          return true;\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                (lhs.getLastChild().getString().equals(\"prototype\") || lhs.getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                (llhs.getLastChild().getString().equals(\"prototype\") || llhs.getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n              return false;\n            }\n          }\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && NodeUtil.isExprCall(parent)) {\n        Node callTarget = parent.getFirstChild();\n        if (callTarget.getType() == Token.GETPROP &&\n            callTarget.getLastChild().getString().equals(\"$jscomp.inherits\") &&\n            callTarget.getFirstChild().matchesQualifiedName(\"goog\")) {\n          return true;\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.CALL) {\n        // Note: this deliberate two-nested 'if' blocks are to avoid\n        // running method call syntax tree matches on non-method call nodes.\n        if (parent.getFirstChild().isGetProp()) {\n          Node getPropNode = parent.getFirstChild();\n\n          // Don't bother testing getprop chain length - just skip\n          // literals along the way to keep the code simple enough.\n          while (getPropNode.getFirstChild().isGetProp() ||\n                 getPropNode.getFirstChild().isName()) {\n            getPropNode = getPropNode.getFirstChild();\n          }\n\n          // Only test qualified names, to avoid confusing shadowed\n          // variables like p.x in for (var p in foo).\n          if (getPropNode.getFirstChild().isThis() &&\n              getPropNode.getLastChild().isQualifiedName()) {\n            String targetName = getPropNode.getLastChild().getOriginalQualifiedName();\n            if (targetName.endsWith(\".prototype\")) {\n              return false;\n            }\n          }\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && NodeUtil.isGet(parent.getParent()) &&\n          parent.getParent().getType() == Token.ASSIGN) {\n        Node grandparent = parent.getParent().getParent();\n        if (grandparent.getType() == Token.EXPR_RESULT &&\n            grandparent.getParent().getType() == Token.SCRIPT) {\n          Node rhs = parent.getNext();\n          if (rhs != null && rhs.getType() == Token.NAME &&\n              rhs.getString().equals(\"$jscomp$templatize\")) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b5cc29a0 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,92 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild()) &&\n+          parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+          return true;\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                (lhs.getLastChild().getString().equals(\"prototype\") || lhs.getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                (llhs.getLastChild().getString().equals(\"prototype\") || llhs.getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && NodeUtil.isExprCall(parent)) {\n+        Node callTarget = parent.getFirstChild();\n+        if (callTarget.getType() == Token.GETPROP &&\n+            callTarget.getLastChild().getString().equals(\"$jscomp.inherits\") &&\n+            callTarget.getFirstChild().matchesQualifiedName(\"goog\")) {\n+          return true;\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.CALL) {\n+        // Note: this deliberate two-nested 'if' blocks are to avoid\n+        // running method call syntax tree matches on non-method call nodes.\n+        if (parent.getFirstChild().isGetProp()) {\n+          Node getPropNode = parent.getFirstChild();\n+\n+          // Don't bother testing getprop chain length - just skip\n+          // literals along the way to keep the code simple enough.\n+          while (getPropNode.getFirstChild().isGetProp() ||\n+                 getPropNode.getFirstChild().isName()) {\n+            getPropNode = getPropNode.getFirstChild();\n+          }\n+\n+          // Only test qualified names, to avoid confusing shadowed\n+          // variables like p.x in for (var p in foo).\n+          if (getPropNode.getFirstChild().isThis() &&\n+              getPropNode.getLastChild().isQualifiedName()) {\n+            String targetName = getPropNode.getLastChild().getOriginalQualifiedName();\n+            if (targetName.endsWith(\".prototype\")) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && NodeUtil.isGet(parent.getParent()) &&\n+          parent.getParent().getType() == Token.ASSIGN) {\n+        Node grandparent = parent.getParent().getParent();\n+        if (grandparent.getType() == Token.EXPR_RESULT &&\n+            grandparent.getParent().getType() == Token.SCRIPT) {\n+          Node rhs = parent.getNext();\n+          if (rhs != null && rhs.getType() == Token.NAME &&\n+              rhs.getString().equals(\"$jscomp$templatize\")) {\n+            return true;\n+          }\n+        }\n+        return false;\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}