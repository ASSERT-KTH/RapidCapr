{
    "patch": "JSType resolvedThisType = safeResolve(typeOfThis, t, scope);\nif (resolvedThisType != null && !resolvedThisType.isUnknownType()) {\n  if (resolvedThisType instanceof NamedType) {\n    resolvedThisType = ((NamedType) resolvedThisType).getReferencedType();\n  }\n  if (!(resolvedThisType instanceof ObjectType)) {\n    resolvedThisType = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n  }\n  typeOfThis = (ObjectType) resolvedThisType;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..3499c266 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,15 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedThisType = safeResolve(typeOfThis, t, scope);\n+if (resolvedThisType != null && !resolvedThisType.isUnknownType()) {\n+  if (resolvedThisType instanceof NamedType) {\n+    resolvedThisType = ((NamedType) resolvedThisType).getReferencedType();\n+  }\n+  if (!(resolvedThisType instanceof ObjectType)) {\n+    resolvedThisType = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+  }\n+  typeOfThis = (ObjectType) resolvedThisType;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}