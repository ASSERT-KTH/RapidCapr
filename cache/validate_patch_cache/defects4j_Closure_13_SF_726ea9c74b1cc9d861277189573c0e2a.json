{
    "patch": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    int visits = 0;\n    while (true) {\n        boolean retraverse = false;\n        Node c = node.getFirstChild();\n        while (c != null) {\n            Node next = c.getNext();\n            traverse(c);\n            c = next;\n            if (shouldRetraverse(node)) {\n                retraverse = true;\n                break;\n            }\n        }\n        if (!retraverse) {\n            visit(node);\n        }\n        visits++;\n        if (!retraverse || visits >= 10000) {\n            break;\n        }\n    }\n\n    Preconditions.checkState(visits < 10000, \"too many iterations\");\n\n    exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..50e87859 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,41 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n+private void traverse(Node node) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n     if (!shouldVisit(node)) {\n-      return;\n+        return;\n     }\n \n     int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n-\n-      visit(node);\n-      visits++;\n+    while (true) {\n+        boolean retraverse = false;\n+        Node c = node.getFirstChild();\n+        while (c != null) {\n+            Node next = c.getNext();\n+            traverse(c);\n+            c = next;\n+            if (shouldRetraverse(node)) {\n+                retraverse = true;\n+                break;\n+            }\n+        }\n+        if (!retraverse) {\n+            visit(node);\n+        }\n+        visits++;\n+        if (!retraverse || visits >= 10000) {\n+            break;\n+        }\n+    }\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    Preconditions.checkState(visits < 10000, \"too many iterations\");\n \n     exitNode(node);\n-  }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}