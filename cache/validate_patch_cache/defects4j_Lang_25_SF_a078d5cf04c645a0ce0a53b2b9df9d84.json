{
    "patch": "public static String ISO8859_1_ESCAPE(String str) {\n    StringBuffer sb = new StringBuffer();\n    int strlen = str.length();\n\n    for (int i = 0; i < strlen; i++) {\n        char ch = str.charAt(i);\n        if (ch > 255) {\n            sb.append(\"\\\\u\").append(Integer.toHexString(ch));\n        } else if (ch == '\"') {\n            sb.append(\"\\\\\\\"\");\n        } else if (ch == '\\'') {\n            sb.append(\"\\\\'\");\n        } else if (ch == '\\\\') {\n            sb.append(\"\\\\\\\\\");\n        } else if (ch < 32) {\n            switch (ch) {\n                case '\\b':\n                    sb.append(\"\\\\b\");\n                    break;\n                case '\\n':\n                    sb.append(\"\\\\n\");\n                    break;\n                case '\\t':\n                    sb.append(\"\\\\t\");\n                    break;\n                case '\\f':\n                    sb.append(\"\\\\f\");\n                    break;\n                case '\\r':\n                    sb.append(\"\\\\r\");\n                    break;\n                default:\n                    if (ch > 0xf) {\n                        sb.append(\"\\\\u00\" + Integer.toHexString(ch).toUpperCase());\n                    } else {\n                        sb.append(\"\\\\u000\" + Integer.toHexString(ch).toUpperCase());\n                    }\n                    break;\n            }\n        } else {\n            sb.append(ch);\n        }\n    }\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..0b0839ae 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,52 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String ISO8859_1_ESCAPE(String str) {\n+    StringBuffer sb = new StringBuffer();\n+    int strlen = str.length();\n+\n+    for (int i = 0; i < strlen; i++) {\n+        char ch = str.charAt(i);\n+        if (ch > 255) {\n+            sb.append(\"\\\\u\").append(Integer.toHexString(ch));\n+        } else if (ch == '\"') {\n+            sb.append(\"\\\\\\\"\");\n+        } else if (ch == '\\'') {\n+            sb.append(\"\\\\'\");\n+        } else if (ch == '\\\\') {\n+            sb.append(\"\\\\\\\\\");\n+        } else if (ch < 32) {\n+            switch (ch) {\n+                case '\\b':\n+                    sb.append(\"\\\\b\");\n+                    break;\n+                case '\\n':\n+                    sb.append(\"\\\\n\");\n+                    break;\n+                case '\\t':\n+                    sb.append(\"\\\\t\");\n+                    break;\n+                case '\\f':\n+                    sb.append(\"\\\\f\");\n+                    break;\n+                case '\\r':\n+                    sb.append(\"\\\\r\");\n+                    break;\n+                default:\n+                    if (ch > 0xf) {\n+                        sb.append(\"\\\\u00\" + Integer.toHexString(ch).toUpperCase());\n+                    } else {\n+                        sb.append(\"\\\\u000\" + Integer.toHexString(ch).toUpperCase());\n+                    }\n+                    break;\n+            }\n+        } else {\n+            sb.append(ch);\n+        }\n+    }\n+\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}