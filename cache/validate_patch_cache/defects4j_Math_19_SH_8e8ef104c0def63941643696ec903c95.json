{
    "patch": " if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    if (inputSigma[i] > (boundaries[1][i] - boundaries[0][i])) {\n                        throw new NumberIsTooLargeException(inputSigma[i], boundaries[1][i] - boundaries[0][i], false);\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..38cab3481 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,21 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+ if (inputSigma != null) {\n+            if (inputSigma.length != init.length) {\n+                throw new DimensionMismatchException(inputSigma.length, init.length);\n+            }\n+            for (int i = 0; i < init.length; i++) {\n+                if (inputSigma[i] < 0) {\n+                    throw new NotPositiveException(inputSigma[i]);\n+                }\n+                if (boundaries != null) {\n+                    if (inputSigma[i] > (boundaries[1][i] - boundaries[0][i])) {\n+                        throw new NumberIsTooLargeException(inputSigma[i], boundaries[1][i] - boundaries[0][i], false);\n+                    }\n+                }\n+            }\n+        }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math3.exception.OutOfRangeException> but was<org.apache.commons.math3.exception.NumberIsTooLargeException>",
    "test_result": "FAIL"
}