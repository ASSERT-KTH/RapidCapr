{
    "patch": "import org.json.*;\n\npublic class JSONParser {\n    public double getTypedPercent(String json) {\n        int totalCount = 0;\n        int typedCount = 0;\n\n        try {\n            JSONArray arr = new JSONArray(json);\n            for (int i = 0; i < arr.length(); i++) {\n                JSONObject obj = arr.getJSONObject(i);\n                String type = obj.optString(\"type\", \"\");\n                if (!type.isEmpty()) {\n                    typedCount++;\n                }\n                totalCount++;\n            }\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        \n        return (totalCount != 0) ? ((typedCount * 100.0) / totalCount) : 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..cdf66c2a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.*;\n+\n+public class JSONParser {\n+    public double getTypedPercent(String json) {\n+        int totalCount = 0;\n+        int typedCount = 0;\n+\n+        try {\n+            JSONArray arr = new JSONArray(json);\n+            for (int i = 0; i < arr.length(); i++) {\n+                JSONObject obj = arr.getJSONObject(i);\n+                String type = obj.optString(\"type\", \"\");\n+                if (!type.isEmpty()) {\n+                    typedCount++;\n+                }\n+                totalCount++;\n+            }\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+        \n+        return (totalCount != 0) ? ((typedCount * 100.0) / totalCount) : 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}