{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n    Node nameNode = n.getFirstChild();\n    Node parent = n.getParent();\n    NameInformation ns = createNameInformation(t, nameNode);\n    if (ns != null) {\n        Node depNode = null;\n        // Get the node with the dependency scope based on the parent node type\n        if (NodeUtil.isAssignmentOp(parent)) {\n            depNode = parent.getFirstChild();\n        } else if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n            // Patch for assignments that appear in the init, condition or iteration part of a FOR loop.\n            // The last assignment in those three fields wins, which can result in incorrect reference edges\n            // between referenced and assigned variables.\n            depNode = (parent.getFirstChild().getNext() != n) ? recordNode : nameNode;\n        } else {\n            depNode = recordNode;\n        }\n        // Record the dependency scope for the name node using the dependency node\n        recordDepScope(depNode, ns);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..883c06a1 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,37 +555,27 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+    Node nameNode = n.getFirstChild();\n+    Node parent = n.getParent();\n+    NameInformation ns = createNameInformation(t, nameNode);\n+    if (ns != null) {\n+        Node depNode = null;\n+        // Get the node with the dependency scope based on the parent node type\n+        if (NodeUtil.isAssignmentOp(parent)) {\n+            depNode = parent.getFirstChild();\n+        } else if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+            // Patch for assignments that appear in the init, condition or iteration part of a FOR loop.\n+            // The last assignment in those three fields wins, which can result in incorrect reference edges\n+            // between referenced and assigned variables.\n+            depNode = (parent.getFirstChild().getNext() != n) ? recordNode : nameNode;\n         } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n+            depNode = recordNode;\n         }\n-      }\n+        // Record the dependency scope for the name node using the dependency node\n+        recordDepScope(depNode, ns);\n     }\n+}\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}