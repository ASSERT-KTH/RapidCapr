{
    "patch": "public static int[] min_path(int[][] grid, int k){\n    int n=grid.length;\n    int val=Integer.MAX_VALUE;\n\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==1){\n                int tmp=Integer.MAX_VALUE;\n                if(i>0) tmp=Math.min(tmp, grid[i-1][j]!=0 ? grid[i-1][j] : Integer.MAX_VALUE);\n                if(j>0) tmp=Math.min(tmp, grid[i][j-1]!=0 ? grid[i][j-1] : Integer.MAX_VALUE);\n                if(i<n-1) tmp=Math.min(tmp, grid[i+1][j]!=0 ? grid[i+1][j] : Integer.MAX_VALUE);\n                if(j<n-1) tmp=Math.min(tmp, grid[i][j+1]!=0 ? grid[i][j+1] : Integer.MAX_VALUE);\n                val=Math.min(val, tmp);\n            }\n        }\n    }\n\n    int[] res=new int[k];\n\n    for(int i=0;i<k;i++){\n        if(i%2==0) res[i]=1;\n        else res[i]=(val!=Integer.MAX_VALUE ? val : (i+1<k ? 1 : -1));\n    }\n    return res;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MIN_PATH.java b/src/main/java/humaneval/buggy/MIN_PATH.java\nindex c19fee5..ca6d5c0 100644\n--- a/src/main/java/humaneval/buggy/MIN_PATH.java\n+++ b/src/main/java/humaneval/buggy/MIN_PATH.java\n@@ -32,24 +32,29 @@ package humaneval.buggy;\n  */\n \n public class MIN_PATH {\n-    public static int[] min_path(int[][] grid, int k) {\n-        int n = grid.length;\n-        int val = n * n + 1;\n-        for(int i = 0; i < n; i++) {\n-            for(int j = 0; j < n; j++) {\n-                if(grid[i][j] == 1) {\n-                    if(i != 0) val = Math.max(val, grid[i][j + 1]);\n-                    if(j != 0) val = Math.min(val, grid[i - 1][j]);\n-                    if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n-                    if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n-                }\n+public static int[] min_path(int[][] grid, int k){\n+    int n=grid.length;\n+    int val=Integer.MAX_VALUE;\n+\n+    for(int i=0;i<n;i++){\n+        for(int j=0;j<n;j++){\n+            if(grid[i][j]==1){\n+                int tmp=Integer.MAX_VALUE;\n+                if(i>0) tmp=Math.min(tmp, grid[i-1][j]!=0 ? grid[i-1][j] : Integer.MAX_VALUE);\n+                if(j>0) tmp=Math.min(tmp, grid[i][j-1]!=0 ? grid[i][j-1] : Integer.MAX_VALUE);\n+                if(i<n-1) tmp=Math.min(tmp, grid[i+1][j]!=0 ? grid[i+1][j] : Integer.MAX_VALUE);\n+                if(j<n-1) tmp=Math.min(tmp, grid[i][j+1]!=0 ? grid[i][j+1] : Integer.MAX_VALUE);\n+                val=Math.min(val, tmp);\n             }\n         }\n-        int[] ans = new int[k];\n-        for(int i = 0; i < k; i++) {\n-            if((i % 2) == 0) ans[i] = 1;\n-            else ans[i] = val;\n-        }\n-        return ans;\n     }\n+\n+    int[] res=new int[k];\n+\n+    for(int i=0;i<k;i++){\n+        if(i%2==0) res[i]=1;\n+        else res[i]=(val!=Integer.MAX_VALUE ? val : (i+1<k ? 1 : -1));\n+    }\n+    return res;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}