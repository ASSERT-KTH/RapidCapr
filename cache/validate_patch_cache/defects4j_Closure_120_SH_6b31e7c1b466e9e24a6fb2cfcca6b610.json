{
    "patch": "        else if (block.isLoop) {\n          return false;\n        } else if (block.isExitBlock) {\n          BasicBlock outerLoop = block.getOuterLoop();\n          for (Reference ref : getVarReferencesInScope()) {\n            BasicBlock bb = ref.getBasicBlock();\n            if (bb != null && bb.isInLoop(outerLoop)) {\n              return false;\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b2adb5ad 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        else if (block.isLoop) {\n+          return false;\n+        } else if (block.isExitBlock) {\n+          BasicBlock outerLoop = block.getOuterLoop();\n+          for (Reference ref : getVarReferencesInScope()) {\n+            BasicBlock bb = ref.getBasicBlock();\n+            if (bb != null && bb.isInLoop(outerLoop)) {\n+              return false;\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}