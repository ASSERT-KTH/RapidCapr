{
    "patch": "if (!NodeUtil.isFunctionExpression(n)) {\n    return false;\n}\nNode parent = n.getParent();\nif (parent == null) {\n    return false;\n}\nint parentType = parent.getType();\nif (parentType == Token.CALL || parentType == Token.NEW \n    || parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.FOR) {\n    return false;\n} else if (parentType == Token.VAR || parentType == Token.RETURN) {\n    return true;\n} else {\n    Node grandParent = parent.getParent();\n    if (grandParent == null) {\n        return false;\n    }\n    int grandParentType = grandParent.getType();\n    if (grandParentType == Token.BLOCK) {\n        grandParent = grandParent.getParent();\n        if (grandParent == null) {\n            return false;\n        }\n        grandParentType = grandParent.getType();\n    }\n    if (grandParentType == Token.FUNCTION\n        || ((grandParentType == Token.CALL || grandParentType == Token.NEW)\n            && grandParent.getFirstChild() == parent)\n        || (grandParentType == Token.EXPR_RESULT && grandParent.getFirstChild() == parent)) {\n        return true;\n    }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..97ca6cba 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,40 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (!NodeUtil.isFunctionExpression(n)) {\n+    return false;\n+}\n+Node parent = n.getParent();\n+if (parent == null) {\n+    return false;\n+}\n+int parentType = parent.getType();\n+if (parentType == Token.CALL || parentType == Token.NEW \n+    || parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.FOR) {\n+    return false;\n+} else if (parentType == Token.VAR || parentType == Token.RETURN) {\n+    return true;\n+} else {\n+    Node grandParent = parent.getParent();\n+    if (grandParent == null) {\n+        return false;\n+    }\n+    int grandParentType = grandParent.getType();\n+    if (grandParentType == Token.BLOCK) {\n+        grandParent = grandParent.getParent();\n+        if (grandParent == null) {\n+            return false;\n+        }\n+        grandParentType = grandParent.getType();\n+    }\n+    if (grandParentType == Token.FUNCTION\n+        || ((grandParentType == Token.CALL || grandParentType == Token.NEW)\n+            && grandParent.getFirstChild() == parent)\n+        || (grandParentType == Token.EXPR_RESULT && grandParent.getFirstChild() == parent)) {\n+        return true;\n+    }\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}