{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        // Before we bail, we'll check if all assignments within the loop\n        // are assignments of the current variable. If they all are, then\n        // we allow the variable to be assigned within the loop.\n        List<BasicBlock> workList = new ArrayList<BasicBlock>();\n        Set<BasicBlock> seen = new HashSet<BasicBlock>();\n        workList.add(block);\n        boolean allAssignments = true;\n        while (!workList.isEmpty()) {\n          BasicBlock currentBlock = workList.remove(workList.size() - 1);\n          if (!seen.add(currentBlock)) {\n            continue;\n          }\n          for (Node n : currentBlock.getExecutionOrder()) {\n            if (n.type == Token.ASSIGN || n.type == Token.VAR) {\n              if (n.getFirstChild().getString().equals(name)) {\n                if (!n.isAssign()) {\n                  allAssignments = false;\n                  break;\n                }\n              }\n            }\n            if (n instanceof BasicBlock) {\n              workList.add((BasicBlock) n);\n            }\n          }\n          if (!allAssignments) {\n            break;\n          }\n        }\n        if (allAssignments) {\n          break;\n        } else {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4cbe5d49 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,44 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        // Before we bail, we'll check if all assignments within the loop\n+        // are assignments of the current variable. If they all are, then\n+        // we allow the variable to be assigned within the loop.\n+        List<BasicBlock> workList = new ArrayList<BasicBlock>();\n+        Set<BasicBlock> seen = new HashSet<BasicBlock>();\n+        workList.add(block);\n+        boolean allAssignments = true;\n+        while (!workList.isEmpty()) {\n+          BasicBlock currentBlock = workList.remove(workList.size() - 1);\n+          if (!seen.add(currentBlock)) {\n+            continue;\n+          }\n+          for (Node n : currentBlock.getExecutionOrder()) {\n+            if (n.type == Token.ASSIGN || n.type == Token.VAR) {\n+              if (n.getFirstChild().getString().equals(name)) {\n+                if (!n.isAssign()) {\n+                  allAssignments = false;\n+                  break;\n+                }\n+              }\n+            }\n+            if (n instanceof BasicBlock) {\n+              workList.add((BasicBlock) n);\n+            }\n+          }\n+          if (!allAssignments) {\n+            break;\n+          }\n+        }\n+        if (allAssignments) {\n+          break;\n+        } else {\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}