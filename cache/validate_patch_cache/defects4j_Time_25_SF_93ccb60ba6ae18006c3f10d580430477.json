{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int initialOffset = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - initialOffset;\n        final int finalOffset = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (initialOffset != finalOffset) {\n            // We need to ensure that time is always within a valid range.\n            // If instantLocal is in an over gap, jumping back to the\n            // previous valid instant will be incorrect, so adjust the instant to\n            // the (future) end of the gap instead.\n            long nextTransition;\n            if (finalOffset < initialOffset) {\n                nextTransition = previousTransition(instantAdjusted);\n                if (nextTransition <= instantLocal - initialOffset) {\n                    nextTransition = previousTransition(instantAdjusted - 1);\n                }\n            } else {\n                nextTransition = nextTransition(instantAdjusted - 1);\n                if (nextTransition <= instantLocal - initialOffset) {\n                    nextTransition = nextTransition(instantAdjusted);\n                }\n            }\n            if (nextTransition <= instantLocal - initialOffset) {\n                return initialOffset;\n            }\n        }\n        return finalOffset;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f3949a47 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,26 +878,33 @@ public abstract class DateTimeZone implements Serializable {\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n+        final int initialOffset = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n+        final long instantAdjusted = instantLocal - initialOffset;\n+        final int finalOffset = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        if (initialOffset != finalOffset) {\n+            // We need to ensure that time is always within a valid range.\n+            // If instantLocal is in an over gap, jumping back to the\n+            // previous valid instant will be incorrect, so adjust the instant to\n+            // the (future) end of the gap instead.\n+            long nextTransition;\n+            if (finalOffset < initialOffset) {\n+                nextTransition = previousTransition(instantAdjusted);\n+                if (nextTransition <= instantLocal - initialOffset) {\n+                    nextTransition = previousTransition(instantAdjusted - 1);\n+                }\n+            } else {\n+                nextTransition = nextTransition(instantAdjusted - 1);\n+                if (nextTransition <= instantLocal - initialOffset) {\n+                    nextTransition = nextTransition(instantAdjusted);\n                 }\n             }\n+            if (nextTransition <= instantLocal - initialOffset) {\n+                return initialOffset;\n+            }\n         }\n-        return offsetAdjusted;\n+        return finalOffset;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}