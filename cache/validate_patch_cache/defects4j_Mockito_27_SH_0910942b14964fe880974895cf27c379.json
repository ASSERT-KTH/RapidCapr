{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        InvocationContainer newInvocationContainer = new InvocationContainer(newMockHandler);\n        MockCreationSettings<T> settings = ((MockHandler<T>) oldMockHandler).getMockSettings();\n        MockCreationSettingsImpl<T> newSettings = new MockCreationSettingsImpl<T>();\n        newSettings.spiedInstance(settings.getSpiedInstance());\n        newSettings.extraInterfaces(settings.getExtraInterfaces().toArray(new Class<?>[0]));\n        newSettings.defaultAnswer(settings.getDefaultAnswer());\n        newSettings.lenient().stubOnly();  // stubOnly is required so that we don't get exceptions on non-mockito methods\n        newSettings.invocationListeners(settings.getInvocationListeners().toArray(new InvocationListener[0]));\n        newSettings.stubbingLookupListeners(settings.getStubbingLookupListeners().toArray(new StubbingLookupListener[0]));\n        newSettings.instantiator(settings.getInstantiator());\n        newSettings.spiedInstance(settings.getSpiedInstance());\n        newSettings.mockName(settings.getName());\n        newSettings.fieldInjection(settings.getFieldInjection());\n        newSettings.serializable(settings.isSerializable());\n        T newMock = createMockHandler(newSettings, newMockHandler, newInvocationContainer);\n        ((Factory) mock).setCallback(0, new Interceptor(newMock, newMockHandler, newInvocationContainer));",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..0ac04a8db 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        InvocationContainer newInvocationContainer = new InvocationContainer(newMockHandler);\n+        MockCreationSettings<T> settings = ((MockHandler<T>) oldMockHandler).getMockSettings();\n+        MockCreationSettingsImpl<T> newSettings = new MockCreationSettingsImpl<T>();\n+        newSettings.spiedInstance(settings.getSpiedInstance());\n+        newSettings.extraInterfaces(settings.getExtraInterfaces().toArray(new Class<?>[0]));\n+        newSettings.defaultAnswer(settings.getDefaultAnswer());\n+        newSettings.lenient().stubOnly();  // stubOnly is required so that we don't get exceptions on non-mockito methods\n+        newSettings.invocationListeners(settings.getInvocationListeners().toArray(new InvocationListener[0]));\n+        newSettings.stubbingLookupListeners(settings.getStubbingLookupListeners().toArray(new StubbingLookupListener[0]));\n+        newSettings.instantiator(settings.getInstantiator());\n+        newSettings.spiedInstance(settings.getSpiedInstance());\n+        newSettings.mockName(settings.getName());\n+        newSettings.fieldInjection(settings.getFieldInjection());\n+        newSettings.serializable(settings.isSerializable());\n+        T newMock = createMockHandler(newSettings, newMockHandler, newInvocationContainer);\n+        ((Factory) mock).setCallback(0, new Interceptor(newMock, newMockHandler, newInvocationContainer));\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}