{
    "patch": "    Node function = fnScope.getRootNode();\n    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    Node argList = getFunctionArgList(function);\n    Set<String> functionUsedParams = new HashSet<>();\n    \n    NodeUtil.visitPreOrder(argList, new NodeVisitor() {\n      @Override\n      public void visit(Node node) {\n        if (node.isName()) {\n          functionUsedParams.add(node.getString());\n        }\n      }\n    });\n    \n    int i = 0;\n    Node curr = argList.getFirstChild();\n    while (i < functionUsedParams.size() && curr != null) {\n      Var var = fnScope.getVar(curr.getString());\n      if (referenced.contains(var) || compilerOptions.useTypesForLocalOptimization) {\n        functionUsedParams.remove(curr.getString());\n        i++;\n      }\n      curr = curr.getNext();\n    }\n    \n    if (functionUsedParams.isEmpty()) {\n      return;\n    }\n    \n    Set<Node> toRemove = new LinkedHashSet<>();\n    \n    curr = argList.getFirstChild();\n    while (curr != null) {\n      if (functionUsedParams.contains(curr.getString())) {\n        functionUsedParams.remove(curr.getString());\n      } else {\n        toRemove.add(curr);\n      }\n      curr = curr.getNext();\n    }\n    \n    for (Node param : toRemove) {\n      argList.removeChild(param);\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ece666cb 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,57 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    \n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    Node argList = getFunctionArgList(function);\n+    Set<String> functionUsedParams = new HashSet<>();\n+    \n+    NodeUtil.visitPreOrder(argList, new NodeVisitor() {\n+      @Override\n+      public void visit(Node node) {\n+        if (node.isName()) {\n+          functionUsedParams.add(node.getString());\n+        }\n+      }\n+    });\n+    \n+    int i = 0;\n+    Node curr = argList.getFirstChild();\n+    while (i < functionUsedParams.size() && curr != null) {\n+      Var var = fnScope.getVar(curr.getString());\n+      if (referenced.contains(var) || compilerOptions.useTypesForLocalOptimization) {\n+        functionUsedParams.remove(curr.getString());\n+        i++;\n+      }\n+      curr = curr.getNext();\n+    }\n+    \n+    if (functionUsedParams.isEmpty()) {\n+      return;\n+    }\n+    \n+    Set<Node> toRemove = new LinkedHashSet<>();\n+    \n+    curr = argList.getFirstChild();\n+    while (curr != null) {\n+      if (functionUsedParams.contains(curr.getString())) {\n+        functionUsedParams.remove(curr.getString());\n+      } else {\n+        toRemove.add(curr);\n+      }\n+      curr = curr.getNext();\n+    }\n+    \n+    for (Node param : toRemove) {\n+      argList.removeChild(param);\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}