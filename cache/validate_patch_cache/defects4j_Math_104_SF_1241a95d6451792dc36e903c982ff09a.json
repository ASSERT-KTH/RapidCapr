{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    }\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n    }\n    if (n >= maxIterations) {\n        throw new MaxIterationsExceededException(maxIterations);\n    }\n    return Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n    }\n    ContinuedFraction cf = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            return 2 * n + 1 - a + x;\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return n * (a - n);\n        }\n    };\n    return 1.0 / cf.evaluate(x, epsilon, maxIterations);\n}\n\npublic static double logGamma(double x) {\n    if (Double.isNaN(x) || x <= 0.0) {\n        return Double.NaN;\n    }\n    double[] cof = {76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n    double sum = 0.9999999999999971;\n    for (int i = 0; i < cof.length; i++) {\n        sum += cof[i] / (x + i);\n    }\n    return Math.log(2.5066282746310005 * sum / x) + (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..00a13157b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,65 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n+    }\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+    if (n >= maxIterations) {\n+        throw new MaxIterationsExceededException(maxIterations);\n+    }\n+    return Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n+    }\n+    ContinuedFraction cf = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            return 2 * n + 1 - a + x;\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return n * (a - n);\n+        }\n+    };\n+    return 1.0 / cf.evaluate(x, epsilon, maxIterations);\n+}\n+\n+public static double logGamma(double x) {\n+    if (Double.isNaN(x) || x <= 0.0) {\n+        return Double.NaN;\n+    }\n+    double[] cof = {76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n+    double sum = 0.9999999999999971;\n+    for (int i = 0; i < cof.length; i++) {\n+        sum += cof[i] / (x + i);\n+    }\n+    return Math.log(2.5066282746310005 * sum / x) + (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}