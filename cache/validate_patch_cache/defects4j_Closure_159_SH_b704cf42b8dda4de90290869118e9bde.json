{
    "patch": "    if (node.getType() == Token.CALL && node.getFirstChild() != null && node.getFirstChild().getType() == Token.NAME) {\n      Node child = node.getFirstChild();\n      String functionName = child.getString();\n      if (functionName.startsWith(\"goog.\") || functionName.startsWith(\"$\")) {\n          // Ignore built-in functions and DOM apis\n          return;\n      }\n      changed.add(functionName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..7ee599ca 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,14 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (node.getType() == Token.CALL && node.getFirstChild() != null && node.getFirstChild().getType() == Token.NAME) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      String functionName = child.getString();\n+      if (functionName.startsWith(\"goog.\") || functionName.startsWith(\"$\")) {\n+          // Ignore built-in functions and DOM apis\n+          return;\n+      }\n+      changed.add(functionName);\n       }\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}