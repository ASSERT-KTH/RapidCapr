{
    "patch": "case REGULA_FALSI:\n    // Detect early that algorithm is stuck, instead of waiting\n    // for the maximum number of iterations to be exceeded.\n    if (FastMath.abs(x1 - x0) < atol) {\n        throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n                getMaxIterations(), \"algorithm stuck\");\n    } else {\n        f0 = computeObjectiveValue(x0); // update f0\n    }\n    break;\ncase BRENT_RISCH:\n    final double twoEPS = 2 * eps; //2*(relative error)\n    final double xMid = 0.5 * (x1 + x0); //midpoint\n    if (FastMath.abs(x0 - x1) <= twoEPS * FastMath.abs(xMid) + atol) {\n        return xMid;\n    } else { // try to bisect\n        final double fxMid = computeObjectiveValue(xMid);\n        if (fxMid == 0.0) {\n            return xMid;\n        } else if (f0 * fxMid < 0.0) {\n            return solveBrentRisch(min, xMid, f0, fxMid);\n        } else {\n            return solveBrentRisch(xMid, max, fxMid, f1);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..fab27856e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,31 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    // Detect early that algorithm is stuck, instead of waiting\n+    // for the maximum number of iterations to be exceeded.\n+    if (FastMath.abs(x1 - x0) < atol) {\n+        throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n+                getMaxIterations(), \"algorithm stuck\");\n+    } else {\n+        f0 = computeObjectiveValue(x0); // update f0\n+    }\n+    break;\n+case BRENT_RISCH:\n+    final double twoEPS = 2 * eps; //2*(relative error)\n+    final double xMid = 0.5 * (x1 + x0); //midpoint\n+    if (FastMath.abs(x0 - x1) <= twoEPS * FastMath.abs(xMid) + atol) {\n+        return xMid;\n+    } else { // try to bisect\n+        final double fxMid = computeObjectiveValue(xMid);\n+        if (fxMid == 0.0) {\n+            return xMid;\n+        } else if (f0 * fxMid < 0.0) {\n+            return solveBrentRisch(min, xMid, f0, fxMid);\n+        } else {\n+            return solveBrentRisch(xMid, max, fxMid, f1);\n+        }\n+    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}