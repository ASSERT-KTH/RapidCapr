{
    "patch": "// Do not handle LP nodes that are nested inside other expressions or not in an expression\nif (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT\n    && parent.getFirstChild() != null && parent.getFirstChild().getType() == Token.FUNCTION) {\n  handleFunctionInputs(parent);\n  return;\n}\n\n// Only handle top-level function declarations\nif (n.getType() == Token.FUNCTION && parent == scope.getRootNode()) {\n  defineDeclaredFunction(n, parent);\n}\n\n// Handle catch clauses\nif (n.getType() == Token.CATCH) {\n  defineCatch(n, parent);\n  return;\n}\n\n// Handle var declarations\nif (n.getType() == Token.VAR) {\n  defineVar(n, parent);\n  return;\n}\n\n// Attach literal types\nattachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6dc96785 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,32 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+// Do not handle LP nodes that are nested inside other expressions or not in an expression\n+if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT\n+    && parent.getFirstChild() != null && parent.getFirstChild().getType() == Token.FUNCTION) {\n+  handleFunctionInputs(parent);\n+  return;\n+}\n+\n+// Only handle top-level function declarations\n+if (n.getType() == Token.FUNCTION && parent == scope.getRootNode()) {\n+  defineDeclaredFunction(n, parent);\n+}\n+\n+// Handle catch clauses\n+if (n.getType() == Token.CATCH) {\n+  defineCatch(n, parent);\n+  return;\n+}\n+\n+// Handle var declarations\n+if (n.getType() == Token.VAR) {\n+  defineVar(n, parent);\n+  return;\n+}\n+\n+// Attach literal types\n+attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}