{
    "patch": "public static String unescape(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuffer output = new StringBuffer(input.length());\n    char ch = ' ';\n    boolean sawSlash = false;\n    boolean sawUnicode = false;\n    int unicode = 0;\n    for (int i = 0; i < input.length(); i++) {\n        ch = input.charAt(i);\n        if (sawSlash) {\n            sawSlash = false;\n            switch (ch) {\n                case '\\\\':\n                    output.append('\\\\');\n                    break;\n                case '\\'':\n                    output.append('\\'');\n                    break;\n                case '\\\"':\n                    output.append('\"');\n                    break;\n                case 'r':\n                    output.append('\\r');\n                    break;\n                case 'f':\n                    output.append('\\f');\n                    break;\n                case 't':\n                    output.append('\\t');\n                    break;\n                case 'n':\n                    output.append('\\n');\n                    break;\n                case 'b':\n                    output.append('\\b');\n                    break;\n                case 'u':\n                    unicode = 0;\n                    sawUnicode = true;\n                    break;\n                default:\n                    output.append('\\\\');\n                    output.append(ch);\n                    break;\n            }\n        } else if (sawUnicode) {\n            unicode *= 16;\n            unicode += Character.digit(ch, 16);\n            if (--unicodeCount == 0) {\n                output.append((char)unicode);\n                sawUnicode = false;\n            }\n        } else if (ch == '\\\\') {\n            sawSlash = true;\n        } else {\n            output.append(ch);\n        }\n    }\n    if (sawSlash) {\n        output.append('\\\\');\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..12fbbee3 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,71 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    StringBuffer output = new StringBuffer(input.length());\n+    char ch = ' ';\n+    boolean sawSlash = false;\n+    boolean sawUnicode = false;\n+    int unicode = 0;\n+    for (int i = 0; i < input.length(); i++) {\n+        ch = input.charAt(i);\n+        if (sawSlash) {\n+            sawSlash = false;\n+            switch (ch) {\n+                case '\\\\':\n+                    output.append('\\\\');\n+                    break;\n+                case '\\'':\n+                    output.append('\\'');\n+                    break;\n+                case '\\\"':\n+                    output.append('\"');\n+                    break;\n+                case 'r':\n+                    output.append('\\r');\n+                    break;\n+                case 'f':\n+                    output.append('\\f');\n+                    break;\n+                case 't':\n+                    output.append('\\t');\n+                    break;\n+                case 'n':\n+                    output.append('\\n');\n+                    break;\n+                case 'b':\n+                    output.append('\\b');\n+                    break;\n+                case 'u':\n+                    unicode = 0;\n+                    sawUnicode = true;\n+                    break;\n+                default:\n+                    output.append('\\\\');\n+                    output.append(ch);\n+                    break;\n+            }\n+        } else if (sawUnicode) {\n+            unicode *= 16;\n+            unicode += Character.digit(ch, 16);\n+            if (--unicodeCount == 0) {\n+                output.append((char)unicode);\n+                sawUnicode = false;\n+            }\n+        } else if (ch == '\\\\') {\n+            sawSlash = true;\n+        } else {\n+            output.append(ch);\n+        }\n+    }\n+    if (sawSlash) {\n+        output.append('\\\\');\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}