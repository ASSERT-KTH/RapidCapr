{
    "patch": "        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        int numArgsToRemove = 0;\n        for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n            Var var = fnScope.getVar(arg.getString());\n            if (!referenced.contains(var)) {\n                numArgsToRemove++;\n            } else {\n                break;\n            }\n        }\n        for (int i = 0; i < numArgsToRemove; i++) {\n            argList.removeChild(argList.getLastChild());\n        }\n        compiler.reportCodeChange();\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..477eba4a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        int numArgsToRemove = 0;\n+        for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+            Var var = fnScope.getVar(arg.getString());\n+            if (!referenced.contains(var)) {\n+                numArgsToRemove++;\n+            } else {\n+                break;\n+            }\n+        }\n+        for (int i = 0; i < numArgsToRemove; i++) {\n+            argList.removeChild(argList.getLastChild());\n+        }\n+        compiler.reportCodeChange();\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}