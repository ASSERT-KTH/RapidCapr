{
    "patch": "        } else if (block.isConditional()) {\n          Condition condition = Preconditions.checkNotNull(block.getCondition());\n          if (!condition.isExpression()) {\n            return false;\n          }\n          // We only handle simple expressions. Anything beyond that is\n          // too hard.\n          Token opToken = condition.getOperator();\n          if (opToken == null || !opToken.isOperator()) {\n            return false;\n          }\n          Expression left = condition.getLeft();\n          Expression right = condition.getRight();\n          if (!left.isName()) {\n            return false;\n          }\n          if (right == null || !right.isLiteral()) {\n            return false;\n          }\n          Name name = left.asName();\n          LiteralValue value = right.asLiteral().getValue();\n          if (opToken == Token.EQ) {\n            return isConstantAndEqualTo(name.getReferencedNode(), value);\n          } else if (opToken == Token.NE) {\n            return isConstantAndEqualTo(name.getReferencedNode(), value) == false;\n          }\n          return false;\n        } else if (block.isFunction) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..759f567d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,34 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isConditional()) {\n+          Condition condition = Preconditions.checkNotNull(block.getCondition());\n+          if (!condition.isExpression()) {\n+            return false;\n+          }\n+          // We only handle simple expressions. Anything beyond that is\n+          // too hard.\n+          Token opToken = condition.getOperator();\n+          if (opToken == null || !opToken.isOperator()) {\n+            return false;\n+          }\n+          Expression left = condition.getLeft();\n+          Expression right = condition.getRight();\n+          if (!left.isName()) {\n+            return false;\n+          }\n+          if (right == null || !right.isLiteral()) {\n+            return false;\n+          }\n+          Name name = left.asName();\n+          LiteralValue value = right.asLiteral().getValue();\n+          if (opToken == Token.EQ) {\n+            return isConstantAndEqualTo(name.getReferencedNode(), value);\n+          } else if (opToken == Token.NE) {\n+            return isConstantAndEqualTo(name.getReferencedNode(), value) == false;\n+          }\n+          return false;\n+        } else if (block.isFunction) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}