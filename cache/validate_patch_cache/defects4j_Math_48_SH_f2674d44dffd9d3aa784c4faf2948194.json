{
    "patch": "case REGULA_FALSI:\n    // Detect early that algorithm is stuck, instead of waiting\n    // for the maximum number of iterations to be exceeded.\n    double delta = FastMath.abs(x1 - x);\n    double maxDelta = 0.1 * FastMath.abs(x);\n    if (delta <= FastMath.max(rtol * FastMath.abs(x1), atol) || delta <= maxDelta){\n        if (!isBracketing(x0, x, x1)) {\n            throw new ConvergenceException(\n                    LocalizedFormats.FAILED_BRACKETING,\n                    x0, x, x1, computeObjectiveValue(x0),\n                    computeObjectiveValue(x), computeObjectiveValue(x1));\n        }\n        throw new ConvergenceException(\n                LocalizedFormats.CONVERGENCE_FAILED,\n                getMaximalIterationCount(), method.toString());\n    }\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..473b5ccb2 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,23 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    // Detect early that algorithm is stuck, instead of waiting\n+    // for the maximum number of iterations to be exceeded.\n+    double delta = FastMath.abs(x1 - x);\n+    double maxDelta = 0.1 * FastMath.abs(x);\n+    if (delta <= FastMath.max(rtol * FastMath.abs(x1), atol) || delta <= maxDelta){\n+        if (!isBracketing(x0, x, x1)) {\n+            throw new ConvergenceException(\n+                    LocalizedFormats.FAILED_BRACKETING,\n+                    x0, x, x1, computeObjectiveValue(x0),\n+                    computeObjectiveValue(x), computeObjectiveValue(x1));\n+        }\n+        throw new ConvergenceException(\n+                LocalizedFormats.CONVERGENCE_FAILED,\n+                getMaximalIterationCount(), method.toString());\n+    }\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}