{
    "patch": "int remainingIndex = index;\nfor (int i = 0; i < last; i++) {\n    final int offset = uniCounterOffset[i];\n    int idx = remainingIndex / offset;\n    remainingIndex -= idx * offset;\n    indices[i] = idx;\n    if (remainingIndex == 0) {\n        for (int j = i + 1; j < last; j++) {\n            indices[j] = 0;\n        }\n        indices[last] = 0;\n        break;\n    }\n}\nif (indices[last] == 0) {\n    indices[last] = remainingIndex - 1;\n} else {\n    indices[last] = remainingIndex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..bee3acd56 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,25 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+int remainingIndex = index;\n+for (int i = 0; i < last; i++) {\n+    final int offset = uniCounterOffset[i];\n+    int idx = remainingIndex / offset;\n+    remainingIndex -= idx * offset;\n+    indices[i] = idx;\n+    if (remainingIndex == 0) {\n+        for (int j = i + 1; j < last; j++) {\n+            indices[j] = 0;\n         }\n-        --idx;\n-        indices[last] = idx;\n+        indices[last] = 0;\n+        break;\n+    }\n+}\n+if (indices[last] == 0) {\n+    indices[last] = remainingIndex - 1;\n+} else {\n+    indices[last] = remainingIndex;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [0][2] expected:<0> but was:<-1>",
    "test_result": "FAIL"
}