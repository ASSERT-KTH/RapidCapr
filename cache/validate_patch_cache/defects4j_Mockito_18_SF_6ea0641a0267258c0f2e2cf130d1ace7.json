{
    "patch": "public static ReturnObject sortedContent(FileSystem fileSystem, String directory) {\n    if (!fileSystem.isValidDirectory(directory)) {\n        return new ReturnObjectImpl(ErrorMessage.INVALID_ARGUMENT);\n    }\n\n    List<String> fileNames = Arrays.asList(fileSystem.getFileNames(directory));\n    Collections.sort(fileNames);\n\n    StringBuilder resultBuilder = new StringBuilder();\n    for (String fileName : fileNames) {\n        if (!fileSystem.isDirectory(directory + \"/\" + fileName)) {\n            String fileContent = fileSystem.readFile(directory + \"/\" + fileName);\n            resultBuilder.append(fileContent);\n        }\n    }\n    return new ReturnObjectImpl(resultBuilder.toString());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..ee8708a0c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnObject sortedContent(FileSystem fileSystem, String directory) {\n+    if (!fileSystem.isValidDirectory(directory)) {\n+        return new ReturnObjectImpl(ErrorMessage.INVALID_ARGUMENT);\n+    }\n+\n+    List<String> fileNames = Arrays.asList(fileSystem.getFileNames(directory));\n+    Collections.sort(fileNames);\n+\n+    StringBuilder resultBuilder = new StringBuilder();\n+    for (String fileName : fileNames) {\n+        if (!fileSystem.isDirectory(directory + \"/\" + fileName)) {\n+            String fileContent = fileSystem.readFile(directory + \"/\" + fileName);\n+            resultBuilder.append(fileContent);\n+        }\n+    }\n+    return new ReturnObjectImpl(resultBuilder.toString());\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}