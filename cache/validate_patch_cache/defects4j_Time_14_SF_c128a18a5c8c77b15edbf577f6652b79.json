{
    "patch": "import org.joda.time.*;\nimport org.joda.time.chrono.ISOChronology;\n\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // Create a copy of the values array\n    int[] newValues = values.clone();\n\n    // Add the valueToAdd to the specified field\n    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"Invalid field index: \" + fieldIndex);\n    }\n    DateTimeField field = fieldType.getField(ISOChronology.getInstanceUTC());\n    int oldValue = values[fieldIndex];\n    int newValue = field.add(oldValue, valueToAdd);\n    newValues[fieldIndex] = newValue;\n\n    // Check for leap year and February 29\n    if (fieldType == DateTimeFieldType.monthOfYear() && \n        newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 &&\n        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29) {\n        int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n        boolean isLeapYear = ISOChronology.getInstanceUTC().isLeapYear(year);\n        if (!isLeapYear) {\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n        }\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c3750659 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,43 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+import org.joda.time.*;\n+import org.joda.time.chrono.ISOChronology;\n+\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // Create a copy of the values array\n+    int[] newValues = values.clone();\n+\n+    // Add the valueToAdd to the specified field\n+    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"Invalid field index: \" + fieldIndex);\n+    }\n+    DateTimeField field = fieldType.getField(ISOChronology.getInstanceUTC());\n+    int oldValue = values[fieldIndex];\n+    int newValue = field.add(oldValue, valueToAdd);\n+    newValues[fieldIndex] = newValue;\n+\n+    // Check for leap year and February 29\n+    if (fieldType == DateTimeFieldType.monthOfYear() && \n+        newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 &&\n+        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29) {\n+        int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n+        boolean isLeapYear = ISOChronology.getInstanceUTC().isLeapYear(year);\n+        if (!isLeapYear) {\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n         }\n     }\n \n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}