{
    "patch": ">>> [ INFILL ] <<<\n            if (savedFields[0].iField.getType() != DateTimeFieldType.year()) {\n                throw e;\n            }\n            String message = e.getMessage();\n            if (message != null && message.startsWith(\"Value \")) {\n                int newValue = Integer.parseInt(message.substring(6));\n                DurationField years = DurationFieldType.years().getField(iChrono);\n                ValueRange range = years.getRangeDurationField().getRange();\n                newValue = range.checkValue(newValue, savedFields[0].iField.getType().getName());\n                saveField(DateTimeFieldType.year(), newValue);\n                for (int i = 1; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } else {\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..426154c0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+>>> [ INFILL ] <<<\n+            if (savedFields[0].iField.getType() != DateTimeFieldType.year()) {\n+                throw e;\n+            }\n+            String message = e.getMessage();\n+            if (message != null && message.startsWith(\"Value \")) {\n+                int newValue = Integer.parseInt(message.substring(6));\n+                DurationField years = DurationFieldType.years().getField(iChrono);\n+                ValueRange range = years.getRangeDurationField().getRange();\n+                newValue = range.checkValue(newValue, savedFields[0].iField.getType().getName());\n+                saveField(DateTimeFieldType.year(), newValue);\n+                for (int i = 1; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } else {\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}