{
    "patch": "// Maybe STRING, GET, SET\nswitch (child.getToken()) {\n  case STRING:\n    // We should never see a mix of numbers and strings.\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n    break;\n  case GETPROP:\n    Node nameNode = child.getLastChild();\n    String propName = nameNode.getString();\n\n    Property getProp = getProperty(propName);\n    if (!getProp.scheduleRenaming(nameNode,\n                               processProperty(t, getProp, null, null))) {\n      if (propertiesToErrorFor.containsKey(propName)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), nameNode,\n            propertiesToErrorFor.get(propName),\n            Warnings.INVALIDATION, propName, null, n.toString(), \"\"));\n      }\n    }\n    break;\n  case GETELEM:\n    Node getElemChild = child.getFirstChild();\n    String indexPropName = getElemChild.getString();\n    Property indexProp = getProperty(indexPropName);\n    if (!indexProp.scheduleRenaming(getElemChild,\n                               processProperty(t, indexProp, null, null))) {\n      if (propertiesToErrorFor.containsKey(indexPropName)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), getElemChild,\n            propertiesToErrorFor.get(indexPropName),\n            Warnings.INVALIDATION, indexPropName, null,\n            n.toString(), \"\"));\n      }\n    }\n    break;\n  default:\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..14cae49f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,56 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+// Maybe STRING, GET, SET\n+switch (child.getToken()) {\n+  case STRING:\n+    // We should never see a mix of numbers and strings.\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child,\n+                               processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      }\n+    }\n+    break;\n+  case GETPROP:\n+    Node nameNode = child.getLastChild();\n+    String propName = nameNode.getString();\n+\n+    Property getProp = getProperty(propName);\n+    if (!getProp.scheduleRenaming(nameNode,\n+                               processProperty(t, getProp, null, null))) {\n+      if (propertiesToErrorFor.containsKey(propName)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), nameNode,\n+            propertiesToErrorFor.get(propName),\n+            Warnings.INVALIDATION, propName, null, n.toString(), \"\"));\n+      }\n+    }\n+    break;\n+  case GETELEM:\n+    Node getElemChild = child.getFirstChild();\n+    String indexPropName = getElemChild.getString();\n+    Property indexProp = getProperty(indexPropName);\n+    if (!indexProp.scheduleRenaming(getElemChild,\n+                               processProperty(t, indexProp, null, null))) {\n+      if (propertiesToErrorFor.containsKey(indexPropName)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), getElemChild,\n+            propertiesToErrorFor.get(indexPropName),\n+            Warnings.INVALIDATION, indexPropName, null,\n+            n.toString(), \"\"));\n+      }\n+    }\n+    break;\n+  default:\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}