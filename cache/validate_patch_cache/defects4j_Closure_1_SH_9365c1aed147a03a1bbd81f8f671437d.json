{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    // If function is an accessor function, then don't remove args.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteUnreferencedChecker.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArgToRemove = argList.getLastChild();\n      while (lastArgToRemove != null) {\n        String argName = lastArgToRemove.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArgToRemove);\n          compiler.reportCodeChange();\n          // If the `arguments` object is used, we just bail now and leave all arguments.\n          if (function.getLastChild().isName() && function.getLastChild().getString().equals(\"arguments\")) {\n            removeUnreferencedArguments(fnScope);\n            return;\n          }\n          lastArgToRemove = argList.getLastChild();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteUnreferencedChecker.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..812eb9d3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    // If function is an accessor function, then don't remove args.\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteUnreferencedChecker.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArgToRemove = argList.getLastChild();\n+      while (lastArgToRemove != null) {\n+        String argName = lastArgToRemove.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArgToRemove);\n+          compiler.reportCodeChange();\n+          // If the `arguments` object is used, we just bail now and leave all arguments.\n+          if (function.getLastChild().isName() && function.getLastChild().getString().equals(\"arguments\")) {\n+            removeUnreferencedArguments(fnScope);\n+            return;\n+          }\n+          lastArgToRemove = argList.getLastChild();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteUnreferencedChecker.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}