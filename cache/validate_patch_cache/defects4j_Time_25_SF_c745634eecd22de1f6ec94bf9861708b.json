{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetAtEstimate = getOffset(instantLocal);\n    long adjustedInstant = instantLocal - offsetAtEstimate;\n    int offsetAtAdjusted = getOffset(adjustedInstant);\n\n    // Check for an overlap.\n    if (offsetAtEstimate > offsetAtAdjusted) {\n        long transitionNext = nextTransition(adjustedInstant);\n        long transitionPrev = previousTransition(adjustedInstant);\n\n        if (transitionNext == (instantLocal - offsetAtEstimate)) {\n            // We are in the gap just before the transition to the new offset.\n            return offsetAtAdjusted;\n        } else if (transitionPrev == (instantLocal - offsetAtEstimate - 1)) {\n            // We are in the overlap just after the transition from the old offset.\n            return offsetAtAdjusted;\n        } else {\n            // No overlap. Return the adjusted offset.\n            return offsetAtAdjusted;\n        }\n    } else if (offsetAtEstimate < offsetAtAdjusted) {\n        long transitionNext = nextTransition(instantLocal);\n        long transitionPrev = previousTransition(instantLocal);\n\n        if (transitionNext == (adjustedInstant - offsetAtAdjusted)) {\n            // We are in the overlap just before the transition to the new offset.\n            return offsetAtAdjusted;\n        } else if (transitionPrev == (adjustedInstant - offsetAtAdjusted - 1)) {\n            // We are in the gap just after the transition from the old offset.\n            return offsetAtAdjusted;\n        } else {\n            // No overlap. Return the adjusted offset.\n            return offsetAtAdjusted;\n        }\n    } else {\n        // The offset estimate is correct.\n        return offsetAtAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7cc11505 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetAtEstimate = getOffset(instantLocal);\n+    long adjustedInstant = instantLocal - offsetAtEstimate;\n+    int offsetAtAdjusted = getOffset(adjustedInstant);\n+\n+    // Check for an overlap.\n+    if (offsetAtEstimate > offsetAtAdjusted) {\n+        long transitionNext = nextTransition(adjustedInstant);\n+        long transitionPrev = previousTransition(adjustedInstant);\n+\n+        if (transitionNext == (instantLocal - offsetAtEstimate)) {\n+            // We are in the gap just before the transition to the new offset.\n+            return offsetAtAdjusted;\n+        } else if (transitionPrev == (instantLocal - offsetAtEstimate - 1)) {\n+            // We are in the overlap just after the transition from the old offset.\n+            return offsetAtAdjusted;\n+        } else {\n+            // No overlap. Return the adjusted offset.\n+            return offsetAtAdjusted;\n         }\n-        return offsetAdjusted;\n+    } else if (offsetAtEstimate < offsetAtAdjusted) {\n+        long transitionNext = nextTransition(instantLocal);\n+        long transitionPrev = previousTransition(instantLocal);\n+\n+        if (transitionNext == (adjustedInstant - offsetAtAdjusted)) {\n+            // We are in the overlap just before the transition to the new offset.\n+            return offsetAtAdjusted;\n+        } else if (transitionPrev == (adjustedInstant - offsetAtAdjusted - 1)) {\n+            // We are in the gap just after the transition from the old offset.\n+            return offsetAtAdjusted;\n+        } else {\n+            // No overlap. Return the adjusted offset.\n+            return offsetAtAdjusted;\n+        }\n+    } else {\n+        // The offset estimate is correct.\n+        return offsetAtAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}