{
    "patch": "import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class RegularizedGammaFunction {\n\n    public static double regularizedGamma(double a, double x) {\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be positive\");\n        }\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive\");\n        }\n        double epsilon = 1e-9;\n        double maxIterations = 100;\n        double sum = 0.0;\n        int i = 0;\n        double term = 1 / a;\n\n        while (i < maxIterations && Double.compare(term, 0.0) > 0) {\n            sum += term;\n            i++;\n            term *= x / (a + i);\n        }\n\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n\n    public static double logGamma(double x) {\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0 / 30.0;\n        tmp += Math.log(2.5066282746310005);\n        ser -= (281.0 / 1050.0) / (x * x);\n        ser += (691.0 / 360360.0) / (x * x * x * x);\n        ser -= (1.0 / 3600.0) / (x * x * x * x * x * x);\n        ser += (3617.0 / 122400.0) / (x * x * x * x * x * x * x * x);\n\n        return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n    }\n\n    @Test\n    public void testRegularizedGammaPositivePositive() {\n        assertEquals(0.632120558828558, regularizedGamma(0.5, 1.0), 1e-9);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c1e5a736c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,50 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+public class RegularizedGammaFunction {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"x must be positive\");\n+        }\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive\");\n+        }\n+        double epsilon = 1e-9;\n+        double maxIterations = 100;\n+        double sum = 0.0;\n+        int i = 0;\n+        double term = 1 / a;\n+\n+        while (i < maxIterations && Double.compare(term, 0.0) > 0) {\n+            sum += term;\n+            i++;\n+            term *= x / (a + i);\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+\n+    public static double logGamma(double x) {\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0 / 30.0;\n+        tmp += Math.log(2.5066282746310005);\n+        ser -= (281.0 / 1050.0) / (x * x);\n+        ser += (691.0 / 360360.0) / (x * x * x * x);\n+        ser -= (1.0 / 3600.0) / (x * x * x * x * x * x);\n+        ser += (3617.0 / 122400.0) / (x * x * x * x * x * x * x * x);\n+\n+        return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+    }\n+\n+    @Test\n+    public void testRegularizedGammaPositivePositive() {\n+        assertEquals(0.632120558828558, regularizedGamma(0.5, 1.0), 1e-9);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}