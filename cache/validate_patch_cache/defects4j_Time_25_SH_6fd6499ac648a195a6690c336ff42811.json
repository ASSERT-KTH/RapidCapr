{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    int nextLocalOffset = getOffset(nextLocal);\n    int nextAdjustedOffset = getOffset(nextAdjusted);\n\n    if (nextLocalOffset == nextAdjustedOffset) {\n        return offsetAdjusted;\n    } else {\n        long diffLocal = getRoundedDifference(nextLocal, instantAdjusted);\n        long diffAdjusted = getRoundedDifference(nextAdjusted, instantLocal - offsetAdjusted);\n        long currentTime = (diffLocal < diffAdjusted) ? instantAdjusted : instantLocal - offsetAdjusted;\n\n        if (nextLocalOffset < nextAdjustedOffset) {\n            int currentOffset = (diffLocal < diffAdjusted) ? offsetLocal : offsetAdjusted;\n            if (getOffset(nextLocal) < currentOffset) {\n                return currentOffset;\n            } else {\n                return offsetLocal;\n            }\n        } else {\n            int currentOffset = (diffLocal < diffAdjusted) ? offsetLocal : offsetAdjusted;\n            if (getOffset(nextAdjusted) > currentOffset) {\n                return currentOffset;\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..752ca861 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    int nextLocalOffset = getOffset(nextLocal);\n+    int nextAdjustedOffset = getOffset(nextAdjusted);\n+\n+    if (nextLocalOffset == nextAdjustedOffset) {\n+        return offsetAdjusted;\n+    } else {\n+        long diffLocal = getRoundedDifference(nextLocal, instantAdjusted);\n+        long diffAdjusted = getRoundedDifference(nextAdjusted, instantLocal - offsetAdjusted);\n+        long currentTime = (diffLocal < diffAdjusted) ? instantAdjusted : instantLocal - offsetAdjusted;\n+\n+        if (nextLocalOffset < nextAdjustedOffset) {\n+            int currentOffset = (diffLocal < diffAdjusted) ? offsetLocal : offsetAdjusted;\n+            if (getOffset(nextLocal) < currentOffset) {\n+                return currentOffset;\n+            } else {\n+                return offsetLocal;\n+            }\n+        } else {\n+            int currentOffset = (diffLocal < diffAdjusted) ? offsetLocal : offsetAdjusted;\n+            if (getOffset(nextAdjusted) > currentOffset) {\n+                return currentOffset;\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}