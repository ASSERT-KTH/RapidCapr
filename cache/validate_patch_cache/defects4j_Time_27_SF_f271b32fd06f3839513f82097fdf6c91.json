{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object last = elementPairs.get(0);\n        if (last instanceof Separator) {\n            Separator sep = (Separator) last;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    } else if (size >= 2) {\n        Object first = elementPairs.get(0);\n        if (first instanceof Separator) {\n            Separator sep = (Separator) first;\n            List<Object> remainder = new ArrayList<>(elementPairs.subList(1, size));\n            return mergeSeparators(sep, remainder, notPrinter, notParser);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n    throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n}\n\nprivate static PeriodFormatter mergeSeparators(Separator sep, List<Object> remainder, boolean notPrinter, boolean notParser) {\n    int size = remainder.size();\n    if (size == 1) {\n        Object last = remainder.get(0);\n        if (last instanceof Separator) {\n            Separator newsep = (Separator) last;\n            return newsep.isComplete() ? new PeriodFormatter(newsep, newsep)\n                : new PeriodFormatter(sep, newsep);\n        } else {\n            Object[] comp = createComposite(remainder);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    } else if (size >= 2) {\n        Object first = remainder.get(0);\n        if (first instanceof Separator) {\n            List<Object> newremainder = new ArrayList<>(remainder.subList(1, size));\n            PeriodFormatter f = mergeSeparators((Separator) first, newremainder, notPrinter, notParser);\n            Separator newsep = sep.finish(f.getPrinter(), f.getParser());\n            return newsep.isComplete() ? new PeriodFormatter(newsep, newsep)\n                : new PeriodFormatter(sep, newsep);\n        } else {\n            Object[] comp = createComposite(remainder);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n    throw new IllegalStateException(\"Invalid elementPairs: \" + remainder);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b2866358 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,85 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1) {\n+        Object last = elementPairs.get(0);\n+        if (last instanceof Separator) {\n+            Separator sep = (Separator) last;\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    } else if (size >= 2) {\n+        Object first = elementPairs.get(0);\n+        if (first instanceof Separator) {\n+            Separator sep = (Separator) first;\n+            List<Object> remainder = new ArrayList<>(elementPairs.subList(1, size));\n+            return mergeSeparators(sep, remainder, notPrinter, notParser);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n     }\n+    throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n+}\n+\n+private static PeriodFormatter mergeSeparators(Separator sep, List<Object> remainder, boolean notPrinter, boolean notParser) {\n+    int size = remainder.size();\n+    if (size == 1) {\n+        Object last = remainder.get(0);\n+        if (last instanceof Separator) {\n+            Separator newsep = (Separator) last;\n+            return newsep.isComplete() ? new PeriodFormatter(newsep, newsep)\n+                : new PeriodFormatter(sep, newsep);\n+        } else {\n+            Object[] comp = createComposite(remainder);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    } else if (size >= 2) {\n+        Object first = remainder.get(0);\n+        if (first instanceof Separator) {\n+            List<Object> newremainder = new ArrayList<>(remainder.subList(1, size));\n+            PeriodFormatter f = mergeSeparators((Separator) first, newremainder, notPrinter, notParser);\n+            Separator newsep = sep.finish(f.getPrinter(), f.getParser());\n+            return newsep.isComplete() ? new PeriodFormatter(newsep, newsep)\n+                : new PeriodFormatter(sep, newsep);\n+        } else {\n+            Object[] comp = createComposite(remainder);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    }\n+    throw new IllegalStateException(\"Invalid elementPairs: \" + remainder);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}