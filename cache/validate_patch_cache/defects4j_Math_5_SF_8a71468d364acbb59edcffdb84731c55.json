{
    "patch": "    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double normSq = real * real + imaginary * imaginary;\n        if (normSq == 0.0) {\n            return isNaN ? NaN : INF;\n        }\n\n        return new Complex(real / normSq, -imaginary / normSq);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..5687a1ea9 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -301,23 +301,12 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n             return NaN;\n         }\n \n-        if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n-        }\n-\n-        if (isInfinite) {\n-            return ZERO;\n+        double normSq = real * real + imaginary * imaginary;\n+        if (normSq == 0.0) {\n+            return isNaN ? NaN : INF;\n         }\n \n-        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n-            double q = real / imaginary;\n-            double scale = 1. / (real * q + imaginary);\n-            return createComplex(scale * q, -scale);\n-        } else {\n-            double q = imaginary / real;\n-            double scale = 1. / (imaginary * q + real);\n-            return createComplex(scale, -scale * q);\n-        }\n+        return new Complex(real / normSq, -imaginary / normSq);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}