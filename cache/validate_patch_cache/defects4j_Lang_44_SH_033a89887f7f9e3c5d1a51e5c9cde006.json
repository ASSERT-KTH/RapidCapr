{
    "patch": "        // Hex Test\n        if (val.matches(\"-?0x[0-9a-f]+\")) {\n            return createInteger(val);\n        }\n        // since 1.8 unary operator \"--\" is allowed for BigDecimal even though it doesn't respect the Javadoc\n        // this test is just emulating that behavior and it is necessary due to NumberUtils.createNumber usage\n        if (val.startsWith(\"--\")) {\n            return null;\n        }\n        // handle other cases\n        return createBigDecimal(val.trim());",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..1cb67485 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,17 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        // Hex Test\n+        if (val.matches(\"-?0x[0-9a-f]+\")) {\n+            return createInteger(val);\n+        }\n+        // since 1.8 unary operator \"--\" is allowed for BigDecimal even though it doesn't respect the Javadoc\n+        // this test is just emulating that behavior and it is necessary due to NumberUtils.createNumber usage\n+        if (val.startsWith(\"--\")) {\n+            return null;\n+        }\n+        // handle other cases\n+        return createBigDecimal(val.trim());\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}