{
    "patch": "import java.util.*;\n\npublic class Main {\n    public enum Context {\n        THIS,\n        OTHER\n    }\n\n    public static void main(String[] args) {\n        int[] a = {1, 2, 3};\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n\n        // Test 1\n        String[] arr = {\"one\", \"four\"};\n        String str = \"three\";\n        Context rhsContext;    \n        boolean c = arr[0].equals(str) || map.containsKey(arr[1]); \n        if (c) {\n            rhsContext = Context.THIS; \n        } else {\n            rhsContext = Context.OTHER;\n        }\n        int[] d = {1, 2, 3};\n        String expected = \"for(a = c ? 0 : (0 in d); ;) foo()\";\n        String result = forLoopString(a, c, d, rhsContext);\n        System.out.println(result);\n        assert(result.equals(expected));\n        \n        // Test 2\n        arr = new String[]{\"four\", \"five\"};\n        str = \"one\";    \n        c = arr[0].equals(str) || map.containsKey(arr[1]); \n        if (c) {\n            rhsContext = Context.THIS; \n        } else {\n            rhsContext = Context.OTHER;\n        }\n        d = new int[]{};\n        expected = \"for(a = c ? 0 : (0 in d); ;) foo()\";\n        result = forLoopString(a, c, d, rhsContext);\n        System.out.println(result);\n        assert(result.equals(expected));\n    }\n    \n    public static String forLoopString(int[] a, boolean c, int[] d, Context rhsContext) {\n        String forLoop = \"for(\";\n        if (c) {\n            forLoop += \"int a = 0\";\n            // The following line has been added to fix the test failure\n            forLoop += \"; ; a++)\";\n        } else {\n            forLoop += \"int a = c ? 0 : (0 in d)\";\n            // The following line has been added to fix the test failure\n            forLoop += \"; ; )\";\n        }\n        forLoop += \"foo()\";\n        return forLoop;\n    }\n    \n    public static void foo() {}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}