{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString;\n    Node joinNode = right;\n\n    // If the join argument is not a string literal, but a simple identifier\n    // or a dot operator that refers to a string constant, we can fold it\n    // accordingly. Otherwise, we should not attempt to fold it and return early.\n    switch (joinNode.getType()) {\n        case Token.NAME:\n            if (!t.getScope().getVar(joinNode.getString()).isDeclaredOrInferred()) {\n                return;\n            }\n            joinString = NodeUtil.getStringValue(t.getScope().getVar(joinNode.getString()).getInitialValue());\n            if (joinString == null) {\n                return;\n            }\n            break;\n        case Token.GETPROP:\n            if (!joinNode.getLastChild().getString().equals(\"toString\")) {\n                return;\n            }\n            Node target = joinNode.getFirstChild();\n            if (!NodeUtil.isImmutableValue(target) || !target.getString().equals(\"String\")) {\n                return;\n            }\n            joinString = NodeUtil.getStringValue(target);\n            break;\n        case Token.STRING:\n            joinString = NodeUtil.getStringValue(joinNode);\n            break;\n        default:\n            return;\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..7ab341c8 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,7 +1458,7 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n@@ -1472,7 +1472,39 @@ class FoldConstants extends AbstractPostOrderCallback\n       return;\n     }\n \n-    String joinString = NodeUtil.getStringValue(right);\n+    String joinString;\n+    Node joinNode = right;\n+\n+    // If the join argument is not a string literal, but a simple identifier\n+    // or a dot operator that refers to a string constant, we can fold it\n+    // accordingly. Otherwise, we should not attempt to fold it and return early.\n+    switch (joinNode.getType()) {\n+        case Token.NAME:\n+            if (!t.getScope().getVar(joinNode.getString()).isDeclaredOrInferred()) {\n+                return;\n+            }\n+            joinString = NodeUtil.getStringValue(t.getScope().getVar(joinNode.getString()).getInitialValue());\n+            if (joinString == null) {\n+                return;\n+            }\n+            break;\n+        case Token.GETPROP:\n+            if (!joinNode.getLastChild().getString().equals(\"toString\")) {\n+                return;\n+            }\n+            Node target = joinNode.getFirstChild();\n+            if (!NodeUtil.isImmutableValue(target) || !target.getString().equals(\"String\")) {\n+                return;\n+            }\n+            joinString = NodeUtil.getStringValue(target);\n+            break;\n+        case Token.STRING:\n+            joinString = NodeUtil.getStringValue(joinNode);\n+            break;\n+        default:\n+            return;\n+    }\n+\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n@@ -1490,63 +1522,6 @@ class FoldConstants extends AbstractPostOrderCallback\n           foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n           sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n-  }\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}