{
    "patch": "      // or @override annotation or get lent to a prototype.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n      if (n.isQualifiedName()) {\n        // Functions retrieved from qualified names, such as google.maps.Map,\n        // are properties of the objects and should not be traversed, but do\n        // not have the same annotations as the functions themselves. So skip\n        // any qualified names, but don't stop recursing.\n        return false;\n      }\n      Node enclosing = NodeUtil.getEnclosingNode(n, new NodeUtil.MatchNodeType(Token.ASSIGN));\n      if (enclosing != null) {\n        // Don't traverse functions that are getting lent to a prototype.\n        Node lhs = enclosing.getFirstChild();\n        if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN ||\n\n      // object literal keys\n          pType == Token.STRING || pType == Token.NUMBER || pType == Token.GET_PROP)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ed535fb6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,38 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // or @override annotation or get lent to a prototype.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+        return false;\n+      }\n+      if (n.isQualifiedName()) {\n+        // Functions retrieved from qualified names, such as google.maps.Map,\n+        // are properties of the objects and should not be traversed, but do\n+        // not have the same annotations as the functions themselves. So skip\n+        // any qualified names, but don't stop recursing.\n+        return false;\n+      }\n+      Node enclosing = NodeUtil.getEnclosingNode(n, new NodeUtil.MatchNodeType(Token.ASSIGN));\n+      if (enclosing != null) {\n+        // Don't traverse functions that are getting lent to a prototype.\n+        Node lhs = enclosing.getFirstChild();\n+        if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN ||\n+\n+      // object literal keys\n+          pType == Token.STRING || pType == Token.NUMBER || pType == Token.GET_PROP)) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}