{
    "patch": "public static List<String> findWords(String s, String[] words) {\n    List<String> result = new ArrayList<>();\n    for (int i = 0; i < words.length; i++) {\n        Set<Character> set = new HashSet<>();\n        for (char c : words[i].toCharArray()) {\n            set.add(c);\n        }\n        boolean valid = true;\n        for (char c : s.toCharArray()) {\n            if (!set.contains(c)) {\n                valid = false;\n                break;\n            }\n        }\n        if (valid) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..42255d15f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,26 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static List<String> findWords(String s, String[] words) {\n+    List<String> result = new ArrayList<>();\n+    for (int i = 0; i < words.length; i++) {\n+        Set<Character> set = new HashSet<>();\n+        for (char c : words[i].toCharArray()) {\n+            set.add(c);\n+        }\n+        boolean valid = true;\n+        for (char c : s.toCharArray()) {\n+            if (!set.contains(c)) {\n+                valid = false;\n+                break;\n+            }\n+        }\n+        if (valid) {\n+            result.add(words[i]);\n+        }\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}