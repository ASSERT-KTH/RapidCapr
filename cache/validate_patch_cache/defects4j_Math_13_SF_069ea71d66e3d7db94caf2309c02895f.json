{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n   final int n = m.getRowDimension();\n   final double maxMemory = /*specify maximum memory for eigendecomposition here*/;\n   final double safeMemory = maxMemory - 2 * n * n;\n   \n   if (Runtime.getRuntime().maxMemory() > safeMemory) {\n       final EigenDecomposition dec = new EigenDecomposition(m);\n       return dec.getSquareRoot();\n   } else {\n       // use an alternate algorithm when eigendecomposition uses too much memory\n       return alternateAlgorithm(m);\n   }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7ff9720f5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+   final int n = m.getRowDimension();\n+   final double maxMemory = /*specify maximum memory for eigendecomposition here*/;\n+   final double safeMemory = maxMemory - 2 * n * n;\n+   \n+   if (Runtime.getRuntime().maxMemory() > safeMemory) {\n+       final EigenDecomposition dec = new EigenDecomposition(m);\n+       return dec.getSquareRoot();\n+   } else {\n+       // use an alternate algorithm when eigendecomposition uses too much memory\n+       return alternateAlgorithm(m);\n+   }\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}