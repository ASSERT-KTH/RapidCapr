{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      if (parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      } else {\n        // This is a var_args function\n        List<Node> varArgs = new ArrayList<>();\n        while (arguments.hasNext()) {\n          varArgs.add(arguments.next());\n        }\n        checkVarArgs(t, varArgs, functionType.getRestFormals(), call, ordinal);\n        break;\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n\n  private void checkVarArgs(NodeTraversal t, List<Node> args, Node restFormal,\n      Node call, int ordinal) {\n    if (args.isEmpty()) {\n      // nothing to check\n      return;\n    }\n    for (Node arg : args) {\n      validator.expectArgumentMatchesParameter(t, arg, getJSType(arg), getJSType(restFormal),\n          call, ordinal++);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..4255abce 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,16 +1405,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n+    while (arguments.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n+      if (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+      } else {\n+        // This is a var_args function\n+        List<Node> varArgs = new ArrayList<>();\n+        while (arguments.hasNext()) {\n+          varArgs.add(arguments.next());\n+        }\n+        checkVarArgs(t, varArgs, functionType.getRestFormals(), call, ordinal);\n+        break;\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n@@ -1429,6 +1437,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     }\n   }\n \n+  private void checkVarArgs(NodeTraversal t, List<Node> args, Node restFormal,\n+      Node call, int ordinal) {\n+    if (args.isEmpty()) {\n+      // nothing to check\n+      return;\n+    }\n+    for (Node arg : args) {\n+      validator.expectArgumentMatchesParameter(t, arg, getJSType(arg), getJSType(restFormal),\n+          call, ordinal++);\n+    }\n+  }\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}