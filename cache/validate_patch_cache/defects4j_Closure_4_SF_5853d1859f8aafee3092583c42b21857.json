{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n  boolean resolvedViaRegistry = resolveViaRegistry(errorReporter, enclosingScope);\n\n  if (!resolvedViaRegistry && detectImplicitPrototypeCycle()) {\n    handleTypeCycle(errorReporter);\n  }\n\n  if (resolvedViaRegistry) {\n    super.resolveInternal(errorReporter, enclosingScope);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  resolveViaProperties(errorReporter, enclosingScope);\n\n  if (!isResolved() && detectImplicitPrototypeCycle()) {\n    errorReporter.warning(\n        \"Detected an implicit prototype cycle in type \" + this.getDisplayName() + \".\");\n    setResolved();\n  }\n\n  super.resolveInternal(errorReporter, enclosingScope);\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..86257d5b 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,35 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n+  boolean resolvedViaRegistry = resolveViaRegistry(errorReporter, enclosingScope);\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  if (!resolvedViaRegistry && detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(errorReporter);\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  if (resolvedViaRegistry) {\n+    super.resolveInternal(errorReporter, enclosingScope);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+  resolveViaProperties(errorReporter, enclosingScope);\n+\n+  if (!isResolved() && detectImplicitPrototypeCycle()) {\n+    errorReporter.warning(\n+        \"Detected an implicit prototype cycle in type \" + this.getDisplayName() + \".\");\n+    setResolved();\n+  }\n+\n+  super.resolveInternal(errorReporter, enclosingScope);\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n   }\n \n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: method warning in interface ErrorReporter cannot be applied to given types;",
    "test_result": "ERROR"
}