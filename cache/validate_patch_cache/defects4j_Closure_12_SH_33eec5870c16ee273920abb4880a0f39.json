{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n        List<Node> children = cfgNode.getChildren();\n        for (Node child : children) {\n            if (child.getKind().equals(Node.Kind.CATCH)) {\n                return true;\n            }\n            boolean childHasExceptionHandler = hasExceptionHandler(child);\n            if (childHasExceptionHandler) {\n                return true;\n            }\n        }\n\n        return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..34d804a2 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,20 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+        List<Node> children = cfgNode.getChildren();\n+        for (Node child : children) {\n+            if (child.getKind().equals(Node.Kind.CATCH)) {\n+                return true;\n+            }\n+            boolean childHasExceptionHandler = hasExceptionHandler(child);\n+            if (childHasExceptionHandler) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}