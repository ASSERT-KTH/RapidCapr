{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            // Fixed: compute year from start of ISO weekyear\n            int year = 0;\n            int weekyear = 0;\n            for (SavedField sf : savedFields) {\n                DateTimeField field = sf.iField;\n                int value = sf.iValue;\n                if (field != null) {\n                    if (field == iChrono.year()) {\n                        year = value;\n                    } else if (field == iChrono.weekyear()) {\n                        weekyear = value;\n                    }\n                }\n            }\n            if (weekyear != 0 && year != 0) {\n                DateTimeField woy = iChrono.weekOfWeekyear();\n                LocalDate date = new LocalDate(weekyear, 1, 1, iChrono);\n                int dow = date.getDayOfWeek();\n                if (dow > 1) {\n                    // adjust to the immediate following Monday\n                    date = date.plusDays(8 - dow);\n                }\n                int week = savedFields[0].iField.get(getChronology().getMillis(date), iChrono.weekyear());\n                year = weekyear - 1;\n                int weekShift = week > 1 ? week - 1 : 52;\n                LocalDate startOfYearWeek = new LocalDate(year, 1, 1, iChrono);\n                int daysToMillis = (int) startOfYearWeek.toDateTimeAtStartOfDay().getMillis();\n                int millisToAdd = ((weekShift * 7) - 1) * DateTimeConstants.MILLIS_PER_DAY;\n                iSavedFields[count++] = new SavedField(woy, week);\n                iSavedFields[count++] = new SavedField(iChrono.year(), year);\n                if (iOffset != 0) {\n                    millisToAdd -= iOffset;\n                    iSavedFields[count++] = new SavedField(DateTimeFieldType.millisOfSecond(), iOffset);\n                }\n                savedFields = iSavedFields;\n                if (count > iSavedFields.length) {\n                    iSavedFields = new SavedField[count + 8];\n                }\n\n                System.arraycopy(savedFields, 0, iSavedFields, 0, count);\n                return iChrono.getDateTimeMillis(year, 1, 1, 0) + daysToMillis + millisToAdd;\n            }\n        }\n    }\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7a8ea024 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,91 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            // Fixed: compute year from start of ISO weekyear\n+            int year = 0;\n+            int weekyear = 0;\n+            for (SavedField sf : savedFields) {\n+                DateTimeField field = sf.iField;\n+                int value = sf.iValue;\n+                if (field != null) {\n+                    if (field == iChrono.year()) {\n+                        year = value;\n+                    } else if (field == iChrono.weekyear()) {\n+                        weekyear = value;\n+                    }\n+                }\n             }\n-        }\n+            if (weekyear != 0 && year != 0) {\n+                DateTimeField woy = iChrono.weekOfWeekyear();\n+                LocalDate date = new LocalDate(weekyear, 1, 1, iChrono);\n+                int dow = date.getDayOfWeek();\n+                if (dow > 1) {\n+                    // adjust to the immediate following Monday\n+                    date = date.plusDays(8 - dow);\n+                }\n+                int week = savedFields[0].iField.get(getChronology().getMillis(date), iChrono.weekyear());\n+                year = weekyear - 1;\n+                int weekShift = week > 1 ? week - 1 : 52;\n+                LocalDate startOfYearWeek = new LocalDate(year, 1, 1, iChrono);\n+                int daysToMillis = (int) startOfYearWeek.toDateTimeAtStartOfDay().getMillis();\n+                int millisToAdd = ((weekShift * 7) - 1) * DateTimeConstants.MILLIS_PER_DAY;\n+                iSavedFields[count++] = new SavedField(woy, week);\n+                iSavedFields[count++] = new SavedField(iChrono.year(), year);\n+                if (iOffset != 0) {\n+                    millisToAdd -= iOffset;\n+                    iSavedFields[count++] = new SavedField(DateTimeFieldType.millisOfSecond(), iOffset);\n+                }\n+                savedFields = iSavedFields;\n+                if (count > iSavedFields.length) {\n+                    iSavedFields = new SavedField[count + 8];\n+                }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                System.arraycopy(savedFields, 0, iSavedFields, 0, count);\n+                return iChrono.getDateTimeMillis(year, 1, 1, 0) + daysToMillis + millisToAdd;\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    }\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}