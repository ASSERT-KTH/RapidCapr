{
    "patch": "        if (sign >= 0) {\n            // check if either value is close to a zero\n            double absYMin = Math.abs(yMin);\n            double absYMax = Math.abs(yMax);\n            if (absYMin <= absYMax) {\n                if (absYMin < 1e-15) {\n                    ret = min;\n                }\n            } else {\n                if (absYMax < 1e-15) {\n                    ret = max;\n                }\n            }\n\n            if (Double.isNaN(ret)) {\n                // neither value is close to zero and min and max do not bracket root.\n                throw new IllegalArgumentException\n                        (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n            }\n        } else {",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..d9454907c 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,28 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n         if (sign >= 0) {\n             // check if either value is close to a zero\n+            double absYMin = Math.abs(yMin);\n+            double absYMax = Math.abs(yMax);\n+            if (absYMin <= absYMax) {\n+                if (absYMin < 1e-15) {\n+                    ret = min;\n+                }\n+            } else {\n+                if (absYMax < 1e-15) {\n+                    ret = max;\n+                }\n+            }\n+\n+            if (Double.isNaN(ret)) {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n+                        (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            }\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n-\n-        return ret;\n-    }\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}