{
    "patch": "public static double regularizedGammaIncomplete(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid input arguments\");\n    }\n\n    double gammaA = Gamma.gamma(a);\n\n    double incompleteGamma = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            return 2.0 * n + 1.0 - a + x;\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return n * (a - n);\n        }\n    }.evaluate(x / a) * Math.exp(-x + a * Math.log(x) - gammaA) / a;\n\n    return incompleteGamma > 1.0 ? 1.0 : incompleteGamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bc69eeae0 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,27 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaIncomplete(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments\");\n+    }\n+\n+    double gammaA = Gamma.gamma(a);\n+\n+    double incompleteGamma = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            return 2.0 * n + 1.0 - a + x;\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return n * (a - n);\n+        }\n+    }.evaluate(x / a) * Math.exp(-x + a * Math.log(x) - gammaA) / a;\n+\n+    return incompleteGamma > 1.0 ? 1.0 : incompleteGamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}