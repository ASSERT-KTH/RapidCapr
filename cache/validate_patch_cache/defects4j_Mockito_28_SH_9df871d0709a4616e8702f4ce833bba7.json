{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object bestMatch = null;\n        for (Object mock : mocks) {\n            if (field.getType().isAssignableFrom(mock.getClass()) && (bestMatch == null || mock.getClass().isAssignableFrom(bestMatch.getClass()))) {\n                bestMatch = mock;\n            }\n        }\n        if (bestMatch != null) {\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, field.getType().cast(bestMatch));\n                mocks.remove(bestMatch);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..eaacded5a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object bestMatch = null;\n+        for (Object mock : mocks) {\n+            if (field.getType().isAssignableFrom(mock.getClass()) && (bestMatch == null || mock.getClass().isAssignableFrom(bestMatch.getClass()))) {\n+                bestMatch = mock;\n+            }\n+        }\n+        if (bestMatch != null) {\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, field.getType().cast(bestMatch));\n+                mocks.remove(bestMatch);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+            }\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}