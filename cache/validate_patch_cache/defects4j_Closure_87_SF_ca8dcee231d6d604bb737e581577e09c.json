{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node expr = n.getFirstChild();\n        // Check if the block has a single statement, which is an expression.\n        // Don't fold object literals, functions, regex, or empty functions without arguments.\n        if (!NodeUtil.isStatementBlock(n) &&\n                NodeUtil.isExpressionNode(expr) &&\n                !NodeUtil.isFunctionExpression(expr) &&\n                expr.getType() != Token.OBJECTLIT &&\n                expr.getType() != Token.FUNCTION &&\n                (!NodeUtil.isUnaryExpression(expr, Token.VOID) ||\n                        (expr.getFirstChild() != null && expr.getFirstChild().getType() != Token.NAME))) {\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n                // Don't fold if the parent is a \"for\" statement\n                if (parent.getParent() != null && parent.getParent().getType() == Token.FOR) {\n                    return false;\n                }\n                // Don't fold if the parent has a label\n                if (parent.getParent() != null && parent.getParent().getType() == Token.LABEL) {\n                    return false;\n                }\n                // Don't fold if it's a part of an expression sequence\n                if (parent.getParent() != null && parent.getParent().getType() == Token.COMMA) {\n                    return false;\n                }\n                // Don't fold if the parent is an \"if\" statement with a non-integer constant condition\n                if (parent.getParent() != null && parent.getParent().getType() == Token.IF) {\n                    Node condition = parent.getParent().getFirstChild();\n                    if (condition.getType() != Token.TRUE && condition.getType() != Token.FALSE) {\n                        return false;\n                    }\n                }\n                // Don't fold if the expression is the return value of an immediately invoked function expression\n                if (parent.getParent() != null && parent.getParent().getType() == Token.CALL) {\n                    Node grandparent = parent.getParent().getParent();\n                    if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8c12ac77 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,52 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+        Node expr = n.getFirstChild();\n+        // Check if the block has a single statement, which is an expression.\n+        // Don't fold object literals, functions, regex, or empty functions without arguments.\n+        if (!NodeUtil.isStatementBlock(n) &&\n+                NodeUtil.isExpressionNode(expr) &&\n+                !NodeUtil.isFunctionExpression(expr) &&\n+                expr.getType() != Token.OBJECTLIT &&\n+                expr.getType() != Token.FUNCTION &&\n+                (!NodeUtil.isUnaryExpression(expr, Token.VOID) ||\n+                        (expr.getFirstChild() != null && expr.getFirstChild().getType() != Token.NAME))) {\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n+                // Don't fold if the parent is a \"for\" statement\n+                if (parent.getParent() != null && parent.getParent().getType() == Token.FOR) {\n+                    return false;\n+                }\n+                // Don't fold if the parent has a label\n+                if (parent.getParent() != null && parent.getParent().getType() == Token.LABEL) {\n+                    return false;\n+                }\n+                // Don't fold if it's a part of an expression sequence\n+                if (parent.getParent() != null && parent.getParent().getType() == Token.COMMA) {\n+                    return false;\n+                }\n+                // Don't fold if the parent is an \"if\" statement with a non-integer constant condition\n+                if (parent.getParent() != null && parent.getParent().getType() == Token.IF) {\n+                    Node condition = parent.getParent().getFirstChild();\n+                    if (condition.getType() != Token.TRUE && condition.getType() != Token.FALSE) {\n+                        return false;\n+                    }\n+                }\n+                // Don't fold if the expression is the return value of an immediately invoked function expression\n+                if (parent.getParent() != null && parent.getParent().getType() == Token.CALL) {\n+                    Node grandparent = parent.getParent().getParent();\n+                    if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}