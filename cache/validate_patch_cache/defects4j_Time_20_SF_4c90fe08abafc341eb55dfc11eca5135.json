{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    int minPos = text.length();\n    DateTimeZone bestZone = null;\n    for (String id : ALL_IDS) {\n        if (str.startsWith(id)) {\n            if (id.length() < minPos) {\n                bestZone = DateTimeZone.forID(id);\n                minPos = id.length();\n            }\n        }\n    }\n    if (bestZone != null) {\n        bucket.setZone(bestZone);\n        return position + minPos;\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..8000642a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,25 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    int minPos = text.length();\n+    DateTimeZone bestZone = null;\n+    for (String id : ALL_IDS) {\n+        if (str.startsWith(id)) {\n+            if (id.length() < minPos) {\n+                bestZone = DateTimeZone.forID(id);\n+                minPos = id.length();\n             }\n-            return ~position;\n         }\n     }\n+    if (bestZone != null) {\n+        bucket.setZone(bestZone);\n+        return position + minPos;\n+    }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"2007-03-04 12:30 America/Dawson_Creek\" is malformed at \"_Creek\"",
    "test_result": "FAIL"
}