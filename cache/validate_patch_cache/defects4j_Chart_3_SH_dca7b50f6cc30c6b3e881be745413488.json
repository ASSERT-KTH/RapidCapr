{
    "patch": "        if (start >= getItemCount()) {\n            return new TimeSeries(getDomainType(), getRangeType());\n        }\n        int endIndex = Math.min(end, getItemCount() - 1);\n        if (endIndex < start) {\n            return new TimeSeries(getDomainType(), getRangeType());\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        if (getItemCount() > 0) {\n            for (int index = start; index <= endIndex ; index++) {\n                TimeSeriesDataItem item = getDataItem(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                } catch (SeriesException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        if (copy.getItemCount() > 0) {\n            long oldest = copy.getDataItem(0).getPeriod().getFirstMillisecond();\n            long newest = copy.getDataItem(copy.getItemCount() - 1).getPeriod().getLastMillisecond();\n            copy.setRange(newest - oldest, oldest, newest);",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..3f1c03e 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,30 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        if (start >= getItemCount()) {\n+            return new TimeSeries(getDomainType(), getRangeType());\n+        }\n+        int endIndex = Math.min(end, getItemCount() - 1);\n+        if (endIndex < start) {\n+            return new TimeSeries(getDomainType(), getRangeType());\n+        }\n+        TimeSeries copy = (TimeSeries) super.clone();\n+        copy.data = new java.util.ArrayList();\n+        if (getItemCount() > 0) {\n+            for (int index = start; index <= endIndex ; index++) {\n+                TimeSeriesDataItem item = getDataItem(index);\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(clone);\n+                } catch (SeriesException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+        if (copy.getItemCount() > 0) {\n+            long oldest = copy.getDataItem(0).getPeriod().getFirstMillisecond();\n+            long newest = copy.getDataItem(copy.getItemCount() - 1).getPeriod().getLastMillisecond();\n+            copy.setRange(newest - oldest, oldest, newest);\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}