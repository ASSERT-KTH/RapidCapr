{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    /* Calculate the matrix square root using Cholesky decomposition */\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    RealMatrix L = cholesky.getL();\n\n    /* Compute the inverse of the lower-triangular matrix L */\n    RealMatrix invL = MatrixUtils.inverse(L).transpose();\n\n    /* Multiply L and its inverse to obtain the matrix square root */\n    RealMatrix sqrtM = L.multiply(invL);\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d2adeedb0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    /* Calculate the matrix square root using Cholesky decomposition */\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    RealMatrix L = cholesky.getL();\n+\n+    /* Compute the inverse of the lower-triangular matrix L */\n+    RealMatrix invL = MatrixUtils.inverse(L).transpose();\n+\n+    /* Multiply L and its inverse to obtain the matrix square root */\n+    RealMatrix sqrtM = L.multiply(invL);\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}