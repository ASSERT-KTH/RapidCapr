{
    "patch": "      Node fnNode = NodeUtil.getEnclosingType(n, Token.FUNCTION);\n      if (fnNode != null && NodeUtil.isGet(parent) &&\n          NodeUtil.getEnclosingType(parent, Token.ASSIGN) != null) {\n        if (NodeUtil.isGet(parent.getFirstChild())) {\n          // e.g. Bar.prototype.methodFoo = Foo.methodFoo;\n          // Don't traverse the right side of the assignment.\n          return false;\n        } else if (NodeUtil.getBestJSDocInfo(fnNode).isConstructor()) {\n          // e.g. Bar.prototype.methodFoo = function() { this.bar = 3; };\n          // Only traverse the right side of the assignment if it's not adding methods.\n          // e.g. Bar.prototype.bar = 'foo';\n          Node lhs = parent.getFirstChild();\n          if (lhs.getLastChild().getString().startsWith(\"prototype.\")) {\n            String methodName = lhs.getLastChild().getString().substring(\"prototype.\".length());\n            if (... // check if adding a method to the prototype\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..83f872d9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNode = NodeUtil.getEnclosingType(n, Token.FUNCTION);\n+      if (fnNode != null && NodeUtil.isGet(parent) &&\n+          NodeUtil.getEnclosingType(parent, Token.ASSIGN) != null) {\n+        if (NodeUtil.isGet(parent.getFirstChild())) {\n+          // e.g. Bar.prototype.methodFoo = Foo.methodFoo;\n+          // Don't traverse the right side of the assignment.\n+          return false;\n+        } else if (NodeUtil.getBestJSDocInfo(fnNode).isConstructor()) {\n+          // e.g. Bar.prototype.methodFoo = function() { this.bar = 3; };\n+          // Only traverse the right side of the assignment if it's not adding methods.\n+          // e.g. Bar.prototype.bar = 'foo';\n+          Node lhs = parent.getFirstChild();\n+          if (lhs.getLastChild().getString().startsWith(\"prototype.\")) {\n+            String methodName = lhs.getLastChild().getString().substring(\"prototype.\".length());\n+            if (... // check if adding a method to the prototype\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}