{
    "patch": "        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            if (offsetLocal > 0 && offsetAdjusted == 0) {\n                long prev = previousTransition(instantAdjusted);\n                int offsetPrev = getOffset(prev);\n                if (offsetPrev != 0) {\n                    return offsetPrev;\n                }\n            } else if (offsetLocal == 0 && offsetAdjusted > 0) {\n                long next = nextTransition(instantAdjusted);\n                int offsetNext = getOffset(next);\n                if (offsetNext == 0) {\n                    return offsetLocal;\n                }\n            } else if (offsetLocal != offsetAdjusted) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        } else if (offsetLocal > 0 || (offsetLocal < 0 && offsetAdjusted < 0 && getOffset(nextTransition(instantLocal - offsetLocal)) > offsetLocal)) {\n            long prev = previousTransition(instantAdjusted);\n            int offsetPrev = getOffset(prev);\n            if (offsetPrev != 0) {\n                return offsetPrev;\n            }\n        } else {\n            long next = nextTransition(instantAdjusted);\n            int offsetNext = getOffset(next);\n            if (offsetNext == 0) {\n                return offsetLocal;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..3cd35457 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            if (offsetLocal > 0 && offsetAdjusted == 0) {\n+                long prev = previousTransition(instantAdjusted);\n+                int offsetPrev = getOffset(prev);\n+                if (offsetPrev != 0) {\n+                    return offsetPrev;\n+                }\n+            } else if (offsetLocal == 0 && offsetAdjusted > 0) {\n+                long next = nextTransition(instantAdjusted);\n+                int offsetNext = getOffset(next);\n+                if (offsetNext == 0) {\n+                    return offsetLocal;\n+                }\n+            } else if (offsetLocal != offsetAdjusted) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n+        } else if (offsetLocal > 0 || (offsetLocal < 0 && offsetAdjusted < 0 && getOffset(nextTransition(instantLocal - offsetLocal)) > offsetLocal)) {\n+            long prev = previousTransition(instantAdjusted);\n+            int offsetPrev = getOffset(prev);\n+            if (offsetPrev != 0) {\n+                return offsetPrev;\n+            }\n+        } else {\n+            long next = nextTransition(instantAdjusted);\n+            int offsetNext = getOffset(next);\n+            if (offsetNext == 0) {\n+                return offsetLocal;\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}