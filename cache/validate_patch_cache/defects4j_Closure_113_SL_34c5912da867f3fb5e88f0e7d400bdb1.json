{
    "patch": "      if (provided != null && provided.isExplicitlyProvided()) {\n        JSModule providedModule = provided.explicitModule;\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      } else {\n        compiler.report(\n            t.makeError(n, MISSING_PROVIDE_ERROR, ns));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..c9aa0fb8 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,22 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (provided != null && provided.isExplicitlyProvided()) {\n+        JSModule providedModule = provided.explicitModule;\n+        // This must be non-null, because there was an explicit provide.\n+        Preconditions.checkNotNull(providedModule);\n+        JSModule module = t.getModule();\n+        if (moduleGraph != null &&\n+            module != providedModule &&\n+            !moduleGraph.dependsOn(module, providedModule)) {\n+          compiler.report(\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  providedModule.getName(),\n+                  module.getName()));\n+        }\n+      } else {\n+        compiler.report(\n+            t.makeError(n, MISSING_PROVIDE_ERROR, ns));\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}