{
    "patch": "        boolean isOffsetIllegal = false;\n        boolean isSavedFieldIllegal = false;\n        IllegalFieldValueException savedFieldException = null;\n        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                if (!isSavedFieldIllegal) {\n                    savedFieldException = e;\n                    isSavedFieldIllegal = true;\n                }\n            } catch (IllegalArgumentException e) {\n                // handle case when offset is illegal\n                if (iZone != null && iZone instanceof DateTimeZone.FixedDateTimeZone) {\n                    if (!isOffsetIllegal) {\n                        isOffsetIllegal = true;\n                        millis += iZone.getOffset(millis);\n                    }\n                } else {\n                    if (text != null) {\n                        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n                    }\n                    throw e;\n                }\n            }\n        }\n        if (isSavedFieldIllegal) {\n            throw savedFieldException;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e97e6b2e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean isOffsetIllegal = false;\n+        boolean isSavedFieldIllegal = false;\n+        IllegalFieldValueException savedFieldException = null;\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                if (!isSavedFieldIllegal) {\n+                    savedFieldException = e;\n+                    isSavedFieldIllegal = true;\n+                }\n+            } catch (IllegalArgumentException e) {\n+                // handle case when offset is illegal\n+                if (iZone != null && iZone instanceof DateTimeZone.FixedDateTimeZone) {\n+                    if (!isOffsetIllegal) {\n+                        isOffsetIllegal = true;\n+                        millis += iZone.getOffset(millis);\n+                    }\n+                } else {\n+                    if (text != null) {\n+                        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+                    }\n+                    throw e;\n+                }\n+            }\n+        }\n+        if (isSavedFieldIllegal) {\n+            throw savedFieldException;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}