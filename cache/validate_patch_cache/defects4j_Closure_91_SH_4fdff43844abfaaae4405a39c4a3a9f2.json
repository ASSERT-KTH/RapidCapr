{
    "patch": "if (n.getNodeType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      if (n.isConstructor() ||\n          n.isFromExternsFile() ||\n          NodeUtil.getBestJSDocInfo(n).isOverride()) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int parentNodeType = parent.getNodeType();\n      if (!(parentNodeType == Token.BLOCK ||\n            parentNodeType == Token.SCRIPT ||\n            parentNodeType == Token.NAME ||\n            parentNodeType == Token.EXPR_RESULT ||\n            parentNodeType == Token.ASSIGN ||\n            parentNodeType == Token.OBJECT_PATTERN ||\n            parentNodeType == Token.ARRAY_PATTERN ||\n            // object literal keys\n            parentNodeType == Token.STRING ||\n            parentNodeType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parentNodeType == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (!NodeUtil.isPrototypeProperty(lhs)) {\n          return false;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ec627623 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,43 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (n.getNodeType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      if (n.isConstructor() ||\n+          n.isFromExternsFile() ||\n+          NodeUtil.getBestJSDocInfo(n).isOverride()) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int parentNodeType = parent.getNodeType();\n+      if (!(parentNodeType == Token.BLOCK ||\n+            parentNodeType == Token.SCRIPT ||\n+            parentNodeType == Token.NAME ||\n+            parentNodeType == Token.EXPR_RESULT ||\n+            parentNodeType == Token.ASSIGN ||\n+            parentNodeType == Token.OBJECT_PATTERN ||\n+            parentNodeType == Token.ARRAY_PATTERN ||\n+            // object literal keys\n+            parentNodeType == Token.STRING ||\n+            parentNodeType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parentNodeType == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (!NodeUtil.isPrototypeProperty(lhs)) {\n+          return false;\n+        }\n+      }\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}