{
    "patch": "int[] left = Arrays.copyOfRange(list, 0, list.length / 2);\nint[] right = Arrays.copyOfRange(list, list.length / 2, list.length);\n\nif (list.length % 2 == 1) {\n    return list[list.length / 2];\n} else {\n    return (max(left) + min(right)) / 2.0;\n}\n\npublic static int max(int[] num) {\n    int m = Integer.MIN_VALUE;\n    for (int n : num) {\n        if (n > m) {\n            m = n;\n        }\n    }\n    return m;\n}\n\npublic static int min(int[] num) {\n    int m = Integer.MAX_VALUE;\n    for (int n : num) {\n        if (n < m) {\n            m = n;\n        }\n    }\n    return m;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MEDIAN.java b/src/main/java/humaneval/buggy/MEDIAN.java\nindex 6ba9604..82088b9 100644\n--- a/src/main/java/humaneval/buggy/MEDIAN.java\n+++ b/src/main/java/humaneval/buggy/MEDIAN.java\n@@ -15,7 +15,34 @@ public class MEDIAN {\n         if (list.length % 2 == 1) {\n             return list[(int) (list.length / 2)];\n         } else {\n-            return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n+int[] left = Arrays.copyOfRange(list, 0, list.length / 2);\n+int[] right = Arrays.copyOfRange(list, list.length / 2, list.length);\n+\n+if (list.length % 2 == 1) {\n+    return list[list.length / 2];\n+} else {\n+    return (max(left) + min(right)) / 2.0;\n+}\n+\n+public static int max(int[] num) {\n+    int m = Integer.MIN_VALUE;\n+    for (int n : num) {\n+        if (n > m) {\n+            m = n;\n+        }\n+    }\n+    return m;\n+}\n+\n+public static int min(int[] num) {\n+    int m = Integer.MAX_VALUE;\n+    for (int n : num) {\n+        if (n < m) {\n+            m = n;\n+        }\n+    }\n+    return m;\n+}\n         }\n     }\n }",
    "result_reason": " /tmp/humaneval-MEDIAN/src/main/java/humaneval/buggy/MEDIAN.java:[27,1] illegal start of expression",
    "test_result": "ERROR"
}