{
    "patch": "private void defineDeclaredFunction(Node n, Node parent) {\n  String name = n.getFirstChild().getString();\n  if (nodeListContainsName(googModuleNames, name)) {\n    // Ensure that the function has a name.\n    Node nameNode = n.getFirstChild();\n    if (nameNode.isEmpty()) {\n      nameNode.setString(\"defaultModuleExport\");\n      n.addChildToFront(Node.newString(Token.NAME, \"defaultModuleExport\"));\n    }\n    String identifier = nameNode.getString();\n    String namespace = getNamespace(identifier);\n    if (!namespace.isEmpty()) {\n      String propName = extractPropName(identifier, namespace);\n      // Define the \"foo\" property on the namespace object.\n      Node fnName = Node.newString(Token.NAME, identifier);\n      Node getprop = IR.getprop(IR.name(namespace), IR.string(propName));\n      Node assign = NodeUtil.newAssign(getprop, fnName);\n      getprop.useSourceInfoIfMissingFromForTree(n);\n      assign.useSourceInfoIfMissingFromForTree(n);\n      Node exprStmt = IR.exprResult(assign);\n      exprStmt.useSourceInfoIfMissingFromForTree(n);\n      parent.getParent().addChildBefore(exprStmt, parent);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d7153212 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,31 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+private void defineDeclaredFunction(Node n, Node parent) {\n+  String name = n.getFirstChild().getString();\n+  if (nodeListContainsName(googModuleNames, name)) {\n+    // Ensure that the function has a name.\n+    Node nameNode = n.getFirstChild();\n+    if (nameNode.isEmpty()) {\n+      nameNode.setString(\"defaultModuleExport\");\n+      n.addChildToFront(Node.newString(Token.NAME, \"defaultModuleExport\"));\n+    }\n+    String identifier = nameNode.getString();\n+    String namespace = getNamespace(identifier);\n+    if (!namespace.isEmpty()) {\n+      String propName = extractPropName(identifier, namespace);\n+      // Define the \"foo\" property on the namespace object.\n+      Node fnName = Node.newString(Token.NAME, identifier);\n+      Node getprop = IR.getprop(IR.name(namespace), IR.string(propName));\n+      Node assign = NodeUtil.newAssign(getprop, fnName);\n+      getprop.useSourceInfoIfMissingFromForTree(n);\n+      assign.useSourceInfoIfMissingFromForTree(n);\n+      Node exprStmt = IR.exprResult(assign);\n+      exprStmt.useSourceInfoIfMissingFromForTree(n);\n+      parent.getParent().addChildBefore(exprStmt, parent);\n     }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: defineDeclaredFunction(Node,Node) in TypedScopeCreator.LocalScopeBuilder cannot override defineDeclaredFunction(Node,Node) in TypedScopeCreator.AbstractScopeBuilder",
    "test_result": "ERROR"
}