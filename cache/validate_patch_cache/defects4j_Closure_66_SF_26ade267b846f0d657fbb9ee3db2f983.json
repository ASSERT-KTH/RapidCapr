{
    "patch": "public static double getTypedPercent(JsonObject json) {\n    if (json == null) {\n        return 0.0;\n    }\n    JsonArray array = json.getAsJsonArray(\"types\");\n    if (array == null || array.size() == 0) {\n        return 0;\n    }\n    double total = array.size() * 100.0;\n    int count = 0;\n    for (JsonElement type : array) {\n        JsonObject obj = type.getAsJsonObject();\n        if (obj.has(\"typed\") && obj.get(\"typed\").getAsBoolean()) {\n            count++;\n        }\n    }\n    return Math.round(count / total * 1000.0) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..65354129 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject json) {\n+    if (json == null) {\n+        return 0.0;\n+    }\n+    JsonArray array = json.getAsJsonArray(\"types\");\n+    if (array == null || array.size() == 0) {\n+        return 0;\n+    }\n+    double total = array.size() * 100.0;\n+    int count = 0;\n+    for (JsonElement type : array) {\n+        JsonObject obj = type.getAsJsonObject();\n+        if (obj.has(\"typed\") && obj.get(\"typed\").getAsBoolean()) {\n+            count++;\n+        }\n+    }\n+    return Math.round(count / total * 1000.0) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}