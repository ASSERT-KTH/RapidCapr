{
    "patch": "        } catch (IllegalFieldValueException e) {\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                DateTimeField field = savedField.iField;\n                for (int j = 0, isize = savedField.iValues.length; j < isize; j++) {\n                    if (savedField.iValues[j] == Integer.MIN_VALUE) {\n                        Instant instant = iInstant;\n                        for (int f = 0; f < iCount; f++) {\n                            DateTimeField checkField = iFields[f];\n                            if (checkField == field) {\n                                throw e;\n                            }\n                            instant = checkField.set(instant, iValues[f]);\n                        }\n                        throw new IllegalFieldValueException(\n                            field.getType(), \"Value too low: \" + field.getName());\n                    }\n                }\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..799b685d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            for (int i = 0; i < count; i++) {\n+                SavedField savedField = savedFields[i];\n+                DateTimeField field = savedField.iField;\n+                for (int j = 0, isize = savedField.iValues.length; j < isize; j++) {\n+                    if (savedField.iValues[j] == Integer.MIN_VALUE) {\n+                        Instant instant = iInstant;\n+                        for (int f = 0; f < iCount; f++) {\n+                            DateTimeField checkField = iFields[f];\n+                            if (checkField == field) {\n+                                throw e;\n+                            }\n+                            instant = checkField.set(instant, iValues[f]);\n+                        }\n+                        throw new IllegalFieldValueException(\n+                            field.getType(), \"Value too low: \" + field.getName());\n+                    }\n+                }\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}