{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target maybe using the object as a 'this' value.\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        continue;\n      }\n      // Ignore references where the parent is an assigned value\n      if (gramps.isAssign()) {\n        continue;\n      }\n      // NOTE(xialuo): after refactoring the code, we can use matchesQualifiedName\n      //   on the right-hand side of an assignment, so testing for whether it's\n      //   an object literal really only needs to happen on the LHS.\n      //\n      //   Look at this case:\n      //\n      //     var b, c;\n      //     var a = b = {c: 1};\n      //\n      //   When we're assessing whether b should be inlined, we'll run into \"b = {c: 1}\".\n      //   Now, we know that this is an object literal. But that's irrelevant; what we're\n      //   really interested in is whether \"a = b\" is safe to inline. If we look at \"a = b\",\n      //   we'll see a getNode.getQualifiedName() instead of a getNode.matchesQualifiedName\n      //  \tand hence the test will pass correctly.\n      //\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      continue;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment. We shouldn't see this case when inlining.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!NodeUtil.isObjectLit(val)) {\n      continue;\n    }\n\n    // Finally, we need to make sure this isn't some aliasing thing.\n    // In other words, we just want to make sure that the references\n    // that we're looking at here are the only references to the object.\n\n    // Do a single loop over all references. Count things and make\n    // sure we're not overcounting.\n    int countRefs = 1;\n    for (Reference r : refs) {\n      if (r == ref) {\n        // We've already counted it.\n        continue;\n      }\n      if (r.getScope().getClosestHoistScope() != ref.getScope().getClosestHoistScope()) {\n        // A reference outside the hoist scope won't be available after inlining.\n        return false;\n      }\n      Node refParent = r.getParent();\n      if (refParent == null) {\n        continue;\n      }\n      if (refParent.isGetProp() || refParent.isGetElem()) {\n        // The referencing node expects to receive the exact object or an inherited / overridden property.\n        if (refParent.getFirstChild() == r.getNode() && r.isLvalue()) {\n          // The reference is just reading the value, not taking us off the object.\n          countRefs++;\n        } else {\n          return false;\n        }\n      } else if (refParent.isCall() && refParent.isFirstChildOf(parent)) {\n        countRefs++;\n      } else if (r.isLvalue()) {\n        return false;\n      }\n    }\n\n    if (val.getChildCount() != countRefs) {\n      // bail out if we see any properties that aren't references\n      for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        Node valNode = key.getFirstChild();\n        if (valNode == null) {\n          continue;\n        }\n        if (!valNode.isName() || valNode.getNext() != null) {\n          // Don't do any smart checking on non-name values.\n          return false;\n        }\n        String propName = valNode.getString();\n        for (Reference r : refs) {\n          if (r == ref) {\n            continue;\n          }\n          Node n = r.getNode();\n          if (!n.isGetProp() || !n.getLastChild().getString().equals(propName)) {\n            continue;\n          }\n          if (n.getFirstChild() != parent.getFirstChild()) {\n            // Don't continue checking for matches when the bases mismatch\n            return false;\n          }\n          Node p = n.getParent();\n          if (p.isCall() && p.getFirstChild() == n) {\n            // All is good, we are the callees of this thing\n            continue;\n          }\n          if (p == null || p.isExprResult()) {\n            // All is good, this is the only reference that has our property\n            continue;\n          }\n          // Something else is using this reference, so we shouldn't inline\n          return false;\n        }\n      }\n      // we didn't see any non-reference properties\n    } else if (countRefs == 1) {\n      // Nothing else is using this object, so we're fine\n    } else {\n      // We can only handle object literals that are unambiguous\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..ba38d031 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,93 +152,143 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      // A call target maybe using the object as a 'this' value.\n+      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+        continue;\n+      }\n+      // Ignore references where the parent is an assigned value\n+      if (gramps.isAssign()) {\n+        continue;\n+      }\n+      // NOTE(xialuo): after refactoring the code, we can use matchesQualifiedName\n+      //   on the right-hand side of an assignment, so testing for whether it's\n+      //   an object literal really only needs to happen on the LHS.\n+      //\n+      //   Look at this case:\n+      //\n+      //     var b, c;\n+      //     var a = b = {c: 1};\n+      //\n+      //   When we're assessing whether b should be inlined, we'll run into \"b = {c: 1}\".\n+      //   Now, we know that this is an object literal. But that's irrelevant; what we're\n+      //   really interested in is whether \"a = b\" is safe to inline. If we look at \"a = b\",\n+      //   we'll see a getNode.getQualifiedName() instead of a getNode.matchesQualifiedName\n+      //  \tand hence the test will pass correctly.\n+      //\n+    }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+    // Only rewrite VAR declarations or simple assignment statements\n+    if (!isVarOrAssignExprLhs(name)) {\n+      continue;\n+    }\n+\n+    Node val = ref.getAssignedValue();\n+    if (val == null) {\n+      // A var with no assignment. We shouldn't see this case when inlining.\n+      continue;\n+    }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+    // We're looking for object literal assignments only.\n+    if (!NodeUtil.isObjectLit(val)) {\n+      continue;\n+    }\n+\n+    // Finally, we need to make sure this isn't some aliasing thing.\n+    // In other words, we just want to make sure that the references\n+    // that we're looking at here are the only references to the object.\n+\n+    // Do a single loop over all references. Count things and make\n+    // sure we're not overcounting.\n+    int countRefs = 1;\n+    for (Reference r : refs) {\n+      if (r == ref) {\n+        // We've already counted it.\n+        continue;\n+      }\n+      if (r.getScope().getClosestHoistScope() != ref.getScope().getClosestHoistScope()) {\n+        // A reference outside the hoist scope won't be available after inlining.\n+        return false;\n+      }\n+      Node refParent = r.getParent();\n+      if (refParent == null) {\n+        continue;\n+      }\n+      if (refParent.isGetProp() || refParent.isGetElem()) {\n+        // The referencing node expects to receive the exact object or an inherited / overridden property.\n+        if (refParent.getFirstChild() == r.getNode() && r.isLvalue()) {\n+          // The reference is just reading the value, not taking us off the object.\n+          countRefs++;\n+        } else {\n+          return false;\n         }\n+      } else if (refParent.isCall() && refParent.isFirstChildOf(parent)) {\n+        countRefs++;\n+      } else if (r.isLvalue()) {\n+        return false;\n+      }\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n+    if (val.getChildCount() != countRefs) {\n+      // bail out if we see any properties that aren't references\n+      for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+        Node valNode = key.getFirstChild();\n+        if (valNode == null) {\n           continue;\n         }\n-\n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+        if (!valNode.isName() || valNode.getNext() != null) {\n+          // Don't do any smart checking on non-name values.\n           return false;\n         }\n-\n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+        String propName = valNode.getString();\n+        for (Reference r : refs) {\n+          if (r == ref) {\n+            continue;\n+          }\n+          Node n = r.getNode();\n+          if (!n.isGetProp() || !n.getLastChild().getString().equals(propName)) {\n+            continue;\n+          }\n+          if (n.getFirstChild() != parent.getFirstChild()) {\n+            // Don't continue checking for matches when the bases mismatch\n             return false;\n           }\n-\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+          Node p = n.getParent();\n+          if (p.isCall() && p.getFirstChild() == n) {\n+            // All is good, we are the callees of this thing\n+            continue;\n+          }\n+          if (p == null || p.isExprResult()) {\n+            // All is good, this is the only reference that has our property\n+            continue;\n           }\n+          // Something else is using this reference, so we shouldn't inline\n+          return false;\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n       }\n-      return ret;\n+      // we didn't see any non-reference properties\n+    } else if (countRefs == 1) {\n+      // Nothing else is using this object, so we're fine\n+    } else {\n+      // We can only handle object literals that are unambiguous\n+      return false;\n     }\n \n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}