{
    "patch": "      if (value == null) {\n        Node addition = IR.string(\"\").srcref(callTarget);\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      } else if (value.isImmutable()) {\n        Node addition = IR.add(\n                IR.string(\"\").srcref(callTarget),\n                value.detachFromParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..81c4c4d8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,15 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      if (value == null) {\n+        Node addition = IR.string(\"\").srcref(callTarget);\n+        n.getParent().replaceChild(n, addition);\n+        reportCodeChange();\n+        return addition;\n+      } else if (value.isImmutable()) {\n+        Node addition = IR.add(\n+                IR.string(\"\").srcref(callTarget),\n+                value.detachFromParent());\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}