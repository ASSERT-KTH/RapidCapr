{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n\n    // If the function has no parameters, then there's nothing to remove\n    Node argList = getFunctionArgList(function);\n    if (!argList.hasChildren()) {\n      return;\n    }\n\n    // We only care about removing function arguments if they aren't used anywhere in the function\n    Multiset<String> referenced = findReferencesToFunctionArgs(fnScope, function);\n\n    // Strip unreferenced args off the end of the function declaration.\n    // We iterate over params backwards, so that we can properly handle removing consecutive trailing unused parameters.\n    LinkedList<Node> unusedParams = new LinkedList<>();\n    for (int i = argList.getChildCount() - 1; i >= 0; i--) {\n      Node arg = argList.getChildAtIndex(i);\n      Var var = fnScope.getVar(arg.getString());\n      if (var == null) {\n        throw new IllegalStateException(\"Could not find variable for parameter: \" + arg.getString());\n      }\n      if (!referenced.contains(var)) {\n        unusedParams.addFirst(arg);\n        argList.removeChild(arg);\n      } else if (!unusedParams.isEmpty()) {\n        // if we encounter a used parameter after unused ones, then just break instead of continuing\n        break;\n      }\n    }\n\n    if (!unusedParams.isEmpty()) {\n      Node block = NodeUtil.getFunctionBody(function);\n      Preconditions.checkNotNull(block);\n      NodeTraversal.traverseEs6(compiler, block, new UnlinkUnusedFunctionParams(unusedParams));\n      compiler.reportCodeChange();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6709cecc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+\n+    // If the function has no parameters, then there's nothing to remove\n+    Node argList = getFunctionArgList(function);\n+    if (!argList.hasChildren()) {\n+      return;\n+    }\n+\n+    // We only care about removing function arguments if they aren't used anywhere in the function\n+    Multiset<String> referenced = findReferencesToFunctionArgs(fnScope, function);\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    // We iterate over params backwards, so that we can properly handle removing consecutive trailing unused parameters.\n+    LinkedList<Node> unusedParams = new LinkedList<>();\n+    for (int i = argList.getChildCount() - 1; i >= 0; i--) {\n+      Node arg = argList.getChildAtIndex(i);\n+      Var var = fnScope.getVar(arg.getString());\n+      if (var == null) {\n+        throw new IllegalStateException(\"Could not find variable for parameter: \" + arg.getString());\n+      }\n+      if (!referenced.contains(var)) {\n+        unusedParams.addFirst(arg);\n+        argList.removeChild(arg);\n+      } else if (!unusedParams.isEmpty()) {\n+        // if we encounter a used parameter after unused ones, then just break instead of continuing\n+        break;\n+      }\n+    }\n+\n+    if (!unusedParams.isEmpty()) {\n+      Node block = NodeUtil.getFunctionBody(function);\n+      Preconditions.checkNotNull(block);\n+      NodeTraversal.traverseEs6(compiler, block, new UnlinkUnusedFunctionParams(unusedParams));\n+      compiler.reportCodeChange();\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}