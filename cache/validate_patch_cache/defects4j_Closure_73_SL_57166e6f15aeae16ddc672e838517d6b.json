{
    "patch": "              if (outputCharsetEncoder != null && !outputCharsetEncoder.canEncode(c)) {\n                // Unicode-escape the character.\n                appendHexJavaScriptRepresentation(sb, c);\n              } else {\n                // Pass straight latin characters through,\n                // and escape other characters.\n                switch(c) {\n                  case '\\b': sb.append(\"\\\\b\"); break;\n                  case '\\f': sb.append(\"\\\\f\"); break;\n                  case '\\n': sb.append(\"\\\\n\"); break;\n                  case '\\r': sb.append(\"\\\\r\"); break;\n                  case '\\t': sb.append(\"\\\\t\"); break;\n                  case '\\\"': sb.append(\"\\\\\\\"\"); break;\n                  case '\\\\': sb.append(\"\\\\\\\\\"); break;\n                  default:\n                    if (c < 0x20 || c > 0x7E) {\n                      appendHexJavaScriptRepresentation(sb, c);\n                    } else {\n                      sb.append(c);\n                    }\n                }\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..82b4de56 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,28 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+              if (outputCharsetEncoder != null && !outputCharsetEncoder.canEncode(c)) {\n+                // Unicode-escape the character.\n+                appendHexJavaScriptRepresentation(sb, c);\n+              } else {\n+                // Pass straight latin characters through,\n+                // and escape other characters.\n+                switch(c) {\n+                  case '\\b': sb.append(\"\\\\b\"); break;\n+                  case '\\f': sb.append(\"\\\\f\"); break;\n+                  case '\\n': sb.append(\"\\\\n\"); break;\n+                  case '\\r': sb.append(\"\\\\r\"); break;\n+                  case '\\t': sb.append(\"\\\\t\"); break;\n+                  case '\\\"': sb.append(\"\\\\\\\"\"); break;\n+                  case '\\\\': sb.append(\"\\\\\\\\\"); break;\n+                  default:\n+                    if (c < 0x20 || c > 0x7E) {\n+                      appendHexJavaScriptRepresentation(sb, c);\n+                    } else {\n+                      sb.append(c);\n+                    }\n+                }\n+              }\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}