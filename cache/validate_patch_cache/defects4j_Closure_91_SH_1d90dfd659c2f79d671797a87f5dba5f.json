{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.isInterface() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {}; // or\n        // var a = {x: function() {}};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n\n              // object literal keys\n              pType == Token.STRING ||\n              pType == Token.NUMBER)) {\n            return false;\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        return !(NodeUtil.isGet(parent) &&\n                 parent.getLastChild().getString().equals(\"prototype\") &&\n                 parent.getParent().getType() == Token.ASSIGN);\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            if (NodeUtil.isObjectLitKey(lhs)) {\n                // Object literal key being assigned a function, ok to keep\n                return true;\n            }\n            if (NodeUtil.isNameDeclaration(lhs.getParent()) &&\n                !NodeUtil.isConstantNameDeclaration(lhs.getParent())) {\n                // var x = function() { ... } or let x = function() { ... }\n                // The function is not used in the rest of the scope, so skip it\n                return false;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to [something].prototype.[something]\n            if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..6e2668ff 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,69 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+             jsDoc.isInterface() ||\n+             jsDoc.hasThisType() ||\n+             jsDoc.isOverride())) {\n+            return false;\n+        }\n+\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {}; // or\n+        // var a = {x: function() {}};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME ||\n+              pType == Token.ASSIGN ||\n+\n+              // object literal keys\n+              pType == Token.STRING ||\n+              pType == Token.NUMBER)) {\n+            return false;\n+        }\n+\n+        // Don't traverse functions that are getting lent to a prototype.\n+        return !(NodeUtil.isGet(parent) &&\n+                 parent.getLastChild().getString().equals(\"prototype\") &&\n+                 parent.getParent().getType() == Token.ASSIGN);\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            if (NodeUtil.isObjectLitKey(lhs)) {\n+                // Object literal key being assigned a function, ok to keep\n+                return true;\n+            }\n+            if (NodeUtil.isNameDeclaration(lhs.getParent()) &&\n+                !NodeUtil.isConstantNameDeclaration(lhs.getParent())) {\n+                // var x = function() { ... } or let x = function() { ... }\n+                // The function is not used in the rest of the scope, so skip it\n+                return false;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to [something].prototype.[something]\n+            if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}