{
    "patch": "        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n            }\n        } else if (start < 0 || end <= start) { // Fix: also check if end < start\n            throw new IllegalArgumentException(\"invalid bound\");\n        }\n        \n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            \n            // Fix: avoid zero gap\n            if (gap == 0) {\n                ch = chars[random.nextInt(chars.length)];\n            } else if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            \n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex a7990575..3fac523a 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -242,6 +242,68 @@ public class RandomStringUtils {\n                     start = ' ';                \n                 }\n             }\n+        if (start == 0 && end == 0) {\n+            if (chars != null) {\n+                end = chars.length;\n+            } else {\n+                if (!letters && !numbers) {\n+                    end = Integer.MAX_VALUE;\n+                } else {\n+                    end = 'z' + 1;\n+                    start = ' ';                \n+                }\n+            }\n+        } else if (start < 0 || end <= start) { // Fix: also check if end < start\n+            throw new IllegalArgumentException(\"invalid bound\");\n+        }\n+        \n+        char[] buffer = new char[count];\n+        int gap = end - start;\n+\n+        while (count-- != 0) {\n+            char ch;\n+            \n+            // Fix: avoid zero gap\n+            if (gap == 0) {\n+                ch = chars[random.nextInt(chars.length)];\n+            } else if (chars == null) {\n+                ch = (char) (random.nextInt(gap) + start);\n+            } else {\n+                ch = chars[random.nextInt(gap) + start];\n+            }\n+            \n+            if (letters && Character.isLetter(ch)\n+                    || numbers && Character.isDigit(ch)\n+                    || !letters && !numbers) {\n+                if(ch >= 56320 && ch <= 57343) {\n+                    if(count == 0) {\n+                        count++;\n+                    } else {\n+                        // low surrogate, insert high surrogate after putting it in\n+                        buffer[count] = ch;\n+                        count--;\n+                        buffer[count] = (char) (55296 + random.nextInt(128));\n+                    }\n+                } else if(ch >= 55296 && ch <= 56191) {\n+                    if(count == 0) {\n+                        count++;\n+                    } else {\n+                        // high surrogate, insert low surrogate before putting it in\n+                        buffer[count] = (char) (56320 + random.nextInt(128));\n+                        count--;\n+                        buffer[count] = ch;\n+                    }\n+                } else if(ch >= 56192 && ch <= 56319) {\n+                    // private high surrogate, no effing clue, so skip it\n+                    count++;\n+                } else {\n+                    buffer[count] = ch;\n+                }\n+            } else {\n+                count++;\n+            }\n+        }\n+        return new String(buffer);\n         }\n \n         char[] buffer = new char[count];",
    "result_reason": "junit.framework.AssertionFailedError: Message (bound must be positive) must contain 'start'",
    "test_result": "FAIL"
}