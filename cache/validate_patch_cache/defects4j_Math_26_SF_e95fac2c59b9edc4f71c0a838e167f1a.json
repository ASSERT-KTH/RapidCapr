{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n    double r0 = value;\n    double a0 = FastMath.floor(r0);\n    this.numerator = (int) a0;\n    this.denominator = 1;\n\n    double delta = epsilon * value;\n    double c = a0;\n    double r1 = value - a0;\n    double a1, h1, h2;\n    int n = 1;\n\n    while (n < maxIterations) {\n        if (FastMath.abs(r1) < delta) {\n            return;\n        }\n\n        a1 = FastMath.floor(1.0 / r1);\n        c = a1 * c + 1.0 / r1;\n\n        if (FastMath.abs(c) > Long.MAX_VALUE) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        r1 = 1.0 / (r1 - a1);\n        h2 = h1;\n        h1 = this.numerator;\n        this.numerator = (int) (c * this.numerator + h1);\n        this.denominator = (int) (c * this.denominator + h2);\n\n        if (this.denominator <= maxDenominator) {\n            double approx = (double) this.numerator / (double) this.denominator;\n            if (FastMath.abs(approx - value) < epsilon) {\n                return;\n            }\n        }\n\n        n++;\n    }\n\n    throw new FractionConversionException(value, maxIterations);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..eeea3a96b 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,71 +172,49 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n+    double r0 = value;\n+    double a0 = FastMath.floor(r0);\n+    this.numerator = (int) a0;\n+    this.denominator = 1;\n+\n+    double delta = epsilon * value;\n+    double c = a0;\n+    double r1 = value - a0;\n+    double a1, h1, h2;\n+    int n = 1;\n+\n+    while (n < maxIterations) {\n+        if (FastMath.abs(r1) < delta) {\n             return;\n         }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n-\n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n+        a1 = FastMath.floor(1.0 / r1);\n+        c = a1 * c + 1.0 / r1;\n \n-        if (n >= maxIterations) {\n+        if (FastMath.abs(c) > Long.MAX_VALUE) {\n             throw new FractionConversionException(value, maxIterations);\n         }\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+        r1 = 1.0 / (r1 - a1);\n+        h2 = h1;\n+        h1 = this.numerator;\n+        this.numerator = (int) (c * this.numerator + h1);\n+        this.denominator = (int) (c * this.denominator + h2);\n+\n+        if (this.denominator <= maxDenominator) {\n+            double approx = (double) this.numerator / (double) this.denominator;\n+            if (FastMath.abs(approx - value) < epsilon) {\n+                return;\n+            }\n         }\n \n+        n++;\n     }\n \n+    throw new FractionConversionException(value, maxIterations);\n+}\n+\n     /**\n      * Create a fraction from an int.\n      * The fraction is num / 1.",
    "result_reason": "error: variable h1 might not have been initialized",
    "test_result": "ERROR"
}