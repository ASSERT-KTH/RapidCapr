{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // there is a gap between instantAdjusted and the next transition\n                    // which is not present between instantLocal and the same\n                    // transition expressed in the adjusted time. Since we know there\n                    // is a DST boundary between them, we need to shift instantLocal\n                    // one further intervening transition. We don't have to worry\n                    // about pushing ourselves too far forward because if we skipped\n                    // over the nextTransition, we wouldn't have found a difference\n                    // in the first place.\n                    long nextTransitionAdjusted = nextTransition(nextAdjusted);\n                    return getOffset(nextTransitionAdjusted);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..fa9e7135 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // there is a gap between instantAdjusted and the next transition\n+                    // which is not present between instantLocal and the same\n+                    // transition expressed in the adjusted time. Since we know there\n+                    // is a DST boundary between them, we need to shift instantLocal\n+                    // one further intervening transition. We don't have to worry\n+                    // about pushing ourselves too far forward because if we skipped\n+                    // over the nextTransition, we wouldn't have found a difference\n+                    // in the first place.\n+                    long nextTransitionAdjusted = nextTransition(nextAdjusted);\n+                    return getOffset(nextTransitionAdjusted);\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}