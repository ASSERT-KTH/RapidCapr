{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n          Node assignLhs = grandparent.getFirstChild();\n          Node assignRhs = assignLhs.getNext();\n          if (assignLhs.getType() == Token.GETPROP &&\n              assignLhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          if (assignRhs != parent &&\n              assignRhs.getType() == Token.GETPROP &&\n              assignRhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1e4f1d12 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n+          Node assignLhs = grandparent.getFirstChild();\n+          Node assignRhs = assignLhs.getNext();\n+          if (assignLhs.getType() == Token.GETPROP &&\n+              assignLhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          if (assignRhs != parent &&\n+              assignRhs.getType() == Token.GETPROP &&\n+              assignRhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}