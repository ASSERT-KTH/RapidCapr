{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec = null;\n    String exp = null;\n    int decPos = str.indexOf('.');\n    int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n    if (expPos > -1) {\n        if (decPos > expPos || decPos == -1) {\n            exp = str.substring(expPos + 1);\n            str = str.substring(0, expPos);\n        }\n    }\n    if (decPos > -1) {\n        if (expPos == -1 || decPos < expPos) {\n            dec = str.substring(decPos + 1);\n            str = str.substring(0, decPos);\n        }\n    }\n\n    mant = str;\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (exp == null && dec == null) {\n            // Requesting a specific type...\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && (exp == null || isAllZeros(exp));\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    if (dec == null && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = createFloat(str);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n                        break;\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = createDouble(str);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                        break;\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(str);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    break;\n                default:\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (exp == null && dec == null) {\n            // No decimal point or exponent, must be an integer...\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number format and try parsing as a long or a BigInteger\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number format and try parsing as a BigInteger\n            }\n            return createBigInteger(str);\n        } else {\n            // There's either a decimal point or an exponent, so it must be a floating point number...\n            if (exp == null) {\n                return createDouble(mant + \".\" + dec);\n            } else {\n                return createDouble(mant + \".\" + dec + \"e\" + exp);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..cc615987 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,63 +449,54 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    if (str.startsWith(\"--\")) {\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear\n+        // to be in specification of class. OS X Java parses it to\n+        // a wrong value.\n+        return null;\n+    }\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+    char lastChar = str.charAt(str.length() - 1);\n+    String mant;\n+    String dec = null;\n+    String exp = null;\n+    int decPos = str.indexOf('.');\n+    int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n+\n+    if (expPos > -1) {\n+        if (decPos > expPos || decPos == -1) {\n+            exp = str.substring(expPos + 1);\n+            str = str.substring(0, expPos);\n         }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n+    }\n+    if (decPos > -1) {\n+        if (expPos == -1 || decPos < expPos) {\n+            dec = str.substring(decPos + 1);\n+            str = str.substring(0, decPos);\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+    }\n \n-        if (decPos > -1) {\n+    mant = str;\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+        if (exp == null && dec == null) {\n+            // Requesting a specific type...\n             String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+            boolean allZeros = isAllZeros(mant) && (exp == null || isAllZeros(exp));\n             switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n+                case 'l':\n+                case 'L':\n+                    if (dec == null && exp == null\n                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                         try {\n                             return createLong(numeric);\n@@ -516,87 +507,66 @@ public class NumberUtils {\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n+                case 'f':\n+                case 'F':\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n+                        Float f = createFloat(str);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                             //If it's too big for a float or the float value = 0 and the string\n                             //has non-zeros in it, then float does not have the precision we want\n                             return f;\n                         }\n-\n+                        break;\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n                     }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n+                case 'd':\n+                case 'D':\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                        Double d = createDouble(str);\n+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n+                        break;\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n                     }\n                     try {\n-                        return createBigDecimal(numeric);\n+                        return createBigDecimal(str);\n                     } catch (NumberFormatException e) {\n                         // ignore the bad number\n                     }\n-                    //$FALL-THROUGH$\n-                default :\n+                    break;\n+                default:\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n-\n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+    } else {\n+        if (exp == null && dec == null) {\n+            // No decimal point or exponent, must be an integer...\n+            try {\n+                return createInteger(str);\n+            } catch (NumberFormatException nfe) {\n+                // Ignore the bad number format and try parsing as a long or a BigInteger\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                return createBigInteger(str);\n-\n+            try {\n+                return createLong(str);\n+            } catch (NumberFormatException nfe) {\n+                // Ignore the bad number format and try parsing as a BigInteger\n+            }\n+            return createBigInteger(str);\n+        } else {\n+            // There's either a decimal point or an exponent, so it must be a floating point number...\n+            if (exp == null) {\n+                return createDouble(mant + \".\" + dec);\n             } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-\n-                return createBigDecimal(str);\n-\n+                return createDouble(mant + \".\" + dec + \"e\" + exp);\n             }\n         }\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: missing return statement",
    "test_result": "ERROR"
}