{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] oldCallbacks = factory.getCallbacks();\n\n        Callback newCallbacks[] = new Callback[oldCallbacks.length + 1];\n        newCallbacks[0] = newFilter;\n        System.arraycopy(oldCallbacks, 0, newCallbacks, 1, oldCallbacks.length);\n\n        factory.setCallbacks(newCallbacks);\n    } else if (mock instanceof MockAccess) {\n        MockAccess<T> mockAccess = (MockAccess<T>) mock;\n        MockHandler<T> oldHandler = mockAccess.getMockitoMockHandler();\n        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n        ((MockitoMock) mock).setMockitoMockHandler(newHandler);\n    } else if (mock instanceof MockitoSpy) {\n        MockitoSpy<T> spy = (MockitoSpy<T>) mock;\n        MockHandler<T> oldHandler = spy.getMockitoMockHandler();\n        MockHandler<T> newHandler = new MockHandler<>(oldHandler);\n\n        // update the fields of the spies\n        List<Field> mockFields = mockitoExtractor.getMockedFields(spy);\n        for (Field field : mockFields) {\n            try {\n                field.setAccessible(true);\n                field.set(spy, null);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Unable to reset mock spy\", e);\n            }\n        }\n\n        spy.setMockitoMockHandler(newHandler);\n    } else {\n        throw new IllegalArgumentException(\"Cannot reset mock object. Object is not a Mockito mock or spy.\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..6d324e168 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,48 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] oldCallbacks = factory.getCallbacks();\n+\n+        Callback newCallbacks[] = new Callback[oldCallbacks.length + 1];\n+        newCallbacks[0] = newFilter;\n+        System.arraycopy(oldCallbacks, 0, newCallbacks, 1, oldCallbacks.length);\n+\n+        factory.setCallbacks(newCallbacks);\n+    } else if (mock instanceof MockAccess) {\n+        MockAccess<T> mockAccess = (MockAccess<T>) mock;\n+        MockHandler<T> oldHandler = mockAccess.getMockitoMockHandler();\n+        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+        ((MockitoMock) mock).setMockitoMockHandler(newHandler);\n+    } else if (mock instanceof MockitoSpy) {\n+        MockitoSpy<T> spy = (MockitoSpy<T>) mock;\n+        MockHandler<T> oldHandler = spy.getMockitoMockHandler();\n+        MockHandler<T> newHandler = new MockHandler<>(oldHandler);\n+\n+        // update the fields of the spies\n+        List<Field> mockFields = mockitoExtractor.getMockedFields(spy);\n+        for (Field field : mockFields) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(spy, null);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Unable to reset mock spy\", e);\n+            }\n+        }\n+\n+        spy.setMockitoMockHandler(newHandler);\n+    } else {\n+        throw new IllegalArgumentException(\"Cannot reset mock object. Object is not a Mockito mock or spy.\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}