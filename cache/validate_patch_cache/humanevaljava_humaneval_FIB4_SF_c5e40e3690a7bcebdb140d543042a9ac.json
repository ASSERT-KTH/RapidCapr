{
    "patch": "    public static int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Error: input must be a non-negative integer.\");\n        }\n        else if (n == 0) {\n            return 0;\n        }\n        else if (n <= 3) {\n            return 2;\n        }\n        else {\n            int[] result = {0, 0, 2, 0};\n            \n            for (int i = 4; i <= n; i++) {\n                int curr = result[0] + result[1] + result[2] + result[3];\n                result[0] = result[1];\n                result[1] = result[2];\n                result[2] = result[3];\n                result[3] = curr;\n            }\n            return result[3];\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIB4.java b/src/main/java/humaneval/buggy/FIB4.java\nindex e4ae6f3..50294e4 100644\n--- a/src/main/java/humaneval/buggy/FIB4.java\n+++ b/src/main/java/humaneval/buggy/FIB4.java\n@@ -18,19 +18,26 @@ Please write a function to efficiently compute the n-th element of the fib4 numb\n \n public class FIB4 {\n     public static int fib4(int n) {\n-        ArrayList<Integer> result = new ArrayList<Integer>(); \n-        result.add(0);\n-        result.add(0);\n-        result.add(2);\n-        result.add(0);\n-\n-        if (n < 4)\n-            return result.get(n);\n-        for (int i = 4; i < n + 1; i += 1) {\n-            result.add(\n-                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n-            );\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"Error: input must be a non-negative integer.\");\n+        }\n+        else if (n == 0) {\n+            return 0;\n+        }\n+        else if (n <= 3) {\n+            return 2;\n+        }\n+        else {\n+            int[] result = {0, 0, 2, 0};\n+            \n+            for (int i = 4; i <= n; i++) {\n+                int curr = result[0] + result[1] + result[2] + result[3];\n+                result[0] = result[1];\n+                result[1] = result[2];\n+                result[2] = result[3];\n+                result[3] = curr;\n+            }\n+            return result[3];\n         }\n-        return result.get(result.size() - 1);\n     }\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}