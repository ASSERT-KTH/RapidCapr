{
    "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.isEmpty()) {\n        return false;\n    } else {\n        boolean allUpper = true;\n        boolean allLower = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            int length = strKey.length();\n            boolean isUpper = false;\n            boolean isLower = false;\n            for (int i = 0; i < length; i++) {\n                char c = strKey.charAt(i);\n                if (Character.isUpperCase(c)) {\n                    isUpper = true;\n                } else if (Character.isLowerCase(c)) {\n                    isLower = true;\n                }\n                if (isUpper && isLower) {\n                    break;\n                }\n            }\n            if (isUpper && !isLower) {\n                allLower = false;\n            } else if (!isUpper && isLower) {\n                allUpper = false;\n            } else {\n                return false;\n            }\n            if (!allUpper && !allLower) {\n                return false;\n            }\n        }\n        return allUpper || allLower;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CHECK_DICT_CASE.java b/src/main/java/humaneval/buggy/CHECK_DICT_CASE.java\nindex ba94200..0625ac1 100644\n--- a/src/main/java/humaneval/buggy/CHECK_DICT_CASE.java\n+++ b/src/main/java/humaneval/buggy/CHECK_DICT_CASE.java\n@@ -13,32 +13,43 @@ import java.util.HashMap;\n // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n \n public class CHECK_DICT_CASE {\n-    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n-        if (dict.size() == 0)\n-            return false;\n-        else {\n-            String state = \"start\";\n-            for (Object key : dict.keySet()) {\n-                if (!(key instanceof String)) {\n-                    state = \"mixed\";\n-                    break;\n+public static boolean check_dict_case(HashMap<Object, Object> dict) {\n+    if (dict.isEmpty()) {\n+        return false;\n+    } else {\n+        boolean allUpper = true;\n+        boolean allLower = true;\n+        for (Object key : dict.keySet()) {\n+            if (!(key instanceof String)) {\n+                return false;\n+            }\n+            String strKey = (String) key;\n+            int length = strKey.length();\n+            boolean isUpper = false;\n+            boolean isLower = false;\n+            for (int i = 0; i < length; i++) {\n+                char c = strKey.charAt(i);\n+                if (Character.isUpperCase(c)) {\n+                    isUpper = true;\n+                } else if (Character.isLowerCase(c)) {\n+                    isLower = true;\n                 }\n-                String str_key = (String) key;\n-                if (state.equals(\"start\")) {\n-                    if (str_key.toUpperCase().equals(str_key))\n-                        state = \"upper\";\n-                    else if (str_key.toLowerCase().equals(str_key))\n-                        state = \"lower\";\n-                    else {\n-                        state = \"mixed\";\n-                        break;\n-                    }\n-                } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n-                    state = \"mixed\";\n+                if (isUpper && isLower) {\n                     break;\n                 }\n             }\n-            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n+            if (isUpper && !isLower) {\n+                allLower = false;\n+            } else if (!isUpper && isLower) {\n+                allUpper = false;\n+            } else {\n+                return false;\n+            }\n+            if (!allUpper && !allLower) {\n+                return false;\n+            }\n         }\n+        return allUpper || allLower;\n     }\n }\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}