{
    "patch": "    boolean resolved;\n    if (registry.isResolving(this)) {\n      resolved = true;\n    } else {\n      // First try to resolve via properties.\n      // This avoids generating false warnings in cases where properties\n      // yield a more precise type than registry resolution.\n      resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      resolved = isResolved();\n\n      if (!resolved) {\n        // If that fails, try to resolve via registry.\n        registry.startResolving(this);\n        resolved = resolveViaRegistry(t, enclosing);\n        if (detectImplicitPrototypeCycle()) {\n          handleTypeCycle(t);\n        }\n        if (isResolved()) {\n          // Finish resolving the properties if we've resolved via registry.\n          finishPropertyContinuations();\n        }\n        registry.endResolving(this);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..ebe2102c 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,32 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    boolean resolved;\n+    if (registry.isResolving(this)) {\n+      resolved = true;\n+    } else {\n+      // First try to resolve via properties.\n+      // This avoids generating false warnings in cases where properties\n+      // yield a more precise type than registry resolution.\n+      resolveViaProperties(t, enclosing);\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      resolved = isResolved();\n+\n+      if (!resolved) {\n+        // If that fails, try to resolve via registry.\n+        registry.startResolving(this);\n+        resolved = resolveViaRegistry(t, enclosing);\n+        if (detectImplicitPrototypeCycle()) {\n+          handleTypeCycle(t);\n+        }\n+        if (isResolved()) {\n+          // Finish resolving the properties if we've resolved via registry.\n+          finishPropertyContinuations();\n+        }\n+        registry.endResolving(this);\n+      }\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}