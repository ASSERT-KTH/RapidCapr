{
    "patch": "try {\n    boolean adjusted = false;\n    long newMillis;\n    for (int i = 0; i < count; i++) {\n        newMillis = savedFields[i].set(millis, resetFields);\n        // check for invalid date/time\n        if (millis > 0 && newMillis < 0) {\n            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n        }\n        if (millis < 0 && newMillis > 0) {\n            throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n        }\n        if (millis != newMillis) {\n            adjusted = true;\n            millis = newMillis;\n        }\n    }\n    if (adjusted) {\n        // need to re-sort fields and check again\n        SavedField[] clonedFields = savedFields.clone();\n        sort(clonedFields, count);\n        if (clonedFields.length > 0) {\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = clonedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                millis = computeMillis(resetFields, text);\n            }\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..608ef8ff 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    boolean adjusted = false;\n+    long newMillis;\n+    for (int i = 0; i < count; i++) {\n+        newMillis = savedFields[i].set(millis, resetFields);\n+        // check for invalid date/time\n+        if (millis > 0 && newMillis < 0) {\n+            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+        }\n+        if (millis < 0 && newMillis > 0) {\n+            throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+        }\n+        if (millis != newMillis) {\n+            adjusted = true;\n+            millis = newMillis;\n+        }\n+    }\n+    if (adjusted) {\n+        // need to re-sort fields and check again\n+        SavedField[] clonedFields = savedFields.clone();\n+        sort(clonedFields, count);\n+        if (clonedFields.length > 0) {\n+            DurationField months = DurationFieldType.months().getField(iChrono);\n+            DurationField days = DurationFieldType.days().getField(iChrono);\n+            DurationField first = clonedFields[0].iField.getDurationField();\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                millis = computeMillis(resetFields, text);\n+            }\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: The datetime is too large to be represented",
    "test_result": "FAIL"
}