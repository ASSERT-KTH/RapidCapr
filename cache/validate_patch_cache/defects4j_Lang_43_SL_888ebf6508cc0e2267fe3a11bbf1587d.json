{
    "patch": "if (escapingOn && pattern.regionMatches(pos.getIndex(), ESCAPED_QUOTE, 0, ESCAPED_QUOTE.length())) {\n    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n    pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n    lastHold = pos.getIndex();\n} else if (escapingOn && c[start] == QUOTE) {\n    next(pos);\n    if (appendTo != null) {\n        appendTo.append(QUOTE);\n        return appendTo;\n    } else {\n        return null;\n    }\n} else {\n    next(pos);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..be4919e6 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,21 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+if (escapingOn && pattern.regionMatches(pos.getIndex(), ESCAPED_QUOTE, 0, ESCAPED_QUOTE.length())) {\n+    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n+    pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n+    lastHold = pos.getIndex();\n+} else if (escapingOn && c[start] == QUOTE) {\n+    next(pos);\n+    if (appendTo != null) {\n+        appendTo.append(QUOTE);\n+        return appendTo;\n+    } else {\n+        return null;\n+    }\n+} else {\n+    next(pos);\n+}\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}