{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n\n    if (lhs == rhs) {\n        return this;\n    }\n\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n\n    Class<?> lhsClass = lhs.getClass();\n\n    if (!lhsClass.isArray()) {\n        isEquals = lhs.equals(rhs);\n    } else if (lhsClass != rhs.getClass()) {\n        this.setEquals(false);\n    } else if (lhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof char[]) {\n        append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof double[]) {\n        append((double[]) lhs, (double[]) rhs);\n    } else if (lhs instanceof float[]) {\n        append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof boolean[]) {\n        append((boolean[]) lhs, (boolean[]) rhs);\n    } else {\n        append((Object[]) lhs, (Object[]) rhs);\n    }\n\n    return this;\n}\n\nprivate void append(Object[] lhs, Object[] rhs) {\n    if (!isEquals || lhs == rhs) {\n        return;\n    }\n\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return;\n    }\n\n    int lhsLength = lhs.length;\n\n    if (lhsLength != rhs.length) {\n        this.setEquals(false);\n        return;\n    }\n\n    for (int i = 0; i < lhsLength; i++) {\n        Object o1 = lhs[i];\n        Object o2 = rhs[i];\n\n        if (o1 == o2) {\n            continue;\n        }\n\n        if (o1 == null || o2 == null) {\n            this.setEquals(false);\n            return;\n        }\n\n        Class<?> clazz = o1.getClass();\n\n        if (clazz.isArray()) {\n            append(o1, o2);\n        } else if (o1 instanceof BigDecimal) {\n            isEquals = ((BigDecimal) o1).compareTo((BigDecimal) o2) == 0;\n        } else {\n            isEquals = o1.equals(o2);\n        }\n\n        if (!isEquals) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..bc61c7a4 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,94 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+\n+    Class<?> lhsClass = lhs.getClass();\n+\n+    if (!lhsClass.isArray()) {\n+        isEquals = lhs.equals(rhs);\n+    } else if (lhsClass != rhs.getClass()) {\n+        this.setEquals(false);\n+    } else if (lhs instanceof long[]) {\n+        append((long[]) lhs, (long[]) rhs);\n+    } else if (lhs instanceof int[]) {\n+        append((int[]) lhs, (int[]) rhs);\n+    } else if (lhs instanceof short[]) {\n+        append((short[]) lhs, (short[]) rhs);\n+    } else if (lhs instanceof char[]) {\n+        append((char[]) lhs, (char[]) rhs);\n+    } else if (lhs instanceof byte[]) {\n+        append((byte[]) lhs, (byte[]) rhs);\n+    } else if (lhs instanceof double[]) {\n+        append((double[]) lhs, (double[]) rhs);\n+    } else if (lhs instanceof float[]) {\n+        append((float[]) lhs, (float[]) rhs);\n+    } else if (lhs instanceof boolean[]) {\n+        append((boolean[]) lhs, (boolean[]) rhs);\n+    } else {\n+        append((Object[]) lhs, (Object[]) rhs);\n+    }\n+\n+    return this;\n+}\n+\n+private void append(Object[] lhs, Object[] rhs) {\n+    if (!isEquals || lhs == rhs) {\n+        return;\n+    }\n+\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return;\n+    }\n+\n+    int lhsLength = lhs.length;\n+\n+    if (lhsLength != rhs.length) {\n+        this.setEquals(false);\n+        return;\n+    }\n+\n+    for (int i = 0; i < lhsLength; i++) {\n+        Object o1 = lhs[i];\n+        Object o2 = rhs[i];\n+\n+        if (o1 == o2) {\n+            continue;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+\n+        if (o1 == null || o2 == null) {\n             this.setEquals(false);\n+            return;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+\n+        Class<?> clazz = o1.getClass();\n+\n+        if (clazz.isArray()) {\n+            append(o1, o2);\n+        } else if (o1 instanceof BigDecimal) {\n+            isEquals = ((BigDecimal) o1).compareTo((BigDecimal) o2) == 0;\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            isEquals = o1.equals(o2);\n+        }\n+\n+        if (!isEquals) {\n+            return;\n         }\n-        return this;\n     }\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}