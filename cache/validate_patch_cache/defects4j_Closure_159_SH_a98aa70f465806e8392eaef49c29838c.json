{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        if (!\"eval\".equals(child.getString())) {\n          String calleeName = child.getString();\n          changed.add(calleeName);\n          if (getJs().getFunctions().containsKey(calleeName)) {\n            Node funNode = getJs().getFunctions().get(calleeName);\n            findCalledFunctions(funNode, changed);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..a0a48966 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,16 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        if (!\"eval\".equals(child.getString())) {\n+          String calleeName = child.getString();\n+          changed.add(calleeName);\n+          if (getJs().getFunctions().containsKey(calleeName)) {\n+            Node funNode = getJs().getFunctions().get(calleeName);\n+            findCalledFunctions(funNode, changed);\n+          }\n+        }\n+      }\n+    }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}