{
    "patch": "        // Handle negative duration properly\n        if (duration < 0) {\n            duration++; // add one millisecond to compensate for truncation when dividing by 1000 later\n            setIsNegative(true);\n        } else {\n            setIsNegative(false);\n        }\n        \n        this.iDuration = duration;\n        iYears = getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n        iMonths = getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n        iWeeks = getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n        iDays = getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n        iHours = getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n        iMinutes = getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n        iSeconds = getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n        iMillis = getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..1b64664b 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,23 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        // Handle negative duration properly\n+        if (duration < 0) {\n+            duration++; // add one millisecond to compensate for truncation when dividing by 1000 later\n+            setIsNegative(true);\n+        } else {\n+            setIsNegative(false);\n+        }\n+        \n+        this.iDuration = duration;\n+        iYears = getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n+        iMonths = getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n+        iWeeks = getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n+        iDays = getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n+        iHours = getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n+        iMinutes = getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n+        iSeconds = getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n+        iMillis = getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}