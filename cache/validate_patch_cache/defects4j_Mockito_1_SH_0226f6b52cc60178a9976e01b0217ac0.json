{
    "patch": "            if (m instanceof CapturesArguments && position >= indexOfVararg) {\n                Object array = invocation.getArgumentAt(indexOfVararg, Object[].class);\n                int arrayPosition = position - indexOfVararg;\n                if (arrayPosition < Array.getLength(array)) {\n                    ((CapturesArguments) m).captureFrom(Array.get(array, arrayPosition));\n                }\n            } else if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..18abdb7b6 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,15 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (m instanceof CapturesArguments && position >= indexOfVararg) {\n+                Object array = invocation.getArgumentAt(indexOfVararg, Object[].class);\n+                int arrayPosition = position - indexOfVararg;\n+                if (arrayPosition < Array.getLength(array)) {\n+                    ((CapturesArguments) m).captureFrom(Array.get(array, arrayPosition));\n+                }\n+            } else if (m instanceof CapturesArguments) {\n+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}