{
    "patch": "            if (millis < iMillis) {\n                // We need the correct chronology for the zone.\n                Chronology chrono = getChronology();\n                millis = iZone.nextTransition(millis);\n                if ((millis - iMillis) / DateTimeConstants.MILLIS_PER_DAY >= 7) {\n                    if (resetFields) {\n                        throw new IllegalFieldValueException\n                            (DateTimeFieldType.weekyear(), null, \"WWYYY exceeds supported range\");\n                    }\n                    return Long.MAX_VALUE;\n                }\n                // Compute remaining fields relative to new millis\n                LocalDateTime cutover = new LocalDateTime(millis, chrono);\n                millis = cutover.withMillisOfDay((int) iLocalMillisOfDay).getLocalMillis();\n                savedFields = savedFields.clone();\n                count = savedFields.length;\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..23f8e33c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (millis < iMillis) {\n+                // We need the correct chronology for the zone.\n+                Chronology chrono = getChronology();\n+                millis = iZone.nextTransition(millis);\n+                if ((millis - iMillis) / DateTimeConstants.MILLIS_PER_DAY >= 7) {\n+                    if (resetFields) {\n+                        throw new IllegalFieldValueException\n+                            (DateTimeFieldType.weekyear(), null, \"WWYYY exceeds supported range\");\n+                    }\n+                    return Long.MAX_VALUE;\n+                }\n+                // Compute remaining fields relative to new millis\n+                LocalDateTime cutover = new LocalDateTime(millis, chrono);\n+                millis = cutover.withMillisOfDay((int) iLocalMillisOfDay).getLocalMillis();\n+                savedFields = savedFields.clone();\n+                count = savedFields.length;\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}