{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  List<Node> arguments = call.children();\n  int numArgs = arguments.size() - 1; // skip the function name\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  boolean varArgs = functionType.isVarArgs();\n  boolean tooFewArguments = numArgs < minArgs;\n\n  if (!varArgs) {\n    // Non-var_arguments function\n    List<Node> parameters = functionType.getParameters();\n    int sizeDiff = parameters.size() - numArgs + 1; // skip the function name\n    int ordinal = 0;\n\n    // Process each parameter-argument pair\n    for (int i = 1; i < arguments.size(); ++i) {\n      Node argument = arguments.get(i);\n      if (i - sizeDiff < parameters.size()) {\n        Node parameter = parameters.get(i - sizeDiff);\n        ++ordinal;\n        validator.expectArgumentMatchesParameter(t, argument,\n                                                  getJSType(argument), getJSType(parameter),\n                                                  call, ordinal);\n      } else {\n        // Too many arguments\n        // This is okay for var-args functions\n        if (!varArgs) {\n          tooFewArguments = false;\n          break;\n        }\n      }\n    }\n  } else {\n    // Var-args function\n    int numNormalArgs = Math.max(0, functionType.getParamCount() - 1);\n    int numVarArgs = numArgs - numNormalArgs;\n\n    // Check normal arguments first\n    int ordinal = 0;\n    List<Node> normalParameters = functionType.getRequiredFormals();\n    for (int i = 1; i < arguments.size() && i <= numNormalArgs; ++i) {\n      ++ordinal;\n      Node argument = arguments.get(i);\n      Node parameter = normalParameters.get(i - 1);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                                                getJSType(parameter), call, ordinal);\n    }\n\n    // Check var-args arguments\n    Node lastParameter = functionType.getLastParameter();\n    JSType varArgsType = lastParameter.getJSType();\n    for (int i = numNormalArgs + 1; i <= numArgs; ++i) {\n      ++ordinal;\n      Node argument = arguments.get(i);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                                                varArgsType, call, ordinal);\n    }\n  }\n\n  if (tooFewArguments || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs), String.valueOf(minArgs),\n           (maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..568a45ca 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,75 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  List<Node> arguments = call.children();\n+  int numArgs = arguments.size() - 1; // skip the function name\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  boolean varArgs = functionType.isVarArgs();\n+  boolean tooFewArguments = numArgs < minArgs;\n+\n+  if (!varArgs) {\n+    // Non-var_arguments function\n+    List<Node> parameters = functionType.getParameters();\n+    int sizeDiff = parameters.size() - numArgs + 1; // skip the function name\n+    int ordinal = 0;\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+    // Process each parameter-argument pair\n+    for (int i = 1; i < arguments.size(); ++i) {\n+      Node argument = arguments.get(i);\n+      if (i - sizeDiff < parameters.size()) {\n+        Node parameter = parameters.get(i - sizeDiff);\n+        ++ordinal;\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                                                  getJSType(argument), getJSType(parameter),\n+                                                  call, ordinal);\n+      } else {\n+        // Too many arguments\n+        // This is okay for var-args functions\n+        if (!varArgs) {\n+          tooFewArguments = false;\n+          break;\n+        }\n+      }\n+    }\n+  } else {\n+    // Var-args function\n+    int numNormalArgs = Math.max(0, functionType.getParamCount() - 1);\n+    int numVarArgs = numArgs - numNormalArgs;\n+\n+    // Check normal arguments first\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    List<Node> normalParameters = functionType.getRequiredFormals();\n+    for (int i = 1; i < arguments.size() && i <= numNormalArgs; ++i) {\n+      ++ordinal;\n+      Node argument = arguments.get(i);\n+      Node parameter = normalParameters.get(i - 1);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                                                getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    // Check var-args arguments\n+    Node lastParameter = functionType.getLastParameter();\n+    JSType varArgsType = lastParameter.getJSType();\n+    for (int i = numNormalArgs + 1; i <= numArgs; ++i) {\n+      ++ordinal;\n+      Node argument = arguments.get(i);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                                                varArgsType, call, ordinal);\n     }\n   }\n \n+  if (tooFewArguments || maxArgs < numArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+           validator.getReadableJSTypeName(call.getFirstChild(), false),\n+           String.valueOf(numArgs), String.valueOf(minArgs),\n+           (maxArgs != Integer.MAX_VALUE ?\n+            \" and no more than \" + maxArgs + \" argument(s)\" : \"\"));\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}