{
    "patch": "    List<Node> referencedParams = Lists.newLinkedList();\n    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n\n    if (argList.hasChildren() && NodeUtil.isFunctionExpression(function)) {\n      Node innerFn = NodeUtil.getFunctionBody(function).getFirstChild();\n      if (innerFn != null && innerFn.isFunction()) {\n        int numInnerParams = innerFn.getFirstChild().getChildCount();\n        for (int i = 0; i < numInnerParams; i++) {\n          // inner params are still referenced if outer corresponding\n          // functions' args are referenced\n          if (referenced.contains(referencedParams.get(i))) {\n            referenced.add(fnScope.getVar(argList.getChildAtIndex(i).getString()));\n          }\n        }\n      }\n    }\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1d106214 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> referencedParams = Lists.newLinkedList();\n+    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n+\n+    if (argList.hasChildren() && NodeUtil.isFunctionExpression(function)) {\n+      Node innerFn = NodeUtil.getFunctionBody(function).getFirstChild();\n+      if (innerFn != null && innerFn.isFunction()) {\n+        int numInnerParams = innerFn.getFirstChild().getChildCount();\n+        for (int i = 0; i < numInnerParams; i++) {\n+          // inner params are still referenced if outer corresponding\n+          // functions' args are referenced\n+          if (referenced.contains(referencedParams.get(i))) {\n+            referenced.add(fnScope.getVar(argList.getChildAtIndex(i).getString()));\n+          }\n+        }\n+      }\n+    }\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}