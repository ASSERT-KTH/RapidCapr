{
    "patch": "private boolean isFunctionExpression(Node n) {\n  Node firstChild = n.getFirstChild();\n  return n.getType() == Token.FUNCTION &&\n      firstChild != null &&\n      firstChild.getType() != Token.NAME &&\n      n.getParent().getType() != Token.CATCH &&\n      !NodeUtil.isLValue(n);\n}\n\nprivate boolean shouldHandleFunctionInputs(Node n, Node parent) {\n  return parent.getType() == Token.EXPR_RESULT && !isFunctionDeclaration(parent.getLastChild());\n}\n\nprivate boolean isFunctionDeclaration(Node n) {\n  Node parent = n.getParent();\n  return NodeUtil.isFunctionDeclaration(n) || (n.getType() == Token.ASSIGN && parent.getType() == Token.EXPR_RESULT);\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  if (isFunctionExpression(n)) {\n    defineDeclaredFunction(n, parent);\n    if (shouldHandleFunctionInputs(n, parent)) {\n      handleFunctionInputs(parent);\n    }\n    return;\n  }\n\n  if (isBlockScopedDeclaration(n)) {\n    defineLHS(n);\n    return;\n  }\n\n  if (isForInOrOfDeclaration(n, parent)) {\n    defineForInOrOfDeclaration(n, parent);\n    return;\n  }\n\n  if (isAssignmentToNameInForLoopInitializer(n, parent)) {\n    defineLHS(n);\n    return;\n  }\n\n  switch (n.getType()) {\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.LP:\n      if (parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(parent);\n      }\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..23e3356a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,70 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+private boolean isFunctionExpression(Node n) {\n+  Node firstChild = n.getFirstChild();\n+  return n.getType() == Token.FUNCTION &&\n+      firstChild != null &&\n+      firstChild.getType() != Token.NAME &&\n+      n.getParent().getType() != Token.CATCH &&\n+      !NodeUtil.isLValue(n);\n+}\n+\n+private boolean shouldHandleFunctionInputs(Node n, Node parent) {\n+  return parent.getType() == Token.EXPR_RESULT && !isFunctionDeclaration(parent.getLastChild());\n+}\n+\n+private boolean isFunctionDeclaration(Node n) {\n+  Node parent = n.getParent();\n+  return NodeUtil.isFunctionDeclaration(n) || (n.getType() == Token.ASSIGN && parent.getType() == Token.EXPR_RESULT);\n+}\n+\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n+\n+  if (isFunctionExpression(n)) {\n+    defineDeclaredFunction(n, parent);\n+    if (shouldHandleFunctionInputs(n, parent)) {\n+      handleFunctionInputs(parent);\n+    }\n+    return;\n+  }\n+\n+  if (isBlockScopedDeclaration(n)) {\n+    defineLHS(n);\n+    return;\n+  }\n+\n+  if (isForInOrOfDeclaration(n, parent)) {\n+    defineForInOrOfDeclaration(n, parent);\n+    return;\n+  }\n+\n+  if (isAssignmentToNameInForLoopInitializer(n, parent)) {\n+    defineLHS(n);\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+  switch (n.getType()) {\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.LP:\n+      if (parent.getType() == Token.FUNCTION) {\n         handleFunctionInputs(parent);\n-        return;\n       }\n-\n+      break;\n+    default:\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+      break;\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}