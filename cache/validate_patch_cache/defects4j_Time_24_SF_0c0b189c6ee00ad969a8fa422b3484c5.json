{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n\n        long millis = iMillis;\n        boolean yearAltered = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                if (!yearAltered) {\n                    DurationField monthField = saveFieldAndGetDuration(DateTimeFieldType.monthOfYear(), iDefaultMonthOfYear);\n                    DurationField dayField = saveFieldAndGetDuration(DateTimeFieldType.dayOfMonth(), iDefaultDayOfMonth);\n\n                    if ((monthField != null && savedFields[i].iField.getDurationField().equals(monthField))\n                            || (dayField != null && savedFields[i].iField.getDurationField().equals(dayField))) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        millis = iChrono.getDateTimeMillis(iDefaultYear, iDefaultMonthOfYear, iDefaultDayOfMonth,\n                                iDefaultHourOfDay, iDefaultMinuteOfHour, iDefaultSecondOfMinute, iDefaultMillisOfSecond);\n                        yearAltered = true;\n                        i = -1;\n                        continue;\n                    }\n                }\n                millis = savedFields[i].set(millis, resetFields);\n            }\n\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        return millis;\n    }\n\n    private DurationField saveFieldAndGetDuration(DateTimeFieldType fieldType, int value) {\n        DurationField durationField = null;\n        boolean fieldFound = false;\n        for (int i = 0; i < iSavedFieldsCount; i++) {\n            if (fieldType.equals(iSavedFields[i].iField.getType())) {\n                if (!fieldFound) {\n                    durationField = iSavedFields[i].iField.getDurationField();\n                    fieldFound = true;\n                }\n                iSavedFields[i].saveValue(value);\n            }\n        }\n        return durationField;\n    }\n\n    private void saveField(DateTimeFieldType fieldType, int value) {\n        for (int i = 0; i < iSavedFieldsCount; i++) {\n            if (fieldType.equals(iSavedFields[i].iField.getType())) {\n                iSavedFields[i].saveValue(value);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3d4d370c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,81 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n+public long computeMillis(boolean resetFields, String text) {\n         SavedField[] savedFields = iSavedFields;\n         int count = iSavedFieldsCount;\n         if (iSavedFieldsShared) {\n             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n             iSavedFieldsShared = false;\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n \n         long millis = iMillis;\n+        boolean yearAltered = false;\n         try {\n             for (int i = 0; i < count; i++) {\n+                if (!yearAltered) {\n+                    DurationField monthField = saveFieldAndGetDuration(DateTimeFieldType.monthOfYear(), iDefaultMonthOfYear);\n+                    DurationField dayField = saveFieldAndGetDuration(DateTimeFieldType.dayOfMonth(), iDefaultDayOfMonth);\n+\n+                    if ((monthField != null && savedFields[i].iField.getDurationField().equals(monthField))\n+                            || (dayField != null && savedFields[i].iField.getDurationField().equals(dayField))) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        millis = iChrono.getDateTimeMillis(iDefaultYear, iDefaultMonthOfYear, iDefaultDayOfMonth,\n+                                iDefaultHourOfDay, iDefaultMinuteOfHour, iDefaultSecondOfMinute, iDefaultMillisOfSecond);\n+                        yearAltered = true;\n+                        i = -1;\n+                        continue;\n+                    }\n+                }\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n             }\n             throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n+\n         return millis;\n     }\n+\n+    private DurationField saveFieldAndGetDuration(DateTimeFieldType fieldType, int value) {\n+        DurationField durationField = null;\n+        boolean fieldFound = false;\n+        for (int i = 0; i < iSavedFieldsCount; i++) {\n+            if (fieldType.equals(iSavedFields[i].iField.getType())) {\n+                if (!fieldFound) {\n+                    durationField = iSavedFields[i].iField.getDurationField();\n+                    fieldFound = true;\n+                }\n+                iSavedFields[i].saveValue(value);\n+            }\n+        }\n+        return durationField;\n+    }\n+\n+    private void saveField(DateTimeFieldType fieldType, int value) {\n+        for (int i = 0; i < iSavedFieldsCount; i++) {\n+            if (fieldType.equals(iSavedFields[i].iField.getType())) {\n+                iSavedFields[i].saveValue(value);\n+            }\n+        }\n+    }\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: method saveField(DateTimeFieldType,int) is already defined in class DateTimeParserBucket",
    "test_result": "ERROR"
}