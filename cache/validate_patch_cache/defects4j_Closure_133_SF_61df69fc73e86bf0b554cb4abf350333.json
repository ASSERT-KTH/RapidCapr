{
    "patch": "private String getRemainingJSDocLine() {\n  String result = null;\n  try {\n    String line = stream.getRemainingJSDocLine();\n    if (line != null && !line.trim().isEmpty()) {\n      result = line.trim();\n    }\n  } catch (Exception e) {\n    // ignore error caused by bad type annotation\n  }\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..e59b5d14 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,18 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n+private String getRemainingJSDocLine() {\n+  String result = null;\n+  try {\n+    String line = stream.getRemainingJSDocLine();\n+    if (line != null && !line.trim().isEmpty()) {\n+      result = line.trim();\n+    }\n+  } catch (Exception e) {\n+    // ignore error caused by bad type annotation\n   }\n+  return result;\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}