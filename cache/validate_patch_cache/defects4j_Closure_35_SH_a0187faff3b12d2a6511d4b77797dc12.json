{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : objType.getOwnPropertyNames()) {\n          JSType propType = objType.getPropertyType(prop);\n          if (!constraintObj.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!constraintObj.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            constraintObj.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..b67493d0 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,18 +1121,17 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+        for (String prop : objType.getOwnPropertyNames()) {\n+          JSType propType = objType.getPropertyType(prop);\n+          if (!constraintObj.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n+            if (!constraintObj.hasProperty(prop)) {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            constraintObj.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}