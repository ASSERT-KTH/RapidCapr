{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, List<Question>>>(){}.getType();\n    Map<String, List<Question>> map = gson.fromJson(json, type);\n    double typedCount = 0;\n    double totalCount = 0;\n    for (Map.Entry<String, List<Question>> entry : map.entrySet()) {\n        for (Question question : entry.getValue()) {\n            totalCount++;\n            if (question.getTyped()) {\n                typedCount++;\n            }\n        }\n    }\n    return (typedCount/totalCount)*100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c6b3caaa 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, List<Question>>>(){}.getType();\n+    Map<String, List<Question>> map = gson.fromJson(json, type);\n+    double typedCount = 0;\n+    double totalCount = 0;\n+    for (Map.Entry<String, List<Question>> entry : map.entrySet()) {\n+        for (Question question : entry.getValue()) {\n+            totalCount++;\n+            if (question.getTyped()) {\n+                typedCount++;\n+            }\n+        }\n+    }\n+    return (typedCount/totalCount)*100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}