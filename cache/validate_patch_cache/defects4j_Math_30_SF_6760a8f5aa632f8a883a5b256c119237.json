{
    "patch": "private static final double COEFFICIENT = 1.0 / (2 * Double.MAX_VALUE);\n\nprivate double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n    final double n = n1 + n2;\n\n    // Calculate the expected value (mean)\n    final double expectedValue = (n1 * n2) / 2.0;\n\n    // Calculate the variance and standard deviation\n    final double variance = (n1 * n2 * (n + 1)) / 12.0;\n    final double standardDeviation = Math.sqrt(variance);\n\n    // Check if the standard deviation is zero\n    if (standardDeviation == 0) {\n        return Double.NaN;\n    }\n\n    // Calculate the z-score\n    double z = (Umin - expectedValue) / standardDeviation;\n    if (Math.abs(z) > 1.0 / COEFFICIENT) {\n        z = z > 0.0 ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n    } else {\n        z = COEFFICIENT * z * z * z;\n        final double[] c = {1.0 / 3, 1.0 / 10, 1.0 / 42, 1.0 / 216, 1.0 / 1320};\n        double sum = c[4];\n        for (int i = 3; i >= 0; i--) {\n            sum *= z;\n            sum += c[i];\n        }\n        z *= sum;\n    }\n\n    // Calculate the two-sided p-value\n    final NormalDistribution standardNormal = new NormalDistribution();\n    final double pValue = 2.0 * (1.0 - standardNormal.cumulativeProbability(Math.abs(z)));\n\n    return pValue;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..43ef08e00 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,24 +165,46 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n-                                             final int n1,\n-                                             final int n2)\n-        throws ConvergenceException, MaxCountExceededException {\n+private static final double COEFFICIENT = 1.0 / (2 * Double.MAX_VALUE);\n \n-        final int n1n2prod = n1 * n2;\n+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)\n+        throws ConvergenceException, MaxCountExceededException {\n+    final double n = n1 + n2;\n \n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n+    // Calculate the expected value (mean)\n+    final double expectedValue = (n1 * n2) / 2.0;\n \n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+    // Calculate the variance and standard deviation\n+    final double variance = (n1 * n2 * (n + 1)) / 12.0;\n+    final double standardDeviation = Math.sqrt(variance);\n \n-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n+    // Check if the standard deviation is zero\n+    if (standardDeviation == 0) {\n+        return Double.NaN;\n+    }\n \n-        return 2 * standardNormal.cumulativeProbability(z);\n+    // Calculate the z-score\n+    double z = (Umin - expectedValue) / standardDeviation;\n+    if (Math.abs(z) > 1.0 / COEFFICIENT) {\n+        z = z > 0.0 ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n+    } else {\n+        z = COEFFICIENT * z * z * z;\n+        final double[] c = {1.0 / 3, 1.0 / 10, 1.0 / 42, 1.0 / 216, 1.0 / 1320};\n+        double sum = c[4];\n+        for (int i = 3; i >= 0; i--) {\n+            sum *= z;\n+            sum += c[i];\n+        }\n+        z *= sum;\n     }\n \n+    // Calculate the two-sided p-value\n+    final NormalDistribution standardNormal = new NormalDistribution();\n+    final double pValue = 2.0 * (1.0 - standardNormal.cumulativeProbability(Math.abs(z)));\n+\n+    return pValue;\n+}\n+\n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=\n      * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.08641> but was:<1.0>",
    "test_result": "FAIL"
}