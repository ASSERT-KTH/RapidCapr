{
    "patch": "            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                final double[] norm = new double[init.length];\n                for (int i = 0; i < init.length; i++) {\n                    final double boundDiff = boundaries[1][i] - boundaries[0][i];\n                    if (boundDiff < 0) {\n                        throw new NumberIsTooLargeException(boundDiff, 0, false);\n                    } else if (boundDiff == 0) {\n                        norm[i] = 0;\n                    } else if (Double.isInfinite(boundDiff)) {\n                        norm[i] = (init[i] < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n                    } else {\n                        norm[i] = -0.5 * (1 + (init[i] / boundaries[1][i] + init[i] / boundaries[0][i]));\n                    }\n                    // Check for non-finite values (NaN, Inf).\n                    if (!Double.isFinite(norm[i])) {\n                        throw new MathIllegalStateException(LocalizedFormats.UNBOUNDED_NORMALIZATION);\n                    }\n                }\n                warnings = null;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..84e482cff 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,32 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                final double[] norm = new double[init.length];\n+                for (int i = 0; i < init.length; i++) {\n+                    final double boundDiff = boundaries[1][i] - boundaries[0][i];\n+                    if (boundDiff < 0) {\n+                        throw new NumberIsTooLargeException(boundDiff, 0, false);\n+                    } else if (boundDiff == 0) {\n+                        norm[i] = 0;\n+                    } else if (Double.isInfinite(boundDiff)) {\n+                        norm[i] = (init[i] < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+                    } else {\n+                        norm[i] = -0.5 * (1 + (init[i] / boundaries[1][i] + init[i] / boundaries[0][i]));\n+                    }\n+                    // Check for non-finite values (NaN, Inf).\n+                    if (!Double.isFinite(norm[i])) {\n+                        throw new MathIllegalStateException(LocalizedFormats.UNBOUNDED_NORMALIZATION);\n+                    }\n+                }\n+                warnings = null;\n+            }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}