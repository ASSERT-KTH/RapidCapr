{
    "patch": "if (parent != null && parent.isAssign()) {\n  Node lhs = parent.getFirstChild();\n  Node rhs = lhs.getNext();\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle nested assignments properly\n    // (e.g. (a = this).property = c;), assignLhsChild should not be overridden.\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs;\n    }\n  } else {\n    // Only traverse the right side if it's not an assignment to a prototype property or sub-property.\n    if (NodeUtil.isGet(lhs)) {\n      if (lhs.isGetProp() && \"prototype\".equals(lhs.getLastChild().getString())) {\n        return false;\n      }\n      Node llhs = lhs.getFirstChild();\n      if (llhs.isGetProp() && \"prototype\".equals(llhs.getLastChild().getString())) {\n        return false;\n      }\n    }\n    if (jsDoc != null && jsDoc.hasLendsName()) {\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5fc89d73 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,32 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.isAssign()) {\n+  Node lhs = parent.getFirstChild();\n+  Node rhs = lhs.getNext();\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle nested assignments properly\n+    // (e.g. (a = this).property = c;), assignLhsChild should not be overridden.\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs;\n+    }\n+  } else {\n+    // Only traverse the right side if it's not an assignment to a prototype property or sub-property.\n+    if (NodeUtil.isGet(lhs)) {\n+      if (lhs.isGetProp() && \"prototype\".equals(lhs.getLastChild().getString())) {\n+        return false;\n+      }\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.isGetProp() && \"prototype\".equals(llhs.getLastChild().getString())) {\n+        return false;\n+      }\n+    }\n+    if (jsDoc != null && jsDoc.hasLendsName()) {\n+      return false;\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}