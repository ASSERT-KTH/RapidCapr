{
    "patch": "        callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n        // Check if the only arg is an immutable string or number.\n        // (We don't fold string concatenation, since the string\n        // constructor is different from the + operator in that it\n        // returns '' for null/undefined)\n        if ((value.isString() || value.isNumber()) &&\n            !value.hasChildren() &&\n            !value.getBooleanProp(Node.IS_TEMPLATE_BLOCK) &&\n            !value.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..5579e666 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,24 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+        callTarget.getString().equals(\"String\")) {\n+      Node value = callTarget.getNext();\n+      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n+        // Check if the only arg is an immutable string or number.\n+        // (We don't fold string concatenation, since the string\n+        // constructor is different from the + operator in that it\n+        // returns '' for null/undefined)\n+        if ((value.isString() || value.isNumber()) &&\n+            !value.hasChildren() &&\n+            !value.getBooleanProp(Node.IS_TEMPLATE_BLOCK) &&\n+            !value.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}