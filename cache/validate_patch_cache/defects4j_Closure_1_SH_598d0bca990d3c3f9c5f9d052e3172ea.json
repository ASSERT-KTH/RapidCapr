{
    "patch": "    ImmutableList<String> names = null;\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (referenced.contains(var)) {\n          break;\n        }\n        names = ImmutableList.<String>builder().add(lastArg.getString()).addAll(names == null ? ImmutableList.<String>of() : names).build();\n        argList.removeChild(lastArg);\n        lastArg = argList.getLastChild();\n        compiler.reportCodeChange();\n      }\n    } else {\n      // Don't strip unreferenced args if we are optimizing calls.\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    if (names != null) {\n      String joinedNames = Joiner.on(\", \").join(names);\n      compiler.reportChangeToEnclosingScope(argList);\n      compiler.addToDebugLog(\"Removing unreferenced parameter(s): \" + joinedNames);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..59456b9c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ImmutableList<String> names = null;\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (referenced.contains(var)) {\n+          break;\n+        }\n+        names = ImmutableList.<String>builder().add(lastArg.getString()).addAll(names == null ? ImmutableList.<String>of() : names).build();\n+        argList.removeChild(lastArg);\n+        lastArg = argList.getLastChild();\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      // Don't strip unreferenced args if we are optimizing calls.\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    if (names != null) {\n+      String joinedNames = Joiner.on(\", \").join(names);\n+      compiler.reportChangeToEnclosingScope(argList);\n+      compiler.addToDebugLog(\"Removing unreferenced parameter(s): \" + joinedNames);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}