{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (m.getColumnDimension() != m.getRowDimension()) {\n        throw new IllegalArgumentException(\"Input matrix must be square\");\n    }\n\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n\n    final RealMatrix sqrt = dec.getSquareRoot();\n    final RealMatrix sqrtInv = new LUDecomposition(sqrt).getSolver().getInverse();\n    \n    RealMatrix product = sqrt.multiply(sqrtInv);\n    double trace = 0;\n    for (int i = 0; i < n; i++) {\n        trace += product.getEntry(i, i); \n    }\n\n    return sqrt.scalarMultiply(Math.sqrt(trace/n));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5b4acd0c9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (m.getColumnDimension() != m.getRowDimension()) {\n+        throw new IllegalArgumentException(\"Input matrix must be square\");\n     }\n+\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+\n+    final RealMatrix sqrt = dec.getSquareRoot();\n+    final RealMatrix sqrtInv = new LUDecomposition(sqrt).getSolver().getInverse();\n+    \n+    RealMatrix product = sqrt.multiply(sqrtInv);\n+    double trace = 0;\n+    for (int i = 0; i < n; i++) {\n+        trace += product.getEntry(i, i); \n+    }\n+\n+    return sqrt.scalarMultiply(Math.sqrt(trace/n));\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}