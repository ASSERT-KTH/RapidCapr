{
    "patch": "    Type typeArgument = getActualTypeArgumentFor(typeVariable);\n    if (typeArgument instanceof TypeVariable) {\n        registerTypeVariablesOn(typeArgument);\n    } else if (typeArgument != null) {\n        for (Type type : ((ParameterizedType) typeArgument).getActualTypeArguments()) {\n            registerTypeVariablesOn(type);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..4ebb6354f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,19 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    Type typeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (typeArgument instanceof TypeVariable) {\n+        registerTypeVariablesOn(typeArgument);\n+    } else if (typeArgument != null) {\n+        for (Type type : ((ParameterizedType) typeArgument).getActualTypeArguments()) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType",
    "test_result": "FAIL"
}