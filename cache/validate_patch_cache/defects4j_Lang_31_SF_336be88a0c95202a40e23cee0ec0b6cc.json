{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n\n        final int length = sequence.length();\n\n        for (int i = 0; i < length; i++) {\n            final char ch = sequence.charAt(i);\n            if (Character.isHighSurrogate(ch) && i < length - 1) {\n                final char ch2 = sequence.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    final int codepoint = Character.toCodePoint(ch, ch2);\n                    if (contains(searchChars, codepoint)) {\n                        return true;\n                    }\n                    i++;\n                }\n            } else if (contains(searchChars, ch)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static boolean contains(final char[] array, final int codepoint) {\n        for (final char c : array) {\n            if (Character.codePointAt(new char[] { c }, 0) == codepoint) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..a179de84 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n+        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+\n+        final int length = sequence.length();\n+\n+        for (int i = 0; i < length; i++) {\n+            final char ch = sequence.charAt(i);\n+            if (Character.isHighSurrogate(ch) && i < length - 1) {\n+                final char ch2 = sequence.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    final int codepoint = Character.toCodePoint(ch, ch2);\n+                    if (contains(searchChars, codepoint)) {\n+                        return true;\n+                    }\n+                    i++;\n+                }\n+            } else if (contains(searchChars, ch)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private static boolean contains(final char[] array, final int codepoint) {\n+        for (final char c : array) {\n+            if (Character.codePointAt(new char[] { c }, 0) == codepoint) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}