{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        // Check if the child node is actually an expression\n        if (!NodeUtil.isExpressionNode(maybeExpr)) {\n            return false;\n        }\n\n        // Check if the expression is a function call and it has a non-empty return statement\n        Node expr = maybeExpr.getFirstChild();\n        if (!NodeUtil.isCallTo(expr, \"Function.prototype.bind\") &&\n            !NodeUtil.isCallTo(expr, \"goog.bind\")) {\n          return true;\n        }\n\n        NodeList<Node> children = maybeExpr.getLastChild().getChildren();\n        return children.size() != 0 && children.getLast().getType() != Token.EMPTY;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..0937a4dc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,24 +516,27 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+        // Check if the child node is actually an expression\n+        if (!NodeUtil.isExpressionNode(maybeExpr)) {\n+            return false;\n+        }\n+\n+        // Check if the expression is a function call and it has a non-empty return statement\n+        Node expr = maybeExpr.getFirstChild();\n+        if (!NodeUtil.isCallTo(expr, \"Function.prototype.bind\") &&\n+            !NodeUtil.isCallTo(expr, \"goog.bind\")) {\n+          return true;\n+        }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        NodeList<Node> children = maybeExpr.getLastChild().getChildren();\n+        return children.size() != 0 && children.getLast().getType() != Token.EMPTY;\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}