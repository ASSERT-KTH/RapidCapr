{
    "patch": "            // handle the case where instantLocal is behind the previous transition\n            long prevTransition = previousTransition(instantAdjusted);\n            if (prevTransition >= instantLocal - offsetLocal) {\n                int prevOffset = getOffset(prevTransition);\n                if (prevOffset > offsetAdjusted) {\n                    return prevOffset;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1668e4e4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,14 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // handle the case where instantLocal is behind the previous transition\n+            long prevTransition = previousTransition(instantAdjusted);\n+            if (prevTransition >= instantLocal - offsetLocal) {\n+                int prevOffset = getOffset(prevTransition);\n+                if (prevOffset > offsetAdjusted) {\n+                    return prevOffset;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}