{
    "patch": "    private long safeAdd(long val1, int val2) {\n        if (val2 == 0) {\n            return val1;\n        }\n        long total = val1 + val2;\n        if ((val1 < 0) != (val2 < 0) && (val1 < 0) != (total < 0)) {\n            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n        }\n        return total;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b3dda136 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    private long safeAdd(long val1, int val2) {\n+        if (val2 == 0) {\n+            return val1;\n+        }\n+        long total = val1 + val2;\n+        if ((val1 < 0) != (val2 < 0) && (val1 < 0) != (total < 0)) {\n+            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n+        }\n+        return total;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}