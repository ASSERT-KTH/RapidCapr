{
    "patch": "package com.mycompany.myapp;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.ErrorManager;\nimport com.google.javascript.jscomp.ErrorReporter;\nimport com.google.javascript.jscomp.JSError;\nimport com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.jscomp.SourceFile;\nimport com.google.javascript.jscomp.TypedScope;\nimport com.google.javascript.jscomp.TypedVar;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormatException;\nimport com.google.javascript.jscomp.parsing.parser.util.format.UnexpectedTokenException;\nimport com.google.javascript.jscomp.parsing.parser.util.format.Warning;\nimport com.google.javascript.rhino.IR;\nimport com.google.javascript.rhino.JSType;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.StaticSourceFile;\nimport com.google.javascript.rhino.jstype.TemplateType;\nimport com.google.javascript.rhino.jstype.TemplateTypeBuilder;\nimport com.google.javascript.rhino.jstype.UnionTypeBuilder;\nimport com.google.javascript.rhino.jstype.UnknownType;\nimport com.google.javascript.rhino.jstype.VoidType;\nimport com.google.javascript.rhino.jstype.FunctionType.Parameter;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.jstype.RecordType.PropertyBuilder;\nimport com.google.javascript.rhino.jstype.RecordType.Property;\nimport com.google.javascript.rhino.jstype.TemplateType.TemplateTypeConstructor;\n\n/**\n * An AST rewrite pass that rewrites ES6 and Typescript constructs down to ES5 constructs, using\n * Closure Compiler's AST nodes.\n *\n * <p>This pass can be used as a preprocessing step prior to emitting Closure Compiler compatible\n * JavaScript.\n */\npublic class IRFactory implements NodeTraversal.Callback, ErrorReporter {\n\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\n          \"use strict\", \"use asm\");\n\n  private final AbstractCompiler compiler;\n  private final TypedScope globalScope;\n  private final SourceFile sourceFile;\n  private final ErrorManager errorManager;\n\n  public IRFactory(\n      AbstractCompiler compiler,\n      TypedScope globalScope,\n      SourceFile sourceFile,\n      ErrorManager errorManager) {\n    this.compiler = compiler;\n    this.globalScope = globalScope;\n    this.sourceFile = sourceFile;\n    this.errorManager = errorManager;\n  }\n\n  private void reportError(String message, int lineno, int charno) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), lineno, charno, message));\n  }\n\n  private void reportWarning(String message, int lineno, int charno) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), lineno, charno, Warning.format(message)));\n  }\n\n  @Override\n  public void error(String message) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), -1, -1, message));\n  }\n\n  @Override\n  public void warning(String message) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), -1, -1, Warning.format(message)));\n  }\n\n  @Override\n  public void report(CheckLevel level, JSError error) {\n    if (level == CheckLevel.ERROR) {\n      errorManager.report(error);\n    } else if (level == CheckLevel.WARNING) {\n      errorManager.report(\n          JSError.make(sourceFile.getName(), error.getLineNumber(),\n              error.getCharno(), Warning.format(error.getDescription())));\n    } else if (level == CheckLevel.OFF) {\n      // Do nothing.\n    }\n  }\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (isDirective(n)) {\n      // Ignore directives, since they will not be present in the output.\n    } else {\n      Node newNode = processNode(n);\n      if (newNode != null) {\n        parent.replaceChild(n, newNode);\n      }\n    }\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return nType == Token.EXPR_RESULT &&\n        n.getFirstChild().isString() &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  public Node processNode(Node node) {\n    switch (node.getType()) {\n      case Token.BLOCK:\n        return processBlock(node);\n\n      case Token.BREAK:\n        return processBreakStatement(node);\n\n      case Token.CATCH:\n        return processCatchClause(node);\n\n      case Token.HOOK:\n        return processConditionalExpression(node);\n\n      case Token.CONTINUE:\n        return processContinueStatement(node);\n\n      case Token.DO:\n        return processDoLoop(node);\n\n      case Token.GETELEM:\n        return processElementGet(node);\n\n      case Token.EMPTY:\n        return processEmptyExpression(node);\n\n      default:\n        return null;\n\n    }\n  }\n\n  Node newNode(int type, Node... children) {\n    return new Node(type, children);\n  }\n\n  Node newNode(int type, String value) {\n    return new Node(type, IR.string(value));\n  }\n\n  Node newNode(Token type, Node... children) {\n    return new Node(type, children);\n  }\n\n  Node transform(AstNode node) {\n    if (node == null) {\n      return null;\n    }\n\n    Node n = node.accept(this);\n    if (n == null) {\n      // Since we didn't process anything for this case, we should just return the original node.\n      return n;\n    }\n\n    return n;\n  }\n\n  Block transformBlock(Block blockNode) {\n    if (blockNode == null) {\n      return null;\n    }\n\n    Node block = IR.block();\n    for (AstNode statement : blockNode.getStatements()) {\n      Node n = transform(statement);\n      if (n != null) {\n        block.addChildToBack(n);\n      }\n    }\n    return new Block(block.children());\n  }\n\n  private Node processBlock(Node blockNode) {\n    Node newBlock = newNode(Token.BLOCK);\n    for (Node child = blockNode.getFirstChild(); child != null; child = child.getNext()) {\n      Node newChild = processNode(child);\n      if (newChild != null) {\n        newBlock.addChildToBack(newChild);\n      }\n    }\n    return newBlock;\n  }\n\n  private Node processBreakStatement(Node statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.hasChildren()) {\n      Node labelName = transform(statementNode.getFirstChild());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  private Node processCatchClause(Node clauseNode) {\n    AstNode catchVar = clauseNode.getFirstChild();\n    Node node = newNode(Token.CATCH, transform(catchVar));\n    if (clauseNode.getChildCount() == 3) {\n      error(\"Catch clauses are not supported\");\n    }\n    node.addChildToBack(transformBlock(clauseNode.getLastChild()));\n    return node;\n  }\n\n  private Node processConditionalExpression(Node exprNode) {\n    return newNode(\n        Token.HOOK,\n        transform(exprNode.getFirstChild()),\n        transform(exprNode.getFirstChild().getNext()),\n        transform(exprNode.getLastChild()));\n  }\n\n  private Node processContinueStatement(Node statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.hasChildren()) {\n      Node labelName = transform(statementNode.getFirstChild());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  private Node processDoLoop(Node loopNode) {\n    return newNode(\n        Token.DO,\n        transformBlock(loopNode.getFirstChild()),\n        transform(loopNode.getFirstChild().getNext()));\n  }\n\n  private Node processElementGet(Node getNode) {\n    return newNode(\n        Token.GETELEM,\n        transform(getNode.getFirstChild()),\n        transform(getNode.getLastChild()));\n  }\n\n  private Node processEmptyExpression(Node exprNode) {\n    return newNode(Token.EMPTY);\n  }\n\n  private Node processExpressionStatement(Node statementNode) {\n    Node node = newNode(transformTokenType(statementNode.getToken()));\n    node.addChildToBack(transform(statementNode.getFirstChild()));\n    return node;\n  }\n\n  private int transformTokenType(int type) {\n    switch (type) {\n      case Token.EXPR_RESULT: return Token.EXPR_RESULT;\n      default: return Token.EXPR_RESULT;\n    }\n  }\n\n  private Node processForInLoop(Node loopNode) {\n\n      // Return the bare minimum to put the AST in a valid state.\n    return newNode(\n        Token.FOR,\n        transform(loopNode.getFirstChild()),\n        transform(loopNode.getFirstChild().getNext()),\n        transformBlock(loopNode.getLastChild()));\n  }\n  \n  private Node processForLoop(Node loopNode) {\n    throw new UnsupportedOperationException(\"For loop not currently supported\");\n  }\n\n  private Node processFunction(Node functionNode) {\n    throw new UnsupportedOperationException(\"Function not currently supported\");\n  }\n\n  private Node processIf(Node ifNode) {\n    throw new UnsupportedOperationException(\"If statement not currently supported\");\n  }\n\n  private Node processLabel(Node labelNode) {\n    throw new UnsupportedOperationException(\"Label not currently supported\");\n  }\n\n  private Node processName(Node nameNode) {\n    throw new UnsupportedOperationException(\"Name not currently supported\");\n  }\n\n  private Node processNew(Node newNode) {\n    throw new UnsupportedOperationException(\"New not currently supported\");\n  }\n\n  private Node processNumber(Node numberNode) {\n    throw new UnsupportedOperationException(\"Number not currently supported\");\n  }\n\n  private Node processObject(ObjectNode objectNode) {\n    throw new UnsupportedOperationException(\"Object not currently supported\");\n  }\n\n  private Node processProperty(Node propertyNode) {\n    throw new UnsupportedOperationException(\"Property not currently supported\");\n  }\n\n  private Node processRegExp(Node regexpNode) {\n    throw new UnsupportedOperationException(\"RegExp not currently supported\");\n  }\n\n  private Node processReturn(Node returnNode) {\n    throw new UnsupportedOperationException(\"Return not currently supported\");\n  }\n\n  private Node processString(Node stringNode) {\n    throw new UnsupportedOperationException(\"String not currently supported\");\n  }\n\n  private Node processSwitch(Node switchNode) {\n    throw new UnsupportedOperationException(\"Switch not currently supported\");\n  }\n\n  private Node processThrow(Node throwNode) {\n    throw new UnsupportedOperationException(\"Throw not currently supported\");\n  }\n\n  private Node processTryCatchFinally(Node tryNode) {\n    throw new UnsupportedOperationException(\"Try-Catch-Finally not currently supported\");\n  }\n\n  private Node processUnary(Node unaryNode) {\n    throw new UnsupportedOperationException(\"Unary not currently supported\");\n  }\n\n  private Node processVar(Node varNode) {\n    throw new UnsupportedOperationException(\"Var not currently supported\");\n  }\n\n  private Node processWhile(Node whileNode) {\n    throw new UnsupportedOperationException(\"While not currently supported\");\n  }\n\n  private Node processWith(Node withNode) {\n    throw new UnsupportedOperationException(\"With not currently supported\");\n  }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..d1a02bcf 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,373 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+package com.mycompany.myapp;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+import com.google.common.collect.ImmutableSet;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.ErrorManager;\n+import com.google.javascript.jscomp.ErrorReporter;\n+import com.google.javascript.jscomp.JSError;\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.jscomp.SourceFile;\n+import com.google.javascript.jscomp.TypedScope;\n+import com.google.javascript.jscomp.TypedVar;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormatException;\n+import com.google.javascript.jscomp.parsing.parser.util.format.UnexpectedTokenException;\n+import com.google.javascript.jscomp.parsing.parser.util.format.Warning;\n+import com.google.javascript.rhino.IR;\n+import com.google.javascript.rhino.JSType;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.StaticSourceFile;\n+import com.google.javascript.rhino.jstype.TemplateType;\n+import com.google.javascript.rhino.jstype.TemplateTypeBuilder;\n+import com.google.javascript.rhino.jstype.UnionTypeBuilder;\n+import com.google.javascript.rhino.jstype.UnknownType;\n+import com.google.javascript.rhino.jstype.VoidType;\n+import com.google.javascript.rhino.jstype.FunctionType.Parameter;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.jstype.RecordType.PropertyBuilder;\n+import com.google.javascript.rhino.jstype.RecordType.Property;\n+import com.google.javascript.rhino.jstype.TemplateType.TemplateTypeConstructor;\n+\n+/**\n+ * An AST rewrite pass that rewrites ES6 and Typescript constructs down to ES5 constructs, using\n+ * Closure Compiler's AST nodes.\n+ *\n+ * <p>This pass can be used as a preprocessing step prior to emitting Closure Compiler compatible\n+ * JavaScript.\n+ */\n+public class IRFactory implements NodeTraversal.Callback, ErrorReporter {\n+\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\n+          \"use strict\", \"use asm\");\n+\n+  private final AbstractCompiler compiler;\n+  private final TypedScope globalScope;\n+  private final SourceFile sourceFile;\n+  private final ErrorManager errorManager;\n+\n+  public IRFactory(\n+      AbstractCompiler compiler,\n+      TypedScope globalScope,\n+      SourceFile sourceFile,\n+      ErrorManager errorManager) {\n+    this.compiler = compiler;\n+    this.globalScope = globalScope;\n+    this.sourceFile = sourceFile;\n+    this.errorManager = errorManager;\n+  }\n+\n+  private void reportError(String message, int lineno, int charno) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), lineno, charno, message));\n+  }\n+\n+  private void reportWarning(String message, int lineno, int charno) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), lineno, charno, Warning.format(message)));\n+  }\n+\n+  @Override\n+  public void error(String message) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), -1, -1, message));\n+  }\n+\n+  @Override\n+  public void warning(String message) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), -1, -1, Warning.format(message)));\n+  }\n+\n+  @Override\n+  public void report(CheckLevel level, JSError error) {\n+    if (level == CheckLevel.ERROR) {\n+      errorManager.report(error);\n+    } else if (level == CheckLevel.WARNING) {\n+      errorManager.report(\n+          JSError.make(sourceFile.getName(), error.getLineNumber(),\n+              error.getCharno(), Warning.format(error.getDescription())));\n+    } else if (level == CheckLevel.OFF) {\n+      // Do nothing.\n     }\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (isDirective(n)) {\n+      // Ignore directives, since they will not be present in the output.\n+    } else {\n+      Node newNode = processNode(n);\n+      if (newNode != null) {\n+        parent.replaceChild(n, newNode);\n       }\n-      return node;\n     }\n+  }\n+\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return nType == Token.EXPR_RESULT &&\n+        n.getFirstChild().isString() &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  public Node processNode(Node node) {\n+    switch (node.getType()) {\n+      case Token.BLOCK:\n+        return processBlock(node);\n+\n+      case Token.BREAK:\n+        return processBreakStatement(node);\n+\n+      case Token.CATCH:\n+        return processCatchClause(node);\n+\n+      case Token.HOOK:\n+        return processConditionalExpression(node);\n+\n+      case Token.CONTINUE:\n+        return processContinueStatement(node);\n+\n+      case Token.DO:\n+        return processDoLoop(node);\n+\n+      case Token.GETELEM:\n+        return processElementGet(node);\n+\n+      case Token.EMPTY:\n+        return processEmptyExpression(node);\n+\n+      default:\n+        return null;\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n     }\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  Node newNode(int type, Node... children) {\n+    return new Node(type, children);\n+  }\n+\n+  Node newNode(int type, String value) {\n+    return new Node(type, IR.string(value));\n+  }\n+\n+  Node newNode(Token type, Node... children) {\n+    return new Node(type, children);\n+  }\n+\n+  Node transform(AstNode node) {\n+    if (node == null) {\n+      return null;\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+    Node n = node.accept(this);\n+    if (n == null) {\n+      // Since we didn't process anything for this case, we should just return the original node.\n+      return n;\n+    }\n+\n+    return n;\n+  }\n+\n+  Block transformBlock(Block blockNode) {\n+    if (blockNode == null) {\n+      return null;\n+    }\n+\n+    Node block = IR.block();\n+    for (AstNode statement : blockNode.getStatements()) {\n+      Node n = transform(statement);\n+      if (n != null) {\n+        block.addChildToBack(n);\n       }\n-      return node;\n     }\n+    return new Block(block.children());\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  private Node processBlock(Node blockNode) {\n+    Node newBlock = newNode(Token.BLOCK);\n+    for (Node child = blockNode.getFirstChild(); child != null; child = child.getNext()) {\n+      Node newChild = processNode(child);\n+      if (newChild != null) {\n+        newBlock.addChildToBack(newChild);\n+      }\n     }\n+    return newBlock;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+  private Node processBreakStatement(Node statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.hasChildren()) {\n+      Node labelName = transform(statementNode.getFirstChild());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+  private Node processCatchClause(Node clauseNode) {\n+    AstNode catchVar = clauseNode.getFirstChild();\n+    Node node = newNode(Token.CATCH, transform(catchVar));\n+    if (clauseNode.getChildCount() == 3) {\n+      error(\"Catch clauses are not supported\");\n     }\n+    node.addChildToBack(transformBlock(clauseNode.getLastChild()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+  private Node processConditionalExpression(Node exprNode) {\n+    return newNode(\n+        Token.HOOK,\n+        transform(exprNode.getFirstChild()),\n+        transform(exprNode.getFirstChild().getNext()),\n+        transform(exprNode.getLastChild()));\n+  }\n+\n+  private Node processContinueStatement(Node statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.hasChildren()) {\n+      Node labelName = transform(statementNode.getFirstChild());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  private Node processDoLoop(Node loopNode) {\n+    return newNode(\n+        Token.DO,\n+        transformBlock(loopNode.getFirstChild()),\n+        transform(loopNode.getFirstChild().getNext()));\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+  private Node processElementGet(Node getNode) {\n+    return newNode(\n+        Token.GETELEM,\n+        transform(getNode.getFirstChild()),\n+        transform(getNode.getLastChild()));\n+  }\n+\n+  private Node processEmptyExpression(Node exprNode) {\n+    return newNode(Token.EMPTY);\n+  }\n+\n+  private Node processExpressionStatement(Node statementNode) {\n+    Node node = newNode(transformTokenType(statementNode.getToken()));\n+    node.addChildToBack(transform(statementNode.getFirstChild()));\n+    return node;\n+  }\n+\n+  private int transformTokenType(int type) {\n+    switch (type) {\n+      case Token.EXPR_RESULT: return Token.EXPR_RESULT;\n+      default: return Token.EXPR_RESULT;\n     }\n+  }\n+\n+  private Node processForInLoop(Node loopNode) {\n+\n+      // Return the bare minimum to put the AST in a valid state.\n+    return newNode(\n+        Token.FOR,\n+        transform(loopNode.getFirstChild()),\n+        transform(loopNode.getFirstChild().getNext()),\n+        transformBlock(loopNode.getLastChild()));\n+  }\n+  \n+  private Node processForLoop(Node loopNode) {\n+    throw new UnsupportedOperationException(\"For loop not currently supported\");\n+  }\n+\n+  private Node processFunction(Node functionNode) {\n+    throw new UnsupportedOperationException(\"Function not currently supported\");\n+  }\n+\n+  private Node processIf(Node ifNode) {\n+    throw new UnsupportedOperationException(\"If statement not currently supported\");\n+  }\n+\n+  private Node processLabel(Node labelNode) {\n+    throw new UnsupportedOperationException(\"Label not currently supported\");\n+  }\n+\n+  private Node processName(Node nameNode) {\n+    throw new UnsupportedOperationException(\"Name not currently supported\");\n+  }\n+\n+  private Node processNew(Node newNode) {\n+    throw new UnsupportedOperationException(\"New not currently supported\");\n+  }\n+\n+  private Node processNumber(Node numberNode) {\n+    throw new UnsupportedOperationException(\"Number not currently supported\");\n+  }\n+\n+  private Node processObject(ObjectNode objectNode) {\n+    throw new UnsupportedOperationException(\"Object not currently supported\");\n+  }\n+\n+  private Node processProperty(Node propertyNode) {\n+    throw new UnsupportedOperationException(\"Property not currently supported\");\n+  }\n+\n+  private Node processRegExp(Node regexpNode) {\n+    throw new UnsupportedOperationException(\"RegExp not currently supported\");\n+  }\n+\n+  private Node processReturn(Node returnNode) {\n+    throw new UnsupportedOperationException(\"Return not currently supported\");\n+  }\n+\n+  private Node processString(Node stringNode) {\n+    throw new UnsupportedOperationException(\"String not currently supported\");\n+  }\n+\n+  private Node processSwitch(Node switchNode) {\n+    throw new UnsupportedOperationException(\"Switch not currently supported\");\n+  }\n+\n+  private Node processThrow(Node throwNode) {\n+    throw new UnsupportedOperationException(\"Throw not currently supported\");\n+  }\n+\n+  private Node processTryCatchFinally(Node tryNode) {\n+    throw new UnsupportedOperationException(\"Try-Catch-Finally not currently supported\");\n+  }\n+\n+  private Node processUnary(Node unaryNode) {\n+    throw new UnsupportedOperationException(\"Unary not currently supported\");\n+  }\n+\n+  private Node processVar(Node varNode) {\n+    throw new UnsupportedOperationException(\"Var not currently supported\");\n+  }\n+\n+  private Node processWhile(Node whileNode) {\n+    throw new UnsupportedOperationException(\"While not currently supported\");\n+  }\n+\n+  private Node processWith(Node withNode) {\n+    throw new UnsupportedOperationException(\"With not currently supported\");\n+  }\n+\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}