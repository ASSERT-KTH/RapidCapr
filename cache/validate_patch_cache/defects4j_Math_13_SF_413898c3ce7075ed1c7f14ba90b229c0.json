{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() * 6.0);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        if (realEigenvalues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        realEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n    }\n    final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n    final RealMatrix eigenvectorMatrix = dec.getV();\n    final RealMatrix eigenvectorMatrixInverse = eigenvectorMatrix.inverse();\n    return eigenvectorMatrix.multiply(eigenvalueMatrix).multiply(eigenvectorMatrixInverse);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..dca30b0d9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() * 6.0);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        if (realEigenvalues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        realEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n     }\n+    final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+    final RealMatrix eigenvectorMatrix = dec.getV();\n+    final RealMatrix eigenvectorMatrixInverse = eigenvectorMatrix.inverse();\n+    return eigenvectorMatrix.multiply(eigenvalueMatrix).multiply(eigenvectorMatrixInverse);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}