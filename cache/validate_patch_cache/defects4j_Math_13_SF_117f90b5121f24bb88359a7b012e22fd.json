{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        RealMatrix sqrt;\n        try {\n            sqrt = dec.getSquareRoot();\n        } catch (OutOfMemoryError ex) {\n            // if out of memory, try iterative algorithm instead\n            sqrt = m.copy();\n            RealMatrix f = m.scalarMultiply(0.25);\n            double normF = f.getNorm();\n            double normT;\n            while (true) {\n                RealMatrix prevSqrt = sqrt;\n                RealMatrix y = sqrt.scalarMultiply(sqrt.getTrace()).subtract(sqrt.multiply(sqrt)).scalarMultiply(0.5);\n                sqrt = sqrt.add(y);\n                normT = sqrt.subtract(prevSqrt).getNorm() / normF;\n                if (normT < 1e-12) {\n                    break;\n                }\n            }\n        }\n        return sqrt;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fdbd6dfd3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        RealMatrix sqrt;\n+        try {\n+            sqrt = dec.getSquareRoot();\n+        } catch (OutOfMemoryError ex) {\n+            // if out of memory, try iterative algorithm instead\n+            sqrt = m.copy();\n+            RealMatrix f = m.scalarMultiply(0.25);\n+            double normF = f.getNorm();\n+            double normT;\n+            while (true) {\n+                RealMatrix prevSqrt = sqrt;\n+                RealMatrix y = sqrt.scalarMultiply(sqrt.getTrace()).subtract(sqrt.multiply(sqrt)).scalarMultiply(0.5);\n+                sqrt = sqrt.add(y);\n+                normT = sqrt.subtract(prevSqrt).getNorm() / normF;\n+                if (normT < 1e-12) {\n+                    break;\n+                }\n+            }\n+        }\n+        return sqrt;\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}