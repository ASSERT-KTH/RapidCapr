{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = NodeUtil.getFunctionBody(fnNode);\n  if (block.getChildCount() == 0) {\n    // The function body is empty; there's nothing to inline\n    return CanInlineResult.NO;\n  }\n\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  Node cArg = callNode.getFirstChild().getNext();\n  List<String> params = new ArrayList<>();\n  while (fnParam != null) {\n    params.add(fnParam.getString());\n    fnParam = fnParam.getNext();\n  }\n\n  int numArgs = 0;\n  while (cArg != null) {\n    if (cArg.isSpread()) {\n      // We don't handle spread arguments yet\n      return CanInlineResult.NO;\n    }\n    numArgs++;\n    cArg = cArg.getNext();\n  }\n\n  if (numArgs < params.size()) {\n    // Too few arguments passed to the function\n    return CanInlineResult.NO;\n  }\n\n  if (numArgs > params.size()) {\n    // Too many arguments passed to the function\n    return CanInlineResult.NO;\n  }\n\n  if (numArgs == params.size()) {\n    // Check argument names and side effects\n    Node blockParent = block.getParent();\n    int index = block.getIndex();\n    boolean hasSideEffects = false;\n    for (int i = 0; i < numArgs; i++) {\n      String argName = params.get(i);\n      Node argNode = callNode.getChildAtIndex(i + 1);\n      if (argNode.isSpread()) {\n        argNode = argNode.getFirstChild();\n      }\n\n      if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.canBeSideEffected(argNode)) {\n        hasSideEffects = true;\n      }\n\n      if (NodeUtil.mayEffectMutableState(argNode, compiler)) {\n        if (NodeUtil.getNameReferenceCountInLocalScope(block, blockParent, argName) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n    }\n\n    if (hasSideEffects && NodeUtil.getFunctionClass(fnNode) == null) {\n      // If the function doesn't have a function class, we don't allow side-effectful inlining\n      return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  // This should never happen\n  return CanInlineResult.NO;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..312814e2 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,84 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = NodeUtil.getFunctionBody(fnNode);\n+  if (block.getChildCount() == 0) {\n+    // The function body is empty; there's nothing to inline\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  Node cArg = callNode.getFirstChild().getNext();\n+  List<String> params = new ArrayList<>();\n+  while (fnParam != null) {\n+    params.add(fnParam.getString());\n+    fnParam = fnParam.getNext();\n+  }\n+\n+  int numArgs = 0;\n+  while (cArg != null) {\n+    if (cArg.isSpread()) {\n+      // We don't handle spread arguments yet\n       return CanInlineResult.NO;\n     }\n+    numArgs++;\n+    cArg = cArg.getNext();\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  if (numArgs < params.size()) {\n+    // Too few arguments passed to the function\n+    return CanInlineResult.NO;\n+  }\n+\n+  if (numArgs > params.size()) {\n+    // Too many arguments passed to the function\n+    return CanInlineResult.NO;\n+  }\n \n+  if (numArgs == params.size()) {\n+    // Check argument names and side effects\n+    Node blockParent = block.getParent();\n+    int index = block.getIndex();\n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+    for (int i = 0; i < numArgs; i++) {\n+      String argName = params.get(i);\n+      Node argNode = callNode.getChildAtIndex(i + 1);\n+      if (argNode.isSpread()) {\n+        argNode = argNode.getFirstChild();\n       }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+        return CanInlineResult.NO;\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      if (NodeUtil.canBeSideEffected(argNode)) {\n+        hasSideEffects = true;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      if (NodeUtil.mayEffectMutableState(argNode, compiler)) {\n+        if (NodeUtil.getNameReferenceCountInLocalScope(block, blockParent, argName) > 1) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       }\n     }\n \n+    if (hasSideEffects && NodeUtil.getFunctionClass(fnNode) == null) {\n+      // If the function doesn't have a function class, we don't allow side-effectful inlining\n+      return CanInlineResult.NO;\n+    }\n+\n     return CanInlineResult.YES;\n   }\n \n+  // This should never happen\n+  return CanInlineResult.NO;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}