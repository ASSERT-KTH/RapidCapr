{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n        int newMonth = iChronology.monthOfYear().add(instant, valueToAdd);\n        int newYear = iChronology.year().get(instant);\n        if (newMonth <= 0) {\n            int yearsToSubtract = (newMonth * -1) / 12 + 1;\n            newYear -= yearsToSubtract;\n            newMonth += (yearsToSubtract * 12);\n        } else if (newMonth > 12) {\n            int yearsToAdd = (newMonth - 1) / 12;\n            newYear += yearsToAdd;\n            newMonth -= (yearsToAdd * 12);\n        }\n        int newDayOfMonth = Math.min(maxDayOfMonth, iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0, newYear).monthOfYear().set(0, newMonth).toInstant()));\n        instant = iChronology.year().set(instant, newYear);\n        instant = iChronology.monthOfYear().set(instant, newMonth);\n        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b3036652 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+        int newMonth = iChronology.monthOfYear().add(instant, valueToAdd);\n+        int newYear = iChronology.year().get(instant);\n+        if (newMonth <= 0) {\n+            int yearsToSubtract = (newMonth * -1) / 12 + 1;\n+            newYear -= yearsToSubtract;\n+            newMonth += (yearsToSubtract * 12);\n+        } else if (newMonth > 12) {\n+            int yearsToAdd = (newMonth - 1) / 12;\n+            newYear += yearsToAdd;\n+            newMonth -= (yearsToAdd * 12);\n         }\n+        int newDayOfMonth = Math.min(maxDayOfMonth, iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0, newYear).monthOfYear().set(0, newMonth).toInstant()));\n+        instant = iChronology.year().set(instant, newYear);\n+        instant = iChronology.monthOfYear().set(instant, newMonth);\n+        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}