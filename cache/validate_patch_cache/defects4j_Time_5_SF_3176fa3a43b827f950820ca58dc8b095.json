{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n\n    DurationField daysField = DateTimeUtils.getDurationField(PeriodType.days(), ISOChronology.getInstanceUTC());\n\n    long weeksAsDays = 0;\n    if (getWeeks() != 0) {\n        weeksAsDays = (long) getWeeks() * DateTimeConstants.DAYS_PER_WEEK;\n        daysField = daysField.add(DurationFieldType.days(), (long) weeksAsDays);\n    }\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)) + (weeksAsDays * ((long) DateTimeConstants.MILLIS_PER_DAY));\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        int years = getYears();\n        int months = getMonths();\n        int totalMonths = (years * 12) + months;\n        if (totalMonths != 0) {\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            result = result.withYears(years);\n            result = result.withMonths(months);\n        }\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        int days = FieldUtils.safeToInt(daysField.getDifferenceAsLong(result.getStart(), result.getEnd()));\n        result = result.withDays(days);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..01569a6a 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,39 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+\n+    DurationField daysField = DateTimeUtils.getDurationField(PeriodType.days(), ISOChronology.getInstanceUTC());\n+\n+    long weeksAsDays = 0;\n+    if (getWeeks() != 0) {\n+        weeksAsDays = (long) getWeeks() * DateTimeConstants.DAYS_PER_WEEK;\n+        daysField = daysField.add(DurationFieldType.days(), (long) weeksAsDays);\n+    }\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)) + (weeksAsDays * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n         int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        int totalMonths = (years * 12) + months;\n+        if (totalMonths != 0) {\n+            years = totalMonths / 12;\n+            months = totalMonths % 12;\n+            result = result.withYears(years);\n+            result = result.withMonths(months);\n         }\n-        return result;\n     }\n+    if (type.isSupported(DurationFieldType.days())) {\n+        int days = FieldUtils.safeToInt(daysField.getDifferenceAsLong(result.getStart(), result.getEnd()));\n+        result = result.withDays(days);\n+    }\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}