{
    "patch": "public static String unescapeUnicode(String unicode) {\n    StringBuffer result = new StringBuffer();\n\n    int i = 0;\n    while (i < unicode.length()) {\n        char ch = unicode.charAt(i);\n        if (ch == '\\\\') {\n            if ((i + 1) < unicode.length() && unicode.charAt(i + 1) == 'u') {\n                String hex = unicode.substring(i + 2, i + 6);\n                try {\n                    result.append((char) Integer.parseInt(hex, 16));\n                } catch (NumberFormatException ex) {\n                    result.append(ch);\n                }\n                i += 6;\n            } else {\n                result.append(ch);\n                i++;\n            }\n        } else {\n            result.append(ch);\n            i++;\n        }\n    }\n\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..f6100a34 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,33 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeUnicode(String unicode) {\n+    StringBuffer result = new StringBuffer();\n+\n+    int i = 0;\n+    while (i < unicode.length()) {\n+        char ch = unicode.charAt(i);\n+        if (ch == '\\\\') {\n+            if ((i + 1) < unicode.length() && unicode.charAt(i + 1) == 'u') {\n+                String hex = unicode.substring(i + 2, i + 6);\n+                try {\n+                    result.append((char) Integer.parseInt(hex, 16));\n+                } catch (NumberFormatException ex) {\n+                    result.append(ch);\n+                }\n+                i += 6;\n+            } else {\n+                result.append(ch);\n+                i++;\n+            }\n+        } else {\n+            result.append(ch);\n+            i++;\n+        }\n+    }\n+\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}