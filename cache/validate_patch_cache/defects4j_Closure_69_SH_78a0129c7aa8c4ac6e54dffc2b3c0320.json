{
    "patch": "       ObjectType thisType = functionType.getTypeOfThis();\n       if (thisType != null) {\n-        Node callerNode = n.getParent();\n-        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n-          ensureTyped(t, callerNode.getFirstChild(), thisType);\n-        } else {\n-          report(t, n, INVALID_THIS_TYPE);\n-        }\n+        Node callerNode = n.getParent(); \n+        if (!(callerNode.isGetProp() || callerNode.isGetElem())) { \n+          report(t, n, INVALID_THIS_TYPE); \n+        } else { \n+          Node propAccess = callerNode.getFirstChild(); \n+          Node receiver = propAccess.getFirstChild(); \n+          if (getJSType(receiver).isSubtypeOf(thisType)) { \n+            ensureTyped(t, receiver, thisType); \n+          } else { \n+            report(t, n, INVALID_THIS_TYPE); \n+          } \n+        } \n       }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..4f2ccdc0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+       ObjectType thisType = functionType.getTypeOfThis();\n+       if (thisType != null) {\n+-        Node callerNode = n.getParent();\n+-        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+-          ensureTyped(t, callerNode.getFirstChild(), thisType);\n+-        } else {\n+-          report(t, n, INVALID_THIS_TYPE);\n+-        }\n++        Node callerNode = n.getParent(); \n++        if (!(callerNode.isGetProp() || callerNode.isGetElem())) { \n++          report(t, n, INVALID_THIS_TYPE); \n++        } else { \n++          Node propAccess = callerNode.getFirstChild(); \n++          Node receiver = propAccess.getFirstChild(); \n++          if (getJSType(receiver).isSubtypeOf(thisType)) { \n++            ensureTyped(t, receiver, thisType); \n++          } else { \n++            report(t, n, INVALID_THIS_TYPE); \n++          } \n++        } \n+       }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}