{
    "patch": "public Dfp multiply(final int x) {\n    if (isNaN() || Double.isNaN(x)) {\n        return newInstance(this);\n    }\n    Dfp result;\n    if (getField().getRadixDigits() == 1 && Math.abs(x) <= 9) {\n        result = newInstance(this);\n        int carry = 0;\n        int y = Math.abs(x);\n        for (int i = result.mant.length - 1; i >= 0; i--) {\n            int product = result.mant[i] * y + carry;\n            result.mant[i] = (short) (product % 10);\n            carry = product / 10;\n        }\n        result.exp += Dfp.RADIX;\n        if (x < 0) {\n            result.negate();\n        }\n    } else {\n        result = multiplyFast(x);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..61f36310b 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,29 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+public Dfp multiply(final int x) {\n+    if (isNaN() || Double.isNaN(x)) {\n+        return newInstance(this);\n+    }\n+    Dfp result;\n+    if (getField().getRadixDigits() == 1 && Math.abs(x) <= 9) {\n+        result = newInstance(this);\n+        int carry = 0;\n+        int y = Math.abs(x);\n+        for (int i = result.mant.length - 1; i >= 0; i--) {\n+            int product = result.mant[i] * y + carry;\n+            result.mant[i] = (short) (product % 10);\n+            carry = product / 10;\n+        }\n+        result.exp += Dfp.RADIX;\n+        if (x < 0) {\n+            result.negate();\n+        }\n+    } else {\n+        result = multiplyFast(x);\n     }\n+    return result;\n+}\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "junit.framework.AssertionFailedError: assersion failed Multiply #37 x = NaN flags = 1",
    "test_result": "FAIL"
}