{
    "patch": "import org.mockito.MockSettings;\nimport org.mockito.Incubating;\nimport org.mockito.session.MockitoSessionBuilder;\nimport org.mockito.Mockito;\n\n@SuppressWarnings(\"unchecked\")\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n\n    MockitoSessionBuilder mockitoSessionBuilder = Mockito.mockitoSession().initMocks(mock);\n\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettings<T>) mockitoSessionBuilder.getMockSettings());\n\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    } else if (mock.getClass().getInterfaces().length > 0) {\n        mock = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n                mock.getClass().getInterfaces(), newFilter);\n        setMockHandler(mock, newMockHandler);\n    } else {\n        throw new IllegalArgumentException(\"Cannot create mock for object of class \" + mock.getClass());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..81bbc1eea 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.MockSettings;\n+import org.mockito.Incubating;\n+import org.mockito.session.MockitoSessionBuilder;\n+import org.mockito.Mockito;\n+\n+@SuppressWarnings(\"unchecked\")\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+\n+    MockitoSessionBuilder mockitoSessionBuilder = Mockito.mockitoSession().initMocks(mock);\n+\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettings<T>) mockitoSessionBuilder.getMockSettings());\n+\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else if (mock.getClass().getInterfaces().length > 0) {\n+        mock = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n+                mock.getClass().getInterfaces(), newFilter);\n+        setMockHandler(mock, newMockHandler);\n+    } else {\n+        throw new IllegalArgumentException(\"Cannot create mock for object of class \" + mock.getClass());\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}