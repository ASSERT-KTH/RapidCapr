{
    "patch": "            if (e.getDateTimeFieldType() == DateTimeFieldType.year() || e.getDateTimeFieldType() == DateTimeFieldType.yearOfEra()) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": Invalid Year of Era\");\n            } else {\n                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\":\");\n            }            ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c411bb69 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,11 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (e.getDateTimeFieldType() == DateTimeFieldType.year() || e.getDateTimeFieldType() == DateTimeFieldType.yearOfEra()) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": Invalid Year of Era\");\n+            } else {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\":\");\n+            }            \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}