{
    "patch": "      if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.isInterface() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n          return false;\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        if (parent.getType() == Token.ASSIGN &&\n            parent.getFirstChild().getType() == Token.GETPROP &&\n            parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {}; // or\n        // var a = {x: function() {}};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n\n              // object literal keys\n              pType == Token.STRING ||\n              pType == Token.NUMBER)) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..dc94f015 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,41 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+             jsDoc.isInterface() ||\n+             jsDoc.hasThisType() ||\n+             jsDoc.isOverride())) {\n+          return false;\n+        }\n+\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (parent.getType() == Token.ASSIGN &&\n+            parent.getFirstChild().getType() == Token.GETPROP &&\n+            parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {}; // or\n+        // var a = {x: function() {}};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME ||\n+              pType == Token.ASSIGN ||\n+\n+              // object literal keys\n+              pType == Token.STRING ||\n+              pType == Token.NUMBER)) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}