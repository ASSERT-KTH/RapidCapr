{
    "patch": "        // Return undefined when one of the types is NoneType\n        if (this instanceof NoneType || that instanceof NoneType) {\n            return new TypePair(NoneType.make(), NoneType.make());\n        }\n        \n        // Return null when one of the types is Null or UndefinedType\n        if (this.isNullOrUndef() || that.isNullOrUndef()) {\n            return new TypePair(NullType.make(), UndefinedType.make());\n        }\n        \n        // unions types\n        if (that instanceof UnionType) {\n            TypePair p = that.getTypesUnderInequality(this);\n            return new TypePair(p.typeB, p.typeA);\n        }\n        // other types\n        switch (this.testForEquality(that)) {\n            case TRUE:\n                return new TypePair(this.specialize(that), this.specialize(that));\n            case FALSE:\n                return new TypePair(this, that);\n            case UNKNOWN:\n                return new TypePair(UnknownType.make(), UnknownType.make());\n        }\n        \n        // switch case is exhaustive\n        throw new IllegalStateException();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..16492a5c 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,33 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        // Return undefined when one of the types is NoneType\n+        if (this instanceof NoneType || that instanceof NoneType) {\n+            return new TypePair(NoneType.make(), NoneType.make());\n+        }\n+        \n+        // Return null when one of the types is Null or UndefinedType\n+        if (this.isNullOrUndef() || that.isNullOrUndef()) {\n+            return new TypePair(NullType.make(), UndefinedType.make());\n+        }\n+        \n+        // unions types\n+        if (that instanceof UnionType) {\n+            TypePair p = that.getTypesUnderInequality(this);\n+            return new TypePair(p.typeB, p.typeA);\n+        }\n+        // other types\n+        switch (this.testForEquality(that)) {\n+            case TRUE:\n+                return new TypePair(this.specialize(that), this.specialize(that));\n+            case FALSE:\n+                return new TypePair(this, that);\n+            case UNKNOWN:\n+                return new TypePair(UnknownType.make(), UnknownType.make());\n+        }\n+        \n+        // switch case is exhaustive\n+        throw new IllegalStateException();\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}