{
    "patch": "      lastArg = argList.getLastChild();\n      if (lastArg != null) {\n        int lastArgIndex = argList.getIndexOfChild(lastArg);\n        int idx = 0;\n        int count = 0;\n        for (Node arg : argList.children()) {\n          if (++idx > lastArgIndex) {\n            break;\n          }\n          Var var = fnScope.getVar(arg.getString());\n          if (!referenced.contains(var)) {\n            count++;\n          }\n        }\n        for (int i = 0; i < count; i++) {\n          argList.removeChild(lastArg);\n          lastArg = argList.getLastChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2088a8ec 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      lastArg = argList.getLastChild();\n+      if (lastArg != null) {\n+        int lastArgIndex = argList.getIndexOfChild(lastArg);\n+        int idx = 0;\n+        int count = 0;\n+        for (Node arg : argList.children()) {\n+          if (++idx > lastArgIndex) {\n+            break;\n+          }\n+          Var var = fnScope.getVar(arg.getString());\n+          if (!referenced.contains(var)) {\n+            count++;\n+          }\n+        }\n+        for (int i = 0; i < count; i++) {\n+          argList.removeChild(lastArg);\n+          lastArg = argList.getLastChild();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}