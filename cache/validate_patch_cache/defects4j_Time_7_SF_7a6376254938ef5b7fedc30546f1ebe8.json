{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    long offsetMillis = chrono.getZone().getOffset(instantMillis);\n    Chronology selectedChrono = selectChronology(chrono);\n    long instantLocal = instantMillis + offsetMillis;\n    int defaultYear = selectedChrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n    bucket.setZone(chrono.getZone());\n    int newPos = parser.parseInto(bucket, text, position);\n    long computedMillis = bucket.computeMillis(true, text);\n\n    // In case the default year is 0 and the computed millis is before 0.\n    if (defaultYear == 0 && computedMillis < 0) {\n        computedMillis = selectedChrono.year().set(0, 1).set(0, 1).set(0, 1).getMillis() + offsetMillis;\n        selectedChrono = selectedChrono.withYear(1);\n    }\n\n    instant.setMillis(computedMillis);\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        selectedChrono = selectedChrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        selectedChrono = selectedChrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(selectedChrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..fbb0b1d8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,47 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n     }\n \n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    long offsetMillis = chrono.getZone().getOffset(instantMillis);\n+    Chronology selectedChrono = selectChronology(chrono);\n+    long instantLocal = instantMillis + offsetMillis;\n+    int defaultYear = selectedChrono.year().get(instantLocal);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n+    bucket.setZone(chrono.getZone());\n+    int newPos = parser.parseInto(bucket, text, position);\n+    long computedMillis = bucket.computeMillis(true, text);\n+\n+    // In case the default year is 0 and the computed millis is before 0.\n+    if (defaultYear == 0 && computedMillis < 0) {\n+        computedMillis = selectedChrono.year().set(0, 1).set(0, 1).set(0, 1).getMillis() + offsetMillis;\n+        selectedChrono = selectedChrono.withYear(1);\n+    }\n+\n+    instant.setMillis(computedMillis);\n+\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        selectedChrono = selectedChrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        selectedChrono = selectedChrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(selectedChrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: long cannot be dereferenced",
    "test_result": "ERROR"
}