{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType previousType =\n                objType.getPropertyType(prop).restrictByNotNullOrUndefined();\n            objType.setPropertyType(prop, previousType.getLeastSupertype(propType));\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n).restrictByNotNullOrUndefined();\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..d74888c9 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,13 +1111,6 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n@@ -1130,19 +1123,23 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType previousType =\n+                objType.getPropertyType(prop).restrictByNotNullOrUndefined();\n+            objType.setPropertyType(prop, previousType.getLeastSupertype(propType));\n           }\n         }\n       }\n     }\n   }\n-\n+  \n   /**\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n    */\n   private FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n+      JSType type = getJSType(n).restrictByNotNullOrUndefined();\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}