{
    "patch": "      if (value != null && NodeUtil.isImmutableValue(value)) {\n        // Fold String(a) to '' + (a) on immutable literals,\n        // which allows further optimizations\n        //\n        // We can't do this in the general case, because String(a) has\n        // slightly different semantics than '' + (a). See\n        // http://code.google.com/p/closure-compiler/issues/detail?id=759",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..14c7893d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,13 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      if (value != null && NodeUtil.isImmutableValue(value)) {\n+        // Fold String(a) to '' + (a) on immutable literals,\n+        // which allows further optimizations\n+        //\n+        // We can't do this in the general case, because String(a) has\n+        // slightly different semantics than '' + (a). See\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=759\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}