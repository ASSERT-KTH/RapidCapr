{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Get the parameter list of the function being called.\n  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n\n  // Get the number of parameters and arguments.\n  int numParams = paramList.getChildCount();\n  int numArgs = callNode.getChildCount() - 1;\n\n  // Ensure that the number of arguments is no greater than the number of parameters.\n  if (numArgs > numParams) {\n    return CanInlineResult.NO;\n  }\n\n  // Get the first parameter and argument.\n  Node paramNode = paramList.getFirstChild();\n  Node argNode = callNode.getFirstChild().getNext();\n\n  // Check each parameter and argument in turn.\n  while (paramNode != null && argNode != null) {\n\n    // Check if the parameter is a rest parameter.\n    boolean isRestParam = paramNode.isRest();\n\n    // If the parameter is not a rest parameter, check if the argument has side effects.\n    if (!isRestParam && NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    // If the parameter is a rest parameter, check that all remaining arguments have no side effects.\n    if (isRestParam) {\n      while (argNode != null) {\n        if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n          return CanInlineResult.NO;\n        }\n        argNode = argNode.getNext();\n      }\n    }\n\n    // Get the next parameter and argument.\n    paramNode = paramNode.getNext();\n    argNode = argNode.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..88db8a04 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,56 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // Get the parameter list of the function being called.\n+  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n \n+  // Get the number of parameters and arguments.\n+  int numParams = paramList.getChildCount();\n+  int numArgs = callNode.getChildCount() - 1;\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // Ensure that the number of arguments is no greater than the number of parameters.\n+  if (numArgs > numParams) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  // Get the first parameter and argument.\n+  Node paramNode = paramList.getFirstChild();\n+  Node argNode = callNode.getFirstChild().getNext();\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  // Check each parameter and argument in turn.\n+  while (paramNode != null && argNode != null) {\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // Check if the parameter is a rest parameter.\n+    boolean isRestParam = paramNode.isRest();\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+    // If the parameter is not a rest parameter, check if the argument has side effects.\n+    if (!isRestParam && NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // If the parameter is a rest parameter, check that all remaining arguments have no side effects.\n+    if (isRestParam) {\n+      while (argNode != null) {\n+        if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        argNode = argNode.getNext();\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    // Get the next parameter and argument.\n+    paramNode = paramNode.getNext();\n+    argNode = argNode.getNext();\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}