{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    regex.append('^'); // add start of line anchor\n    for(int i= 0; i < value.length(); ++i) {\n        char c= value.charAt(i);\n        if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                wasWhite= true;\n                regex.append(\"\\\\s*+\"); // add optional whitespace\n            }\n            continue;\n        }\n        wasWhite= false;\n        switch(c) {\n        case '\\'':\n            if(unquote) {\n                if(++i == value.length()) {\n                    return regex;\n                }\n                c= value.charAt(i);\n            }\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '.':\n            regex.append('\\\\'); // add escape character\n            break;\n        case '^':\n        case '$':\n            if(i == 0 || i == value.length()-1) {\n                regex.append('\\\\'); // add escape character\n            }\n            break;\n        }\n        regex.append(c);\n    }\n    regex.append('$'); // add end of line anchor\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..86f67ff7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,54 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite= false;\n+    regex.append('^'); // add start of line anchor\n+    for(int i= 0; i < value.length(); ++i) {\n+        char c= value.charAt(i);\n+        if(Character.isWhitespace(c)) {\n+            if(!wasWhite) {\n+                wasWhite= true;\n+                regex.append(\"\\\\s*+\"); // add optional whitespace\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+            continue;\n+        }\n+        wasWhite= false;\n+        switch(c) {\n+        case '\\'':\n+            if(unquote) {\n+                if(++i == value.length()) {\n+                    return regex;\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                c= value.charAt(i);\n             }\n-            regex.append(c);\n+            break;\n+        case '?':\n+        case '[':\n+        case ']':\n+        case '(':\n+        case ')':\n+        case '{':\n+        case '}':\n+        case '\\\\':\n+        case '|':\n+        case '*':\n+        case '+':\n+        case '.':\n+            regex.append('\\\\'); // add escape character\n+            break;\n+        case '^':\n+        case '$':\n+            if(i == 0 || i == value.length()-1) {\n+                regex.append('\\\\'); // add escape character\n+            }\n+            break;\n         }\n-        return regex;\n+        regex.append(c);\n     }\n+    regex.append('$'); // add end of line anchor\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}