{
    "patch": "  private void traverse(Node node) {\n    int originalChangeCount = changeCount;\n    boolean hasChanged = false;\n\n    do {\n      changeCount = originalChangeCount;\n      if (!shouldVisit(node)) {\n        return;\n      }\n\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      if (changeCount > originalChangeCount) {\n        hasChanged = true;\n      }\n      Preconditions.checkState(++visits < 10000, \"too many iterations\");\n    } while (shouldRetraverse(node) || hasChanged);\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..89a8ef10 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -111,16 +111,15 @@ class PeepholeOptimizationsPass\n   }\n \n   private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n-    if (!shouldVisit(node)) {\n-      return;\n-    }\n+    int originalChangeCount = changeCount;\n+    boolean hasChanged = false;\n \n-    int visits = 0;\n     do {\n+      changeCount = originalChangeCount;\n+      if (!shouldVisit(node)) {\n+        return;\n+      }\n+\n       Node c = node.getFirstChild();\n       while(c != null) {\n         traverse(c);\n@@ -129,10 +128,11 @@ class PeepholeOptimizationsPass\n       }\n \n       visit(node);\n-      visits++;\n-\n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+      if (changeCount > originalChangeCount) {\n+        hasChanged = true;\n+      }\n+      Preconditions.checkState(++visits < 10000, \"too many iterations\");\n+    } while (shouldRetraverse(node) || hasChanged);\n \n     exitNode(node);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}