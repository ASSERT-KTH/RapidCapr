{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    Node grandparent = parent != null ? parent.getParent() : null;\n\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    if (parent != null && grandparent != null &&\n            parent.getType() == Token.FUNCTION &&\n            TokenStream.isFunctionExpression(parent) &&\n            grandparent.getType() == Token.EXPR_RESULT) {\n        // This is an anonymous function being called immediately,\n        // like `(function(){})()`. Consider its args like those passed to\n        // a function call.\n        handleFunctionInputs(grandparent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() == Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        default:\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..0cf8331f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,43 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    Node grandparent = parent != null ? parent.getParent() : null;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    if (parent != null && grandparent != null &&\n+            parent.getType() == Token.FUNCTION &&\n+            TokenStream.isFunctionExpression(parent) &&\n+            grandparent.getType() == Token.EXPR_RESULT) {\n+        // This is an anonymous function being called immediately,\n+        // like `(function(){})()`. Consider its args like those passed to\n+        // a function call.\n+        handleFunctionInputs(grandparent);\n+        return;\n+    }\n+\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (parent.getType() == Token.NAME) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        default:\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}