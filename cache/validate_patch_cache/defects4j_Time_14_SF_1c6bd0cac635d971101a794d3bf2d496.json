{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    int[] newValues = Arrays.copyOf(values, values.length);\n\n    // regular add case\n    if (fieldIndex >= 0 && fieldIndex < partial.size()) {\n        newValues[fieldIndex] += valueToAdd;\n\n        // handle carry over\n        for (int i = fieldIndex; i < partial.size(); i++) {\n            int max = partial.getFieldType(i).getField(iChronology).getMaximumValue(iChronology.getReadablePartial(values), values[i]);\n            int min = partial.getFieldType(i).getField(iChronology).getMinimumValue(iChronology.getReadablePartial(values), values[i]);\n            if (newValues[i] > max) {\n                int carryOver = (newValues[i] - max);\n                // handle special case for leap year feb 29\n                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear()) && iChronology.isLeapYear(newValues[0]) && newValues[1] == 2 && newValues[2] == 29) {\n                    newValues[1] = 3;\n                    newValues[2] = 1;\n                } else {\n                    newValues[i] = min + (carryOver - 1);\n                    newValues = add(partial, i + 1, newValues, (carryOver - 1) / (max - min + 1));\n                }\n            } else if (newValues[i] < min) {\n                int carryOver = (min - newValues[i]);\n                // handle special case for feb 29\n                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear()) && newValues[1] == 3 && newValues[2] == 1) {\n                    newValues[1] = 2;\n                    newValues[2] = 29;\n                } else {\n                    newValues[i] = max - (carryOver - 1);\n                    newValues = add(partial, i + 1, newValues, -((carryOver - 1) / (max - min + 1)));\n                }\n            }\n        }\n    }\n\n    // contiguous case\n    else if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        Instant i = new Instant(instant);\n        newValues[0] = iChronology.getYear().get(i);\n        newValues[1] = iChronology.getMonthOfYear().get(i);\n        newValues[2] = iChronology.getDayOfMonth().get(i);\n        newValues[3] = iChronology.getHourOfDay().get(i);\n        newValues[4] = iChronology.getMinuteOfHour().get(i);\n        newValues[5] = iChronology.getSecondOfMinute().get(i);\n        newValues[6] = iChronology.getMillisOfSecond().get(i);\n    }\n\n    // fallback to super implementation\n    else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..83358f46 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,69 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+\n+    // regular add case\n+    if (fieldIndex >= 0 && fieldIndex < partial.size()) {\n+        newValues[fieldIndex] += valueToAdd;\n+\n+        // handle carry over\n+        for (int i = fieldIndex; i < partial.size(); i++) {\n+            int max = partial.getFieldType(i).getField(iChronology).getMaximumValue(iChronology.getReadablePartial(values), values[i]);\n+            int min = partial.getFieldType(i).getField(iChronology).getMinimumValue(iChronology.getReadablePartial(values), values[i]);\n+            if (newValues[i] > max) {\n+                int carryOver = (newValues[i] - max);\n+                // handle special case for leap year feb 29\n+                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear()) && iChronology.isLeapYear(newValues[0]) && newValues[1] == 2 && newValues[2] == 29) {\n+                    newValues[1] = 3;\n+                    newValues[2] = 1;\n+                } else {\n+                    newValues[i] = min + (carryOver - 1);\n+                    newValues = add(partial, i + 1, newValues, (carryOver - 1) / (max - min + 1));\n+                }\n+            } else if (newValues[i] < min) {\n+                int carryOver = (min - newValues[i]);\n+                // handle special case for feb 29\n+                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear()) && newValues[1] == 3 && newValues[2] == 1) {\n+                    newValues[1] = 2;\n+                    newValues[2] = 29;\n+                } else {\n+                    newValues[i] = max - (carryOver - 1);\n+                    newValues = add(partial, i + 1, newValues, -((carryOver - 1) / (max - min + 1)));\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n \n+    // contiguous case\n+    else if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        instant = add(instant, valueToAdd);\n+        Instant i = new Instant(instant);\n+        newValues[0] = iChronology.getYear().get(i);\n+        newValues[1] = iChronology.getMonthOfYear().get(i);\n+        newValues[2] = iChronology.getDayOfMonth().get(i);\n+        newValues[3] = iChronology.getHourOfDay().get(i);\n+        newValues[4] = iChronology.getMinuteOfHour().get(i);\n+        newValues[5] = iChronology.getSecondOfMinute().get(i);\n+        newValues[6] = iChronology.getMillisOfSecond().get(i);\n+    }\n+\n+    // fallback to super implementation\n+    else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+\n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}