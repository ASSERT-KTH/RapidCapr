{
    "patch": "for (int position = 0; position < matchers.size(); position++) {\n    Matcher matcher = matchers.get(position);\n    if (matcher instanceof CapturesArguments) {\n        if (matcher instanceof VarargMatcher) {\n            Object[] varArg = invocation.getArgumentAt(position, Object[].class);\n            if (varArg != null && varArg.length > 0) { // added null check and length check\n                for(Object arg : varArg) {\n                    ((CapturesArguments)matcher).captureFrom(arg);\n                }\n            }\n        } else {\n            Object arg = invocation.getArgumentAt(position, Object.class); // replaced getRawArguments() with getArgumentAt()\n            ((CapturesArguments)matcher).captureFrom(arg);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..1757ae839 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,22 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+for (int position = 0; position < matchers.size(); position++) {\n+    Matcher matcher = matchers.get(position);\n+    if (matcher instanceof CapturesArguments) {\n+        if (matcher instanceof VarargMatcher) {\n+            Object[] varArg = invocation.getArgumentAt(position, Object[].class);\n+            if (varArg != null && varArg.length > 0) { // added null check and length check\n+                for(Object arg : varArg) {\n+                    ((CapturesArguments)matcher).captureFrom(arg);\n+                }\n+            }\n+        } else {\n+            Object arg = invocation.getArgumentAt(position, Object.class); // replaced getRawArguments() with getArgumentAt()\n+            ((CapturesArguments)matcher).captureFrom(arg);\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 0",
    "test_result": "FAIL"
}