{
    "patch": "\nif (Double.isNaN(a) || Double.isNaN(h)) {\n    throw new IllegalArgumentException(\"Both parameters must not be NaN.\");\n}\n\nif (a <= 0 || h <= 0) {\n    throw new IllegalArgumentException(\"Both parameters must be positive.\");\n}\n\ndouble area = a * h / 2.0;\n\nif (Double.isInfinite(area)) {\n    throw new Exception(\"Area is infinite.\");\n} else if (Double.isNaN(area)) {\n    throw new Exception(\"Area is NaN.\");\n} else {\n    return area;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/TRIANGLE_AREA.java b/src/main/java/humaneval/buggy/TRIANGLE_AREA.java\nindex a34dabc..56f7cf4 100644\n--- a/src/main/java/humaneval/buggy/TRIANGLE_AREA.java\n+++ b/src/main/java/humaneval/buggy/TRIANGLE_AREA.java\n@@ -6,6 +6,23 @@ package humaneval.buggy;\n \n public class TRIANGLE_AREA {\n     public static double triangle_area(double a, double h) {\n-        return a * h;\n+\n+if (Double.isNaN(a) || Double.isNaN(h)) {\n+    throw new IllegalArgumentException(\"Both parameters must not be NaN.\");\n+}\n+\n+if (a <= 0 || h <= 0) {\n+    throw new IllegalArgumentException(\"Both parameters must be positive.\");\n+}\n+\n+double area = a * h / 2.0;\n+\n+if (Double.isInfinite(area)) {\n+    throw new Exception(\"Area is infinite.\");\n+} else if (Double.isNaN(area)) {\n+    throw new Exception(\"Area is NaN.\");\n+} else {\n+    return area;\n+}\n     }\n }",
    "result_reason": " /tmp/humaneval-TRIANGLE_AREA/src/main/java/humaneval/buggy/TRIANGLE_AREA.java:[21,5] unreported exception java.lang.Exception; must be caught or declared to be thrown",
    "test_result": "ERROR"
}