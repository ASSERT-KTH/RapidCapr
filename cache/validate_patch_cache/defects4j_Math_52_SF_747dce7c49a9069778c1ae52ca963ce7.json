{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta = 0;\n  double alpha = coeffU;\n  double temp1 = u2u2 - u1u2 * coeffU;\n  double temp2 = v2v2 - v1v2 * coeffV;\n  if (temp1 >= 0 && temp2 >= 0) {\n    beta   = FastMath.sqrt(temp1 / temp2);\n    alpha  = coeffU - beta * coeffV;\n  } else if (temp1 < 0 && temp2 < 0) {\n    beta = FastMath.sqrt(FastMath.abs(temp1) / FastMath.abs(temp2));\n    alpha = FastMath.copySign(FastMath.sqrt(FastMath.abs(temp1) * u1u1 * v1v1), temp2 * u1u1 - temp1 * v1v1) / (v1v2 * u1u1 - u1u2 * v1v1);\n  } else if (temp1 < 0) {\n    beta = (u1u2 - alpha * v1v2) / u2u2;\n  } else { // temp2 < 0\n    alpha = (v1v2 - beta * u1u2) / v1v1;\n  }\n\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);;\n      c = k.dotProduct(u2.crossProduct(u3));;\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  // computation of the scalar part\n  double coef1 = uRef.dotProduct(vRef);\n  double coef2 = v2Su2.getNorm() * u1.getNorm();\n  double q0Denom = coef1 < 0 ? -coef1 + coef2 : -coef1 - coef2;\n  // protect against round-off errors that makes q0Denom too small\n  // even though it should be (near-)zero\n  if (q0Denom < MINIMUM_ANGLE) {\n      // extremely rare case: uRef is nearly opposite to vRef\n      final Vector3D w = uRef.orthogonal(); // uRef and w are orthogonal on both sides of (uRef, vRef)\n      final Vector3D uB = w.crossProduct(uRef); // uB is orthogonal to uRef (and therefore parallel to vRef)\n      final Vector3D vC = w.crossProduct(vRef); // vC is orthogonal to vRef (and therefore parallel to uRef)\n      final double sinUa = uB.normalize().dotProduct(v2Su2.normalize()); // sin(a), a is the angle (uRef, v2Su2), a \u03b5 [0, \u03c0/2]\n      final double sinVa = vC.normalize().dotProduct(u1.normalize()); // sin(b), b is the angle (vRef, u1), b \u03b5 [0, \u03c0/2]\n      // we need to make sure both angles are non-zero (which might not be the case with tests close to machine precision)\n      final double ea = sinUa > MINIMUM_ANGLE ? FastMath.asin(sinUa) : MINIMUM_ANGLE;\n      final double eb = sinVa > MINIMUM_ANGLE ? FastMath.asin(sinVa) : MINIMUM_ANGLE;\n      final double q = ea <= eb ? 0.5 * ea : 0.5 * (FastMath.PI - ea); // with ea or eb too small sometimes q>\u03c0/2\n      final double q0Num = FastMath.cos(q);\n      final Vector3D mid = new Vector3D(0.5, uRef.normalize(), 0.5, vRef.normalize());\n      final Vector3D bisector = mid.crossProduct(Vector3D.PLUS_K); // bisector is orthogonal to mid (and therefore to the plane (uRef, vRef))\n      q1 = bisector.getX() * FastMath.sin(q);\n      q2 = bisector.getY() * FastMath.sin(q);\n      q3 = bisector.getZ() * FastMath.sin(q);\n      q0 = q0Num;\n  } else {\n      q0 = (v2Su2.dotProduct(u1)) / q0Denom;\n      q1 = k.getX() / q0Denom;\n      q2 = k.getY() / q0Denom;\n      q3 = k.getZ() / q0Denom;\n  }\n\n  // normalize the quaternion\n  double s = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);\n  q0 *= s;\n  q1 *= s;\n  q2 *= s;\n  q3 *= s;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..6ce1d6d81 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,7 +310,7 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   // norms computation\n   double u1u1 = u1.getNormSq();\n@@ -329,8 +329,22 @@ public class Rotation implements Serializable {\n   double v1v2   = v1.dotProduct(v2);\n   double coeffU = u1u2 / u1u1;\n   double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n+  double beta = 0;\n+  double alpha = coeffU;\n+  double temp1 = u2u2 - u1u2 * coeffU;\n+  double temp2 = v2v2 - v1v2 * coeffV;\n+  if (temp1 >= 0 && temp2 >= 0) {\n+    beta   = FastMath.sqrt(temp1 / temp2);\n+    alpha  = coeffU - beta * coeffV;\n+  } else if (temp1 < 0 && temp2 < 0) {\n+    beta = FastMath.sqrt(FastMath.abs(temp1) / FastMath.abs(temp2));\n+    alpha = FastMath.copySign(FastMath.sqrt(FastMath.abs(temp1) * u1u1 * v1v1), temp2 * u1u1 - temp1 * v1v1) / (v1v2 * u1u1 - u1u2 * v1v1);\n+  } else if (temp1 < 0) {\n+    beta = (u1u2 - alpha * v1v2) / u2u2;\n+  } else { // temp2 < 0\n+    alpha = (v1v2 - beta * u1u2) / v1v1;\n+  }\n+\n   v2 = new Vector3D(alpha, v1, beta, v2);\n \n   // preliminary computation\n@@ -374,6 +388,45 @@ public class Rotation implements Serializable {\n \n   }\n \n+  // computation of the scalar part\n+  double coef1 = uRef.dotProduct(vRef);\n+  double coef2 = v2Su2.getNorm() * u1.getNorm();\n+  double q0Denom = coef1 < 0 ? -coef1 + coef2 : -coef1 - coef2;\n+  // protect against round-off errors that makes q0Denom too small\n+  // even though it should be (near-)zero\n+  if (q0Denom < MINIMUM_ANGLE) {\n+      // extremely rare case: uRef is nearly opposite to vRef\n+      final Vector3D w = uRef.orthogonal(); // uRef and w are orthogonal on both sides of (uRef, vRef)\n+      final Vector3D uB = w.crossProduct(uRef); // uB is orthogonal to uRef (and therefore parallel to vRef)\n+      final Vector3D vC = w.crossProduct(vRef); // vC is orthogonal to vRef (and therefore parallel to uRef)\n+      final double sinUa = uB.normalize().dotProduct(v2Su2.normalize()); // sin(a), a is the angle (uRef, v2Su2), a \u03b5 [0, \u03c0/2]\n+      final double sinVa = vC.normalize().dotProduct(u1.normalize()); // sin(b), b is the angle (vRef, u1), b \u03b5 [0, \u03c0/2]\n+      // we need to make sure both angles are non-zero (which might not be the case with tests close to machine precision)\n+      final double ea = sinUa > MINIMUM_ANGLE ? FastMath.asin(sinUa) : MINIMUM_ANGLE;\n+      final double eb = sinVa > MINIMUM_ANGLE ? FastMath.asin(sinVa) : MINIMUM_ANGLE;\n+      final double q = ea <= eb ? 0.5 * ea : 0.5 * (FastMath.PI - ea); // with ea or eb too small sometimes q>\u03c0/2\n+      final double q0Num = FastMath.cos(q);\n+      final Vector3D mid = new Vector3D(0.5, uRef.normalize(), 0.5, vRef.normalize());\n+      final Vector3D bisector = mid.crossProduct(Vector3D.PLUS_K); // bisector is orthogonal to mid (and therefore to the plane (uRef, vRef))\n+      q1 = bisector.getX() * FastMath.sin(q);\n+      q2 = bisector.getY() * FastMath.sin(q);\n+      q3 = bisector.getZ() * FastMath.sin(q);\n+      q0 = q0Num;\n+  } else {\n+      q0 = (v2Su2.dotProduct(u1)) / q0Denom;\n+      q1 = k.getX() / q0Denom;\n+      q2 = k.getY() / q0Denom;\n+      q3 = k.getZ() / q0Denom;\n+  }\n+\n+  // normalize the quaternion\n+  double s = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);\n+  q0 *= s;\n+  q1 *= s;\n+  q2 *= s;\n+  q3 *= s;\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}