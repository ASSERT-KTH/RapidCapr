{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        registerTypeVariablesOn(Object.class);\n    } else {\n        for (Type type : bounds) {\n            if (type instanceof TypeVariable) {\n                registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) type));\n                readTypeVariables((TypeVariable<?>) type);\n            } else {\n                registerTypeVariablesOn(type);\n            }\n        }\n        Type actualTypeArgumentFor = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgumentFor != null) {\n            registerTypeVariablesOn(actualTypeArgumentFor);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..aa9f55d0f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,30 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+    } else {\n+        for (Type type : bounds) {\n+            if (type instanceof TypeVariable) {\n+                registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) type));\n+                readTypeVariables((TypeVariable<?>) type);\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+        Type actualTypeArgumentFor = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgumentFor != null) {\n+            registerTypeVariablesOn(actualTypeArgumentFor);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}