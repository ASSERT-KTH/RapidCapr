{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden,\n    // we need to use the original evaluator class to handle null and NaN values\n    if (meanImpl != null) {\n        meanImpl.increment(value);\n        if (meanImpl.getClass() != Mean.class) {\n            double meanValue = new Mean().evaluate(meanImpl.getValues(), 0, meanImpl.getN());\n            if (!Double.isNaN(meanValue)) {\n                ((Mean) meanImpl).increment(meanValue);\n            }\n        }\n    }\n    if (varianceImpl != null) {\n        varianceImpl.increment(value);\n        if (varianceImpl.getClass() != Variance.class) {\n            double varianceValue = new Variance().evaluate(varianceImpl.getValues(), 0, varianceImpl.getN(), varianceImpl.getMean());\n            if (!Double.isNaN(varianceValue)) {\n                ((Variance) varianceImpl).increment(varianceValue);\n            }\n        }\n    }\n    if (geoMeanImpl != null) {\n        geoMeanImpl.increment(value);\n        if (geoMeanImpl.getClass() != GeometricMean.class) {\n            double geoMeanValue = new GeometricMean().evaluate(geoMeanImpl.getValues(), 0, geoMeanImpl.getN());\n            if (!Double.isNaN(geoMeanValue)) {\n                ((GeometricMean) geoMeanImpl).increment(geoMeanValue);\n            }\n        }\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..0eaa5c7fd 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,45 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden,\n+    // we need to use the original evaluator class to handle null and NaN values\n+    if (meanImpl != null) {\n+        meanImpl.increment(value);\n+        if (meanImpl.getClass() != Mean.class) {\n+            double meanValue = new Mean().evaluate(meanImpl.getValues(), 0, meanImpl.getN());\n+            if (!Double.isNaN(meanValue)) {\n+                ((Mean) meanImpl).increment(meanValue);\n+            }\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    }\n+    if (varianceImpl != null) {\n+        varianceImpl.increment(value);\n+        if (varianceImpl.getClass() != Variance.class) {\n+            double varianceValue = new Variance().evaluate(varianceImpl.getValues(), 0, varianceImpl.getN(), varianceImpl.getMean());\n+            if (!Double.isNaN(varianceValue)) {\n+                ((Variance) varianceImpl).increment(varianceValue);\n+            }\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+    }\n+    if (geoMeanImpl != null) {\n+        geoMeanImpl.increment(value);\n+        if (geoMeanImpl.getClass() != GeometricMean.class) {\n+            double geoMeanValue = new GeometricMean().evaluate(geoMeanImpl.getValues(), 0, geoMeanImpl.getN());\n+            if (!Double.isNaN(geoMeanValue)) {\n+                ((GeometricMean) geoMeanImpl).increment(geoMeanValue);\n+            }\n         }\n-        n++;\n     }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}