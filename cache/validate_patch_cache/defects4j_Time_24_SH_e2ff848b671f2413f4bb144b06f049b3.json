{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields) {\n                throw e;\n            }\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].isSaved()) {\n                    try {\n                        millis = savedFields[i].set(millis, true);\n                    } catch (IllegalFieldValueException ex) {\n                        // ignore exception\n                    }\n                }\n            }\n            return computeMillis(true, text); // retry with cleared fields\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e9bd8576 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields) {\n+                throw e;\n+            }\n+            for (int i = 0; i < count; i++) {\n+                if (savedFields[i].isSaved()) {\n+                    try {\n+                        millis = savedFields[i].set(millis, true);\n+                    } catch (IllegalFieldValueException ex) {\n+                        // ignore exception\n+                    }\n+                }\n+            }\n+            return computeMillis(true, text); // retry with cleared fields\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}