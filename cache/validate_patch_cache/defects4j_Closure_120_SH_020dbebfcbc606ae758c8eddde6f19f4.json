{
    "patch": "      Reference ref = getInitializingReferenceForConstants();\n      if (ref == null) {\n        return false;\n      }\n      \n      // Make sure the initialization is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      // Make sure the variable is not assigned again.\n      for (int i = 0; i < references.size(); i++) {\n        Reference r = references.get(i);\n        if (r.isAssignmentToName() && r.getNode().getSourceLocation().getEndLine() >\n            ref.getNode().getSourceLocation().getEndLine()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..54d7757e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Reference ref = getInitializingReferenceForConstants();\n+      if (ref == null) {\n+        return false;\n+      }\n+      \n+      // Make sure the initialization is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      // Make sure the variable is not assigned again.\n+      for (int i = 0; i < references.size(); i++) {\n+        Reference r = references.get(i);\n+        if (r.isAssignmentToName() && r.getNode().getSourceLocation().getEndLine() >\n+            ref.getNode().getSourceLocation().getEndLine()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}