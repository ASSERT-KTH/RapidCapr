{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double eps = 1e-12;\n\n    double v1x = v1.getX();\n    double v1y = v1.getY();\n    double v1z = v1.getZ();\n    double v2x = v2.getX();\n    double v2y = v2.getY();\n    double v2z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double s = v1.getNorm() * v2.getNorm();\n    if (s < eps) {\n        return Vector3D.ZERO;\n    }\n\n    // compute the cross-product using the formula: v1 \u00d7 v2 = ||v1|| ||v2|| sin(\u03b8) n\n    final double theta = FastMath.asin(FastMath.sqrt(((v1y * v2z - v1z * v2y) * (v1y * v2z - v1z * v2y)) + ((v1z * v2x - v1x * v2z) * (v1z * v2x - v1x * v2z))\n            + ((v1x * v2y - v1y * v2x) * (v1x * v2y - v1y * v2x))) / s);\n    return new Vector3D((v1y * v2z - v1z * v2y) / FastMath.sin(theta), (v1z * v2x - v1x * v2z) / FastMath.sin(theta),\n            (v1x * v2y - v1y * v2x) / FastMath.sin(theta));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..be847a6ce 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,29 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double eps = 1e-12;\n+\n+    double v1x = v1.getX();\n+    double v1y = v1.getY();\n+    double v1z = v1.getZ();\n+    double v2x = v2.getX();\n+    double v2y = v2.getY();\n+    double v2z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double s = v1.getNorm() * v2.getNorm();\n+    if (s < eps) {\n+        return Vector3D.ZERO;\n+    }\n \n-  }\n+    // compute the cross-product using the formula: v1 \u00d7 v2 = ||v1|| ||v2|| sin(\u03b8) n\n+    final double theta = FastMath.asin(FastMath.sqrt(((v1y * v2z - v1z * v2y) * (v1y * v2z - v1z * v2y)) + ((v1z * v2x - v1x * v2z) * (v1z * v2x - v1x * v2z))\n+            + ((v1x * v2y - v1y * v2x) * (v1x * v2y - v1y * v2x))) / s);\n+    return new Vector3D((v1y * v2z - v1z * v2y) / FastMath.sin(theta), (v1z * v2x - v1x * v2z) / FastMath.sin(theta),\n+            (v1x * v2y - v1y * v2x) / FastMath.sin(theta));\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<4.347413023856832>",
    "test_result": "FAIL"
}