{
    "patch": "public static String escapeString(String str) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        switch (c) {\n            case '|':\n                sb.append(\"\\\\|\");\n                break;\n            case '&':\n                sb.append(\"\\\\&\");\n                break;\n            case ';':\n                sb.append(\"\\\\;\");\n                break;\n            case '(':\n                sb.append(\"\\\\(\");\n                break;\n            case ')':\n                sb.append(\"\\\\)\");\n                break;\n            case '<':\n                sb.append(\"\\\\<\");\n                break;\n            case '>':\n                sb.append(\"\\\\>\");\n                break;\n            case '$':\n                sb.append(\"\\\\$\");\n                break;\n            case '`':\n                sb.append(\"\\\\`\");\n                break;\n            case '\\\\':\n                sb.append(\"\\\\\\\\\");\n                break;\n            case '\"':\n                sb.append(\"\\\\\\\"\");\n                break;\n            case '\\'':\n                sb.append(\"\\\\'\");\n                break;\n            case '&quot;':\n                sb.append(\"\\\\&quot;\");\n                break;\n            case '&apos;':\n                sb.append(\"\\\\&apos;\");\n                break;\n            case '\u00a1':\n                sb.append(\"\\\\\u00a1\");\n                break;\n            case '\u00a2':\n                sb.append(\"\\\\\u00a2\");\n                break;\n            case '\u00a3':\n                sb.append(\"\\\\\u00a3\");\n                break;\n            case '\u00a4':\n                sb.append(\"\\\\\u00a4\");\n                break;\n            case '\u00a5':\n                sb.append(\"\\\\\u00a5\");\n                break;\n            case '\u00a6':\n                sb.append(\"\\\\\u00a6\");\n                break;\n            case '\u00a7':\n                sb.append(\"\\\\\u00a7\");\n                break;\n            case '\u00a8':\n                sb.append(\"\\\\\u00a8\");\n                break;\n            case '\u00a9':\n                sb.append(\"\\\\\u00a9\");\n                break;\n            case '\u00aa':\n                sb.append(\"\\\\\u00aa\");\n                break;\n            case '\u00ab':\n                sb.append(\"\\\\\u00ab\");\n                break;\n            case '\u00ac':\n                sb.append(\"\\\\\u00ac\");\n                break;\n            case '\u00ae':\n                sb.append(\"\\\\\u00ae\");\n                break;\n            case '\u00af':\n                sb.append(\"\\\\\u00af\");\n                break;\n            case '\u00b0':\n                sb.append(\"\\\\\u00b0\");\n                break;\n            case '\u00b1':\n                sb.append(\"\\\\\u00b1\");\n                break;\n            case '\u00b2':\n                sb.append(\"\\\\\u00b2\");\n                break;\n            case '\u00b3':\n                sb.append(\"\\\\\u00b3\");\n                break;\n            case '\u00b4':\n                sb.append(\"\\\\\u00b4\");\n                break;\n            case '\u00b5':\n                sb.append(\"\\\\\u00b5\");\n                break;\n            case '\u00b6':\n                sb.append(\"\\\\\u00b6\");\n                break;\n            case '\u00b7':\n                sb.append(\"\\\\\u00b7\");\n                break;\n            case '\u00b8':\n                sb.append(\"\\\\\u00b8\");\n                break;\n            case '\u00b9':\n                sb.append(\"\\\\\u00b9\");\n                break;\n            case '\u00ba':\n                sb.append(\"\\\\\u00ba\");\n                break;\n            case '\u00bb':\n                sb.append(\"\\\\\u00bb\");\n                break;\n            case '\u00bc':\n                sb.append(\"\\\\\u00bc\");\n                break;\n            case '\u00bd':\n                sb.append(\"\\\\\u00bd\");\n                break;\n            case '\u00be':\n                sb.append(\"\\\\\u00be\");\n                break;\n            case '\u00bf':\n                sb.append(\"\\\\\u00bf\");\n                break;\n            default: {\n                if (c < ' ' || c > '~') {\n                    sb.append(String.format(\"\\\\u%04x\", (int) c));\n                } else {\n                    sb.append(c);\n                }\n            }\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..26fe1992 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,154 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeString(String str) {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < str.length(); i++) {\n+        char c = str.charAt(i);\n+        switch (c) {\n+            case '|':\n+                sb.append(\"\\\\|\");\n+                break;\n+            case '&':\n+                sb.append(\"\\\\&\");\n+                break;\n+            case ';':\n+                sb.append(\"\\\\;\");\n+                break;\n+            case '(':\n+                sb.append(\"\\\\(\");\n+                break;\n+            case ')':\n+                sb.append(\"\\\\)\");\n+                break;\n+            case '<':\n+                sb.append(\"\\\\<\");\n+                break;\n+            case '>':\n+                sb.append(\"\\\\>\");\n+                break;\n+            case '$':\n+                sb.append(\"\\\\$\");\n+                break;\n+            case '`':\n+                sb.append(\"\\\\`\");\n+                break;\n+            case '\\\\':\n+                sb.append(\"\\\\\\\\\");\n+                break;\n+            case '\"':\n+                sb.append(\"\\\\\\\"\");\n+                break;\n+            case '\\'':\n+                sb.append(\"\\\\'\");\n+                break;\n+            case '&quot;':\n+                sb.append(\"\\\\&quot;\");\n+                break;\n+            case '&apos;':\n+                sb.append(\"\\\\&apos;\");\n+                break;\n+            case '\u00a1':\n+                sb.append(\"\\\\\u00a1\");\n+                break;\n+            case '\u00a2':\n+                sb.append(\"\\\\\u00a2\");\n+                break;\n+            case '\u00a3':\n+                sb.append(\"\\\\\u00a3\");\n+                break;\n+            case '\u00a4':\n+                sb.append(\"\\\\\u00a4\");\n+                break;\n+            case '\u00a5':\n+                sb.append(\"\\\\\u00a5\");\n+                break;\n+            case '\u00a6':\n+                sb.append(\"\\\\\u00a6\");\n+                break;\n+            case '\u00a7':\n+                sb.append(\"\\\\\u00a7\");\n+                break;\n+            case '\u00a8':\n+                sb.append(\"\\\\\u00a8\");\n+                break;\n+            case '\u00a9':\n+                sb.append(\"\\\\\u00a9\");\n+                break;\n+            case '\u00aa':\n+                sb.append(\"\\\\\u00aa\");\n+                break;\n+            case '\u00ab':\n+                sb.append(\"\\\\\u00ab\");\n+                break;\n+            case '\u00ac':\n+                sb.append(\"\\\\\u00ac\");\n+                break;\n+            case '\u00ae':\n+                sb.append(\"\\\\\u00ae\");\n+                break;\n+            case '\u00af':\n+                sb.append(\"\\\\\u00af\");\n+                break;\n+            case '\u00b0':\n+                sb.append(\"\\\\\u00b0\");\n+                break;\n+            case '\u00b1':\n+                sb.append(\"\\\\\u00b1\");\n+                break;\n+            case '\u00b2':\n+                sb.append(\"\\\\\u00b2\");\n+                break;\n+            case '\u00b3':\n+                sb.append(\"\\\\\u00b3\");\n+                break;\n+            case '\u00b4':\n+                sb.append(\"\\\\\u00b4\");\n+                break;\n+            case '\u00b5':\n+                sb.append(\"\\\\\u00b5\");\n+                break;\n+            case '\u00b6':\n+                sb.append(\"\\\\\u00b6\");\n+                break;\n+            case '\u00b7':\n+                sb.append(\"\\\\\u00b7\");\n+                break;\n+            case '\u00b8':\n+                sb.append(\"\\\\\u00b8\");\n+                break;\n+            case '\u00b9':\n+                sb.append(\"\\\\\u00b9\");\n+                break;\n+            case '\u00ba':\n+                sb.append(\"\\\\\u00ba\");\n+                break;\n+            case '\u00bb':\n+                sb.append(\"\\\\\u00bb\");\n+                break;\n+            case '\u00bc':\n+                sb.append(\"\\\\\u00bc\");\n+                break;\n+            case '\u00bd':\n+                sb.append(\"\\\\\u00bd\");\n+                break;\n+            case '\u00be':\n+                sb.append(\"\\\\\u00be\");\n+                break;\n+            case '\u00bf':\n+                sb.append(\"\\\\\u00bf\");\n+                break;\n+            default: {\n+                if (c < ' ' || c > '~') {\n+                    sb.append(String.format(\"\\\\u%04x\", (int) c));\n+                } else {\n+                    sb.append(c);\n+                }\n+            }\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}