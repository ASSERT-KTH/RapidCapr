{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset and the transition offsets.\n    int initialOffset = getOffset(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n    int nextOffset = getOffset(nextTransition);\n    long previousTransition = previousTransition(instantLocal);\n    int previousOffset = getOffset(previousTransition);\n\n    // If the current offset is equal to the next offset, we're not\n    // in a transition. Return the current offset.\n    if (initialOffset == nextOffset) {\n        return initialOffset;\n    }\n\n    // If the next offset is greater than the initial offset,\n    // we're in a spring-forward transition (gap).\n    if (nextOffset > initialOffset) {\n        // Find the end of the gap interval.\n        long endOfGap = nextTransition - 1;\n        int endOfGapOffset = getOffset(endOfGap);\n\n        // If the initial instant is in the first gap period,\n        // return the next offset.\n        if (initialOffset >= endOfGapOffset) {\n            return nextOffset;\n        }\n    }\n\n    // If the previous offset is equal to the initial offset, we're not\n    // in a transition. Return the current offset.\n    if (initialOffset == previousOffset) {\n        return initialOffset;\n    }\n\n    // If the initial offset is greater than the next offset,\n    // we're in a fall-back transition (overlap).\n    if (initialOffset > nextOffset) {\n        // Find the end of the overlap interval.\n        long endOfOverlap = nextTransition - 1;\n        int endOfOverlapOffset = getOffset(endOfOverlap);\n\n        // If the initial instant is in the overlap period,\n        // return the previous offset.\n        if (initialOffset >= endOfOverlapOffset) {\n            return previousOffset;\n        }\n    }\n\n    // If we haven't found a result so far, return the next offset.\n    return nextOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d287c9dd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,58 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset and the transition offsets.\n+    int initialOffset = getOffset(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+    int nextOffset = getOffset(nextTransition);\n+    long previousTransition = previousTransition(instantLocal);\n+    int previousOffset = getOffset(previousTransition);\n+\n+    // If the current offset is equal to the next offset, we're not\n+    // in a transition. Return the current offset.\n+    if (initialOffset == nextOffset) {\n+        return initialOffset;\n+    }\n+\n+    // If the next offset is greater than the initial offset,\n+    // we're in a spring-forward transition (gap).\n+    if (nextOffset > initialOffset) {\n+        // Find the end of the gap interval.\n+        long endOfGap = nextTransition - 1;\n+        int endOfGapOffset = getOffset(endOfGap);\n+\n+        // If the initial instant is in the first gap period,\n+        // return the next offset.\n+        if (initialOffset >= endOfGapOffset) {\n+            return nextOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // If the previous offset is equal to the initial offset, we're not\n+    // in a transition. Return the current offset.\n+    if (initialOffset == previousOffset) {\n+        return initialOffset;\n+    }\n+\n+    // If the initial offset is greater than the next offset,\n+    // we're in a fall-back transition (overlap).\n+    if (initialOffset > nextOffset) {\n+        // Find the end of the overlap interval.\n+        long endOfOverlap = nextTransition - 1;\n+        int endOfOverlapOffset = getOffset(endOfOverlap);\n+\n+        // If the initial instant is in the overlap period,\n+        // return the previous offset.\n+        if (initialOffset >= endOfOverlapOffset) {\n+            return previousOffset;\n+        }\n+    }\n+\n+    // If we haven't found a result so far, return the next offset.\n+    return nextOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}