{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n        Preconditions.checkState(block.hasOneChild());\n        Node stmt = block.getFirstChild();\n        if (stmt.isReturn()) {\n            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n        }\n    }\n\n    Node cArg = callNode.getFirstChild().getNext();\n\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (cArg == null || !cArg.isThis()) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParam != null || cArg != null) {\n        if (fnParam == null || fnParam.getString().equals(\"arguments\")) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        } else if (cArg == null) {\n            if (hasSideEffects && NodeUtil.createsASTNodes(fnParam)) {\n                return CanInlineResult.NO;\n            }\n            if (NodeUtil.isVarArgs(fnNode)) {\n                Node rest = fnParam.getNext();\n                if (rest != null) {\n                    fnParam = rest;\n                } else {\n                    break;\n                }\n            }\n            fnParam = fnParam.getNext();\n        } else {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            if (NodeUtil.matchesName(fnParam, cArg)) {\n                if (hasSideEffects && NodeUtil.createsASTNodes(fnParam)) {\n                    return CanInlineResult.NO;\n                }\n                fnParam = fnParam.getNext();\n                cArg = cArg.getNext();\n            } else if (NodeUtil.isVarArgs(fnNode)) {\n                // We've reached the end of the non-varargs parameters.\n                Node rest = fnParam.getNext();\n                if (rest != null) {\n                    fnParam = rest;\n                } else {\n                    break;\n                }\n            } else {\n                fnParam = fnParam.getNext();\n            }\n        }\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..753ed26c 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,81 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n     if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+        Preconditions.checkState(block.hasOneChild());\n+        Node stmt = block.getFirstChild();\n+        if (stmt.isReturn()) {\n+            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+        }\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n     if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+        if (NodeUtil.isFunctionObjectCall(callNode)) {\n+            if (cArg == null || !cArg.isThis()) {\n+                return CanInlineResult.NO;\n+            }\n+            cArg = cArg.getNext();\n+        } else {\n+            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    while (fnParam != null || cArg != null) {\n+        if (fnParam == null || fnParam.getString().equals(\"arguments\")) {\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+            cArg = cArg.getNext();\n+        } else if (cArg == null) {\n+            if (hasSideEffects && NodeUtil.createsASTNodes(fnParam)) {\n+                return CanInlineResult.NO;\n+            }\n+            if (NodeUtil.isVarArgs(fnNode)) {\n+                Node rest = fnParam.getNext();\n+                if (rest != null) {\n+                    fnParam = rest;\n+                } else {\n+                    break;\n+                }\n+            }\n+            fnParam = fnParam.getNext();\n+        } else {\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+            if (NodeUtil.matchesName(fnParam, cArg)) {\n+                if (hasSideEffects && NodeUtil.createsASTNodes(fnParam)) {\n+                    return CanInlineResult.NO;\n+                }\n+                fnParam = fnParam.getNext();\n+                cArg = cArg.getNext();\n+            } else if (NodeUtil.isVarArgs(fnNode)) {\n+                // We've reached the end of the non-varargs parameters.\n+                Node rest = fnParam.getNext();\n+                if (rest != null) {\n+                    fnParam = rest;\n+                } else {\n+                    break;\n+                }\n+            } else {\n+                fnParam = fnParam.getNext();\n+            }\n         }\n-        cArg = cArg.getNext();\n-      }\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}