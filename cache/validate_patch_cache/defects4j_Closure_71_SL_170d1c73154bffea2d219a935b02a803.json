{
    "patch": "    boolean isOverride = t.inGlobalScope() && parent != null &&\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      // Do some error checking",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..ae6fcba9 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,38 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+    boolean isOverride = t.inGlobalScope() && parent != null &&\n+        parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop;\n+    ObjectType objectType =\n+        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    String propertyName = getprop.getLastChild().getString();\n+\n+    if (objectType != null) {\n+      // Is this a normal property access, or are we trying to override\n+      // an existing property?\n+      if (isOverride) {\n+        objectType = objectType.getImplicitPrototype();\n+      }\n+\n+      // Find the lowest property defined on a class with visibility\n+      // information.\n+      JSDocInfo docInfo = null;\n+      for (; objectType != null;\n+           objectType = objectType.getImplicitPrototype()) {\n+        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+        if (docInfo != null &&\n+            docInfo.getVisibility() != Visibility.INHERITED) {\n+          break;\n+        }\n+      }\n+\n+      if (objectType == null) {\n+        // We couldn't find a visibility modifier; assume it's public.\n+        return;\n+      }\n+\n+      // Do some error checking\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}