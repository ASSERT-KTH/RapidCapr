{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n      // {@code name} meets condition (b).\n\n      // Try to inline any local aliases first.\n      List<Ref> localRefs = Lists.newArrayList(name.getRefs());\n      boolean inlinedLocalAlias = false;\n      for (Ref ref : localRefs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n            inlinedLocalAlias = true;\n          }\n        }\n      }\n\n      if (!inlinedLocalAlias) {\n        // An inlining of a local alias was not performed, then attempt global aliasing\n        // inlining unless the name is a constant.\n        if(name.kind == Name.Kind.CONST) {\n          continue;\n        }\n\n        // Try to inline global aliases for the name.\n        List<Ref> globalRefs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : globalRefs) {\n          if (ref.type == Type.ALIASING_GET && !ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n              break;\n            }\n          }\n        }\n      }\n\n      // Check if condition (b) still holds after inlining any local or global aliases.\n      if (name.globalSets == 0 && name.aliasingGets == 0 && name.refersToParents()) {\n        // Remove the name from its parent so the child properties can be inlined.\n        // This allows us to inline properties of the current name only after all possible\n        // aliasing inlining has been completed.\n        name.parent.removeProp(name);\n      }\n    }\n\n    // Check if {@code name} has any aliases left after the\n    // local-alias-inlining above and after inlining global aliases.\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n        && name.aliasingGets == 0 && name.props != null) {\n      // All of {@code name}'s children meet condition (a), so they can be\n      // added to the worklist.\n      workList.addAll(name.props);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..d9d0643a 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,70 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+\n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n+      // {@code name} meets condition (b).\n+\n+      // Try to inline any local aliases first.\n+      List<Ref> localRefs = Lists.newArrayList(name.getRefs());\n+      boolean inlinedLocalAlias = false;\n+      for (Ref ref : localRefs) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n+            inlinedLocalAlias = true;\n+          }\n+        }\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+      if (!inlinedLocalAlias) {\n+        // An inlining of a local alias was not performed, then attempt global aliasing\n+        // inlining unless the name is a constant.\n+        if(name.kind == Name.Kind.CONST) {\n+          continue;\n+        }\n+\n+        // Try to inline global aliases for the name.\n+        List<Ref> globalRefs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : globalRefs) {\n+          if (ref.type == Type.ALIASING_GET && !ref.scope.isLocal()) {\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n+              break;\n             }\n           }\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+      // Check if condition (b) still holds after inlining any local or global aliases.\n+      if (name.globalSets == 0 && name.aliasingGets == 0 && name.refersToParents()) {\n+        // Remove the name from its parent so the child properties can be inlined.\n+        // This allows us to inline properties of the current name only after all possible\n+        // aliasing inlining has been completed.\n+        name.parent.removeProp(name);\n       }\n     }\n+\n+    // Check if {@code name} has any aliases left after the\n+    // local-alias-inlining above and after inlining global aliases.\n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+        && name.aliasingGets == 0 && name.props != null) {\n+      // All of {@code name}'s children meet condition (a), so they can be\n+      // added to the worklist.\n+      workList.addAll(name.props);\n+    }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}