{
    "patch": "final Vector newX = direction.normalize();\nfinal Vector newY = new Vector(-direction.getY(), direction.getX()).normalize();\nfinal Matrix matrix = new Matrix(newX, newY);\nfinal Vector startPoint = matrix.multiply(zero);\nfinal Vector endPoint = matrix.multiply(direction).subtract(startPoint);\nfinal Line reverted = new Line(startPoint, endPoint);\nreturn reverted;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..18c0d2574 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,13 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final Vector newX = direction.normalize();\n+final Vector newY = new Vector(-direction.getY(), direction.getX()).normalize();\n+final Matrix matrix = new Matrix(newX, newY);\n+final Vector startPoint = matrix.multiply(zero);\n+final Vector endPoint = matrix.multiply(direction).subtract(startPoint);\n+final Line reverted = new Line(startPoint, endPoint);\n+return reverted;\n         return reverted;\n     }\n ",
    "result_reason": "error: Vector is abstract; cannot be instantiated",
    "test_result": "ERROR"
}