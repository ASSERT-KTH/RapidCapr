{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  if (cfgNode == null || cfgNode.getBlock() == null) {\n    return false;\n  }\n  return cfgNode.getBlock().getSuccessors().stream()\n      .anyMatch(succ -> succ.getType() == NodeType.EXCEPTION_HANDLER);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..2d07966e 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -156,9 +156,13 @@ class MaybeReachingVariableUse extends\n     return output;\n   }\n \n-  private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  if (cfgNode == null || cfgNode.getBlock() == null) {\n     return false;\n   }\n+  return cfgNode.getBlock().getSuccessors().stream()\n+      .anyMatch(succ -> succ.getType() == NodeType.EXCEPTION_HANDLER);\n+}\n \n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}