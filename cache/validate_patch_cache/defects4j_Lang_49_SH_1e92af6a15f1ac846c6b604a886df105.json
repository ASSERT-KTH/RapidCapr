{
    "patch": "public Fraction reduce() {\n    int gcd = 1;\n\n    for (int i = Math.min(Math.abs(numerator), denominator); i >= 2; i--) {\n        if (numerator % i == 0 && denominator % i == 0) {\n            gcd = i;\n            break;\n        }\n    }\n\n    if (gcd == 1) {\n        return this;\n    }\n\n    return new Fraction(numerator / gcd, denominator / gcd);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..7c601e82 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,22 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+    int gcd = 1;\n+\n+    for (int i = Math.min(Math.abs(numerator), denominator); i >= 2; i--) {\n+        if (numerator % i == 0 && denominator % i == 0) {\n+            gcd = i;\n+            break;\n+        }\n+    }\n+\n+    if (gcd == 1) {\n+        return this;\n+    }\n+\n+    return new Fraction(numerator / gcd, denominator / gcd);\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}