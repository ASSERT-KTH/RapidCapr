{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        throw new IllegalArgumentException(\"Mock object must be a Factory\");\n    }\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    \n    // Check if the mocked object is already spied\n    if (mock instanceof MockitoSpy) {\n        MockitoSpy<T> spiedMock = (MockitoSpy<T>) mock;\n        Object spiedInstance = spiedMock.getSpiedInstance();\n        if (spiedInstance != null) {\n            ((Factory) spiedInstance).setCallback(0, newFilter);\n            return;\n        }\n    }\n    \n    // Otherwise, create a new mock object and set the callback\n    T newMock = mockitoCore.mock(mock.getClass(), newFilter);\n    ((Factory) mock).setCallback(0, new PoolableMockHandler<T>(newMock));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..3a2ba47c6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        throw new IllegalArgumentException(\"Mock object must be a Factory\");\n+    }\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    \n+    // Check if the mocked object is already spied\n+    if (mock instanceof MockitoSpy) {\n+        MockitoSpy<T> spiedMock = (MockitoSpy<T>) mock;\n+        Object spiedInstance = spiedMock.getSpiedInstance();\n+        if (spiedInstance != null) {\n+            ((Factory) spiedInstance).setCallback(0, newFilter);\n+            return;\n+        }\n+    }\n+    \n+    // Otherwise, create a new mock object and set the callback\n+    T newMock = mockitoCore.mock(mock.getClass(), newFilter);\n+    ((Factory) mock).setCallback(0, new PoolableMockHandler<T>(newMock));\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}