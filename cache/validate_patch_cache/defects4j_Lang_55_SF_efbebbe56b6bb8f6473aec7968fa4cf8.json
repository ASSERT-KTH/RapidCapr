{
    "patch": "public void stop() {\n    if(this.runningState == STATE_RUNNING) {\n        stopTime = System.currentTimeMillis();\n        this.runningState = STATE_STOPPED;\n    } else if(this.runningState == STATE_SUSPENDED) {\n        stopTime = System.currentTimeMillis();\n        this.runningState = STATE_STOPPED;\n        resume();\n    } else {\n        throw new IllegalStateException(\"Stopwatch is not running. \");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/StopWatch.java b/src/java/org/apache/commons/lang/time/StopWatch.java\nindex 8f394217..afd5f0da 100644\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -111,13 +111,18 @@ public class StopWatch {\n      *\n      * @throws IllegalStateException if the StopWatch is not running.\n      */\n-    public void stop() {\n-        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n-            throw new IllegalStateException(\"Stopwatch is not running. \");\n-        }\n-            stopTime = System.currentTimeMillis();\n+public void stop() {\n+    if(this.runningState == STATE_RUNNING) {\n+        stopTime = System.currentTimeMillis();\n         this.runningState = STATE_STOPPED;\n+    } else if(this.runningState == STATE_SUSPENDED) {\n+        stopTime = System.currentTimeMillis();\n+        this.runningState = STATE_STOPPED;\n+        resume();\n+    } else {\n+        throw new IllegalStateException(\"Stopwatch is not running. \");\n     }\n+}\n \n     /**\n      * <p>Resets the stopwatch. Stops it if need be. </p>",
    "result_reason": "java.lang.IllegalStateException: Stopwatch must be suspended to resume.",
    "test_result": "FAIL"
}