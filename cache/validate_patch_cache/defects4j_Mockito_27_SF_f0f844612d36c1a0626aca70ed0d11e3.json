{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<?> oldMockHandler = getMockHandler(mock);\n\n    if (oldMockHandler instanceof DelegateMockHandler<?>) {\n        mock = ((DelegateMockHandler<T>) oldMockHandler).getMock();\n    }\n\n    MockHandler<T> newMockHandler = new MockHandler<>(mock, oldMockHandler);\n\n    if (oldMockHandler instanceof MockAwareInterceptor) {\n        ((MockAwareInterceptor) oldMockHandler).setMockHandler(newMockHandler);\n    }\n\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n        callbacks[0] = newFilter;\n        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n        factory.setCallbacks(callbacks);\n    } else if (mock instanceof Delegate) {\n        Delegate delegate = (Delegate) mock;\n        delegate.setMockitoInterceptor(newFilter);\n    } else {\n        ((Proxy) mock).setHandler(newFilter);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b962e6f5a 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,35 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<?> oldMockHandler = getMockHandler(mock);\n+\n+    if (oldMockHandler instanceof DelegateMockHandler<?>) {\n+        mock = ((DelegateMockHandler<T>) oldMockHandler).getMock();\n+    }\n+\n+    MockHandler<T> newMockHandler = new MockHandler<>(mock, oldMockHandler);\n+\n+    if (oldMockHandler instanceof MockAwareInterceptor) {\n+        ((MockAwareInterceptor) oldMockHandler).setMockHandler(newMockHandler);\n+    }\n+\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+        callbacks[0] = newFilter;\n+        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+        factory.setCallbacks(callbacks);\n+    } else if (mock instanceof Delegate) {\n+        Delegate delegate = (Delegate) mock;\n+        delegate.setMockitoInterceptor(newFilter);\n+    } else {\n+        ((Proxy) mock).setHandler(newFilter);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}