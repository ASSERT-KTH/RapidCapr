{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    // Handle empty and single-element cases\n    if (size == 0) {\n        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n    } else if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n\n    // Partition consecutive separator and non-separator pairs\n    List<List<Object>> partitionedPairs = new ArrayList<>();\n    List<Object> currentPairGroup = new ArrayList<>();\n    Object currentType = elementPairs.get(0).getClass();\n    for (Object pair : elementPairs) {\n        if (pair.getClass().equals(currentType)) {\n            currentPairGroup.add(pair);\n        } else {\n            partitionedPairs.add(currentPairGroup);\n            currentPairGroup = new ArrayList<>();\n            currentPairGroup.add(pair);\n            currentType = pair.getClass();\n        }\n    }\n    partitionedPairs.add(currentPairGroup);\n\n    // Build formatter from partitioned pairs\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    for (List<Object> pairGroup : partitionedPairs) {\n        if (pairGroup.get(0) instanceof Separator) {\n            Separator sep = (Separator) pairGroup.get(0);\n            PeriodFormatter subFormatter = toFormatter(pairGroup.subList(1, pairGroup.size()), notPrinter, notParser);\n            printer = combinePrinters(printer, sep, subFormatter.getPrinter());\n            parser = combineParsers(parser, sep, subFormatter.getParser());\n        } else {\n            Object[] comp = createComposite(pairGroup);\n            printer = combinePrinters(printer, null, (PeriodPrinter) comp[0]);\n            parser = combineParsers(parser, null, (PeriodParser) comp[1]);\n        }\n    }\n\n    return new PeriodFormatter(printer, parser);\n}\n\nprivate static PeriodPrinter combinePrinters(PeriodPrinter before, Separator sep, PeriodPrinter after) {\n    if (after == null) {\n        return before;\n    } else if (before == null) {\n        return new CompositePrinter(sep, after);\n    } else {\n        return new CompositePrinter(before, sep, after);\n    }\n}\n\nprivate static PeriodParser combineParsers(PeriodParser before, Separator sep, PeriodParser after) {\n    if (after == null) {\n        return before;\n    } else if (before == null) {\n        return new CompositeParser(sep, after);\n    } else {\n        return new CompositeParser(before, sep, after);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..923e54f9 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,88 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    // Handle empty and single-element cases\n+    if (size == 0) {\n+        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n+    } else if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    }\n+\n+    // Partition consecutive separator and non-separator pairs\n+    List<List<Object>> partitionedPairs = new ArrayList<>();\n+    List<Object> currentPairGroup = new ArrayList<>();\n+    Object currentType = elementPairs.get(0).getClass();\n+    for (Object pair : elementPairs) {\n+        if (pair.getClass().equals(currentType)) {\n+            currentPairGroup.add(pair);\n+        } else {\n+            partitionedPairs.add(currentPairGroup);\n+            currentPairGroup = new ArrayList<>();\n+            currentPairGroup.add(pair);\n+            currentType = pair.getClass();\n+        }\n+    }\n+    partitionedPairs.add(currentPairGroup);\n+\n+    // Build formatter from partitioned pairs\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    for (List<Object> pairGroup : partitionedPairs) {\n+        if (pairGroup.get(0) instanceof Separator) {\n+            Separator sep = (Separator) pairGroup.get(0);\n+            PeriodFormatter subFormatter = toFormatter(pairGroup.subList(1, pairGroup.size()), notPrinter, notParser);\n+            printer = combinePrinters(printer, sep, subFormatter.getPrinter());\n+            parser = combineParsers(parser, sep, subFormatter.getParser());\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(pairGroup);\n+            printer = combinePrinters(printer, null, (PeriodPrinter) comp[0]);\n+            parser = combineParsers(parser, null, (PeriodParser) comp[1]);\n         }\n     }\n \n+    return new PeriodFormatter(printer, parser);\n+}\n+\n+private static PeriodPrinter combinePrinters(PeriodPrinter before, Separator sep, PeriodPrinter after) {\n+    if (after == null) {\n+        return before;\n+    } else if (before == null) {\n+        return new CompositePrinter(sep, after);\n+    } else {\n+        return new CompositePrinter(before, sep, after);\n+    }\n+}\n+\n+private static PeriodParser combineParsers(PeriodParser before, Separator sep, PeriodParser after) {\n+    if (after == null) {\n+        return before;\n+    } else if (before == null) {\n+        return new CompositeParser(sep, after);\n+    } else {\n+        return new CompositeParser(before, sep, after);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}