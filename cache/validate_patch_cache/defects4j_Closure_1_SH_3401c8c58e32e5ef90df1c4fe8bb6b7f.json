{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode lastArg;\nboolean stripArgs = true;\nwhile ((lastArg = argList.getLastChild()) != null) {\n  if (stripArgs) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!var.isReferenced()) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n      continue; // Do not break and stop shortening the ast, we still need to check if more params are needed\n    }\n    stripArgs = false;\n  }\n  checkArgument(lastArg.isName());\n  if (!isInlineableArgument(lastArg, referenced)) {\n    break;\n  }\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bca5b45d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg;\n+boolean stripArgs = true;\n+while ((lastArg = argList.getLastChild()) != null) {\n+  if (stripArgs) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!var.isReferenced()) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+      continue; // Do not break and stop shortening the ast, we still need to check if more params are needed\n+    }\n+    stripArgs = false;\n+  }\n+  checkArgument(lastArg.isName());\n+  if (!isInlineableArgument(lastArg, referenced)) {\n+    break;\n+  }\n+  argList.removeChild(lastArg);\n+  compiler.reportCodeChange();\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}