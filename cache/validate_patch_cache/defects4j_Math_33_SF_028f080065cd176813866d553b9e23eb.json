{
    "patch": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive cost non-artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non-basic artificial variables\n    List<Integer> artificialVariables = new ArrayList<Integer>();\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        if (getBasicRow(col) == null) {\n            artificialVariables.add(col);\n        }\n    }\n    columnsToDrop.addAll(artificialVariables);\n\n    int numRows = getHeight() - 1;\n    int numCols = getWidth() - columnsToDrop.size();\n\n    double[][] matrix = new double[numRows][numCols];\n    int row = 0;\n    for (int i = 1; i < getHeight(); i++) {\n        int col = 0;\n        for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n                matrix[row][col++] = tableau.getEntry(i, j);\n            }\n        }\n        row++;\n    }\n\n    double[] oldSolution = Arrays.copyOf(solution.getPoint(), numCols);\n    solution = null;\n\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n        int colIndex = columnsToDrop.get(i);\n        if (colIndex >= getNumObjectiveFunctions() && colIndex < getArtificialVariableOffset()) {\n            continue;\n        }\n        columnLabels.remove(colIndex);\n        for (int j = 0; j < basicRows.length; j++) {\n            if (basicRows[j] >= 0 && tableau.getEntry(j + 1, colIndex) != 0) {\n                RealMatrix pivotRow = tableau.getRowVector(j + 1).scalarMultiply(tableau.getEntry(j + 1, colIndex));\n                tableau.setRowVector(j + 1, tableau.getRowVector(j + 1).subtract(pivotRow));\n                pivotRow = null;\n            }\n        }\n    }\n\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    setNumArtificialVariables(0);\n\n    // Refactor old pivot rows\n    for (int i = 0; i < basicRows.length; i++) {\n        int br = basicRows[i];\n        if (br >= 0 && br < numCols) {\n            // Find new column index for basic variable\n            int bc = -1;\n            for (int j = 0; j < columnLabels.size(); j++) {\n                if (br == columnLabels.get(j)) {\n                    bc = j;\n                    break;\n                }\n            }\n            if (bc != -1) {\n                double x = oldSolution[br];\n                tableau.setEntry(i + 1, bc, x);\n                solution.setEntry(bc, x);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..8ae728337 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,47 +324,88 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n-        if (getNumObjectiveFunctions() == 1) {\n-            return;\n-        }\n+protected void dropPhase1Objective() {\n+    if (getNumObjectiveFunctions() == 1) {\n+        return;\n+    }\n \n-        List<Integer> columnsToDrop = new ArrayList<Integer>();\n-        columnsToDrop.add(0);\n+    List<Integer> columnsToDrop = new ArrayList<Integer>();\n+    columnsToDrop.add(0);\n \n-        // positive cost non-artificial variables\n-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n-            final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n-            }\n+    // positive cost non-artificial variables\n+    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n+        final double entry = tableau.getEntry(0, i);\n+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            columnsToDrop.add(i);\n         }\n+    }\n \n-        // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n-          }\n+    // non-basic artificial variables\n+    List<Integer> artificialVariables = new ArrayList<Integer>();\n+    for (int i = 0; i < getNumArtificialVariables(); i++) {\n+        int col = i + getArtificialVariableOffset();\n+        if (getBasicRow(col) == null) {\n+            artificialVariables.add(col);\n         }\n+    }\n+    columnsToDrop.addAll(artificialVariables);\n+\n+    int numRows = getHeight() - 1;\n+    int numCols = getWidth() - columnsToDrop.size();\n \n-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n-        for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n+    double[][] matrix = new double[numRows][numCols];\n+    int row = 0;\n+    for (int i = 1; i < getHeight(); i++) {\n+        int col = 0;\n+        for (int j = 0; j < getWidth(); j++) {\n             if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n+                matrix[row][col++] = tableau.getEntry(i, j);\n             }\n-          }\n         }\n+        row++;\n+    }\n+\n+    double[] oldSolution = Arrays.copyOf(solution.getPoint(), numCols);\n+    solution = null;\n \n-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n+        int colIndex = columnsToDrop.get(i);\n+        if (colIndex >= getNumObjectiveFunctions() && colIndex < getArtificialVariableOffset()) {\n+            continue;\n+        }\n+        columnLabels.remove(colIndex);\n+        for (int j = 0; j < basicRows.length; j++) {\n+            if (basicRows[j] >= 0 && tableau.getEntry(j + 1, colIndex) != 0) {\n+                RealMatrix pivotRow = tableau.getRowVector(j + 1).scalarMultiply(tableau.getEntry(j + 1, colIndex));\n+                tableau.setRowVector(j + 1, tableau.getRowVector(j + 1).subtract(pivotRow));\n+                pivotRow = null;\n+            }\n         }\n+    }\n \n-        this.tableau = new Array2DRowRealMatrix(matrix);\n-        this.numArtificialVariables = 0;\n+    this.tableau = new Array2DRowRealMatrix(matrix);\n+    setNumArtificialVariables(0);\n+\n+    // Refactor old pivot rows\n+    for (int i = 0; i < basicRows.length; i++) {\n+        int br = basicRows[i];\n+        if (br >= 0 && br < numCols) {\n+            // Find new column index for basic variable\n+            int bc = -1;\n+            for (int j = 0; j < columnLabels.size(); j++) {\n+                if (br == columnLabels.get(j)) {\n+                    bc = j;\n+                    break;\n+                }\n+            }\n+            if (bc != -1) {\n+                double x = oldSolution[br];\n+                tableau.setEntry(i + 1, bc, x);\n+                solution.setEntry(bc, x);\n+            }\n+        }\n     }\n+}\n \n     /**\n      * @param src the source array",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}