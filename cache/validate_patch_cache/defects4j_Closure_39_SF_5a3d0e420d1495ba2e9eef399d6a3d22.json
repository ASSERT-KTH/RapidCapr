{
    "patch": "public boolean canBeCalled() {\n    return isFunctionType() || isConstructor() || isInterface();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType() &&\n                     propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        boolean isCallable = canBeCalled();\n\n        // Handle constructor pretty-printing\n        boolean isConstructorWithProperties = isConstructor() && propertyNames.size() > 0;\n        if (isConstructorWithProperties) {\n            // If pretty-printing and constructor has properties, print constructor with properties\n            sb.append(\"new {\");\n            int i = 0;\n            for (String property : propertyNames) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n                sb.append(property).append(\": \");\n\n                JSType propertyType = getPropertyType(property);\n                if (propertyType == null) {\n                    if (forAnnotations) {\n                        sb.append(\"?\");\n                    } else {\n                        sb.append(\"[?]\");\n                    }\n                } else {\n                    sb.append(propertyType.toString());\n                }\n\n                i++;\n                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                    sb.append(\", ...\");\n                    break;\n                }\n            }\n            sb.append(\"}\");\n        } else if (isCallable) {\n            // If pretty-printing and a callable type, print with parentheses\n            sb.append(\"(\");\n            boolean printedType = false;\n            if (isConstructor()) {\n                sb.append(\"new \");\n                printedType = true;\n            }\n            if (!printedType) {\n                sb.append(\"{\");\n            }\n\n            int i = 0;\n            for (String property : propertyNames) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n                sb.append(property).append(\": \");\n\n                JSType propertyType = getPropertyType(property);\n                if (propertyType == null) {\n                    if (forAnnotations) {\n                        sb.append(\"?\");\n                    } else {\n                        sb.append(\"[?]\");\n                    }\n                } else {\n                    sb.append(propertyType.toString());\n                }\n\n                i++;\n                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                    sb.append(\", ...\");\n                    break;\n                }\n            }\n\n            if (!printedType) {\n                sb.append(\"}\");\n                prettyPrint = true;\n            }\n            sb.append(\")\");\n        } else {\n            // If not pretty-printing or not callable, print with braces\n            sb.append(\"{\");\n\n            int i = 0;\n            for (String property : propertyNames) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n                sb.append(property).append(\": \");\n\n                JSType propertyType = getPropertyType(property);\n                if (propertyType == null) {\n                    if (forAnnotations) {\n                        sb.append(\"?\");\n                    } else {\n                        sb.append(\"[?]\");\n                    }\n                } else {\n                    sb.append(propertyType.toString());\n                }\n\n                i++;\n                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                    sb.append(\", ...\");\n                    break;\n                }\n            }\n\n            sb.append(\"}\");\n        }\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..993f4197 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,140 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return isFunctionType() || isConstructor() || isInterface();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        // Use a tree set so that the properties are sorted.\n+        Set<String> propertyNames = Sets.newTreeSet();\n+        for (ObjectType current = this;\n+             current != null && !current.isNativeObjectType() &&\n+                     propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+             current = current.getImplicitPrototype()) {\n+            propertyNames.addAll(current.getOwnPropertyNames());\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        StringBuilder sb = new StringBuilder();\n+        boolean isCallable = canBeCalled();\n+\n+        // Handle constructor pretty-printing\n+        boolean isConstructorWithProperties = isConstructor() && propertyNames.size() > 0;\n+        if (isConstructorWithProperties) {\n+            // If pretty-printing and constructor has properties, print constructor with properties\n+            sb.append(\"new {\");\n+            int i = 0;\n+            for (String property : propertyNames) {\n+                if (i > 0) {\n+                    sb.append(\", \");\n+                }\n+                sb.append(property).append(\": \");\n+\n+                JSType propertyType = getPropertyType(property);\n+                if (propertyType == null) {\n+                    if (forAnnotations) {\n+                        sb.append(\"?\");\n+                    } else {\n+                        sb.append(\"[?]\");\n+                    }\n+                } else {\n+                    sb.append(propertyType.toString());\n+                }\n+\n+                i++;\n+                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+                    sb.append(\", ...\");\n+                    break;\n+                }\n+            }\n+            sb.append(\"}\");\n+        } else if (isCallable) {\n+            // If pretty-printing and a callable type, print with parentheses\n+            sb.append(\"(\");\n+            boolean printedType = false;\n+            if (isConstructor()) {\n+                sb.append(\"new \");\n+                printedType = true;\n+            }\n+            if (!printedType) {\n+                sb.append(\"{\");\n+            }\n+\n+            int i = 0;\n+            for (String property : propertyNames) {\n+                if (i > 0) {\n+                    sb.append(\", \");\n+                }\n+                sb.append(property).append(\": \");\n+\n+                JSType propertyType = getPropertyType(property);\n+                if (propertyType == null) {\n+                    if (forAnnotations) {\n+                        sb.append(\"?\");\n+                    } else {\n+                        sb.append(\"[?]\");\n+                    }\n+                } else {\n+                    sb.append(propertyType.toString());\n+                }\n+\n+                i++;\n+                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+                    sb.append(\", ...\");\n+                    break;\n+                }\n+            }\n+\n+            if (!printedType) {\n+                sb.append(\"}\");\n+                prettyPrint = true;\n+            }\n+            sb.append(\")\");\n+        } else {\n+            // If not pretty-printing or not callable, print with braces\n+            sb.append(\"{\");\n+\n+            int i = 0;\n+            for (String property : propertyNames) {\n+                if (i > 0) {\n+                    sb.append(\", \");\n+                }\n+                sb.append(property).append(\": \");\n+\n+                JSType propertyType = getPropertyType(property);\n+                if (propertyType == null) {\n+                    if (forAnnotations) {\n+                        sb.append(\"?\");\n+                    } else {\n+                        sb.append(\"[?]\");\n+                    }\n+                } else {\n+                    sb.append(propertyType.toString());\n+                }\n+\n+                i++;\n+                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+                    sb.append(\", ...\");\n+                    break;\n+                }\n+            }\n+\n+            sb.append(\"}\");\n         }\n-      }\n-\n-      sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}