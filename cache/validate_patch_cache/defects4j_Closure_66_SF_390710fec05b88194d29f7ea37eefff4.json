{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n    Map<String, Object> map = gson.fromJson(json, type);\n    Double total = Double.valueOf(map.get(\"total\").toString());\n    List<Map<String, Object>> list = (List<Map<String, Object>>) map.get(\"list\");\n    int typedCount = 0;\n    for (Map<String, Object> item : list) {\n        String typeStr = (String) item.get(\"type\");\n        if (\"T\".equals(typeStr)) {\n            typedCount++;\n        }\n    }\n    return ((double) typedCount / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..565d9c42 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n+    Map<String, Object> map = gson.fromJson(json, type);\n+    Double total = Double.valueOf(map.get(\"total\").toString());\n+    List<Map<String, Object>> list = (List<Map<String, Object>>) map.get(\"list\");\n+    int typedCount = 0;\n+    for (Map<String, Object> item : list) {\n+        String typeStr = (String) item.get(\"type\");\n+        if (\"T\".equals(typeStr)) {\n+            typedCount++;\n+        }\n+    }\n+    return ((double) typedCount / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}