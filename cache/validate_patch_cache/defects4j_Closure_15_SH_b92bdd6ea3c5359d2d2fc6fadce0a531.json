{
    "patch": "        if (n.isExprResult()) {\n          n = n.getFirstChild();\n        }\n\n        if (n.isAssign() &&\n            !n.getFirstChild().isQualifiedName()) {\n          n = n.getLastChild();\n        }\n\n        if (n.isName()) {\n          Var var = this.getScope().getVar(n.getString());\n          // if the var is null, it means that it's declared somewhere\n          // outside of the current scope. We are not concerned about\n          // that case.\n          if (var != null && !var.isInferred()) {\n            return true;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..f81e3872 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,24 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isExprResult()) {\n+          n = n.getFirstChild();\n+        }\n+\n+        if (n.isAssign() &&\n+            !n.getFirstChild().isQualifiedName()) {\n+          n = n.getLastChild();\n+        }\n+\n+        if (n.isName()) {\n+          Var var = this.getScope().getVar(n.getString());\n+          // if the var is null, it means that it's declared somewhere\n+          // outside of the current scope. We are not concerned about\n+          // that case.\n+          if (var != null && !var.isInferred()) {\n+            return true;\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}