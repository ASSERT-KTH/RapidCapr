{
    "patch": "for (BasicBlock block = ref.getBasicBlock();\n     block != null; block = block.getParent()) {\n  if (block.isFunction) {\n    return ref == getInitializingReference() &&\n        getReferences().subList(1, getReferences().size()).stream()\n            .noneMatch(r -> !r.isSimpleAssignmentFromName());\n  } else if (block.isLoop) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f07b4e63 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+for (BasicBlock block = ref.getBasicBlock();\n+     block != null; block = block.getParent()) {\n+  if (block.isFunction) {\n+    return ref == getInitializingReference() &&\n+        getReferences().subList(1, getReferences().size()).stream()\n+            .noneMatch(r -> !r.isSimpleAssignmentFromName());\n+  } else if (block.isLoop) {\n+    return false;\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}