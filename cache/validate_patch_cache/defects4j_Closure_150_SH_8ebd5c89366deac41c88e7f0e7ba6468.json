{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // Skip named function expressions: `var foo = function bar() {}`\n        if (parent != null && parent.getType() == Token.ASSIGN) {\n          Node assign = parent;\n          Node grandparent = parent.getParent();\n          if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n            grandparent = grandparent.getParent();\n          }\n          if (grandparent != null && grandparent.getType() == Token.VAR) {\n            grandparent = grandparent.getParent();\n          }\n          if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n            // Confirm it's a function expression and not declaration\n            if (assign.getFirstChild().matchesQualifiedName(\n                    NodeUtil.getBestLValueName(assign.getFirstChild()))) {\n              return;\n            }\n          }\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.NAME:\n        if (NodeUtil.isFunctionExpression(n)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP:\n        if (parent != null && NodeUtil.isFunctionExpression(parent) ||\n            parent != null && parent.getType() == Token.SCRIPT) {\n          handleFunctionInputs(n);\n        }\n        break;\n      default:\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..3c4f0a51 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,48 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        // Skip named function expressions: `var foo = function bar() {}`\n+        if (parent != null && parent.getType() == Token.ASSIGN) {\n+          Node assign = parent;\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n+            grandparent = grandparent.getParent();\n+          }\n+          if (grandparent != null && grandparent.getType() == Token.VAR) {\n+            grandparent = grandparent.getParent();\n           }\n+          if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+            // Confirm it's a function expression and not declaration\n+            if (assign.getFirstChild().matchesQualifiedName(\n+                    NodeUtil.getBestLValueName(assign.getFirstChild()))) {\n+              return;\n+            }\n+          }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.NAME:\n+        if (NodeUtil.isFunctionExpression(n)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP:\n+        if (parent != null && NodeUtil.isFunctionExpression(parent) ||\n+            parent != null && parent.getType() == Token.SCRIPT) {\n+          handleFunctionInputs(n);\n+        }\n+        break;\n+      default:\n+        break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}