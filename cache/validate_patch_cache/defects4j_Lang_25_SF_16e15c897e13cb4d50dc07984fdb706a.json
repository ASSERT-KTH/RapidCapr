{
    "patch": "public static String unescape(final String input)\n{\n    final StringBuilder output = new StringBuilder(input.length());\n    final Matcher matcher = escapePattern.matcher(input);\n    int appendPosition = 0;\n    while (matcher.find()) {\n        output.append(input, appendPosition, matcher.start());\n        final char nextChar = input.charAt(matcher.end() - 1);\n        appendPosition = matcher.end();\n        if (nextChar == 't') {\n            output.append('\\t');\n        }\n        else if (nextChar == 'r') {\n            output.append('\\r');\n        }\n        else if (nextChar == 'n') {\n            output.append('\\n');\n        }\n        else if (nextChar == 'f') {\n            output.append('\\f');\n        }\n        else if (nextChar == '\\\\') {\n            output.append('\\\\');\n        }\n        else if (nextChar == '\\'') {\n            output.append('\\'');\n        }\n        else if (nextChar == '\\\"') {\n            output.append('\\\"');\n        }\n        else if (nextChar == 'u') {\n            output.append((char) Integer.parseInt(input.substring(matcher.end(), matcher.end() + 4), 16));\n            appendPosition += 4;\n        } else {\n            throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + nextChar);\n        }\n    }\n    return output.append(input.substring(appendPosition)).toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..0347e3e0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,45 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(final String input)\n+{\n+    final StringBuilder output = new StringBuilder(input.length());\n+    final Matcher matcher = escapePattern.matcher(input);\n+    int appendPosition = 0;\n+    while (matcher.find()) {\n+        output.append(input, appendPosition, matcher.start());\n+        final char nextChar = input.charAt(matcher.end() - 1);\n+        appendPosition = matcher.end();\n+        if (nextChar == 't') {\n+            output.append('\\t');\n+        }\n+        else if (nextChar == 'r') {\n+            output.append('\\r');\n+        }\n+        else if (nextChar == 'n') {\n+            output.append('\\n');\n+        }\n+        else if (nextChar == 'f') {\n+            output.append('\\f');\n+        }\n+        else if (nextChar == '\\\\') {\n+            output.append('\\\\');\n+        }\n+        else if (nextChar == '\\'') {\n+            output.append('\\'');\n+        }\n+        else if (nextChar == '\\\"') {\n+            output.append('\\\"');\n+        }\n+        else if (nextChar == 'u') {\n+            output.append((char) Integer.parseInt(input.substring(matcher.end(), matcher.end() + 4), 16));\n+            appendPosition += 4;\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + nextChar);\n+        }\n+    }\n+    return output.append(input.substring(appendPosition)).toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}