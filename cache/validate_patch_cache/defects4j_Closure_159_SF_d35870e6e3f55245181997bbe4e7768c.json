{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    if (node == null || changed == null) {\n        throw new IllegalArgumentException(\"Node and set cannot be null\");\n    }\n    // Check if the node is a call to a function\n    if (node.isCall()) {\n        Node child = node.getFirstChild();\n        if (child == null || !child.isQualifiedName()) {\n            return; // Invalid call, skip it\n        }\n        changed.add(child.getQualifiedName()); // Add the called function to the changed set\n        // Recursively check the arguments of the call for function calls\n        while ((child = child.getNext()) != null) {\n            findCalledFunctions(child, changed);\n        }\n    } else {\n        // Recursively check all child nodes\n        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n            findCalledFunctions(c, changed);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..da952450 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,28 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n-    }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    if (node == null || changed == null) {\n+        throw new IllegalArgumentException(\"Node and set cannot be null\");\n+    }\n+    // Check if the node is a call to a function\n+    if (node.isCall()) {\n+        Node child = node.getFirstChild();\n+        if (child == null || !child.isQualifiedName()) {\n+            return; // Invalid call, skip it\n+        }\n+        changed.add(child.getQualifiedName()); // Add the called function to the changed set\n+        // Recursively check the arguments of the call for function calls\n+        while ((child = child.getNext()) != null) {\n+            findCalledFunctions(child, changed);\n+        }\n+    } else {\n+        // Recursively check all child nodes\n+        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+            findCalledFunctions(c, changed);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}