{
    "patch": "if (block.isFunction) {\n    // Check assignments in inner function scopes may be executed multiple times.\n    if (block.getParent().equals(ref.getBasicBlock().getParent())) {\n        return false;\n    }\n    BasicBlock currentBlock = block;\n    while (currentBlock != null) {\n        if (currentBlock.isLoop) {\n            return false;\n        }\n        currentBlock = currentBlock.getParent();\n    }\n} else if (block.isLoop) {\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..261455aa 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+    // Check assignments in inner function scopes may be executed multiple times.\n+    if (block.getParent().equals(ref.getBasicBlock().getParent())) {\n+        return false;\n+    }\n+    BasicBlock currentBlock = block;\n+    while (currentBlock != null) {\n+        if (currentBlock.isLoop) {\n+            return false;\n+        }\n+        currentBlock = currentBlock.getParent();\n+    }\n+} else if (block.isLoop) {\n+    return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}