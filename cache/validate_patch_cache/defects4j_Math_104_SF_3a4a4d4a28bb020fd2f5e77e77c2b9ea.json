{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class MyClass {\n\n    public static double[] regularizedGammaP(double a, double xValues[]) {\n\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be > 0\");\n        }\n\n        final double[] rgpValues = new double[xValues.length];\n\n        for (int i = 0; i < xValues.length; i++) {\n\n            if (xValues[i] < 0) {\n                throw new IllegalArgumentException(\"x cannot be negative\");\n            }\n\n            if (MathUtils.equals(a, 1.0)) {\n                rgpValues[i] = 1 - Math.exp(-xValues[i]);\n            } else if (xValues[i] == 0) {\n                rgpValues[i] = 0.0;\n            } else {\n                rgpValues[i] = Gamma.regularizedGammaP(a, xValues[i]);\n            }\n        }\n        return rgpValues;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c144a4a09 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,36 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class MyClass {\n+\n+    public static double[] regularizedGammaP(double a, double xValues[]) {\n+\n+        if (a <= 0) {\n+            throw new IllegalArgumentException(\"a must be > 0\");\n+        }\n+\n+        final double[] rgpValues = new double[xValues.length];\n+\n+        for (int i = 0; i < xValues.length; i++) {\n+\n+            if (xValues[i] < 0) {\n+                throw new IllegalArgumentException(\"x cannot be negative\");\n+            }\n+\n+            if (MathUtils.equals(a, 1.0)) {\n+                rgpValues[i] = 1 - Math.exp(-xValues[i]);\n+            } else if (xValues[i] == 0) {\n+                rgpValues[i] = 0.0;\n+            } else {\n+                rgpValues[i] = Gamma.regularizedGammaP(a, xValues[i]);\n+            }\n+        }\n+        return rgpValues;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}