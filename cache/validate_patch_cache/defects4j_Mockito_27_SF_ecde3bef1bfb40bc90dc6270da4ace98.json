{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        for (int i = 0; i <  factory.getCallbackCount(); i++) {\n            Callback callback = factory.getCallback(i);\n            if (callback instanceof MethodInterceptorFilter) {\n                MethodInterceptorFilter currentFilter = (MethodInterceptorFilter) callback;\n                if (currentFilter.getHandler() == oldMockHandler) {\n                    factory.setCallback(i, newFilter);\n                    return;\n                }\n            }\n        }\n        throw new IllegalStateException(\"Failed to find callback for mock handler: \" + oldMockHandler);\n    } else {\n        throw new IllegalArgumentException(\"Mock object is not a Factory instance.\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..dcd813cf6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        for (int i = 0; i <  factory.getCallbackCount(); i++) {\n+            Callback callback = factory.getCallback(i);\n+            if (callback instanceof MethodInterceptorFilter) {\n+                MethodInterceptorFilter currentFilter = (MethodInterceptorFilter) callback;\n+                if (currentFilter.getHandler() == oldMockHandler) {\n+                    factory.setCallback(i, newFilter);\n+                    return;\n+                }\n+            }\n+        }\n+        throw new IllegalStateException(\"Failed to find callback for mock handler: \" + oldMockHandler);\n+    } else {\n+        throw new IllegalArgumentException(\"Mock object is not a Factory instance.\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}