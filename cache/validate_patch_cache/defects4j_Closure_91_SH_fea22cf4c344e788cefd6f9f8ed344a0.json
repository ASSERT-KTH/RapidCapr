{
    "patch": "  /**\n   * Returns whether the given node is a function lent to a prototype.\n   *\n   * <p>This is a slight variation on {@link NodeUtil#isPrototypeProperty}\n   * that needs to work on nodes that aren't necessarily in the AST,\n   * as well as to avoid overparsing object literal keys.\n   *\n   * @return Whether `node` is an AST node representing an expression\n   *  that's equivalent to something like `Foo.prototype.method`.\n   */\n  private boolean isLendAssignment(Node node, Node parent) {\n    if (parent == null || !NodeUtil.isAssignmentOp(parent)) {\n      return false;\n    }\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n    return rhs == node && NodeUtil.isGet(lhs) &&\n        lhs.getLastChild().getString().equals(\"prototype\");\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fac670bf 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,25 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  /**\n+   * Returns whether the given node is a function lent to a prototype.\n+   *\n+   * <p>This is a slight variation on {@link NodeUtil#isPrototypeProperty}\n+   * that needs to work on nodes that aren't necessarily in the AST,\n+   * as well as to avoid overparsing object literal keys.\n+   *\n+   * @return Whether `node` is an AST node representing an expression\n+   *  that's equivalent to something like `Foo.prototype.method`.\n+   */\n+  private boolean isLendAssignment(Node node, Node parent) {\n+    if (parent == null || !NodeUtil.isAssignmentOp(parent)) {\n+      return false;\n+    }\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+    return rhs == node && NodeUtil.isGet(lhs) &&\n+        lhs.getLastChild().getString().equals(\"prototype\");\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}