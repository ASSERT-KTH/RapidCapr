{
    "patch": "public static boolean containsAny(CharSequence cs, char... searchChars) {\n    if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (ch > Character.MAX_VALUE) {\n            i++;  // skip high surrogate\n            if (i <= csLast && Character.isLowSurrogate(cs.charAt(i))) {\n                ch = Character.toCodePoint(cs.charAt(i - 1), cs.charAt(i));\n            } else {\n                // invalid surrogate pair\n                continue;\n            }\n        }\n        for (int j = 0; j < searchLength; j++) {\n            char searchChar = searchChars[j];\n            if (searchChar > Character.MAX_VALUE) {\n                if (j == searchLast || !Character.isSurrogate(searchChars[j + 1])) {\n                    // invalid surrogate pair\n                    continue;\n                }\n                searchChar = Character.toCodePoint(searchChar, searchChars[++j]);\n            }\n            if (ch == searchChar) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e7319ec0 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence cs, char... searchChars) {\n+    if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {\n+        return false;\n+    }\n+    int csLength = cs.length();\n+    int searchLength = searchChars.length;\n+    int csLast = csLength - 1;\n+    int searchLast = searchLength - 1;\n+    for (int i = 0; i < csLength; i++) {\n+        char ch = cs.charAt(i);\n+        if (ch > Character.MAX_VALUE) {\n+            i++;  // skip high surrogate\n+            if (i <= csLast && Character.isLowSurrogate(cs.charAt(i))) {\n+                ch = Character.toCodePoint(cs.charAt(i - 1), cs.charAt(i));\n+            } else {\n+                // invalid surrogate pair\n+                continue;\n+            }\n+        }\n+        for (int j = 0; j < searchLength; j++) {\n+            char searchChar = searchChars[j];\n+            if (searchChar > Character.MAX_VALUE) {\n+                if (j == searchLast || !Character.isSurrogate(searchChars[j + 1])) {\n+                    // invalid surrogate pair\n+                    continue;\n+                }\n+                searchChar = Character.toCodePoint(searchChar, searchChars[++j]);\n+            }\n+            if (ch == searchChar) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}