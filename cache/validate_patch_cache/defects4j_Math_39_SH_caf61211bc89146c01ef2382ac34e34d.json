{
    "patch": "stepSize = hNew;\nif (!isLastStep) {\n    // prepare next step\n    final double  factor           = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n    final double  scaledH          = stepSize * factor;\n    final double  nextT            = stepStart + scaledH;\n    final boolean nextIsLast       = forward ? (nextT >= t) : (nextT <= t);\n    hNew = filterStep(scaledH, forward, nextIsLast);\n    final double  filteredNextT    = stepStart + hNew;\n    final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);\n    if (filteredNextIsLast) {\n        hNew = t - stepStart;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..5c04ed739 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,20 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+stepSize = hNew;\n+if (!isLastStep) {\n+    // prepare next step\n+    final double  factor           = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n+    final double  scaledH          = stepSize * factor;\n+    final double  nextT            = stepStart + scaledH;\n+    final boolean nextIsLast       = forward ? (nextT >= t) : (nextT <= t);\n+    hNew = filterStep(scaledH, forward, nextIsLast);\n+    final double  filteredNextT    = stepStart + hNew;\n+    final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);\n+    if (filteredNextIsLast) {\n+        hNew = t - stepStart;\n+    }\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "org.apache.commons.math.exception.NumberIsTooSmallException: minimal step size (9.65E-01) reached, integration needs 1.25E00",
    "test_result": "FAIL"
}