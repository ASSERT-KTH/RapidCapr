{
    "patch": "            int length = text.length() - position;\n            if (length == 0) {\n                return ~position;\n            }\n            if (length >= 2 && text.charAt(position) == 'Z') {\n                bucket.setZone(DateTimeZone.UTC);\n                return position + 1;\n            }\n            if (length >= 3 && text.charAt(position) == '+') {\n                bucket.setZone(parseOffset(text, position+1));\n                return position + 6;\n            }\n            if (length >= 3 && text.charAt(position) == '-') {\n                bucket.setZone(parseOffset(text, position+1));\n                return position + 6;\n            }\n            // Try each \"PST\", \"PDT\", \"MST\", \"MDT\", \"CST\", \"CDT\", \"EST\", \"EDT\",\n            // \"PST8PDT\", \"MST7MDT\", \"CST6CDT\", \"EST5EDT\".\n            for (String id : ALL_IDS) {\n                if (text.regionMatches(true, position, id, 0, id.length())) {\n                    DateTimeZone tz = DateTimeZone.forID(id);\n                    bucket.setZone(tz);\n                    return position + id.length();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..70f85af5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,29 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n+            int length = text.length() - position;\n+            if (length == 0) {\n+                return ~position;\n+            }\n+            if (length >= 2 && text.charAt(position) == 'Z') {\n+                bucket.setZone(DateTimeZone.UTC);\n+                return position + 1;\n+            }\n+            if (length >= 3 && text.charAt(position) == '+') {\n+                bucket.setZone(parseOffset(text, position+1));\n+                return position + 6;\n+            }\n+            if (length >= 3 && text.charAt(position) == '-') {\n+                bucket.setZone(parseOffset(text, position+1));\n+                return position + 6;\n+            }\n+            // Try each \"PST\", \"PDT\", \"MST\", \"MDT\", \"CST\", \"CDT\", \"EST\", \"EDT\",\n+            // \"PST8PDT\", \"MST7MDT\", \"CST6CDT\", \"EST5EDT\".\n             for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n+                if (text.regionMatches(true, position, id, 0, id.length())) {\n+                    DateTimeZone tz = DateTimeZone.forID(id);\n+                    bucket.setZone(tz);\n                     return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}