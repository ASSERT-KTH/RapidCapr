{
    "patch": "    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == denominator) {\n            return Fraction.getFraction(numerator / denominator, 1);\n        } else if (gcd == 1) {\n            return this;\n        } else {\n\t    int reducedNumerator = numerator / gcd;\n\t    int reducedDenominator = denominator / gcd;\n\t    return new Fraction(reducedNumerator, reducedDenominator);\n\t}\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..cfc9ba06 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -464,10 +464,15 @@ public final class Fraction extends Number implements Comparable {\n      */\n     public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n+        if (gcd == denominator) {\n+            return Fraction.getFraction(numerator / denominator, 1);\n+        } else if (gcd == 1) {\n             return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        } else {\n+\t    int reducedNumerator = numerator / gcd;\n+\t    int reducedDenominator = denominator / gcd;\n+\t    return new Fraction(reducedNumerator, reducedDenominator);\n+\t}\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<0/1> was not:<0/1>",
    "test_result": "FAIL"
}