{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int maxDay = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n        int minDay = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(instant);\n        int newValue = values[fieldIndex] + valueToAdd;\n        if (newValue <= maxDay && newValue >= minDay) {\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newValue);\n            return iChronology.get(partial, instant);\n        } else {\n            // determine the type of overflow, either up or down\n            int overflow = newValue > maxDay ? 1 : -1;\n            // get the excess amount to add or subtract from months\n            int excess = overflow * (newValue - maxDay);\n            // add or subtract excess to months and wrap around years if necessary\n            int[] extendedValues = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                if (i == fieldIndex) {\n                    extendedValues[i] = maxDay;\n                } else {\n                    extendedValues[i] = values[i];\n                }\n            }\n            long extendedInstant = 0L;\n            for (int i = 0; i < partial.size(); i++) {\n                if (iChronology.year().equals(partial.getFieldType(i)) &&\n                        partial.getValue(i) + overflow < iChronology.year().getMinimumValue() &&\n                        partial.getValue(i) + overflow > iChronology.year().getMaximumValue()) {\n                    extendedValues[i] = iChronology.year().getMinimumValue();\n                    excess++;\n                } else {\n                    extendedValues[i] = partial.getValue(i) + overflow;\n                }\n                extendedInstant = partial.getFieldType(i).getField(iChronology).set(extendedInstant, extendedValues[i]);\n            }\n            return add(extendedInstant, excess);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b5b6c881 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,56 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        int maxDay = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n+        int minDay = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(instant);\n+        int newValue = values[fieldIndex] + valueToAdd;\n+        if (newValue <= maxDay && newValue >= minDay) {\n+            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newValue);\n             return iChronology.get(partial, instant);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // determine the type of overflow, either up or down\n+            int overflow = newValue > maxDay ? 1 : -1;\n+            // get the excess amount to add or subtract from months\n+            int excess = overflow * (newValue - maxDay);\n+            // add or subtract excess to months and wrap around years if necessary\n+            int[] extendedValues = new int[values.length];\n+            for (int i = 0; i < values.length; i++) {\n+                if (i == fieldIndex) {\n+                    extendedValues[i] = maxDay;\n+                } else {\n+                    extendedValues[i] = values[i];\n+                }\n+            }\n+            long extendedInstant = 0L;\n+            for (int i = 0; i < partial.size(); i++) {\n+                if (iChronology.year().equals(partial.getFieldType(i)) &&\n+                        partial.getValue(i) + overflow < iChronology.year().getMinimumValue() &&\n+                        partial.getValue(i) + overflow > iChronology.year().getMaximumValue()) {\n+                    extendedValues[i] = iChronology.year().getMinimumValue();\n+                    excess++;\n+                } else {\n+                    extendedValues[i] = partial.getValue(i) + overflow;\n+                }\n+                extendedInstant = partial.getFieldType(i).getField(iChronology).set(extendedInstant, extendedValues[i]);\n+            }\n+            return add(extendedInstant, excess);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}