{
    "patch": "if (!Character.isLetterOrDigit(ch3) || !Character.isLetterOrDigit(ch4)) {\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\nif (len == 5) {\n    return new Locale(str.substring(0, 2), str.substring(3, 5));\n} else {\n    if (str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String variant = str.substring(6);\n    if (variant.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 6) {\n        return new Locale(str.substring(0, 2), str.substring(3, 5), variant);\n    } else {\n        if (!Character.isLetterOrDigit(str.charAt(6))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        int pos = 7;\n        while (pos < len) {\n            if (str.charAt(pos) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            pos++;\n            int nextPos = pos;\n            while (nextPos < len && Character.isLetterOrDigit(str.charAt(nextPos))) {\n                nextPos++;\n            }\n            String part = str.substring(pos, nextPos);\n            if (part.isEmpty()) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            pos = nextPos;\n            if (pos < len && (pos + 1 < len || str.charAt(pos) != '_')) {\n                pos++;\n            }\n            variant = variant.isEmpty() ? part : part + \"_\" + variant;\n        }\n        return new Locale(str.substring(0, 2), str.substring(3, 5), variant);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..b7bd35e3 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,48 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+if (!Character.isLetterOrDigit(ch3) || !Character.isLetterOrDigit(ch4)) {\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+if (len == 5) {\n+    return new Locale(str.substring(0, 2), str.substring(3, 5));\n+} else {\n+    if (str.charAt(5) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String variant = str.substring(6);\n+    if (variant.isEmpty()) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 6) {\n+        return new Locale(str.substring(0, 2), str.substring(3, 5), variant);\n+    } else {\n+        if (!Character.isLetterOrDigit(str.charAt(6))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        int pos = 7;\n+        while (pos < len) {\n+            if (str.charAt(pos) != '_') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            pos++;\n+            int nextPos = pos;\n+            while (nextPos < len && Character.isLetterOrDigit(str.charAt(nextPos))) {\n+                nextPos++;\n+            }\n+            String part = str.substring(pos, nextPos);\n+            if (part.isEmpty()) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            pos = nextPos;\n+            if (pos < len && (pos + 1 < len || str.charAt(pos) != '_')) {\n+                pos++;\n+            }\n+            variant = variant.isEmpty() ? part : part + \"_\" + variant;\n+        }\n+        return new Locale(str.substring(0, 2), str.substring(3, 5), variant);\n+    }\n+}\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}