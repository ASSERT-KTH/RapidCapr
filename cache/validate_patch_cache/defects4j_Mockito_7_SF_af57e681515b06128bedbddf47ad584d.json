{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    // Extract any types that this type variable is bounded by\n    for (Type bound : typeVariable.getBounds()) {\n        // Ignore any raw types\n        if (!(bound instanceof Class) || !((Class<?>) bound).isRawType()) {\n            registerTypeVariablesOn(bound);\n        }\n    }\n\n    // Extract the actual type argument for this type variable\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n\n    // Ignore any raw types\n    if (!(actualTypeArgument instanceof Class) || !((Class<?>) actualTypeArgument).isRawType()) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1f8afc68d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    // Extract any types that this type variable is bounded by\n+    for (Type bound : typeVariable.getBounds()) {\n+        // Ignore any raw types\n+        if (!(bound instanceof Class) || !((Class<?>) bound).isRawType()) {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+\n+    // Extract the actual type argument for this type variable\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+\n+    // Ignore any raw types\n+    if (!(actualTypeArgument instanceof Class) || !((Class<?>) actualTypeArgument).isRawType()) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}