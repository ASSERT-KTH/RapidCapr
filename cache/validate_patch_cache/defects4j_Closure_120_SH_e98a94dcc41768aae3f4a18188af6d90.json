{
    "patch": "      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      int count = 1;\n      String varName = ref.getName();\n      for (Reference reference : references) {\n        if (reference.isDeclaration() &&\n            reference.getName().equals(varName) &&\n            reference != ref) {\n          return false;\n        }\n\n        if (reference.isAssignmentToName(varName) && reference != ref) {\n          count++;\n        }\n      }\n\n      if (count > 1) {\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..79e2b211 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,39 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      int count = 1;\n+      String varName = ref.getName();\n+      for (Reference reference : references) {\n+        if (reference.isDeclaration() &&\n+            reference.getName().equals(varName) &&\n+            reference != ref) {\n+          return false;\n+        }\n+\n+        if (reference.isAssignmentToName(varName) && reference != ref) {\n+          count++;\n+        }\n+      }\n+\n+      if (count > 1) {\n+        return false;\n+      }\n+\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}