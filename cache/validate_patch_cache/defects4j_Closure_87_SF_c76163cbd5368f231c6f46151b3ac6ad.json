{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      // Get the first (and only) child of the BLOCK node.\n      Node maybeExpr = n.getFirstChild();\n\n      // If the child is an EXPR_RESULT node, check whether its child is a function call without arguments.\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node call = maybeExpr.getFirstChild();\n        if (call.getType() == Token.CALL && call.hasOneChild() && call.getFirstChild().getType() == Token.NAME) {\n          String functionName = call.getFirstChild().getString();\n          if (functionName.startsWith(\"on\")) {\n            return false;\n          }\n\n          // Check if the function call has arguments.\n          if (call.getNext() != null) {\n            return false;\n          }\n\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        // Otherwise, check if the child node is an expression node.\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..6f96f301 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,40 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      // Get the first (and only) child of the BLOCK node.\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // If the child is an EXPR_RESULT node, check whether its child is a function call without arguments.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node call = maybeExpr.getFirstChild();\n+        if (call.getType() == Token.CALL && call.hasOneChild() && call.getFirstChild().getType() == Token.NAME) {\n+          String functionName = call.getFirstChild().getString();\n+          if (functionName.startsWith(\"on\")) {\n+            return false;\n+          }\n+\n+          // Check if the function call has arguments.\n+          if (call.getNext() != null) {\n+            return false;\n+          }\n+\n+          return true;\n+        } else {\n+          return false;\n+        }\n+      } else {\n+        // Otherwise, check if the child node is an expression node.\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}