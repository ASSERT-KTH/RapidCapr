{
    "patch": "    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n            // avoid infinte recursive calls leading to StackOverflowError\n            // if getOffset() keeps returning a new adjustment\n            return offsetAdjusted;\n        } else if (nextLocal != nextAdjusted) {\n            if (offsetLocal < 0 && offsetAdjusted >= 0 && instantAdjusted + offsetAdjusted >= 0) {\n                return getOffset(instantAdjusted + offsetAdjusted);\n            } else {\n                long nextAdjustedLocal = nextTransition(nextLocal - offsetLocal);\n                if (nextAdjustedLocal == instantLocal || (nextAdjustedLocal > instantLocal && nextLocal > instantLocal - offsetAdjusted)) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..572696e6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n+            // avoid infinte recursive calls leading to StackOverflowError\n+            // if getOffset() keeps returning a new adjustment\n+            return offsetAdjusted;\n+        } else if (nextLocal != nextAdjusted) {\n+            if (offsetLocal < 0 && offsetAdjusted >= 0 && instantAdjusted + offsetAdjusted >= 0) {\n+                return getOffset(instantAdjusted + offsetAdjusted);\n+            } else {\n+                long nextAdjustedLocal = nextTransition(nextLocal - offsetLocal);\n+                if (nextAdjustedLocal == instantLocal || (nextAdjustedLocal > instantLocal && nextLocal > instantLocal - offsetAdjusted)) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        }\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}