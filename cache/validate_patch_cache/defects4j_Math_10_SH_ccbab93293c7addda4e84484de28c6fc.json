{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    // special cases for NaNs\n    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n    for (int i = 1; i < result.length; i++) {\n        result[resultOffset + i] = result[resultOffset];\n    }\n} else if (Double.isInfinite(result[resultOffset])) {\n    // special cases for infinities\n    double v;\n    if (x[xOffset] == 0) {\n        // special cases for y = 0\n        v = y[yOffset] == 0 ? 0.0 : (FastMath.copySign(FastMath.PI / 2, y[yOffset]));\n    } else if (Double.isInfinite(y[yOffset])) {\n        // special cases for x = +/-inf\n        v = ((y[yOffset] > 0) ^ (x[xOffset] > 0)) ? FastMath.PI / 2 : -FastMath.PI / 2;\n    } else if ((Double.doubleToLongBits(1.0d + y[yOffset] / x[xOffset]) & 0xFFFFFFFF00000000L) == 0) {\n        // special cases for y / x = +/-0\n        v = (x[xOffset] >= 0.0d) ? 0.0d : FastMath.copySign(FastMath.PI, y[yOffset]);\n    } else if ((x[xOffset] > 0.0d) && (y[yOffset] > 0.0d)) {\n        // 0 < x < +inf, 0 < y < +inf: 0 < atan2() < pi/2\n        double d = y[yOffset] / x[xOffset];\n        v = FastMath.atan(d);\n    } else if ((x[xOffset] > 0.0d) && (y[yOffset] < 0.0d)) {\n        // 0 < x < +inf, -inf < y < 0: -pi/2 < atan2() < 0\n        double d = y[yOffset] / x[xOffset];\n        v = FastMath.atan(d);\n    } else if ((x[xOffset] < 0.0d) && (y[yOffset] > 0.0d)) {\n        // -inf < x < 0, 0 < y < +inf: +pi > atan2() > pi/2\n        double d = y[yOffset] / x[xOffset];\n        v = FastMath.atan(d) + FastMath.PI;\n    } else if ((x[xOffset] < 0.0d) && (y[yOffset] < 0.0d)) {\n        // -inf < x < 0, -inf < y < 0: -pi < atan2() < -pi/2\n        double d = y[yOffset] / x[xOffset];\n        v = FastMath.atan(d) - FastMath.PI;\n    } else {\n        v = 0.0d;\n    }\n\n    for (int i = 0; i < result.length; i++) {\n        result[resultOffset + i] = v;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..aff7ad52e 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,48 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    // special cases for NaNs\n+    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n+    for (int i = 1; i < result.length; i++) {\n+        result[resultOffset + i] = result[resultOffset];\n+    }\n+} else if (Double.isInfinite(result[resultOffset])) {\n+    // special cases for infinities\n+    double v;\n+    if (x[xOffset] == 0) {\n+        // special cases for y = 0\n+        v = y[yOffset] == 0 ? 0.0 : (FastMath.copySign(FastMath.PI / 2, y[yOffset]));\n+    } else if (Double.isInfinite(y[yOffset])) {\n+        // special cases for x = +/-inf\n+        v = ((y[yOffset] > 0) ^ (x[xOffset] > 0)) ? FastMath.PI / 2 : -FastMath.PI / 2;\n+    } else if ((Double.doubleToLongBits(1.0d + y[yOffset] / x[xOffset]) & 0xFFFFFFFF00000000L) == 0) {\n+        // special cases for y / x = +/-0\n+        v = (x[xOffset] >= 0.0d) ? 0.0d : FastMath.copySign(FastMath.PI, y[yOffset]);\n+    } else if ((x[xOffset] > 0.0d) && (y[yOffset] > 0.0d)) {\n+        // 0 < x < +inf, 0 < y < +inf: 0 < atan2() < pi/2\n+        double d = y[yOffset] / x[xOffset];\n+        v = FastMath.atan(d);\n+    } else if ((x[xOffset] > 0.0d) && (y[yOffset] < 0.0d)) {\n+        // 0 < x < +inf, -inf < y < 0: -pi/2 < atan2() < 0\n+        double d = y[yOffset] / x[xOffset];\n+        v = FastMath.atan(d);\n+    } else if ((x[xOffset] < 0.0d) && (y[yOffset] > 0.0d)) {\n+        // -inf < x < 0, 0 < y < +inf: +pi > atan2() > pi/2\n+        double d = y[yOffset] / x[xOffset];\n+        v = FastMath.atan(d) + FastMath.PI;\n+    } else if ((x[xOffset] < 0.0d) && (y[yOffset] < 0.0d)) {\n+        // -inf < x < 0, -inf < y < 0: -pi < atan2() < -pi/2\n+        double d = y[yOffset] / x[xOffset];\n+        v = FastMath.atan(d) - FastMath.PI;\n+    } else {\n+        v = 0.0d;\n+    }\n+\n+    for (int i = 0; i < result.length; i++) {\n+        result[resultOffset + i] = v;\n+    }\n+}\n \n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}