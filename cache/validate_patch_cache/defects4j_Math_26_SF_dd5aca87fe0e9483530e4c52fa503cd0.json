{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n    long[] num = {0, 1};\n    long[] denom = {1, 0};\n    double[] convergents = new double[maxIterations + 2];\n    convergents[0] = FastMath.floor(value);\n    double r = value - convergents[0];\n    convergents[1] = 1d;\n    int n = 1;\n    while (true) {\n        n++;\n        if (n > maxIterations) {\n            break;\n        }\n        double a = FastMath.floor(r);\n        convergents[n] = a * convergents[n - 1] + convergents[n - 2];\n        if (convergents[n] > Integer.MAX_VALUE || convergents[n] < Integer.MIN_VALUE) {\n            break;\n        }\n        long tmp = num[1];\n        num[1] = num[0] + a * num[1];\n        num[0] = tmp;\n        tmp = denom[1];\n        denom[1] = denom[0] + a * denom[1];\n        denom[0] = tmp;\n        double diff = FastMath.abs(value - convergents[n] / convergents[n - 1]);\n        if (diff < epsilon || convergents[n] >= maxDenominator || FastMath.abs(convergents[n]) > Integer.MAX_VALUE) {\n                break;\n        }\n        r = 1.0 / (r - a);\n    }\n    this.numerator = (int) num[1];\n    this.denominator = (int) denom[1];\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..cc7b0d6aa 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,70 +172,39 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n+    long[] num = {0, 1};\n+    long[] denom = {1, 0};\n+    double[] convergents = new double[maxIterations + 2];\n+    convergents[0] = FastMath.floor(value);\n+    double r = value - convergents[0];\n+    convergents[1] = 1d;\n+    int n = 1;\n+    while (true) {\n+        n++;\n+        if (n > maxIterations) {\n+            break;\n         }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n+        double a = FastMath.floor(r);\n+        convergents[n] = a * convergents[n - 1] + convergents[n - 2];\n+        if (convergents[n] > Integer.MAX_VALUE || convergents[n] < Integer.MIN_VALUE) {\n+            break;\n         }\n-\n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n-\n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n-\n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+        long tmp = num[1];\n+        num[1] = num[0] + a * num[1];\n+        num[0] = tmp;\n+        tmp = denom[1];\n+        denom[1] = denom[0] + a * denom[1];\n+        denom[0] = tmp;\n+        double diff = FastMath.abs(value - convergents[n] / convergents[n - 1]);\n+        if (diff < epsilon || convergents[n] >= maxDenominator || FastMath.abs(convergents[n]) > Integer.MAX_VALUE) {\n+                break;\n         }\n-\n+        r = 1.0 / (r - a);\n     }\n+    this.numerator = (int) num[1];\n+    this.denominator = (int) denom[1];\n+}\n \n     /**\n      * Create a fraction from an int.",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}