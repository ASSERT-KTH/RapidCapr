{
    "patch": "public <T> T resetMock(T mock) {\n    org.mockito.Mockito.reset(mock); // reset the mock object\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); \n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); // create a new mock handler\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \n            (MockSettingsImpl)org.mockito.Mockito.withSettings()\n                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)); // create a new method interceptor filter\n    MockAccess mockAccess = Mockito.mockingDetails(mock).getMockAccess(); // create a new MockAccess object\n    mockAccess.setMockitoInterceptor(0, newFilter); // set the new callback\n    return mock;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8aa9fa625 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,18 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> T resetMock(T mock) {\n+    org.mockito.Mockito.reset(mock); // reset the mock object\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); \n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); // create a new mock handler\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \n+            (MockSettingsImpl)org.mockito.Mockito.withSettings()\n+                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)); // create a new method interceptor filter\n+    MockAccess mockAccess = Mockito.mockingDetails(mock).getMockAccess(); // create a new MockAccess object\n+    mockAccess.setMockitoInterceptor(0, newFilter); // set the new callback\n+    return mock;\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}