{
    "patch": "      // Make sure this assignment is not in a loop or function that is not at the top level.\n      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          if (block.getParent() != null) {\n            // The assignment is inside a function that is not in the global scope.\n            // The variable may be reassigned in a subsequent invocation.\n            return false;\n          }\n          break;\n        } else if (block.isLoop) {\n          // The block has a loop statement; any change to this variable might\n          // be repeated in subsequent iterations.\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..19d2b445 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop or function that is not at the top level.\n+      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          if (block.getParent() != null) {\n+            // The assignment is inside a function that is not in the global scope.\n+            // The variable may be reassigned in a subsequent invocation.\n+            return false;\n+          }\n+          break;\n+        } else if (block.isLoop) {\n+          // The block has a loop statement; any change to this variable might\n+          // be repeated in subsequent iterations.\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}