{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n        return;\n    }\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            readTypeVariables((TypeVariable<?>) type);\n        }\n        registerTypeVariablesOn(type);\n    }\n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n}\n\nprivate void readTypeVariables(TypeVariable<?> typeVar) {\n    Type[] bounds = typeVar.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(getActualTypeArgumentFor(typeVar));\n        return;\n    }\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            readTypeVariables((TypeVariable<?>) type);\n        }\n        registerTypeVariablesOn(type);\n    }\n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVar));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..287b15ca6 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,36 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+        return;\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariables((TypeVariable<?>) type);\n+        }\n+        registerTypeVariablesOn(type);\n+    }\n+    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+}\n+\n+private void readTypeVariables(TypeVariable<?> typeVar) {\n+    Type[] bounds = typeVar.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(getActualTypeArgumentFor(typeVar));\n+        return;\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariables((TypeVariable<?>) type);\n+        }\n+        registerTypeVariablesOn(type);\n+    }\n+    registerTypeVariablesOn(getActualTypeArgumentFor(typeVar));\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}