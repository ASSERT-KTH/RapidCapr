{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrtD = MatrixUtils.createRealMatrix(dec.getRealEigenvalues().length, dec.getRealEigenvalues().length);\n    for (int i = 0; i < dec.getRealEigenvalues().length; i++) {\n        sqrtD.setEntry(i, i, Math.sqrt(dec.getRealEigenvalues()[i]));\n    }\n    RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e55202179 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrtD = MatrixUtils.createRealMatrix(dec.getRealEigenvalues().length, dec.getRealEigenvalues().length);\n+    for (int i = 0; i < dec.getRealEigenvalues().length; i++) {\n+        sqrtD.setEntry(i, i, Math.sqrt(dec.getRealEigenvalues()[i]));\n     }\n+    RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}