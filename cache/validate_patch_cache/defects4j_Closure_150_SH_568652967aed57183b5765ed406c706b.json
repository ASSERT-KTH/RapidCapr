{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      if (NodeUtil.isFunctionObjectCall(n)) {\n        String name = NodeUtil.getFunctionObjectName(n);\n        ObjectType otype = ObjectType.fromAnnotation(getJSTypeRegistry().getType(\"Object\"));\n        JSType.FunctionType ftype = otype.getOwnPropertyType(name).getFunType();\n        if (ftype != null) {\n          addTypesToScope(n, ftype);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..10b8f900 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1463,6 +1463,13 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+      if (NodeUtil.isFunctionObjectCall(n)) {\n+        String name = NodeUtil.getFunctionObjectName(n);\n+        ObjectType otype = ObjectType.fromAnnotation(getJSTypeRegistry().getType(\"Object\"));\n+        JSType.FunctionType ftype = otype.getOwnPropertyType(name).getFunType();\n+        if (ftype != null) {\n+          addTypesToScope(n, ftype);\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}