{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node child = n.getFirstChild();\n    if (child != null && isSimpleExpression(child)) {\n      Node parent = n.getParent();\n      if (parent != null) {\n        int parentType = parent.getType();\n        if (parentType == Token.RETURN\n          || (parentType == Token.EXPR_RESULT && n == parent.getFirstChild())\n          || (parentType == Token.VAR && n.hasOneChild())\n          || (parentType == Token.ASSIGN && n == parent.getFirstChild())) {\n          // Cases where it is safe to fold the child expression into its parent.\n          return true;\n        } else if (parentType == Token.IF) {\n          // Check if the block is the condition of an if statement.\n          Node grandparent = parent.getParent();\n          if (grandparent != null) {\n            int grandparentType = grandparent.getType();\n            if (grandparentType == Token.IF) {\n              Node firstChild = grandparent.getFirstChild();\n              if (firstChild == parent && n == child) {\n                // Blocks for the condition expression of a nested if expression.\n                return true;\n              }\n            } else if (grandparentType == Token.HOOK) {\n              Node firstChild = grandparent.getFirstChild();\n              if (firstChild == parent && n == child) {\n                // Blocks for the condition expression of a ternary operation.\n                return true;\n              }\n            }\n          }\n        } else if (parentType == Token.FOR\n          || parentType == Token.WHILE\n          || parentType == Token.DO) {\n          // Do not fold if the block is used as the loop or conditional test.\n          Node firstChild = parent.getFirstChild();\n          if (firstChild == n) {\n            return false;\n          }\n        } else if (parentType == Token.BLOCK) {\n          Node grandparent = parent.getParent();\n          if (grandparent != null) {\n            int grandparentType = grandparent.getType();\n            if (grandparentType == Token.EXPR_RESULT && child.getNext() == null) {\n              //If BLOCK is an only child of EXPR_RESULT, it is foldable.\n              return true;\n            } else if (grandparentType == Token.WHILE\n              || grandparentType == Token.FOR\n              || grandparentType == Token.DO\n              || grandparentType == Token.IF\n              || grandparentType == Token.HOOK\n              || grandparentType == Token.SCRIPT) {\n              // Blocks that are directly contained in certain constructs have ambiguous positions.\n              // For instance, it is dangerous to fold an expression block that is directly in the loop condition.\n              // See https://github.com/google/closure-compiler/issues/2876 for more context.\n              return !NodeUtil.isConditionalControlStructure(grandparent);\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isSimpleExpression(Node n) {\n  int type = n.getType();\n  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..cadcc90f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,77 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node child = n.getFirstChild();\n+    if (child != null && isSimpleExpression(child)) {\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        int parentType = parent.getType();\n+        if (parentType == Token.RETURN\n+          || (parentType == Token.EXPR_RESULT && n == parent.getFirstChild())\n+          || (parentType == Token.VAR && n.hasOneChild())\n+          || (parentType == Token.ASSIGN && n == parent.getFirstChild())) {\n+          // Cases where it is safe to fold the child expression into its parent.\n+          return true;\n+        } else if (parentType == Token.IF) {\n+          // Check if the block is the condition of an if statement.\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null) {\n+            int grandparentType = grandparent.getType();\n+            if (grandparentType == Token.IF) {\n+              Node firstChild = grandparent.getFirstChild();\n+              if (firstChild == parent && n == child) {\n+                // Blocks for the condition expression of a nested if expression.\n+                return true;\n+              }\n+            } else if (grandparentType == Token.HOOK) {\n+              Node firstChild = grandparent.getFirstChild();\n+              if (firstChild == parent && n == child) {\n+                // Blocks for the condition expression of a ternary operation.\n+                return true;\n+              }\n+            }\n+          }\n+        } else if (parentType == Token.FOR\n+          || parentType == Token.WHILE\n+          || parentType == Token.DO) {\n+          // Do not fold if the block is used as the loop or conditional test.\n+          Node firstChild = parent.getFirstChild();\n+          if (firstChild == n) {\n+            return false;\n+          }\n+        } else if (parentType == Token.BLOCK) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null) {\n+            int grandparentType = grandparent.getType();\n+            if (grandparentType == Token.EXPR_RESULT && child.getNext() == null) {\n+              //If BLOCK is an only child of EXPR_RESULT, it is foldable.\n+              return true;\n+            } else if (grandparentType == Token.WHILE\n+              || grandparentType == Token.FOR\n+              || grandparentType == Token.DO\n+              || grandparentType == Token.IF\n+              || grandparentType == Token.HOOK\n+              || grandparentType == Token.SCRIPT) {\n+              // Blocks that are directly contained in certain constructs have ambiguous positions.\n+              // For instance, it is dangerous to fold an expression block that is directly in the loop condition.\n+              // See https://github.com/google/closure-compiler/issues/2876 for more context.\n+              return !NodeUtil.isConditionalControlStructure(grandparent);\n+            }\n+          }\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n+\n+private boolean isSimpleExpression(Node n) {\n+  int type = n.getType();\n+  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n+      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}