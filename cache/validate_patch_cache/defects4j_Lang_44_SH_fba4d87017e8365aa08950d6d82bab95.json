{
    "patch": "if (val.length() == 0) {\n    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n}\nif (val.startsWith(\"--\")) {\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear \n    // to be in specification of class. OS X Java parses it to \n    // a wrong value.\n    return null;\n}\nif (val.charAt(0) == '+' || val.charAt(0) == '-') {\n    if (val.length() == 1) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    for (int i = 1; i < val.length(); i++) {\n        if (!Character.isDigit(val.charAt(i))) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"0X\")) {\n        return createInteger(val);\n    }\n    try {\n        return createLong(val);\n    } catch (NumberFormatException nfe) {\n        return createBigInteger(val);\n    }\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n    return createInteger(val);\n}\nfor (int i = 0; i < val.length(); i++) {\n    if (!Character.isDigit(val.charAt(i))) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n}\ntry {\n    return createLong(val);\n} catch (NumberFormatException nfe) {\n    return createBigInteger(val);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..f6d9a39e 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,47 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.length() == 0) {\n+    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+}\n+if (val.startsWith(\"--\")) {\n+    // this is protection for poorness in java.lang.BigDecimal.\n+    // it accepts this as a legal value, but it does not appear \n+    // to be in specification of class. OS X Java parses it to \n+    // a wrong value.\n+    return null;\n+}\n+if (val.charAt(0) == '+' || val.charAt(0) == '-') {\n+    if (val.length() == 1) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    for (int i = 1; i < val.length(); i++) {\n+        if (!Character.isDigit(val.charAt(i))) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+    }\n+    if (val.startsWith(\"0x\") || val.startsWith(\"0X\")) {\n+        return createInteger(val);\n+    }\n+    try {\n+        return createLong(val);\n+    } catch (NumberFormatException nfe) {\n+        return createBigInteger(val);\n+    }\n+}\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+    return createInteger(val);\n+}\n+for (int i = 0; i < val.length(); i++) {\n+    if (!Character.isDigit(val.charAt(i))) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+}\n+try {\n+    return createLong(val);\n+} catch (NumberFormatException nfe) {\n+    return createBigInteger(val);\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}