{
    "patch": "        Node addition;\n        if (!NodeUtil.mayHaveSideEffects(value) && !value.isFunction() && \n            (value.isString() || value.isNumber())) {\n          addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n        } else {\n          addition = IR.add(IR.string(\"\").srcref(callTarget))\n              .srcref(n);\n          addition.addChildToBack(value.detachFromParent());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..cb2e6797 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,17 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+        Node addition;\n+        if (!NodeUtil.mayHaveSideEffects(value) && !value.isFunction() && \n+            (value.isString() || value.isNumber())) {\n+          addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+        } else {\n+          addition = IR.add(IR.string(\"\").srcref(callTarget))\n+              .srcref(n);\n+          addition.addChildToBack(value.detachFromParent());\n+        }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}