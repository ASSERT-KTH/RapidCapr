{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean registryResolved = resolveViaRegistry(t, enclosing);\n    boolean propertyResolved = false;\n\n    if (!registryResolved) {\n      propertyResolved = resolveViaProperties(t, enclosing);\n\n      if (!propertyResolved) {\n        if (getNamespace().equals(\"Global\")) {\n          resolveGlobals(t);\n        } else {\n          resolveUnknown(t);\n        }\n      }\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n    } else {\n      finishPropertyContinuations();\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      super.resolveInternal(t, enclosing);\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    if (isGeneric()) {\n      super.resolveInternal(t, enclosing);\n    } else {\n      resolveConstructor(t, enclosing);\n      if (prototypeSlot != null) {\n        resolvePrototype(t, enclosing);\n      }\n    }\n\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..2a69ac62 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,31 +182,50 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+    boolean registryResolved = resolveViaRegistry(t, enclosing);\n+    boolean propertyResolved = false;\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+    if (!registryResolved) {\n+      propertyResolved = resolveViaProperties(t, enclosing);\n+\n+      if (!propertyResolved) {\n+        if (getNamespace().equals(\"Global\")) {\n+          resolveGlobals(t);\n+        } else {\n+          resolveUnknown(t);\n+        }\n+      }\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+    } else {\n       finishPropertyContinuations();\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      super.resolveInternal(t, enclosing);\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (isGeneric()) {\n+      super.resolveInternal(t, enclosing);\n+    } else {\n+      resolveConstructor(t, enclosing);\n+      if (prototypeSlot != null) {\n+        resolvePrototype(t, enclosing);\n+      }\n     }\n \n-    super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n+\n+    if (detectImplicitPrototypeCycle()) {\n+      handleTypeCycle(t);\n+    }\n+\n+    super.resolveInternal(t, enclosing);\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}