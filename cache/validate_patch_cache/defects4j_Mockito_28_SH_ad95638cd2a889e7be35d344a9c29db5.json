{
    "patch": "        Optional<Object> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        candidate.ifPresent(c -> {\n            if (!field.getType().isAssignableFrom(c.getClass())) {\n                throw new RuntimeException(\"Mock candidate \" + c.getClass().getSimpleName() + \" is not compatible with field type \" + field.getType().getSimpleName());\n            }\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, field.getType().cast(c));\n                mocks.remove(c);\n            } catch(IllegalAccessException e) {\n                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n            }\n        });",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..7a25e3f5b 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Optional<Object> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        candidate.ifPresent(c -> {\n+            if (!field.getType().isAssignableFrom(c.getClass())) {\n+                throw new RuntimeException(\"Mock candidate \" + c.getClass().getSimpleName() + \" is not compatible with field type \" + field.getType().getSimpleName());\n+            }\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, field.getType().cast(c));\n+                mocks.remove(c);\n+            } catch(IllegalAccessException e) {\n+                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+            }\n+        });\n         }\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}