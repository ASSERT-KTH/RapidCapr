{
    "patch": "public Object returnValueFor(Class clazz) {\n    if (Iterable.class.isAssignableFrom(clazz)) {\n        List<Object> result = new ArrayList<>();\n\n        for (ResultPair pair : results) {\n            if (pair.getException() == null && pair.getValue() != null && Iterable.class.isAssignableFrom(pair.getValue().getClass())) {\n                for (Object obj : (Iterable) pair.getValue()) {\n                    result.add(obj);\n                }\n            }\n        }\n        return result;\n    } else {\n        if (!results.isEmpty()) {\n            ResultPair lastResult = results.get(results.size() - 1);\n            if (lastResult.getException() != null) {\n                return null;\n            } else {\n                return lastResult.getValue();\n            }\n        }\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}