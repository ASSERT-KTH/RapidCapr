{
    "patch": "private void readTypeVariables() {\n    TypeParameter<?> typeParameter = getTypeParameter();\n    if (typeParameter != null) {\n        for (Type type : typeParameter.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n    }\n\n    Type typeArgument = getTypeArgument();\n    if (typeArgument != null) {\n        registerTypeVariablesOn(typeArgument);\n    }\n}\n\nprivate TypeParameter<?> getTypeParameter() {\n    AnnotatedType annotatedType = typeVariable.getAnnotatedBounds()[0];\n    if (annotatedType.getType() instanceof TypeVariable) {\n        return ((TypeVariable<?>) annotatedType.getType()).getTypeParameter();\n    }\n    return null;\n}\n\nprivate Type getTypeArgument() {\n    if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n        Type type = declaringClass.getGenericSuperclass();\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeVariables = declaringClass.getTypeParameters();\n            for (int i = 0; i < typeVariables.length; i++) {\n                if (typeVariables[i].equals(typeVariable)) {\n                    return actualTypeArguments[i];\n                }\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3e5c3f742 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,46 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    TypeParameter<?> typeParameter = getTypeParameter();\n+    if (typeParameter != null) {\n+        for (Type type : typeParameter.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+\n+    Type typeArgument = getTypeArgument();\n+    if (typeArgument != null) {\n+        registerTypeVariablesOn(typeArgument);\n+    }\n+}\n+\n+private TypeParameter<?> getTypeParameter() {\n+    AnnotatedType annotatedType = typeVariable.getAnnotatedBounds()[0];\n+    if (annotatedType.getType() instanceof TypeVariable) {\n+        return ((TypeVariable<?>) annotatedType.getType()).getTypeParameter();\n+    }\n+    return null;\n+}\n+\n+private Type getTypeArgument() {\n+    if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n+        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n+        Type type = declaringClass.getGenericSuperclass();\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            TypeVariable<?>[] typeVariables = declaringClass.getTypeParameters();\n+            for (int i = 0; i < typeVariables.length; i++) {\n+                if (typeVariables[i].equals(typeVariable)) {\n+                    return actualTypeArguments[i];\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}