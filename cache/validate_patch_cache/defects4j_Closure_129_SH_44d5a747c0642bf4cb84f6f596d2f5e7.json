{
    "patch": "      Node maybeCast = first.getFirstChild();\n      while (maybeCast != null && maybeCast.getToken() == Token.CAST) {\n        maybeCast = maybeCast.getFirstChild();\n      }\n      if (!NodeUtil.isGet(maybeCast)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..14cdcb91 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,13 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node maybeCast = first.getFirstChild();\n+      while (maybeCast != null && maybeCast.getToken() == Token.CAST) {\n+        maybeCast = maybeCast.getFirstChild();\n+      }\n+      if (!NodeUtil.isGet(maybeCast)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}