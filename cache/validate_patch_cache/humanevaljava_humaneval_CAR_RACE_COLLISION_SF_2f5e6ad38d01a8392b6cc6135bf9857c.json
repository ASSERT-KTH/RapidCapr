{
    "patch": "public static int car_race_collision(int n) {\n    int distance = 150;\n    int[] speed = new int[n];\n    Random rand = new Random();\n    // initialize speed of cars\n    for(int i=0; i<n; i++) {\n        speed[i] = rand.nextInt(100-60) + 60;\n    }\n    // simulate the race\n    int time = 0;\n    while(distance > 0) {\n        time++;\n        for(int i=0; i<n; i++) {\n            distance -= speed[i]; \n            if(distance <= 0) {\n                return i+1;\n            }\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CAR_RACE_COLLISION.java b/src/main/java/humaneval/buggy/CAR_RACE_COLLISION.java\nindex 4ded3f1..c7d6f64 100644\n--- a/src/main/java/humaneval/buggy/CAR_RACE_COLLISION.java\n+++ b/src/main/java/humaneval/buggy/CAR_RACE_COLLISION.java\n@@ -11,7 +11,25 @@ in their trajectory as if they did not collide.\n This function outputs the number of such collisions. */\n \n public class CAR_RACE_COLLISION {\n-    public static int car_race_collision(int n) {\n-        return n;\n+public static int car_race_collision(int n) {\n+    int distance = 150;\n+    int[] speed = new int[n];\n+    Random rand = new Random();\n+    // initialize speed of cars\n+    for(int i=0; i<n; i++) {\n+        speed[i] = rand.nextInt(100-60) + 60;\n     }\n+    // simulate the race\n+    int time = 0;\n+    while(distance > 0) {\n+        time++;\n+        for(int i=0; i<n; i++) {\n+            distance -= speed[i]; \n+            if(distance <= 0) {\n+                return i+1;\n+            }\n+        }\n+    }\n+    return -1;\n+}\n }",
    "result_reason": " /tmp/humaneval-CAR_RACE_COLLISION/src/main/java/humaneval/buggy/CAR_RACE_COLLISION.java:[17,5] cannot find symbol",
    "test_result": "ERROR"
}