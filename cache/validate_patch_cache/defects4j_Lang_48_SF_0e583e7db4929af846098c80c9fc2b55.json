{
    "patch": "import java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class MyEqualsBuilder {\n\n    private boolean isEquals = true;\n\n    public MyEqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhsClass != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            appendArray((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }\n\n    public void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    private void appendArray(Object[] lhs, Object[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(long[] lhs, long[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(int[] lhs, int[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(short[] lhs, short[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(char[] lhs, char[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(byte[] lhs, byte[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(double[] lhs, double[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(float[] lhs, float[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(boolean[] lhs, boolean[] rhs) {\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(Object lhs, Object rhs) {\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (!lhs.getClass().equals(rhs.getClass())) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs instanceof Number) {\n            // This includes Byte, Short, Integer, Long, Float, Double\n            double lhsNumber = ((Number) lhs).doubleValue();\n            double rhsNumber = ((Number) rhs).doubleValue();\n            append(lhsNumber, rhsNumber);\n        } else if (lhs instanceof Character) {\n            // Character handling is compatible with JDK 1.0 to 1.4 but not 1.5 onwards.\n            char lhsChar = ((Character) lhs).charValue();\n            char rhsChar = ((Character) rhs).charValue();\n            append(lhsChar, rhsChar);\n        } else if (lhs instanceof Boolean) {\n            boolean lhsBoolean = ((Boolean) lhs).booleanValue();\n            boolean rhsBoolean = ((Boolean) rhs).booleanValue();\n            append(lhsBoolean, rhsBoolean);\n        } else if (lhs instanceof String) {\n            String lhsString = (String) lhs;\n            String rhsString = (String) rhs;\n            append(lhsString, rhsString);\n        } else if (lhs instanceof Date) {\n            Date lhsDate = (Date) lhs;\n            Date rhsDate = (Date) rhs;\n            append(lhsDate.getTime(), rhsDate.getTime());\n        } else if (lhs instanceof Calendar) {\n            Calendar lhsCal = (Calendar) lhs;\n            Calendar rhsCal = (Calendar) rhs;\n            append(lhsCal.getTimeInMillis(), rhsCal.getTimeInMillis());\n        } else if (lhs.getClass().isArray()) {\n            appendArray(lhs, rhs);\n        } else {\n            appendFields(lhs, rhs);\n        }\n    }\n\n    private void appendFields(Object lhs, Object rhs) {\n        Class<?> clazz = lhs.getClass();\n        while (clazz != null && isEquals == true) {\n            Field[] fields = clazz.getDeclaredFields();\n            for (Field field : fields) {\n                if (!Modifier.isTransient(field.getModifiers()) && !Modifier.isStatic(field.getModifiers())) {\n                    try {\n                        field.setAccessible(true);\n                        Object lhsValue = field.get(lhs);\n                        Object rhsValue = field.get(rhs);\n                        append(lhsValue, rhsValue);\n                    } catch (IllegalAccessException e) {\n                        // Should not occur as setAccessible(true) has been called.\n                    }\n                }\n            }\n            clazz = clazz.getSuperclass();\n        }\n    }\n\n    public boolean isEqual() {\n        return this.isEquals;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..fd9839dc 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,7 +364,16 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+public class MyEqualsBuilder {\n+\n+    private boolean isEquals = true;\n+\n+    public MyEqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n         }\n@@ -375,17 +384,14 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n+        } else if (lhsClass != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        } else if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -403,11 +409,179 @@ public class EqualsBuilder {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n             // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            appendArray((Object[]) lhs, (Object[]) rhs);\n         }\n         return this;\n     }\n \n+    public void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    private void appendArray(Object[] lhs, Object[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(long[] lhs, long[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(int[] lhs, int[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(short[] lhs, short[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(char[] lhs, char[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(byte[] lhs, byte[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(double[] lhs, double[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(float[] lhs, float[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(boolean[] lhs, boolean[] rhs) {\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals == true; i++) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(Object lhs, Object rhs) {\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (!lhs.getClass().equals(rhs.getClass())) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs instanceof Number) {\n+            // This includes Byte, Short, Integer, Long, Float, Double\n+            double lhsNumber = ((Number) lhs).doubleValue();\n+            double rhsNumber = ((Number) rhs).doubleValue();\n+            append(lhsNumber, rhsNumber);\n+        } else if (lhs instanceof Character) {\n+            // Character handling is compatible with JDK 1.0 to 1.4 but not 1.5 onwards.\n+            char lhsChar = ((Character) lhs).charValue();\n+            char rhsChar = ((Character) rhs).charValue();\n+            append(lhsChar, rhsChar);\n+        } else if (lhs instanceof Boolean) {\n+            boolean lhsBoolean = ((Boolean) lhs).booleanValue();\n+            boolean rhsBoolean = ((Boolean) rhs).booleanValue();\n+            append(lhsBoolean, rhsBoolean);\n+        } else if (lhs instanceof String) {\n+            String lhsString = (String) lhs;\n+            String rhsString = (String) rhs;\n+            append(lhsString, rhsString);\n+        } else if (lhs instanceof Date) {\n+            Date lhsDate = (Date) lhs;\n+            Date rhsDate = (Date) rhs;\n+            append(lhsDate.getTime(), rhsDate.getTime());\n+        } else if (lhs instanceof Calendar) {\n+            Calendar lhsCal = (Calendar) lhs;\n+            Calendar rhsCal = (Calendar) rhs;\n+            append(lhsCal.getTimeInMillis(), rhsCal.getTimeInMillis());\n+        } else if (lhs.getClass().isArray()) {\n+            appendArray(lhs, rhs);\n+        } else {\n+            appendFields(lhs, rhs);\n+        }\n+    }\n+\n+    private void appendFields(Object lhs, Object rhs) {\n+        Class<?> clazz = lhs.getClass();\n+        while (clazz != null && isEquals == true) {\n+            Field[] fields = clazz.getDeclaredFields();\n+            for (Field field : fields) {\n+                if (!Modifier.isTransient(field.getModifiers()) && !Modifier.isStatic(field.getModifiers())) {\n+                    try {\n+                        field.setAccessible(true);\n+                        Object lhsValue = field.get(lhs);\n+                        Object rhsValue = field.get(rhs);\n+                        append(lhsValue, rhsValue);\n+                    } catch (IllegalAccessException e) {\n+                        // Should not occur as setAccessible(true) has been called.\n+                    }\n+                }\n+            }\n+            clazz = clazz.getSuperclass();\n+        }\n+    }\n+\n+    public boolean isEqual() {\n+        return this.isEquals;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}