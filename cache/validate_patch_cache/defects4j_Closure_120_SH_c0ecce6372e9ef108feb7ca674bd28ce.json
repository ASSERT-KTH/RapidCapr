{
    "patch": "      // Make sure this assignment is not in a loop or condition.\n      for (Reference ref = getOneAndOnlyAssignment(); ref != null; ref = ref.getBasicBlock().getOneAndOnlyParent()\n              .getOneAndOnlyAssignment()) {\n          if (ref.getBasicBlock().isFunction()) {\n              break;\n          } else if (ref.getBasicBlock().isLoop() || ref.getBasicBlock().isConditionalBranch()) {\n              return false;\n          }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..164c4f1c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop or condition.\n+      for (Reference ref = getOneAndOnlyAssignment(); ref != null; ref = ref.getBasicBlock().getOneAndOnlyParent()\n+              .getOneAndOnlyAssignment()) {\n+          if (ref.getBasicBlock().isFunction()) {\n+              break;\n+          } else if (ref.getBasicBlock().isLoop() || ref.getBasicBlock().isConditionalBranch()) {\n+              return false;\n+          }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}