{
    "patch": "public static double getTypedPercent(String jsonStr) {\n   Gson gson = new Gson();\n   Type type = new TypeToken<List<Object>>() {}.getType(); \n   List<Object> jsonList = gson.fromJson(jsonStr, type);\n   double totalCount = jsonList.size();\n   double typedCount = 0.0;\n   for (Object obj : jsonList) {\n       if (obj instanceof Double || obj instanceof Integer) {\n          typedCount++;\n       }\n   }\n   if (totalCount == 0) {\n      return 0.0;\n   } else {\n      return (typedCount / totalCount) * 100.0;\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0e85aaef 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+   Gson gson = new Gson();\n+   Type type = new TypeToken<List<Object>>() {}.getType(); \n+   List<Object> jsonList = gson.fromJson(jsonStr, type);\n+   double totalCount = jsonList.size();\n+   double typedCount = 0.0;\n+   for (Object obj : jsonList) {\n+       if (obj instanceof Double || obj instanceof Integer) {\n+          typedCount++;\n+       }\n+   }\n+   if (totalCount == 0) {\n+      return 0.0;\n+   } else {\n+      return (typedCount / totalCount) * 100.0;\n+   }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}