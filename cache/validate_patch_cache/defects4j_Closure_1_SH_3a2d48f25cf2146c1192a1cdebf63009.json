{
    "patch": "        if (lastArg.isDefaultValue()) {\n          lastArg = lastArg.getFirstChild();\n        }\n\n        if (!lastArg.isName()) {\n          // Currently, we don't handle removing other parameter types.\n          // See http://code.google.com/p/closure-compiler/issues/detail?id=392\n          return;\n        }\n\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..69235b59 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        if (lastArg.isDefaultValue()) {\n+          lastArg = lastArg.getFirstChild();\n+        }\n+\n+        if (!lastArg.isName()) {\n+          // Currently, we don't handle removing other parameter types.\n+          // See http://code.google.com/p/closure-compiler/issues/detail?id=392\n+          return;\n+        }\n+\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg.getParent());\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}