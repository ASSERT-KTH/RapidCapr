{
    "patch": "public static double getTypedPercent(JsonObject json) {\n    int correctCount = 0;\n    int totalCount = 0;\n    JsonArray results = json.getAsJsonArray(\"results\");\n\n    for(JsonElement result : results) {\n        JsonObject res = result.getAsJsonObject();\n        String expectedType = res.get(\"expected-type\").getAsString();\n        String typedValue = res.get(\"typed-value\").getAsString();\n\n        if(expectedType.equals(\"integer\")) {\n            try {\n                Integer.parseInt(typedValue);\n                correctCount++;\n            } catch (NumberFormatException e) {\n                // ignore the exception and continue\n            }\n        }\n\n        totalCount++;\n    }\n\n    double percentage = (double) correctCount / totalCount * 100;\n    return percentage;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..9482c323 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject json) {\n+    int correctCount = 0;\n+    int totalCount = 0;\n+    JsonArray results = json.getAsJsonArray(\"results\");\n+\n+    for(JsonElement result : results) {\n+        JsonObject res = result.getAsJsonObject();\n+        String expectedType = res.get(\"expected-type\").getAsString();\n+        String typedValue = res.get(\"typed-value\").getAsString();\n+\n+        if(expectedType.equals(\"integer\")) {\n+            try {\n+                Integer.parseInt(typedValue);\n+                correctCount++;\n+            } catch (NumberFormatException e) {\n+                // ignore the exception and continue\n+            }\n+        }\n+\n+        totalCount++;\n+    }\n+\n+    double percentage = (double) correctCount / totalCount * 100;\n+    return percentage;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}