{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields && savedFields.length == count + 1 && savedFields[count].iField.getType() == DateTimeFieldType.year()) {\n                savedFields[count].iValue = iDefaultYear;\n                savedFields[count].setValue(millis, millis + iChrono.year().roundCeiling(millis));\n                count++;\n                sort(savedFields, count);\n                millis = savedFields[0].set(millis, true);\n                for (int i = 1; i < count; i++) {\n                    millis = savedFields[i].set(millis, false);\n                }\n                if (resetFields) {\n                    millis = savedFields[count - 1].set(millis, true);\n                }\n            } else {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..dca6dcd3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields && savedFields.length == count + 1 && savedFields[count].iField.getType() == DateTimeFieldType.year()) {\n+                savedFields[count].iValue = iDefaultYear;\n+                savedFields[count].setValue(millis, millis + iChrono.year().roundCeiling(millis));\n+                count++;\n+                sort(savedFields, count);\n+                millis = savedFields[0].set(millis, true);\n+                for (int i = 1; i < count; i++) {\n+                    millis = savedFields[i].set(millis, false);\n+                }\n+                if (resetFields) {\n+                    millis = savedFields[count - 1].set(millis, true);\n+                }\n+            } else {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}