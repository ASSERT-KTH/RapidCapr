{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    // If we have no information about the constructor, assume it returns an unknown object\n    JSType constructorType = constructor.getJSType();\n    if (constructorType == null) {\n      constructorType = getNativeType(UNKNOWN_TYPE);\n    }\n\n    // If we have any information about the constructor, constrain its type to objects only,\n    // in case it is a number, boolean or some other simple type.\n    constructorType = constructorType.restrictByNotNullOrUndefined().removeType(getNativeType(ALL_TYPE));\n\n    // If we still have no information about the constructor, assume it returns an object with unknown properties.\n    JSType type = constructorType.isUnknownType() ? getNativeType(UNKNOWN_TYPE) : constructorType;\n\n    // If the constructor is a function, set the type of the new object to be the instance type of the function.\n    if (constructorType.isFunctionType()) {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n\n    n.setJSType(type);\n\n    // Propagate the type to the constructor arguments.\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..eb59c890 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,39 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n+\n+    // If we have no information about the constructor, assume it returns an unknown object\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+    if (constructorType == null) {\n+      constructorType = getNativeType(UNKNOWN_TYPE);\n+    }\n+\n+    // If we have any information about the constructor, constrain its type to objects only,\n+    // in case it is a number, boolean or some other simple type.\n+    constructorType = constructorType.restrictByNotNullOrUndefined().removeType(getNativeType(ALL_TYPE));\n+\n+    // If we still have no information about the constructor, assume it returns an object with unknown properties.\n+    JSType type = constructorType.isUnknownType() ? getNativeType(UNKNOWN_TYPE) : constructorType;\n+\n+    // If the constructor is a function, set the type of the new object to be the instance type of the function.\n+    if (constructorType.isFunctionType()) {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct.isConstructor()) {\n+        type = ct.getInstanceType();\n       }\n     }\n+\n     n.setJSType(type);\n+\n+    // Propagate the type to the constructor arguments.\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}