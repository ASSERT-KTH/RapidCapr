{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    int type = child.getType();\n    if (type == Token.EXPR_RESULT) {\n      // It is an expression statement.\n      Node grandparent = n.getParent();\n      if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n        Node greatGrandparent = grandparent.getParent();\n        if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n          // It is not contained within another block.\n          if (!NodeUtil.mayHaveSideEffects(child.getFirstChild())) {\n            // Its expression has no side effects.\n            Node ancestor = child;\n            while (ancestor != null && ancestor != grandparent\n                && !NodeUtil.isStatementBlock(ancestor)) {\n              ancestor = ancestor.getParent();\n            }\n            if (ancestor == grandparent) {\n              // It is not contained within an if/for/while statement.\n              return true;\n            }\n          }\n        }\n      }\n    } else if (type == Token.RETURN && child.hasOneChild() && NodeUtil.isExpressionNode(child.getFirstChild())) {\n      // It is a return statement with an expression.\n      Node parent = n.getParent();\n      if (parent.getType() == Token.BLOCK) {\n        Node grandparent = parent.getParent();\n        if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n          // It is not contained within another block.\n          if (!NodeUtil.mayHaveSideEffects(child.getFirstChild())) {\n            // Its expression has no side effects.\n            Node ancestor = child;\n            while (ancestor != null && ancestor != parent\n                && !NodeUtil.isStatementBlock(ancestor)) {\n              ancestor = ancestor.getParent();\n            }\n            if (ancestor == parent) {\n              // It is not contained within an if/for/while statement.\n              return true;\n            }\n          }\n        }\n      } else if (parent.getType() == Token.LABEL) {\n        // Handle labeled breaks/continues.\n        Node grandparent = parent.getParent();\n        if (grandparent.getType() == Token.BLOCK && grandparent.hasOneChild()\n            && grandparent.getParent().getType() != Token.BLOCK) {\n          Node labelName = parent.getFirstChild();\n          if (labelName.getString().equals(grandparent.getParent().getString())) {\n            return true;\n          }\n        }\n      }\n    } else if (NodeUtil.isExpressionNode(child)) {\n      // It's a non-block statement.\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..814104b5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,69 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node child = n.getFirstChild();\n+    int type = child.getType();\n+    if (type == Token.EXPR_RESULT) {\n+      // It is an expression statement.\n+      Node grandparent = n.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+        Node greatGrandparent = grandparent.getParent();\n+        if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n+          // It is not contained within another block.\n+          if (!NodeUtil.mayHaveSideEffects(child.getFirstChild())) {\n+            // Its expression has no side effects.\n+            Node ancestor = child;\n+            while (ancestor != null && ancestor != grandparent\n+                && !NodeUtil.isStatementBlock(ancestor)) {\n+              ancestor = ancestor.getParent();\n+            }\n+            if (ancestor == grandparent) {\n+              // It is not contained within an if/for/while statement.\n+              return true;\n+            }\n+          }\n+        }\n       }\n+    } else if (type == Token.RETURN && child.hasOneChild() && NodeUtil.isExpressionNode(child.getFirstChild())) {\n+      // It is a return statement with an expression.\n+      Node parent = n.getParent();\n+      if (parent.getType() == Token.BLOCK) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n+          // It is not contained within another block.\n+          if (!NodeUtil.mayHaveSideEffects(child.getFirstChild())) {\n+            // Its expression has no side effects.\n+            Node ancestor = child;\n+            while (ancestor != null && ancestor != parent\n+                && !NodeUtil.isStatementBlock(ancestor)) {\n+              ancestor = ancestor.getParent();\n+            }\n+            if (ancestor == parent) {\n+              // It is not contained within an if/for/while statement.\n+              return true;\n+            }\n+          }\n+        }\n+      } else if (parent.getType() == Token.LABEL) {\n+        // Handle labeled breaks/continues.\n+        Node grandparent = parent.getParent();\n+        if (grandparent.getType() == Token.BLOCK && grandparent.hasOneChild()\n+            && grandparent.getParent().getType() != Token.BLOCK) {\n+          Node labelName = parent.getFirstChild();\n+          if (labelName.getString().equals(grandparent.getParent().getString())) {\n+            return true;\n+          }\n+        }\n+      }\n+    } else if (NodeUtil.isExpressionNode(child)) {\n+      // It's a non-block statement.\n+      return true;\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}