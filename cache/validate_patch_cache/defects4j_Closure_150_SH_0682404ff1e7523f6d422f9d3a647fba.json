{
    "patch": "      attachLiteralTypes(n);\n\n      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(n)) {\n            return;\n          }\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.NAME:\n          defineVar(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..37760a9a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,20 +1449,36 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n+\n+      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n+        handleFunctionInputs(parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n+        handleFunctionInputs(parent);\n+        return;\n+      }\n+\n       switch (n.getType()) {\n         case Token.FUNCTION:\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            return;\n+          }\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.NAME:\n+          defineVar(n, parent);\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}