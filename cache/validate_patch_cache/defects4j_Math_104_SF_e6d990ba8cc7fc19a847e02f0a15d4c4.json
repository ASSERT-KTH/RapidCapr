{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double small = 1.0e-50;\n    final double big = 1.0e50;\n    final double epsilon = 1.0e-9;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n        return Double.NaN;\n    }\n\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (a > big) {\n        double h = MathUtils.exp(a * x - a - MathUtils.log(a) -\n                Gamma.logGamma(a));\n        return (h >= 0.5) ? 1.0 - regularizedGammaQ(a, x)\n                          : regularizedGammaP(a, x, epsilon, Integer.MAX_VALUE);\n    }\n\n    if (x > a || x > 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    return regularizedGammaP(a, x, epsilon, Integer.MAX_VALUE);\n}\n\nprivate static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    double n = 1.0;\n    double an = a;\n    double sum = a;\n    double delta = sum * epsilon;\n    while (Math.abs(delta) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n        an *= x / (a + n);\n        sum += an;\n        n += 1.0;\n        delta = an * (n / (a + n) - x / (a + n + 1));\n    }\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(maxIterations);\n    }\n    return MathUtils.exp(-x + a * MathUtils.log(x) - Gamma.logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(final double a, final double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x == Double.POSITIVE_INFINITY) {\n        return 0.0;\n    }\n\n    double b = x + 1.0 - a;\n    double c = 1.0 / 1.0e-30;\n    double d = 1.0 / b;\n    double h = d;\n\n    double an = 1.0 / b;\n    for (int i = 1; i < 1000; i++) {\n        final double a1 = 2 * i;\n        final double aa = i * (a - i);\n        final double b1 = x + a1;\n        final double den = aa * b1;\n        final double c1 = a1 + 1.0 - b;\n        d = 1.0 / (den * d + c1);\n        h *= d;\n        an *= c * h;\n        c = b1 / den;\n        final double delta = c * an;\n        if (Math.abs(delta - 1.0) < 1e-15) {\n            return 1.0 - MathUtils.exp(a * MathUtils.log(x) - x - Gamma.logGamma(a)) * an / a;\n        }\n    }\n    throw new MaxCountExceededException(1000);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d79ab68f7 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,90 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double small = 1.0e-50;\n+    final double big = 1.0e50;\n+    final double epsilon = 1.0e-9;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (a > big) {\n+        double h = MathUtils.exp(a * x - a - MathUtils.log(a) -\n+                Gamma.logGamma(a));\n+        return (h >= 0.5) ? 1.0 - regularizedGammaQ(a, x)\n+                          : regularizedGammaP(a, x, epsilon, Integer.MAX_VALUE);\n+    }\n+\n+    if (x > a || x > 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    return regularizedGammaP(a, x, epsilon, Integer.MAX_VALUE);\n+}\n+\n+private static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    double n = 1.0;\n+    double an = a;\n+    double sum = a;\n+    double delta = sum * epsilon;\n+    while (Math.abs(delta) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+        an *= x / (a + n);\n+        sum += an;\n+        n += 1.0;\n+        delta = an * (n / (a + n) - x / (a + n + 1));\n+    }\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(maxIterations);\n+    }\n+    return MathUtils.exp(-x + a * MathUtils.log(x) - Gamma.logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(final double a, final double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x == Double.POSITIVE_INFINITY) {\n+        return 0.0;\n+    }\n+\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / 1.0e-30;\n+    double d = 1.0 / b;\n+    double h = d;\n+\n+    double an = 1.0 / b;\n+    for (int i = 1; i < 1000; i++) {\n+        final double a1 = 2 * i;\n+        final double aa = i * (a - i);\n+        final double b1 = x + a1;\n+        final double den = aa * b1;\n+        final double c1 = a1 + 1.0 - b;\n+        d = 1.0 / (den * d + c1);\n+        h *= d;\n+        an *= c * h;\n+        c = b1 / den;\n+        final double delta = c * an;\n+        if (Math.abs(delta - 1.0) < 1e-15) {\n+            return 1.0 - MathUtils.exp(a * MathUtils.log(x) - x - Gamma.logGamma(a)) * an / a;\n+        }\n+    }\n+    throw new MaxCountExceededException(1000);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}