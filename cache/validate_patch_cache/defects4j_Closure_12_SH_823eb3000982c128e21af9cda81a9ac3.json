{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    for (int i = 0; i < cfgNode.getChildCount(); i++) {\n        Node child = cfgNode.getChildAtIndex(i);\n        if (child.isTry()) {\n            Node tryBlock = child.getLastChild();\n            if (tryBlock != null && tryBlock.hasChildren()) {\n                return true;\n            }\n        }\n        if (hasExceptionHandler(child)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..4e602b68 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,21 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    for (int i = 0; i < cfgNode.getChildCount(); i++) {\n+        Node child = cfgNode.getChildAtIndex(i);\n+        if (child.isTry()) {\n+            Node tryBlock = child.getLastChild();\n+            if (tryBlock != null && tryBlock.hasChildren()) {\n+                return true;\n+            }\n+        }\n+        if (hasExceptionHandler(child)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}