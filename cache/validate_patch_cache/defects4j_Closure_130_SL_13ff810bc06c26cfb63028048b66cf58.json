{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliases == null && name.aliasingGets > 0 ||\n          name.globalSets == 0 && name.localSets == 1 &&\n          name.aliases == null && name.aliasingGets == 0 ||\n          name.localSets == 1 && name.aliasingGets > 0 ||\n          name.localSets > 1 ||\n          name.props == null && name.getDeclaration() != null &&\n          name.globalSets == 1 && name.localSets == 0 &&\n          name.localGets == 0 && name.aliasingGets == 0 &&\n          name.getDeclaration().getNodeType().equals(Token.VAR)) {\n        // {@code name} meets condition (b). Find all its non-local aliases\n        // and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && !ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n\n        // The aliasing assignments are all now local-to-a-block.\n        // If there are any aliasing getters left, keep them around to be\n        // inlined at their call sites.\n        if (name.globalSets == 0 && name.localSets == 1 &&\n            name.aliases == null && name.aliasingGets > 0) {\n          // {@code name} meets condition (b) again, after inlining aliases.\n          // Find all local-to-a-block alias declarations and try to inline them.\n          List<Ref> refs = Lists.newArrayList(name.getRefs());\n          for (Ref ref : refs) {\n            if (ref.type == Type.ALIAS && ref.scope.isLocal()) {\n              // {@code name} meets condition (c) again.\n              if (inlineLocalAliasIfPossible(ref, namespace)) {\n                name.removeRef(ref);\n              }\n            }\n          }\n        }\n      } else if (name.localSets == 0 && name.aliasingGets == 0 && name.getDeclaration().getNodeType().equals(Token.VAR)) {\n        // {@code name} meets condition (e).\n        inlineConstantIfPossible(name);\n      } else if ((name.type == Name.Type.OBJECTLIT ||\n                   name.type == Name.Type.FUNCTION) &&\n                  name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..f455d7e4 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,68 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n+  private void inlineAliases(GlobalNamespace namespace) {\n+    // Invariant: All the names in the worklist meet condition (a).\n+    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    while (!workList.isEmpty()) {\n+      Name name = workList.pop();\n+\n+      // Don't attempt to inline a getter or setter property as a variable.\n+      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+        continue;\n+      }\n+\n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliases == null && name.aliasingGets > 0 ||\n+          name.globalSets == 0 && name.localSets == 1 &&\n+          name.aliases == null && name.aliasingGets == 0 ||\n+          name.localSets == 1 && name.aliasingGets > 0 ||\n+          name.localSets > 1 ||\n+          name.props == null && name.getDeclaration() != null &&\n+          name.globalSets == 1 && name.localSets == 0 &&\n+          name.localGets == 0 && name.aliasingGets == 0 &&\n+          name.getDeclaration().getNodeType().equals(Token.VAR)) {\n+        // {@code name} meets condition (b). Find all its non-local aliases\n+        // and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && !ref.scope.isLocal()) {\n+            // {@code name} meets condition (c).\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+\n+        // The aliasing assignments are all now local-to-a-block.\n+        // If there are any aliasing getters left, keep them around to be\n+        // inlined at their call sites.\n+        if (name.globalSets == 0 && name.localSets == 1 &&\n+            name.aliases == null && name.aliasingGets > 0) {\n+          // {@code name} meets condition (b) again, after inlining aliases.\n+          // Find all local-to-a-block alias declarations and try to inline them.\n+          List<Ref> refs = Lists.newArrayList(name.getRefs());\n+          for (Ref ref : refs) {\n+            if (ref.type == Type.ALIAS && ref.scope.isLocal()) {\n+              // {@code name} meets condition (c) again.\n+              if (inlineLocalAliasIfPossible(ref, namespace)) {\n+                name.removeRef(ref);\n+              }\n+            }\n+          }\n+        }\n+      } else if (name.localSets == 0 && name.aliasingGets == 0 && name.getDeclaration().getNodeType().equals(Token.VAR)) {\n+        // {@code name} meets condition (e).\n+        inlineConstantIfPossible(name);\n+      } else if ((name.type == Name.Type.OBJECTLIT ||\n+                   name.type == Name.Type.FUNCTION) &&\n+                  name.aliasingGets == 0 && name.props != null) {\n+        // All of {@code name}'s children meet condition (a), so they can be\n+        // added to the worklist.\n+        workList.addAll(name.props);\n+      }\n+    }\n+  }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}