{
    "patch": "      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      // isOverride is true if we are trying to override a property in a global\n      // scope or inside a constructor.\n      boolean isOverride = t.inGlobalScope() ||\n          (currentClass != null && currentMethod != null &&\n              currentMethod.isConstructor());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..00f28598 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,13 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      // Is this a normal property access, or are we trying to override\n+      // an existing property?\n+      // isOverride is true if we are trying to override a property in a global\n+      // scope or inside a constructor.\n+      boolean isOverride = t.inGlobalScope() ||\n+          (currentClass != null && currentMethod != null &&\n+              currentMethod.isConstructor());\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}