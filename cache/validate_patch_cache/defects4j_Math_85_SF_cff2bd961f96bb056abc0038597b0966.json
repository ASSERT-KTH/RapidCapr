{
    "patch": "import org.apache.commons.math.FunctionEvaluationException;\nimport org.apache.commons.math.analysis.UnivariateRealFunction;\nimport org.apache.commons.math.exception.MathRuntimeException;\nimport org.apache.commons.math.exception.TooManyIterationsException;\n\npublic class RootFindingUtils {\n\n    private static final double DEFAULT_RELATIVE_ACCURACY = 1e-14;\n    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n\n    public static double bisect(final UnivariateRealFunction f, double min, double max, int maxIterations)\n            throws TooManyIterationsException {\n\n        double m;\n        double fm;\n        double fmin;\n\n        double d = Double.POSITIVE_INFINITY;\n        double oldM = Double.NaN;\n\n        // ensure the interval [min, max] has opposite signs\n        final double fminEval = f.value(min);\n        final double fmaxEval = f.value(max);\n        if (fminEval * fmaxEval >= 0) {\n            throw new IllegalArgumentException(\"Interval [\" + min + \", \" + max + \"] has the same sign on both endpoints.\");\n        }\n\n        for (int i = 0; i < maxIterations; ++i) {\n            // bisect the interval\n            m = (max + min) * 0.5;\n            fm = f.value(m);\n            fmin = f.value(min);\n\n            // update the interval endpoints\n            if (fm * fmin >= 0) {\n                min = m;\n            } else {\n                max = m;\n            }\n\n            // check for convergence\n            if (i != 0) {\n                d = Math.abs(m - oldM);\n                if (d <= Math.max(Math.abs(m), Math.abs(oldM)) * DEFAULT_ABSOLUTE_ACCURACY + DEFAULT_RELATIVE_ACCURACY) {\n                    return m;\n                }\n            }\n\n            // update old value for comparison in next iteration\n            oldM = m;\n        }\n\n        throw new TooManyIterationsException(maxIterations);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..b272aff94 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,61 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.MathRuntimeException;\n+import org.apache.commons.math.exception.TooManyIterationsException;\n+\n+public class RootFindingUtils {\n+\n+    private static final double DEFAULT_RELATIVE_ACCURACY = 1e-14;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+\n+    public static double bisect(final UnivariateRealFunction f, double min, double max, int maxIterations)\n+            throws TooManyIterationsException {\n+\n+        double m;\n+        double fm;\n+        double fmin;\n+\n+        double d = Double.POSITIVE_INFINITY;\n+        double oldM = Double.NaN;\n+\n+        // ensure the interval [min, max] has opposite signs\n+        final double fminEval = f.value(min);\n+        final double fmaxEval = f.value(max);\n+        if (fminEval * fmaxEval >= 0) {\n+            throw new IllegalArgumentException(\"Interval [\" + min + \", \" + max + \"] has the same sign on both endpoints.\");\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+\n+        for (int i = 0; i < maxIterations; ++i) {\n+            // bisect the interval\n+            m = (max + min) * 0.5;\n+            fm = f.value(m);\n+            fmin = f.value(min);\n+\n+            // update the interval endpoints\n+            if (fm * fmin >= 0) {\n+                min = m;\n+            } else {\n+                max = m;\n+            }\n+\n+            // check for convergence\n+            if (i != 0) {\n+                d = Math.abs(m - oldM);\n+                if (d <= Math.max(Math.abs(m), Math.abs(oldM)) * DEFAULT_ABSOLUTE_ACCURACY + DEFAULT_RELATIVE_ACCURACY) {\n+                    return m;\n+                }\n+            }\n+\n+            // update old value for comparison in next iteration\n+            oldM = m;\n         }\n-        \n-        return new double[]{a, b};\n+\n+        throw new TooManyIterationsException(maxIterations);\n     }\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}