{
    "patch": "    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof ObjectType) {\n          // If constructorType is an EmptyObject type or a NoObjectType, then toMaybeFunctionType will\n          // return null. But EmptyObject and NoObjectType implement the FunctionType\n          // interface, precisely because they can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    if (type == null) {\n        ObjectType emptyObject = getNativeObjectType(EMPTY_OBJECT);\n        if (constructorType != null && constructorType.isConstructor() && !constructorType.isUnknownType()) {\n            emptyObject = getEmptyObjectWithoutFunctionValueType(constructorType.toMaybeFunctionType());\n        }\n        type = emptyObject;\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..1c4817ca 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,9 +1032,6 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n@@ -1044,10 +1041,10 @@ class TypeInference\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n+        if (ct == null && constructorType instanceof ObjectType) {\n+          // If constructorType is an EmptyObject type or a NoObjectType, then toMaybeFunctionType will\n+          // return null. But EmptyObject and NoObjectType implement the FunctionType\n+          // interface, precisely because they can validly construct objects.\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n@@ -1055,12 +1052,16 @@ class TypeInference\n         }\n       }\n     }\n+    if (type == null) {\n+        ObjectType emptyObject = getNativeObjectType(EMPTY_OBJECT);\n+        if (constructorType != null && constructorType.isConstructor() && !constructorType.isUnknownType()) {\n+            emptyObject = getEmptyObjectWithoutFunctionValueType(constructorType.toMaybeFunctionType());\n+        }\n+        type = emptyObject;\n+    }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}