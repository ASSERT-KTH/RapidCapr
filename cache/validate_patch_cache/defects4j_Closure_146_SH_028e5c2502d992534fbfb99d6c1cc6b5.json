{
    "patch": "        // the inequality can't be resolved\n        if (this.isTop()) {\n          return new TypePair(this, that);\n        }\n        if (that.isTop()) {\n          return new TypePair(that, this);\n        }\n        // the inequality is true/false\n        return (this.subtypeOf(that)) ? new TypePair(this, that) : new TypePair(that, this);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..2236ba0e 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,15 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        // the inequality can't be resolved\n+        if (this.isTop()) {\n+          return new TypePair(this, that);\n+        }\n+        if (that.isTop()) {\n+          return new TypePair(that, this);\n+        }\n+        // the inequality is true/false\n+        return (this.subtypeOf(that)) ? new TypePair(this, that) : new TypePair(that, this);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}