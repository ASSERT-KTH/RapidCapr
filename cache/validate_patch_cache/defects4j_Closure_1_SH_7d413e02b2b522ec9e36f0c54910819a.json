{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          // Check if the unused args are the last arguments of the function\n          // and if they have default values.\n          boolean shouldRemoveDefault = lastArg.getBooleanProp(Node.FUNCTION_PARAM_HAS_DEFAULT);\n          if (argList.getLastChild() == lastArg.getNext()) {\n            Node sibling = lastArg.getPrevious();\n            while (sibling != null) {\n              if (sibling.isDefaultValue()) {\n                sibling = sibling.getPrevious();\n              } else {\n                shouldRemoveDefault = false;\n                break;\n              }\n            }\n          }\n\n          argList.removeChild(lastArg);\n          if (shouldRemoveDefault) {\n            Node param = lastArg;\n            while (param.isDefaultValue()) {\n              argList.removeChild(param);\n              param = param.getPrevious();\n            }\n          }\n\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..195b6e05 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,67 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          // Check if the unused args are the last arguments of the function\n+          // and if they have default values.\n+          boolean shouldRemoveDefault = lastArg.getBooleanProp(Node.FUNCTION_PARAM_HAS_DEFAULT);\n+          if (argList.getLastChild() == lastArg.getNext()) {\n+            Node sibling = lastArg.getPrevious();\n+            while (sibling != null) {\n+              if (sibling.isDefaultValue()) {\n+                sibling = sibling.getPrevious();\n+              } else {\n+                shouldRemoveDefault = false;\n+                break;\n+              }\n+            }\n+          }\n+\n+          argList.removeChild(lastArg);\n+          if (shouldRemoveDefault) {\n+            Node param = lastArg;\n+            while (param.isDefaultValue()) {\n+              argList.removeChild(param);\n+              param = param.getPrevious();\n+            }\n+          }\n+\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}