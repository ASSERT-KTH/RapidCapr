{
    "patch": "            Matcher varargMatcher = matchers.get(indexOfVararg);\n            if (varargMatcher instanceof CapturesArguments && invocation.getRawArguments()[indexOfVararg] != null) {\n                Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n                for (Object arg : varargs) {\n                    ((CapturesArguments) varargMatcher).captureFrom(arg);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..ab51e4ada 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(indexOfVararg);\n+            if (varargMatcher instanceof CapturesArguments && invocation.getRawArguments()[indexOfVararg] != null) {\n+                Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n+                for (Object arg : varargs) {\n+                    ((CapturesArguments) varargMatcher).captureFrom(arg);\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 1, Size: 1",
    "test_result": "FAIL"
}