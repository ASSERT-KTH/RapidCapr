{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable, boolean afterKill) {\n  boolean lhs = false;\n  boolean found = false;\n  boolean foundChildLives = false;\n\n  // Check if this node is the variable being assigned.\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    lhs = NodeUtil.isLhs(n, n.getParent());\n    found = true;\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (ControlFlowGraph.isEnteringNewCfgNode(child)) { // FUNCTION\n      continue;\n    }\n    VariableLiveness childLives = isVariableReadBeforeKill(child, variable, false);\n    foundChildLives = foundChildLives || childLives != VariableLiveness.MAYBE_LIVE;\n    if (found && foundChildLives) {\n      break;\n    }\n  }\n\n  if (!found) { // Variable not yet found\n    return foundChildLives ? VariableLiveness.READ : VariableLiveness.MAYBE_LIVE;\n  }\n\n  // Variable was found in this node\n  return afterKill ? VariableLiveness.KILL : lhs ? VariableLiveness.READ : VariableLiveness.MAYBE_LIVE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..af2e0562 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,35 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n-    }\n+private VariableLiveness isVariableReadBeforeKill(\n+    Node n, String variable, boolean afterKill) {\n+  boolean lhs = false;\n+  boolean found = false;\n+  boolean foundChildLives = false;\n+\n+  // Check if this node is the variable being assigned.\n+  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+    lhs = NodeUtil.isLhs(n, n.getParent());\n+    found = true;\n+  }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n-      }\n+  // Expressions are evaluated left-right, depth first.\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (ControlFlowGraph.isEnteringNewCfgNode(child)) { // FUNCTION\n+      continue;\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+    VariableLiveness childLives = isVariableReadBeforeKill(child, variable, false);\n+    foundChildLives = foundChildLives || childLives != VariableLiveness.MAYBE_LIVE;\n+    if (found && foundChildLives) {\n+      break;\n+    }\n+  }\n+\n+  if (!found) { // Variable not yet found\n+    return foundChildLives ? VariableLiveness.READ : VariableLiveness.MAYBE_LIVE;\n   }\n+\n+  // Variable was found in this node\n+  return afterKill ? VariableLiveness.KILL : lhs ? VariableLiveness.READ : VariableLiveness.MAYBE_LIVE;\n+}\n }",
    "result_reason": "error: method isVariableReadBeforeKill in class DeadAssignmentsElimination cannot be applied to given types;",
    "test_result": "ERROR"
}