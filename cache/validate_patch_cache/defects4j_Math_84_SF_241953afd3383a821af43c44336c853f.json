{
    "patch": "    public void testMinimizeMaximize() {\n\n        final int dim = 2;\n        final double[] start = new double[dim];\n        Arrays.fill(start, 0.5);\n        final double[] steps = new double[dim];\n        Arrays.fill(steps, 0.2);\n        final MultivariateFunction function = new SumSquares();\n        final NelderMead optimizer = new NelderMead();\n        optimizer.setMaxEvaluations(1000);\n        optimizer.setMaxIterations(1000);\n        final PointValuePair optimum = optimizer.optimize(\n                new MaxEval(1000),\n                new ObjectiveFunction(function),\n                GoalType.MINIMIZE,\n                new InitialGuess(start),\n                new SimpleBounds(new double[] { -1, -1 }, new double[] { 2, 2 }),\n                new NelderMead.Simplex(steps));\n\n        // target is zero, assert that we can find a solution with a tolerance of 1e-6\n        Assert.assertEquals(0.0, optimum.getValue(), 1e-6);\n\n        // verify that the number of iterations is within a certain range\n        final int evals = optimizer.getEvaluations();\n        final int iters = optimizer.getIterations();\n        System.out.format(\"Nelder-Mead: num_evaluations=%d, num_iterations=%d\\n\", evals, iters);\n        Assert.assertTrue(evals <= 150); // initial: 269\n        Assert.assertTrue(iters <= 150); // initial: 237",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..72e7554c2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+    public void testMinimizeMaximize() {\n+\n+        final int dim = 2;\n+        final double[] start = new double[dim];\n+        Arrays.fill(start, 0.5);\n+        final double[] steps = new double[dim];\n+        Arrays.fill(steps, 0.2);\n+        final MultivariateFunction function = new SumSquares();\n+        final NelderMead optimizer = new NelderMead();\n+        optimizer.setMaxEvaluations(1000);\n+        optimizer.setMaxIterations(1000);\n+        final PointValuePair optimum = optimizer.optimize(\n+                new MaxEval(1000),\n+                new ObjectiveFunction(function),\n+                GoalType.MINIMIZE,\n+                new InitialGuess(start),\n+                new SimpleBounds(new double[] { -1, -1 }, new double[] { 2, 2 }),\n+                new NelderMead.Simplex(steps));\n+\n+        // target is zero, assert that we can find a solution with a tolerance of 1e-6\n+        Assert.assertEquals(0.0, optimum.getValue(), 1e-6);\n+\n+        // verify that the number of iterations is within a certain range\n+        final int evals = optimizer.getEvaluations();\n+        final int iters = optimizer.getIterations();\n+        System.out.format(\"Nelder-Mead: num_evaluations=%d, num_iterations=%d\\n\", evals, iters);\n+        Assert.assertTrue(evals <= 150); // initial: 269\n+        Assert.assertTrue(iters <= 150); // initial: 237\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}