{
    "patch": "    if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n      // empty array[] can be folded to undefined if index is 0.\n      if (NodeUtil.isImmutableNode(right) && right.getDouble() == 0) {\n        Node undefinedResult = NodeUtil.newUndefinedNode(parent);\n        parent.replaceChild(n, undefinedResult);\n        reportCodeChange();\n        return undefinedResult;\n      } else {\n        return n;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..8c9fdcd5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,16 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n+      // empty array[] can be folded to undefined if index is 0.\n+      if (NodeUtil.isImmutableNode(right) && right.getDouble() == 0) {\n+        Node undefinedResult = NodeUtil.newUndefinedNode(parent);\n+        parent.replaceChild(n, undefinedResult);\n+        reportCodeChange();\n+        return undefinedResult;\n+      } else {\n+        return n;\n+      }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}