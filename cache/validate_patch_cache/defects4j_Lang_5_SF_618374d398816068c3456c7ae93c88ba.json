{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final String[] parts = str.split(\"_\");\n    final int len = parts.length;\n    if (len > 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final String language = parts[0];\n    if (language.length()!= 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    for (int i = 0; i < language.length(); i++) {\n        if (!Character.isLowerCase(language.charAt(i))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n\n    String country = \"\";\n    if (len >= 2) {\n        final String part = parts[1];\n        if (part.length() != 0 && part.length() != 2 && part.length() != 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        for (int i = 0; i < part.length(); i++) {\n            if (!Character.isUpperCase(part.charAt(i))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n        country = part;\n\n        if (len == 3) {\n            final String variant = parts[2];\n            if (variant.length() == 0) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            for (int i = 0; i < variant.length(); i++) {\n                final char ch = variant.charAt(i);\n                if (!Character.isDigit(ch) && !Character.isUpperCase(ch)) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n            }\n            country += \"_\" + variant;\n        }\n    }\n\n    return new Locale(language, country);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..79177038 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,58 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final String[] parts = str.split(\"_\");\n+    final int len = parts.length;\n+    if (len > 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final String language = parts[0];\n+    if (language.length()!= 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    for (int i = 0; i < language.length(); i++) {\n+        if (!Character.isLowerCase(language.charAt(i))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+    }\n+\n+    String country = \"\";\n+    if (len >= 2) {\n+        final String part = parts[1];\n+        if (part.length() != 0 && part.length() != 2 && part.length() != 3) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n+        for (int i = 0; i < part.length(); i++) {\n+            if (!Character.isUpperCase(part.charAt(i))) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n+        }\n+        country = part;\n+\n+        if (len == 3) {\n+            final String variant = parts[2];\n+            if (variant.length() == 0) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            for (int i = 0; i < variant.length(); i++) {\n+                final char ch = variant.charAt(i);\n+                if (!Character.isDigit(ch) && !Character.isUpperCase(ch)) {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+            country += \"_\" + variant;\n+        }\n     }\n \n+    return new Locale(language, country);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[]> but was:<[_P]>",
    "test_result": "FAIL"
}