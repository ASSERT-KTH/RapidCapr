{
    "patch": "          // Handle the case where the function is empty (e.g. immediately\n          // returns).\n          if (block.getFirstChild() == null) {\n            return true;\n          }\n          // Check if this is the block assigned to the variable.\n          return ref.getBasicBlock() == block;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..984bd99f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Handle the case where the function is empty (e.g. immediately\n+          // returns).\n+          if (block.getFirstChild() == null) {\n+            return true;\n+          }\n+          // Check if this is the block assigned to the variable.\n+          return ref.getBasicBlock() == block;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}