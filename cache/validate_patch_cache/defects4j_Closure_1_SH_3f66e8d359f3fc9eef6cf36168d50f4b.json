{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (var != null && !referenced.contains(var)) {\n          Node prev = lastArg.getPrevious();\n          if (prev != null && prev.isDefaultValue()) {\n            // removing a param with a default value needs special treatment\n            argList.replaceChild(prev, lastArg.removeFirstChild());\n          } else {\n            argList.removeChild(lastArg);\n          }\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n        lastArg = prev;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..76982167 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (var != null && !referenced.contains(var)) {\n+          Node prev = lastArg.getPrevious();\n+          if (prev != null && prev.isDefaultValue()) {\n+            // removing a param with a default value needs special treatment\n+            argList.replaceChild(prev, lastArg.removeFirstChild());\n+          } else {\n+            argList.removeChild(lastArg);\n+          }\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+        lastArg = prev;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}