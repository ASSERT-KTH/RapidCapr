{
    "patch": "public void testLANG_976() {\n        // Test formatDate with a date before 01/01/1970.\n        final Calendar cal = Calendar.getInstance();\n        cal.set(50, Calendar.JANUARY, 1, 12, 30, 45);\n\n        // SimpleDateFormat interpretation of 1st January 50AD at 12:30 is EST (-0500)\n        // hence the 17:00:45:000 output below.\n        final TimeZone tz = TimeZone.getTimeZone(\"GMT-08:00\");\n        assertEquals(\"Format produced incorrect format\",\n                     \"01/01/0050 05:30:45.000\", DateUtils.formatDate(cal.getTime(), \"MM/dd/yyyy HH:mm:ss.SSS\", tz));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..5dcc8fd2 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,17 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n-        }\n-        return regex;\n-    }\n+public void testLANG_976() {\n+        // Test formatDate with a date before 01/01/1970.\n+        final Calendar cal = Calendar.getInstance();\n+        cal.set(50, Calendar.JANUARY, 1, 12, 30, 45);\n+\n+        // SimpleDateFormat interpretation of 1st January 50AD at 12:30 is EST (-0500)\n+        // hence the 17:00:45:000 output below.\n+        final TimeZone tz = TimeZone.getTimeZone(\"GMT-08:00\");\n+        assertEquals(\"Format produced incorrect format\",\n+                     \"01/01/0050 05:30:45.000\", DateUtils.formatDate(cal.getTime(), \"MM/dd/yyyy HH:mm:ss.SSS\", tz));\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}