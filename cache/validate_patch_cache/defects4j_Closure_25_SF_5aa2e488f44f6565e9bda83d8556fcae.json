{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    boolean isUnknownType = false;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n            if (!ct.hasInstanceType()) {\n                // If the constructor function has no instance type, set it to Object.\n                type = getNativeType(OBJECT_TYPE);\n            } else {\n                type = ct.getInstanceType();\n            }\n        } else if (!constructorType.isUnknownType()){\n            // If the constructor type is not a constructor function,\n            // set the new expression to an unknown type.\n            type = getNativeType(UNKNOWN_TYPE);\n            isUnknownType = true;\n        }\n    }\n    \n    if (type != null) {\n        n.setJSType(type);\n\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n            JSType argType = arg.getJSType();\n\n            // If the argument type is undefined, assume it is any type.\n            if (argType != null && argType.isVoidType()) {\n                argType = getNativeType(UNKNOWN_TYPE);\n            }\n\n            if (type.isUnknownType() && !isUnknownType) {\n                // If the constructor function is unknown but not the constructor type,\n                // use the argument type to guess at the new expression's type.\n                type = argType;\n                n.setJSType(argType);\n            } else if (!type.isUnknownType() && argType != null) {\n                // If we know both the constructor and argument types, use them to set\n                // the new expression's type.\n                JSType leastSupertype = getNativeType(UNKNOWN_TYPE).getLeastSupertype(type, argType);\n                n.setJSType(leastSupertype);\n            }\n\n            scope = traverse(arg, scope);\n        }\n    } else {\n        // If we don't know the constructor type, set the new expression to an unknown type.\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..936d3751 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,63 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n+    boolean isUnknownType = false;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+            if (!ct.hasInstanceType()) {\n+                // If the constructor function has no instance type, set it to Object.\n+                type = getNativeType(OBJECT_TYPE);\n+            } else {\n+                type = ct.getInstanceType();\n+            }\n+        } else if (!constructorType.isUnknownType()){\n+            // If the constructor type is not a constructor function,\n+            // set the new expression to an unknown type.\n+            type = getNativeType(UNKNOWN_TYPE);\n+            isUnknownType = true;\n         }\n-      }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    \n+    if (type != null) {\n+        n.setJSType(type);\n+\n+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+            JSType argType = arg.getJSType();\n+\n+            // If the argument type is undefined, assume it is any type.\n+            if (argType != null && argType.isVoidType()) {\n+                argType = getNativeType(UNKNOWN_TYPE);\n+            }\n+\n+            if (type.isUnknownType() && !isUnknownType) {\n+                // If the constructor function is unknown but not the constructor type,\n+                // use the argument type to guess at the new expression's type.\n+                type = argType;\n+                n.setJSType(argType);\n+            } else if (!type.isUnknownType() && argType != null) {\n+                // If we know both the constructor and argument types, use them to set\n+                // the new expression's type.\n+                JSType leastSupertype = getNativeType(UNKNOWN_TYPE).getLeastSupertype(type, argType);\n+                n.setJSType(leastSupertype);\n+            }\n+\n+            scope = traverse(arg, scope);\n+        }\n+    } else {\n+        // If we don't know the constructor type, set the new expression to an unknown type.\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}