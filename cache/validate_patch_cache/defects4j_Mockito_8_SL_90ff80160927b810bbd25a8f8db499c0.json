{
    "patch": "        } else if (actualTypeArgument instanceof TypeVariable) {\n            Type resolvedActualTypeArgument = this.contextualActualTypeParameters.getOrDefault(actualTypeArgument, null);\n            if (resolvedActualTypeArgument != null) {\n                contextualActualTypeParameters.put(typeParameter, resolvedActualTypeArgument);\n            } else {\n                // In case actualTypeArgument is another unknown type variable with no context\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..9901b5aa6 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,16 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        } else if (actualTypeArgument instanceof TypeVariable) {\n+            Type resolvedActualTypeArgument = this.contextualActualTypeParameters.getOrDefault(actualTypeArgument, null);\n+            if (resolvedActualTypeArgument != null) {\n+                contextualActualTypeParameters.put(typeParameter, resolvedActualTypeArgument);\n+            } else {\n+                // In case actualTypeArgument is another unknown type variable with no context\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}