{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            // handle surrogate pairs properly\n            char c = input.charAt(pos);\n            if (Character.isSurrogate(c)) {\n                if (c < Character.MIN_LOW_SURROGATE || c > Character.MAX_HIGH_SURROGATE || pos == len - 1) {\n                    // invalid surrogate, write '?' as replacement\n                    out.write('?');\n                } else {\n                    char low = input.charAt(pos + 1);\n                    if (Character.isLowSurrogate(low)) {\n                        out.write(Character.toChars(Character.toCodePoint(c, low)));\n                        pos++; // consume low surrogate\n                    } else {\n                        // invalid surrogate, write '?' as replacement\n                        out.write('?');\n                    }\n                }\n            } else {\n                out.write(c);\n            }\n        } else {\n            for (int pt = 0; pt < consumed; pt++) {\n                char c = input.charAt(pos + pt);\n                if (Character.isHighSurrogate(c) && pt < consumed - 1 && Character.isLowSurrogate(input.charAt(pos + pt + 1))) {\n                    pt++; // consume low surrogate\n                }\n            }\n            pos += consumed;\n            pos--; // backtrack one position before incrementing\n        }\n        pos++;\n    }\n    out.flush();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..23939041 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,51 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            // handle surrogate pairs properly\n+            char c = input.charAt(pos);\n+            if (Character.isSurrogate(c)) {\n+                if (c < Character.MIN_LOW_SURROGATE || c > Character.MAX_HIGH_SURROGATE || pos == len - 1) {\n+                    // invalid surrogate, write '?' as replacement\n+                    out.write('?');\n+                } else {\n+                    char low = input.charAt(pos + 1);\n+                    if (Character.isLowSurrogate(low)) {\n+                        out.write(Character.toChars(Character.toCodePoint(c, low)));\n+                        pos++; // consume low surrogate\n+                    } else {\n+                        // invalid surrogate, write '?' as replacement\n+                        out.write('?');\n+                    }\n+                }\n+            } else {\n                 out.write(c);\n             }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n+        } else {\n             for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n+                char c = input.charAt(pos + pt);\n+                if (Character.isHighSurrogate(c) && pt < consumed - 1 && Character.isLowSurrogate(input.charAt(pos + pt + 1))) {\n+                    pt++; // consume low surrogate\n                 }\n-                pos--;\n             }\n-            pos++;\n+            pos += consumed;\n+            pos--; // backtrack one position before incrementing\n         }\n+        pos++;\n     }\n+    out.flush();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[\ud842\udfb7]A> but was:<[??]A>",
    "test_result": "FAIL"
}