{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == t.getScopeRoot()) {\n        // Ignore root node.\n        return;\n    }\n\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (!NodeUtil.isFunctionExpression(n) && parent.getType() == Token.SCRIPT) {\n                // Define declared function.\n                defineDeclaredFunction(n, parent);\n            } else if (NodeUtil.isFunctionExpression(n) && parent.getType() == Token.ASSIGN) {\n                // Define function expression assignment.\n                defineFunctionExpressionAssignment(n, parent);\n            }\n            break;\n        case Token.CATCH:\n            // Define catch variable.\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            // Define variables.\n            defineVar(n, parent);\n            break;\n        default:\n            // Attach literal types.\n            attachLiteralTypes(n);\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..290b2fb2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,37 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == t.getScopeRoot()) {\n+        // Ignore root node.\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (!NodeUtil.isFunctionExpression(n) && parent.getType() == Token.SCRIPT) {\n+                // Define declared function.\n+                defineDeclaredFunction(n, parent);\n+            } else if (NodeUtil.isFunctionExpression(n) && parent.getType() == Token.ASSIGN) {\n+                // Define function expression assignment.\n+                defineFunctionExpressionAssignment(n, parent);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            // Define catch variable.\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            // Define variables.\n+            defineVar(n, parent);\n+            break;\n+        default:\n+            // Attach literal types.\n+            attachLiteralTypes(n);\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}