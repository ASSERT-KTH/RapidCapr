{
    "patch": "    if (function.isArrowFunction()) {\n      return;\n    }\n    int expectedParams = referenced.size();\n    int i = 0;\n    for (Node arg : argList.children()) {\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        continue;\n      }\n      i++;\n      if (i == expectedParams) {\n        break;\n      }\n    }\n    while (i < argList.getChildCount()) {\n      argList.removeChild(argList.getLastChild());\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..eccb3d14 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (function.isArrowFunction()) {\n+      return;\n+    }\n+    int expectedParams = referenced.size();\n+    int i = 0;\n+    for (Node arg : argList.children()) {\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        continue;\n+      }\n+      i++;\n+      if (i == expectedParams) {\n+        break;\n+      }\n+    }\n+    while (i < argList.getChildCount()) {\n+      argList.removeChild(argList.getLastChild());\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}