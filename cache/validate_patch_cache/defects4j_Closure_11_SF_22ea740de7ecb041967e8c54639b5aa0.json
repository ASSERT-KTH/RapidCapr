{
    "patch": "public boolean getprop(String name, String def, String[] value) {\n    ArrayList<String> warnings = new ArrayList<String>();\n    boolean result = SystemProperties.getBoolean(\"ro.test_harness\", false);\n    if (result) {\n        try {\n            Class<?> cls = Class.forName(\"android.os.SystemProperties\");\n            Method getProp = cls.getDeclaredMethod(\"get\", String.class);\n            String propVal = (String)getProp.invoke(null, name);\n            if (propVal == null || propVal.length() == 0) {\n                value[0] = def;\n                warnings.add(\"ro.test_harness expected value not found: '\" + name + \"', using default: '\" + def + \"'\");\n            } else {\n                value[0] = propVal;\n            }\n        } catch (Exception e) {\n            value[0] = def;\n            warnings.add(\"Exception while retrieving system property: '\" + name + \"', using default: '\" + def + \"'\");\n        }\n    } else {\n        value[0] = def;\n        warnings.add(\"System property test harness is disabled, using default value: '\" + def + \"'\");\n    }\n\n    if (warnings.size() > 0) {\n        System.err.println(\"getprop warnings:\");\n        for (String warning : warnings) {\n            System.err.println(\"\\t\" + warning);\n        }\n        assertTrue(\"expected a warning\", warnings.size() > 0);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..f4a7da59 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String name, String def, String[] value) {\n+    ArrayList<String> warnings = new ArrayList<String>();\n+    boolean result = SystemProperties.getBoolean(\"ro.test_harness\", false);\n+    if (result) {\n+        try {\n+            Class<?> cls = Class.forName(\"android.os.SystemProperties\");\n+            Method getProp = cls.getDeclaredMethod(\"get\", String.class);\n+            String propVal = (String)getProp.invoke(null, name);\n+            if (propVal == null || propVal.length() == 0) {\n+                value[0] = def;\n+                warnings.add(\"ro.test_harness expected value not found: '\" + name + \"', using default: '\" + def + \"'\");\n+            } else {\n+                value[0] = propVal;\n+            }\n+        } catch (Exception e) {\n+            value[0] = def;\n+            warnings.add(\"Exception while retrieving system property: '\" + name + \"', using default: '\" + def + \"'\");\n+        }\n+    } else {\n+        value[0] = def;\n+        warnings.add(\"System property test harness is disabled, using default value: '\" + def + \"'\");\n+    }\n+\n+    if (warnings.size() > 0) {\n+        System.err.println(\"getprop warnings:\");\n+        for (String warning : warnings) {\n+            System.err.println(\"\\t\" + warning);\n+        }\n+        assertTrue(\"expected a warning\", warnings.size() > 0);\n+    }\n+\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}