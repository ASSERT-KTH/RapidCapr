{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // we are in the \"gap\" created by the transition, so we need\n                    // to use the offset before the transition if the local time\n                    // is before the transition, or the offset after the transition\n                    // if the local time is after the transition\n                    int offsetBefore = getOffset(nextLocal - 1);\n                    int offsetAfter = getOffset(nextLocal);\n                    if (offsetBefore == offsetAfter) {\n                        return offsetBefore;\n                    } else if (instantLocal - offsetLocal >= nextLocal) {\n                        return offsetAfter;\n                    } else {\n                        return offsetBefore;\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..44a81cbe 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,32 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // we are in the \"gap\" created by the transition, so we need\n+                    // to use the offset before the transition if the local time\n+                    // is before the transition, or the offset after the transition\n+                    // if the local time is after the transition\n+                    int offsetBefore = getOffset(nextLocal - 1);\n+                    int offsetAfter = getOffset(nextLocal);\n+                    if (offsetBefore == offsetAfter) {\n+                        return offsetBefore;\n+                    } else if (instantLocal - offsetLocal >= nextLocal) {\n+                        return offsetAfter;\n+                    } else {\n+                        return offsetBefore;\n+                    }\n+                }\n+            }\n+        }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}