{
    "patch": "public static Map<Character, Integer> countCharacters(String inputString) {\n    Map<Character, Integer> charCountMap = new HashMap<>();\n    if (inputString == null) {\n        return charCountMap;\n    }\n    inputString = inputString.toLowerCase();\n    for (char ch : inputString.toCharArray()) {\n        if (ch >= 'a' && ch <= 'z') {\n            charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);\n        }\n    }\n    return charCountMap;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..20ff23dec 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Character, Integer> countCharacters(String inputString) {\n+    Map<Character, Integer> charCountMap = new HashMap<>();\n+    if (inputString == null) {\n+        return charCountMap;\n+    }\n+    inputString = inputString.toLowerCase();\n+    for (char ch : inputString.toCharArray()) {\n+        if (ch >= 'a' && ch <= 'z') {\n+            charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);\n+        }\n+    }\n+    return charCountMap;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}