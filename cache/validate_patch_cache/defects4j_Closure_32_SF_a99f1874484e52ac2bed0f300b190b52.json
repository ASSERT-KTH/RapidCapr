{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    do {\n        switch (token) {\n            case STAR:\n                if (ignoreStar) {\n                    // Mark the position after the star as the new start of the line.\n                } else {\n                    // The star is part of the comment.\n                    if (builder.length() > 0) {\n                        builder.append(' ');\n                    }\n\n                    builder.append('*');\n                }\n\n                token = next();\n                ignoreStar = true;\n                continue;\n            case EOL:\n                if (option != WhitespaceOption.SINGLE_LINE) {\n                    builder.append(\"\\n\");\n                }\n\n                line = stream.getRemainingJSDocLine();\n                if (option != WhitespaceOption.PRESERVE) {\n                    line = line.trim();\n                }\n\n                token = next();\n                ignoreStar = false;\n                continue;\n            default:\n                ignoreStar = false;\n                state = State.SEARCHING_ANNOTATION;\n\n                if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n                        (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n                    String multilineText = builder.toString();\n\n                    if (option != WhitespaceOption.PRESERVE) {\n                        multilineText = multilineText.trim();\n                    }\n\n                    int endLineno = stream.getLineno();\n                    int endCharno = stream.getCharno();\n\n                    if (multilineText.length() > 0) {\n                        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n                    }\n\n                    return new ExtractionInfo(multilineText, token);\n                }\n\n                line = stream.getRemainingJSDocLine();\n                if (option != WhitespaceOption.PRESERVE) {\n                    line = line.trim();\n                }\n\n                if (!line.isEmpty()) {\n                    if (builder.length() > 0) {\n                        builder.append(' ');\n                    }\n                    builder.append(toString(token));\n                    builder.append(line);\n                }\n\n                if (token == JsDocToken.DIAGNOSTIC_GROUP) {\n                    token = consumeDiagnosticGroup();\n                    continue;\n                }\n\n                token = next();\n        }\n    } while (true);\n}\n\nprivate JsDocToken consumeDiagnosticGroup() {\n    StringBuilder builder = new StringBuilder();\n    DiagnosticType diagnosticType = null;\n\n    state = State.SEARCHING_ANNOTATION;\n    while (state != State.SEARCHING_INLINE_TAG) {\n        JsDocToken token = next();\n        if (token == EOC || token == EOF) {\n            break;\n        }\n        if (token == STAR) {\n            state = State.SEARCHING_DIAGNOSTICS_TYPE;\n        } else if (token == AVAILABLE_DIAGNOSTIC_GROUPS) {\n            diagnosticType = getDiagnosticType(builder.toString().trim());\n            state = State.SEARCHING_ANNOTATION;\n            break;\n        }\n        builder.append(toString(token));\n    }\n\n    if (diagnosticType != null) {\n        reportDiagnosticType(diagnosticType);\n    }\n\n    return state == State.SEARCHING_INLINE_TAG ? JsDocToken.AT : AVAILABLE_DIAGNOSTIC_GROUPS;\n}\n\nprivate DiagnosticType getDiagnosticType(String diagnosticName) {\n    for (DiagnosticType diagnosticType : Compiler.generatedDiagnosticTypes.values()) {\n        if (diagnosticName.equals(diagnosticType.key.getName())) {\n            return diagnosticType;\n        }\n    }\n    return null;\n}\n\nprivate void reportDiagnosticType(DiagnosticType diagnosticType) {\n    if (diagnosticType != null) {\n        warnings.add(diagnosticType);\n    }\n}\n\nprivate enum State {\n    SEARCHING_ANNOTATION,\n    SEARCHING_DIAGNOSTICS_TYPE,\n    SEARCHING_INLINE_TAG\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..f00384d0 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,12 +1326,9 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n+        return new ExtractionInfo(\"\", token);\n     }\n \n     stream.update();\n@@ -1341,7 +1338,7 @@ public final class JsDocInfoParser {\n     // Read the content from the first line.\n     String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+        line = line.trim();\n     }\n \n     StringBuilder builder = new StringBuilder();\n@@ -1352,81 +1349,128 @@ public final class JsDocInfoParser {\n \n     boolean ignoreStar = false;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n     do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n+        switch (token) {\n+            case STAR:\n+                if (ignoreStar) {\n+                    // Mark the position after the star as the new start of the line.\n+                } else {\n+                    // The star is part of the comment.\n+                    if (builder.length() > 0) {\n+                        builder.append(' ');\n+                    }\n \n-            builder.append('*');\n-          }\n+                    builder.append('*');\n+                }\n+\n+                token = next();\n+                ignoreStar = true;\n+                continue;\n+            case EOL:\n+                if (option != WhitespaceOption.SINGLE_LINE) {\n+                    builder.append(\"\\n\");\n+                }\n+\n+                line = stream.getRemainingJSDocLine();\n+                if (option != WhitespaceOption.PRESERVE) {\n+                    line = line.trim();\n+                }\n+\n+                token = next();\n+                ignoreStar = false;\n+                continue;\n+            default:\n+                ignoreStar = false;\n+                state = State.SEARCHING_ANNOTATION;\n+\n+                if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n+                        (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n+                    String multilineText = builder.toString();\n+\n+                    if (option != WhitespaceOption.PRESERVE) {\n+                        multilineText = multilineText.trim();\n+                    }\n \n-          token = next();\n-          continue;\n+                    int endLineno = stream.getLineno();\n+                    int endCharno = stream.getCharno();\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+                    if (multilineText.length() > 0) {\n+                        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+                    }\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n+                    return new ExtractionInfo(multilineText, token);\n+                }\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+                line = stream.getRemainingJSDocLine();\n+                if (option != WhitespaceOption.PRESERVE) {\n+                    line = line.trim();\n+                }\n \n-              // All tokens must be separated by a space.\n+                if (!line.isEmpty()) {\n+                    if (builder.length() > 0) {\n+                        builder.append(' ');\n+                    }\n+                    builder.append(toString(token));\n+                    builder.append(line);\n+                }\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+                if (token == JsDocToken.DIAGNOSTIC_GROUP) {\n+                    token = consumeDiagnosticGroup();\n+                    continue;\n+                }\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+                token = next();\n+        }\n+    } while (true);\n+}\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+private JsDocToken consumeDiagnosticGroup() {\n+    StringBuilder builder = new StringBuilder();\n+    DiagnosticType diagnosticType = null;\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+    state = State.SEARCHING_ANNOTATION;\n+    while (state != State.SEARCHING_INLINE_TAG) {\n+        JsDocToken token = next();\n+        if (token == EOC || token == EOF) {\n+            break;\n+        }\n+        if (token == STAR) {\n+            state = State.SEARCHING_DIAGNOSTICS_TYPE;\n+        } else if (token == AVAILABLE_DIAGNOSTIC_GROUPS) {\n+            diagnosticType = getDiagnosticType(builder.toString().trim());\n+            state = State.SEARCHING_ANNOTATION;\n+            break;\n+        }\n+        builder.append(toString(token));\n+    }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+    if (diagnosticType != null) {\n+        reportDiagnosticType(diagnosticType);\n+    }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+    return state == State.SEARCHING_INLINE_TAG ? JsDocToken.AT : AVAILABLE_DIAGNOSTIC_GROUPS;\n+}\n \n-          line = stream.getRemainingJSDocLine();\n+private DiagnosticType getDiagnosticType(String diagnosticName) {\n+    for (DiagnosticType diagnosticType : Compiler.generatedDiagnosticTypes.values()) {\n+        if (diagnosticName.equals(diagnosticType.key.getName())) {\n+            return diagnosticType;\n+        }\n+    }\n+    return null;\n+}\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+private void reportDiagnosticType(DiagnosticType diagnosticType) {\n+    if (diagnosticType != null) {\n+        warnings.add(diagnosticType);\n+    }\n+}\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+private enum State {\n+    SEARCHING_ANNOTATION,\n+    SEARCHING_DIAGNOSTICS_TYPE,\n+    SEARCHING_INLINE_TAG\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}