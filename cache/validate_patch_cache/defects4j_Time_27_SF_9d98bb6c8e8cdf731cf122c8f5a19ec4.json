{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    /* If there is only one element and it is a Separator, return a PeriodFormatter\n     * with the Separator as both the printer and parser. */\n    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        return new PeriodFormatter(sep, sep);\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    /* If the input is a singleton period printer or parser, create and return a\n     * PeriodFormatter with null in the corresponding position.\n     */\n    if (size == 1 && (comp[0] instanceof PeriodPrinter || comp[1] instanceof PeriodParser)) {\n        return notPrinter ? new PeriodFormatter(null, (PeriodParser) comp[1]) :\n                             new PeriodFormatter((PeriodPrinter) comp[0], null);\n    }\n\n    /* If there are two elements and both are a period printer or parser,\n     * create and return a PeriodFormatter with the two elements as the printer and\n     * parser.\n     *\n     * Note: We check isPeriodPrinting() and isParser() to ensure that the printer and\n     * parser are instances of the expected classes.\n     */\n    if (size == 2 && comp[0] instanceof PeriodPrinter && comp[1] instanceof PeriodParser &&\n        ((PeriodPrinter) comp[0]).isPrinter() && ((PeriodParser) comp[1]).isParser()) {\n\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n\n    /* If there is a Separator element, use it to join the printer and parser on the\n     * composite elements of the remaining List<Object>.\n     */\n    if (elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        return new PeriodFormatter(sep.finish(f.getPrinter(), f.getParser()), sep);\n    }\n\n    /* If none of the above conditions is met, it is an error case. Throw an\n     * exception.\n     */ \n    throw new IllegalArgumentException(\"Invalid input to PeriodFormatterBuilder\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..32c96e8c 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,58 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    /* If there is only one element and it is a Separator, return a PeriodFormatter\n+     * with the Separator as both the printer and parser. */\n+    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        return new PeriodFormatter(sep, sep);\n     }\n \n+    Object[] comp = createComposite(elementPairs);\n+\n+    /* If the input is a singleton period printer or parser, create and return a\n+     * PeriodFormatter with null in the corresponding position.\n+     */\n+    if (size == 1 && (comp[0] instanceof PeriodPrinter || comp[1] instanceof PeriodParser)) {\n+        return notPrinter ? new PeriodFormatter(null, (PeriodParser) comp[1]) :\n+                             new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    }\n+\n+    /* If there are two elements and both are a period printer or parser,\n+     * create and return a PeriodFormatter with the two elements as the printer and\n+     * parser.\n+     *\n+     * Note: We check isPeriodPrinting() and isParser() to ensure that the printer and\n+     * parser are instances of the expected classes.\n+     */\n+    if (size == 2 && comp[0] instanceof PeriodPrinter && comp[1] instanceof PeriodParser &&\n+        ((PeriodPrinter) comp[0]).isPrinter() && ((PeriodParser) comp[1]).isParser()) {\n+\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+\n+    /* If there is a Separator element, use it to join the printer and parser on the\n+     * composite elements of the remaining List<Object>.\n+     */\n+    if (elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        return new PeriodFormatter(sep.finish(f.getPrinter(), f.getParser()), sep);\n+    }\n+\n+    /* If none of the above conditions is met, it is an error case. Throw an\n+     * exception.\n+     */ \n+    throw new IllegalArgumentException(\"Invalid input to PeriodFormatterBuilder\");\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}