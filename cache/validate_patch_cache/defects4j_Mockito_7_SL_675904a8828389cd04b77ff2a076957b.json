{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0) {\n    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n}\nType boundType = bounds[0];\nif (boundType instanceof TypeVariable) {\n    boundType = getActualTypeArgumentFor((TypeVariable<?>) boundType);\n}\nif (boundType instanceof ParameterizedType) {\n    for (Type actualType : ((ParameterizedType) boundType).getActualTypeArguments()) {\n        registerTypeVariablesOn(actualType);\n    }\n} else if (!(boundType instanceof WildcardType) && !(boundType instanceof TypeVariable) && boundType != null) {\n    registerTypeVariablesOn(boundType);\n} else {\n    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..477b2f3a8 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0) {\n+    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+}\n+Type boundType = bounds[0];\n+if (boundType instanceof TypeVariable) {\n+    boundType = getActualTypeArgumentFor((TypeVariable<?>) boundType);\n+}\n+if (boundType instanceof ParameterizedType) {\n+    for (Type actualType : ((ParameterizedType) boundType).getActualTypeArguments()) {\n+        registerTypeVariablesOn(actualType);\n+    }\n+} else if (!(boundType instanceof WildcardType) && !(boundType instanceof TypeVariable) && boundType != null) {\n+    registerTypeVariablesOn(boundType);\n+} else {\n+    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}