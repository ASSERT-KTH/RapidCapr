{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank or null string is not a valid number\");\n    }\n\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (StringUtils.startsWithIgnoreCase(str, pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final String hex = str.substring(pfxLen);\n        if (hex.length() > 16) { // too many for long\n            return createBigInteger(hex);\n        }\n        return createLong(hex);\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    final int decPos = str.indexOf('.');\n    final int expPos = findExponent(str);\n\n    if (expPos == -1) { // no exponent\n        if (decPos == -1) { // no decimal point\n            if (!Character.isDigit(lastChar) && lastChar != '-') {\n                throw new NumberFormatException(\"Invalid number: \" + str);\n            }\n            return createLong(str);\n        }\n        if (!Character.isDigit(lastChar) && lastChar != 'f' && lastChar != 'F' && lastChar != 'd' && lastChar != 'D') {\n            throw new NumberFormatException(\"Invalid number: \" + str);\n        }\n        final String mant = str.substring(0, decPos);\n        final String dec = str.substring(decPos + 1, str.length());\n        if (mant.isEmpty() && dec.isEmpty()) {\n            throw new NumberFormatException(\"Invalid number: \" + str);\n        }\n        final int numDecimals = dec.length();\n        if ((mant.length() + numDecimals) > 16) {\n            return createBigDecimal(str);\n        } else if (numDecimals <= 7) {\n            return createFloat(str);\n        } else {\n            return createDouble(str);\n        }\n    }\n    if (!Character.isDigit(lastChar) && lastChar != 'f' && lastChar != 'F' && lastChar != 'd' && lastChar != 'D') {\n        throw new NumberFormatException(\"Invalid number: \" + str);\n    }\n    String mant;\n    String dec;\n    String exp;\n    if (decPos == -1) { // no decimal point, but has exponent\n        mant = str.substring(0, expPos);\n        exp = str.substring(expPos + 1, str.length());\n        dec = \"0\";\n    } else { // has decimal point and exponent\n        mant = str.substring(0, decPos);\n        dec = str.substring(decPos + 1, expPos);\n        exp = str.substring(expPos + 1, str.length());\n    }\n    if (!Character.isDigit(exp.charAt(0)) && exp.charAt(0) != '-') {\n        throw new NumberFormatException(\"Invalid number: \" + str);\n    }\n    final int numDecimals = dec.length();\n    final long exponent = Long.parseLong(exp);\n    if (mant.isEmpty() && dec.isEmpty()) {\n        throw new NumberFormatException(\"Invalid number: \" + str);\n    }\n    if (numDecimals > 16) { // too many decimal digits for any type\n        return createBigDecimal(str);\n    }\n    if (mant.length() + numDecimals > 16) { // convert to BigDecimal first\n        final BigDecimal bd = createBigDecimal(str);\n        return bd.toBigInteger().bitLength() <= 63 ? bd.longValue() : bd;\n    }\n    final double value = Double.parseDouble(str);\n    if (Double.isInfinite(value)) {\n        throw new NumberFormatException(\"Invalid number: \" + str);\n    }\n    if (exponent == 0L) {\n        return (value == 0.0d) ? 0L : ((mant.charAt(0) == '-') ? -1L : 1L) * Double.valueOf(value).longValue();\n    } else {\n        // Adjust the mantissa based on the exponent\n        final String adjustedMantissa = adjustExponent(mant, dec, exponent);\n        final double doubleValue = Double.parseDouble(adjustedMantissa);\n        if (Double.isInfinite(doubleValue)) {\n            throw new Numbe",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..4d3f84ef 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,171 +447,97 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n-        }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank or null string is not a valid number\");\n+    }\n \n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n+    int pfxLen = 0;\n+    for (final String pfx : hex_prefixes) {\n+        if (StringUtils.startsWithIgnoreCase(str, pfx)) {\n+            pfxLen += pfx.length();\n+            break;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+    }\n+    if (pfxLen > 0) { // we have a hex number\n+        final String hex = str.substring(pfxLen);\n+        if (hex.length() > 16) { // too many for long\n+            return createBigInteger(hex);\n+        }\n+        return createLong(hex);\n+    }\n \n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+    final char lastChar = str.charAt(str.length() - 1);\n+    final int decPos = str.indexOf('.');\n+    final int expPos = findExponent(str);\n \n+    if (expPos == -1) { // no exponent\n+        if (decPos == -1) { // no decimal point\n+            if (!Character.isDigit(lastChar) && lastChar != '-') {\n+                throw new NumberFormatException(\"Invalid number: \" + str);\n             }\n+            return createLong(str);\n         }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n+        if (!Character.isDigit(lastChar) && lastChar != 'f' && lastChar != 'F' && lastChar != 'd' && lastChar != 'D') {\n+            throw new NumberFormatException(\"Invalid number: \" + str);\n         }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n-            }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+        final String mant = str.substring(0, decPos);\n+        final String dec = str.substring(decPos + 1, str.length());\n+        if (mant.isEmpty() && dec.isEmpty()) {\n+            throw new NumberFormatException(\"Invalid number: \" + str);\n         }\n-        try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n-            }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+        final int numDecimals = dec.length();\n+        if ((mant.length() + numDecimals) > 16) {\n+            return createBigDecimal(str);\n+        } else if (numDecimals <= 7) {\n+            return createFloat(str);\n+        } else {\n+            return createDouble(str);\n         }\n-\n+    }\n+    if (!Character.isDigit(lastChar) && lastChar != 'f' && lastChar != 'F' && lastChar != 'd' && lastChar != 'D') {\n+        throw new NumberFormatException(\"Invalid number: \" + str);\n+    }\n+    String mant;\n+    String dec;\n+    String exp;\n+    if (decPos == -1) { // no decimal point, but has exponent\n+        mant = str.substring(0, expPos);\n+        exp = str.substring(expPos + 1, str.length());\n+        dec = \"0\";\n+    } else { // has decimal point and exponent\n+        mant = str.substring(0, decPos);\n+        dec = str.substring(decPos + 1, expPos);\n+        exp = str.substring(expPos + 1, str.length());\n+    }\n+    if (!Character.isDigit(exp.charAt(0)) && exp.charAt(0) != '-') {\n+        throw new NumberFormatException(\"Invalid number: \" + str);\n+    }\n+    final int numDecimals = dec.length();\n+    final long exponent = Long.parseLong(exp);\n+    if (mant.isEmpty() && dec.isEmpty()) {\n+        throw new NumberFormatException(\"Invalid number: \" + str);\n+    }\n+    if (numDecimals > 16) { // too many decimal digits for any type\n         return createBigDecimal(str);\n     }\n+    if (mant.length() + numDecimals > 16) { // convert to BigDecimal first\n+        final BigDecimal bd = createBigDecimal(str);\n+        return bd.toBigInteger().bitLength() <= 63 ? bd.longValue() : bd;\n+    }\n+    final double value = Double.parseDouble(str);\n+    if (Double.isInfinite(value)) {\n+        throw new NumberFormatException(\"Invalid number: \" + str);\n+    }\n+    if (exponent == 0L) {\n+        return (value == 0.0d) ? 0L : ((mant.charAt(0) == '-') ? -1L : 1L) * Double.valueOf(value).longValue();\n+    } else {\n+        // Adjust the mantissa based on the exponent\n+        final String adjustedMantissa = adjustExponent(mant, dec, exponent);\n+        final double doubleValue = Double.parseDouble(adjustedMantissa);\n+        if (Double.isInfinite(doubleValue)) {\n+            throw new Numbe\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: '(' or '[' expected",
    "test_result": "ERROR"
}