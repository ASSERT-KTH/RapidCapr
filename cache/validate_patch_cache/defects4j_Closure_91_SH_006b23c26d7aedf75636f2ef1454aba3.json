{
    "patch": "      if (n.getParent().getType() == Token.ASSIGN &&\n          n.getGrandparent().getType() == Token.OBJECTLIT) {\n        Node rvalue = n.getNext();\n        // Check if the function is being assigned as a method of an object literal\n        // in which case it could be a prototype.\n        if (rvalue != null &&\n            (rvalue.getType() == Token.FUNCTION ||\n             (rvalue.getType() == Token.NAME &&\n              getScope().getVar(rvalue.getString()) != null))) {\n          Node objectLitNode = n.getGrandparent();\n          Node keyNode = n.getFirstChild();\n          Preconditions.checkState(keyNode.isString());\n          String keyName = keyNode.getString();\n          if (objectLitNode.getBooleanProp(Node.IS_CONSTANT_KEY) ||\n              NodeUtil.referencesThis(objectLitNode.getFirstChild())) {\n            // If the object literal enclosing the method has a constant key or references 'this',\n            // then it cannot be a prototype property. The global object is an exception to this.\n            // See unit test \"testPrototypeProperty2\".\n            boolean isPrototypeOfGlobal = (objectLitNode.getParent() != null &&\n                                           objectLitNode.getParent().getType() == Token.EXPR_RESULT &&\n                                           objectLitNode.getParent().getParent() != null &&\n                                           objectLitNode.getParent().getParent().getType() == Token.SCRIPT);\n            if (!isPrototypeOfGlobal) {\n              return false;\n            }\n          }\n          // If the function is an inner function, then it has to be defined as a method of 'this' to\n          // have a 'lends' annotation.\n          // See unit test \"testLendsAnnotation4\".\n          if (NodeUtil.getFunctionBody(n) != null &&\n              !NodeUtil.referencesThis(NodeUtil.getFunctionBody(n))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3a3edc5a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,37 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent().getType() == Token.ASSIGN &&\n+          n.getGrandparent().getType() == Token.OBJECTLIT) {\n+        Node rvalue = n.getNext();\n+        // Check if the function is being assigned as a method of an object literal\n+        // in which case it could be a prototype.\n+        if (rvalue != null &&\n+            (rvalue.getType() == Token.FUNCTION ||\n+             (rvalue.getType() == Token.NAME &&\n+              getScope().getVar(rvalue.getString()) != null))) {\n+          Node objectLitNode = n.getGrandparent();\n+          Node keyNode = n.getFirstChild();\n+          Preconditions.checkState(keyNode.isString());\n+          String keyName = keyNode.getString();\n+          if (objectLitNode.getBooleanProp(Node.IS_CONSTANT_KEY) ||\n+              NodeUtil.referencesThis(objectLitNode.getFirstChild())) {\n+            // If the object literal enclosing the method has a constant key or references 'this',\n+            // then it cannot be a prototype property. The global object is an exception to this.\n+            // See unit test \"testPrototypeProperty2\".\n+            boolean isPrototypeOfGlobal = (objectLitNode.getParent() != null &&\n+                                           objectLitNode.getParent().getType() == Token.EXPR_RESULT &&\n+                                           objectLitNode.getParent().getParent() != null &&\n+                                           objectLitNode.getParent().getParent().getType() == Token.SCRIPT);\n+            if (!isPrototypeOfGlobal) {\n+              return false;\n+            }\n+          }\n+          // If the function is an inner function, then it has to be defined as a method of 'this' to\n+          // have a 'lends' annotation.\n+          // See unit test \"testLendsAnnotation4\".\n+          if (NodeUtil.getFunctionBody(n) != null &&\n+              !NodeUtil.referencesThis(NodeUtil.getFunctionBody(n))) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}