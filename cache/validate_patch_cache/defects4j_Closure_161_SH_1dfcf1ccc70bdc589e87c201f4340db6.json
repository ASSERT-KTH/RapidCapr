{
    "patch": "    if (left.getType() == Token.ARRAYLIT && left.hasChildren()) {\n      int intIndex = (int) right.getDouble();\n      if (intIndex < 0 || intIndex >= left.getChildCount()) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n      if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      }\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..8e59a87a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT && left.hasChildren()) {\n+      int intIndex = (int) right.getDouble();\n+      if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+      Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n+      if (elem.getType() == Token.EMPTY) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n+      }\n+      n.getParent().replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}