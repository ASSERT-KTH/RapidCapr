{
    "patch": "public static String decodeISO8859_1_ESCAPE(String input) {\n    StringBuffer output = new StringBuffer();\n    int i = 0;\n    char ch;\n    while (i < input.length()) {\n        if (input.charAt(i) != '\\\\') {\n            ch = input.charAt(i);\n            i++;\n        } else {\n            if (i < input.length() - 1 && input.charAt(i + 1) == 'u') {\n                ch = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n                i += 6;\n            } else {\n                ch = (char) Integer.parseInt(input.substring(i + 1, i + 3), 16);\n                i += 3;\n            }\n        }\n        output.append(ch);\n    }\n    return new String(output);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..06365be7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,27 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decodeISO8859_1_ESCAPE(String input) {\n+    StringBuffer output = new StringBuffer();\n+    int i = 0;\n+    char ch;\n+    while (i < input.length()) {\n+        if (input.charAt(i) != '\\\\') {\n+            ch = input.charAt(i);\n+            i++;\n+        } else {\n+            if (i < input.length() - 1 && input.charAt(i + 1) == 'u') {\n+                ch = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n+                i += 6;\n+            } else {\n+                ch = (char) Integer.parseInt(input.substring(i + 1, i + 3), 16);\n+                i += 3;\n+            }\n+        }\n+        output.append(ch);\n+    }\n+    return new String(output);\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}