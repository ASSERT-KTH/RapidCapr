{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                } else {\n                    // adjust again and recalc (diff should be zero now)\n                    final long instantReadjusted = nextLocal - offsetLocal;\n                    final int offsetReadjusted = getOffset(instantReadjusted);\n                    if (offsetReadjusted == offsetLocal) {\n                        return offsetAdjusted;\n                    } else {\n                        return offsetLocal;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9281a5c3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    // adjust again and recalc (diff should be zero now)\n+                    final long instantReadjusted = nextLocal - offsetLocal;\n+                    final int offsetReadjusted = getOffset(instantReadjusted);\n+                    if (offsetReadjusted == offsetLocal) {\n+                        return offsetAdjusted;\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}