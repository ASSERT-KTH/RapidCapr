{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.util.FastMath;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    // Find the maximum absolute value in each row\n    final int row = m.getRowDimension();\n    final int col = m.getColumnDimension();\n    double[] maxVal = new double[row];\n    for (int i = 0; i < row; ++i) {\n        maxVal[i] = m.getEntry(i, 0);\n        for (int j = 1; j < col; ++j) {\n            final double val = FastMath.abs(m.getEntry(i, j));\n            if (val > maxVal[i]) {\n                maxVal[i] = val;\n            }\n        }\n    }\n\n    // Scale the matrix using diagonal scaling\n    final double[][] scaledData = new double[row][col];\n    for (int i = 0; i < row; ++i) {\n        for (int j = 0; j < col; ++j) {\n            scaledData[i][j] = m.getEntry(i, j) / (maxVal[i] * maxVal[j]);\n        }\n    }\n\n    // Do the eigendecomposition on the scaled matrix\n    final RealMatrix scaledMatrix = new Array2DRowRealMatrix(scaledData);\n    final EigenDecomposition dec = new EigenDecomposition(scaledMatrix);\n    final RealMatrix sqrt = dec.getSquareRoot().scalarMultiply(FastMath.sqrt(row));\n\n    // Scale the result back to the original scale\n    final double[][] sqrtData = new double[row][col];\n    for (int i = 0; i < row; ++i) {\n        for (int j = 0; j < col; ++j) {\n            sqrtData[i][j] = maxVal[i] * sqrt.getEntry(i, j) * maxVal[j];\n        }\n    }\n\n    return new Array2DRowRealMatrix(sqrtData);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..07f826f9a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,47 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.util.FastMath;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Find the maximum absolute value in each row\n+    final int row = m.getRowDimension();\n+    final int col = m.getColumnDimension();\n+    double[] maxVal = new double[row];\n+    for (int i = 0; i < row; ++i) {\n+        maxVal[i] = m.getEntry(i, 0);\n+        for (int j = 1; j < col; ++j) {\n+            final double val = FastMath.abs(m.getEntry(i, j));\n+            if (val > maxVal[i]) {\n+                maxVal[i] = val;\n+            }\n+        }\n     }\n+\n+    // Scale the matrix using diagonal scaling\n+    final double[][] scaledData = new double[row][col];\n+    for (int i = 0; i < row; ++i) {\n+        for (int j = 0; j < col; ++j) {\n+            scaledData[i][j] = m.getEntry(i, j) / (maxVal[i] * maxVal[j]);\n+        }\n+    }\n+\n+    // Do the eigendecomposition on the scaled matrix\n+    final RealMatrix scaledMatrix = new Array2DRowRealMatrix(scaledData);\n+    final EigenDecomposition dec = new EigenDecomposition(scaledMatrix);\n+    final RealMatrix sqrt = dec.getSquareRoot().scalarMultiply(FastMath.sqrt(row));\n+\n+    // Scale the result back to the original scale\n+    final double[][] sqrtData = new double[row][col];\n+    for (int i = 0; i < row; ++i) {\n+        for (int j = 0; j < col; ++j) {\n+            sqrtData[i][j] = maxVal[i] * sqrt.getEntry(i, j) * maxVal[j];\n+        }\n+    }\n+\n+    return new Array2DRowRealMatrix(sqrtData);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}