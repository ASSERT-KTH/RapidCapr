{
    "patch": "public int getOffsetFromLocal(long localInstant) {\n    long localPrev = localInstant - MAX_MILLIS;\n    long localNext = localInstant + MAX_MILLIS;\n    int offsetPrev = getOffset(localPrev);\n    int offsetNext = getOffset(localNext);\n    if (offsetPrev == offsetNext) {\n        // we don't believe there is a transition happening in the vicinity\n        // we go with the normal way of getting the offset\n        return getOffset(localInstant);\n    } else if (offsetPrev > offsetNext) {\n        long transition = nextTransition(localPrev);\n        if (transition > localInstant || getOffset(transition) < offsetPrev) {\n            // the previous offset is still in use in this time zone\n            return offsetPrev;\n        } else {\n            return offsetNext;\n        }\n    } else {\n        long transition = previousTransition(localNext);\n        if (transition < localInstant || getOffset(transition) > offsetNext) {\n            // the next offset is already in use in this time zone\n            return offsetNext;\n        } else {\n            return offsetPrev;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..32c6c5a7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,33 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long localInstant) {\n+    long localPrev = localInstant - MAX_MILLIS;\n+    long localNext = localInstant + MAX_MILLIS;\n+    int offsetPrev = getOffset(localPrev);\n+    int offsetNext = getOffset(localNext);\n+    if (offsetPrev == offsetNext) {\n+        // we don't believe there is a transition happening in the vicinity\n+        // we go with the normal way of getting the offset\n+        return getOffset(localInstant);\n+    } else if (offsetPrev > offsetNext) {\n+        long transition = nextTransition(localPrev);\n+        if (transition > localInstant || getOffset(transition) < offsetPrev) {\n+            // the previous offset is still in use in this time zone\n+            return offsetPrev;\n+        } else {\n+            return offsetNext;\n+        }\n+    } else {\n+        long transition = previousTransition(localNext);\n+        if (transition < localInstant || getOffset(transition) > offsetNext) {\n+            // the next offset is already in use in this time zone\n+            return offsetNext;\n+        } else {\n+            return offsetPrev;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}