{
    "patch": "                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                long nextLocalWall = nextTransition(nextLocal + getStandardOffset(nextLocal));\n                long nextAdjustedWall = nextTransition(nextAdjusted + getStandardOffset(nextAdjusted));\n                if (nextLocalWall == nextAdjustedWall) {\n                    if (offsetLocal < offsetAdjusted) {\n                        return offsetLocal;\n                    } else {\n                        return offsetAdjusted;\n                    }\n                } else if (nextLocalWall < nextAdjustedWall) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;\n                }\n            } else {\n                long nextLocal = previousTransition(instantAdjusted);\n                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                long nextLocalWall = nextTransition(nextLocal + getStandardOffset(nextLocal));\n                long nextAdjustedWall = nextTransition(nextAdjusted + getStandardOffset(nextAdjusted));\n                if (nextLocalWall == nextAdjustedWall) {\n                    if (offsetLocal > offsetAdjusted) {\n                        return offsetLocal;\n                    } else {\n                        return offsetAdjusted;\n                    }\n                } else if (nextLocalWall > nextAdjustedWall) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e18ad7aa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                long nextLocalWall = nextTransition(nextLocal + getStandardOffset(nextLocal));\n+                long nextAdjustedWall = nextTransition(nextAdjusted + getStandardOffset(nextAdjusted));\n+                if (nextLocalWall == nextAdjustedWall) {\n+                    if (offsetLocal < offsetAdjusted) {\n+                        return offsetLocal;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                } else if (nextLocalWall < nextAdjustedWall) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                long nextLocal = previousTransition(instantAdjusted);\n+                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                long nextLocalWall = nextTransition(nextLocal + getStandardOffset(nextLocal));\n+                long nextAdjustedWall = nextTransition(nextAdjusted + getStandardOffset(nextAdjusted));\n+                if (nextLocalWall == nextAdjustedWall) {\n+                    if (offsetLocal > offsetAdjusted) {\n+                        return offsetLocal;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                } else if (nextLocalWall > nextAdjustedWall) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}