{
    "patch": "        if (offsetAdjusted == offsetLocal) {\n            return offsetAdjusted;\n        }\n        // need to ensure that time is always after the DST gap or hole\n        if (offsetLocal < offsetAdjusted) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                return offsetAdjusted;\n            }\n            if (nextLocal < nextAdjusted) {\n                return offsetLocal;\n            }\n            nextLocal = nextAdjusted;\n            while (true) {\n                long next = nextTransition(nextLocal);\n                if (next > instantLocal) {\n                    return offsetAdjusted;\n                }\n                if (next == nextLocal) {\n                    return offsetLocal;\n                }\n                nextLocal = next;\n            }\n        } else {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            if (prevLocal == prevAdjusted) {\n                return offsetAdjusted;\n            }\n            if (prevLocal + 1 >= instantLocal && nextTransition(prevLocal) == nextTransition(instantLocal)) {\n                return offsetAdjusted;\n            }\n            if (prevAdjusted < prevLocal) {\n                return offsetLocal;\n            }\n            prevLocal = prevAdjusted;\n            while (true) {\n                long prev = previousTransition(prevLocal);\n                if (prev >= instantLocal) {\n                    return offsetAdjusted;\n                }\n                if (prev == prevLocal) {\n                    return offsetLocal;\n                }\n                prevLocal = prev;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..301b22b2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,54 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetAdjusted == offsetLocal) {\n+            return offsetAdjusted;\n+        }\n+        // need to ensure that time is always after the DST gap or hole\n+        if (offsetLocal < offsetAdjusted) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            if (nextLocal < nextAdjusted) {\n+                return offsetLocal;\n+            }\n+            nextLocal = nextAdjusted;\n+            while (true) {\n+                long next = nextTransition(nextLocal);\n+                if (next > instantLocal) {\n+                    return offsetAdjusted;\n+                }\n+                if (next == nextLocal) {\n+                    return offsetLocal;\n+                }\n+                nextLocal = next;\n+            }\n+        } else {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            if (prevLocal == prevAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            if (prevLocal + 1 >= instantLocal && nextTransition(prevLocal) == nextTransition(instantLocal)) {\n+                return offsetAdjusted;\n+            }\n+            if (prevAdjusted < prevLocal) {\n+                return offsetLocal;\n+            }\n+            prevLocal = prevAdjusted;\n+            while (true) {\n+                long prev = previousTransition(prevLocal);\n+                if (prev >= instantLocal) {\n+                    return offsetAdjusted;\n+                }\n+                if (prev == prevLocal) {\n+                    return offsetLocal;\n+                }\n+                prevLocal = prev;\n+            }\n+        }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}