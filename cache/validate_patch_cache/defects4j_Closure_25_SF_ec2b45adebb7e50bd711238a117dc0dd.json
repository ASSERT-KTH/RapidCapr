{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  JSType constructorType = constructor.getJSType();\n  if (constructorType == null) {\n    constructorType = getNativeType(UNKNOWN_TYPE);\n  }\n\n  JSType type = null;\n\n  if (constructorType.isFunctionType()) {\n    FunctionType ct = constructorType.toMaybeFunctionType();\n    if (ct != null && ct.isConstructor()) {\n      type = ct.getInstanceType();\n    }\n  } else if (constructorType.isEnumElementType()) {\n    type = constructorType;\n  } else if (constructorType.isUnionType()) {\n    // Check if any of the union types is a constructor\n    for (JSType alternative : constructorType.getUnionMembers()) {\n      if (alternative.isFunctionType()) {\n        FunctionType ct = alternative.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          break;\n        }\n      }\n    }\n  }\n\n  // If we don't have a type yet, default to unknown type\n  if (type == null) {\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n\n  n.setJSType(type);\n\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..7cf648c1 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,51 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+\n+  JSType constructorType = constructor.getJSType();\n+  if (constructorType == null) {\n+    constructorType = getNativeType(UNKNOWN_TYPE);\n+  }\n+\n+  JSType type = null;\n+\n+  if (constructorType.isFunctionType()) {\n+    FunctionType ct = constructorType.toMaybeFunctionType();\n+    if (ct != null && ct.isConstructor()) {\n+      type = ct.getInstanceType();\n+    }\n+  } else if (constructorType.isEnumElementType()) {\n+    type = constructorType;\n+  } else if (constructorType.isUnionType()) {\n+    // Check if any of the union types is a constructor\n+    for (JSType alternative : constructorType.getUnionMembers()) {\n+      if (alternative.isFunctionType()) {\n+        FunctionType ct = alternative.toMaybeFunctionType();\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+          break;\n         }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n \n+  // If we don't have a type yet, default to unknown type\n+  if (type == null) {\n+    type = getNativeType(UNKNOWN_TYPE);\n+  }\n+\n+  n.setJSType(type);\n+\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}