{
    "patch": "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = lst1.stream().mapToInt(String::length).sum(); // use stream to calculate sum of lengths of all elements\n        int l2 = lst2.stream().mapToInt(String::length).sum();\n        \n        if (l1 <= l2)\n            return lst1;\n        else\n            return lst2; // else is not required here, as there are only 2 options, but added for clarity\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/TOTAL_MATCH.java b/src/main/java/humaneval/buggy/TOTAL_MATCH.java\nindex c7d8677..2b03139 100644\n--- a/src/main/java/humaneval/buggy/TOTAL_MATCH.java\n+++ b/src/main/java/humaneval/buggy/TOTAL_MATCH.java\n@@ -16,15 +16,12 @@ import java.util.List;\n \n public class TOTAL_MATCH {\n     public static List<String> total_match(List<String> lst1, List<String> lst2) {\n-        int l1 = 0;\n-        for (String st : lst1)\n-            l1 += st.length();\n-        int l2 = 0;\n-        for (String st : lst1)\n-            l2 = st.length();\n+        int l1 = lst1.stream().mapToInt(String::length).sum(); // use stream to calculate sum of lengths of all elements\n+        int l2 = lst2.stream().mapToInt(String::length).sum();\n         \n         if (l1 <= l2)\n             return lst1;\n-        return lst2;\n+        else\n+            return lst2; // else is not required here, as there are only 2 options, but added for clarity\n     }\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}