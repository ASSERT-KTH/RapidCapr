{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            // Check for compatibility between existing declared type and inferred type\n            JSType existingType = objType.getPropertyType(prop);\n            if (existingType != null) {\n              JSType newType = existingType.getLeastSupertype(propType);\n              if (newType.isBottom()) {\n                warnings.add(makeDeclaredPropInferredWarning(n, prop, existingType, propType));\n              } else if (!newType.equals(existingType)) {\n                objType.defineDeclaredProperty(prop, newType, null, false);\n                warnings.add(makeDeclaredPropInferredWarning(n, prop, existingType, newType));\n              }\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..ae5f2eae 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1130,10 +1130,23 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            // Check for compatibility between existing declared type and inferred type\n+            JSType existingType = objType.getPropertyType(prop);\n+            if (existingType != null) {\n+              JSType newType = existingType.getLeastSupertype(propType);\n+              if (newType.isBottom()) {\n+                warnings.add(makeDeclaredPropInferredWarning(n, prop, existingType, propType));\n+              } else if (!newType.equals(existingType)) {\n+                objType.defineDeclaredProperty(prop, newType, null, false);\n+                warnings.add(makeDeclaredPropInferredWarning(n, prop, existingType, newType));\n+              }\n+            }\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}