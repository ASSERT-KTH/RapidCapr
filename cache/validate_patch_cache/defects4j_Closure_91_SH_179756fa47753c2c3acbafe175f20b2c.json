{
    "patch": "    if (parent != null && parent.getType() == Token.CALL &&\n        n.getType() == Token.FUNCTION) {\n\n      if (NodeUtil.isGet(parent.getFirstChild()) &&\n          \"constructor\".equals(parent.getFirstChild().getLastChild().getString())) {\n        return false;\n      }\n\n      Node grandParent = parent.getParent();\n      if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n        Node expr = grandParent.getFirstChild();\n        if (expr.getType() == Token.ASSIGN) {\n          Node lhs = expr.getFirstChild();\n          if (lhs.getType() == Token.GETPROP) {\n            Node lhsFirstChild = lhs.getFirstChild();\n            if (lhs.getLastChild().getString().equals(\"prototype\") &&\n                (NodeUtil.isName(lhsFirstChild) || lhsFirstChild.getType() == Token.THIS)) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e0e06240 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,60 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (parent != null && parent.getType() == Token.CALL &&\n+        n.getType() == Token.FUNCTION) {\n+\n+      if (NodeUtil.isGet(parent.getFirstChild()) &&\n+          \"constructor\".equals(parent.getFirstChild().getLastChild().getString())) {\n+        return false;\n+      }\n+\n+      Node grandParent = parent.getParent();\n+      if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+        Node expr = grandParent.getFirstChild();\n+        if (expr.getType() == Token.ASSIGN) {\n+          Node lhs = expr.getFirstChild();\n+          if (lhs.getType() == Token.GETPROP) {\n+            Node lhsFirstChild = lhs.getFirstChild();\n+            if (lhs.getLastChild().getString().equals(\"prototype\") &&\n+                (NodeUtil.isName(lhsFirstChild) || lhsFirstChild.getType() == Token.THIS)) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}