{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    Object[] comp = createComposite(elementPairs);\n    if (size < 2) {\n        // No separator to deal with\n        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) comp[0],\n                notParser ? null : (PeriodParser) comp[1]);\n    } else {\n        Separator sep = (Separator) elementPairs.get(0);\n        if (size == 2) {\n            // Only one element to handle\n            Object obj = elementPairs.get(1);\n            if (obj instanceof PeriodPrinter) {\n                if (notPrinter) {\n                    return new PeriodFormatter(null, null);\n                }\n                return new PeriodFormatter((PeriodPrinter) obj, null);\n            } else if (obj instanceof PeriodParser) {\n                if (notParser) {\n                    return new PeriodFormatter(null, null);\n                }\n                return new PeriodFormatter(null, (PeriodParser) obj);\n            }\n            throw new IllegalArgumentException(\"Unknown element type: \" + obj.getClass().getName());\n        } else {\n            // Several elements to handle\n            List<Object> remainingElements = elementPairs.subList(1, size);\n            PeriodFormatter f = toFormatter(remainingElements, notPrinter, notParser);\n            PeriodPrinter p = f.getPrinter();\n            PeriodParser pp = f.getParser();\n            sep = sep.finish(p, pp);\n            return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) sep, \n                    notParser ? null : (PeriodParser) sep);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..58ecbc35 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,45 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    Object[] comp = createComposite(elementPairs);\n+    if (size < 2) {\n+        // No separator to deal with\n+        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) comp[0],\n+                notParser ? null : (PeriodParser) comp[1]);\n+    } else {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        if (size == 2) {\n+            // Only one element to handle\n+            Object obj = elementPairs.get(1);\n+            if (obj instanceof PeriodPrinter) {\n+                if (notPrinter) {\n+                    return new PeriodFormatter(null, null);\n+                }\n+                return new PeriodFormatter((PeriodPrinter) obj, null);\n+            } else if (obj instanceof PeriodParser) {\n+                if (notParser) {\n+                    return new PeriodFormatter(null, null);\n+                }\n+                return new PeriodFormatter(null, (PeriodParser) obj);\n+            }\n+            throw new IllegalArgumentException(\"Unknown element type: \" + obj.getClass().getName());\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            // Several elements to handle\n+            List<Object> remainingElements = elementPairs.subList(1, size);\n+            PeriodFormatter f = toFormatter(remainingElements, notPrinter, notParser);\n+            PeriodPrinter p = f.getPrinter();\n+            PeriodParser pp = f.getParser();\n+            sep = sep.finish(p, pp);\n+            return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) sep, \n+                    notParser ? null : (PeriodParser) sep);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}