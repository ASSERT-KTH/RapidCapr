{
    "patch": "public static String escape(String s) {\n    int length = s.length();\n    StringBuffer sb = new StringBuffer(length + length / 10);\n    for (int i = 0; i < length; i++) {\n        char c = s.charAt(i);\n        switch (c) {\n          case '\\\"': sb.append(\"\\\\\\\"\"); break;\n          case '\\\\': sb.append(\"\\\\\\\\\"); break;\n          case '\\n': sb.append(\"\\\\n\"); break;\n          case '\\r': sb.append(\"\\\\r\"); break;\n          case '\\t': sb.append(\"\\\\t\"); break;\n          case '\\b': sb.append(\"\\\\b\"); break;\n          case '\\f': sb.append(\"\\\\f\"); break;\n          case '/':\n            if (i > 0 && s.charAt(i-1) == '<') {\n                sb.append(\"\\\\/\");\n            } else {\n                sb.append(\"/\");\n            }\n            break;\n          default:\n            if (c < ' ' || (c >= '\\u0080' && c < '\\u00a0') ||\n                (c >= '\\u2000' && c < '\\u2100')) {\n                String hex = \"0123456789ABCDEF\";\n                sb.append(\"\\\\u\");\n                sb.append(hex.charAt(c >> 12));\n                sb.append(hex.charAt((c >> 8) & 0x0f));\n                sb.append(hex.charAt((c >> 4) & 0x0f));\n                sb.append(hex.charAt(c & 0x0f));\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}