{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    int newValue = values[fieldIndex] + valueToAdd;\n    if (newValue < 0) { // handle negative values properly\n        do {\n            try {\n                // try and adjust to same day of month\n                values[fieldIndex] = newValue;\n                partial = partial.with(fieldIndex, newValue);\n                break;\n            } catch (IllegalFieldValueException ignore) {\n                // The day doesn't exist for the new month, continue subtracting days.\n                newValue += 1;\n            }\n        } while (true);\n        values = partial.getChronology().get(partial, partial.getChronology().set(partial, 0L)); // normalize the new partial\n        values[fieldIndex] = newValue; // update the new partial with correct value for fieldIndex\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        instant = add(instant, valueToAdd >= 0 ? Math.floorDiv(valueToAdd, 12) : Math.floorDiv(-valueToAdd, 13));\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2f3ae2ae 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,42 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    int newValue = values[fieldIndex] + valueToAdd;\n+    if (newValue < 0) { // handle negative values properly\n+        do {\n+            try {\n+                // try and adjust to same day of month\n+                values[fieldIndex] = newValue;\n+                partial = partial.with(fieldIndex, newValue);\n+                break;\n+            } catch (IllegalFieldValueException ignore) {\n+                // The day doesn't exist for the new month, continue subtracting days.\n+                newValue += 1;\n+            }\n+        } while (true);\n+        values = partial.getChronology().get(partial, partial.getChronology().set(partial, 0L)); // normalize the new partial\n+        values[fieldIndex] = newValue; // update the new partial with correct value for fieldIndex\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = add(instant, valueToAdd >= 0 ? Math.floorDiv(valueToAdd, 12) : Math.floorDiv(-valueToAdd, 13));\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}