{
    "patch": "public static String escape(String source, String encoding)\n        throws UnsupportedEncodingException{\n    String res = null;\n    if(source!=null){\n        byte[] bytes = source.getBytes(encoding);\n        StringBuilder buffer = new StringBuilder(bytes.length);\n        for(int i=0, j=0; i<bytes.length; i++){\n            byte b = bytes[i];\n            if(b=='\"'){\n                buffer.append(\"&quot;\");\n            }\n            else if(b=='&'){\n                buffer.append(\"&amp;\");\n            }\n            else if(b=='\\\\'){\n                buffer.append(\"\\\\\\\\\");\n            }\n            else if(b=='<'){\n                buffer.append(\"&lt;\");\n            }\n            else if(b=='>'){\n                buffer.append(\"&gt;\");\n            }\n            else if(b=='\\r'){\n                buffer.append(\"\\\\r\");\n            }\n            else if(b=='\\n'){\n                buffer.append(\"\\\\n\");\n            }\n            else if(b=='\\t'){\n                buffer.append(\"\\\\t\");\n            }\n            else if((b >= 0x00 && b <= 0x1F) ||\n                    (b >= 0x7F && b <= 0x9F)){\n                buffer.append(\"&#\");\n                buffer.append(Integer.toString(b,10));\n                buffer.append(';');\n            }\n            else{\n                buffer.append((char)b);\n            }\n        }\n        res = buffer.toString();\n    }\n    return res;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c5fc286f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,52 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escape(String source, String encoding)\n+        throws UnsupportedEncodingException{\n+    String res = null;\n+    if(source!=null){\n+        byte[] bytes = source.getBytes(encoding);\n+        StringBuilder buffer = new StringBuilder(bytes.length);\n+        for(int i=0, j=0; i<bytes.length; i++){\n+            byte b = bytes[i];\n+            if(b=='\"'){\n+                buffer.append(\"&quot;\");\n+            }\n+            else if(b=='&'){\n+                buffer.append(\"&amp;\");\n+            }\n+            else if(b=='\\\\'){\n+                buffer.append(\"\\\\\\\\\");\n+            }\n+            else if(b=='<'){\n+                buffer.append(\"&lt;\");\n+            }\n+            else if(b=='>'){\n+                buffer.append(\"&gt;\");\n+            }\n+            else if(b=='\\r'){\n+                buffer.append(\"\\\\r\");\n+            }\n+            else if(b=='\\n'){\n+                buffer.append(\"\\\\n\");\n+            }\n+            else if(b=='\\t'){\n+                buffer.append(\"\\\\t\");\n+            }\n+            else if((b >= 0x00 && b <= 0x1F) ||\n+                    (b >= 0x7F && b <= 0x9F)){\n+                buffer.append(\"&#\");\n+                buffer.append(Integer.toString(b,10));\n+                buffer.append(';');\n+            }\n+            else{\n+                buffer.append((char)b);\n+            }\n+        }\n+        res = buffer.toString();\n+    }\n+    return res;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}