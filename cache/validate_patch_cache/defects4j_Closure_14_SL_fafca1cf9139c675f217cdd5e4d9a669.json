{
    "patch": "else {\n  List<ControlFlowGraph.Branch> branches = cfa.getBranches(target);\n  int size = branches.size();\n  Preconditions.checkState(size == 1, \"Expected number of branches: 1. Found: %s.\", size);\n  Branch branch = branches.get(0);\n  cfa.createEdge(fromNode, branch, target);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..47cf6a19 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,13 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+else {\n+  List<ControlFlowGraph.Branch> branches = cfa.getBranches(target);\n+  int size = branches.size();\n+  Preconditions.checkState(size == 1, \"Expected number of branches: 1. Found: %s.\", size);\n+  Branch branch = branches.get(0);\n+  cfa.createEdge(fromNode, branch, target);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}