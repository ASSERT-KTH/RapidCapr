{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n\n    if (!parent.isVar()) {\n      // Node is in a non-variable declaration so use as an alias is not allowed.\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    } else {\n      NodeList names = parent.getSecondChild().getChildren();\n\n      for (int i = 0; i < names.getLength(); i++) {\n        Node aliasNode = names.get(i);\n\n        if (aliasNode.getString().equals(n.getString())) {\n          // This is the correct alias node.\n          // Alias of self should not be reported.\n          continue;\n        }\n\n        String aliasName = aliasNode.getString();\n        Var aliasVar = scope.getVar(aliasName);\n\n        if (aliasVar == null) {\n          // Alias variable not found.\n          report(t, aliasNode, UNDEFINED_NAME, aliasName);\n        } else {\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          aliases.put(aliasName, aliasVar);\n          transformation.addAlias(aliasName, qualifiedName);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..63a39db5 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,43 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+\n+    if (!parent.isVar()) {\n+      // Node is in a non-variable declaration so use as an alias is not allowed.\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+    } else {\n+      NodeList names = parent.getSecondChild().getChildren();\n+\n+      for (int i = 0; i < names.getLength(); i++) {\n+        Node aliasNode = names.get(i);\n+\n+        if (aliasNode.getString().equals(n.getString())) {\n+          // This is the correct alias node.\n+          // Alias of self should not be reported.\n+          continue;\n         }\n+\n+        String aliasName = aliasNode.getString();\n+        Var aliasVar = scope.getVar(aliasName);\n+\n+        if (aliasVar == null) {\n+          // Alias variable not found.\n+          report(t, aliasNode, UNDEFINED_NAME, aliasName);\n+        } else {\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+          aliases.put(aliasName, aliasVar);\n+          transformation.addAlias(aliasName, qualifiedName);\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}