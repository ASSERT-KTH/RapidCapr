{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal getters/setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // For ES6 rest parameter.\n    Node maybeRestArg = argList.getNext();\n    while (maybeRestArg != null) {\n      if (NodeUtil.isRestArg(maybeRestArg)) {\n        maybeRestArg = maybeRestArg.removeFirstChild();\n        break;\n      }\n      if (!NodeUtil.isName(maybeRestArg)) {\n        break;\n      }\n      maybeRestArg = maybeRestArg.getNext();\n    }\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced formal args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (lastArg == maybeRestArg) {\n          break;\n        }\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (var == null || referenced.contains(var)) {\n          break;\n        }\n        Node defaultValue = lastArg.getFirstChild();\n        if (defaultValue != null) {\n          defaultValue.detach();\n        }\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1bc8c5a0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal getters/setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // For ES6 rest parameter.\n+    Node maybeRestArg = argList.getNext();\n+    while (maybeRestArg != null) {\n+      if (NodeUtil.isRestArg(maybeRestArg)) {\n+        maybeRestArg = maybeRestArg.removeFirstChild();\n+        break;\n+      }\n+      if (!NodeUtil.isName(maybeRestArg)) {\n+        break;\n+      }\n+      maybeRestArg = maybeRestArg.getNext();\n+    }\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced formal args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (lastArg == maybeRestArg) {\n+          break;\n+        }\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (var == null || referenced.contains(var)) {\n+          break;\n+        }\n+        Node defaultValue = lastArg.getFirstChild();\n+        if (defaultValue != null) {\n+          defaultValue.detach();\n+        }\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}