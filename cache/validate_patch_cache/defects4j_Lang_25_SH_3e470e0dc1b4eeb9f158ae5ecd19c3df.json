{
    "patch": "if (c >= (byte) 'A' && c <= (byte) 'F') {\n    ch = (byte) ((ch << 4) + 10 + c - 'A');\n} else if (c >= (byte) 'a' && c <= (byte) 'f') {\n    ch = (byte) ((ch << 4) + 10 + c - 'a');\n} else if (c >= (byte) '0' && c <= (byte) '9') {\n    ch = (byte) ((ch << 4) + c - '0');\n} else if (c == (byte)';'){\n    buffer.append((char) ch);\n    ch = (byte) 0;\n} else {\n    buffer.append(\"Wrong character at \");\n    buffer.append((char)ch).append((char)c);\n    success = false;\n    // missing code goes here\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}