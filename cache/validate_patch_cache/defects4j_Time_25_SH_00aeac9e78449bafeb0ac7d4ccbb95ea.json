{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    } else {\n                        // use the newly calculated adjusted offset\n                        return getOffset(nextLocal);\n                    }\n                } else {\n                    // we need to go backwards to the previous DST transition\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                    if (prevLocal != prevAdjusted) {\n                        // if not transition twice, use the standard offset\n                        if (prevLocal + offsetLocal == prevAdjusted + offsetAdjusted) {\n                            return offsetAdjusted;\n                        } else {\n                            // if transition twice, use the previous offset\n                            return getOffset(prevLocal);\n                        }\n                    } else {\n                        // if no transition, use the standard offset\n                        return offsetAdjusted;\n                    }\n                }\n            }\n            return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9b251fc1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    } else {\n+                        // use the newly calculated adjusted offset\n+                        return getOffset(nextLocal);\n+                    }\n+                } else {\n+                    // we need to go backwards to the previous DST transition\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                    if (prevLocal != prevAdjusted) {\n+                        // if not transition twice, use the standard offset\n+                        if (prevLocal + offsetLocal == prevAdjusted + offsetAdjusted) {\n+                            return offsetAdjusted;\n+                        } else {\n+                            // if transition twice, use the previous offset\n+                            return getOffset(prevLocal);\n+                        }\n+                    } else {\n+                        // if no transition, use the standard offset\n+                        return offsetAdjusted;\n+                    }\n+                }\n+            }\n+            return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}