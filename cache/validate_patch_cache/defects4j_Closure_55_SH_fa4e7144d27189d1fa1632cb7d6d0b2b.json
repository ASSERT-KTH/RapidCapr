{
    "patch": "if (NodeUtil.isFunctionExpression(n)) {\n  Node parent = n.getParent();\n  if (parent != null) {\n    // Check if parent is one of the accepted types\n    int parentType = parent.getType();\n    if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n        parentType == Token.VAR || parentType == Token.RETURN ||\n        parentType == Token.BLOCK && parent.getParent() != null &&\n        parent.getParent().getType() == Token.FUNCTION) {\n      return true;\n    }\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..73b5c352 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,20 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (NodeUtil.isFunctionExpression(n)) {\n+  Node parent = n.getParent();\n+  if (parent != null) {\n+    // Check if parent is one of the accepted types\n+    int parentType = parent.getType();\n+    if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n+        parentType == Token.VAR || parentType == Token.RETURN ||\n+        parentType == Token.BLOCK && parent.getParent() != null &&\n+        parent.getParent().getType() == Token.FUNCTION) {\n+      return true;\n+    }\n+  }\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}