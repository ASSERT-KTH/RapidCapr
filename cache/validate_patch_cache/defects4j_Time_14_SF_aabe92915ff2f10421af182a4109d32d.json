{
    "patch": "public int[] add(ReadablePartial partial, int[] values, int fieldIndex, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (fieldIndex == 1) {\n        int month = values[0];\n        int dayOfMonth = values[1];\n\n        // Compute new month and new year\n        int newMonth = ((((month - 1) + valueToAdd) % 12) + 12) % 12 + 1;\n        int yearsToAdd = (((month - 1) + valueToAdd) / 12);\n\n        // Compute new day of month\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newMonth);\n        int newDayOfMonth = Math.min(dayOfMonth, maxDayOfMonth);\n\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == 0) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonth);\n            } else if (i == 1) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newDayOfMonth);\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n\n        // Add years to handle overflow case\n        if (yearsToAdd != 0) {\n            instant = iChronology.years().add(instant, yearsToAdd);\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..0882f7b4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int[] values, int fieldIndex, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (fieldIndex == 1) {\n+        int month = values[0];\n+        int dayOfMonth = values[1];\n+\n+        // Compute new month and new year\n+        int newMonth = ((((month - 1) + valueToAdd) % 12) + 12) % 12 + 1;\n+        int yearsToAdd = (((month - 1) + valueToAdd) / 12);\n+\n+        // Compute new day of month\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newMonth);\n+        int newDayOfMonth = Math.min(dayOfMonth, maxDayOfMonth);\n+\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == 0) {\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonth);\n+            } else if (i == 1) {\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newDayOfMonth);\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        // Add years to handle overflow case\n+        if (yearsToAdd != 0) {\n+            instant = iChronology.years().add(instant, yearsToAdd);\n+        }\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Maximum value exceeded for add",
    "test_result": "FAIL"
}