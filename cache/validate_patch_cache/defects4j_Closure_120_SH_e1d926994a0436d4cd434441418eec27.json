{
    "patch": "      Reference ref = getInitializingReference();\n      if (ref != null) {\n        if (ref.isVarDeclaration()) {\n          return true;\n        } else if (ref.isSimpleAssignmentToName()) {\n          BasicBlock initBlock = ref.getBasicBlock();\n          if (initBlock.equals(block)) {\n            return true;\n          }\n>>> [ INFILL ] <<<\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ff47bf6f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Reference ref = getInitializingReference();\n+      if (ref != null) {\n+        if (ref.isVarDeclaration()) {\n+          return true;\n+        } else if (ref.isSimpleAssignmentToName()) {\n+          BasicBlock initBlock = ref.getBasicBlock();\n+          if (initBlock.equals(block)) {\n+            return true;\n+          }\n+>>> [ INFILL ] <<<\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}