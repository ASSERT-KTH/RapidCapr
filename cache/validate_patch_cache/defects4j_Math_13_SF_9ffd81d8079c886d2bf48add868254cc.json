{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (isPositiveDefinite(m)) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } else {\n        // Matrix is not positive definite, return null or throw an exception\n        return null;\n    }\n}\n\nprivate boolean isPositiveDefinite(RealMatrix m) {\n    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    return dec.isSPD();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cb23acb3c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (isPositiveDefinite(m)) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } else {\n+        // Matrix is not positive definite, return null or throw an exception\n+        return null;\n     }\n }\n+\n+private boolean isPositiveDefinite(RealMatrix m) {\n+    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    return dec.isSPD();\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}