{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // compute the contracted simplex\n                    final RealPointValuePair contracted = evaluateNewSimplex(reflectedSimplex, gamma, comparator);\n                    if (comparator.compare(contracted, reflected) <= 0) {\n                        // accept the contracted simplex\n                        simplex = contracted.getPoint() == null ?\n                            new RealPointValuePair[] {best} : contracted.getPoint();\n                    } else {\n                        // accept the expanded simplex\n                        simplex = expanded.getPoint() == null ? reflectedSimplex : expanded.getPoint();\n                    }\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            // convergence check\n                final double d1 = best.getValue();\n                final double[] x = best.getPoint();\n                double x1Max = 0;\n                for (int i = 0; i < getDimension(); i++) {\n                    final double x1 = FastMath.abs(x[i] - original[original.length - 1].getPoint()[i]);\n                    x1Max = FastMath.max(x1Max, x1);\n                }\n                if (d1 <= yTolerance + ftol * 0.5 *\n                        (FastMath.abs(d1) + comparator.compare(original[original.length - 1],\n                                                                original[0]) * 0.5)) {\n                    setResult(best);\n                    return;\n                }\n                if (getIterations() >= maxIterations) {\n                    throw new OptimizationException(LocalizedFormats.MAXIMUM_NUMBER_OF_ITERATIONS_EXCEEDED,\n                                                     maxIterations);\n                }\n            } else {\n                // perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint() == null ?\n                            new RealPointValuePair[] {best} : contracted.getPoint();\n                } else {\n                    // perform a shrink step\n                    final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n                    if (comparator.compare(shrinkedSimplex[0], original[0]) == 0) {\n\n            // convergence check\n                        final double d1 = best.getValue();\n                        final double[] x = best.getPoint();\n                        double x1Max = 0;\n                        for (int i = 0; i < getDimension(); i++) {\n                            final double x1 = FastMath.abs(x[i] - original[original.length - 1].getPoint()[i]);\n                            x1Max = FastMath.max(x1Max, x1);\n                        }\n                        if (d1 <= yTolerance + ftol * 0.5 *\n                                (FastMath.abs(d1) + comparator.compare(original[original.length - 1],\n                                                                        original[0]) * 0.5)) {\n                            setResult(best);\n                            return;\n                        }\n                        if (getIterations() >= maxIterations) {\n                            throw new OptimizationException(LocalizedFormats.MAXIMUM_NUMBER_OF_ITERATIONS_EXCEEDED,\n                                                             maxIterations);\n                        }\n                        return;\n                    }\n                    simplex = shrinkedSimplex;\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..1f4555ebd 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,27 +75,77 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // compute the contracted simplex\n+                    final RealPointValuePair contracted = evaluateNewSimplex(reflectedSimplex, gamma, comparator);\n+                    if (comparator.compare(contracted, reflected) <= 0) {\n+                        // accept the contracted simplex\n+                        simplex = contracted.getPoint() == null ?\n+                            new RealPointValuePair[] {best} : contracted.getPoint();\n+                    } else {\n+                        // accept the expanded simplex\n+                        simplex = expanded.getPoint() == null ? reflectedSimplex : expanded.getPoint();\n+                    }\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            // convergence check\n+                final double d1 = best.getValue();\n+                final double[] x = best.getPoint();\n+                double x1Max = 0;\n+                for (int i = 0; i < getDimension(); i++) {\n+                    final double x1 = FastMath.abs(x[i] - original[original.length - 1].getPoint()[i]);\n+                    x1Max = FastMath.max(x1Max, x1);\n+                }\n+                if (d1 <= yTolerance + ftol * 0.5 *\n+                        (FastMath.abs(d1) + comparator.compare(original[original.length - 1],\n+                                                                original[0]) * 0.5)) {\n+                    setResult(best);\n+                    return;\n+                }\n+                if (getIterations() >= maxIterations) {\n+                    throw new OptimizationException(LocalizedFormats.MAXIMUM_NUMBER_OF_ITERATIONS_EXCEEDED,\n+                                                     maxIterations);\n+                }\n+            } else {\n+                // perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint() == null ?\n+                            new RealPointValuePair[] {best} : contracted.getPoint();\n+                } else {\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n+                    if (comparator.compare(shrinkedSimplex[0], original[0]) == 0) {\n+\n+            // convergence check\n+                        final double d1 = best.getValue();\n+                        final double[] x = best.getPoint();\n+                        double x1Max = 0;\n+                        for (int i = 0; i < getDimension(); i++) {\n+                            final double x1 = FastMath.abs(x[i] - original[original.length - 1].getPoint()[i]);\n+                            x1Max = FastMath.max(x1Max, x1);\n+                        }\n+                        if (d1 <= yTolerance + ftol * 0.5 *\n+                                (FastMath.abs(d1) + comparator.compare(original[original.length - 1],\n+                                                                        original[0]) * 0.5)) {\n+                            setResult(best);\n+                            return;\n+                        }\n+                        if (getIterations() >= maxIterations) {\n+                            throw new OptimizationException(LocalizedFormats.MAXIMUM_NUMBER_OF_ITERATIONS_EXCEEDED,\n+                                                             maxIterations);\n+                        }\n+                        return;\n+                    }\n+                    simplex = shrinkedSimplex;\n+                }\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}