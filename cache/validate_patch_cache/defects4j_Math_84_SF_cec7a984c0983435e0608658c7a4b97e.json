{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws TooManyEvaluationsException, OptimizationException, IllegalArgumentException {\n\n    while (getIterations() < maxIterations) {\n        incrementIterationsCounter();\n\n        // reflect the worst point by creating the reflected point\n        final RealPointValuePair reflected = evaluateNewSimplex(original, alpha, comparator);\n        if (comparator.compare(reflected, original[0]) < 0) {\n\n            // expand the simplex in this direction\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(reflected, expanded) < 0) {\n                original[n] = expanded;\n            } else {\n                original[n] = reflected;\n            }\n\n        } else {\n            // Check if a one dimensional contraction is needed\n            final boolean singleContract = comparator.compare(reflected, original[n - 1]) >= 0\n                    && comparator.compare(reflected, original[n]) < 0;\n            if (singleContract) {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, original[n]) < 0) {\n                    original[n] = contracted;\n                }\n            } else {\n                // Perform a multi-dimensional contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, chi, comparator);\n                if (comparator.compare(contracted, original[n]) < 0) {\n                    original[n] = contracted;\n                } else {\n                    // Shrink the simplex towards the best point\n                    for (int i = 1; i < original.length; i++) {\n                        final RealPointValuePair pair = original[i];\n                        original[i] = new RealPointValuePair(reflect(pair.getPoint(), original[0].getPoint()), 0);\n                    }\n                    for (int i = 1; i < original.length; i++) {\n                        final RealPointValuePair pair = original[i];\n                        final double pointObjectiveValue = computeObjectiveValue(pair.getPoint());\n                        pair.setValue(pointObjectiveValue);\n                    }\n                }\n            }\n        }\n\n        // sort the simplex\n        Arrays.sort(original, comparator);\n\n        // check for convergence\n        final double bestVal = original[0].getValue();\n        final double worstVal = original[n].getValue();\n        final double range = worstVal - bestVal;\n\n        double rel = (2.0 * Math.abs(worstVal - bestVal)) / (Math.abs(worstVal) + Math.abs(bestVal) + SimplexOptimizer.DEFAULT_RELATIVE_TOLERANCE);\n        if (rel < SimplexOptimizer.DEFAULT_RELATIVE_TOLERANCE || range < SimplexOptimizer.DEFAULT_ABSOLUTE_TOLERANCE) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..85a5b0c5a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,67 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+        throws TooManyEvaluationsException, OptimizationException, IllegalArgumentException {\n+\n+    while (getIterations() < maxIterations) {\n+        incrementIterationsCounter();\n+\n+        // reflect the worst point by creating the reflected point\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, alpha, comparator);\n+        if (comparator.compare(reflected, original[0]) < 0) {\n+\n+            // expand the simplex in this direction\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) {\n+                original[n] = expanded;\n+            } else {\n+                original[n] = reflected;\n+            }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+        } else {\n+            // Check if a one dimensional contraction is needed\n+            final boolean singleContract = comparator.compare(reflected, original[n - 1]) >= 0\n+                    && comparator.compare(reflected, original[n]) < 0;\n+            if (singleContract) {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, original[n]) < 0) {\n+                    original[n] = contracted;\n+                }\n+            } else {\n+                // Perform a multi-dimensional contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, chi, comparator);\n+                if (comparator.compare(contracted, original[n]) < 0) {\n+                    original[n] = contracted;\n+                } else {\n+                    // Shrink the simplex towards the best point\n+                    for (int i = 1; i < original.length; i++) {\n+                        final RealPointValuePair pair = original[i];\n+                        original[i] = new RealPointValuePair(reflect(pair.getPoint(), original[0].getPoint()), 0);\n+                    }\n+                    for (int i = 1; i < original.length; i++) {\n+                        final RealPointValuePair pair = original[i];\n+                        final double pointObjectiveValue = computeObjectiveValue(pair.getPoint());\n+                        pair.setValue(pointObjectiveValue);\n+                    }\n                 }\n-\n-                return;\n-\n             }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // sort the simplex\n+        Arrays.sort(original, comparator);\n \n-            // check convergence\n-                return;\n-            }\n+        // check for convergence\n+        final double bestVal = original[0].getValue();\n+        final double worstVal = original[n].getValue();\n+        final double range = worstVal - bestVal;\n \n+        double rel = (2.0 * Math.abs(worstVal - bestVal)) / (Math.abs(worstVal) + Math.abs(bestVal) + SimplexOptimizer.DEFAULT_RELATIVE_TOLERANCE);\n+        if (rel < SimplexOptimizer.DEFAULT_RELATIVE_TOLERANCE || range < SimplexOptimizer.DEFAULT_ABSOLUTE_TOLERANCE) {\n+            return;\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}