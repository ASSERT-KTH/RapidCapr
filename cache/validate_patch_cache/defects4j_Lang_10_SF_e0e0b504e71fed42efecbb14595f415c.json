{
    "patch": "public static Date parseDateStrictly(String str, String... parsePatterns) throws ParseException {\n    final Date date = parseDateWithLeniency(str, parsePatterns, false);\n    if (date == null) {\n        throw new ParseException(\"Unable to parse the date: \" + str, -1);\n    }\n    for (final String parsePattern : parsePatterns) {\n        if (parsePattern.endsWith(\"ZZ\")) {\n            final int off = getOffset(str, date);\n            if (off != 0) {\n                final int newOff = off + (off > 0 ? 1 : -1);\n                final String patternNoZ = parsePattern.substring(0, parsePattern.length() - 1);\n                final TimeZone tz = TimeZone.getTimeZone(\"GMT\" + formatTimeZone(newOff));\n                final SimpleDateFormat noZFormat = new SimpleDateFormat(patternNoZ, Locale.US);\n                noZFormat.setTimeZone(tz);\n                return noZFormat.parse(str);\n            }\n        }\n    }\n    return date;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..22f78174 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,26 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+public static Date parseDateStrictly(String str, String... parsePatterns) throws ParseException {\n+    final Date date = parseDateWithLeniency(str, parsePatterns, false);\n+    if (date == null) {\n+        throw new ParseException(\"Unable to parse the date: \" + str, -1);\n+    }\n+    for (final String parsePattern : parsePatterns) {\n+        if (parsePattern.endsWith(\"ZZ\")) {\n+            final int off = getOffset(str, date);\n+            if (off != 0) {\n+                final int newOff = off + (off > 0 ? 1 : -1);\n+                final String patternNoZ = parsePattern.substring(0, parsePattern.length() - 1);\n+                final TimeZone tz = TimeZone.getTimeZone(\"GMT\" + formatTimeZone(newOff));\n+                final SimpleDateFormat noZFormat = new SimpleDateFormat(patternNoZ, Locale.US);\n+                noZFormat.setTimeZone(tz);\n+                return noZFormat.parse(str);\n             }\n-            regex.append(c);\n         }\n-        return regex;\n     }\n+    return date;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}