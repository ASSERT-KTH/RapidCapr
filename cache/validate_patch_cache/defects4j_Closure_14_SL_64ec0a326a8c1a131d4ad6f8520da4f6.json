{
    "patch": "if (cfa != null && finallyNode != null) {\n  Node finallyLastChild = finallyNode.getLastChild();\n  if (finallyLastChild != null) {\n    Node followNode = computeFollowNode(fromNode, finallyLastChild, cfa);\n    if (followNode == null) {\n      followNode = computeFollowNode(fromNode, node, cfa);\n    }\n    if (followNode != null) {\n      cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..c27d9dc4 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && finallyNode != null) {\n+  Node finallyLastChild = finallyNode.getLastChild();\n+  if (finallyLastChild != null) {\n+    Node followNode = computeFollowNode(fromNode, finallyLastChild, cfa);\n+    if (followNode == null) {\n+      followNode = computeFollowNode(fromNode, node, cfa);\n+    }\n+    if (followNode != null) {\n+      cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n+    }\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}