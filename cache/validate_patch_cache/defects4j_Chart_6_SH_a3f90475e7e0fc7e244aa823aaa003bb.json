{
    "patch": "if (!(obj instanceof ShapeList)) {\n    return false;\n}\nShapeList other = (ShapeList) obj;\nif (this.size() != other.size()) {\n    return false;\n}\nListIterator thisIterator = this.listIterator();\nListIterator otherIterator = other.listIterator();\nwhile (thisIterator.hasNext() && otherIterator.hasNext()) {\n    Shape thisShape = (Shape) thisIterator.next();\n    Shape otherShape = (Shape) otherIterator.next();\n    if (!ShapeUtilities.equal(thisShape, otherShape)) {\n        return false;\n    }\n}\nreturn true;",
    "patch_diff": "diff --git a/source/org/jfree/chart/util/ShapeList.java b/source/org/jfree/chart/util/ShapeList.java\nindex 85f1c81..bc8bf54 100644\n--- a/source/org/jfree/chart/util/ShapeList.java\n+++ b/source/org/jfree/chart/util/ShapeList.java\n@@ -108,7 +108,23 @@ public class ShapeList extends AbstractObjectList {\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n-        return super.equals(obj);\n+if (!(obj instanceof ShapeList)) {\n+    return false;\n+}\n+ShapeList other = (ShapeList) obj;\n+if (this.size() != other.size()) {\n+    return false;\n+}\n+ListIterator thisIterator = this.listIterator();\n+ListIterator otherIterator = other.listIterator();\n+while (thisIterator.hasNext() && otherIterator.hasNext()) {\n+    Shape thisShape = (Shape) thisIterator.next();\n+    Shape otherShape = (Shape) otherIterator.next();\n+    if (!ShapeUtilities.equal(thisShape, otherShape)) {\n+        return false;\n+    }\n+}\n+return true;\n \n     }\n \n@@ -169,4 +185,3 @@ public class ShapeList extends AbstractObjectList {\n     }\n \n }\n-",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}