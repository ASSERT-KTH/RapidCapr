{
    "patch": " private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    node = node.getFirstChild();\n    while (node != null) {\n      if (node.isName() && isNameAssignedTo(node.getString(), replacement)\n              || node.isGetProp() && !isSafeReplacement(node, replacement)) {\n        return false;\n      }\n\n      node = node.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..eeb31084 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,21 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n+ private boolean isSafeReplacement(Node node, Node replacement) {\n     // No checks are needed for simple names.\n     if (node.isName()) {\n       return true;\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n-    }\n+    node = node.getFirstChild();\n+    while (node != null) {\n+      if (node.isName() && isNameAssignedTo(node.getString(), replacement)\n+              || node.isGetProp() && !isSafeReplacement(node, replacement)) {\n+        return false;\n+      }\n \n-    return true;\n-  }\n+      node = node.getNext();\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +241,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}