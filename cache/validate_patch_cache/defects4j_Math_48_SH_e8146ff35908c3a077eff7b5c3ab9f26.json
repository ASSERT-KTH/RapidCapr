{
    "patch": "// Detect early that algorithm is stuck, instead of waiting for\n// the maximum number of iterations to be exceeded.\nif (++iter >= maximalIterationCount) {\n    throw new ConvergenceException(LocalizedFormats.MAXIMAL_ITERATIONS_EXCEEDED, getMaximalIterationCount());\n}\nif (FastMath.abs(fx) < FastMath.abs(f1)) {\n    x0 = x1;\n    f0 = f1;\n    f1 = fx;\n} else {\n    if (FastMath.abs(f0) < FastMath.abs(f1)) {\n        x1 = x0;\n        f1 = f0;\n        f0 = fx;\n    } else {\n        x0 = x1;\n        x1 = x;\n        f0 = f1;\n        f1 = fx;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..115b32963 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,27 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting for\n+// the maximum number of iterations to be exceeded.\n+if (++iter >= maximalIterationCount) {\n+    throw new ConvergenceException(LocalizedFormats.MAXIMAL_ITERATIONS_EXCEEDED, getMaximalIterationCount());\n+}\n+if (FastMath.abs(fx) < FastMath.abs(f1)) {\n+    x0 = x1;\n+    f0 = f1;\n+    f1 = fx;\n+} else {\n+    if (FastMath.abs(f0) < FastMath.abs(f1)) {\n+        x1 = x0;\n+        f1 = f0;\n+        f0 = fx;\n+    } else {\n+        x0 = x1;\n+        x1 = x;\n+        f0 = f1;\n+        f1 = fx;\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}