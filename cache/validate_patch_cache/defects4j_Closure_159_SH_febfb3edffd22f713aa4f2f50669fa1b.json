{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME && child.getString() != null &&\n          !child.getString().isEmpty() && !child.getString().startsWith(\"$\") &&\n          !child.getString().startsWith(\"goog.\") && !child.getString().startsWith(\"__\")) {\n        changed.add(child.getString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..65a9ef55 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -776,7 +776,9 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n+      if (child != null && child.getType() == Token.NAME && child.getString() != null &&\n+          !child.getString().isEmpty() && !child.getString().startsWith(\"$\") &&\n+          !child.getString().startsWith(\"goog.\") && !child.getString().startsWith(\"__\")) {\n         changed.add(child.getString());\n       }\n     }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}