{
    "patch": "Name name = functionNode.getFunctionName();\nBoolean isUnnamedFunction = name == null || name.length() == 0;\nif (isUnnamedFunction) {\n  name = new Name();\n  name.setIdentifier(\"\");\n}\n\nNode node = newNode(Token.FUNCTION);\n\nNode newName = transform(name);\n\nif (isUnnamedFunction) {\n  newName.setLineno(functionNode.getLineno());\n  int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n  newName.setCharno(position2charno(lpColumn));\n}\n\nnode.addChildToBack(newName);\nNode lp = newNode(Token.LP);\n\n// Obtain the line number of the left parenthesis by looking up the AstNode\nNode lparenNode = functionNode.getFirstChild().getNext();\nint lineNumber = lparenNode.getLineno();\nlp.setLineno(lineNumber);\n\n// Obtain the character number of the left parenthesis by using the absolute position\nint lparenCharno = lparenNode.getAbsolutePosition() + 1;\nlp.setCharno(position2charno(lparenCharno));\n\nfor (AstNode param : functionNode.getParams()) {\n  lp.addChildToBack(transform(param));\n}\nnode.addChildToBack(lp);\n\nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..15e0b6b7 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,44 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+Boolean isUnnamedFunction = name == null || name.length() == 0;\n+if (isUnnamedFunction) {\n+  name = new Name();\n+  name.setIdentifier(\"\");\n+}\n+\n+Node node = newNode(Token.FUNCTION);\n+\n+Node newName = transform(name);\n+\n+if (isUnnamedFunction) {\n+  newName.setLineno(functionNode.getLineno());\n+  int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+  newName.setCharno(position2charno(lpColumn));\n+}\n+\n+node.addChildToBack(newName);\n+Node lp = newNode(Token.LP);\n+\n+// Obtain the line number of the left parenthesis by looking up the AstNode\n+Node lparenNode = functionNode.getFirstChild().getNext();\n+int lineNumber = lparenNode.getLineno();\n+lp.setLineno(lineNumber);\n+\n+// Obtain the character number of the left parenthesis by using the absolute position\n+int lparenCharno = lparenNode.getAbsolutePosition() + 1;\n+lp.setCharno(position2charno(lparenCharno));\n+\n+for (AstNode param : functionNode.getParams()) {\n+  lp.addChildToBack(transform(param));\n+}\n+node.addChildToBack(lp);\n+\n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}