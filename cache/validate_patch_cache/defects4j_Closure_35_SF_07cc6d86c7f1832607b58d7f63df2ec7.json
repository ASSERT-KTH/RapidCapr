{
    "patch": "/**\n   * Infers the properties of a given object type based on its constraint.\n   * If the constraint is a record type or a dictionary type, and the object type does not have\n   * a declared property type for a given property, the function infers the property type based on\n   * the type of the property in the constraint.\n   *\n   * @param type the object type to infer properties for.\n   * @param constraint the constraint to use for property inference.\n   */\n  private void inferPropertiesFromConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null &&\n        (constraintObj.isRecordType() || constraintObj.isDict())) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..d8d2c437 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,16 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+/**\n+   * Infers the properties of a given object type based on its constraint.\n+   * If the constraint is a record type or a dictionary type, and the object type does not have\n+   * a declared property type for a given property, the function infers the property type based on\n+   * the type of the property in the constraint.\n+   *\n+   * @param type the object type to infer properties for.\n+   * @param constraint the constraint to use for property inference.\n+   */\n+  private void inferPropertiesFromConstraint(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1118,7 +1128,8 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (constraintObj != null &&\n+        (constraintObj.isRecordType() || constraintObj.isDict())) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n@@ -1149,6 +1160,8 @@ class TypeInference\n       }\n     }\n     return scope;\n+    }\n+    return scope;\n   }\n \n   private JSType getPropertyType(JSType objType, String propName,",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}