{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix s = dec.getSquareRoot();\n    Array2DRowRealMatrix t = new Array2DRowRealMatrix(s.getRowDimension(), s.getColumnDimension());\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        for (int j = 0; j < s.getColumnDimension(); j++) {\n            if (i == j) {\n                double sqrt = Math.sqrt(s.getEntry(i, j));\n                t.setEntry(i, j, sqrt);\n            }\n        }\n    }\n    return dec.getV().multiply(t).multiply(dec.getV().transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f4c3d9c8e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix s = dec.getSquareRoot();\n+    Array2DRowRealMatrix t = new Array2DRowRealMatrix(s.getRowDimension(), s.getColumnDimension());\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        for (int j = 0; j < s.getColumnDimension(); j++) {\n+            if (i == j) {\n+                double sqrt = Math.sqrt(s.getEntry(i, j));\n+                t.setEntry(i, j, sqrt);\n+            }\n+        }\n     }\n+    return dec.getV().multiply(t).multiply(dec.getV().transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}