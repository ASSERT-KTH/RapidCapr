{
    "patch": "      Node parent = n.getParent();\n      if (parent.isGetProp() || parent.isGetElem()) {\n        Node left = parent.getFirstChild();\n        if (left.isThis()) {\n          JSType thisType = getJSType(left).withLoose();\n          if (!thisType.isEquivalentTo(functionType.getTypeOfThis())) {\n            report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n          }\n        }\n      } else if (functionType.getTypeOfThis() != null) {\n        report(t, n, FUNCTION_WRONG_THIS, functionType.getTypeOfThis().toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..db6a970d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = n.getParent();\n+      if (parent.isGetProp() || parent.isGetElem()) {\n+        Node left = parent.getFirstChild();\n+        if (left.isThis()) {\n+          JSType thisType = getJSType(left).withLoose();\n+          if (!thisType.isEquivalentTo(functionType.getTypeOfThis())) {\n+            report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+          }\n+        }\n+      } else if (functionType.getTypeOfThis() != null) {\n+        report(t, n, FUNCTION_WRONG_THIS, functionType.getTypeOfThis().toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}