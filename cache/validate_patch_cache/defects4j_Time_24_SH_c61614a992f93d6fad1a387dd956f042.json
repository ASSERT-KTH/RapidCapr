{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n                if (millis > iMaxMillis || millis < iMinMillis) {\n                    String message = \"timestamp out of range: \";\n                    DateTimeFormatter builder = new DateTimeFormatterBuilder()\n                            .appendYear(4, 19).appendLiteral('-').appendMonthOfYear(2)\n                            .appendLiteral('-').appendDayOfMonth(2).appendLiteral('T')\n                            .appendHourOfDay(2).appendLiteral(':').appendMinuteOfHour(2)\n                            .appendLiteral(':').appendSecondOfMinute(2).appendLiteral('.')\n                            .appendMillisOfSecond(3).appendLiteral('Z').toFormatter();\n                    throw new IllegalArgumentException(message + millis\n                            + \" is out of range [\"\n                            + builder.print(iMinMillis) + \", \" + builder.print(iMaxMillis) + \"]\");\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4c4f15cd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+                if (millis > iMaxMillis || millis < iMinMillis) {\n+                    String message = \"timestamp out of range: \";\n+                    DateTimeFormatter builder = new DateTimeFormatterBuilder()\n+                            .appendYear(4, 19).appendLiteral('-').appendMonthOfYear(2)\n+                            .appendLiteral('-').appendDayOfMonth(2).appendLiteral('T')\n+                            .appendHourOfDay(2).appendLiteral(':').appendMinuteOfHour(2)\n+                            .appendLiteral(':').appendSecondOfMinute(2).appendLiteral('.')\n+                            .appendMillisOfSecond(3).appendLiteral('Z').toFormatter();\n+                    throw new IllegalArgumentException(message + millis\n+                            + \" is out of range [\"\n+                            + builder.print(iMinMillis) + \", \" + builder.print(iMaxMillis) + \"]\");\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}