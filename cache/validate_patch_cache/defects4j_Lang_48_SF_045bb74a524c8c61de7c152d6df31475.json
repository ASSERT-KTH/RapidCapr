{
    "patch": "import java.math.BigDecimal;\nimport java.util.Arrays;\n\npublic class EqualsBuilder {\n\n    private boolean isEquals;\n\n    public EqualsBuilder() {\n        this.isEquals = true;\n    }\n\n    public static boolean reflectionEquals(Object lhs, Object rhs) {\n        return reflectionEquals(lhs, rhs, false, null);\n    }\n\n    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {\n        return reflectionEquals(lhs, rhs, testTransients, null);\n    }\n\n    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class<?> reflectUpToClass) {\n        if (lhs == rhs) {\n            return true;\n        }\n        if (lhs == null || rhs == null) {\n            return false;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        Class<?> rhsClass = rhs.getClass();\n        if (!lhsClass.isInstance(rhs)) {\n            return false;\n        }\n        if (lhsClass != rhsClass && !lhsClass.isAssignableFrom(rhsClass) && !rhsClass.isAssignableFrom(lhsClass)) {\n            return false;\n        }\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        try {\n            reflectionAppend(lhs, rhs, lhsClass, equalsBuilder, testTransients, reflectUpToClass);\n        } catch (IllegalArgumentException ex) {\n            // In this case, we tried to compare two incompatible objects\n            return false;\n        }\n        return equalsBuilder.isEquals();\n    }\n\n    private static void reflectionAppend(Object lhs, Object rhs, Class<?> clazz,\n            EqualsBuilder builder, boolean useTransients, Class<?> reflectUpToClass) {\n        if (isRegistered(lhs, rhs)) {\n            return;\n        }\n        try {\n            register(lhs, rhs);\n            if (clazz.isArray()) {\n                appendArray(lhs, rhs, builder, useTransients, reflectUpToClass);\n            } else {\n                while (clazz != null && clazz != reflectUpToClass) {\n                    Field[] fields = clazz.getDeclaredFields();\n                    AccessibleObject.setAccessible(fields, true);\n                    for (Field field : fields) {\n                        if (!field.isAnnotationPresent(Transient.class)\n                                && !Modifier.isStatic(field.getModifiers())\n                                && !Modifier.isTransient(field.getModifiers())) {\n                            builder.append(field.get(lhs), field.get(rhs));\n                        }\n                    }\n                    clazz = clazz.getSuperclass();\n                }\n            }\n        } catch (IllegalAccessException ex) {\n            // We are not interested in this exception as we are only calling\n            // our own methods. Simply propagate it to satisfy the compiler.\n            throw new InternalError(\"Unexpected IllegalAccessException\");\n        } finally {\n            unregister(lhs, rhs);\n        }\n    }\n\n    private static void appendArray(Object lhs, Object rhs, EqualsBuilder builder,\n            boolean useTransients, Class<?> reflectUpToClass) throws IllegalAccessException {\n        if (lhs instanceof Object[] && rhs instanceof Object[]) {\n            builder.append((Object[]) lhs, (Object[]) rhs);\n        } else if (lhs instanceof byte[] && rhs instanceof byte[]) {\n            builder.append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof short[] && rhs instanceof short[]) {\n            builder.append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof int[] && rhs instanceof int[]) {\n            builder.append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof long[] && rhs instanceof long[]) {\n            builder.append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof char[] && rhs instanceof char[]) {\n            builder.append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof float[] && rhs instanceof float[]) {\n            builder.append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof double[] && rhs instanceof double[]) {\n            builder.append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof boolean[] && rhs instanceof boolean[]) {\n            builder.append((boolean[]) lhs, (boolean[]) rhs);\n        } else if (lhs instanceof BigDecimal[] && rhs instanceof BigDecimal[]) {\n            builder.append((BigDecimal[]) lhs, (BigDecimal[]) rhs);\n        } else {\n            String message = \"Object of class \" + lhs.getClass().getName() + \" cannot be compared with an array of class \" + rhs.getClass().getName();\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    private static final ThreadLocal<Set<Pair>> REGISTRY = ThreadLocal.withInitial(HashSet::new);\n\n    private static boolean isRegistered(final Object lhs, final Object rhs) {\n        return REGISTRY.get().contains(new Pair(lhs, rhs));\n    }\n\n    private static void register(final Object lhs, final Object rhs) {\n        REGISTRY.get().add(new Pair(lhs, rhs));\n        REGISTRY.get().add(new Pair(rhs, lhs));\n    }\n\n    private static void unregister(final Object lhs, final Object rhs) {\n        REGISTRY.get().remove(new Pair(lhs, rhs));\n        REGISTRY.get().remove(new Pair(rhs, lhs));\n    }\n\n    private void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhsClass != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            this.setEquals(false);\n        } else if (lhs instanceof long[]) {\n            // Special handling of arrays of primitives to handle multi-dimensional arrays\n            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n        } else if (lhs instanceof BigDecimal[]) {\n            isEquals = Arrays.equals((BigDecimal[]) lhs, (BigDecimal[]) rhs);\n        } else {\n            // Not an array of primitives, but an array of objects\n            Object[] lhsArray = (Object[]) lhs;\n            Object[] rhsArray = (Object[]) rhs;\n            if (lhsArray.length != rhsArray.length) {\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0; i < lhsArray.length; i++) {\n                Object lhsElement = lhsArray[i];\n                Object rhsElement = rhsArray[i];\n                // Append each element of the array recursively\n                if (lhsElement == rhsElement) {\n                    continue;\n                }\n                if (lhsElement == null || rhsElement == null) {\n                    this.setEquals(false);\n                    return this;\n                }\n                Class<?> lhsElementClass = lhsElement.getClass();\n                if (lhsElementClass != rhsElement.getClass()) {\n                    this.setEquals(false);\n                    return this;\n                }\n                if (lhsElementClass.isArray()) {\n                    append(lhsElement, rhsElement);\n                } else {\n                    reflectionAppend(lhsElement, rhsElement, null, this, false, null);\n                }\n                if (!isEquals) {\n                    return this;\n                }\n            }\n        }\n        return this;\n    }\n\n    public EqualsBuilder appendSuper(boolean superEquals) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = superEquals;\n        return this;\n    }\n\n    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length; i++) {\n            Object lhsElement = lhs[i];\n            Object rhsElement = rhs[i];\n            // Append each element of the array recursively\n            append(lhsElement, rhsElement);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n\n    public boolean build() {\n        return isEquals();\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private static class Pair {\n\n        private final Object left;\n\n        private final Object right;\n\n        public Pair(Object left, Object right) {\n            this.left = left;\n            this.right = right;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (o instanceof Pair) {\n                Pair p = (Pair) o;\n                return Objects.equals(left, p.left) && Objects.equals(right, p.right);\n            }\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            // If two objects are equal, they must have the same hashcode.\n            // Here, Objects.hashCode() is called instead of the hashcodes\n            // of the individual objects. This is because we want to avoid\n            // the possibility of stack overflow if the individual objects\n            // have circular references to each other (which would cause\n            // hashCode() to end up calling itself indefinitely).\n            return Objects.hashCode(left) + Objects.hashCode(right);\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..e16351ef 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,134 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+public class EqualsBuilder {\n+\n+    private boolean isEquals;\n+\n+    public EqualsBuilder() {\n+        this.isEquals = true;\n+    }\n+\n+    public static boolean reflectionEquals(Object lhs, Object rhs) {\n+        return reflectionEquals(lhs, rhs, false, null);\n+    }\n+\n+    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {\n+        return reflectionEquals(lhs, rhs, testTransients, null);\n+    }\n+\n+    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class<?> reflectUpToClass) {\n+        if (lhs == rhs) {\n+            return true;\n+        }\n+        if (lhs == null || rhs == null) {\n+            return false;\n+        }\n+        Class<?> lhsClass = lhs.getClass();\n+        Class<?> rhsClass = rhs.getClass();\n+        if (!lhsClass.isInstance(rhs)) {\n+            return false;\n+        }\n+        if (lhsClass != rhsClass && !lhsClass.isAssignableFrom(rhsClass) && !rhsClass.isAssignableFrom(lhsClass)) {\n+            return false;\n+        }\n+        EqualsBuilder equalsBuilder = new EqualsBuilder();\n+        try {\n+            reflectionAppend(lhs, rhs, lhsClass, equalsBuilder, testTransients, reflectUpToClass);\n+        } catch (IllegalArgumentException ex) {\n+            // In this case, we tried to compare two incompatible objects\n+            return false;\n+        }\n+        return equalsBuilder.isEquals();\n+    }\n+\n+    private static void reflectionAppend(Object lhs, Object rhs, Class<?> clazz,\n+            EqualsBuilder builder, boolean useTransients, Class<?> reflectUpToClass) {\n+        if (isRegistered(lhs, rhs)) {\n+            return;\n+        }\n+        try {\n+            register(lhs, rhs);\n+            if (clazz.isArray()) {\n+                appendArray(lhs, rhs, builder, useTransients, reflectUpToClass);\n+            } else {\n+                while (clazz != null && clazz != reflectUpToClass) {\n+                    Field[] fields = clazz.getDeclaredFields();\n+                    AccessibleObject.setAccessible(fields, true);\n+                    for (Field field : fields) {\n+                        if (!field.isAnnotationPresent(Transient.class)\n+                                && !Modifier.isStatic(field.getModifiers())\n+                                && !Modifier.isTransient(field.getModifiers())) {\n+                            builder.append(field.get(lhs), field.get(rhs));\n+                        }\n+                    }\n+                    clazz = clazz.getSuperclass();\n+                }\n+            }\n+        } catch (IllegalAccessException ex) {\n+            // We are not interested in this exception as we are only calling\n+            // our own methods. Simply propagate it to satisfy the compiler.\n+            throw new InternalError(\"Unexpected IllegalAccessException\");\n+        } finally {\n+            unregister(lhs, rhs);\n+        }\n+    }\n+\n+    private static void appendArray(Object lhs, Object rhs, EqualsBuilder builder,\n+            boolean useTransients, Class<?> reflectUpToClass) throws IllegalAccessException {\n+        if (lhs instanceof Object[] && rhs instanceof Object[]) {\n+            builder.append((Object[]) lhs, (Object[]) rhs);\n+        } else if (lhs instanceof byte[] && rhs instanceof byte[]) {\n+            builder.append((byte[]) lhs, (byte[]) rhs);\n+        } else if (lhs instanceof short[] && rhs instanceof short[]) {\n+            builder.append((short[]) lhs, (short[]) rhs);\n+        } else if (lhs instanceof int[] && rhs instanceof int[]) {\n+            builder.append((int[]) lhs, (int[]) rhs);\n+        } else if (lhs instanceof long[] && rhs instanceof long[]) {\n+            builder.append((long[]) lhs, (long[]) rhs);\n+        } else if (lhs instanceof char[] && rhs instanceof char[]) {\n+            builder.append((char[]) lhs, (char[]) rhs);\n+        } else if (lhs instanceof float[] && rhs instanceof float[]) {\n+            builder.append((float[]) lhs, (float[]) rhs);\n+        } else if (lhs instanceof double[] && rhs instanceof double[]) {\n+            builder.append((double[]) lhs, (double[]) rhs);\n+        } else if (lhs instanceof boolean[] && rhs instanceof boolean[]) {\n+            builder.append((boolean[]) lhs, (boolean[]) rhs);\n+        } else if (lhs instanceof BigDecimal[] && rhs instanceof BigDecimal[]) {\n+            builder.append((BigDecimal[]) lhs, (BigDecimal[]) rhs);\n+        } else {\n+            String message = \"Object of class \" + lhs.getClass().getName() + \" cannot be compared with an array of class \" + rhs.getClass().getName();\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    private static final ThreadLocal<Set<Pair>> REGISTRY = ThreadLocal.withInitial(HashSet::new);\n+\n+    private static boolean isRegistered(final Object lhs, final Object rhs) {\n+        return REGISTRY.get().contains(new Pair(lhs, rhs));\n+    }\n+\n+    private static void register(final Object lhs, final Object rhs) {\n+        REGISTRY.get().add(new Pair(lhs, rhs));\n+        REGISTRY.get().add(new Pair(rhs, lhs));\n+    }\n+\n+    private static void unregister(final Object lhs, final Object rhs) {\n+        REGISTRY.get().remove(new Pair(lhs, rhs));\n+        REGISTRY.get().remove(new Pair(rhs, lhs));\n+    }\n+\n+    private void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -377,37 +505,141 @@ public class EqualsBuilder {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n+        } else if (lhsClass != rhs.getClass()) {\n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n+        } else if (lhs instanceof long[]) {\n+            // Special handling of arrays of primitives to handle multi-dimensional arrays\n+            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n+            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n         } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n+            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n         } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n+            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n         } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n+            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n         } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n+            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n         } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n+            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n         } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n+        } else if (lhs instanceof BigDecimal[]) {\n+            isEquals = Arrays.equals((BigDecimal[]) lhs, (BigDecimal[]) rhs);\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Not an array of primitives, but an array of objects\n+            Object[] lhsArray = (Object[]) lhs;\n+            Object[] rhsArray = (Object[]) rhs;\n+            if (lhsArray.length != rhsArray.length) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0; i < lhsArray.length; i++) {\n+                Object lhsElement = lhsArray[i];\n+                Object rhsElement = rhsArray[i];\n+                // Append each element of the array recursively\n+                if (lhsElement == rhsElement) {\n+                    continue;\n+                }\n+                if (lhsElement == null || rhsElement == null) {\n+                    this.setEquals(false);\n+                    return this;\n+                }\n+                Class<?> lhsElementClass = lhsElement.getClass();\n+                if (lhsElementClass != rhsElement.getClass()) {\n+                    this.setEquals(false);\n+                    return this;\n+                }\n+                if (lhsElementClass.isArray()) {\n+                    append(lhsElement, rhsElement);\n+                } else {\n+                    reflectionAppend(lhsElement, rhsElement, null, this, false, null);\n+                }\n+                if (!isEquals) {\n+                    return this;\n+                }\n+            }\n         }\n         return this;\n     }\n \n+    public EqualsBuilder appendSuper(boolean superEquals) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = superEquals;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length; i++) {\n+            Object lhsElement = lhs[i];\n+            Object rhsElement = rhs[i];\n+            // Append each element of the array recursively\n+            append(lhsElement, rhsElement);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public boolean build() {\n+        return isEquals();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static class Pair {\n+\n+        private final Object left;\n+\n+        private final Object right;\n+\n+        public Pair(Object left, Object right) {\n+            this.left = left;\n+            this.right = right;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o instanceof Pair) {\n+                Pair p = (Pair) o;\n+                return Objects.equals(left, p.left) && Objects.equals(right, p.right);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            // If two objects are equal, they must have the same hashcode.\n+            // Here, Objects.hashCode() is called instead of the hashcodes\n+            // of the individual objects. This is because we want to avoid\n+            // the possibility of stack overflow if the individual objects\n+            // have circular references to each other (which would cause\n+            // hashCode() to end up calling itself indefinitely).\n+            return Objects.hashCode(left) + Objects.hashCode(right);\n+        }\n+    }\n+\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}