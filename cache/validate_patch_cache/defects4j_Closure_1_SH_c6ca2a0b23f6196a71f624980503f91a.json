{
    "patch": "// Remove unreferenced parameters from function declarations.\n// NOTE: This option should not be enabled without removing\n// unreferenced variables.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Removing unreferenced function arguments breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  // This is safe because the only occurences of functions that count are\n  // those that are indirectly referenced via eval or some other name that\n  // is known to be influenced by global scope\n  //\n  // Additionally, we don't remove args from functions that have rest parameter,\n  // because we can't be sure if rest parameter is used.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n  // and http://code.google.com/p/closure-compiler/issues/detail?id=1017\n\n  Node function = fnScope.getRootNode();\n  checkState(function.isFunction());\n\n  if (isFunctionWithRestArgs(function)) {\n    return;\n  }\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can't be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers =\n      modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!isFunctionWithUniqueParamName(fnScope, var)\n          && !referencedVars.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referencedVars);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..be833382 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,60 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove unreferenced parameters from function declarations.\n+// NOTE: This option should not be enabled without removing\n+// unreferenced variables.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  // Removing unreferenced function arguments breaks\n+  // Function.prototype.length. In advanced mode, we don't really care\n+  // about this: we consider \"length\" the equivalent of reflecting on\n+  // the function's lexical source.\n+  //\n+  // Rather than create a new option for this, we assume that if the user\n+  // is removing globals, then it's OK to remove unused function args.\n+  // This is safe because the only occurences of functions that count are\n+  // those that are indirectly referenced via eval or some other name that\n+  // is known to be influenced by global scope\n+  //\n+  // Additionally, we don't remove args from functions that have rest parameter,\n+  // because we can't be sure if rest parameter is used.\n+  //\n+  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  // and http://code.google.com/p/closure-compiler/issues/detail?id=1017\n+\n+  Node function = fnScope.getRootNode();\n+  checkState(function.isFunction());\n+\n+  if (isFunctionWithRestArgs(function)) {\n+    return;\n+  }\n+\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can't be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers =\n+      modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!isFunctionWithUniqueParamName(fnScope, var)\n+          && !referencedVars.contains(var)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referencedVars);\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}