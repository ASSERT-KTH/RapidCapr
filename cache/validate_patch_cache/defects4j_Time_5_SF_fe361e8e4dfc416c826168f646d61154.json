{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n    long totalMillis = (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK))\n        + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n        + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n        + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n        + (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n        + millis;\n    int totalDays = days + (weeks * 7);\n    days = totalDays % 7;\n    weeks = totalDays / 7;\n    if (type.isSupported(DurationFieldType.years())) {\n        years += (months / 12);\n        months = months % 12;\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        months += (years * 12);\n        years = 0;\n    }\n    if (type.isSupported(DurationFieldType.hours())) {\n        totalMillis += ((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n        days = 0;\n        hours += totalMillis / ((long) DateTimeConstants.MILLIS_PER_HOUR);\n        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_HOUR);\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        totalMillis += ((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n        hours = 0;\n        minutes += totalMillis / ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        totalMillis += ((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n        minutes = 0;\n        seconds += totalMillis / ((long) DateTimeConstants.MILLIS_PER_SECOND);\n        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_SECOND);\n    }\n    if (type.isSupported(DurationFieldType.millis())) {\n        totalMillis += ((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n        seconds = 0;\n        millis += totalMillis;\n    }\n    Period result = new Period(years, months, weeks, days, hours, minutes, seconds, millis, type);\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..a875a876 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,58 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+    long totalMillis = (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK))\n+        + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+        + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+        + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+        + (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+        + millis;\n+    int totalDays = days + (weeks * 7);\n+    days = totalDays % 7;\n+    weeks = totalDays / 7;\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years += (months / 12);\n+        months = months % 12;\n+    }\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months += (years * 12);\n+        years = 0;\n+    }\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        totalMillis += ((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n+        days = 0;\n+        hours += totalMillis / ((long) DateTimeConstants.MILLIS_PER_HOUR);\n+        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_HOUR);\n+    }\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        totalMillis += ((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n+        hours = 0;\n+        minutes += totalMillis / ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+    }\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        totalMillis += ((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+        minutes = 0;\n+        seconds += totalMillis / ((long) DateTimeConstants.MILLIS_PER_SECOND);\n+        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_SECOND);\n+    }\n+    if (type.isSupported(DurationFieldType.millis())) {\n+        totalMillis += ((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n+        seconds = 0;\n+        millis += totalMillis;\n+    }\n+    Period result = new Period(years, months, weeks, days, hours, minutes, seconds, millis, type);\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}