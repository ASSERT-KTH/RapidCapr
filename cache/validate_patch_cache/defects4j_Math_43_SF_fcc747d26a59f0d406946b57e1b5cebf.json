{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance, or geoMean have been overridden, we use them\n    // directly as long as the input value is not NaN or negative (for geoMean)\n    if (meanImpl != null) {\n        if (meanImpl instanceof Mean && !Double.isNaN(value)) {\n            meanImpl.increment(value);\n        }\n    } else {\n        Mean tempMean = new Mean();\n        if (!Double.isNaN(value)) {\n            tempMean.increment(value);\n            meanImpl = tempMean;\n        }\n    }\n    if (varianceImpl != null) {\n        if (varianceImpl instanceof Variance && !Double.isNaN(value)) {\n            varianceImpl.increment(value);\n        }\n    } else {\n        Variance tempVariance = new Variance();\n        if (!Double.isNaN(value)) {\n            tempVariance.increment(value);\n            varianceImpl = tempVariance;\n        }\n    }\n    if (geoMeanImpl != null) {\n        if (geoMeanImpl instanceof GeometricMean && value > 0) {\n            geoMeanImpl.increment(value);\n        }\n    } else {\n        GeometricMean tempGeoMean = new GeometricMean();\n        if (value > 0) {\n            tempGeoMean.increment(value);\n            geoMeanImpl = tempGeoMean;\n        }\n    }\n\n    // Update n regardless\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..91d103e01 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,54 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance, or geoMean have been overridden, we use them\n+    // directly as long as the input value is not NaN or negative (for geoMean)\n+    if (meanImpl != null) {\n+        if (meanImpl instanceof Mean && !Double.isNaN(value)) {\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+    } else {\n+        Mean tempMean = new Mean();\n+        if (!Double.isNaN(value)) {\n+            tempMean.increment(value);\n+            meanImpl = tempMean;\n+        }\n+    }\n+    if (varianceImpl != null) {\n+        if (varianceImpl instanceof Variance && !Double.isNaN(value)) {\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    } else {\n+        Variance tempVariance = new Variance();\n+        if (!Double.isNaN(value)) {\n+            tempVariance.increment(value);\n+            varianceImpl = tempVariance;\n+        }\n+    }\n+    if (geoMeanImpl != null) {\n+        if (geoMeanImpl instanceof GeometricMean && value > 0) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n+    } else {\n+        GeometricMean tempGeoMean = new GeometricMean();\n+        if (value > 0) {\n+            tempGeoMean.increment(value);\n+            geoMeanImpl = tempGeoMean;\n+        }\n     }\n \n+    // Update n regardless\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<4.0> but was:<0.0>",
    "test_result": "FAIL"
}