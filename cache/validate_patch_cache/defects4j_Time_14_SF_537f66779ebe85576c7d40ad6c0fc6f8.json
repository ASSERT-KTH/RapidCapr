{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        // Add the months with the adjusted year and month fields\n        Chronology chrono = iChronology;\n        int monthsToAdd = valueToAdd;\n        int year = chrono.year().get(instant);\n        int month = chrono.monthOfYear().get(instant);\n        int day = chrono.dayOfMonth().get(instant);\n\n        while (monthsToAdd > 0) {\n            int daysInMonth = chrono.dayOfMonth().getMaximumValue(year, month);\n\n            if (day > daysInMonth) {\n                day = daysInMonth;\n            }\n\n            if (month == 12) {\n                year++;\n                month = 1;\n            } else {\n                month++;\n            }\n\n            monthsToAdd--;\n        }\n\n        while (monthsToAdd < 0) {\n            if (month == 1) {\n                year--;\n                month = 12;\n            } else {\n                month--;\n            }\n\n            int daysInMonth = chrono.dayOfMonth().getMaximumValue(year, month);\n            if (day > daysInMonth) {\n                day = daysInMonth;\n            }\n\n            monthsToAdd++;\n        }\n\n        instant = chrono.year().set(instant, year);\n        instant = chrono.monthOfYear().set(instant, month);\n        instant = chrono.dayOfMonth().set(instant, day);\n\n        return chrono.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..48c39c99 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,66 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        // Add the months with the adjusted year and month fields\n+        Chronology chrono = iChronology;\n+        int monthsToAdd = valueToAdd;\n+        int year = chrono.year().get(instant);\n+        int month = chrono.monthOfYear().get(instant);\n+        int day = chrono.dayOfMonth().get(instant);\n+\n+        while (monthsToAdd > 0) {\n+            int daysInMonth = chrono.dayOfMonth().getMaximumValue(year, month);\n+\n+            if (day > daysInMonth) {\n+                day = daysInMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+            if (month == 12) {\n+                year++;\n+                month = 1;\n+            } else {\n+                month++;\n+            }\n+\n+            monthsToAdd--;\n         }\n+\n+        while (monthsToAdd < 0) {\n+            if (month == 1) {\n+                year--;\n+                month = 12;\n+            } else {\n+                month--;\n+            }\n+\n+            int daysInMonth = chrono.dayOfMonth().getMaximumValue(year, month);\n+            if (day > daysInMonth) {\n+                day = daysInMonth;\n+            }\n+\n+            monthsToAdd++;\n+        }\n+\n+        instant = chrono.year().set(instant, year);\n+        instant = chrono.monthOfYear().set(instant, month);\n+        instant = chrono.dayOfMonth().set(instant, day);\n+\n+        return chrono.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}