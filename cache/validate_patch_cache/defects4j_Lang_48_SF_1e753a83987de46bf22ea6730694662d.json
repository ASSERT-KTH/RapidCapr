{
    "patch": "private void appendArray(Object lhs, Object rhs) {\n    // Not an array of primitives or objects\n    final Object[] lhsArray = (Object[]) lhs;\n    final Object[] rhsArray = (Object[]) rhs;\n    if (lhsArray.length != rhsArray.length) {\n        this.setEquals(false);\n        return;\n    }\n\n    for (int i = 0; i < lhsArray.length && isEquals; i++) {\n        if (lhsArray[i] == rhsArray[i]) {\n            continue;\n        }\n        if (lhsArray[i] == null || rhsArray[i] == null) {\n            this.setEquals(false);\n            return;\n        }\n        final Class<?> class1 = lhsArray[i].getClass();\n        if (class1.isArray()) {\n            appendArray(lhsArray[i], rhsArray[i]);\n            continue;\n        }\n        if (lhsArray[i] instanceof Number) {\n            // Because NaN is not equal to NaN, we need to special +1/-1 handling here.\n            if (lhsArray[i] instanceof Double) {\n                final boolean isNaN = ((Double) lhsArray[i]).isNaN();\n                if (isNaN != ((Double) rhsArray[i]).isNaN()) {\n                    this.setEquals(false);\n                    return;\n                }\n                if (isNaN && ((Double) lhsArray[i]).isNaN()) {\n                    continue;\n                }\n            } else if (lhsArray[i] instanceof Float) {\n                final boolean isNaN = ((Float) lhsArray[i]).isNaN();\n                if (isNaN != ((Float) rhsArray[i]).isNaN()) {\n                    this.setEquals(false);\n                    return;\n                }\n                if (isNaN && ((Float) lhsArray[i]).isNaN()) {\n                    continue;\n                }\n            }\n            isEquals = lhsArray[i].equals(rhsArray[i]);\n            if (!isEquals) {\n                return;\n            }\n        } else {\n            // Not a primitive or a Number\n            isEquals = lhsArray[i].equals(rhsArray[i]);\n            if (!isEquals) {\n                return;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..7acfc386 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,62 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n+private void appendArray(Object lhs, Object rhs) {\n+    // Not an array of primitives or objects\n+    final Object[] lhsArray = (Object[]) lhs;\n+    final Object[] rhsArray = (Object[]) rhs;\n+    if (lhsArray.length != rhsArray.length) {\n+        this.setEquals(false);\n+        return;\n+    }\n+\n+    for (int i = 0; i < lhsArray.length && isEquals; i++) {\n+        if (lhsArray[i] == rhsArray[i]) {\n+            continue;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+        if (lhsArray[i] == null || rhsArray[i] == null) {\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+            return;\n+        }\n+        final Class<?> class1 = lhsArray[i].getClass();\n+        if (class1.isArray()) {\n+            appendArray(lhsArray[i], rhsArray[i]);\n+            continue;\n+        }\n+        if (lhsArray[i] instanceof Number) {\n+            // Because NaN is not equal to NaN, we need to special +1/-1 handling here.\n+            if (lhsArray[i] instanceof Double) {\n+                final boolean isNaN = ((Double) lhsArray[i]).isNaN();\n+                if (isNaN != ((Double) rhsArray[i]).isNaN()) {\n+                    this.setEquals(false);\n+                    return;\n+                }\n+                if (isNaN && ((Double) lhsArray[i]).isNaN()) {\n+                    continue;\n+                }\n+            } else if (lhsArray[i] instanceof Float) {\n+                final boolean isNaN = ((Float) lhsArray[i]).isNaN();\n+                if (isNaN != ((Float) rhsArray[i]).isNaN()) {\n+                    this.setEquals(false);\n+                    return;\n+                }\n+                if (isNaN && ((Float) lhsArray[i]).isNaN()) {\n+                    continue;\n+                }\n+            }\n+            isEquals = lhsArray[i].equals(rhsArray[i]);\n+            if (!isEquals) {\n+                return;\n+            }\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Not a primitive or a Number\n+            isEquals = lhsArray[i].equals(rhsArray[i]);\n+            if (!isEquals) {\n+                return;\n+            }\n         }\n-        return this;\n     }\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}