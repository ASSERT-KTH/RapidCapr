{
    "patch": "    if (provided == null || (provided.isExplicitlyProvided() && provided.explicitModule == null)) {\n      Node grandparent = parent.getParent();\n      if (grandparent != null) {\n        grandparent.removeChild(parent);\n        compiler.reportCodeChange();\n      } else {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      if (providedModule == null) {\n        compiler.report(\n              t.makeError(n, EXPLICIT_REQUIRE_MISSING_PROVIDE_ERROR, ns));\n      } else {\n        JSModule module = t.getModule();\n        if (moduleGraph != null && module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n      if (parent.getParent() != null) {\n        parent.detachFromParent();\n      }\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..1d656353 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,38 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    if (provided == null || (provided.isExplicitlyProvided() && provided.explicitModule == null)) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null) {\n+        grandparent.removeChild(parent);\n+        compiler.reportCodeChange();\n+      } else {\n+        parent.detachFromParent();\n+        compiler.reportCodeChange();\n+      }\n+      unrecognizedRequires.add(\n+          new UnrecognizedRequire(n, ns, t.getSourceName()));\n+    } else {\n+      JSModule providedModule = provided.explicitModule;\n+      if (providedModule == null) {\n+        compiler.report(\n+              t.makeError(n, EXPLICIT_REQUIRE_MISSING_PROVIDE_ERROR, ns));\n+      } else {\n+        JSModule module = t.getModule();\n+        if (moduleGraph != null && module != providedModule &&\n+            !moduleGraph.dependsOn(module, providedModule)) {\n+          compiler.report(\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  providedModule.getName(),\n+                  module.getName()));\n+        }\n+      }\n+      maybeAddToSymbolTable(left);\n+      maybeAddStringNodeToSymbolTable(arg);\n+      if (parent.getParent() != null) {\n+        parent.detachFromParent();\n+      }\n+      compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}