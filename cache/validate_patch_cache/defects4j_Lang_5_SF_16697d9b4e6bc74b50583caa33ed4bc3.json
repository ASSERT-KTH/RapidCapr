{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.trim().isEmpty()) {\n        return null;\n    }\n\n    String[] parts = str.split(\"_\", -1);\n    int len = parts.length;\n\n    if (len > 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    if (len >= 1) {\n        if (parts[0].isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        language = parts[0];\n    }\n    if (len >= 2) {\n        if (parts[1].isEmpty() || ((len == 2) && (parts[1].length() != 2 || !Character.isUpperCase(parts[1].charAt(0)) || !Character.isUpperCase(parts[1].charAt(1))))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        country = parts[1];\n    }\n    if (len == 3) {\n        if (parts[2].isEmpty() || !isValidVariant(parts[2]) || parts[2].contains(\"__\") || parts[2].startsWith(\".\") || parts[2].endsWith(\".\")) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        variant = parts[2];\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidVariant(String s) {\n    if (s.isEmpty()) {\n        return false;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == '.') {\n            if (i == 0 || i == s.length() - 1 || s.charAt(i - 1) == '.' || !Character.isLetterOrDigit(s.charAt(i + 1))) {\n                return false;\n            }\n        } else if (c == '-' || c == '_' || Character.isLetterOrDigit(c)) {\n            // valid character\n        } else {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..64a71f6e 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,62 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.trim().isEmpty()) {\n+        return null;\n+    }\n+\n+    String[] parts = str.split(\"_\", -1);\n+    int len = parts.length;\n+\n+    if (len > 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    if (len >= 1) {\n+        if (parts[0].isEmpty()) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        language = parts[0];\n+    }\n+    if (len >= 2) {\n+        if (parts[1].isEmpty() || ((len == 2) && (parts[1].length() != 2 || !Character.isUpperCase(parts[1].charAt(0)) || !Character.isUpperCase(parts[1].charAt(1))))) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        country = parts[1];\n+    }\n+    if (len == 3) {\n+        if (parts[2].isEmpty() || !isValidVariant(parts[2]) || parts[2].contains(\"__\") || parts[2].startsWith(\".\") || parts[2].endsWith(\".\")) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        variant = parts[2];\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidVariant(String s) {\n+    if (s.isEmpty()) {\n+        return false;\n+    }\n+    for (int i = 0; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        if (c == '.') {\n+            if (i == 0 || i == s.length() - 1 || s.charAt(i - 1) == '.' || !Character.isLetterOrDigit(s.charAt(i + 1))) {\n+                return false;\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        } else if (c == '-' || c == '_' || Character.isLetterOrDigit(c)) {\n+            // valid character\n+        } else {\n+            return false;\n+        }\n     }\n+    return true;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}