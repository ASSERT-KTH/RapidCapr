{
    "patch": "public String getprop(String key, String defaultValue) {\n    String value = System.getProperty(key);\n    if (value == null) {\n        value = defaultValue;\n        String msg = \"getProperty(\" + key + \") returned null.\";\n        if (warnings == null) {\n            warnings = new String[] { msg };\n        } else {\n            String[] newWarnings = new String[warnings.length + 1];\n            System.arraycopy(warnings, 0, newWarnings, 0, warnings.length);\n            newWarnings[warnings.length] = msg;\n            warnings = newWarnings;\n        }\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..8e89b680 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key, String defaultValue) {\n+    String value = System.getProperty(key);\n+    if (value == null) {\n+        value = defaultValue;\n+        String msg = \"getProperty(\" + key + \") returned null.\";\n+        if (warnings == null) {\n+            warnings = new String[] { msg };\n+        } else {\n+            String[] newWarnings = new String[warnings.length + 1];\n+            System.arraycopy(warnings, 0, newWarnings, 0, warnings.length);\n+            newWarnings[warnings.length] = msg;\n+            warnings = newWarnings;\n+        }\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}