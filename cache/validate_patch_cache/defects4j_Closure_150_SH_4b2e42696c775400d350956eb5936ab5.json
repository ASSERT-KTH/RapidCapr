{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.NAME:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            defineVar(n, parent);\n          } \n          if (parent.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n          }\n          break;\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n             return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n          }\n          break;\n        case Token.LABEL:\n          return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..86b3cde4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,11 +1448,19 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+        case Token.NAME:\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            defineVar(n, parent);\n+          } \n+          if (parent.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+          }\n+          break;\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n-            return;\n+             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n@@ -1462,7 +1470,14 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        case Token.LP:\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+        case Token.LABEL:\n+          return;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}