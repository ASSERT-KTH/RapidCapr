{
    "patch": "private static final double EPSILON = 1e-8;\n\nprivate RealMatrix squareRoot(final RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n\n    // Compute the square root of positive eigenvalues or set them to zero\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(d.getRow(0)).map(eigenValue -> eigenValue < 0 ? 0 : Math.sqrt(eigenValue)).toArray()\n    );\n\n    // Check that the square of sqrtM is equal to m, within a given tolerance\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    final RealMatrix diff = sqrtM.multiply(sqrtM).subtract(m);\n    if (diff.getNorm() > EPSILON) {\n        throw new IllegalStateException(\n                \"Square root computation failed (norm of difference between sqrtM * sqrtM and m is too large)\");\n    }\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..198799fc1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static final double EPSILON = 1e-8;\n+\n+private RealMatrix squareRoot(final RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+\n+    // Compute the square root of positive eigenvalues or set them to zero\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(d.getRow(0)).map(eigenValue -> eigenValue < 0 ? 0 : Math.sqrt(eigenValue)).toArray()\n+    );\n+\n+    // Check that the square of sqrtM is equal to m, within a given tolerance\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    final RealMatrix diff = sqrtM.multiply(sqrtM).subtract(m);\n+    if (diff.getNorm() > EPSILON) {\n+        throw new IllegalStateException(\n+                \"Square root computation failed (norm of difference between sqrtM * sqrtM and m is too large)\");\n     }\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}