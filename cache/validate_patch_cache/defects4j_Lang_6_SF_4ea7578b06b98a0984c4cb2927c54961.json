{
    "patch": "public static String escapeCsv(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder(input.length() * 2);\n    for (int i = 0; i < input.length(); i++) {\n        char ch = input.charAt(i);\n        if (ch == CSV_DELIMITER || ch == CSV_QUOTE_CHAR || ch == CSV_ESCAPE_CHAR) {\n            sb.append(CSV_ESCAPE_CHAR).append(ch);\n        } else if (ch >= 0xD800 && ch <= 0xDBFF) {\n            // Supplementary character\n            if (i < input.length() - 1) {\n                int codePoint = Character.toCodePoint(ch, input.charAt(++i));\n                sb.append(Character.toChars(codePoint));\n            } else {\n                // Incomplete surrogate pair at end of input\n                sb.append(ch);\n            }\n        } else if (ch >= 0xDC00 && ch <= 0xDFFF) {\n            // Incomplete surrogate pair\n            sb.append(ch);\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..3a6672b4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,33 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String escapeCsv(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    StringBuilder sb = new StringBuilder(input.length() * 2);\n+    for (int i = 0; i < input.length(); i++) {\n+        char ch = input.charAt(i);\n+        if (ch == CSV_DELIMITER || ch == CSV_QUOTE_CHAR || ch == CSV_ESCAPE_CHAR) {\n+            sb.append(CSV_ESCAPE_CHAR).append(ch);\n+        } else if (ch >= 0xD800 && ch <= 0xDBFF) {\n+            // Supplementary character\n+            if (i < input.length() - 1) {\n+                int codePoint = Character.toCodePoint(ch, input.charAt(++i));\n+                sb.append(Character.toChars(codePoint));\n+            } else {\n+                // Incomplete surrogate pair at end of input\n+                sb.append(ch);\n             }\n+        } else if (ch >= 0xDC00 && ch <= 0xDFFF) {\n+            // Incomplete surrogate pair\n+            sb.append(ch);\n+        } else {\n+            sb.append(ch);\n         }\n     }\n+    return sb.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}