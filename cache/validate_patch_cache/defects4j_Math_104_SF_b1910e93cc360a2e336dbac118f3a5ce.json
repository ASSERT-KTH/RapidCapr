{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double eps = 10e-15;\n    double f = 1.0 / gamma(a);\n    double g = 1.0 - incompleteGamma(a, x);\n    double p = g;\n    double n = 1.0;\n    double an = a;\n    \n    while (Math.abs(n * p) > eps * Math.abs(f * g)) {\n        double pn = (x + an) * p - an * n * p;\n        double nn = n * (x + an) + n * (an - a + 1.0);\n        p = pn / nn;\n        an += 1.0;\n        n = nn;\n    }\n\n    return f * Math.exp(-x + a * Math.log(x) - logGamma(a)) * p;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e2823a036 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double eps = 10e-15;\n+    double f = 1.0 / gamma(a);\n+    double g = 1.0 - incompleteGamma(a, x);\n+    double p = g;\n+    double n = 1.0;\n+    double an = a;\n+    \n+    while (Math.abs(n * p) > eps * Math.abs(f * g)) {\n+        double pn = (x + an) * p - an * n * p;\n+        double nn = n * (x + an) + n * (an - a + 1.0);\n+        p = pn / nn;\n+        an += 1.0;\n+        n = nn;\n+    }\n+\n+    return f * Math.exp(-x + a * Math.log(x) - logGamma(a)) * p;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}