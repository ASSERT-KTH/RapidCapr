{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    } else if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof PeriodPrinter) {\n            return new PeriodFormatter((PeriodPrinter) obj, null);\n        } else if (obj instanceof PeriodParser) {\n            return new PeriodFormatter(null, (PeriodParser) obj);\n        } else {\n            throw new IllegalArgumentException(\"Invalid element type: \" + obj.getClass());\n        }\n    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> sublist = elementPairs.subList(1, size);\n        PeriodFormatter f;\n        if (notPrinter) {\n            f = toFormatter(sublist, notPrinter, false);\n            return new PeriodFormatter(null, sep.finish(f.getPrinter(), f.getParser()));\n        } else if (notParser) {\n            f = toFormatter(sublist, false, notParser);\n            return new PeriodFormatter(sep.finish(f.getPrinter(), f.getParser()), null);\n        } else {\n            f = toFormatter(sublist, false, false);\n            return new PeriodFormatter(sep.finish(f.getPrinter(), f.getParser()), sep.finish(f.getPrinter(), f.getParser()));\n        }\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..2d82f4a3 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,37 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    } else if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof PeriodPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) obj, null);\n+        } else if (obj instanceof PeriodParser) {\n+            return new PeriodFormatter(null, (PeriodParser) obj);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid element type: \" + obj.getClass());\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> sublist = elementPairs.subList(1, size);\n+        PeriodFormatter f;\n+        if (notPrinter) {\n+            f = toFormatter(sublist, notPrinter, false);\n+            return new PeriodFormatter(null, sep.finish(f.getPrinter(), f.getParser()));\n+        } else if (notParser) {\n+            f = toFormatter(sublist, false, notParser);\n+            return new PeriodFormatter(sep.finish(f.getPrinter(), f.getParser()), null);\n+        } else {\n+            f = toFormatter(sublist, false, false);\n+            return new PeriodFormatter(sep.finish(f.getPrinter(), f.getParser()), sep.finish(f.getPrinter(), f.getParser()));\n         }\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +831,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}