{
    "patch": "        long newMillis = -1;\n\n        for (int i = 0; i < count; i++) {\n            SavedField save = savedFields[i];\n            try {\n                long next = save.set(millis, resetFields);\n                if (newMillis == -1) {\n                    newMillis = next;\n                }\n                if (next != millis) {\n                    millis = next;\n\n                    // if the next field is a lower field, it might push\n                    // the millis value into an invalid range, so we adjust\n                    // the range once all the lower fields are set.\n                    if (i == (count - 1)) {\n                        break;\n                    } else {\n                        DateTimeField nextField = savedFields[i + 1].iField;\n                        if (nextField.getDurationField().getType().compareTo(DateTimeFieldType.days().getField(iChrono).getType()) < 0) {\n                            newMillis = iChrono.add(nextField.getRangeDurationField().getDuration(newMillis), newMillis);\n                            i++;\n                        }\n                    }\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n                }\n                throw e;\n            }\n        }\n\n        // if any of the fields caused the millis value to change\n        // we need to set all the fields again with the new value.\n        if (newMillis != -1 && newMillis != millis) {\n            computeMillis(resetFields, text);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..681c0c70 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long newMillis = -1;\n+\n+        for (int i = 0; i < count; i++) {\n+            SavedField save = savedFields[i];\n+            try {\n+                long next = save.set(millis, resetFields);\n+                if (newMillis == -1) {\n+                    newMillis = next;\n+                }\n+                if (next != millis) {\n+                    millis = next;\n+\n+                    // if the next field is a lower field, it might push\n+                    // the millis value into an invalid range, so we adjust\n+                    // the range once all the lower fields are set.\n+                    if (i == (count - 1)) {\n+                        break;\n+                    } else {\n+                        DateTimeField nextField = savedFields[i + 1].iField;\n+                        if (nextField.getDurationField().getType().compareTo(DateTimeFieldType.days().getField(iChrono).getType()) < 0) {\n+                            newMillis = iChrono.add(nextField.getRangeDurationField().getDuration(newMillis), newMillis);\n+                            i++;\n+                        }\n+                    }\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                }\n+                throw e;\n+            }\n+        }\n+\n+        // if any of the fields caused the millis value to change\n+        // we need to set all the fields again with the new value.\n+        if (newMillis != -1 && newMillis != millis) {\n+            computeMillis(resetFields, text);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}