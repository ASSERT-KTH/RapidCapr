{
    "patch": "      Node lastArg = null;\n      Node currArg = argList.getFirstChild();\n      while (currArg != null) {\n        boolean shouldRemove = false;\n        Var var = fnScope.getVar(currArg.getString());\n        if (!referenced.contains(var)) {\n          shouldRemove = true;\n          if (lastArg == null) {\n            // case where we remove first argument\n            argList.removeChild(currArg);\n            currArg = argList.getFirstChild();\n          } else {\n            // case where we remove other arguments\n            currArg = currArg.getNext();\n            lastArg.detachFromParent();\n          }\n        } else {\n          lastArg = currArg;\n          currArg = currArg.getNext();\n        }\n        if (shouldRemove) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2a075ec7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = null;\n+      Node currArg = argList.getFirstChild();\n+      while (currArg != null) {\n+        boolean shouldRemove = false;\n+        Var var = fnScope.getVar(currArg.getString());\n+        if (!referenced.contains(var)) {\n+          shouldRemove = true;\n+          if (lastArg == null) {\n+            // case where we remove first argument\n+            argList.removeChild(currArg);\n+            currArg = argList.getFirstChild();\n+          } else {\n+            // case where we remove other arguments\n+            currArg = currArg.getNext();\n+            lastArg.detachFromParent();\n+          }\n+        } else {\n+          lastArg = currArg;\n+          currArg = currArg.getNext();\n+        }\n+        if (shouldRemove) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}