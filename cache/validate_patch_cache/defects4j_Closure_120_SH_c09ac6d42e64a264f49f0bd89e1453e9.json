{
    "patch": "          // Consider the lifetime of the variable to be the lifetime of the function.\n          if (block != ref.getBasicBlock()) {\n            // Don't assume assignments in inner function scopes won't\n            // be executed multiple times.\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..114e1d25 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Consider the lifetime of the variable to be the lifetime of the function.\n+          if (block != ref.getBasicBlock()) {\n+            // Don't assume assignments in inner function scopes won't\n+            // be executed multiple times.\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}