{
    "patch": "public static String unescapeISO8859_1(String input)\n{\n    StringBuffer output = new StringBuffer();\n    for (int i = 0; i < input.length();)\n    {\n        char ch = input.charAt(i++);\n        if (ch == '=')\n        {\n            try {\n                int hexValue = Integer.parseInt(input.substring(i, i + 2), 16);\n                output.append((char)hexValue);\n                i += 2;\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Invalid hexadecimal encoding\");\n            }\n        }\n        else\n        {\n            output.append(ch);\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c8a227ce 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,29 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeISO8859_1(String input)\n+{\n+    StringBuffer output = new StringBuffer();\n+    for (int i = 0; i < input.length();)\n+    {\n+        char ch = input.charAt(i++);\n+        if (ch == '=')\n+        {\n+            try {\n+                int hexValue = Integer.parseInt(input.substring(i, i + 2), 16);\n+                output.append((char)hexValue);\n+                i += 2;\n+            } catch (NumberFormatException e) {\n+                throw new IllegalArgumentException(\"Invalid hexadecimal encoding\");\n+            }\n+        }\n+        else\n+        {\n+            output.append(ch);\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}