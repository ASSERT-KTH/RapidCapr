{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode argList = getFunctionArgList(function);\nint numArgs = argList.getChildCount();\nif (numArgs == 0) {\n    return;\n}\n\nHashSet<Node> toRemove = new HashSet<>();\nfor (int i = 0; i < numArgs; i++) {\n    Node arg = argList.getChildAtIndex(i);\n    Var var = fnScope.getVar(arg.getString());\n    if (!referenced.contains(var)) {\n        toRemove.add(arg);\n    } else if (!toRemove.isEmpty()) {\n        // Cannot skip an argument if previous argument was removed\n        Preconditions.checkState(false, \"Cannot skip removed arguments.\");\n    }\n}\nfor (Node arg : toRemove) {\n    argList.removeChild(arg);\n    compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fd53aa29 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+int numArgs = argList.getChildCount();\n+if (numArgs == 0) {\n+    return;\n+}\n+\n+HashSet<Node> toRemove = new HashSet<>();\n+for (int i = 0; i < numArgs; i++) {\n+    Node arg = argList.getChildAtIndex(i);\n+    Var var = fnScope.getVar(arg.getString());\n+    if (!referenced.contains(var)) {\n+        toRemove.add(arg);\n+    } else if (!toRemove.isEmpty()) {\n+        // Cannot skip an argument if previous argument was removed\n+        Preconditions.checkState(false, \"Cannot skip removed arguments.\");\n+    }\n+}\n+for (Node arg : toRemove) {\n+    argList.removeChild(arg);\n+    compiler.reportCodeChange();\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}