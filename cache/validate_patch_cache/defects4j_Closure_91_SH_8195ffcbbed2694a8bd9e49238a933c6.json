{
    "patch": "      if (NodeUtil.isGet(parent)) {\n          Node grandParent = parent.getParent();\n          if (grandParent.getType() == Token.EXPR_RESULT &&\n              NodeUtil.isGet(grandParent.getFirstChild()) &&\n              NodeUtil.isName(grandParent.getFirstFirstChild(), \"Object\") &&\n              NodeUtil.isName(grandParent.getSecondChild(), \"prototype\") &&\n              parent.getSecondChild() == n) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4232e5ec 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+          Node grandParent = parent.getParent();\n+          if (grandParent.getType() == Token.EXPR_RESULT &&\n+              NodeUtil.isGet(grandParent.getFirstChild()) &&\n+              NodeUtil.isName(grandParent.getFirstFirstChild(), \"Object\") &&\n+              NodeUtil.isName(grandParent.getSecondChild(), \"prototype\") &&\n+              parent.getSecondChild() == n) {\n+            return false;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}