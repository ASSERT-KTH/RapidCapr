{
    "patch": "    Set<String> paramsToRemove = new HashSet<>();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    NodeTraversal.traverseEs6(\n        compiler,\n        argList,\n        new NodeTraversal.AbstractShallowCallback() {\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName() && parent.isParamList()) {\n              Var var = fnScope.getVar(n.getString());\n              if (!referenced.contains(var)) {\n                paramsToRemove.add(n.getString());\n              }\n            }\n          }\n        });\n\n    boolean modifyCallers =\n        modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function)\n            && !varAssignOptimizer.mayModify(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (Node arg : argList.children()) {\n        if (arg.isName()\n            && paramsToRemove.contains(arg.getString())) {\n          argList.removeChild(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..73cf9aef 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> paramsToRemove = new HashSet<>();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    NodeTraversal.traverseEs6(\n+        compiler,\n+        argList,\n+        new NodeTraversal.AbstractShallowCallback() {\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isName() && parent.isParamList()) {\n+              Var var = fnScope.getVar(n.getString());\n+              if (!referenced.contains(var)) {\n+                paramsToRemove.add(n.getString());\n+              }\n+            }\n+          }\n+        });\n+\n+    boolean modifyCallers =\n+        modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function)\n+            && !varAssignOptimizer.mayModify(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (Node arg : argList.children()) {\n+        if (arg.isName()\n+            && paramsToRemove.contains(arg.getString())) {\n+          argList.removeChild(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}