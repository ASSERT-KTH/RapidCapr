{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n   \n    int year = iDefaultYear;\n    int month = 1;\n    int day = 1;\n    boolean hasMonthOrDay = false;\n\n    for (int i = 0; i < count; i++) {\n        SavedField field = savedFields[i];\n        DateTimeFieldType type = field.iField.getType();\n\n        if (type == DateTimeFieldType.year()) {\n            year = field.iValue;\n            continue;\n        }\n\n        if (type == DateTimeFieldType.monthOfYear()) {\n            month = checkMonth(field.iValue);\n            hasMonthOrDay = true;\n            continue;\n        }\n\n        if (type == DateTimeFieldType.dayOfMonth()) {\n            day = checkDayOfMonth(field.iValue, month, year);\n            hasMonthOrDay = true;\n            continue;\n        }\n\n        // other types of fields (e.g. hour, minute, etc.)\n        // just update the value without changing the date\n        long newValue = field.iField.set(getMillis(), field.iValue);\n        setMillis(newValue);\n    }\n\n    if (!hasMonthOrDay) {\n        // if no month or day is seen before other fields, assume January 1st as base date\n        month = 1;\n        day = 1;\n    }\n\n    setChronology(ISOChronology.getInstanceUTC()); // set UTC chronology temporarily\n\n    try {\n        setYear(year);\n        setMonthOfYear(month);\n        setDayOfMonth(day);\n    } catch (IllegalArgumentException e) {\n        if (text != null) {\n            e = new IllegalFieldValueException(\n                    \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n        }\n        throw e;\n    } finally {\n        setChronology(iChrono); // restore the original chronology\n    }\n\n    if (iZone == null) {\n        long millis = getMillis();\n        millis -= iOffset;\n        return resetTimeOfDay(millis);\n    } else {\n        long millis = getMillis();\n        millis -= iZone.getOffset(millis);\n        millis = resetTimeOfDay(millis);\n        long adjustedMillis = iZone.adjustOffset(millis, iZone.getStandardOffset(millis));\n        if (adjustedMillis != millis && text != null) {\n            throw new IllegalArgumentException(\n                    \"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to time zone offset transition\");\n        }\n        return adjustedMillis;\n    }\n}\n\nprivate static int checkMonth(int month) {\n    if (month < 1 || month > 12) {\n        throw new IllegalFieldValueException(\n                DateTimeFieldType.monthOfYear(), \"MonthOfYear\", month, null);\n    }\n    return month;\n}\n\nprivate static int checkDayOfMonth(int day, int month, int year) {\n    if (day < 1 || day > 31) {\n        throw new IllegalFieldValueException(\n                DateTimeFieldType.dayOfMonth(), \"DayOfMonth\", day, null);\n    }\n    int maxDay = ISOChronology.getInstanceUTC().getDaysInMonth(year, month);\n    if (day > maxDay) {\n        throw new IllegalFieldValueException(\n                DateTimeFieldType.dayOfMonth(), \"DayOfMonth\", day, null);\n    }\n    return day;\n}\n\nprivate long resetTimeOfDay(long millis) {\n    // reset the time of day to midnight (00:00:00)\n    LocalDate date = new LocalDate(millis, iChrono);\n    return date.toDateTimeAtStartOfDay().getMillis();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a061bda0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,112 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+   \n+    int year = iDefaultYear;\n+    int month = 1;\n+    int day = 1;\n+    boolean hasMonthOrDay = false;\n+\n+    for (int i = 0; i < count; i++) {\n+        SavedField field = savedFields[i];\n+        DateTimeFieldType type = field.iField.getType();\n+\n+        if (type == DateTimeFieldType.year()) {\n+            year = field.iValue;\n+            continue;\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+\n+        if (type == DateTimeFieldType.monthOfYear()) {\n+            month = checkMonth(field.iValue);\n+            hasMonthOrDay = true;\n+            continue;\n         }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+        if (type == DateTimeFieldType.dayOfMonth()) {\n+            day = checkDayOfMonth(field.iValue, month, year);\n+            hasMonthOrDay = true;\n+            continue;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n-            }\n+\n+        // other types of fields (e.g. hour, minute, etc.)\n+        // just update the value without changing the date\n+        long newValue = field.iField.set(getMillis(), field.iValue);\n+        setMillis(newValue);\n+    }\n+\n+    if (!hasMonthOrDay) {\n+        // if no month or day is seen before other fields, assume January 1st as base date\n+        month = 1;\n+        day = 1;\n+    }\n+\n+    setChronology(ISOChronology.getInstanceUTC()); // set UTC chronology temporarily\n+\n+    try {\n+        setYear(year);\n+        setMonthOfYear(month);\n+        setDayOfMonth(day);\n+    } catch (IllegalArgumentException e) {\n+        if (text != null) {\n+            e = new IllegalFieldValueException(\n+                    \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n         }\n-        \n-        return millis;\n+        throw e;\n+    } finally {\n+        setChronology(iChrono); // restore the original chronology\n+    }\n+\n+    if (iZone == null) {\n+        long millis = getMillis();\n+        millis -= iOffset;\n+        return resetTimeOfDay(millis);\n+    } else {\n+        long millis = getMillis();\n+        millis -= iZone.getOffset(millis);\n+        millis = resetTimeOfDay(millis);\n+        long adjustedMillis = iZone.adjustOffset(millis, iZone.getStandardOffset(millis));\n+        if (adjustedMillis != millis && text != null) {\n+            throw new IllegalArgumentException(\n+                    \"Cannot parse \\\"\" + text + \"\\\": Illegal instant due to time zone offset transition\");\n+        }\n+        return adjustedMillis;\n+    }\n+}\n+\n+private static int checkMonth(int month) {\n+    if (month < 1 || month > 12) {\n+        throw new IllegalFieldValueException(\n+                DateTimeFieldType.monthOfYear(), \"MonthOfYear\", month, null);\n+    }\n+    return month;\n+}\n+\n+private static int checkDayOfMonth(int day, int month, int year) {\n+    if (day < 1 || day > 31) {\n+        throw new IllegalFieldValueException(\n+                DateTimeFieldType.dayOfMonth(), \"DayOfMonth\", day, null);\n     }\n+    int maxDay = ISOChronology.getInstanceUTC().getDaysInMonth(year, month);\n+    if (day > maxDay) {\n+        throw new IllegalFieldValueException(\n+                DateTimeFieldType.dayOfMonth(), \"DayOfMonth\", day, null);\n+    }\n+    return day;\n+}\n+\n+private long resetTimeOfDay(long millis) {\n+    // reset the time of day to midnight (00:00:00)\n+    LocalDate date = new LocalDate(millis, iChrono);\n+    return date.toDateTimeAtStartOfDay().getMillis();\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}