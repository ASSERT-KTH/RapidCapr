{
    "patch": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  boolean isFunctionScope = false;\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      /*\n       * Don't assume that assignments in inner function scopes won't\n       * be executed multiple times, unless they're in immediately\n       * invoked function expressions.\n       */\n      isFunctionScope = block != ref.getBasicBlock();\n      if (!NodeUtil.isInvocationTarget(block.getParent().getLastChild())) {\n        break;\n      }\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  if (isFunctionScope) {\n    // The variable appears to have been assigned more than once in a function scope.\n    return false;\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..bc7d17ca 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,37 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n+\n+  // Make sure this assignment is not in a loop.\n+  boolean isFunctionScope = false;\n+  for (BasicBlock block = ref.getBasicBlock();\n+       block != null; block = block.getParent()) {\n+    if (block.isFunction) {\n+      /*\n+       * Don't assume that assignments in inner function scopes won't\n+       * be executed multiple times, unless they're in immediately\n+       * invoked function expressions.\n+       */\n+      isFunctionScope = block != ref.getBasicBlock();\n+      if (!NodeUtil.isInvocationTarget(block.getParent().getLastChild())) {\n+        break;\n+      }\n+    } else if (block.isLoop) {\n+      return false;\n+    }\n+  }\n+\n+  if (isFunctionScope) {\n+    // The variable appears to have been assigned more than once in a function scope.\n+    return false;\n+  }\n+  return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}