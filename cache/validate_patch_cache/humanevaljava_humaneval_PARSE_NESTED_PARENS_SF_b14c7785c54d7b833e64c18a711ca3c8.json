{
    "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    List<Integer> result = new ArrayList<>();\n    String[] paren_groups = paren_string.split(\" \");\n    Pattern pattern = Pattern.compile(\"^([(]+)(.*)([)]+)$\"); // check for leading/trailing parentheses\n    Matcher matcher;\n\n    for (String paren_group : paren_groups) {\n        matcher = pattern.matcher(paren_group);\n        if (matcher.find()) {\n            int depth = 0, max_depth = 0;\n            String inner = matcher.group(2);\n            for (char c : inner.toCharArray()) {\n              ",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\nindex 6bc914f..d33f362 100644\n--- a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\n+++ b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\n@@ -4,22 +4,17 @@ import java.util.ArrayList;\n import java.util.List;\n \n public class PARSE_NESTED_PARENS {\n-    public static List<Integer> parse_nested_parens(String paren_string) {\n-        String[] paren_groups = paren_string.split(\" \");\n-        List<Integer> result = new ArrayList<Integer>();\n+public static List<Integer> parse_nested_parens(String paren_string) {\n+    List<Integer> result = new ArrayList<>();\n+    String[] paren_groups = paren_string.split(\" \");\n+    Pattern pattern = Pattern.compile(\"^([(]+)(.*)([)]+)$\"); // check for leading/trailing parentheses\n+    Matcher matcher;\n \n-        for (String paren_group : paren_groups) {\n-            int depth = 0;\n-            int max_depth = 0;\n-            for (char c : paren_group.toCharArray()){\n-                if (c == '('){\n-                    depth += 1;\n-                    max_depth = Math.max(depth, max_depth);\n-                }\n-            }\n-            result.add(max_depth);\n-        }\n-\n-        return result;\n-    }\n+    for (String paren_group : paren_groups) {\n+        matcher = pattern.matcher(paren_group);\n+        if (matcher.find()) {\n+            int depth = 0, max_depth = 0;\n+            String inner = matcher.group(2);\n+            for (char c : inner.toCharArray()) {\n+              \n }",
    "result_reason": " /tmp/humaneval-PARSE_NESTED_PARENS/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java:[20,2] reached end of file while parsing",
    "test_result": "ERROR"
}