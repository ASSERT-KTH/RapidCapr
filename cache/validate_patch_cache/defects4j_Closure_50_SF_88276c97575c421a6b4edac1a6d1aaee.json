{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.common.collect.Lists;\nimport com.google.javascript.jscomp.InlineCostEstimator;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass BugFixer {\n    private Node root;\n\n    public BugFixer(Node root) {\n        this.root = root;\n    }\n\n    private boolean hasExceptionHandler(Node cfgNode) {\n        List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n        for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n            if (edge.getValue() == Branch.ON_EX) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private Node tryFoldArrayJoin(Node n) {\n        Node callTarget = n.getFirstChild();\n\n        if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n            return n;\n        }\n\n        Node right = callTarget.getNext();\n        if (right != null) {\n            if (!NodeUtil.isImmutableValue(right)) {\n                return n;\n            }\n        }\n\n        Node arrayNode = callTarget.getFirstChild();\n        Node functionName = arrayNode.getNext();\n\n        if ((arrayNode.getType() != Token.ARRAYLIT) ||\n                !functionName.getString().equals(\"join\")) {\n            return n;\n        }\n\n        // \",\" is the default, it doesn't need to be explicit\n\n        String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n        List<Node> arrayFoldedChildren = Lists.newLinkedList();\n        StringBuilder sb = null;\n        int foldedSize = 0;\n        Node prev = null;\n        Node elem = arrayNode.getFirstChild();\n        // Merges adjacent String nodes.\n        while (elem != null) {\n            if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n                if (sb == null) {\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(joinString);\n                }\n                sb.append(NodeUtil.getArrayElementStringValue(elem));\n            } else {\n                if (sb != null) {\n                    Preconditions.checkNotNull(prev);\n                    // + 2 for the quotes.\n                    foldedSize += sb.length() + 2;\n                    arrayFoldedChildren.add(\n                            Node.newString(sb.toString()).copyInformationFrom(prev));\n                    sb = null;\n                }\n                foldedSize += InlineCostEstimator.getCost(elem);\n                arrayFoldedChildren.add(elem);\n            }\n            prev = elem;\n            elem = elem.getNext();\n        }\n\n        if (sb != null) {\n            Preconditions.checkNotNull(prev);\n            // + 2 for the quotes.\n            foldedSize += sb.length() + 2;\n            arrayFoldedChildren.add(\n                    Node.newString(sb.toString()).copyInformationFrom(prev));\n        }\n        // one for each comma.\n        foldedSize += arrayFoldedChildren.size() - 1;\n\n        int originalSize = InlineCostEstimator.getCost(n);\n        switch (arrayFoldedChildren.size()) {\n            case 0:\n                Node emptyStringNode = Node.newString(\"\");\n                n.getParent().replaceChild(n, emptyStringNode);\n                reportCodeChange();\n                return emptyStringNode;\n            case 1:\n                Node foldedStringNode;\n                if (arrayFoldedChildren.get(0).getType() == Token.STRING) {\n                    foldedStringNode = arrayFoldedChildren.get(0);\n                } else {\n                    foldedStringNode = new Node(Token.CAST, new Node(Token.STRING), arrayFoldedChildren.get(0));\n                }\n                if (foldedSize > originalSize) {\n                    return n;\n                }\n                for (Node stringNode : arrayFoldedChildren.subList(1, arrayFoldedChildren.size())) {\n                    foldedStringNode = new Node(Token.ADD, foldedStringNode, new Node(Token.ADD, Node.newString(joinString), stringNode));\n                }\n                n.getParent().replaceChild(n, foldedStringNode);\n                reportCodeChange();\n                return foldedStringNode;\n            default:\n                // No folding could actually be performed.\n                if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                    return n;\n                }\n                int kJoinOverhead = \"[].join()\".length();\n                foldedSize += kJoinOverhead;\n                foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n                if (foldedSize > originalSize) {\n                    return n;\n                }\n                arrayNode.detachChildren();\n                for (Node node : arrayFoldedChildren) {\n                    arrayNode.addChildToBack(node);\n                }\n                reportCodeChange();\n                break;\n        }\n\n        return n;\n    }\n\n    private ControlFlowGraph<Node> getCfg() {\n        return new ControlFlowGraph<Node>(root);\n    }\n\n    private void reportCodeChange() {\n\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..9f799f44 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,155 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n-\n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.InlineCostEstimator;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+class BugFixer {\n+    private Node root;\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n+    public BugFixer(Node root) {\n+        this.root = root;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+    private boolean hasExceptionHandler(Node cfgNode) {\n+        List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+        for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+            if (edge.getValue() == Branch.ON_EX) {\n+                return true;\n+            }\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n+        return false;\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n+    private Node tryFoldArrayJoin(Node n) {\n+        Node callTarget = n.getFirstChild();\n+\n+        if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+            return n;\n         }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n+\n+        Node right = callTarget.getNext();\n+        if (right != null) {\n+            if (!NodeUtil.isImmutableValue(right)) {\n+                return n;\n+            }\n         }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n+\n+        Node arrayNode = callTarget.getFirstChild();\n+        Node functionName = arrayNode.getNext();\n+\n+        if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+                !functionName.getString().equals(\"join\")) {\n+            return n;\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n+\n+        // \",\" is the default, it doesn't need to be explicit\n+\n+        String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n+        List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+        StringBuilder sb = null;\n+        int foldedSize = 0;\n+        Node prev = null;\n+        Node elem = arrayNode.getFirstChild();\n+        // Merges adjacent String nodes.\n+        while (elem != null) {\n+            if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+                if (sb == null) {\n+                    sb = new StringBuilder();\n+                } else {\n+                    sb.append(joinString);\n+                }\n+                sb.append(NodeUtil.getArrayElementStringValue(elem));\n+            } else {\n+                if (sb != null) {\n+                    Preconditions.checkNotNull(prev);\n+                    // + 2 for the quotes.\n+                    foldedSize += sb.length() + 2;\n+                    arrayFoldedChildren.add(\n+                            Node.newString(sb.toString()).copyInformationFrom(prev));\n+                    sb = null;\n+                }\n+                foldedSize += InlineCostEstimator.getCost(elem);\n+                arrayFoldedChildren.add(elem);\n+            }\n+            prev = elem;\n+            elem = elem.getNext();\n+        }\n+\n+        if (sb != null) {\n+            Preconditions.checkNotNull(prev);\n+            // + 2 for the quotes.\n+            foldedSize += sb.length() + 2;\n+            arrayFoldedChildren.add(\n+                    Node.newString(sb.toString()).copyInformationFrom(prev));\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+        // one for each comma.\n+        foldedSize += arrayFoldedChildren.size() - 1;\n+\n+        int originalSize = InlineCostEstimator.getCost(n);\n+        switch (arrayFoldedChildren.size()) {\n+            case 0:\n+                Node emptyStringNode = Node.newString(\"\");\n+                n.getParent().replaceChild(n, emptyStringNode);\n+                reportCodeChange();\n+                return emptyStringNode;\n+            case 1:\n+                Node foldedStringNode;\n+                if (arrayFoldedChildren.get(0).getType() == Token.STRING) {\n+                    foldedStringNode = arrayFoldedChildren.get(0);\n+                } else {\n+                    foldedStringNode = new Node(Token.CAST, new Node(Token.STRING), arrayFoldedChildren.get(0));\n+                }\n+                if (foldedSize > originalSize) {\n+                    return n;\n+                }\n+                for (Node stringNode : arrayFoldedChildren.subList(1, arrayFoldedChildren.size())) {\n+                    foldedStringNode = new Node(Token.ADD, foldedStringNode, new Node(Token.ADD, Node.newString(joinString), stringNode));\n+                }\n+                n.getParent().replaceChild(n, foldedStringNode);\n+                reportCodeChange();\n+                return foldedStringNode;\n+            default:\n+                // No folding could actually be performed.\n+                if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n+                    return n;\n+                }\n+                int kJoinOverhead = \"[].join()\".length();\n+                foldedSize += kJoinOverhead;\n+                foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n+                if (foldedSize > originalSize) {\n+                    return n;\n+                }\n+                arrayNode.detachChildren();\n+                for (Node node : arrayFoldedChildren) {\n+                    arrayNode.addChildToBack(node);\n+                }\n+                reportCodeChange();\n+                break;\n         }\n-        reportCodeChange();\n-        break;\n+\n+        return n;\n     }\n \n-    return n;\n-  }\n+    private ControlFlowGraph<Node> getCfg() {\n+        return new ControlFlowGraph<Node>(root);\n+    }\n+\n+    private void reportCodeChange() {\n+\n+    }\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +681,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}