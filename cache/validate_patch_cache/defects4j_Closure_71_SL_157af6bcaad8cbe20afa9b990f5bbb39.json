{
    "patch": "boolean isOverride = false; // add this line before the conditional\nif (t.inGlobalScope()) {\n    isOverride = parent != null &&\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n} else {\n    isOverride = parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop &&\n        parent.getParent().getType() == Token.EXPR_RESULT &&\n        !parent.getParent().getParent().isFunction();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..62b5d1b6 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,17 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = false; // add this line before the conditional\n+if (t.inGlobalScope()) {\n+    isOverride = parent != null &&\n+        parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop;\n+} else {\n+    isOverride = parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop &&\n+        parent.getParent().getType() == Token.EXPR_RESULT &&\n+        !parent.getParent().getParent().isFunction();\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}