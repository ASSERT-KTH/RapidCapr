{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n    boolean resolved = resolveViaRegistry(errorReporter, enclosingScope); // try to resolve via registry\n\n    // Check for an implicit prototype cycle and handle it if necessary.\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(errorReporter);\n\n        // Try again to resolve via registry. If we're still not resolved, try to resolve via properties.\n        resolved = resolveViaRegistry(errorReporter, enclosingScope);\n        if (!resolved) {\n          resolveViaProperties(errorReporter, enclosingScope);\n        }\n    }\n\n    // If the type is resolved, finish the property continuations and return it.\n    if (isResolved()) {\n        super.resolveInternal(errorReporter, enclosingScope);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If we aren't resolved yet, try to resolve via properties.\n    resolveViaProperties(errorReporter, enclosingScope);\n\n    // If the type is resolved, finish the property continuations and return it.\n    if (isResolved()) {\n        super.resolveInternal(errorReporter, enclosingScope);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // Otherwise, we're not resolved. Return this.\n    return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..bb73c99b 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,40 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n+    boolean resolved = resolveViaRegistry(errorReporter, enclosingScope); // try to resolve via registry\n+\n+    // Check for an implicit prototype cycle and handle it if necessary.\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+        handleTypeCycle(errorReporter);\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+        // Try again to resolve via registry. If we're still not resolved, try to resolve via properties.\n+        resolved = resolveViaRegistry(errorReporter, enclosingScope);\n+        if (!resolved) {\n+          resolveViaProperties(errorReporter, enclosingScope);\n+        }\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // If the type is resolved, finish the property continuations and return it.\n+    if (isResolved()) {\n+        super.resolveInternal(errorReporter, enclosingScope);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    super.resolveInternal(t, enclosing);\n+    // If we aren't resolved yet, try to resolve via properties.\n+    resolveViaProperties(errorReporter, enclosingScope);\n+\n+    // If the type is resolved, finish the property continuations and return it.\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        super.resolveInternal(errorReporter, enclosingScope);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    // Otherwise, we're not resolved. Return this.\n+    return this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.AssertionFailedError: Expected exactly one warning or error Errors:",
    "test_result": "FAIL"
}