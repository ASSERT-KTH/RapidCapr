{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original simplex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // reflect\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        final int reflectOutcome = comparator.compare(reflected, original[original.length - 1]);\n        if (reflectOutcome < 0) {\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            // expand\n            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, gamma, comparator);\n            final int expandOutcome = comparator.compare(expanded, reflected);\n            if (expandOutcome < 0) {\n                simplex = simplexWithoutWorst(reflectedSimplex, expanded);\n            } else {\n                simplex = simplexWithoutWorst(reflectedSimplex, reflected);\n            }\n\n            return;\n        }\n\n        final int worst = getWorst(original);\n        final RealPointValuePair pWorst = original[worst];\n\n        final int secondWorst = getSecondWorst(original, worst);\n        final RealPointValuePair pSecondWorst = original[secondWorst];\n\n        // Compute the contraction coefficient, gamma\n        final RealPointValuePair contracted;\n        int contractOutcome;\n        if (reflectOutcome >= 0) {\n            // the reflected point is worse than the second worst\n            if (comparator.compare(reflected, pWorst) < 0) {\n                contracted = evaluateNewSimplex(original, rho, comparator);\n                contractOutcome = comparator.compare(contracted, pWorst);\n                if (contractOutcome < 0) {\n                    simplex = simplexWithoutWorst(original, contracted);\n                } else {\n                    shrink(original, best, comparator);\n                }\n            } else {\n                final RealPointValuePair contractedOutside = evaluateNewSimplex(original, rho, comparator);\n                final RealPointValuePair[] contractedOutsideSimplex = simplex;\n                contractOutcome = comparator.compare(contractedOutside, reflected);\n                if (contractOutcome < 0) {\n                    simplex = simplexWithoutWorst(contractedOutsideSimplex, contractedOutside);\n                } else {\n                    shrink(original, best, comparator);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..82e2bd9e4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,66 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original simplex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // reflect\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        final int reflectOutcome = comparator.compare(reflected, original[original.length - 1]);\n+        if (reflectOutcome < 0) {\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            // expand\n+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, gamma, comparator);\n+            final int expandOutcome = comparator.compare(expanded, reflected);\n+            if (expandOutcome < 0) {\n+                simplex = simplexWithoutWorst(reflectedSimplex, expanded);\n+            } else {\n+                simplex = simplexWithoutWorst(reflectedSimplex, reflected);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n+        }\n \n-            // check convergence\n-                return;\n+        final int worst = getWorst(original);\n+        final RealPointValuePair pWorst = original[worst];\n+\n+        final int secondWorst = getSecondWorst(original, worst);\n+        final RealPointValuePair pSecondWorst = original[secondWorst];\n+\n+        // Compute the contraction coefficient, gamma\n+        final RealPointValuePair contracted;\n+        int contractOutcome;\n+        if (reflectOutcome >= 0) {\n+            // the reflected point is worse than the second worst\n+            if (comparator.compare(reflected, pWorst) < 0) {\n+                contracted = evaluateNewSimplex(original, rho, comparator);\n+                contractOutcome = comparator.compare(contracted, pWorst);\n+                if (contractOutcome < 0) {\n+                    simplex = simplexWithoutWorst(original, contracted);\n+                } else {\n+                    shrink(original, best, comparator);\n+                }\n+            } else {\n+                final RealPointValuePair contractedOutside = evaluateNewSimplex(original, rho, comparator);\n+                final RealPointValuePair[] contractedOutsideSimplex = simplex;\n+                contractOutcome = comparator.compare(contractedOutside, reflected);\n+                if (contractOutcome < 0) {\n+                    simplex = simplexWithoutWorst(contractedOutsideSimplex, contractedOutside);\n+                } else {\n+                    shrink(original, best, comparator);\n+                }\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}