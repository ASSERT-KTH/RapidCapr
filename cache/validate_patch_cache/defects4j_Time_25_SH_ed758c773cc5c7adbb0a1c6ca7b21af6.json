{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int beforeDstOffset = offsetLocal - getStandardOffset(nextAdjusted);\n                    int afterDstOffset = getOffset(nextAdjusted);\n                    if (beforeDstOffset < afterDstOffset) {\n                        return offsetLocal;\n                    }\n                }\n            } else if (offsetLocal > offsetAdjusted) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                // check if time is in a \"fall-back\" transition\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevAdjusted < instantAdjusted && prevLocal > instantAdjusted) {\n                    // if so, use the earlier offset\n                    return getOffset(prevLocal);\n                }\n                // check if time is in a \"spring-forward\" transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal < instantAdjusted && nextAdjusted >= instantLocal) {\n                    // if so, use the later offset\n                    return getOffset(nextLocal);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d031faaf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int beforeDstOffset = offsetLocal - getStandardOffset(nextAdjusted);\n+                    int afterDstOffset = getOffset(nextAdjusted);\n+                    if (beforeDstOffset < afterDstOffset) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else if (offsetLocal > offsetAdjusted) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                // check if time is in a \"fall-back\" transition\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevAdjusted < instantAdjusted && prevLocal > instantAdjusted) {\n+                    // if so, use the earlier offset\n+                    return getOffset(prevLocal);\n+                }\n+                // check if time is in a \"spring-forward\" transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal < instantAdjusted && nextAdjusted >= instantLocal) {\n+                    // if so, use the later offset\n+                    return getOffset(nextLocal);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}