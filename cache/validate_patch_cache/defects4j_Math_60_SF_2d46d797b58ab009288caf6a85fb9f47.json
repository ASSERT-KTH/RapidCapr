{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    final double dev = x - mean;\n    if (FastMath.abs(dev) <= 40 * standardDeviation) {\n        try {\n            double result = 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n            if (Double.isNaN(result)) {\n                if (dev < 0.0) {\n                    return 0.0;\n                } else {\n                    return 1.0;\n                }\n            } else {\n                return FastMath.max(0.0, FastMath.min(1.0, result));\n            }\n        } catch (MaxIterationsExceededException ex) {\n            if (dev < 0.0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n    } else {\n        return dev < 0.0 ? 0.0 : 1.0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..3f41866ac 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,34 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    final double dev = x - mean;\n+    if (FastMath.abs(dev) <= 40 * standardDeviation) {\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            double result = 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n+            if (Double.isNaN(result)) {\n+                if (dev < 0.0) {\n+                    return 0.0;\n+                } else {\n+                    return 1.0;\n+                }\n+            } else {\n+                return FastMath.max(0.0, FastMath.min(1.0, result));\n+            }\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n+            if (dev < 0.0) {\n+                return 0.0;\n             } else {\n-                throw ex;\n+                return 1.0;\n             }\n         }\n+    } else {\n+        return dev < 0.0 ? 0.0 : 1.0;\n     }\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}