{
    "patch": " private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n          \n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // see http://issues.apache.org/jira/browse/LANG-59\n    //\n    // Manually truncate milliseconds, seconds and minutes, rather than using\n    // Calendar methods.\n\n    // Save original DST information\n    TimeZone timeZone = val.getTimeZone();\n    Date date = val.getTime();\n    boolean dst = timeZone.inDaylightTime(date);\n\n    // Truncate milliseconds\n    val.set(Calendar.MILLISECOND, 0);\n\n    // Truncate seconds\n    val.set(Calendar.SECOND, 0);\n\n    // Truncate minutes\n    val.set(Calendar.MINUTE, 0);\n\n    // Reset time\n    val.set(Calendar.HOUR_OF_DAY, 0);\n    val.set(Calendar.AM_PM, Calendar.AM);\n\n    // Truncate day of year\n    val.set(Calendar.DAY_OF_YEAR, 1);\n\n    // Truncate week of year\n    val.set(Calendar.WEEK_OF_YEAR, 1);\n\n    // Determine if rounding should be up\n    boolean roundUp = false;\n    if (round) {\n        switch (field) {\n            case Calendar.SECOND:\n                roundUp = val.get(Calendar.MILLISECOND) >= 500;\n                break;\n            case Calendar.MINUTE:\n                roundUp = val.get(Calendar.SECOND) >= 30;\n                break;\n            case Calendar.HOUR_OF_DAY:\n            case Calendar.HOUR:\n                roundUp = val.get(Calendar.MINUTE) >= 30;\n                break;\n            case DateUtils.SEMI_MONTH:\n                int dayOfMonth = val.get(Calendar.DATE);\n                if (dayOfMonth <= 15) {\n                    roundUp = val.get(Calendar.DAY_OF_MONTH) > 8;\n                } else {\n                    roundUp = val.get(Calendar.DAY_OF_MONTH) > 23;\n                }\n                break;\n            default:\n                roundUp = val.get(field) >= getRangeDurationField(val, field) / 2;\n                break;\n        }\n    }\n\n    // Adjust hour manually to handle DST transitions\n    if (field == Calendar.HOUR_OF_DAY || field == Calendar.HOUR) {\n        int hour = val.get(Calendar.HOUR_OF_DAY);\n        if (round && roundUp) {\n            // Round up the hour and fix the DST transition if necessary\n            hour++;\n            if (dst && hour == 2) {\n              val.add(Calendar.HOUR_OF_DAY, 1);\n            }\n            if (!dst && hour == 1) {\n              val.add(Calendar.HOUR_OF_DAY, 1);\n            }\n        }\n        val.set(Calendar.HOUR_OF_DAY, hour);\n    }\n\n    // Remove fields as necessary\n    for (int[] localField : fields) {\n        int offset = 0;\n        boolean offsetSet = false;\n        if (field == DateUtils.SEMI_MONTH && localField[0] == Calendar.DATE) {\n            offset = val.get(Calendar.DATE) - 1;\n            if (offset >= 15) {\n                offset -= 15;\n            }\n            roundUp = offset > 7;\n            offsetSet = true;\n        } else if (field == Calendar.AM_PM && localField[0] == Calendar.HOUR_OF_DAY) {\n            offset = val.get(Calendar.HOUR_OF_DAY);\n            if (offset >= 12) {\n                offset -= 12;\n            }\n            roundUp = offset > 6;\n            offsetSet = true;\n        } else if (localField[0] == field) {\n            if (round && roundUp) {\n                // Round up the field\n                offset = getRoundingDifference(val, field, roundUp);\n            } else {\n                // Round down the field\n                int min = val.getActualMinimum(field);\n                int max = val.getActualMaximum(field);\n                offset = val.get(field) - min;\n                roundUp = offset > ((max - min) >> 1);\n            }\n            offsetSet = true;\n        }\n        if (offsetSet) {\n            val.set(localField[0], val.get(localField[0]) - offset);\n        }\n    }\n\n    // Restore DST information\n    if (dst) {\n        timeZone.setRawOffset(timeZone.getRawOffset() + timeZone.getDSTSavings());\n    }\n    val.setTimeZone(timeZone);\n    val.setTime(date);\n\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\n\nprivate static int getRoundingDifference(Calendar cal, int field, boolean roundUp) {\n    int increment = 1;\n    if (!roundUp) {\n        increment = -1;\n    }\n    int originalValue = cal.get(field);\n    int maxValue = cal.getMaximum(field);\n    int minValue = cal.getMinimum(field);\n    int newValue = originalValue;\n    while (true) {\n        newValue += increment;\n        if (newValue > maxValue) {\n            newValue = minValue;\n        } else if (newValue < minValue) {\n            newValue = maxValue;\n        }\n        cal.set(field, newValue);\n        if (cal.get(field) == originalValue || newValue == originalValue) {\n            // Either we've gone all the way around, or we've found the value\n            break;\n        }\n        originalValue = cal.get(field);\n    }\n    int difference = 0;\n    if (newValue != originalValue) {\n        if (roundUp) {\n            difference = newValue - originalValue;\n        } else {\n            difference = originalValue - newValue;\n        }\n    }\n    return difference;\n}\n\nprivate static int getRangeDurationField(Calendar cal, int field) {\n    DurationField rangeField = cal.getChronology().range(field);\n    if (rangeField == null) {\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n    return rangeField.getUnitMillis();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..3de85e69 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,101 +616,172 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n-        }\n-        \n+ private static void modify(Calendar val, int field, boolean round) {\n+    if (val.get(Calendar.YEAR) > 280000000) {\n+        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+    }\n+          \n+    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n+    // see http://issues.apache.org/jira/browse/LANG-59\n+    //\n+    // Manually truncate milliseconds, seconds and minutes, rather than using\n+    // Calendar methods.\n+\n+    // Save original DST information\n+    TimeZone timeZone = val.getTimeZone();\n+    Date date = val.getTime();\n+    boolean dst = timeZone.inDaylightTime(date);\n+\n+    // Truncate milliseconds\n+    val.set(Calendar.MILLISECOND, 0);\n+\n+    // Truncate seconds\n+    val.set(Calendar.SECOND, 0);\n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n+    // Truncate minutes\n+    val.set(Calendar.MINUTE, 0);\n+\n+    // Reset time\n+    val.set(Calendar.HOUR_OF_DAY, 0);\n+    val.set(Calendar.AM_PM, Calendar.AM);\n+\n+    // Truncate day of year\n+    val.set(Calendar.DAY_OF_YEAR, 1);\n+\n+    // Truncate week of year\n+    val.set(Calendar.WEEK_OF_YEAR, 1);\n+\n+    // Determine if rounding should be up\n+    boolean roundUp = false;\n+    if (round) {\n+        switch (field) {\n+            case Calendar.SECOND:\n+                roundUp = val.get(Calendar.MILLISECOND) >= 500;\n+                break;\n+            case Calendar.MINUTE:\n+                roundUp = val.get(Calendar.SECOND) >= 30;\n+                break;\n+            case Calendar.HOUR_OF_DAY:\n+            case Calendar.HOUR:\n+                roundUp = val.get(Calendar.MINUTE) >= 30;\n+                break;\n+            case DateUtils.SEMI_MONTH:\n+                int dayOfMonth = val.get(Calendar.DATE);\n+                if (dayOfMonth <= 15) {\n+                    roundUp = val.get(Calendar.DAY_OF_MONTH) > 8;\n+                } else {\n+                    roundUp = val.get(Calendar.DAY_OF_MONTH) > 23;\n                 }\n+                break;\n+            default:\n+                roundUp = val.get(field) >= getRangeDurationField(val, field) / 2;\n+                break;\n+        }\n+    }\n+\n+    // Adjust hour manually to handle DST transitions\n+    if (field == Calendar.HOUR_OF_DAY || field == Calendar.HOUR) {\n+        int hour = val.get(Calendar.HOUR_OF_DAY);\n+        if (round && roundUp) {\n+            // Round up the hour and fix the DST transition if necessary\n+            hour++;\n+            if (dst && hour == 2) {\n+              val.add(Calendar.HOUR_OF_DAY, 1);\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n-                    break;\n+            if (!dst && hour == 1) {\n+              val.add(Calendar.HOUR_OF_DAY, 1);\n             }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n+        }\n+        val.set(Calendar.HOUR_OF_DAY, hour);\n+    }\n+\n+    // Remove fields as necessary\n+    for (int[] localField : fields) {\n+        int offset = 0;\n+        boolean offsetSet = false;\n+        if (field == DateUtils.SEMI_MONTH && localField[0] == Calendar.DATE) {\n+            offset = val.get(Calendar.DATE) - 1;\n+            if (offset >= 15) {\n+                offset -= 15;\n             }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+            roundUp = offset > 7;\n+            offsetSet = true;\n+        } else if (field == Calendar.AM_PM && localField[0] == Calendar.HOUR_OF_DAY) {\n+            offset = val.get(Calendar.HOUR_OF_DAY);\n+            if (offset >= 12) {\n+                offset -= 12;\n+            }\n+            roundUp = offset > 6;\n+            offsetSet = true;\n+        } else if (localField[0] == field) {\n+            if (round && roundUp) {\n+                // Round up the field\n+                offset = getRoundingDifference(val, field, roundUp);\n+            } else {\n+                // Round down the field\n+                int min = val.getActualMinimum(field);\n+                int max = val.getActualMaximum(field);\n+                offset = val.get(field) - min;\n+                roundUp = offset > ((max - min) >> 1);\n+            }\n+            offsetSet = true;\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+        if (offsetSet) {\n+            val.set(localField[0], val.get(localField[0]) - offset);\n+        }\n+    }\n \n+    // Restore DST information\n+    if (dst) {\n+        timeZone.setRawOffset(timeZone.getRawOffset() + timeZone.getDSTSavings());\n     }\n+    val.setTimeZone(timeZone);\n+    val.setTime(date);\n+\n+    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+}\n+\n+private static int getRoundingDifference(Calendar cal, int field, boolean roundUp) {\n+    int increment = 1;\n+    if (!roundUp) {\n+        increment = -1;\n+    }\n+    int originalValue = cal.get(field);\n+    int maxValue = cal.getMaximum(field);\n+    int minValue = cal.getMinimum(field);\n+    int newValue = originalValue;\n+    while (true) {\n+        newValue += increment;\n+        if (newValue > maxValue) {\n+            newValue = minValue;\n+        } else if (newValue < minValue) {\n+            newValue = maxValue;\n+        }\n+        cal.set(field, newValue);\n+        if (cal.get(field) == originalValue || newValue == originalValue) {\n+            // Either we've gone all the way around, or we've found the value\n+            break;\n+        }\n+        originalValue = cal.get(field);\n+    }\n+    int difference = 0;\n+    if (newValue != originalValue) {\n+        if (roundUp) {\n+            difference = newValue - originalValue;\n+        } else {\n+            difference = originalValue - newValue;\n+        }\n+    }\n+    return difference;\n+}\n+\n+private static int getRangeDurationField(Calendar cal, int field) {\n+    DurationField rangeField = cal.getChronology().range(field);\n+    if (rangeField == null) {\n+        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+    }\n+    return rangeField.getUnitMillis();\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}