{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n\n    if (verifyLastArgumentIsString(t, left, arg)) {\n        String ns = arg.getString();\n\n        ProvidedName provided = providedNames.get(ns);\n\n        if (provided != null) {\n            // If the required namespace is provided, remove the require statement.\n            Node previous = n.getPrevious();\n            if (previous != null && previous.isBlock()) {\n                previous.addChildToBack(n.detach());\n            } else {\n                parent.replaceChild(n, IR.empty());\n            }\n            compiler.reportCodeChange();\n        } else {\n            // If the required namespace is not provided, report an error.\n            unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n            compiler.report(JSError.make(n, XMODULE_REQUIRE_ERROR, ns,\n                    \"never provided\"));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..37602aca 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,32 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n+\n     if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n+        String ns = arg.getString();\n \n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n+        ProvidedName provided = providedNames.get(ns);\n \n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+        if (provided != null) {\n+            // If the required namespace is provided, remove the require statement.\n+            Node previous = n.getPrevious();\n+            if (previous != null && previous.isBlock()) {\n+                previous.addChildToBack(n.detach());\n+            } else {\n+                parent.replaceChild(n, IR.empty());\n+            }\n+            compiler.reportCodeChange();\n+        } else {\n+            // If the required namespace is not provided, report an error.\n+            unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+            compiler.report(JSError.make(n, XMODULE_REQUIRE_ERROR, ns,\n+                    \"never provided\"));\n         }\n-      }\n-\n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n-\n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n     }\n-  }\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}