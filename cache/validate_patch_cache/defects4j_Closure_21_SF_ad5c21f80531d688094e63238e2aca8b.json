{
    "patch": "    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    \n    // Check if the node is a statement or a call to a statement-like function.\n    if (NodeUtil.isStatement(n) || isCallToStatementLikeFunction(n)) {\n      if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        return;\n      }\n    } else {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      problemNodes.add(n);\n    }\n  }\n  \n  /**\n   * Checks if the given node is a call to a function that acts like a statement.\n   * @param node The node to check.\n   * @return True if the node is a call to a statement-like function, false otherwise.\n   */\n  private boolean isCallToStatementLikeFunction(Node node) {\n    if (node.isCall()) {\n      Node fn = node.getFirstChild();\n      if (fn.isFunction()) {\n        return true;\n      }\n      if (fn.isName()) {\n        String name = fn.getString();\n        return name.equals(\"alert\") || name.equals(\"prompt\") || name.equals(\"confirm\");\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..3de92184 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,23 +81,6 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n-    }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n     if (n.isExprResult()) {\n       return;\n     }\n@@ -117,9 +100,12 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+          if (ancestorType == Token.COMMA)\n+            continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n+            return;\n+          else\n+            break;\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n@@ -127,8 +113,13 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    \n+    // Check if the node is a statement or a call to a statement-like function.\n+    if (NodeUtil.isStatement(n) || isCallToStatementLikeFunction(n)) {\n+      if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+        return;\n+      }\n+    } else {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n@@ -136,16 +127,28 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n             \"' operator is not being used.\";\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      problemNodes.add(n);\n     }\n   }\n+  \n+  /**\n+   * Checks if the given node is a call to a function that acts like a statement.\n+   * @param node The node to check.\n+   * @return True if the node is a call to a statement-like function, false otherwise.\n+   */\n+  private boolean isCallToStatementLikeFunction(Node node) {\n+    if (node.isCall()) {\n+      Node fn = node.getFirstChild();\n+      if (fn.isFunction()) {\n+        return true;\n+      }\n+      if (fn.isName()) {\n+        String name = fn.getString();\n+        return name.equals(\"alert\") || name.equals(\"prompt\") || name.equals(\"confirm\");\n+      }\n+    }\n+    return false;\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}