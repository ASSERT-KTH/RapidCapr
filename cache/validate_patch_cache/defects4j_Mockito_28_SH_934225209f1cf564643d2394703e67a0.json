{
    "patch": "Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null) {\n    if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n        field.setAccessible(true);\n        try {\n            Object oldValue = field.get(fieldInstance);\n            if (oldValue != null) {\n                for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n                    innerField.setAccessible(true);\n                    if (innerField.get(oldValue) == fieldInstance) {\n                        innerField.set(oldValue, null);\n                    }\n                }\n            }\n            field.set(fieldInstance, mockCandidate);\n            for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                innerField.setAccessible(true);\n                Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n                if (innerField.get(mockCandidate) == oldValue) {\n                    if (innerCandidate != null) {\n                        Object mock = innerCandidate;\n                        if (mock instanceof MockitoMock) {\n                            mock = ((MockitoMock) mock).getInstanceSupplier().get();\n                        }\n                        innerField.set(mockCandidate, mock);\n                    } else {\n                        innerField.set(mockCandidate, null);\n                    }\n                }\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    } else {\n        String message = String.format(\"Cannot inject a mock instance of type '%s' into field '%s' of type '%s'\",\n            mockCandidate.getClass(), field.getName(), field.getType());\n        throw new IllegalArgumentException(message);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..a87b41cfc 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,48 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null) {\n+    if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+        field.setAccessible(true);\n+        try {\n+            Object oldValue = field.get(fieldInstance);\n+            if (oldValue != null) {\n+                for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n+                    innerField.setAccessible(true);\n+                    if (innerField.get(oldValue) == fieldInstance) {\n+                        innerField.set(oldValue, null);\n+                    }\n+                }\n+            }\n+            field.set(fieldInstance, mockCandidate);\n+            for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                innerField.setAccessible(true);\n+                Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n+                if (innerField.get(mockCandidate) == oldValue) {\n+                    if (innerCandidate != null) {\n+                        Object mock = innerCandidate;\n+                        if (mock instanceof MockitoMock) {\n+                            mock = ((MockitoMock) mock).getInstanceSupplier().get();\n+                        }\n+                        innerField.set(mockCandidate, mock);\n+                    } else {\n+                        innerField.set(mockCandidate, null);\n+                    }\n+                }\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    } else {\n+        String message = String.format(\"Cannot inject a mock instance of type '%s' into field '%s' of type '%s'\",\n+            mockCandidate.getClass(), field.getName(), field.getType());\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}