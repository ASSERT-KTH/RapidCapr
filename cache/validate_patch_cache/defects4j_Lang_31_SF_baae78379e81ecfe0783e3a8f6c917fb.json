{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    boolean isSupplementarySearchChar = false;\n\n    if (searchLen == 1 && Character.isHighSurrogate(searchChars[0])) {\n        isSupplementarySearchChar = true;\n    }\n\n    if (!isSupplementarySearchChar) {\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    } else {\n        int i = 0;\n        while (i < strLen - 1) {\n            char ch = str.charAt(i);\n            char ch2 = str.charAt(i + 1);\n\n            if (Character.isHighSurrogate(ch) && Character.isLowSurrogate(ch2)) {\n                int codePoint = Character.toCodePoint(ch, ch2);\n                for (int j = 0; j < searchLen; j++) {\n                    if (Character.charCount(codePoint) == 2 && j < searchLen - 1) {\n                        char searchHigh = searchChars[j];\n                        char searchLow = searchChars[j + 1];\n\n                        if (Character.isHighSurrogate(searchHigh) && Character.isLowSurrogate(searchLow)) {\n                            int searchCodePoint = Character.toCodePoint(searchHigh, searchLow);\n                            if (searchCodePoint == codePoint) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                i++;\n            } else {\n                for (int j = 0; j < searchLen; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n            i++;\n        }\n\n        if (i == strLen - 1) {\n            char ch = str.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..60190981 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,71 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    boolean isSupplementarySearchChar = false;\n+\n+    if (searchLen == 1 && Character.isHighSurrogate(searchChars[0])) {\n+        isSupplementarySearchChar = true;\n+    }\n+\n+    if (!isSupplementarySearchChar) {\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        }\n+    } else {\n+        int i = 0;\n+        while (i < strLen - 1) {\n+            char ch = str.charAt(i);\n+            char ch2 = str.charAt(i + 1);\n+\n+            if (Character.isHighSurrogate(ch) && Character.isLowSurrogate(ch2)) {\n+                int codePoint = Character.toCodePoint(ch, ch2);\n+                for (int j = 0; j < searchLen; j++) {\n+                    if (Character.charCount(codePoint) == 2 && j < searchLen - 1) {\n+                        char searchHigh = searchChars[j];\n+                        char searchLow = searchChars[j + 1];\n+\n+                        if (Character.isHighSurrogate(searchHigh) && Character.isLowSurrogate(searchLow)) {\n+                            int searchCodePoint = Character.toCodePoint(searchHigh, searchLow);\n+                            if (searchCodePoint == codePoint) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+                i++;\n+            } else {\n+                for (int j = 0; j < searchLen; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            i++;\n+        }\n+\n+        if (i == strLen - 1) {\n+            char ch = str.charAt(i);\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}