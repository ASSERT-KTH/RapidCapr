{
    "patch": "      if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors, interfaces or have the @this, @override\n        // or @implements annotations.\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() ||\n                              jsDoc.hasThisType() || jsDoc.isOverride() || jsDoc.isImplements())) {\n          return false;\n        } else if (jsDoc != null && jsDoc.hasLendsThis()) {\n          // Don't traverse functions that are getting a \"this\" object from elsewhere.\n          return false;\n        }\n      }\n\n      if (NodeUtil.isFunctionExpression(n) && NodeUtil.isGet(parent)) {\n        Node getTarget = parent.getFirstChild();\n        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9deecea3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,23 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors, interfaces or have the @this, @override\n+        // or @implements annotations.\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() ||\n+                              jsDoc.hasThisType() || jsDoc.isOverride() || jsDoc.isImplements())) {\n+          return false;\n+        } else if (jsDoc != null && jsDoc.hasLendsThis()) {\n+          // Don't traverse functions that are getting a \"this\" object from elsewhere.\n+          return false;\n+        }\n+      }\n+\n+      if (NodeUtil.isFunctionExpression(n) && NodeUtil.isGet(parent)) {\n+        Node getTarget = parent.getFirstChild();\n+        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}