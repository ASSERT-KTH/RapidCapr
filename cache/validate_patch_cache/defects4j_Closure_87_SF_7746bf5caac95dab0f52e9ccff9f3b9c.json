{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.isBlock()) {\n      Node firstChild = n.getFirstChild();\n      if (firstChild == null) {\n        return false;\n      }\n      // Check if the first child is an EXPR_RESULT node.\n      boolean isFirstChildExpr = firstChild.isExprResult();\n      // Check if the first child is an expression node.\n      boolean isFirstChildExprNode = NodeUtil.isExpressionNode(firstChild);\n      // If the first child is not an EXPR_RESULT node and is not an expression node then return false.\n      if (!isFirstChildExpr && !isFirstChildExprNode) {\n        return false;\n      }\n      // If the first child is an expression node then return true.\n      if (isFirstChildExprNode) {\n        return true;\n      }\n      // Check if the first grandchild of the block is the CALL node.\n      Node callNode = firstChild.getFirstChild();\n      return callNode != null && callNode.isCall();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..bc3d4bf2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,27 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.isBlock()) {\n+      Node firstChild = n.getFirstChild();\n+      if (firstChild == null) {\n+        return false;\n       }\n-    }\n-\n-    return false;\n-  }\n+      // Check if the first child is an EXPR_RESULT node.\n+      boolean isFirstChildExpr = firstChild.isExprResult();\n+      // Check if the first child is an expression node.\n+      boolean isFirstChildExprNode = NodeUtil.isExpressionNode(firstChild);\n+      // If the first child is not an EXPR_RESULT node and is not an expression node then return false.\n+      if (!isFirstChildExpr && !isFirstChildExprNode) {\n+        return false;\n+      }\n+      // If the first child is an expression node then return true.\n+      if (isFirstChildExprNode) {\n+        return true;\n+      }\n+      // Check if the first grandchild of the block is the CALL node.\n+      Node callNode = firstChild.getFirstChild();\n+      return callNode != null && callNode.isCall();\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}