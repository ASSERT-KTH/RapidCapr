{
    "patch": "if (finallyNode != null && cfa != null) {\n    Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n    if (follow != null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, follow);\n    } else {\n        Node parentFollow = computeFollowNode(fromNode, parent, cfa);\n        // check if parent's follow is a descendant of finallyNode\n        if (parentFollow != null && NodeUtil.isAncestor(finallyNode, parentFollow)) {\n            // create edge from finallyNode to parent follow\n            cfa.createEdge(finallyNode, Branch.UNCOND, parentFollow);\n        } else {\n            // create edge from fromNode to parent follow\n            cfa.createEdge(fromNode, Branch.UNCOND, parentFollow);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..1888ff26 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode != null && cfa != null) {\n+    Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n+    if (follow != null) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, follow);\n+    } else {\n+        Node parentFollow = computeFollowNode(fromNode, parent, cfa);\n+        // check if parent's follow is a descendant of finallyNode\n+        if (parentFollow != null && NodeUtil.isAncestor(finallyNode, parentFollow)) {\n+            // create edge from finallyNode to parent follow\n+            cfa.createEdge(finallyNode, Branch.UNCOND, parentFollow);\n+        } else {\n+            // create edge from fromNode to parent follow\n+            cfa.createEdge(fromNode, Branch.UNCOND, parentFollow);\n+        }\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}