{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n    int weeks = getWeeks();\n    long millis = getMillis()\n            + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n            + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n            + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n            + (((long) days + (weeks * 7)) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    boolean hasYearsAndMonths = (years != 0 || months != 0) && type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months());\n    years += (months / 12);\n    months = (months % 12);\n\n    if (hasYearsAndMonths) {\n        return new Period(years, months, 0, 0, getHours(), getMinutes(), getSeconds(), getMillis(), type);\n    }\n\n    Period period = new Period(millis, type);\n\n    if (type.isSupported(DurationFieldType.weeks())) {\n        int totalDays = period.getWeeks() * 7 + period.getDays();\n        period = period.withDays(totalDays).withWeeks(0);\n    }\n\n    return period;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..787499ad 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,33 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    long millis = getMillis()\n+            + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+            + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+            + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+            + (((long) days + (weeks * 7)) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    boolean hasYearsAndMonths = (years != 0 || months != 0) && type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months());\n+    years += (months / 12);\n+    months = (months % 12);\n+\n+    if (hasYearsAndMonths) {\n+        return new Period(years, months, 0, 0, getHours(), getMinutes(), getSeconds(), getMillis(), type);\n+    }\n+\n+    Period period = new Period(millis, type);\n+\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        int totalDays = period.getWeeks() * 7 + period.getDays();\n+        period = period.withDays(totalDays).withWeeks(0);\n     }\n \n+    return period;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<PT456H>",
    "test_result": "FAIL"
}