{
    "patch": "private static final String MESSAGE_UNUSED_RESULT =\n    \"The result of the '%s' operator is not being used.\";\nprivate static final String MESSAGE_NO_SIDE_EFFECTS =\n    \"This code lacks side-effects. Is there a bug?\";\nprivate static final String MESSAGE_BOTH_PROBLEMS =\n    \"This code doesn't do anything and has side-effects. Should it be removed?\";\nprivate static final ImmutableSet<Token> SAFE_TOKENS =\n    ImmutableSet.of(Token.VOID, Token.BOOLEAN, Token.NUMBER, Token.STRING);\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma() || n.isFunction() || n.isScript() || n.isModuleBody()\n      || n.isClass() || n.isImportSpec())\n  {\n    // No warnings for empty statements, function definitions, class definitions, or declared imports\n    return;\n  }\n  if (n.isExport()) {\n    // No warning for e.g \"export const x = ...;\" export statements. The RHS expression may have side effects.\n    n = n.getFirstChild();\n    if (n.isDefaultExport()) {\n      // Do not descend into export default function(){} or class {}.\n      return;\n    }\n  }\n  if (n.isCatch() && !n.getFirstChild().isName()) {\n    // No warning for catch blocks such as: } catch ({code}) {\n    return;\n  }\n  if (n.isExprResult()) {\n    checkExpression(t, n.getFirstChild());\n  } else if (n.isAssignment()) {\n    checkAssignment(t, n);\n  } else if (NodeUtil.isUnaryExpression(n)) {\n    checkUnaryExpression(t, n);\n  } else if (NodeUtil.isCallOrNew(n) || NodeUtil.isDot(n)) {\n    checkCallOrDot(t, n);\n  } else if (parent != null && parent.isThrow()) {\n    checkExpression(t, n);\n  }\n}\n\nprivate void checkExpression(NodeTraversal t, Node n) {\n  if (n.isObjectLit() || n.isArrayLit() || n.isFunction() || n.isClass()) {\n    // Do not warn if this is an object, array, or function literal.\n    return;\n  }\n  if (n.isCall() && isThrowingCall(n)) {\n    // some calls are known by convention to have side effects, such as assert and goog.require/assert\n    return;\n  }\n  boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n  boolean isSafeToken = SAFE_TOKENS.contains(n.getToken());\n  if (!mayHaveSideEffects && !isSafeToken) {\n    String message = String.format(MESSAGE_NO_SIDE_EFFECTS);\n    t.report(n, USELESS_CODE_ERROR, message);\n  } else if (!NodeUtil.isExpressionResultUsed(n)) {\n    String message = NodeUtil.isSimpleOperatorType(n.getType())\n        ? String.format(MESSAGE_UNUSED_RESULT, Token.name(n.getType()).toLowerCase())\n        : \"\";\n    if (!message.isEmpty() && mayHaveSideEffects) {\n      message += \" \" + MESSAGE_BOTH_PROBLEMS;\n    }\n    t.report(n, USELESS_CODE_ERROR, message);\n  }\n}\n\nprivate void checkAssignment(NodeTraversal t, Node n) {\n  Node valueNode = n.getLastChild();\n  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(valueNode, t.getCompiler());\n  if (hasSideEffects && !NodeUtil.isExpressionResultUsed(n)) {\n    String message = String.format(MESSAGE_UNUSED_RESULT, \"assignment expression\");\n    t.report(n, USELESS_CODE_ERROR, message);\n  }\n}\n\nprivate void checkUnaryExpression(NodeTraversal t, Node n) {\n  if (NodeUtil.isExpressionResultUsed(n)) {\n    // If the result of the unary expression is being used,\n    // then we don't want to generate a warning.\n    return;\n  }\n  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n  if (hasSideEffects) {\n    String message = String.format(MESSAGE_UNUSED_RESULT, n.getOperator().toString());\n    t.report(n, USELESS_CODE_ERROR, message);\n  }\n}\n\nprivate void checkCallOrDot(NodeTraversal t, Node n) {\n  if (NodeUtil.isExpressionResultUsed(n)) {\n    // If the result of the call or dot is being used,\n    // then we don't want to generate a warning.\n    return;\n  }\n  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n  if (hasSideEffects) {\n    String message = String.format(MESSAGE_UNUSED_RESULT, n.isCall() ? \"function call\" : \"property access\");\n    t.report(n, USELESS_CODE_ERROR, message);\n  }\n}\n\nprivate boolean isThrowingCall(Node n) {\n  if (n == null) {\n    return false;\n  }\n  // if arg 0 is a boolean true, then treat as having no side effects\n  if (n.isCall()) {\n    for (Node argument = n.getLastChild(); argument != null; argument = argument.getPrevious()) {\n      // only call expressions accepted are assert, debugAssert and fail\n      if (argument.isObjectLit()\n          && (\n              argument.getLastChild() != null\n              && argument.getFirstChild().matchesQualifiedName(\"goog.testing.asserts.assert\")\n                  ? argument.getLastChild().getBoolean() == true\n                  : argument.getFirstChild().matchesQualifiedName(\"goog.asserts.assert\") ||\n                      argument.getFirstChild().matchesQualifiedName(\"goog.asserts.fail\")\n          ))\n      {\n        return true;\n      } else if (!argument.isBoolean()) {\n        break;\n      }\n    }\n  }\n  return isThrowingCall(n.getFirstChild()) || isThrowingCall(n.getNext());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..47e28434 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,133 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+private static final String MESSAGE_UNUSED_RESULT =\n+    \"The result of the '%s' operator is not being used.\";\n+private static final String MESSAGE_NO_SIDE_EFFECTS =\n+    \"This code lacks side-effects. Is there a bug?\";\n+private static final String MESSAGE_BOTH_PROBLEMS =\n+    \"This code doesn't do anything and has side-effects. Should it be removed?\";\n+private static final ImmutableSet<Token> SAFE_TOKENS =\n+    ImmutableSet.of(Token.VOID, Token.BOOLEAN, Token.NUMBER, Token.STRING);\n \n-    if (parent == null) {\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() || n.isComma() || n.isFunction() || n.isScript() || n.isModuleBody()\n+      || n.isClass() || n.isImportSpec())\n+  {\n+    // No warnings for empty statements, function definitions, class definitions, or declared imports\n+    return;\n+  }\n+  if (n.isExport()) {\n+    // No warning for e.g \"export const x = ...;\" export statements. The RHS expression may have side effects.\n+    n = n.getFirstChild();\n+    if (n.isDefaultExport()) {\n+      // Do not descend into export default function(){} or class {}.\n       return;\n     }\n+  }\n+  if (n.isCatch() && !n.getFirstChild().isName()) {\n+    // No warning for catch blocks such as: } catch ({code}) {\n+    return;\n+  }\n+  if (n.isExprResult()) {\n+    checkExpression(t, n.getFirstChild());\n+  } else if (n.isAssignment()) {\n+    checkAssignment(t, n);\n+  } else if (NodeUtil.isUnaryExpression(n)) {\n+    checkUnaryExpression(t, n);\n+  } else if (NodeUtil.isCallOrNew(n) || NodeUtil.isDot(n)) {\n+    checkCallOrDot(t, n);\n+  } else if (parent != null && parent.isThrow()) {\n+    checkExpression(t, n);\n+  }\n+}\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n+private void checkExpression(NodeTraversal t, Node n) {\n+  if (n.isObjectLit() || n.isArrayLit() || n.isFunction() || n.isClass()) {\n+    // Do not warn if this is an object, array, or function literal.\n+    return;\n+  }\n+  if (n.isCall() && isThrowingCall(n)) {\n+    // some calls are known by convention to have side effects, such as assert and goog.require/assert\n+    return;\n+  }\n+  boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n+  boolean isSafeToken = SAFE_TOKENS.contains(n.getToken());\n+  if (!mayHaveSideEffects && !isSafeToken) {\n+    String message = String.format(MESSAGE_NO_SIDE_EFFECTS);\n+    t.report(n, USELESS_CODE_ERROR, message);\n+  } else if (!NodeUtil.isExpressionResultUsed(n)) {\n+    String message = NodeUtil.isSimpleOperatorType(n.getType())\n+        ? String.format(MESSAGE_UNUSED_RESULT, Token.name(n.getType()).toLowerCase())\n+        : \"\";\n+    if (!message.isEmpty() && mayHaveSideEffects) {\n+      message += \" \" + MESSAGE_BOTH_PROBLEMS;\n     }\n+    t.report(n, USELESS_CODE_ERROR, message);\n+  }\n+}\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n-    }\n+private void checkAssignment(NodeTraversal t, Node n) {\n+  Node valueNode = n.getLastChild();\n+  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(valueNode, t.getCompiler());\n+  if (hasSideEffects && !NodeUtil.isExpressionResultUsed(n)) {\n+    String message = String.format(MESSAGE_UNUSED_RESULT, \"assignment expression\");\n+    t.report(n, USELESS_CODE_ERROR, message);\n+  }\n+}\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n-    }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+private void checkUnaryExpression(NodeTraversal t, Node n) {\n+  if (NodeUtil.isExpressionResultUsed(n)) {\n+    // If the result of the unary expression is being used,\n+    // then we don't want to generate a warning.\n+    return;\n+  }\n+  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n+  if (hasSideEffects) {\n+    String message = String.format(MESSAGE_UNUSED_RESULT, n.getOperator().toString());\n+    t.report(n, USELESS_CODE_ERROR, message);\n+  }\n+}\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+private void checkCallOrDot(NodeTraversal t, Node n) {\n+  if (NodeUtil.isExpressionResultUsed(n)) {\n+    // If the result of the call or dot is being used,\n+    // then we don't want to generate a warning.\n+    return;\n+  }\n+  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n+  if (hasSideEffects) {\n+    String message = String.format(MESSAGE_UNUSED_RESULT, n.isCall() ? \"function call\" : \"property access\");\n+    t.report(n, USELESS_CODE_ERROR, message);\n+  }\n+}\n+\n+private boolean isThrowingCall(Node n) {\n+  if (n == null) {\n+    return false;\n+  }\n+  // if arg 0 is a boolean true, then treat as having no side effects\n+  if (n.isCall()) {\n+    for (Node argument = n.getLastChild(); argument != null; argument = argument.getPrevious()) {\n+      // only call expressions accepted are assert, debugAssert and fail\n+      if (argument.isObjectLit()\n+          && (\n+              argument.getLastChild() != null\n+              && argument.getFirstChild().matchesQualifiedName(\"goog.testing.asserts.assert\")\n+                  ? argument.getLastChild().getBoolean() == true\n+                  : argument.getFirstChild().matchesQualifiedName(\"goog.asserts.assert\") ||\n+                      argument.getFirstChild().matchesQualifiedName(\"goog.asserts.fail\")\n+          ))\n+      {\n+        return true;\n+      } else if (!argument.isBoolean()) {\n+        break;\n       }\n     }\n   }\n+  return isThrowingCall(n.getFirstChild()) || isThrowingCall(n.getNext());\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}