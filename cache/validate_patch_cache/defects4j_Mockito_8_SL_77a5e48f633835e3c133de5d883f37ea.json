{
    "patch": "    } else if (actualTypeArgument instanceof TypeVariable) {\n        Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n        if (type != null && !type.equals(typeParameter)) {\n            contextualActualTypeParameters.put(typeParameter, type);\n        } else if (typeParameter.equals(actualTypeArgument)) {\n            contextualActualTypeParameters.put(typeParameter, typeParameter);\n        } else {\n            contextualActualTypeParameters.put(typeParameter, Object.class);\n        }\n    } else {",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..440af9078 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,16 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+    } else if (actualTypeArgument instanceof TypeVariable) {\n+        Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n+        if (type != null && !type.equals(typeParameter)) {\n+            contextualActualTypeParameters.put(typeParameter, type);\n+        } else if (typeParameter.equals(actualTypeArgument)) {\n+            contextualActualTypeParameters.put(typeParameter, typeParameter);\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, Object.class);\n+        }\n+    } else {\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}