{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // if the variable is written to, it is killed\n        return VariableLiveness.KILL;\n      } else {\n        // if the variable is read from, it is not killed before being read\n        return VariableLiveness.READ;\n      }\n    }\n\n    // expressions are evaulated depth first\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // not entering a new control flow graph\n        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n        if (childState == VariableLiveness.KILL) {\n          // if the variable is written to in any child, it is dead\n          return VariableLiveness.KILL;\n        } else if (childState == VariableLiveness.READ) {\n          // if the variable is read in any child, it is not killed before being read\n          return VariableLiveness.READ;\n        }\n      } else {\n        // entering a new control flow graph, the variable is potentially live\n        return VariableLiveness.MAYBE_LIVE;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..a1d0ade1 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,29 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n+        // if the variable is written to, it is killed\n         return VariableLiveness.KILL;\n       } else {\n+        // if the variable is read from, it is not killed before being read\n         return VariableLiveness.READ;\n       }\n     }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+    // expressions are evaulated depth first\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // not entering a new control flow graph\n+        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n+        if (childState == VariableLiveness.KILL) {\n+          // if the variable is written to in any child, it is dead\n+          return VariableLiveness.KILL;\n+        } else if (childState == VariableLiveness.READ) {\n+          // if the variable is read in any child, it is not killed before being read\n+          return VariableLiveness.READ;\n         }\n-      }\n-    }\n-    return VariableLiveness.MAYBE_LIVE;\n-  }\n+      } else {\n+        // entering a new control flow graph, the variable is potentially live\n+        return VariableLiveness.MAYBE_LIVE;\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}