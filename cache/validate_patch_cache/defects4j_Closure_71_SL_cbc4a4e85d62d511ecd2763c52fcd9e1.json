{
    "patch": "      Node classNode = NodeUtil.getEnclosingClass(parent);\n      boolean isOverride = t.inGlobalScope() && classNode != null &&\n          NodeUtil.getClassName(classNode.getFirstChild()) != null &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop &&\n          // We only care about the first assignment (not subsequent overloads)\n          NodeUtil.isGetOrSetKey(getprop.getParent()) &&\n          NodeUtil.isClassPrototype(classNode.getFirstChild(),\n              getprop.getFirstChild());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..958c0f2f 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,15 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      Node classNode = NodeUtil.getEnclosingClass(parent);\n+      boolean isOverride = t.inGlobalScope() && classNode != null &&\n+          NodeUtil.getClassName(classNode.getFirstChild()) != null &&\n+          parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild() == getprop &&\n+          // We only care about the first assignment (not subsequent overloads)\n+          NodeUtil.isGetOrSetKey(getprop.getParent()) &&\n+          NodeUtil.isClassPrototype(classNode.getFirstChild(),\n+              getprop.getFirstChild());\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}