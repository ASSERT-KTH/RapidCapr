{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                int diff = offsetAdjusted - offsetLocal;\n                if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n                        (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR)\n                {\n                    return offsetLocal;\n                }\n            } else if (offsetLocal > offsetAdjusted) { // prior to DST\n                int diff = offsetLocal - offsetAdjusted;\n                long f = nextAdjusted - (long) diff * DateTimeConstants.MILLIS_PER_HOUR;\n                if (instantLocal >= f) {\n                    // we are inside the \"gap\"\n                    int beforeDiff = getOffset(f - 1) - offsetLocal;\n                    int afterDiff = offsetAdjusted - getOffset(nextAdjusted - 1);\n                    if (beforeDiff < afterDiff) {\n                        return offsetLocal;\n                    } else if (beforeDiff > afterDiff) {\n                        return offsetAdjusted;\n                    } else if (getOffset(nextLocal) == offsetLocal) {\n                        // choose the one before the transition (usually DST)\n                        return offsetAdjusted;\n                    } else {\n                        return offsetLocal;\n                    }\n                } else { // prior to \"gap\"\n                    return offsetLocal;\n                }\n            } else { // following DST\n                int diff = offsetAdjusted - offsetLocal;\n                long f = nextLocal + (long) diff * DateTimeConstants.MILLIS_PER_HOUR;\n                if (instantAdjusted >= f) {\n                    // we are inside the \"gap\"\n                    int beforeDiff = offsetLocal - getOffset(nextLocal - 1);\n                    int afterDiff = getOffset(f);\n                    if (beforeDiff < afterDiff) {\n                        return offsetLocal;\n                    } else if (beforeDiff > afterDiff) {\n                        return offsetAdjusted;\n                    } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n                        // choose the one after the transition (usually DST)\n                        return offsetLocal;\n                    } else {\n                        return offsetAdjusted;\n                    }\n                } else { // prior to \"gap\"\n                    return offsetLocal;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ff25763b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,58 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                int diff = offsetAdjusted - offsetLocal;\n+                if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n+                        (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR)\n+                {\n+                    return offsetLocal;\n+                }\n+            } else if (offsetLocal > offsetAdjusted) { // prior to DST\n+                int diff = offsetLocal - offsetAdjusted;\n+                long f = nextAdjusted - (long) diff * DateTimeConstants.MILLIS_PER_HOUR;\n+                if (instantLocal >= f) {\n+                    // we are inside the \"gap\"\n+                    int beforeDiff = getOffset(f - 1) - offsetLocal;\n+                    int afterDiff = offsetAdjusted - getOffset(nextAdjusted - 1);\n+                    if (beforeDiff < afterDiff) {\n+                        return offsetLocal;\n+                    } else if (beforeDiff > afterDiff) {\n+                        return offsetAdjusted;\n+                    } else if (getOffset(nextLocal) == offsetLocal) {\n+                        // choose the one before the transition (usually DST)\n+                        return offsetAdjusted;\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                } else { // prior to \"gap\"\n+                    return offsetLocal;\n+                }\n+            } else { // following DST\n+                int diff = offsetAdjusted - offsetLocal;\n+                long f = nextLocal + (long) diff * DateTimeConstants.MILLIS_PER_HOUR;\n+                if (instantAdjusted >= f) {\n+                    // we are inside the \"gap\"\n+                    int beforeDiff = offsetLocal - getOffset(nextLocal - 1);\n+                    int afterDiff = getOffset(f);\n+                    if (beforeDiff < afterDiff) {\n+                        return offsetLocal;\n+                    } else if (beforeDiff > afterDiff) {\n+                        return offsetAdjusted;\n+                    } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n+                        // choose the one after the transition (usually DST)\n+                        return offsetLocal;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                } else { // prior to \"gap\"\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}