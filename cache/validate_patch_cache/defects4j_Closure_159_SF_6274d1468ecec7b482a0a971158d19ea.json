{
    "patch": "/**\n * Finds all called functions in a JavaScript abstract syntax tree.\n *\n * @param node    the root node of the AST\n * @param changed the set of changed functions (must not be null)\n * @throws IllegalArgumentException if either argument is null\n */\nprivate void findCalledFunctions(Node node, Set<String> changed) {\n    Objects.requireNonNull(node, \"Root node cannot be null\");\n    Objects.requireNonNull(changed, \"Set of changed functions cannot be null\");\n\n    // For each referenced function, add a new reference\n    int type = node.getType();\n    if (type == Token.CALL) {\n        Node child = node.getFirstChild();\n        if (child != null && child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n    } else if (type == Token.FUNCTION) {\n        Node child = node.getFirstChild();\n        if (child != null && child.getType() == Token.NAME) {\n            changed.add(child.getString());\n        }\n    }\n\n    // Traverse child nodes recursively\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n        findCalledFunctions(child, changed);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..0e75e787 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,36 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n+/**\n+ * Finds all called functions in a JavaScript abstract syntax tree.\n+ *\n+ * @param node    the root node of the AST\n+ * @param changed the set of changed functions (must not be null)\n+ * @throws IllegalArgumentException if either argument is null\n+ */\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Objects.requireNonNull(node, \"Root node cannot be null\");\n+    Objects.requireNonNull(changed, \"Set of changed functions cannot be null\");\n+\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n+    int type = node.getType();\n+    if (type == Token.CALL) {\n+        Node child = node.getFirstChild();\n+        if (child != null && child.getType() == Token.NAME) {\n+            changed.add(child.getString());\n+        }\n+    } else if (type == Token.FUNCTION) {\n+        Node child = node.getFirstChild();\n+        if (child != null && child.getType() == Token.NAME) {\n+            changed.add(child.getString());\n+        }\n     }\n \n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+    // Traverse child nodes recursively\n+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+        findCalledFunctions(child, changed);\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}