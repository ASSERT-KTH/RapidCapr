{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match contraints on anonymous types. If the constraint object is not a \n  // nominal type, we don't need to do anything.\n  if (constraintObj.isNominalConstructor()) {\n    // Handle the case where the constraint object is a record or an object type.\n    Iterator<String> propNames = constraintObj.getOwnPropertyNames().iterator();\n    while (propNames.hasNext()) {\n      String prop = propNames.next();\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          // If the property is not already defined, define it using the smallest supertype\n          // of the property type and void type.\n          typeToInfer =\n              getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..63970dd8 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,26 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match contraints on anonymous types. If the constraint object is not a \n+  // nominal type, we don't need to do anything.\n+  if (constraintObj.isNominalConstructor()) {\n+    // Handle the case where the constraint object is a record or an object type.\n+    Iterator<String> propNames = constraintObj.getOwnPropertyNames().iterator();\n+    while (propNames.hasNext()) {\n+      String prop = propNames.next();\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          // If the property is not already defined, define it using the smallest supertype\n+          // of the property type and void type.\n+          typeToInfer =\n+              getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}