{
    "patch": "long result;\nif (n.getType() == Token.LSH || n.getType() == Token.RSH) {\n   result = (long) lvalInt << (rvalInt & 0x1f);\n} else { // Token.URSH\n   result = (lvalInt & 0xffffffffL) >>> (rvalInt & 0x1f);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..6c85a3a1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,12 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+long result;\n+if (n.getType() == Token.LSH || n.getType() == Token.RSH) {\n+   result = (long) lvalInt << (rvalInt & 0x1f);\n+} else { // Token.URSH\n+   result = (lvalInt & 0xffffffffL) >>> (rvalInt & 0x1f);\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: variable result is already defined in method tryFoldShift(Node,Node,Node)",
    "test_result": "ERROR"
}