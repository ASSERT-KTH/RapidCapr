{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    double ret;\n    if (x < a + 1.0) {\n        // Use the series representation of the incomplete gamma function.\n        ret = regularizedGammaPSeries(a, x, epsilon, maxIterations);\n    } else {\n        // Use the continued fraction representation of the incomplete gamma function.\n        ret = regularizedGammaPQFraction(a, x, epsilon, maxIterations);\n    }\n\n    return ret;\n}\n\n// This is the series representation of the incomplete gamma function.\nprivate static double regularizedGammaPSeries(double a, double x, double epsilon, int maxIterations) {\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n\n    while (Math.abs(an) > epsilon && n < maxIterations) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\n// This is the continued fraction representation of the incomplete gamma function.\nprivate static double regularizedGammaPQFraction(double a, double x, double epsilon, int maxIterations) {\n    double aplus1 = a + 1.0;\n    double b = x + 1.0 - aplus1;\n    double c = 1.0 / epsilon;\n    double d = 1.0 / b;\n    double h = d;\n    double n = 1.0;\n    double an;\n    double delta;\n\n    while (n <= maxIterations) {\n        an = -n * (n - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < Double.MIN_NORMAL) {\n            d = Double.MIN_NORMAL;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < Double.MIN_NORMAL) {\n            c = Double.MIN_NORMAL;\n        }\n        d = 1.0 / d;\n        delta = d * c;\n        h *= delta;\n        if (Math.abs(delta - 1.0) < epsilon) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n        }\n        n += 1.0;\n    }\n\n    return Double.NaN;\n}\n\n// This is the log of the gamma function.\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4c9ed8f36 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,81 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    if (a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    double ret;\n+    if (x < a + 1.0) {\n+        // Use the series representation of the incomplete gamma function.\n+        ret = regularizedGammaPSeries(a, x, epsilon, maxIterations);\n+    } else {\n+        // Use the continued fraction representation of the incomplete gamma function.\n+        ret = regularizedGammaPQFraction(a, x, epsilon, maxIterations);\n+    }\n+\n+    return ret;\n+}\n+\n+// This is the series representation of the incomplete gamma function.\n+private static double regularizedGammaPSeries(double a, double x, double epsilon, int maxIterations) {\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+\n+    while (Math.abs(an) > epsilon && n < maxIterations) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+// This is the continued fraction representation of the incomplete gamma function.\n+private static double regularizedGammaPQFraction(double a, double x, double epsilon, int maxIterations) {\n+    double aplus1 = a + 1.0;\n+    double b = x + 1.0 - aplus1;\n+    double c = 1.0 / epsilon;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double n = 1.0;\n+    double an;\n+    double delta;\n+\n+    while (n <= maxIterations) {\n+        an = -n * (n - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < Double.MIN_NORMAL) {\n+            d = Double.MIN_NORMAL;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < Double.MIN_NORMAL) {\n+            c = Double.MIN_NORMAL;\n+        }\n+        d = 1.0 / d;\n+        delta = d * c;\n+        h *= delta;\n+        if (Math.abs(delta - 1.0) < epsilon) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n+        }\n+        n += 1.0;\n+    }\n+\n+    return Double.NaN;\n+}\n+\n+// This is the log of the gamma function.\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}