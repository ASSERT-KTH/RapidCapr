{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.util.MathArrays;\n\npublic class GammaCalculator {\n\n    public static double calculateRegularizedGamma(double a, double x) {\n        if (a <= 0 || x < 0) {\n            throw new IllegalArgumentException(\"a must be positive and x must be non-negative\");\n        }\n\n        if (x == 0) {\n            return 0.0;\n        }\n\n        double gammaValue = Gamma.gamma(a);\n        double regularizedGammaValue = Gamma.regularizedGammaP(a, x);\n\n        if (gammaValue == 0.0 || regularizedGammaValue == 0.0) {\n            return 0.0;\n        }\n\n        double logGammaValue = Gamma.logGamma(a);\n        double logRegularizedGammaValue = Gamma.logGamma(a, x);\n\n        double result = Math.exp(logRegularizedGammaValue - logGammaValue - x + a * Math.log(x));\n        if (Double.isNaN(result) || Double.isInfinite(result)) {\n            throw new ArithmeticException(\"Regularized gamma value is not a valid number\");\n        }\n\n        return Precision.round(result, 15);\n    }\n\n    public static void main(String[] args){\n        double a = 1;\n        double x = 1;\n        double actualP = calculateRegularizedGamma(a, x);\n        double expected = 0.632120558828558;\n        TestUtils.assertEquals(expected, actualP, 10e-15);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0edcf8890 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,47 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.util.MathArrays;\n+\n+public class GammaCalculator {\n+\n+    public static double calculateRegularizedGamma(double a, double x) {\n+        if (a <= 0 || x < 0) {\n+            throw new IllegalArgumentException(\"a must be positive and x must be non-negative\");\n+        }\n+\n+        if (x == 0) {\n+            return 0.0;\n+        }\n+\n+        double gammaValue = Gamma.gamma(a);\n+        double regularizedGammaValue = Gamma.regularizedGammaP(a, x);\n+\n+        if (gammaValue == 0.0 || regularizedGammaValue == 0.0) {\n+            return 0.0;\n+        }\n+\n+        double logGammaValue = Gamma.logGamma(a);\n+        double logRegularizedGammaValue = Gamma.logGamma(a, x);\n+\n+        double result = Math.exp(logRegularizedGammaValue - logGammaValue - x + a * Math.log(x));\n+        if (Double.isNaN(result) || Double.isInfinite(result)) {\n+            throw new ArithmeticException(\"Regularized gamma value is not a valid number\");\n+        }\n+\n+        return Precision.round(result, 15);\n+    }\n+\n+    public static void main(String[] args){\n+        double a = 1;\n+        double x = 1;\n+        double actualP = calculateRegularizedGamma(a, x);\n+        double expected = 0.632120558828558;\n+        TestUtils.assertEquals(expected, actualP, 10e-15);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}