{
    "patch": "if (rhs == null) {\n    throw new NullArgumentException();\n} else {\n    double realResult = real + rhs.getReal();\n    double imaginaryResult = imaginary + rhs.getImaginary();\n    if (Double.isNaN(realResult) || Double.isNaN(imaginaryResult)) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    return createComplex(realResult, imaginaryResult);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..9425e2e8e 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -150,6 +150,16 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n+if (rhs == null) {\n+    throw new NullArgumentException();\n+} else {\n+    double realResult = real + rhs.getReal();\n+    double imaginaryResult = imaginary + rhs.getImaginary();\n+    if (Double.isNaN(realResult) || Double.isNaN(imaginaryResult)) {\n+        return createComplex(Double.NaN, Double.NaN);\n+    }\n+    return createComplex(realResult, imaginaryResult);\n+}\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}