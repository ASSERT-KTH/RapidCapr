{
    "patch": "            if (m instanceof CapturesArguments && isVariableArgument(invocation, position)) {\n                Object array = invocation.getRawArguments()[position];\n                for (int i = 0; i < Array.getLength(array); i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                }\n            } else if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..df53372fe 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (m instanceof CapturesArguments && isVariableArgument(invocation, position)) {\n+                Object array = invocation.getRawArguments()[position];\n+                for (int i = 0; i < Array.getLength(array); i++) {\n+                    ((CapturesArguments) m).captureFrom(Array.get(array, i));\n+                }\n+            } else if (m instanceof CapturesArguments) {\n+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}