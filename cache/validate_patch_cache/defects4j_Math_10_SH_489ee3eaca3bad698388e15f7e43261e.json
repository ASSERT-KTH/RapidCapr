{
    "patch": "        boolean yNegZero = false;\n        boolean xPosZero = false;\n\n        if (Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToRawLongBits(-0.0)) {\n            yNegZero = true;\n        }\n\n        if (Double.doubleToRawLongBits(x[xOffset]) == 0L) {\n            xPosZero = true;\n        }\n\n        if (yNegZero) {\n            if (xPosZero) {\n                result[resultOffset] = FastMath.atan2(-0.0, 0.0);\n            } else {\n                if (x[xOffset] > 0.0d) {\n                    result[resultOffset] = FastMath.atan2(-0.0, Double.POSITIVE_INFINITY);\n                } else {\n                    result[resultOffset] = FastMath.atan2(-0.0, Double.NEGATIVE_INFINITY);\n                }\n            }\n        } else {\n            if (xPosZero) {\n                if (y[yOffset] > 0.0d) {\n                    result[resultOffset] = FastMath.atan2(Double.POSITIVE_INFINITY, 0.0);\n                } else {\n                    result[resultOffset] = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.0);\n                }\n            } else {\n                if (Double.isNaN(tmp1[0])) {\n                    if (y[yOffset] > 0) {\n                        result[resultOffset] = FastMath.PI * 0.5;\n                    } else {\n                        result[resultOffset] = -FastMath.PI * 0.5;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..c0fc4f8a0 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,42 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        boolean yNegZero = false;\n+        boolean xPosZero = false;\n+\n+        if (Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToRawLongBits(-0.0)) {\n+            yNegZero = true;\n+        }\n+\n+        if (Double.doubleToRawLongBits(x[xOffset]) == 0L) {\n+            xPosZero = true;\n+        }\n+\n+        if (yNegZero) {\n+            if (xPosZero) {\n+                result[resultOffset] = FastMath.atan2(-0.0, 0.0);\n+            } else {\n+                if (x[xOffset] > 0.0d) {\n+                    result[resultOffset] = FastMath.atan2(-0.0, Double.POSITIVE_INFINITY);\n+                } else {\n+                    result[resultOffset] = FastMath.atan2(-0.0, Double.NEGATIVE_INFINITY);\n+                }\n+            }\n+        } else {\n+            if (xPosZero) {\n+                if (y[yOffset] > 0.0d) {\n+                    result[resultOffset] = FastMath.atan2(Double.POSITIVE_INFINITY, 0.0);\n+                } else {\n+                    result[resultOffset] = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.0);\n+                }\n+            } else {\n+                if (Double.isNaN(tmp1[0])) {\n+                    if (y[yOffset] > 0) {\n+                        result[resultOffset] = FastMath.PI * 0.5;\n+                    } else {\n+                        result[resultOffset] = -FastMath.PI * 0.5;\n+                    }\n+                }\n \n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}