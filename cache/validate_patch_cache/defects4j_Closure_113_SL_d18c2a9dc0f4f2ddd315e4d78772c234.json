{
    "patch": "      if (provided == null) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else if (!provided.isExplicitlyProvided()) {\n        compiler.report(\n            t.makeError(n, MISSING_PROVIDE_ERROR, ns));\n      } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..ef228bb8 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,13 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (provided == null) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else if (!provided.isExplicitlyProvided()) {\n+        compiler.report(\n+            t.makeError(n, MISSING_PROVIDE_ERROR, ns));\n+      } else {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. required \"foo\" namespace never provided",
    "test_result": "FAIL"
}