{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.GETPROP &&\n          parent.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting passed as a constructor to super().\n      if (NodeUtil.isCall(parent)) {\n        Node callee = parent.getFirstChild();\n        if (callee.getType() == Token.SUPER) {\n          Node maybeFunExpr = n;\n          while (NodeUtil.isParentheses(maybeFunExpr.getParent())) {\n            maybeFunExpr = maybeFunExpr.getParent();\n          }\n          Node maybeCtor = maybeFunExpr.getParent();\n          if (!(NodeUtil.isNew(maybeCtor) && parent.getParent().getType() == Token.METHOD)) {\n            return false;\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0f671f40 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.GETPROP &&\n+          parent.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting passed as a constructor to super().\n+      if (NodeUtil.isCall(parent)) {\n+        Node callee = parent.getFirstChild();\n+        if (callee.getType() == Token.SUPER) {\n+          Node maybeFunExpr = n;\n+          while (NodeUtil.isParentheses(maybeFunExpr.getParent())) {\n+            maybeFunExpr = maybeFunExpr.getParent();\n+          }\n+          Node maybeCtor = maybeFunExpr.getParent();\n+          if (!(NodeUtil.isNew(maybeCtor) && parent.getParent().getType() == Token.METHOD)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}