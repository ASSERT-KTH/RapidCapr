{
    "patch": "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (objType.hasProperty(prop)) {\n              JSType currPropType = objType.getPropertyType(prop);\n              if (!currPropType.isSubtypeOf(propType)) {\n                typeToInfer = currPropType.getLeastSupertype(propType);\n              }\n            } else {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..a6eca3e2 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,14 +1118,18 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+      if (objType != null && constraintObj.isRecordType()) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n+            if (objType.hasProperty(prop)) {\n+              JSType currPropType = objType.getPropertyType(prop);\n+              if (!currPropType.isSubtypeOf(propType)) {\n+                typeToInfer = currPropType.getLeastSupertype(propType);\n+              }\n+            } else {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}