{
    "patch": "if (value.isFunction() && !value.getFirstChild().isFunction()) {\n    Node callNode = reference.getParent();\n    if (callNode == null || !callNode.isCall()) {\n        return false;\n    }\n    if (compiler.getCodingConvention().isAssertionCall(callNode)) {\n        return false;\n    }\n    if (value.isMemberFunctionDef()) {\n        SubclassRelationship relationship =\n            compiler.getCodingConvention()\n            .getClassesDefinedByMethod(value.getParent());\n        if (relationship == null) {\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..18028a9f 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,23 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction() && !value.getFirstChild().isFunction()) {\n+    Node callNode = reference.getParent();\n+    if (callNode == null || !callNode.isCall()) {\n+        return false;\n+    }\n+    if (compiler.getCodingConvention().isAssertionCall(callNode)) {\n+        return false;\n+    }\n+    if (value.isMemberFunctionDef()) {\n+        SubclassRelationship relationship =\n+            compiler.getCodingConvention()\n+            .getClassesDefinedByMethod(value.getParent());\n+        if (relationship == null) {\n+            return false;\n+        }\n+    }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}