{
    "patch": "import java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class Line {\n    private final Vector zero;\n    private final Vector direction;\n\n    public Line(Vector zero, Vector direction) {\n        this.zero = zero;\n        this.direction = direction;\n    }\n\n    public Line revert() {\n        Vector reversedDirection = direction.negate();\n        Vector roundedReversedDirection = new Vector(\n                reversedDirection.getX().setScale(15, BigDecimal.ROUND_HALF_UP),\n                reversedDirection.getY().setScale(15, BigDecimal.ROUND_HALF_UP),\n                reversedDirection.getZ().setScale(15, BigDecimal.ROUND_HALF_UP)\n        );\n        return new Line(zero, roundedReversedDirection);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..5fb1ee64d 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,28 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+\n+public class Line {\n+    private final Vector zero;\n+    private final Vector direction;\n+\n+    public Line(Vector zero, Vector direction) {\n+        this.zero = zero;\n+        this.direction = direction;\n+    }\n+\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+        Vector reversedDirection = direction.negate();\n+        Vector roundedReversedDirection = new Vector(\n+                reversedDirection.getX().setScale(15, BigDecimal.ROUND_HALF_UP),\n+                reversedDirection.getY().setScale(15, BigDecimal.ROUND_HALF_UP),\n+                reversedDirection.getZ().setScale(15, BigDecimal.ROUND_HALF_UP)\n+        );\n+        return new Line(zero, roundedReversedDirection);\n     }\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}