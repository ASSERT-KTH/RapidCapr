{
    "patch": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        JSType thisType = this.restrictByNotNullOrUndefined();\n        JSType thatType = that.restrictByNotNullOrUndefined();\n        if (thisType != null && thatType != null &&\n                thisType.isEquivalentTo(thatType)) {\n            return new TypePair(thisType, thatType);\n        } else {\n            return new TypePair(thisType, thatType);\n        }\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..09670b4a 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,14 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        JSType thisType = this.restrictByNotNullOrUndefined();\n+        JSType thatType = that.restrictByNotNullOrUndefined();\n+        if (thisType != null && thatType != null &&\n+                thisType.isEquivalentTo(thatType)) {\n+            return new TypePair(thisType, thatType);\n+        } else {\n+            return new TypePair(thisType, thatType);\n+        }\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}