{
    "patch": "public static double getTypedPercent(String js) {\n    int len = js.length();\n    int typedCount = 0;\n    int totalCount = 0;\n    int i = 0;\n    while (i < len) {\n        char c = js.charAt(i);\n        if (Character.isDigit(c)) {\n            i++;\n            while (i < len && Character.isDigit(js.charAt(i))) {\n                i++;\n            }\n            typedCount++;\n        } else if (c == ' ') {\n            i++;\n        } else {\n            i++;\n            totalCount++;\n        }\n    }\n    if (totalCount == 0) {\n        return 0.0;\n    }\n    return (100.0 * typedCount) / (typedCount + totalCount);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d94692c8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int len = js.length();\n+    int typedCount = 0;\n+    int totalCount = 0;\n+    int i = 0;\n+    while (i < len) {\n+        char c = js.charAt(i);\n+        if (Character.isDigit(c)) {\n+            i++;\n+            while (i < len && Character.isDigit(js.charAt(i))) {\n+                i++;\n+            }\n+            typedCount++;\n+        } else if (c == ' ') {\n+            i++;\n+        } else {\n+            i++;\n+            totalCount++;\n+        }\n+    }\n+    if (totalCount == 0) {\n+        return 0.0;\n+    }\n+    return (100.0 * typedCount) / (typedCount + totalCount);\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}