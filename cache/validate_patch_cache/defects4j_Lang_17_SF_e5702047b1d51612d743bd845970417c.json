{
    "patch": "public static String unescape(String input) {\n    StringBuilder sb = new StringBuilder();\n\n    int pos = 0;\n    while (pos < input.length()) {\n        char c = input.charAt(pos);\n        if (c == '&') {\n            int semicolon = input.indexOf(';', pos + 1);\n            if (semicolon == -1) {\n                sb.append(c);\n                pos++;\n            } else {\n                String escape = input.substring(pos + 1, semicolon);\n                if (escape.length() > 1 && escape.charAt(0) == '#') {\n                    int codePoint = Integer.parseInt(escape.substring(1));\n                    sb.appendCodePoint(codePoint);\n                } else {\n                    sb.append(ESCAPES.getOrDefault(escape, \"&\" + escape + \";\"));\n                }\n                pos = semicolon + 1;\n            }\n        } else {\n            sb.append(c);\n            pos++;\n        }\n    }\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..ac35ce8f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,37 +72,36 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n+public static String unescape(String input) {\n+    StringBuilder sb = new StringBuilder();\n+\n+    int pos = 0;\n+    while (pos < input.length()) {\n+        char c = input.charAt(pos);\n+        if (c == '&') {\n+            int semicolon = input.indexOf(';', pos + 1);\n+            if (semicolon == -1) {\n+                sb.append(c);\n+                pos++;\n+            } else {\n+                String escape = input.substring(pos + 1, semicolon);\n+                if (escape.length() > 1 && escape.charAt(0) == '#') {\n+                    int codePoint = Integer.parseInt(escape.substring(1));\n+                    sb.appendCodePoint(codePoint);\n+                } else {\n+                    sb.append(ESCAPES.getOrDefault(escape, \"&\" + escape + \";\"));\n                 }\n-                pos--;\n+                pos = semicolon + 1;\n             }\n+        } else {\n+            sb.append(c);\n             pos++;\n         }\n     }\n \n+    return sb.toString();\n+}\n+\n     /**\n      * Helper method to create a merger of this translator with another set of \n      * translators. Useful in customizing the standard functionality.",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}