{
    "patch": "    public int compareTo(Fraction object) {\n        int lcm = lcm(denominator, object.denominator);\n        int nOd = numerator * (lcm / denominator);\n        int dOn = object.numerator * (lcm / object.denominator);\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n    \n    private int lcm(int a, int b) {\n        return a / gcd(a, b) * b;\n    }\n    \n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex 0706f8c41..75c864bc5 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -256,8 +256,25 @@ public class Fraction extends Number implements Comparable<Fraction> {\n      *         than <tt>object</tt>, 0 if they are equal.\n      */\n     public int compareTo(Fraction object) {\n-        double nOd = doubleValue();\n-        double dOn = object.doubleValue();\n+    public int compareTo(Fraction object) {\n+        int lcm = lcm(denominator, object.denominator);\n+        int nOd = numerator * (lcm / denominator);\n+        int dOn = object.numerator * (lcm / object.denominator);\n+        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n+    }\n+    \n+    private int lcm(int a, int b) {\n+        return a / gcd(a, b) * b;\n+    }\n+    \n+    private int gcd(int a, int b) {\n+        while (b != 0) {\n+            int temp = a;\n+            a = b;\n+            b = temp % b;\n+        }\n+        return a;\n+    }\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}