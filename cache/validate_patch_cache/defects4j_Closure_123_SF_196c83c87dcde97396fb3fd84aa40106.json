{
    "patch": "public void printInOperatorInForLoop() {\n  Object[] d=new Object[] {1,2,3};\n  String expected=\"for(a=c?0:[(0 in d)];;)foo()\";\n  String actual=\"\";\n  for(boolean c=false,a=true,b=false;(c?a:b);) {\n    actual = \"for(a=\"+ (c?0:\"[(0 in d)]\")+\";;)foo()\";\n    if(!expected.equals(actual)) {\n      System.out.println(\"testPrintInOperatorInForLoop => \"+actual);\n    }\n    assertTrue(expected.equals(actual));\n    if (c) {\n      a = false;\n    }\n    else {\n      b = true;\n    }\n    c = !c;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..b6ecf4bf 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,25 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public void printInOperatorInForLoop() {\n+  Object[] d=new Object[] {1,2,3};\n+  String expected=\"for(a=c?0:[(0 in d)];;)foo()\";\n+  String actual=\"\";\n+  for(boolean c=false,a=true,b=false;(c?a:b);) {\n+    actual = \"for(a=\"+ (c?0:\"[(0 in d)]\")+\";;)foo()\";\n+    if(!expected.equals(actual)) {\n+      System.out.println(\"testPrintInOperatorInForLoop => \"+actual);\n+    }\n+    assertTrue(expected.equals(actual));\n+    if (c) {\n+      a = false;\n+    }\n+    else {\n+      b = true;\n+    }\n+    c = !c;\n+  }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}