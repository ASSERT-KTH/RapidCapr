{
    "patch": "        boolean hasWeekYear = false;\n        for (int i = 0; i < count; i++) {\n            SavedField svfd = savedFields[i];\n            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n                hasWeekYear = true;\n                break;\n            }\n            try {\n                millis = svfd.set(millis, resetFields);\n            } catch (IllegalArgumentException e) {\n                if (text != null) {\n                    StringBuilder buf = new StringBuilder();\n                    buf.append(\"Cannot parse \\\"\" + text + \"\\\": \");\n                    buf.append(e.getMessage());\n                    throw new IllegalArgumentException(buf.toString(), e);\n                }\n                throw e;\n            } catch (RuntimeException e) {\n                if (!resetFields || !(e instanceof IllegalArgumentException)) {\n                    throw e;\n                }\n                // ignore IllegalArgumentException during reset\n            }\n        }\n        \n        if (hasWeekYear) {\n            throw new IllegalArgumentException(\"Weekyears can not be set\");\n        }\n        \n        // Recompute millis after the first round to ensure that the\n        // first day of a weekyear is January 1.\n        boolean recomputedMillis = false;\n        for (int i = 0; i < count; i++) {\n            SavedField svfd = savedFields[i];\n            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n                int weekyear = svfd.iValue;\n                                \n                long dateMillis = iChrono.weekyear().roundCeiling(millis);\n                int minDaysInFirstWeek = iChrono.weekOfWeekyear().getMinimumValue();\n                DateTimeField weekOfWeekyear = iChrono.weekOfWeekyear().getField();\n                int week = weekOfWeekyear.get(dateMillis);\n                // Test if the current week belongs to the weekyear computed from the millis\n                if (week >= minDaysInFirstWeek) {\n                    int year = iChrono.weekyear().get(dateMillis);\n                    DateTimeField yearField = iChrono.year();\n                    millis = yearField.set(millis, year);\n                    millis = weekOfWeekyear.set(millis, week);\n                    recomputedMillis = true;\n                } else {\n                    // The current week belongs to the weekyear computed from the next year.\n                    int year = iChrono.weekyear().get(dateMillis + 7*DurationConstants.MILLIS_PER_DAY);\n                    DateTimeField yearField = iChrono.year();\n                    millis = yearField.set(millis, year);\n                    millis = weekOfWeekyear.set(millis, 1);\n                    recomputedMillis = true;\n                }\n                break;\n            }\n        }\n        \n        if (recomputedMillis) {\n            for (int i = 0; i < count; i++) {\n                SavedField svfd = savedFields[i];\n                if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n                    // skip\n                    continue;\n                }\n                try {\n                    millis = svfd.set(millis, resetFields);\n                } catch (IllegalArgumentException e) {\n                    if (text != null) {\n                        StringBuilder buf = new StringBuilder();\n                        buf.append(\"Cannot parse \\\"\" + text + \"\\\": \");\n                        buf.append(e.getMessage());\n                        throw new IllegalArgumentException(buf.toString(), e);\n                    }\n                    throw e;\n                } catch (RuntimeException e) {\n                    if (!resetFields || !(e instanceof IllegalArgumentException)) {\n                        throw e;\n                    }\n                    // ignore IllegalArgumentException during reset\n                }\n            }\n        } else {\n            for (int i = 0; i < count; i++) {\n                SavedField svfd = savedFields[i];\n                if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n                    // skip\n                    continue;\n                }\n                try {\n                    millis = svfd.set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (resetFields) {\n                        // try to reset fields and try again\n                        iSavedFields = null;\n                        iSavedFieldsShared = false;\n                        iSavedFieldsCount = 0;\n                        return computeMillis(true, text);\n                    }\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..944e0181 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,111 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean hasWeekYear = false;\n+        for (int i = 0; i < count; i++) {\n+            SavedField svfd = savedFields[i];\n+            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n+                hasWeekYear = true;\n+                break;\n+            }\n+            try {\n+                millis = svfd.set(millis, resetFields);\n+            } catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    StringBuilder buf = new StringBuilder();\n+                    buf.append(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                    buf.append(e.getMessage());\n+                    throw new IllegalArgumentException(buf.toString(), e);\n+                }\n+                throw e;\n+            } catch (RuntimeException e) {\n+                if (!resetFields || !(e instanceof IllegalArgumentException)) {\n+                    throw e;\n+                }\n+                // ignore IllegalArgumentException during reset\n+            }\n+        }\n+        \n+        if (hasWeekYear) {\n+            throw new IllegalArgumentException(\"Weekyears can not be set\");\n+        }\n+        \n+        // Recompute millis after the first round to ensure that the\n+        // first day of a weekyear is January 1.\n+        boolean recomputedMillis = false;\n+        for (int i = 0; i < count; i++) {\n+            SavedField svfd = savedFields[i];\n+            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n+                int weekyear = svfd.iValue;\n+                                \n+                long dateMillis = iChrono.weekyear().roundCeiling(millis);\n+                int minDaysInFirstWeek = iChrono.weekOfWeekyear().getMinimumValue();\n+                DateTimeField weekOfWeekyear = iChrono.weekOfWeekyear().getField();\n+                int week = weekOfWeekyear.get(dateMillis);\n+                // Test if the current week belongs to the weekyear computed from the millis\n+                if (week >= minDaysInFirstWeek) {\n+                    int year = iChrono.weekyear().get(dateMillis);\n+                    DateTimeField yearField = iChrono.year();\n+                    millis = yearField.set(millis, year);\n+                    millis = weekOfWeekyear.set(millis, week);\n+                    recomputedMillis = true;\n+                } else {\n+                    // The current week belongs to the weekyear computed from the next year.\n+                    int year = iChrono.weekyear().get(dateMillis + 7*DurationConstants.MILLIS_PER_DAY);\n+                    DateTimeField yearField = iChrono.year();\n+                    millis = yearField.set(millis, year);\n+                    millis = weekOfWeekyear.set(millis, 1);\n+                    recomputedMillis = true;\n+                }\n+                break;\n+            }\n+        }\n+        \n+        if (recomputedMillis) {\n+            for (int i = 0; i < count; i++) {\n+                SavedField svfd = savedFields[i];\n+                if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n+                    // skip\n+                    continue;\n+                }\n+                try {\n+                    millis = svfd.set(millis, resetFields);\n+                } catch (IllegalArgumentException e) {\n+                    if (text != null) {\n+                        StringBuilder buf = new StringBuilder();\n+                        buf.append(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                        buf.append(e.getMessage());\n+                        throw new IllegalArgumentException(buf.toString(), e);\n+                    }\n+                    throw e;\n+                } catch (RuntimeException e) {\n+                    if (!resetFields || !(e instanceof IllegalArgumentException)) {\n+                        throw e;\n+                    }\n+                    // ignore IllegalArgumentException during reset\n+                }\n+            }\n+        } else {\n+            for (int i = 0; i < count; i++) {\n+                SavedField svfd = savedFields[i];\n+                if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n+                    // skip\n+                    continue;\n+                }\n+                try {\n+                    millis = svfd.set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (resetFields) {\n+                        // try to reset fields and try again\n+                        iSavedFields = null;\n+                        iSavedFieldsShared = false;\n+                        iSavedFieldsCount = 0;\n+                        return computeMillis(true, text);\n+                    }\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}