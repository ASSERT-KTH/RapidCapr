{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance;\n    \n    Class<?> outerClass = mockedProxyType.getEnclosingClass();\n    if (outerClass != null) {\n        // Get the outer instance for non-static inner classes\n        Object outerInstance;\n        try {\n            Constructor<?> outerClassConstructor = outerClass.getDeclaredConstructor();\n            outerClassConstructor.setAccessible(true);\n            outerInstance = outerClassConstructor.newInstance();\n        } catch (Exception e) {\n            throw new MockitoException(\"Failed to create outer instance for non-static inner class\", e);\n        }\n        \n        // Get the appropriate constructor for inner classes and pass the outer instance as first argument\n        Constructor<?>[] constructors = mockedProxyType.getDeclaredConstructors();\n        Constructor<? extends T> constructorToUse = null;\n        \n        for (Constructor<?> constructor : constructors) {\n            Class<?>[] parameterTypes = constructor.getParameterTypes();\n            if (parameterTypes.length == 2 && parameterTypes[0] == outerClass && parameterTypes[1] == MockCreationSettings.class) {\n                constructorToUse = (Constructor<? extends T>) constructor;\n                break;\n            }\n        }\n        \n        if (constructorToUse == null) {\n            throw new MockitoException(\"Failed to find a suitable constructor for non-static inner class\");\n        }\n        \n        try {\n            constructorToUse.setAccessible(true);\n            mockInstance = constructorToUse.newInstance(outerInstance, settings);\n        } catch (Exception e) {\n            throw new MockitoException(\"Failed to create mock instance of non-static inner class\", e);\n        }\n    } else {\n        // Use the default constructor for all other classes\n        try {\n            Constructor<? extends T> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n            constructor.setAccessible(true);\n            mockInstance = constructor.newInstance(settings, asInternalMockHandler(handler));\n        } catch (Exception e) {\n            throw new MockitoException(\"Failed to create mock instance\", e);\n        }\n    }\n    \n    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..58a31d5bd 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,66 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    T mockInstance;\n+    \n+    Class<?> outerClass = mockedProxyType.getEnclosingClass();\n+    if (outerClass != null) {\n+        // Get the outer instance for non-static inner classes\n+        Object outerInstance;\n+        try {\n+            Constructor<?> outerClassConstructor = outerClass.getDeclaredConstructor();\n+            outerClassConstructor.setAccessible(true);\n+            outerInstance = outerClassConstructor.newInstance();\n+        } catch (Exception e) {\n+            throw new MockitoException(\"Failed to create outer instance for non-static inner class\", e);\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n+        \n+        // Get the appropriate constructor for inner classes and pass the outer instance as first argument\n+        Constructor<?>[] constructors = mockedProxyType.getDeclaredConstructors();\n+        Constructor<? extends T> constructorToUse = null;\n+        \n+        for (Constructor<?> constructor : constructors) {\n+            Class<?>[] parameterTypes = constructor.getParameterTypes();\n+            if (parameterTypes.length == 2 && parameterTypes[0] == outerClass && parameterTypes[1] == MockCreationSettings.class) {\n+                constructorToUse = (Constructor<? extends T>) constructor;\n+                break;\n+            }\n+        }\n+        \n+        if (constructorToUse == null) {\n+            throw new MockitoException(\"Failed to find a suitable constructor for non-static inner class\");\n+        }\n+        \n         try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+            constructorToUse.setAccessible(true);\n+            mockInstance = constructorToUse.newInstance(outerInstance, settings);\n+        } catch (Exception e) {\n+            throw new MockitoException(\"Failed to create mock instance of non-static inner class\", e);\n+        }\n+    } else {\n+        // Use the default constructor for all other classes\n+        try {\n+            Constructor<? extends T> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n+            constructor.setAccessible(true);\n+            mockInstance = constructor.newInstance(settings, asInternalMockHandler(handler));\n+        } catch (Exception e) {\n+            throw new MockitoException(\"Failed to create mock instance\", e);\n         }\n     }\n+    \n+    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+\n+    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Failed to create mock instance",
    "test_result": "FAIL"
}