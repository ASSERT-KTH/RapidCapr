{
    "patch": "final int initialOffset = getOffset(instantLocal);\nfinal int previousOffset = getOffset(instantLocal - initialOffset);\nif (initialOffset == previousOffset) {\n    // no transition is happening at instantLocal; return the initial offset\n    return initialOffset;\n}\nfinal long nextTransition = (initialOffset > previousOffset) ?\n        nextTransition(instantLocal - previousOffset) :\n        previousTransition(instantLocal - previousOffset);\nif (nextTransition == instantLocal - initialOffset) {\n    // next transition is not after instantLocal, return initial offset\n    return initialOffset;\n}\nreturn getOffset(nextTransition);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0475e5d7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int initialOffset = getOffset(instantLocal);\n+final int previousOffset = getOffset(instantLocal - initialOffset);\n+if (initialOffset == previousOffset) {\n+    // no transition is happening at instantLocal; return the initial offset\n+    return initialOffset;\n+}\n+final long nextTransition = (initialOffset > previousOffset) ?\n+        nextTransition(instantLocal - previousOffset) :\n+        previousTransition(instantLocal - previousOffset);\n+if (nextTransition == instantLocal - initialOffset) {\n+    // next transition is not after instantLocal, return initial offset\n+    return initialOffset;\n+}\n+return getOffset(nextTransition);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}