{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    // The expression that we want to fold is an OR expression\n    if (maybeExpr.getType() == Token.EXPR_RESULT) {\n      Node expr = maybeExpr.getFirstChild();\n\n      if (expr.getType() == Token.OR && expr.hasTwoChildren()) {\n        Node lhs = expr.getFirstChild();\n        Node rhs = expr.getLastChild();\n\n        // The LHS is a NOT expression\n        if (lhs.getType() == Token.NOT && lhs.hasOneChild()) {\n          lhs = lhs.getFirstChild();\n\n          // Only fold if LHS and RHS are call expressions\n          if (lhs.getType() == Token.CALL && rhs.getType() == Token.CALL) {\n            String callee = rhs.getFirstChild().getString();\n\n            if (callee.startsWith(\"on\")) {\n              return false;\n            }\n\n            // Check if RHS call expression has arguments\n            if (rhs.getChildCount() > 1) {\n              return false;\n            }\n\n            // Check if LHS call expression has arguments\n            if (lhs.getChildCount() > 1) {\n              return false;\n            }\n\n            return true;\n          }\n        }\n      }\n    } else {\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a9053a6b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,52 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+\n+    // The expression that we want to fold is an OR expression\n+    if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+      Node expr = maybeExpr.getFirstChild();\n+\n+      if (expr.getType() == Token.OR && expr.hasTwoChildren()) {\n+        Node lhs = expr.getFirstChild();\n+        Node rhs = expr.getLastChild();\n+\n+        // The LHS is a NOT expression\n+        if (lhs.getType() == Token.NOT && lhs.hasOneChild()) {\n+          lhs = lhs.getFirstChild();\n+\n+          // Only fold if LHS and RHS are call expressions\n+          if (lhs.getType() == Token.CALL && rhs.getType() == Token.CALL) {\n+            String callee = rhs.getFirstChild().getString();\n+\n+            if (callee.startsWith(\"on\")) {\n+              return false;\n+            }\n+\n+            // Check if RHS call expression has arguments\n+            if (rhs.getChildCount() > 1) {\n+              return false;\n+            }\n+\n+            // Check if LHS call expression has arguments\n+            if (lhs.getChildCount() > 1) {\n+              return false;\n+            }\n+\n+            return true;\n+          }\n+        }\n       }\n+    } else {\n+      return NodeUtil.isExpressionNode(maybeExpr);\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}