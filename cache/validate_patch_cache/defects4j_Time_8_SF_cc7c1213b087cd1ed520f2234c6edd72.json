{
    "patch": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        \n        int totalMinutes = hoursOffset * 60 + minutesOffset;\n        if (totalMinutes < -720 || totalMinutes > 720 || totalMinutes % 15 != 0) { // Fixed\n            throw new IllegalArgumentException(\"Offset out of range: \" + hoursOffset + \":\" + minutesOffset); \n        }\n        \n        int millisOffset = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        return forOffsetMillis(millisOffset);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..0d3fc506 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -269,30 +269,21 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n+public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n-        }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n-            }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n-            throw new IllegalArgumentException(\"Offset is too large\");\n+        \n+        int totalMinutes = hoursOffset * 60 + minutesOffset;\n+        if (totalMinutes < -720 || totalMinutes > 720 || totalMinutes % 15 != 0) { // Fixed\n+            throw new IllegalArgumentException(\"Offset out of range: \" + hoursOffset + \":\" + minutesOffset); \n         }\n-        return forOffsetMillis(offset);\n-    }\n+        \n+        int millisOffset = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+        return forOffsetMillis(millisOffset);\n \n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}