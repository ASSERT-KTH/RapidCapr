{
    "patch": "try {\n    int successfulFields = 0;\n    int currentIndex = 0;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[currentIndex].set(millis, resetFields);\n            successfulFields++;\n            currentIndex++;\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n    }\n    if (resetFields && successfulFields != count) {\n        int firstFailedIndex = -1;\n        boolean[] fieldSet = new boolean[count];\n        for (int i = 0; i < currentIndex; i++) {\n            fieldSet[i] = true;\n        }\n        for (int i = currentIndex; i < count; i++) {\n            try {\n                long tempMillis = savedFields[i].set(millis, true);\n                successfulFields++;\n                if (firstFailedIndex == -1) {\n                    firstFailedIndex = i;\n                }\n                fieldSet[i] = true;\n                millis = tempMillis;\n            } catch (IllegalArgumentException e) {\n                if (text != null) {\n                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n                }\n                throw e;\n            }\n        }\n        if (firstFailedIndex >= 0) {\n            while (!fieldSet[firstFailedIndex]) {\n                firstFailedIndex--;\n            }\n            for (int i = firstFailedIndex + 1; i < currentIndex; i++) {\n                savedFields[i].set(millis, true); // reset previously parsed fields\n            }\n            millis = savedFields[firstFailedIndex].set(millis, true); // reset failed field\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3ebc3193 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,59 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int successfulFields = 0;\n+    int currentIndex = 0;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[currentIndex].set(millis, resetFields);\n+            successfulFields++;\n+            currentIndex++;\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+    }\n+    if (resetFields && successfulFields != count) {\n+        int firstFailedIndex = -1;\n+        boolean[] fieldSet = new boolean[count];\n+        for (int i = 0; i < currentIndex; i++) {\n+            fieldSet[i] = true;\n+        }\n+        for (int i = currentIndex; i < count; i++) {\n+            try {\n+                long tempMillis = savedFields[i].set(millis, true);\n+                successfulFields++;\n+                if (firstFailedIndex == -1) {\n+                    firstFailedIndex = i;\n+                }\n+                fieldSet[i] = true;\n+                millis = tempMillis;\n+            } catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+                }\n+                throw e;\n+            }\n+        }\n+        if (firstFailedIndex >= 0) {\n+            while (!fieldSet[firstFailedIndex]) {\n+                firstFailedIndex--;\n+            }\n+            for (int i = firstFailedIndex + 1; i < currentIndex; i++) {\n+                savedFields[i].set(millis, true); // reset previously parsed fields\n+            }\n+            millis = savedFields[firstFailedIndex].set(millis, true); // reset failed field\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}