{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n\n        // Don't attempt to inline a getter or setter property as a variable.\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n        if (name.globalSets == 1 && name.localSets <= 1 && name.aliasingGets > 0) {\n            // {@code name} meets condition (b).\n            Collection<Ref> refs = name.getRefs();\n            Ref localRef = null;\n            for (Ref ref : refs) {\n                if (ref.type != Ref.Type.ALIASING_GET) {\n                    // {@code name} doesn't meet condition (c).\n                    if (ref.scope.isLocal()) {\n                        localRef = ref;\n                    }\n                } else if (ref.scope.isLocal() &&\n                        ref.getTwin() == null &&\n                        (localRef == null || localRef.node == ref.node)) {\n                    // Found a candidate ref to inline.\n                    inlineAlias(ref);\n                    name.removeRef(ref);\n                    // Visiting the new local alias may reveal more opportunities\n                    // for inlining. Let's re-visit the name from the start.\n                    workList.remove(name);\n                    workList.push(getRootName(name));\n                    break;\n                }\n            }\n        }\n\n        // Check if {@code name} has any aliases left after the\n        // local-alias-inlining above.\n        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n                name.aliasingGets == 0 && name.props != null) {\n            // All of {@code name}'s children meet condition (a), so they can be\n            // added to the worklist.\n            workList.addAll(name.props);\n        }\n    }\n}\n\nprivate void inlineAlias(Ref ref) {\n    Node nameNode = ref.node.getFirstChild();\n    Node valueNode = ref.getAliasedValue();\n    Node parent = nameNode.getParent();\n    parent.replaceChild(nameNode, valueNode.cloneTree());\n}\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..44cdca45 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,59 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n+        Name name = workList.pop();\n \n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        // Don't attempt to inline a getter or setter property as a variable.\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n+        if (name.globalSets == 1 && name.localSets <= 1 && name.aliasingGets > 0) {\n+            // {@code name} meets condition (b).\n+            Collection<Ref> refs = name.getRefs();\n+            Ref localRef = null;\n+            for (Ref ref : refs) {\n+                if (ref.type != Ref.Type.ALIASING_GET) {\n+                    // {@code name} doesn't meet condition (c).\n+                    if (ref.scope.isLocal()) {\n+                        localRef = ref;\n+                    }\n+                } else if (ref.scope.isLocal() &&\n+                        ref.getTwin() == null &&\n+                        (localRef == null || localRef.node == ref.node)) {\n+                    // Found a candidate ref to inline.\n+                    inlineAlias(ref);\n+                    name.removeRef(ref);\n+                    // Visiting the new local alias may reveal more opportunities\n+                    // for inlining. Let's re-visit the name from the start.\n+                    workList.remove(name);\n+                    workList.push(getRootName(name));\n+                    break;\n+                }\n             }\n-          }\n         }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+        // Check if {@code name} has any aliases left after the\n+        // local-alias-inlining above.\n+        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n+                name.aliasingGets == 0 && name.props != null) {\n+            // All of {@code name}'s children meet condition (a), so they can be\n+            // added to the worklist.\n+            workList.addAll(name.props);\n+        }\n     }\n-  }\n+}\n+\n+private void inlineAlias(Ref ref) {\n+    Node nameNode = ref.node.getFirstChild();\n+    Node valueNode = ref.getAliasedValue();\n+    Node parent = nameNode.getParent();\n+    parent.replaceChild(nameNode, valueNode.cloneTree());\n+}\n+\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}