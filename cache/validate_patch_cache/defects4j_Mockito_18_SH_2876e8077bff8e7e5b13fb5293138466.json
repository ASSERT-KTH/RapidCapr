{
    "patch": "@Override\npublic ReturnValue apply(List<CommandInvocation> commandInvocations) {\n    ReturnValue values = new ReturnValue();\n\n    for (CommandInvocation ci : commandInvocations) {\n        try {\n            Object result = ci.getCommand().getClass().getMethod(\"execute\", ci.getArgTypes()).invoke(ci.getCommand(), ci.getArgs());\n            if (result != null) {\n                values.addReturnValue(result.getClass(), result);\n            }\n        } catch (Throwable t) {\n            values.addException(t);\n        }\n    }\n\n    if (values.getReturnTypeCount() == 0) {\n        values.addReturnValue(Void.class, null);\n    }\n\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}