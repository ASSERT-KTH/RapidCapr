{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null && parent.getType() == Token.EXPR_RESULT) {\n  Node assign = parent.getFirstChild();\n  Node lhs = assign.getFirstChild();\n  if (NodeUtil.isGet(lhs) &&\n      lhs.getLastChild().getString().equals(\"prototype\")) {\n    // The function is being assigned to a prototype.\n    // Don't traverse it.\n    return false;\n  }\n  if (lhs.getType() == Token.STRING_KEY && \n      lhs.getFirstChild().getLastChild().getString().equals(\"prototype\") && \n      lhs.getGrandparent() != null &&\n      lhs.getGrandparent().getType() == Token.OBJECTLIT &&\n      lhs.getGrandparent().getParent() != null &&\n      lhs.getGrandparent().getParent().getType() == Token.EXPR_RESULT) {\n    // The function is being assigned to a prototype property of an object literal.\n    // Don't traverse it.\n    return false;\n  }\n  if (lhs.getType() == Token.OBJECT_PATTERN) {\n    for (Node child : lhs.children()) {\n      if (child.getType() == Token.STRING_KEY &&\n          child.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n          lhs.getGrandparent() != null &&\n          lhs.getGrandparent().getType() == Token.OBJECTLIT &&\n          lhs.getGrandparent().getParent() != null &&\n          lhs.getGrandparent().getParent().getType() == Token.EXPR_RESULT) {\n        // The function is being assigned to a prototype property of an object literal.\n        // Don't traverse it.\n        return false;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d93caa88 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,41 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+  Node assign = parent.getFirstChild();\n+  Node lhs = assign.getFirstChild();\n+  if (NodeUtil.isGet(lhs) &&\n+      lhs.getLastChild().getString().equals(\"prototype\")) {\n+    // The function is being assigned to a prototype.\n+    // Don't traverse it.\n+    return false;\n+  }\n+  if (lhs.getType() == Token.STRING_KEY && \n+      lhs.getFirstChild().getLastChild().getString().equals(\"prototype\") && \n+      lhs.getGrandparent() != null &&\n+      lhs.getGrandparent().getType() == Token.OBJECTLIT &&\n+      lhs.getGrandparent().getParent() != null &&\n+      lhs.getGrandparent().getParent().getType() == Token.EXPR_RESULT) {\n+    // The function is being assigned to a prototype property of an object literal.\n+    // Don't traverse it.\n+    return false;\n+  }\n+  if (lhs.getType() == Token.OBJECT_PATTERN) {\n+    for (Node child : lhs.children()) {\n+      if (child.getType() == Token.STRING_KEY &&\n+          child.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n+          lhs.getGrandparent() != null &&\n+          lhs.getGrandparent().getType() == Token.OBJECTLIT &&\n+          lhs.getGrandparent().getParent() != null &&\n+          lhs.getGrandparent().getParent().getType() == Token.EXPR_RESULT) {\n+        // The function is being assigned to a prototype property of an object literal.\n+        // Don't traverse it.\n+        return false;\n+      }\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}