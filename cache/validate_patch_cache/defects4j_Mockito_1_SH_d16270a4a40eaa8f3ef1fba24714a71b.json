{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        Object[] args = invocation.getRawArguments();\n        for (int i = 0; i < args.length; i++) {\n            Object arg = args[i];\n            boolean isVarargs = invocation.getMethod().isVarArgs() && i == args.length - 1;\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (isVarargs && isVarargMatcher(m)) {\n                        Object varargsArray = arg;\n                        if (varargsArray != null && varargsArray.getClass().isArray()) {\n                            for (int j = 0; j < Array.getLength(varargsArray); j++) {\n                                ((CapturesArguments) m).captureFrom(Array.get(varargsArray, j));\n                            }\n                        }\n                    } else if (!isVarargs && position < args.length && position == i) {\n                        ((CapturesArguments) m).captureFrom(args[i]);\n                    }\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..6060f1691 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,28 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        Object[] args = invocation.getRawArguments();\n+        for (int i = 0; i < args.length; i++) {\n+            Object arg = args[i];\n+            boolean isVarargs = invocation.getMethod().isVarArgs() && i == args.length - 1;\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    if (isVarargs && isVarargMatcher(m)) {\n+                        Object varargsArray = arg;\n+                        if (varargsArray != null && varargsArray.getClass().isArray()) {\n+                            for (int j = 0; j < Array.getLength(varargsArray); j++) {\n+                                ((CapturesArguments) m).captureFrom(Array.get(varargsArray, j));\n+                            }\n+                        }\n+                    } else if (!isVarargs && position < args.length && position == i) {\n+                        ((CapturesArguments) m).captureFrom(args[i]);\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}