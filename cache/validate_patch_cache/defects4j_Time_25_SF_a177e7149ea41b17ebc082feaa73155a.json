{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n\n    // Go back in time until we find a transition\n    long instantBefore = instantLocal - 1;\n    int offsetBefore = getOffset(instantBefore);\n    while (initialOffset == offsetBefore) {\n        instantLocal = instantBefore;\n        initialOffset = offsetBefore;\n        instantBefore--;\n        offsetBefore = getOffset(instantBefore);\n    }\n\n    boolean gap = (initialOffset > offsetBefore);\n    long transition;\n    if (gap) {\n        transition = previousTransition(instantLocal);\n    } else {\n        transition = nextTransition(instantLocal);\n    }\n\n    if ((instantLocal - transition) < (transition - (instantLocal - initialOffset))) {\n        if (gap) {\n            return initialOffset;\n        } else {\n            return getOffset(transition - 1);\n        }\n    } else {\n        if (gap) {\n            return getOffset(transition - 1);\n        } else {\n            return initialOffset;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d74f7c09 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,41 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // Go back in time until we find a transition\n+    long instantBefore = instantLocal - 1;\n+    int offsetBefore = getOffset(instantBefore);\n+    while (initialOffset == offsetBefore) {\n+        instantLocal = instantBefore;\n+        initialOffset = offsetBefore;\n+        instantBefore--;\n+        offsetBefore = getOffset(instantBefore);\n+    }\n+\n+    boolean gap = (initialOffset > offsetBefore);\n+    long transition;\n+    if (gap) {\n+        transition = previousTransition(instantLocal);\n+    } else {\n+        transition = nextTransition(instantLocal);\n+    }\n+\n+    if ((instantLocal - transition) < (transition - (instantLocal - initialOffset))) {\n+        if (gap) {\n+            return initialOffset;\n+        } else {\n+            return getOffset(transition - 1);\n+        }\n+    } else {\n+        if (gap) {\n+            return getOffset(transition - 1);\n+        } else {\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}