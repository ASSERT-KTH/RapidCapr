{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    chrono = selectChronology(chrono);\n\n    // Create a bucket with the chronology to use and the current instant time.\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear);\n\n    // Parse the text into the bucket.\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        instant.setMillis(instantMillis);\n        return newPos;\n    }\n\n    // Check if we are parsing February 29 in a non-leap year.\n    // In that case, adjust the day of month to February 28.\n    if (bucket.getOffsetInteger() != null\n            && bucket.getOffsetInteger() != DateTimeZone.UTC.getOffset(bucket.getInstantMillis()))\n    {\n        LocalDate date = new LocalDate(bucket.getMillis(), bucket.getChronology());\n        if (date.getMonthOfYear() == 2 && date.getDayOfMonth() == 29 && !date.year().isLeap())\n        {\n            date = date.withDayOfMonth(28);\n            bucket.reset();\n            bucket.saveField(DateTimeFieldType.year(), date.getYear());\n            bucket.saveField(DateTimeFieldType.monthOfYear(), date.getMonthOfYear());\n            bucket.saveField(DateTimeFieldType.dayOfMonth(), date.getDayOfMonth());\n            newPos = parser.parseInto(bucket, text, newPos);\n        }\n    }\n\n    instant.setMillis(bucket.computeMillis());\n    if (iOffsetParsed) {\n        if (bucket.getOffsetInteger() != null) {\n            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n        } else if (bucket.getZone() != null) {\n            instant.setZone(bucket.getZone());\n        }\n    } else if (bucket.getZone() != null) {\n        instant.setZone(bucket.getZone());\n    }\n    if (iChrono != null) {\n        instant.setChronology(iChrono);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..ba4051e3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,58 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    chrono = selectChronology(chrono);\n+\n+    // Create a bucket with the chronology to use and the current instant time.\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear);\n+\n+    // Parse the text into the bucket.\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos < 0) {\n+        instant.setMillis(instantMillis);\n+        return newPos;\n+    }\n+\n+    // Check if we are parsing February 29 in a non-leap year.\n+    // In that case, adjust the day of month to February 28.\n+    if (bucket.getOffsetInteger() != null\n+            && bucket.getOffsetInteger() != DateTimeZone.UTC.getOffset(bucket.getInstantMillis()))\n+    {\n+        LocalDate date = new LocalDate(bucket.getMillis(), bucket.getChronology());\n+        if (date.getMonthOfYear() == 2 && date.getDayOfMonth() == 29 && !date.year().isLeap())\n+        {\n+            date = date.withDayOfMonth(28);\n+            bucket.reset();\n+            bucket.saveField(DateTimeFieldType.year(), date.getYear());\n+            bucket.saveField(DateTimeFieldType.monthOfYear(), date.getMonthOfYear());\n+            bucket.saveField(DateTimeFieldType.dayOfMonth(), date.getDayOfMonth());\n+            newPos = parser.parseInto(bucket, text, newPos);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+    }\n+\n+    instant.setMillis(bucket.computeMillis());\n+    if (iOffsetParsed) {\n+        if (bucket.getOffsetInteger() != null) {\n+            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+            instant.setZone(bucket.getZone());\n         }\n-        return newPos;\n+    } else if (bucket.getZone() != null) {\n+        instant.setZone(bucket.getZone());\n+    }\n+    if (iChrono != null) {\n+        instant.setChronology(iChrono);\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}