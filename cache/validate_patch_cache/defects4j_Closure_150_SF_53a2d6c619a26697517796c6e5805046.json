{
    "patch": "  @Override\n  public final void visitDeclaredTypeNode(NodeTraversal t, Node n, Node parent) {\n    switch (n.getToken()) {\n      case CAST:\n        castFound = true;\n        break;\n      case STRING_TYPE:\n        stringTypeSeen = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  @Override\n  public final void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n      scopes.push(CREATED_GLOBAL_SCOPE);\n    } else if (n.isBlockScope()) {\n      scopes.push(new Scope(scopeCreator.newScope(parent, scope)));\n    } else if (n.isFunction() && !NodeUtil.isFunctionExpression(n)) {\n      scopes.push(scopeCreator.newScope(n, scope));\n    } else if (n.isLP()) {\n      handleFunctionInputs(n);\n    } else if (n.isVar()) {\n      defineVars(n);\n    } else if (n.isCatch()) {\n      defineCatch(n);\n    } else if (n.isName()) {\n      checkDeclaredName(n);\n    }\n\n    if (n.isFunction()) {\n      if (NodeUtil.isFunctionExpression(n) && NodeUtil.getEnclosingType(n.getParent()) == null) {\n        addExpressionOfFunctionExpression(n);\n      } else {\n        // defined function names have their types annotated by the scope creator\n        return;\n      }\n    }\n\n    if (!n.isTypeName()) {\n      attachLiteralTypes(n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5e07c0d8 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,51 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+  @Override\n+  public final void visitDeclaredTypeNode(NodeTraversal t, Node n, Node parent) {\n+    switch (n.getToken()) {\n+      case CAST:\n+        castFound = true;\n+        break;\n+      case STRING_TYPE:\n+        stringTypeSeen = true;\n+        break;\n+      default:\n+        break;\n+    }\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+  @Override\n+  public final void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isScript()) {\n+      scopes.push(CREATED_GLOBAL_SCOPE);\n+    } else if (n.isBlockScope()) {\n+      scopes.push(new Scope(scopeCreator.newScope(parent, scope)));\n+    } else if (n.isFunction() && !NodeUtil.isFunctionExpression(n)) {\n+      scopes.push(scopeCreator.newScope(n, scope));\n+    } else if (n.isLP()) {\n+      handleFunctionInputs(n);\n+    } else if (n.isVar()) {\n+      defineVars(n);\n+    } else if (n.isCatch()) {\n+      defineCatch(n);\n+    } else if (n.isName()) {\n+      checkDeclaredName(n);\n+    }\n+\n+    if (n.isFunction()) {\n+      if (NodeUtil.isFunctionExpression(n) && NodeUtil.getEnclosingType(n.getParent()) == null) {\n+        addExpressionOfFunctionExpression(n);\n+      } else {\n+        // defined function names have their types annotated by the scope creator\n         return;\n       }\n+    }\n \n+    if (!n.isTypeName()) {\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n     }\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}