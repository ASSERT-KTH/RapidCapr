{
    "patch": "if (typeVariable.getBounds().length > 0) {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n} else if (typeVariable.getGenericDeclaration() instanceof Class) {\n    for (Type type : ((Class<?>)typeVariable.getGenericDeclaration()).getGenericInterfaces()) {\n        registerTypeVariablesOn(getActualTypeArgumentFor((ParameterizedType)type, typeVariable.getName()));\n    }\n} else {\n    // Unable to determine the actual type, as it is not defined in the current class or method.\n    // We can just skip registering this type variable.\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..715536e9a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,23 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+if (typeVariable.getBounds().length > 0) {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+} else if (typeVariable.getGenericDeclaration() instanceof Class) {\n+    for (Type type : ((Class<?>)typeVariable.getGenericDeclaration()).getGenericInterfaces()) {\n+        registerTypeVariablesOn(getActualTypeArgumentFor((ParameterizedType)type, typeVariable.getName()));\n+    }\n+} else {\n+    // Unable to determine the actual type, as it is not defined in the current class or method.\n+    // We can just skip registering this type variable.\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: method getActualTypeArgumentFor in class GenericMetadataSupport cannot be applied to given types;",
    "test_result": "ERROR"
}