{
    "patch": "void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char first = newcode.charAt(0);\n    char last = getLastChar();\n\n    // handle the special cases of comments and division operator\n    if (last == '/') {\n      if (first == '/' || first == '*') {\n        append(\" \");\n      }\n    } else if (last == '*' && first == '/') {\n      // avoid empty line between opening and closing multi-line comment symbols\n      append(\" \");\n    } else if (last == '\\\\') {\n      if (first == 'n' || first == 'r' || first == 'f' || first == 't') {\n        // handle special characters after '\\' in a string or character literal\n        append(\" \");\n      }\n    } else if (last == '\\'' || last == '\\\"') {\n      if (last == first) {\n        // handle consecutive quotes in a string or character literal\n        append(\" \");\n      }\n    } else if ((isWordChar(first) || first == '\\\\') && isWordChar(last)) {\n      append(\" \");\n    }\n\n    append(newcode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 47556652..454836b6 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -178,28 +178,40 @@ abstract class CodeConsumer {\n   void endCaseBody() {\n   }\n \n-  void add(String newcode) {\n+void add(String newcode) {\n     maybeEndStatement();\n \n     if (newcode.length() == 0) {\n       return;\n     }\n \n-    char c = newcode.charAt(0);\n-    if ((isWordChar(c) || c == '\\\\') &&\n-        isWordChar(getLastChar())) {\n-      // need space to separate. This is not pretty printing.\n-      // For example: \"return foo;\"\n+    char first = newcode.charAt(0);\n+    char last = getLastChar();\n+\n+    // handle the special cases of comments and division operator\n+    if (last == '/') {\n+      if (first == '/' || first == '*') {\n+        append(\" \");\n+      }\n+    } else if (last == '*' && first == '/') {\n+      // avoid empty line between opening and closing multi-line comment symbols\n+      append(\" \");\n+    } else if (last == '\\\\') {\n+      if (first == 'n' || first == 'r' || first == 'f' || first == 't') {\n+        // handle special characters after '\\' in a string or character literal\n+        append(\" \");\n+      }\n+    } else if (last == '\\'' || last == '\\\"') {\n+      if (last == first) {\n+        // handle consecutive quotes in a string or character literal\n+        append(\" \");\n+      }\n+    } else if ((isWordChar(first) || first == '\\\\') && isWordChar(last)) {\n       append(\" \");\n-      // Do not allow a forward slash to appear after a DIV.\n-      // For example,\n-      // REGEXP DIV REGEXP\n-      // is valid and should print like\n-      // / // / /\n     }\n \n     append(newcode);\n-  }\n+}\n \n   void appendOp(String op, boolean binOp) {\n     append(op);",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}