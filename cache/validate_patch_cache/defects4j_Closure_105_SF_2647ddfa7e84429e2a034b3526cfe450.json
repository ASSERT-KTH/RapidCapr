{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  boolean mergedEmptyString = false;\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      String elemValue = NodeUtil.getStringValue(elem);\n      boolean isEmptyString = elemValue.isEmpty();\n\n      if (isEmptyString && sb.length() == 0) {\n        // Skip empty strings at the beginning of the array\n        elem = elem.getNext();\n        continue;\n      }\n\n      if (sb.length() > 0 && !mergedEmptyString) {\n        // Merge adjacent non-empty strings with the join string\n        sb.append(joinString);\n      }\n      mergedEmptyString = false;\n\n      sb.append(elemValue);\n      if (isEmptyString) {\n        mergedEmptyString = true;\n      }\n    } else {\n      if (sb.length() > 0) {\n        // If there is a string to be added as a child, add its length to foldedSize.\n        foldedSize += sb.length() + 2; // +2 for the quotes of the string literal\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n        mergedEmptyString = false;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    // If there is a string left, add its length to foldedSize.\n    foldedSize += sb.length() + 2; // +2 for the quotes of the string literal\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n\n  // Add the length of the join string * number of commas.\n  // There is one comma less than the number of children in the array.\n  foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      break;\n\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.get(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that it is coerced to a string.\n        Node replacement =\n            new Node(Token.ADD, Node.newString(\"\"), foldedStringNode).srcref(foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        // No folding could actually be performed.\n        return;\n      }\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      break;\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..6b2ce7c8 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,110 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  String joinString = NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  boolean mergedEmptyString = false;\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      String elemValue = NodeUtil.getStringValue(elem);\n+      boolean isEmptyString = elemValue.isEmpty();\n+\n+      if (isEmptyString && sb.length() == 0) {\n+        // Skip empty strings at the beginning of the array\n+        elem = elem.getNext();\n+        continue;\n       }\n-      elem = elem.getNext();\n-    }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+      if (sb.length() > 0 && !mergedEmptyString) {\n+        // Merge adjacent non-empty strings with the join string\n+        sb.append(joinString);\n+      }\n+      mergedEmptyString = false;\n+\n+      sb.append(elemValue);\n+      if (isEmptyString) {\n+        mergedEmptyString = true;\n+      }\n+    } else {\n+      if (sb.length() > 0) {\n+        // If there is a string to be added as a child, add its length to foldedSize.\n+        foldedSize += sb.length() + 2; // +2 for the quotes of the string literal\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+        mergedEmptyString = false;\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+    elem = elem.getNext();\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if (sb.length() > 0) {\n+    // If there is a string left, add its length to foldedSize.\n+    foldedSize += sb.length() + 2; // +2 for the quotes of the string literal\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  // Add the length of the join string * number of commas.\n+  // There is one comma less than the number of children in the array.\n+  foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n \n-      default:\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  switch (arrayFoldedChildren.size()) {\n+    case 0:\n+      Node emptyStringNode = Node.newString(\"\");\n+      parent.replaceChild(n, emptyStringNode);\n+      break;\n+\n+    case 1:\n+      Node foldedStringNode = arrayFoldedChildren.get(0);\n+      if (foldedSize > originalSize) {\n+        return;\n+      }\n+      arrayNode.detachChildren();\n+      if (foldedStringNode.getType() != Token.STRING) {\n+        // If the Node is not a string literal, ensure that it is coerced to a string.\n+        Node replacement =\n+            new Node(Token.ADD, Node.newString(\"\"), foldedStringNode).srcref(foldedStringNode);\n+        foldedStringNode = replacement;\n+      }\n+      parent.replaceChild(n, foldedStringNode);\n+      break;\n+\n+    default:\n+      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n         // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n+        return;\n+      }\n+      int kJoinOverhead = \"[].join()\".length();\n+      foldedSize += kJoinOverhead;\n+      foldedSize += InlineCostEstimator.getCost(right);\n+      if (foldedSize > originalSize) {\n+        return;\n+      }\n+      arrayNode.detachChildren();\n+      for (Node node : arrayFoldedChildren) {\n+        arrayNode.addChildToBack(node);\n+      }\n+      break;\n   }\n+  t.getCompiler().reportCodeChange();\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}