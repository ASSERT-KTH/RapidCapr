{
    "patch": "public static Map<String, Integer> countWords(List<String> words) {\n    Map<String, Integer> wordCounts = new HashMap<>();\n    if (words == null || words.isEmpty()) {\n        return wordCounts;\n    }\n    for (String word : words) {\n        if (word == null || word.isEmpty()) {\n            continue;\n        }\n        String cleanedWord = word.toLowerCase().replaceAll(\"[^a-z]\", \"\");\n        if (cleanedWord.isEmpty()) {\n            continue;\n        }\n        wordCounts.put(cleanedWord, wordCounts.getOrDefault(cleanedWord, 0) + 1);\n    }\n    return wordCounts;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f743330d3 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> countWords(List<String> words) {\n+    Map<String, Integer> wordCounts = new HashMap<>();\n+    if (words == null || words.isEmpty()) {\n+        return wordCounts;\n+    }\n+    for (String word : words) {\n+        if (word == null || word.isEmpty()) {\n+            continue;\n+        }\n+        String cleanedWord = word.toLowerCase().replaceAll(\"[^a-z]\", \"\");\n+        if (cleanedWord.isEmpty()) {\n+            continue;\n+        }\n+        wordCounts.put(cleanedWord, wordCounts.getOrDefault(cleanedWord, 0) + 1);\n+    }\n+    return wordCounts;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}