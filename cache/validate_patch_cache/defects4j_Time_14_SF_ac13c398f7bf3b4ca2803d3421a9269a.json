{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            int[] newValues = values.clone();\n            // First, add the value to the specified field and store it in a variable\n            // Since 'month' is the field we are adding to, we take care of days first\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == fieldIndex) {\n                    int oldValue = values[i];\n                    // Calculate the new month and year based on the added months\n                    newValues[i] = iChronology.monthOfYear().add(oldValue, valueToAdd);\n                    int newMonth = newValues[i];\n                    int year = newValues[partial.indexOfSupported(DateTimeFieldType.year())];\n                    // We calculate the new day, also catching leap year.\n                    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year, newMonth);\n                    int newDayOfMonth = Math.min(newValues[partial.indexOfSupported(DateTimeFieldType.dayOfMonth())], maxDayOfMonth);\n                    // Re-construct instant with new date\n                    instant = iChronology.year().set(instant, year);\n                    instant = iChronology.monthOfYear().set(instant, newMonth);\n                    instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n                }\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..6601ad08 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        \n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            int[] newValues = values.clone();\n+            // First, add the value to the specified field and store it in a variable\n+            // Since 'month' is the field we are adding to, we take care of days first\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == fieldIndex) {\n+                    int oldValue = values[i];\n+                    // Calculate the new month and year based on the added months\n+                    newValues[i] = iChronology.monthOfYear().add(oldValue, valueToAdd);\n+                    int newMonth = newValues[i];\n+                    int year = newValues[partial.indexOfSupported(DateTimeFieldType.year())];\n+                    // We calculate the new day, also catching leap year.\n+                    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year, newMonth);\n+                    int newDayOfMonth = Math.min(newValues[partial.indexOfSupported(DateTimeFieldType.dayOfMonth())], maxDayOfMonth);\n+                    // Re-construct instant with new date\n+                    instant = iChronology.year().set(instant, year);\n+                    instant = iChronology.monthOfYear().set(instant, newMonth);\n+                    instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}