{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n    Set<String> validProperties = Sets.newHashSet();\n    for (Reference ref : refs) {\n        Node node = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (node.isGetProp() && parent != null && parent.isExprResult()) {\n            if (gramps.isCall()\n                    && gramps.getFirstChild() == node) {\n                return false;\n            }\n\n            if (parent.getParent().isDelProp()) {\n                return false;\n            }\n\n            String propName = node.getLastChild().getString();\n            if (!validProperties.contains(propName)) {\n                if (NodeUtil.isVarOrSimpleAssignLhs(node, gramps)) {\n                    validProperties.add(propName);\n                } else {\n                    return false;\n                }\n            }\n            continue;\n\n        } else if (node.isStringKey() && !node.getParent().isComputedProp() && parent.isObjectPattern()) {\n            // This string key is a non-computed property name of an object destructuring asignment.\n            validProperties.add(node.getString());\n            continue;\n\n        } else if (isVarOrAssignExprLhs(node)) {\n            Node val = ref.getAssignedValue();\n            if (val != null && val.isObjectLit()) {\n                // TODO: Only exclude unorderable self-referential\n                // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n                // but x = {a: 1, b: x.a} is.\n                //\n                // Also, ES5 getters/setters aren't handled by this pass.\n                for (Node child = val.getFirstChild(); child != null;\n                     child = child.getNext()) {\n                    if (child.isGetterDef() || child.isSetterDef()) {\n                        // ES5 get/set not supported.\n                        return false;\n                    }\n\n                    validProperties.add(child.getString());\n\n                    Node childVal = child.getFirstChild();\n                    for (Reference t : refs) {\n                        Node refNode = t.getParent();\n                        while (!NodeUtil.isStatementBlock(refNode)) {\n                            if (refNode == childVal) {\n                                return false;\n                            }\n                            refNode = refNode.getParent();\n                        }\n                    }\n                }\n\n                ret = true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..0e2d1d20 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,78 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+private boolean isInlinableObject(List<Reference> refs) {\n+    boolean ret = false;\n+    Set<String> validProperties = Sets.newHashSet();\n+    for (Reference ref : refs) {\n+        Node node = ref.getNode();\n+        Node parent = ref.getParent();\n+        Node gramps = ref.getGrandparent();\n+\n+        if (node.isGetProp() && parent != null && parent.isExprResult()) {\n+            if (gramps.isCall()\n+                    && gramps.getFirstChild() == node) {\n+                return false;\n+            }\n+\n+            if (parent.getParent().isDelProp()) {\n+                return false;\n+            }\n+\n+            String propName = node.getLastChild().getString();\n+            if (!validProperties.contains(propName)) {\n+                if (NodeUtil.isVarOrSimpleAssignLhs(node, gramps)) {\n+                    validProperties.add(propName);\n+                } else {\n+                    return false;\n+                }\n+            }\n+            continue;\n+\n+        } else if (node.isStringKey() && !node.getParent().isComputedProp() && parent.isObjectPattern()) {\n+            // This string key is a non-computed property name of an object destructuring asignment.\n+            validProperties.add(node.getString());\n+            continue;\n+\n+        } else if (isVarOrAssignExprLhs(node)) {\n+            Node val = ref.getAssignedValue();\n+            if (val != null && val.isObjectLit()) {\n+                // TODO: Only exclude unorderable self-referential\n+                // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+                // but x = {a: 1, b: x.a} is.\n+                //\n+                // Also, ES5 getters/setters aren't handled by this pass.\n+                for (Node child = val.getFirstChild(); child != null;\n+                     child = child.getNext()) {\n+                    if (child.isGetterDef() || child.isSetterDef()) {\n+                        // ES5 get/set not supported.\n+                        return false;\n+                    }\n+\n+                    validProperties.add(child.getString());\n+\n+                    Node childVal = child.getFirstChild();\n+                    for (Reference t : refs) {\n+                        Node refNode = t.getParent();\n+                        while (!NodeUtil.isStatementBlock(refNode)) {\n+                            if (refNode == childVal) {\n+                                return false;\n+                            }\n+                            refNode = refNode.getParent();\n+                        }\n+                    }\n+                }\n+\n+                ret = true;\n+            } else {\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+    return ret;\n+}\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}