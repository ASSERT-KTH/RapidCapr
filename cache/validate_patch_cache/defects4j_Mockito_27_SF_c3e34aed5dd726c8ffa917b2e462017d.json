{
    "patch": "import org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator;\nimport org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\nimport org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker;\nimport org.mockito.invocation.MockHandler;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.mock.MockSettings;\nimport org.mockito.plugins.MockMaker;\n\nimport java.lang.reflect.Proxy;\n\npublic class ResetMock {\n\n    public static <T> void resetMock(T mock) {\n        MockCreationSettings<T> settings = getMockHandler(mock).getMockSettings();\n        MockMaker mockMaker = new SubclassByteBuddyMockMaker();\n        MockMethodInterceptor mockInterceptor = (MockMethodInterceptor) mockMaker.getHandler(mock);\n        MockHandler<T> oldMockHandler = mockInterceptor.getMockHandler();\n        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n        MockSettings mockSettings = settings.copy().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n        T newMock = mockMaker.createMock(mockSettings, newMockHandler);\n        mockInterceptor.setMock(newMock);\n    }\n\n    private static <T> MockMethodInterceptor getMockHandler(T mock) {\n        if (Proxy.isProxyClass(mock.getClass())) {\n            Object handler = Proxy.getInvocationHandler(mock);\n            if (handler instanceof MockMethodInterceptor) {\n                return (MockMethodInterceptor) handler;\n            }\n        } else if (MockBytecodeGenerator.isMock(mock)) {\n            return MockBytecodeGenerator.getMockHandler(mock);\n        }\n        throw new IllegalArgumentException(\"Argument is not a mock\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..3e415037c 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,42 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator;\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\n+import org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.mock.MockSettings;\n+import org.mockito.plugins.MockMaker;\n+\n+import java.lang.reflect.Proxy;\n+\n+public class ResetMock {\n+\n+    public static <T> void resetMock(T mock) {\n+        MockCreationSettings<T> settings = getMockHandler(mock).getMockSettings();\n+        MockMaker mockMaker = new SubclassByteBuddyMockMaker();\n+        MockMethodInterceptor mockInterceptor = (MockMethodInterceptor) mockMaker.getHandler(mock);\n+        MockHandler<T> oldMockHandler = mockInterceptor.getMockHandler();\n+        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+        MockSettings mockSettings = settings.copy().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+        T newMock = mockMaker.createMock(mockSettings, newMockHandler);\n+        mockInterceptor.setMock(newMock);\n+    }\n+\n+    private static <T> MockMethodInterceptor getMockHandler(T mock) {\n+        if (Proxy.isProxyClass(mock.getClass())) {\n+            Object handler = Proxy.getInvocationHandler(mock);\n+            if (handler instanceof MockMethodInterceptor) {\n+                return (MockMethodInterceptor) handler;\n+            }\n+        } else if (MockBytecodeGenerator.isMock(mock)) {\n+            return MockBytecodeGenerator.getMockHandler(mock);\n+        }\n+        throw new IllegalArgumentException(\"Argument is not a mock\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}