{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                // no further transition, return the new offset\n                return offsetAdjusted;\n            } else if (offsetLocal < offsetAdjusted) {\n                // negative transition, we jumped back into STD\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                return (prevAdjusted == instantAdjusted) ? offsetLocal : getOffset(prevAdjusted);\n            } else {\n                // positive transition, we jumped forward into DST\n                long nextLocalPrev = previousTransition(nextLocal);\n                if (nextLocalPrev <= instantAdjusted) {\n                    return offsetAdjusted;\n                } else {\n                    return getOffset(nextLocalPrev);\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bb772f4b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -884,16 +884,22 @@ public abstract class DateTimeZone implements Serializable {\n         final int offsetAdjusted = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                // no further transition, return the new offset\n+                return offsetAdjusted;\n+            } else if (offsetLocal < offsetAdjusted) {\n+                // negative transition, we jumped back into STD\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                return (prevAdjusted == instantAdjusted) ? offsetLocal : getOffset(prevAdjusted);\n+            } else {\n+                // positive transition, we jumped forward into DST\n+                long nextLocalPrev = previousTransition(nextLocal);\n+                if (nextLocalPrev <= instantAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return getOffset(nextLocalPrev);\n                 }\n             }\n         }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-11T01:00:00.000-05:00 expected:<2007-03-11T0[3:00:00.000-04]:00> but was:<2007-03-11T0[1:00:00.000-05]:00>",
    "test_result": "FAIL"
}