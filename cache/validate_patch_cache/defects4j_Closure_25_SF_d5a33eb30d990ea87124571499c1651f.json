{
    "patch": "    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        boolean isConstructor = false;\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n          isConstructor = ct.isConstructor();\n        } else {\n          isConstructor = ct != null && ct.isConstructor();\n        }\n        if (isConstructor) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    // Additional code to fix the bug:\n    if (type != null) {\n      ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objectType != null) {\n        for (String propertyName : objectType.getPropertyNames()) {\n          JSType propType = objectType.getPropertyType(propertyName);\n          if (propType.isUnknownType()) {\n            ObjectType objPrototype = objectType.getImplicitPrototype();\n            JSType inheritedPropType = objPrototype.getPropertyType(propertyName);\n            propType = inheritedPropType != null ? inheritedPropType : getNativeType(JSType.NULL_TYPE);\n            objectType.defineInferredProperty(propertyName, propType, null, null, false);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c178ec5b 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,9 +1032,6 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n@@ -1044,13 +1041,14 @@ class TypeInference\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n+        boolean isConstructor = false;\n         if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n           ct = (FunctionType) constructorType;\n+          isConstructor = ct.isConstructor();\n+        } else {\n+          isConstructor = ct != null && ct.isConstructor();\n         }\n-        if (ct != null && ct.isConstructor()) {\n+        if (isConstructor) {\n           type = ct.getInstanceType();\n         }\n       }\n@@ -1059,8 +1057,18 @@ class TypeInference\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n-    return scope;\n-  }\n+    // Additional code to fix the bug:\n+    if (type != null) {\n+      ObjectType objectType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      if (objectType != null) {\n+        for (String propertyName : objectType.getPropertyNames()) {\n+          JSType propType = objectType.getPropertyType(propertyName);\n+          if (propType.isUnknownType()) {\n+            ObjectType objPrototype = objectType.getImplicitPrototype();\n+            JSType inheritedPropType = objPrototype.getPropertyType(propertyName);\n+            propType = inheritedPropType != null ? inheritedPropType : getNativeType(JSType.NULL_TYPE);\n+            objectType.defineInferredProperty(propertyName, propType, null, null, false);\n+          }\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}