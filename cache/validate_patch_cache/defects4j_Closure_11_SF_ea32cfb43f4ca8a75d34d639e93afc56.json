{
    "patch": "public static Properties getPropValues(String propFileName) throws IOException {\n    Properties props = new Properties();\n    InputStream inputStream = new FileInputStream(propFileName);\n    try {\n        props.load(inputStream);\n    } catch (IOException e) {\n        System.out.println(\"Cannot find the properties file: \" + propFileName);\n        throw e;\n    } finally {\n        inputStream.close();\n    }\n\n    return props;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..98aedfc8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static Properties getPropValues(String propFileName) throws IOException {\n+    Properties props = new Properties();\n+    InputStream inputStream = new FileInputStream(propFileName);\n+    try {\n+        props.load(inputStream);\n+    } catch (IOException e) {\n+        System.out.println(\"Cannot find the properties file: \" + propFileName);\n+        throw e;\n+    } finally {\n+        inputStream.close();\n+    }\n+\n+    return props;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}