{
    "patch": "                if (actualTypeArgument == typeParameter) {\n                    // This is a recursive type parameter like `class A<T extends List<A<T>>>`.\n                    // In this case we can't just store the actual type argument but need to store the type parameter itself.\n                    contextualActualTypeParameters.put(typeParameter, typeParameter);\n                } else {\n                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..7aa0e53a5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,13 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+                if (actualTypeArgument == typeParameter) {\n+                    // This is a recursive type parameter like `class A<T extends List<A<T>>>`.\n+                    // In this case we can't just store the actual type argument but need to store the type parameter itself.\n+                    contextualActualTypeParameters.put(typeParameter, typeParameter);\n+                } else {\n+                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+                }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}