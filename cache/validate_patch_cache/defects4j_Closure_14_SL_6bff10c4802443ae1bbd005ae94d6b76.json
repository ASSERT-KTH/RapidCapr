{
    "patch": "if (cfa != null) {\n  if (node.getParent().getType() == Token.FUNCTION) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n  } else {\n    Node finallyNode = null;\n    if (node.getLastChild().isTry()) {\n      Node lastChild = node.getLastChild();\n      if (NodeUtil.hasFinally(lastChild)) {\n        // If the last child of a Block statement is a Try statement, when we\n        // reach the end of this Try statement, control should jump to its\n        // Finally statement. This also applies for a Try statement that is the\n        // last statement of a function.\n        finallyNode = lastChild.getLastChild();\n      }\n    }\n\n    if (finallyNode != null && finallyNode != node) {\n      cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode));\n    } else {\n      return computeFollowNode(node, null, cfa);\n    }\n  }\n} else {\n  Node finallyNode = null;\n  if (node.getLastChild().isTry()) {\n    Node lastChild = node.getLastChild();\n    if (NodeUtil.hasFinally(lastChild)) {\n      // If the last child of a Block statement is a Try statement, when we\n      // reach the end of this Try statement, control should jump to its\n      // Finally statement. This also applies for a Try statement that is the\n      // last statement of a function.\n      finallyNode = lastChild.getLastChild();\n    }\n  }\n\n  if (finallyNode != null && finallyNode != node) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode));\n  } else if (parent.getType() == Token.FUNCTION) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n  } else {\n    return computeFollowNode(node, null, cfa);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..fee0ad90 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,49 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  if (node.getParent().getType() == Token.FUNCTION) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n+  } else {\n+    Node finallyNode = null;\n+    if (node.getLastChild().isTry()) {\n+      Node lastChild = node.getLastChild();\n+      if (NodeUtil.hasFinally(lastChild)) {\n+        // If the last child of a Block statement is a Try statement, when we\n+        // reach the end of this Try statement, control should jump to its\n+        // Finally statement. This also applies for a Try statement that is the\n+        // last statement of a function.\n+        finallyNode = lastChild.getLastChild();\n+      }\n+    }\n+\n+    if (finallyNode != null && finallyNode != node) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode));\n+    } else {\n+      return computeFollowNode(node, null, cfa);\n+    }\n+  }\n+} else {\n+  Node finallyNode = null;\n+  if (node.getLastChild().isTry()) {\n+    Node lastChild = node.getLastChild();\n+    if (NodeUtil.hasFinally(lastChild)) {\n+      // If the last child of a Block statement is a Try statement, when we\n+      // reach the end of this Try statement, control should jump to its\n+      // Finally statement. This also applies for a Try statement that is the\n+      // last statement of a function.\n+      finallyNode = lastChild.getLastChild();\n+    }\n+  }\n+\n+  if (finallyNode != null && finallyNode != node) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode));\n+  } else if (parent.getType() == Token.FUNCTION) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n+  } else {\n+    return computeFollowNode(node, null, cfa);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}