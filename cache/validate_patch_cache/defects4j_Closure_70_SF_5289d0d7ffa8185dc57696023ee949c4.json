{
    "patch": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      boolean hasDeclaredVar = false;\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          if (astParameter.isName()) {\n            if (jsDocParameter.getJSDocInfo() != null && jsDocParameter.getJSDocInfo().isTypeInferred()) {\n              jsDocParameter.getJSDocInfo().setInferredType(astParameter.getJSType());\n            }\n            if (!hasDeclaredVar) {\n              if (astParameter.getJSDocInfo() != null && astParameter.getJSDocInfo().isConstructorOrInterface()) {\n                defineSlot(astParameter, functionNode.getGrandparent(), null, false, true, false);\n              } else {\n                defineSlot(astParameter, functionNode.getGrandparent(), jsDocParameter.getJSType(), true, true, false);\n              }\n              hasDeclaredVar = true;\n            } else {\n              defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n            }\n            jsDocParameter = jsDocParameter.getNext();\n          } else {\n            defineSlot(astParameter, functionNode, null, true);\n          }\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..a1601884 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,42 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n+private void declareArguments(Node functionNode) {\n+  Node astParameters = functionNode.getFirstChild().getNext();\n+  Node body = astParameters.getNext();\n+  FunctionType functionType = (FunctionType) functionNode.getJSType();\n+  if (functionType != null) {\n+    Node jsDocParameters = functionType.getParametersNode();\n+    if (jsDocParameters != null) {\n+      Node jsDocParameter = jsDocParameters.getFirstChild();\n+      boolean hasDeclaredVar = false;\n+      for (Node astParameter : astParameters.children()) {\n+        if (jsDocParameter != null) {\n+          if (astParameter.isName()) {\n+            if (jsDocParameter.getJSDocInfo() != null && jsDocParameter.getJSDocInfo().isTypeInferred()) {\n+              jsDocParameter.getJSDocInfo().setInferredType(astParameter.getJSType());\n+            }\n+            if (!hasDeclaredVar) {\n+              if (astParameter.getJSDocInfo() != null && astParameter.getJSDocInfo().isConstructorOrInterface()) {\n+                defineSlot(astParameter, functionNode.getGrandparent(), null, false, true, false);\n+              } else {\n+                defineSlot(astParameter, functionNode.getGrandparent(), jsDocParameter.getJSType(), true, true, false);\n+              }\n+              hasDeclaredVar = true;\n             } else {\n-              defineSlot(astParameter, functionNode, null, true);\n+              defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n             }\n+            jsDocParameter = jsDocParameter.getNext();\n+          } else {\n+            defineSlot(astParameter, functionNode, null, true);\n           }\n+        } else {\n+          defineSlot(astParameter, functionNode, null, true);\n         }\n       }\n-    } // end declareArguments\n+    }\n+  }\n+} // end declareArguments\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}