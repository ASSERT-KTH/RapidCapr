{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = dec.getSquareRoot();\n    if (sqrt != null) {\n        // If sqrt is not null, round small values to zero to reduce memory usage\n        for (int i = 0; i < sqrt.getRowDimension(); i++) {\n            for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n                if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n                    sqrt.setEntry(i, j, 0.0);\n                }\n            }\n        }\n        return sqrt;\n    } else {\n        // If sqrt is null, check if the matrix is symmetric and positive definite\n        if (isSymmetricPositiveDefinite(m)) {\n            // If m is symmetric and positive definite, use Cholesky decomposition to compute sqrt(m)\n            CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n            return cholesky.getL();\n        } else {\n            // otherwise, throw an exception\n            throw new RuntimeException(\"Matrix is not symmetric and positive definite.\");\n        }\n    }\n}\n\nprivate boolean isSymmetricPositiveDefinite(RealMatrix m) {\n    if (!m.isSquare()) {\n        return false;\n    }\n    EigenDecomposition dec = new EigenDecomposition(m);\n    double[] eigenvalues = dec.getRealEigenvalues();\n    for (double eigenvalue : eigenvalues) {\n        if (eigenvalue <= 0) {\n            return false;\n        }\n    }\n    return dec.getSolver().isSymmetric();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8170cc1b5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,43 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = dec.getSquareRoot();\n+    if (sqrt != null) {\n+        // If sqrt is not null, round small values to zero to reduce memory usage\n+        for (int i = 0; i < sqrt.getRowDimension(); i++) {\n+            for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n+                if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n+                    sqrt.setEntry(i, j, 0.0);\n+                }\n+            }\n+        }\n+        return sqrt;\n+    } else {\n+        // If sqrt is null, check if the matrix is symmetric and positive definite\n+        if (isSymmetricPositiveDefinite(m)) {\n+            // If m is symmetric and positive definite, use Cholesky decomposition to compute sqrt(m)\n+            CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+            return cholesky.getL();\n+        } else {\n+            // otherwise, throw an exception\n+            throw new RuntimeException(\"Matrix is not symmetric and positive definite.\");\n+        }\n     }\n }\n+\n+private boolean isSymmetricPositiveDefinite(RealMatrix m) {\n+    if (!m.isSquare()) {\n+        return false;\n+    }\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    double[] eigenvalues = dec.getRealEigenvalues();\n+    for (double eigenvalue : eigenvalues) {\n+        if (eigenvalue <= 0) {\n+            return false;\n+        }\n+    }\n+    return dec.getSolver().isSymmetric();\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}