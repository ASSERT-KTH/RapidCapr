{
    "patch": "        } else if (block == ref.getBasicBlock() && block.getSuccessorCount() > 1) {\n            // If the variable is assigned in a conditional loop and one of the path\n            // does not assign the variable, bail out\n            int variableAssignCount = 0;\n            for (DiGraphNode<Node, Branch> diGraphNode : getCfg().getOutNodes(ref.getBasicBlock())) {\n              if (diGraphNode.getValue() == Branch.ON_TRUE ||\n                  diGraphNode.getValue() == Branch.ON_FALSE) {\n                for (Node blockNode : diGraphNode.getValue().getSuccessorBasicBlock().getNodes()) {\n                  if (blockNode.isAssign() && ref.getNameNode().getRoot().matchesTree(blockNode.getFirstChild())) {\n                    variableAssignCount++;\n                    break;\n                  }\n                }\n              }\n            }\n            if (variableAssignCount < block.getSuccessorCount()) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2b077207 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block == ref.getBasicBlock() && block.getSuccessorCount() > 1) {\n+            // If the variable is assigned in a conditional loop and one of the path\n+            // does not assign the variable, bail out\n+            int variableAssignCount = 0;\n+            for (DiGraphNode<Node, Branch> diGraphNode : getCfg().getOutNodes(ref.getBasicBlock())) {\n+              if (diGraphNode.getValue() == Branch.ON_TRUE ||\n+                  diGraphNode.getValue() == Branch.ON_FALSE) {\n+                for (Node blockNode : diGraphNode.getValue().getSuccessorBasicBlock().getNodes()) {\n+                  if (blockNode.isAssign() && ref.getNameNode().getRoot().matchesTree(blockNode.getFirstChild())) {\n+                    variableAssignCount++;\n+                    break;\n+                  }\n+                }\n+              }\n+            }\n+            if (variableAssignCount < block.getSuccessorCount()) {\n+              return false;\n+            }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}