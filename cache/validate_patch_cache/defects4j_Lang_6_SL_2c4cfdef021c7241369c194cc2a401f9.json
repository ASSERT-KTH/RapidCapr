{
    "patch": "// contract with translators is that they have to understand codepoints \n// and they just took care of a surrogate pair\nint codePoint = Character.codePointAt(input, pos);\nint charCount = Character.charCount(codePoint);\nif (charCount > 1) {\n    // surrogate pair\n    CharSequence charSeq = input.subSequence(pos, Math.min(pos + charCount, len));\n    translate(charSeq, 0, out);\n} else {\n    translate(Character.toString((char) codePoint), 0, out);\n}\n// This updates the position variable to skip over the already translated characters.\npos += charCount;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..68f53c5d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,19 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+// contract with translators is that they have to understand codepoints \n+// and they just took care of a surrogate pair\n+int codePoint = Character.codePointAt(input, pos);\n+int charCount = Character.charCount(codePoint);\n+if (charCount > 1) {\n+    // surrogate pair\n+    CharSequence charSeq = input.subSequence(pos, Math.min(pos + charCount, len));\n+    translate(charSeq, 0, out);\n+} else {\n+    translate(Character.toString((char) codePoint), 0, out);\n+}\n+// This updates the position variable to skip over the already translated characters.\n+pos += charCount;\n             }\n         }\n     }",
    "result_reason": "junit.framework.AssertionFailedError: ampersand expected:<bread &amp;[] butter> but was:<bread &amp;[&amp;] butter>",
    "test_result": "FAIL"
}