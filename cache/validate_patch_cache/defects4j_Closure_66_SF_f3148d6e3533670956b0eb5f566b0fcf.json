{
    "patch": "public double getTypedPercent(String jsonString) {\n    int totalCount = 0, typedCount = 0;\n    try {\n        JSONArray jsonArray = new JSONArray(jsonString);\n        for (int i = 0; i < jsonArray.length(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            if (jsonObject.has(\"answer\")) {\n                typedCount++;\n            }\n            totalCount++;\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    if(totalCount == 0) {\n        return 100.0;\n    } else {\n        return ((double) typedCount / totalCount) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ceff5edc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String jsonString) {\n+    int totalCount = 0, typedCount = 0;\n+    try {\n+        JSONArray jsonArray = new JSONArray(jsonString);\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+            JSONObject jsonObject = jsonArray.getJSONObject(i);\n+            if (jsonObject.has(\"answer\")) {\n+                typedCount++;\n+            }\n+            totalCount++;\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    if(totalCount == 0) {\n+        return 100.0;\n+    } else {\n+        return ((double) typedCount / totalCount) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}