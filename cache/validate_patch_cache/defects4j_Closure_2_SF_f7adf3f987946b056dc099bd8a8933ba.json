{
    "patch": "  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    if (implicitProto == null) {\n      return;\n    }\n    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n    if (currentPropertyNames == null) {\n      return;\n    }\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        FunctionType interfacePropType = interfaceType.getPropertyType(name);\n        FunctionType oPropType = oType.getPropertyType(name);\n        if (interfacePropType == null || !oPropType.isEquivalentTo(interfacePropType)) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..9a6d0f95 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1568,15 +1568,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    if (implicitProto == null) {\n+      return;\n+    }\n+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    if (currentPropertyNames == null) {\n+      return;\n+    }\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n+        FunctionType interfacePropType = interfaceType.getPropertyType(name);\n+        FunctionType oPropType = oType.getPropertyType(name);\n+        if (interfacePropType == null || !oPropType.isEquivalentTo(interfacePropType)) {\n           compiler.report(\n               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                   functionName, name, oType.toString(),",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}