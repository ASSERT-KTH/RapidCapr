{
    "patch": "  private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed);\n\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n\n    Node next;\n    for (Node n = node.getFirstChild(); n != null; n = next) {\n      next = n.getNext();\n      findCalledFunctions(n, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..accff612 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,10 +770,9 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n+  private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(changed);\n+\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n@@ -784,6 +783,12 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n       findCalledFunctions(c, changed);\n     }\n+\n+    Node next;\n+    for (Node n = node.getFirstChild(); n != null; n = next) {\n+      next = n.getNext();\n+      findCalledFunctions(n, changed);\n+    }\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}