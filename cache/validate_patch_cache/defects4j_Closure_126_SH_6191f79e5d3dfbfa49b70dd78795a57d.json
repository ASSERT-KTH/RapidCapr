{
    "patch": "      // Handle finally blocks separately as their completion type\n      // should not be modified according to ECMA 262 Sections 8.9 & 12.14\n      if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getLastChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      }\n      // Ignore the last child for any other type of block to handle it separately later\n      else if (n.getLastChild() != null) {\n        for (Node c : n.children()) {\n          if (c == n.getLastChild()) {\n            break;\n          }\n          tryMinimizeExits(c, exitType, labelName);\n        }\n      }\n      // If there are no children, just return\n      else {\n        return;\n      }\n\n      // After handling the finally block or ignoring the last child,\n      // handle the next sibling block if it exists\n      Node nextNode = n.getNext();\n      if (nextNode != null) {\n        tryMinimizeExits(nextNode, exitType, labelName);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..55838320 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,32 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n+      // Handle finally blocks separately as their completion type\n+      // should not be modified according to ECMA 262 Sections 8.9 & 12.14\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n+      // Ignore the last child for any other type of block to handle it separately later\n+      else if (n.getLastChild() != null) {\n+        for (Node c : n.children()) {\n+          if (c == n.getLastChild()) {\n+            break;\n+          }\n+          tryMinimizeExits(c, exitType, labelName);\n+        }\n+      }\n+      // If there are no children, just return\n+      else {\n+        return;\n+      }\n+\n+      // After handling the finally block or ignoring the last child,\n+      // handle the next sibling block if it exists\n+      Node nextNode = n.getNext();\n+      if (nextNode != null) {\n+        tryMinimizeExits(nextNode, exitType, labelName);\n+      }\n     }\n \n     // Just a 'label'.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}