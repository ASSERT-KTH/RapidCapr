{
    "patch": "public double getTypedPercent(ArrayList<String> js) {\n   double countTyped = 0;\n   double countTotal = 0;\n   for (String line : js) {\n       String[] words = line.trim().split(\"\\\\s+\");\n       for (String word : words) {\n           countTotal++;\n           if (word.matches(\".*[A-Za-z]+.*\")) {\n               countTyped++;\n           }\n       }\n   }\n   return (countTyped / countTotal) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..67fee9a8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(ArrayList<String> js) {\n+   double countTyped = 0;\n+   double countTotal = 0;\n+   for (String line : js) {\n+       String[] words = line.trim().split(\"\\\\s+\");\n+       for (String word : words) {\n+           countTotal++;\n+           if (word.matches(\".*[A-Za-z]+.*\")) {\n+               countTyped++;\n+           }\n+       }\n+   }\n+   return (countTyped / countTotal) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}