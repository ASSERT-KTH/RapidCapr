{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] >= 0) {\n            double sqrt = FastMath.sqrt(eigenvalues[i]);\n            for (int j = 0; j < n; j++) {\n                sqrtD.setEntry(i, j, (i == j) ? sqrt : 0);\n            }\n        } else {\n            throw new RuntimeException(\"Matrix is not positive definite\");\n        }\n    }\n    return eigenvectors.multiply(sqrtD).multiply(eigenvectors.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..39be4474a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] >= 0) {\n+            double sqrt = FastMath.sqrt(eigenvalues[i]);\n+            for (int j = 0; j < n; j++) {\n+                sqrtD.setEntry(i, j, (i == j) ? sqrt : 0);\n+            }\n+        } else {\n+            throw new RuntimeException(\"Matrix is not positive definite\");\n+        }\n     }\n+    return eigenvectors.multiply(sqrtD).multiply(eigenvectors.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}