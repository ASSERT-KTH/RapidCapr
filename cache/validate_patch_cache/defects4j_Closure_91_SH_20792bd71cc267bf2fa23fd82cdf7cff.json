{
    "patch": "    ...\n      // Don't traverse functions that are getting lent to a prototype.\n      if (isLValueGettingProp(parent)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (isLValueOnPrototype(lhs)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  \n  private boolean isLValueGettingProp(Node n) {\n    return n.hasChildren() && NodeUtil.isExpressionNode(n)\n        && NodeUtil.isLValue(n)\n        && NodeUtil.isGet(n.getLastChild());\n  }\n\n  private boolean isLValueOnPrototype(Node n) {\n    Node last = n.getLastChild();\n\n    if (!last.isGetProp()) {\n      return false;\n    }\n\n    Node receiver = last.getFirstChild();\n    if (!receiver.isGetProp()) {\n      return false;\n    }\n\n    return \"prototype\".equals(receiver.getLastChild().getString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d52c705a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,55 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    ...\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (isLValueGettingProp(parent)) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (isLValueOnPrototype(lhs)) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+  \n+  private boolean isLValueGettingProp(Node n) {\n+    return n.hasChildren() && NodeUtil.isExpressionNode(n)\n+        && NodeUtil.isLValue(n)\n+        && NodeUtil.isGet(n.getLastChild());\n+  }\n+\n+  private boolean isLValueOnPrototype(Node n) {\n+    Node last = n.getLastChild();\n+\n+    if (!last.isGetProp()) {\n+      return false;\n+    }\n+\n+    Node receiver = last.getFirstChild();\n+    if (!receiver.isGetProp()) {\n+      return false;\n+    }\n+\n+    return \"prototype\".equals(receiver.getLastChild().getString());\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}