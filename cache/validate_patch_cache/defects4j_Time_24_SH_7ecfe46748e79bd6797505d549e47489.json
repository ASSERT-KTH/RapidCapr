{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year() && iChrono.year().isLeap(longValue)) {\n                int leapYears = iChrono.year().getLeapAmount(longValue);\n                long leapMillis = (long) leapYears * (long) DateTimeConstants.MILLIS_PER_DAY;\n                long standardMillis = iChrono.getYearDuration().getMillis(iChrono.year().get(1, leapYears + 1) - 1);\n                millis = iChrono.year().set(millis, leapYears + longValue);\n                millis = iChrono.getYearDuration().add(millis, standardMillis + leapMillis);\n                continue;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..37a68697 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,13 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year() && iChrono.year().isLeap(longValue)) {\n+                int leapYears = iChrono.year().getLeapAmount(longValue);\n+                long leapMillis = (long) leapYears * (long) DateTimeConstants.MILLIS_PER_DAY;\n+                long standardMillis = iChrono.getYearDuration().getMillis(iChrono.year().get(1, leapYears + 1) - 1);\n+                millis = iChrono.year().set(millis, leapYears + longValue);\n+                millis = iChrono.getYearDuration().add(millis, standardMillis + leapMillis);\n+                continue;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}