{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double[][] a = m.getData();\n\n    // reduce matrix size using Cholesky decomposition\n    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    final RealMatrix reducedM = cholesky.getL().transpose().multiply(m).multiply(cholesky.getL());\n    final double[][] b = reducedM.getData();\n\n    // perform eigen decomposition on reduced matrix\n    final EigenDecomposition dec = new EigenDecomposition(reducedM);\n\n    // compute square root of original matrix\n    final double[][] sqrtA = new double[n][n];\n    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(sqrtA);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            double sum = 0.0;\n            for (int k = 0; k < n; k++) {\n                sum += dec.getV().getEntry(i, k) * cholesky.getL().getEntry(k, j);\n            }\n            sqrtM.setEntry(i, j, sum / FastMath.sqrt(dec.getRealEigenvalue(i)));\n        }\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..23b814145 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double[][] a = m.getData();\n+\n+    // reduce matrix size using Cholesky decomposition\n+    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    final RealMatrix reducedM = cholesky.getL().transpose().multiply(m).multiply(cholesky.getL());\n+    final double[][] b = reducedM.getData();\n+\n+    // perform eigen decomposition on reduced matrix\n+    final EigenDecomposition dec = new EigenDecomposition(reducedM);\n+\n+    // compute square root of original matrix\n+    final double[][] sqrtA = new double[n][n];\n+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(sqrtA);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            double sum = 0.0;\n+            for (int k = 0; k < n; k++) {\n+                sum += dec.getV().getEntry(i, k) * cholesky.getL().getEntry(k, j);\n+            }\n+            sqrtM.setEntry(i, j, sum / FastMath.sqrt(dec.getRealEigenvalue(i)));\n+        }\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}