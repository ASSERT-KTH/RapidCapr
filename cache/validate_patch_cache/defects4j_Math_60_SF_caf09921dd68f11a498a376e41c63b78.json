{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Invalid input value: x = NaN\");\n    }\n    final double dev = x - mean;\n    final double nSigma = dev / standardDeviation;\n\n    if (Double.isInfinite(nSigma)) {\n        return (nSigma > 0) ? 1.0 : 0.0;\n    }\n\n    double result;\n\n    // Use normalDistribution.cumulativeProbability if available\n    if(normalDistribution != null) {\n        result = normalDistribution.cumulativeProbability(x);\n    } else {\n        try {\n            result = 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {\n                result = 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                result = 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n\n    if(result > 1.0) {\n        return 1.0;\n    } else if(result < 0.0) {\n        return 0.0;\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..87814ff11 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,22 +121,45 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Invalid input value: x = NaN\");\n+    }\n+    final double dev = x - mean;\n+    final double nSigma = dev / standardDeviation;\n+\n+    if (Double.isInfinite(nSigma)) {\n+        return (nSigma > 0) ? 1.0 : 0.0;\n+    }\n+\n+    double result;\n+\n+    // Use normalDistribution.cumulativeProbability if available\n+    if(normalDistribution != null) {\n+        result = normalDistribution.cumulativeProbability(x);\n+    } else {\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            result = 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n+            if (x < (mean - 20 * standardDeviation)) {\n+                result = 0;\n             } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n+                result = 1;\n             } else {\n                 throw ex;\n             }\n         }\n     }\n \n+    if(result > 1.0) {\n+        return 1.0;\n+    } else if(result < 0.0) {\n+        return 0.0;\n+    }\n+\n+    return result;\n+}\n+\n     /**\n      * Return the absolute accuracy setting of the solver used to estimate\n      * inverse cumulative probabilities.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}