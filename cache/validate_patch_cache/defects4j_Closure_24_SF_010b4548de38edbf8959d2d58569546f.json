{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node root = t.getAstRoot();\n    Node googScopeNode = findGoogScopeNode(root);\n    if (googScopeNode == null) {\n        return;\n    }\n    Node functionNode = googScopeNode.getSecondChild();\n    if (!functionNode.isFunction()) {\n        report(t, functionNode, GOOG_SCOPE_MUST_BE_CALL_TO_FUNCTION);\n        return;\n    }\n    if (functionNode.getChildCount() != 3) {\n        report(t, functionNode, GOOG_SCOPE_MUST_TAKE_SINGLE_PARAM);\n        return;\n    }\n    Node paramNode = functionNode.getSecondChild();\n    if (paramNode.getChildCount() != 0) {\n        report(t, paramNode, GOOG_SCOPE_NO_PARAMETERS_ALLOWED);\n        return;\n    }\n    Node blockNode = functionNode.getLastChild();\n    for (Node n = blockNode.getFirstChild(); n != null; n = n.getNext()) {\n        if (n.isVar()) {\n            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                String name = c.getString();\n                Var aliasVar = scope.getVar(name);\n                if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                    aliases.put(name, aliasVar);\n                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                    transformation.addAlias(name, qualifiedName);\n                } else if (aliasVar != null) {\n                    report(t, c, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n                } else {\n                    report(t, c, GOOG_SCOPE_UNDECLARED_ALIAS_LOCAL, name);\n                }\n            }\n        } else if (n.isFunction() && !n.getBooleanProp(Node.IS_ARROW_FUNCTION)) {\n            Node fnNameNode = n.getFirstChild();\n            if (fnNameNode != null && fnNameNode.isName()) {\n                String name = fnNameNode.getString();\n                Var var = scope.getVar(name);\n                if (var != null && var.isLocal()) {\n                    transformation.addName(name);\n                }\n            }\n        } else if (!n.isEmpty()) {\n            report(t, n, GOOG_SCOPE_NON_VAR);\n        }\n    }\n}\n\nprivate static Node findGoogScopeNode(Node root) {\n    NodeTraversal traversal = new NodeTraversal(compiler, new NodeTraversal.Callback() {\n        @Override\n        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n            return true;\n        }\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isCall()) {\n                if (n.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n                    node = n;\n                    t.reportCodeChange();\n                }\n            }\n        }\n    });\n    NodeScope ns = new NodeScope(root);\n    ns.setDeclared(globalScope.getVars());\n    traversal.traverseRoots(root, ns);\n    return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..7d6bbbf5 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,80 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node root = t.getAstRoot();\n+    Node googScopeNode = findGoogScopeNode(root);\n+    if (googScopeNode == null) {\n+        return;\n+    }\n+    Node functionNode = googScopeNode.getSecondChild();\n+    if (!functionNode.isFunction()) {\n+        report(t, functionNode, GOOG_SCOPE_MUST_BE_CALL_TO_FUNCTION);\n+        return;\n+    }\n+    if (functionNode.getChildCount() != 3) {\n+        report(t, functionNode, GOOG_SCOPE_MUST_TAKE_SINGLE_PARAM);\n+        return;\n+    }\n+    Node paramNode = functionNode.getSecondChild();\n+    if (paramNode.getChildCount() != 0) {\n+        report(t, paramNode, GOOG_SCOPE_NO_PARAMETERS_ALLOWED);\n+        return;\n+    }\n+    Node blockNode = functionNode.getLastChild();\n+    for (Node n = blockNode.getFirstChild(); n != null; n = n.getNext()) {\n+        if (n.isVar()) {\n+            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                String name = c.getString();\n+                Var aliasVar = scope.getVar(name);\n+                if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                    aliases.put(name, aliasVar);\n+                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                    transformation.addAlias(name, qualifiedName);\n+                } else if (aliasVar != null) {\n+                    report(t, c, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+                } else {\n+                    report(t, c, GOOG_SCOPE_UNDECLARED_ALIAS_LOCAL, name);\n+                }\n+            }\n+        } else if (n.isFunction() && !n.getBooleanProp(Node.IS_ARROW_FUNCTION)) {\n+            Node fnNameNode = n.getFirstChild();\n+            if (fnNameNode != null && fnNameNode.isName()) {\n+                String name = fnNameNode.getString();\n+                Var var = scope.getVar(name);\n+                if (var != null && var.isLocal()) {\n+                    transformation.addName(name);\n+                }\n+            }\n+        } else if (!n.isEmpty()) {\n+            report(t, n, GOOG_SCOPE_NON_VAR);\n         }\n-      }\n     }\n+}\n+\n+private static Node findGoogScopeNode(Node root) {\n+    NodeTraversal traversal = new NodeTraversal(compiler, new NodeTraversal.Callback() {\n+        @Override\n+        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+            return true;\n+        }\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isCall()) {\n+                if (n.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n+                    node = n;\n+                    t.reportCodeChange();\n+                }\n+            }\n+        }\n+    });\n+    NodeScope ns = new NodeScope(root);\n+    ns.setDeclared(globalScope.getVars());\n+    traversal.traverseRoots(root, ns);\n+    return node;\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}