{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // Square root using the Newton-Schulz method\n    RealMatrix x = m;\n    int n = m.getRowDimension();\n    double norm = x.getFrobeniusNorm();\n\n    while (true) {\n        RealMatrix y = x.scalarMultiply(0.5).add(m.scalarMultiply(0.5).multiply(x).multiply(x).inverse());\n        double delta = y.subtract(x).getFrobeniusNorm();\n        x = y;\n        if (delta < 1e-9 * norm) {\n            break;\n        }\n    }\n\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c846c2b97 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Square root using the Newton-Schulz method\n+    RealMatrix x = m;\n+    int n = m.getRowDimension();\n+    double norm = x.getFrobeniusNorm();\n+\n+    while (true) {\n+        RealMatrix y = x.scalarMultiply(0.5).add(m.scalarMultiply(0.5).multiply(x).multiply(x).inverse());\n+        double delta = y.subtract(x).getFrobeniusNorm();\n+        x = y;\n+        if (delta < 1e-9 * norm) {\n+            break;\n+        }\n     }\n+\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}