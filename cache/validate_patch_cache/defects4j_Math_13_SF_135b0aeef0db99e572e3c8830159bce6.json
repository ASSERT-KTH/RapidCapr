{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n    final RealMatrix sigma = dec.getS();\n    final RealMatrix sqrtSigma = MatrixUtils.createRealMatrix(sigma.getRowDimension(), sigma.getColumnDimension());\n    for (int i = 0; i < sigma.getRowDimension(); i++) {\n        for (int j = 0; j < sigma.getColumnDimension(); j++) {\n            sqrtSigma.setEntry(i, j, FastMath.sqrt(sigma.getEntry(i, j)));\n        }\n    }\n    final RealMatrix v = dec.getV();\n    final RealMatrix vT = v.transpose();\n    return v.multiply(sqrtSigma).multiply(vT);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..55afa8c91 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+    final RealMatrix sigma = dec.getS();\n+    final RealMatrix sqrtSigma = MatrixUtils.createRealMatrix(sigma.getRowDimension(), sigma.getColumnDimension());\n+    for (int i = 0; i < sigma.getRowDimension(); i++) {\n+        for (int j = 0; j < sigma.getColumnDimension(); j++) {\n+            sqrtSigma.setEntry(i, j, FastMath.sqrt(sigma.getEntry(i, j)));\n+        }\n     }\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vT = v.transpose();\n+    return v.multiply(sqrtSigma).multiply(vT);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}