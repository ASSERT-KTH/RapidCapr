{
    "patch": "public List<Integer> removeDuplicates(List<Integer> inputList) {\n    List<Integer> outputList = new ArrayList<Integer>();\n    Set<Integer> uniqueSet = new HashSet<Integer>();\n\n    for (Integer element : inputList) {\n        if (!uniqueSet.contains(element)) {\n            uniqueSet.add(element);\n            outputList.add(element);\n        }\n    }\n\n    return outputList;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..fbfdd0909 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public List<Integer> removeDuplicates(List<Integer> inputList) {\n+    List<Integer> outputList = new ArrayList<Integer>();\n+    Set<Integer> uniqueSet = new HashSet<Integer>();\n+\n+    for (Integer element : inputList) {\n+        if (!uniqueSet.contains(element)) {\n+            uniqueSet.add(element);\n+            outputList.add(element);\n+        }\n+    }\n+\n+    return outputList;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}