{
    "patch": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild()\n                && parent.getChildCount() == 2\n                && n.getNext().isName()\n                && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n\n      // Check for private fields which may be unused but legal and useful in closures.\n      if (n.isGetProp()\n              && n.getLastChild() != null\n              && n.getLastChild().getString().startsWith(\"_\")) {\n        return;\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR\n              && parent.getChildCount() == 4\n              && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n        /* no-op */\n      } else {\n        return;\n      }\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    boolean isFunctionExpression = NodeUtil.isFunctionExpression(n);\n    boolean isPossiblyPrivate = isFunctionExpression && n.getFirstChild() != null && n.getFirstChild().getNext() != null\n            && n.getFirstChild().getNext().isString() && n.getFirstChild().getNext().getString() != null\n            && n.getFirstChild().getNext().getString().startsWith(\"_\");\n    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) && !isPossiblyPrivate) {\n      if (n.isSideEffectOrderingAllowed() && NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        return;\n      }\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n      } else if (n.isExprResult()) {\n        return;\n      } else if (n.isFunction()) {\n        // Only complain about unused functions if they contain a JSDoc annotation such as a @param\n        // tag. This is to allow for unused private methods to exist in the code without generating\n        // errors.\n        JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n        if (info != null && !info.getParameterNames().isEmpty()) {\n          return;\n        }\n      }\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..1d63884e 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -86,8 +86,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+    if (n.isEmpty() || n.isComma()) {\n       return;\n     }\n \n@@ -101,40 +100,52 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     if (parent.getType() == Token.COMMA) {\n       Node gramps = parent.getParent();\n       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+        if (n == parent.getFirstChild()\n+                && parent.getChildCount() == 2\n+                && n.getNext().isName()\n+                && \"eval\".equals(n.getNext().getString())) {\n+          return;\n         }\n-    }\n+      }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n+      // Check for private fields which may be unused but legal and useful in closures.\n+      if (n.isGetProp()\n+              && n.getLastChild() != null\n+              && n.getLastChild().getString().startsWith(\"_\")) {\n+        return;\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n+      if (parent.getType() == Token.FOR\n+              && parent.getChildCount() == 4\n+              && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n+        /* no-op */\n       } else {\n-      return;\n+        return;\n       }\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    boolean isFunctionExpression = NodeUtil.isFunctionExpression(n);\n+    boolean isPossiblyPrivate = isFunctionExpression && n.getFirstChild() != null && n.getFirstChild().getNext() != null\n+            && n.getFirstChild().getNext().isString() && n.getFirstChild().getNext().getString() != null\n+            && n.getFirstChild().getNext().getString().startsWith(\"_\");\n+    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) && !isPossiblyPrivate) {\n+      if (n.isSideEffectOrderingAllowed() && NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+        return;\n+      }\n       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n         return;\n       } else if (n.isExprResult()) {\n         return;\n+      } else if (n.isFunction()) {\n+        // Only complain about unused functions if they contain a JSDoc annotation such as a @param\n+        // tag. This is to allow for unused private methods to exist in the code without generating\n+        // errors.\n+        JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+        if (info != null && !info.getParameterNames().isEmpty()) {\n+          return;\n+        }\n       }\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n@@ -144,8 +155,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n             \"' operator is not being used.\";\n       }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}