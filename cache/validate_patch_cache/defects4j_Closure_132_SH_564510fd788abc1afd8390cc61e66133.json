{
    "patch": "    /* TODO(dcc) We must also be careful about empty statements here,\n     * since side-effects are not evaluated for them.\n     * Inlining the LHS when the RHS may have side-effects means\n     * the LHS gets evaluated twice (e.g. \"a = a++\") instead of once.\n     */\n    if (!NodeUtil.mayHaveSideEffects(cond) &&\n        (!mayEffectMutableState(lhs) || mayHaveSideEffects(thenOp))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..e4ee2932 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+    /* TODO(dcc) We must also be careful about empty statements here,\n+     * since side-effects are not evaluated for them.\n+     * Inlining the LHS when the RHS may have side-effects means\n+     * the LHS gets evaluated twice (e.g. \"a = a++\") instead of once.\n+     */\n+    if (!NodeUtil.mayHaveSideEffects(cond) &&\n+        (!mayEffectMutableState(lhs) || mayHaveSideEffects(thenOp))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}