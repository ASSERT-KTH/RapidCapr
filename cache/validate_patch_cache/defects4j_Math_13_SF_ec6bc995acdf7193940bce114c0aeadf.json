{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final DecompositionSolver solver = new CholeskyDecomposition(m).getSolver();\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n    \n    for (int i = 0; i < n; i++) {\n        RealVector e = identity.getColumnVector(i);\n        RealVector sqrtCol = solver.solve(e);\n        sqrt.setColumnVector(i, sqrtCol);\n    }\n    \n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ce34c17b3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final DecompositionSolver solver = new CholeskyDecomposition(m).getSolver();\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+    \n+    for (int i = 0; i < n; i++) {\n+        RealVector e = identity.getColumnVector(i);\n+        RealVector sqrtCol = solver.solve(e);\n+        sqrt.setColumnVector(i, sqrtCol);\n     }\n+    \n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}