{
    "patch": "@Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n   if (n == scope.getRootNode()) return;\n\n   attachLiteralTypes(n);\n   switch (n.getType()) {\n     case Token.FUNCTION:\n       if (NodeUtil.isFunctionExpression(n)) {\n         defineDeclaredFunction(n, parent);\n       } else if (NodeUtil.isFunctionDeclaration(n)) {\n         declareVar(n.getFirstChild(), true);\n         defineFunctionLiteral(n);\n       }\n       break;\n     case Token.CATCH:\n       defineCatch(n, parent);\n       break;\n     case Token.VAR:\n       defineVar(n, parent);\n       break;\n     case Token.LP:\n       if (parent == scope.getRootNode() || NodeUtil.isExpressionAssign(parent.getParent())) {\n         handleFunctionInputs(n.getParent());\n       }\n       break;\n     default:\n       break;\n   }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2d7b0512 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,35 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+@Override\n+ public void visit(NodeTraversal t, Node n, Node parent) {\n+   if (n == scope.getRootNode()) return;\n+\n+   attachLiteralTypes(n);\n+   switch (n.getType()) {\n+     case Token.FUNCTION:\n+       if (NodeUtil.isFunctionExpression(n)) {\n+         defineDeclaredFunction(n, parent);\n+       } else if (NodeUtil.isFunctionDeclaration(n)) {\n+         declareVar(n.getFirstChild(), true);\n+         defineFunctionLiteral(n);\n+       }\n+       break;\n+     case Token.CATCH:\n+       defineCatch(n, parent);\n+       break;\n+     case Token.VAR:\n+       defineVar(n, parent);\n+       break;\n+     case Token.LP:\n+       if (parent == scope.getRootNode() || NodeUtil.isExpressionAssign(parent.getParent())) {\n+         handleFunctionInputs(n.getParent());\n+       }\n+       break;\n+     default:\n+       break;\n+   }\n+ }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}