{
    "patch": "if (n.getType() != Token.CALL &&\n        n.getType() != Token.NEW &&\n        n.getType() != Token.OBJECTLIT &&\n        n.getType() != Token.ARRAYLIT &&\n        n.getType() != Token.REGEXP &&\n        n.getType() != Token.CLASS) {\n      return false;\n    }\n\n    Node parent = n.getParent();\n    if (parent.getType() != Token.EXPR_RESULT &&\n        parent.getType() != Token.VAR &&\n        (parent.getType() != Token.BLOCK || parent.getParent().getType() != Token.FUNCTION)) {\n      return false;\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..6e33a291 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,22 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (n.getType() != Token.CALL &&\n+        n.getType() != Token.NEW &&\n+        n.getType() != Token.OBJECTLIT &&\n+        n.getType() != Token.ARRAYLIT &&\n+        n.getType() != Token.REGEXP &&\n+        n.getType() != Token.CLASS) {\n+      return false;\n+    }\n+\n+    Node parent = n.getParent();\n+    if (parent.getType() != Token.EXPR_RESULT &&\n+        parent.getType() != Token.VAR &&\n+        (parent.getType() != Token.BLOCK || parent.getParent().getType() != Token.FUNCTION)) {\n+      return false;\n+    }\n+    return true;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}