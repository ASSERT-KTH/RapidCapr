{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == t.getScopeRoot()) {\n        return;\n    }\n\n    if (n.isFunction()) {\n        if (parent.isScript()) {\n            defineGlobalFunction(n);\n            return;\n        }\n\n        if (parent.isName() || parent.isAssign()) {\n            return;\n        }\n\n        defineDeclaredFunction(n, parent);\n        return;\n    }\n\n    if (n.isCatch()) {\n        defineCatch(n);\n        return;\n    }\n\n    if (n.isBlock()) {\n        defineBlockVars(n);\n        return;\n    }\n\n    if (n.isLabel()) {\n        defineLabelVars(n.getFirstChild());\n        return;\n    }\n\n    if (n.isName()) {\n        defineVar(n, parent);\n        return;\n    }\n\n    if (n.isAssign() && n.getFirstChild().isName()) {\n        Node var = n.getFirstChild();\n        var.putBooleanProp(Node.IS_NAMESPACE, parent.isGetProp() && n == parent.getLastChild());\n        defineVar(var, parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1d6bdabc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,56 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == t.getScopeRoot()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    if (n.isFunction()) {\n+        if (parent.isScript()) {\n+            defineGlobalFunction(n);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        if (parent.isName() || parent.isAssign()) {\n+            return;\n+        }\n+\n+        defineDeclaredFunction(n, parent);\n+        return;\n+    }\n+\n+    if (n.isCatch()) {\n+        defineCatch(n);\n+        return;\n     }\n \n+    if (n.isBlock()) {\n+        defineBlockVars(n);\n+        return;\n+    }\n+\n+    if (n.isLabel()) {\n+        defineLabelVars(n.getFirstChild());\n+        return;\n+    }\n+\n+    if (n.isName()) {\n+        defineVar(n, parent);\n+        return;\n+    }\n+\n+    if (n.isAssign() && n.getFirstChild().isName()) {\n+        Node var = n.getFirstChild();\n+        var.putBooleanProp(Node.IS_NAMESPACE, parent.isGetProp() && n == parent.getLastChild());\n+        defineVar(var, parent);\n+        return;\n+    }\n+\n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}