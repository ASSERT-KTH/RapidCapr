{
    "patch": "public String getprop(String prop) throws Exception {\n    String command = \"getprop \" + prop;\n    Process proc = Runtime.getRuntime().exec(new String[] { \"/system/bin/sh\", \"-c\", command });\n    proc.waitFor();\n    InputStream inputStream = proc.getInputStream();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    String line = bufferedReader.readLine();\n    if (line != null && line.length() > 0) {\n        return line;\n    } else {\n        String[] errors = new String[0];\n        InputStream errorStream = proc.getErrorStream();\n        InputStreamReader errorStreamReader = new InputStreamReader(errorStream);\n        BufferedReader errorBufferedReader = new BufferedReader(errorStreamReader);\n        String errorLine = errorBufferedReader.readLine();\n        while (errorLine != null && errorLine.length() > 0) {\n            errors[errors.length] = errorLine;\n            errorLine = errorBufferedReader.readLine();\n        }\n        throw new Exception(\"Could not get prop: \" + prop + \". Errors: \" + Arrays.toString(errors));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b3e7cebc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String prop) throws Exception {\n+    String command = \"getprop \" + prop;\n+    Process proc = Runtime.getRuntime().exec(new String[] { \"/system/bin/sh\", \"-c\", command });\n+    proc.waitFor();\n+    InputStream inputStream = proc.getInputStream();\n+    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+    String line = bufferedReader.readLine();\n+    if (line != null && line.length() > 0) {\n+        return line;\n+    } else {\n+        String[] errors = new String[0];\n+        InputStream errorStream = proc.getErrorStream();\n+        InputStreamReader errorStreamReader = new InputStreamReader(errorStream);\n+        BufferedReader errorBufferedReader = new BufferedReader(errorStreamReader);\n+        String errorLine = errorBufferedReader.readLine();\n+        while (errorLine != null && errorLine.length() > 0) {\n+            errors[errors.length] = errorLine;\n+            errorLine = errorBufferedReader.readLine();\n+        }\n+        throw new Exception(\"Could not get prop: \" + prop + \". Errors: \" + Arrays.toString(errors));\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}