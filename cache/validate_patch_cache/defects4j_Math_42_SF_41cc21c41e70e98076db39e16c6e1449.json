{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Arrays.fill(coefficients, -Double.MAX_VALUE);\n\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n        continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        if (basicRow == null) {\n        coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n        } else {\n        final boolean newEntryInSolution = basicRows.add(basicRow);\n        double value = 0 - (restrictToNonNegative ? 0 : mostNegative);\n        final double ratio = getEntry(basicRow, this.getRhsOffset()) /\n            getEntry(basicRow, colIndex);\n        if (newEntryInSolution || Precision.compareTo(value, 0d, epsilon) == 0 ||\n            Precision.compareTo(ratio, 0d, epsilon) >= 0 && Precision.compareTo(value, getEntry(basicRow, this.getRhsOffset()), epsilon) < 0) {\n            value = getEntry(basicRow, this.getRhsOffset()) / getEntry(basicRow, colIndex);\n        }\n        coefficients[i] = value;\n        }\n    }\n\n    // If the optimal solution contains an unconstrained negative variable, the value should be negative infinity.\n    if (negativeVarBasicRow != null) {\n        double rhsValue = getEntry(negativeVarBasicRow, getRhsOffset());\n        if (rhsValue < 0) {\n        for (int i = 0; i < coefficients.length; i++) {\n            if (columnLabels.indexOf(\"x\" + i) == negativeVarColumn) {\n            coefficients[i] = Double.NEGATIVE_INFINITY;\n            break;\n            }\n        }\n        }\n    }\n\n    for (int j = 0; j < coefficients.length; j++) {\n        if (coefficients[j] == -Double.MAX_VALUE) {\n        coefficients[j] = restrictToNonNegative ? 0d : -mostNegative;\n        }\n    }\n\n    // Return the optimal point and its objective function value.\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..d8ceff985 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,37 +393,59 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n-            continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n-      }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n+    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+\n+    Set<Integer> basicRows = new HashSet<Integer>();\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    Arrays.fill(coefficients, -Double.MAX_VALUE);\n+\n+    for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) {\n+        continue;\n+        }\n+        Integer basicRow = getBasicRow(colIndex);\n+        if (basicRow == null) {\n+        coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+        } else {\n+        final boolean newEntryInSolution = basicRows.add(basicRow);\n+        double value = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+        final double ratio = getEntry(basicRow, this.getRhsOffset()) /\n+            getEntry(basicRow, colIndex);\n+        if (newEntryInSolution || Precision.compareTo(value, 0d, epsilon) == 0 ||\n+            Precision.compareTo(ratio, 0d, epsilon) >= 0 && Precision.compareTo(value, getEntry(basicRow, this.getRhsOffset()), epsilon) < 0) {\n+            value = getEntry(basicRow, this.getRhsOffset()) / getEntry(basicRow, colIndex);\n+        }\n+        coefficients[i] = value;\n+        }\n+    }\n+\n+    // If the optimal solution contains an unconstrained negative variable, the value should be negative infinity.\n+    if (negativeVarBasicRow != null) {\n+        double rhsValue = getEntry(negativeVarBasicRow, getRhsOffset());\n+        if (rhsValue < 0) {\n+        for (int i = 0; i < coefficients.length; i++) {\n+            if (columnLabels.indexOf(\"x\" + i) == negativeVarColumn) {\n+            coefficients[i] = Double.NEGATIVE_INFINITY;\n+            break;\n+            }\n+        }\n+        }\n+    }\n+\n+    for (int j = 0; j < coefficients.length; j++) {\n+        if (coefficients[j] == -Double.MAX_VALUE) {\n+        coefficients[j] = restrictToNonNegative ? 0d : -mostNegative;\n+        }\n     }\n \n+    // Return the optimal point and its objective function value.\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}