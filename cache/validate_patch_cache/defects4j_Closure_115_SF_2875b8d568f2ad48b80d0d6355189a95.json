{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node paramsNode = NodeUtil.getFunctionParameters(fnNode);\n    if (paramsNode == null) {\n      // No parameters, so nothing to inline.\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    boolean hasSideEffects = false;\n\n    if (block.hasChildren()) {\n      Node functionStatement = block.getFirstChild();\n      Preconditions.checkState(functionStatement.isBlock() && functionStatement.hasChildren());\n      Node functionReturn = functionStatement.getLastChild();\n      hasSideEffects = !functionReturn.isReturn();\n    }\n\n    Node argNode = callNode.getFirstChild().getNext();\n    Node paramNode = paramsNode.getFirstChild();\n\n    while (argNode != null && paramNode != null) {\n      boolean isThisNode = argNode.isThis();\n      boolean isFunctionCall = NodeUtil.isFunctionObjectCall(callNode);\n      boolean isNonStrictFunction = NodeUtil.isNonArrowFunction(fnNode)\n          && !fnNode.getBooleanProp(Node.FUNCTION_EXPRESSION);\n\n      if (isFunctionCall && isThisNode && (isNonStrictFunction\n              || !NodeUtil.isSimpleFunction(fnNode))) {\n        // `this` is unavoidably leaked to the function objective, so skip over this function only.\n        // We also skip simple functions since they won't be trying to read `this`.\n        // If we removed this block and let `this` be passed as the first argument,\n        // it would be removed during inlining instead and cause unexpected results.\n        // See https://github.com/google/closure-compiler/issues/3138.\n        argNode = argNode.getNext();\n        continue;\n      }\n\n      // Arguments with side-effects can't be inlined.\n      if (paramNode.isName() && NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      // Parameters that are evaluated more than once or have side-effects can't be inlined.\n      if (paramNode.isName()\n          && (NodeUtil.getNameReferenceCount(block, paramNode.getString()) > 1\n              || NodeUtil.mayHaveSideEffects(paramNode, compiler))) {\n        return CanInlineResult.NO;\n      }\n\n      // Move to the next argument and parameter.\n      argNode = argNode.getNext();\n      paramNode = paramNode.getNext();\n    }\n\n    // There are too many or too few arguments for the function call.\n    if (argNode != null || paramNode != null) {\n      return CanInlineResult.NO;\n    }\n\n    // If the function has side-effects and return value isn't used, don't inline.\n    if (hasSideEffects && !NodeUtil.mayHaveSideEffects(callNode.getParent())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..60d08dca 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,72 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node paramsNode = NodeUtil.getFunctionParameters(fnNode);\n+    if (paramsNode == null) {\n+      // No parameters, so nothing to inline.\n+      return CanInlineResult.NO;\n+    }\n \n+    Node block = fnNode.getLastChild();\n     boolean hasSideEffects = false;\n+\n     if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+      Node functionStatement = block.getFirstChild();\n+      Preconditions.checkState(functionStatement.isBlock() && functionStatement.hasChildren());\n+      Node functionReturn = functionStatement.getLastChild();\n+      hasSideEffects = !functionReturn.isReturn();\n+    }\n+\n+    Node argNode = callNode.getFirstChild().getNext();\n+    Node paramNode = paramsNode.getFirstChild();\n+\n+    while (argNode != null && paramNode != null) {\n+      boolean isThisNode = argNode.isThis();\n+      boolean isFunctionCall = NodeUtil.isFunctionObjectCall(callNode);\n+      boolean isNonStrictFunction = NodeUtil.isNonArrowFunction(fnNode)\n+          && !fnNode.getBooleanProp(Node.FUNCTION_EXPRESSION);\n+\n+      if (isFunctionCall && isThisNode && (isNonStrictFunction\n+              || !NodeUtil.isSimpleFunction(fnNode))) {\n+        // `this` is unavoidably leaked to the function objective, so skip over this function only.\n+        // We also skip simple functions since they won't be trying to read `this`.\n+        // If we removed this block and let `this` be passed as the first argument,\n+        // it would be removed during inlining instead and cause unexpected results.\n+        // See https://github.com/google/closure-compiler/issues/3138.\n+        argNode = argNode.getNext();\n+        continue;\n       }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      // Arguments with side-effects can't be inlined.\n+      if (paramNode.isName() && NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+        return CanInlineResult.NO;\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      // Parameters that are evaluated more than once or have side-effects can't be inlined.\n+      if (paramNode.isName()\n+          && (NodeUtil.getNameReferenceCount(block, paramNode.getString()) > 1\n+              || NodeUtil.mayHaveSideEffects(paramNode, compiler))) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+      // Move to the next argument and parameter.\n+      argNode = argNode.getNext();\n+      paramNode = paramNode.getNext();\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    // There are too many or too few arguments for the function call.\n+    if (argNode != null || paramNode != null) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // If the function has side-effects and return value isn't used, don't inline.\n+    if (hasSideEffects && !NodeUtil.mayHaveSideEffects(callNode.getParent())) {\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}