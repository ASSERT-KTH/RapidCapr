{
    "patch": "        // Maybe STRING, GET, SET\n        switch (child.getToken()) {\n          case STRING:\n            break;\n          case GETPROP:\n            if (child.getLastChild().getString().equals(\"prototype\")) {\n              registerPrototypeProperty(child.getFirstChild().getString());\n            }\n            break;\n          case GETELEM:\n            break;\n          case SETPROP:\n            break;\n          case NAME:\n            if (child.getString().equals(\"get\") || child.getString().equals(\"set\")) {\n              break;\n            }\n            // Else fall through...\n          default:\n            // We don't support anything else yet.  See the type\n            // function in jsdev.js.\n            compiler.throwInternalError(\"Unhandled node type\");\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..c97bd307 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,29 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        // Maybe STRING, GET, SET\n+        switch (child.getToken()) {\n+          case STRING:\n+            break;\n+          case GETPROP:\n+            if (child.getLastChild().getString().equals(\"prototype\")) {\n+              registerPrototypeProperty(child.getFirstChild().getString());\n+            }\n+            break;\n+          case GETELEM:\n+            break;\n+          case SETPROP:\n+            break;\n+          case NAME:\n+            if (child.getString().equals(\"get\") || child.getString().equals(\"set\")) {\n+              break;\n+            }\n+            // Else fall through...\n+          default:\n+            // We don't support anything else yet.  See the type\n+            // function in jsdev.js.\n+            compiler.throwInternalError(\"Unhandled node type\");\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}