{
    "patch": "import org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getColumnDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix ev = dec.getV();\n    final RealMatrix evT = ev.transpose();\n    final RealMatrix sqrtLambda = ev.scalarMultiply(1.0 / Math.sqrt(dec.getRealEigenvalues()[0]));\n    final RealMatrix sqrtM = ev.multiply(sqrtLambda).multiply(evT);\n    final double eps = 1e-15;\n    RealMatrix sqrtPrev = null;\n    RealMatrix sqrtNext = sqrtM;\n    while (sqrtPrev == null || sqrtNext.subtract(sqrtPrev).getNorm() > eps) {\n        sqrtPrev = sqrtNext;\n        sqrtNext = (sqrtPrev.multiply(sqrtM).add(m)).scalarMultiply(0.5 / sqrtPrev.getNorm());\n    }\n    return sqrtNext;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0c47e3d0f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+public RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getColumnDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix ev = dec.getV();\n+    final RealMatrix evT = ev.transpose();\n+    final RealMatrix sqrtLambda = ev.scalarMultiply(1.0 / Math.sqrt(dec.getRealEigenvalues()[0]));\n+    final RealMatrix sqrtM = ev.multiply(sqrtLambda).multiply(evT);\n+    final double eps = 1e-15;\n+    RealMatrix sqrtPrev = null;\n+    RealMatrix sqrtNext = sqrtM;\n+    while (sqrtPrev == null || sqrtNext.subtract(sqrtPrev).getNorm() > eps) {\n+        sqrtPrev = sqrtNext;\n+        sqrtNext = (sqrtPrev.multiply(sqrtM).add(m)).scalarMultiply(0.5 / sqrtPrev.getNorm());\n     }\n+    return sqrtNext;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}