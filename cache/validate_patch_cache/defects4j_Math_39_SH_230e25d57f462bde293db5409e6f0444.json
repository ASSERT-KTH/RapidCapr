{
    "patch": "stepSize = hNew;\n// if step goes beyond final time, reduce it\nif (forward && stepStart + stepSize > t) {\n    stepSize = t - stepStart;\n} else if (!forward && stepStart + stepSize < t) {\n    stepSize = t - stepStart;\n} else if (Math.abs(stepStart + stepSize - t) < 1e-12) {\n    // fix floating point comparisons\n    stepSize = t - stepStart;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..a9ffd1a40 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,16 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+stepSize = hNew;\n+// if step goes beyond final time, reduce it\n+if (forward && stepStart + stepSize > t) {\n+    stepSize = t - stepStart;\n+} else if (!forward && stepStart + stepSize < t) {\n+    stepSize = t - stepStart;\n+} else if (Math.abs(stepStart + stepSize - t) < 1e-12) {\n+    // fix floating point comparisons\n+    stepSize = t - stepStart;\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}