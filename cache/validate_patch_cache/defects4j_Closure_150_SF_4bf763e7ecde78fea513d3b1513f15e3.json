{
    "patch": "  private void defineDeclaredFunction(Node functionNode, Node parent) {\n    Node functionNameNode = functionNode.getFirstChild();\n    String functionName = functionNameNode.getString();\n    FunctionType functionType = new FunctionType.Builder(registry)\n        .withSourceLocation(\n            getFullSourceName(), functionNameNode.getLineno(), functionNameNode.getCharno())\n        .withScope(scope)\n        .buildForFunctionDeclaration();\n\n    attachLiteralTypes(functionNode.getLastChild());\n\n    Node name = IR.name(functionName).srcref(functionNode);\n    Node replacement = IR.var(name, functionNode.getLastChild())\n        .setJSDocInfo(functionNode.getJSDocInfo())\n        .srcref(functionNode);\n\n    // Set the scope for the function name\n    Node functionScope = parent.getParent();\n    Node statementNode = parent;\n    while ((functionScope != null) && (functionScope != scope.getRootNode())) {\n      statementNode = functionScope;\n      functionScope = functionScope.getParent();\n    }\n    if (functionScope == null) {\n      throw new IllegalStateException(\"Unable to find function scope for function: \" + functionName);\n    }\n    if (statementNode == null) {\n      throw new IllegalStateException(\"Unable to find statement node for function: \" + functionName);\n    }\n    statementNode.getParent().addChildAfter(replacement, statementNode);\n    parent.detachFromParent();\n\n\n    registerTypes(name, functionType);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a08cf6d5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,41 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+  private void defineDeclaredFunction(Node functionNode, Node parent) {\n+    Node functionNameNode = functionNode.getFirstChild();\n+    String functionName = functionNameNode.getString();\n+    FunctionType functionType = new FunctionType.Builder(registry)\n+        .withSourceLocation(\n+            getFullSourceName(), functionNameNode.getLineno(), functionNameNode.getCharno())\n+        .withScope(scope)\n+        .buildForFunctionDeclaration();\n+\n+    attachLiteralTypes(functionNode.getLastChild());\n+\n+    Node name = IR.name(functionName).srcref(functionNode);\n+    Node replacement = IR.var(name, functionNode.getLastChild())\n+        .setJSDocInfo(functionNode.getJSDocInfo())\n+        .srcref(functionNode);\n+\n+    // Set the scope for the function name\n+    Node functionScope = parent.getParent();\n+    Node statementNode = parent;\n+    while ((functionScope != null) && (functionScope != scope.getRootNode())) {\n+      statementNode = functionScope;\n+      functionScope = functionScope.getParent();\n+    }\n+    if (functionScope == null) {\n+      throw new IllegalStateException(\"Unable to find function scope for function: \" + functionName);\n+    }\n+    if (statementNode == null) {\n+      throw new IllegalStateException(\"Unable to find statement node for function: \" + functionName);\n+    }\n+    statementNode.getParent().addChildAfter(replacement, statementNode);\n+    parent.detachFromParent();\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+    registerTypes(name, functionType);\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: defineDeclaredFunction(Node,Node) in TypedScopeCreator.LocalScopeBuilder cannot override defineDeclaredFunction(Node,Node) in TypedScopeCreator.AbstractScopeBuilder",
    "test_result": "ERROR"
}