{
    "patch": "import com.google.common.base.Preconditions;\n\nclass Reference {\n  private final BasicBlock basicBlock;\n  private final Variable variable;\n  private final Node node;\n\n  Reference(BasicBlock basicBlock, Variable variable, Node node) {\n    this.basicBlock = basicBlock;\n    this.variable = variable;\n    this.node = node;\n  }\n\n  /**\n   * @return Whether this is a declaration of a var or let binding.\n   */\n  boolean isVarDeclaration() {\n    return node.getFirstChild().isName()\n        && \"VAR\".equals(node.getFirstChild().getString())\n        || node.getFirstChild().isName()\n        && \"LET\".equals(node.getFirstChild().getString());\n  }\n\n  /**\n   * @return Whether this is a const declaration.\n   */\n  boolean isConstDeclaration() {\n    return node != null && node.isName() && \"const\".equals(node.getString());\n  }\n\n  /**\n   * @return Whether this is the declaration or initialization (assignment)\n   *         of the var/let/const.\n   */\n  boolean isDeclarationOrSimpleAssignment() {\n    return isVarDeclaration() || isConstDeclaration() || isSimpleAssignmentToName();\n  }\n\n  /**\n   * @return Whether this references a binding that was initialized with its\n   *         declaration.\n   */\n  boolean isInitializingDeclaration() {\n    if (isVarDeclaration() || isConstDeclaration()) {\n      Node rhs = node.getFirstChild().getNext();\n      return !rhs.hasChildren();\n    }\n    return false;\n  }\n\n  /**\n   * @return Whether the reference is to a simple assignment to a name\n   * (e.g. 'x = ...;').\n   */\n  boolean isSimpleAssignmentToName() {\n    if (node == null || !node.isAssign()) {\n      return false;\n    }\n    Node lhs = node.getFirstChild();\n    if (!lhs.isName()) {\n      return false;\n    }\n    Node parent = node.getParent();\n    if (parent == null) {\n      return false;\n    }\n    Node gramps = parent.getParent();\n    return gramps != null && gramps.isBlock() && gramps.getFirstChild() == parent;\n  }\n\n  private boolean isInitializingAssignmentAt(int index) {\n    int size = references.size();\n    if (index >=1 && index < size) {\n      Reference maybeDecl = references.get(index - 1);\n      if (maybeDecl.isVarDeclaration()) {\n        Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n        Reference maybeInit = references.get(index);\n        if (maybeInit.isSimpleAssignmentToName()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return The reference that provides the value for the variable at the\n   * time of the first read, if known, otherwise null.\n   *\n   * This is either the variable declaration (\"var a = ...\") or first\n   * reference following the declaration if it is an assignment.\n   */\n  Reference getInitializingReference() {\n    if (isInitializingDeclarationAt(0)) {\n      return references.get(0);\n    } else if (isInitializingAssignmentAt(1)) {\n      return references.get(1);\n    }\n    return null;\n  }\n\n  /**\n   * Constants are allowed to be defined after their first use.\n   */\n  Reference getInitializingReferenceForConstants() {\n    int size = references.size();\n    for (int i = 0; i < size; i++) {\n      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n        return references.get(i);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return Whether the variable is only assigned a value once for its\n   * lifetime.\n   */\n  boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n      return false;\n    }\n\n    // Make sure this assignment is not in a loop.\n    for (BasicBlock block = ref.getBasicBlock();\n         block != null; block = block.getParent()) {\n      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f14a4c67 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,71 +371,144 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n-          }\n-        }\n-      }\n+import com.google.common.base.Preconditions;\n+\n+class Reference {\n+  private final BasicBlock basicBlock;\n+  private final Variable variable;\n+  private final Node node;\n+\n+  Reference(BasicBlock basicBlock, Variable variable, Node node) {\n+    this.basicBlock = basicBlock;\n+    this.variable = variable;\n+    this.node = node;\n+  }\n+\n+  /**\n+   * @return Whether this is a declaration of a var or let binding.\n+   */\n+  boolean isVarDeclaration() {\n+    return node.getFirstChild().isName()\n+        && \"VAR\".equals(node.getFirstChild().getString())\n+        || node.getFirstChild().isName()\n+        && \"LET\".equals(node.getFirstChild().getString());\n+  }\n+\n+  /**\n+   * @return Whether this is a const declaration.\n+   */\n+  boolean isConstDeclaration() {\n+    return node != null && node.isName() && \"const\".equals(node.getString());\n+  }\n+\n+  /**\n+   * @return Whether this is the declaration or initialization (assignment)\n+   *         of the var/let/const.\n+   */\n+  boolean isDeclarationOrSimpleAssignment() {\n+    return isVarDeclaration() || isConstDeclaration() || isSimpleAssignmentToName();\n+  }\n+\n+  /**\n+   * @return Whether this references a binding that was initialized with its\n+   *         declaration.\n+   */\n+  boolean isInitializingDeclaration() {\n+    if (isVarDeclaration() || isConstDeclaration()) {\n+      Node rhs = node.getFirstChild().getNext();\n+      return !rhs.hasChildren();\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * @return Whether the reference is to a simple assignment to a name\n+   * (e.g. 'x = ...;').\n+   */\n+  boolean isSimpleAssignmentToName() {\n+    if (node == null || !node.isAssign()) {\n+      return false;\n+    }\n+    Node lhs = node.getFirstChild();\n+    if (!lhs.isName()) {\n+      return false;\n+    }\n+    Node parent = node.getParent();\n+    if (parent == null) {\n       return false;\n     }\n+    Node gramps = parent.getParent();\n+    return gramps != null && gramps.isBlock() && gramps.getFirstChild() == parent;\n+  }\n \n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n-        return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n-        return references.get(1);\n+  private boolean isInitializingAssignmentAt(int index) {\n+    int size = references.size();\n+    if (index >=1 && index < size) {\n+      Reference maybeDecl = references.get(index - 1);\n+      if (maybeDecl.isVarDeclaration()) {\n+        Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n+        Reference maybeInit = references.get(index);\n+        if (maybeInit.isSimpleAssignmentToName()) {\n+          return true;\n+        }\n       }\n-      return null;\n     }\n+    return false;\n+  }\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n-        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n-        }\n+  /**\n+   * @return The reference that provides the value for the variable at the\n+   * time of the first read, if known, otherwise null.\n+   *\n+   * This is either the variable declaration (\"var a = ...\") or first\n+   * reference following the declaration if it is an assignment.\n+   */\n+  Reference getInitializingReference() {\n+    if (isInitializingDeclarationAt(0)) {\n+      return references.get(0);\n+    } else if (isInitializingAssignmentAt(1)) {\n+      return references.get(1);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Constants are allowed to be defined after their first use.\n+   */\n+  Reference getInitializingReferenceForConstants() {\n+    int size = references.size();\n+    for (int i = 0; i < size; i++) {\n+      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+        return references.get(i);\n       }\n-      return null;\n     }\n+    return null;\n+  }\n \n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n+  /**\n+   * @return Whether the variable is only assigned a value once for its\n+   * lifetime.\n+   */\n+  boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+      return false;\n+    }\n+\n+    // Make sure this assignment is not in a loop.\n+    for (BasicBlock block = ref.getBasicBlock();\n+         block != null; block = block.getParent()) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n         return false;\n       }\n+    }\n \n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n-        }\n-      }\n+    return true;\n+  }\n+}\n \n-      return true;\n-    }\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}