{
    "patch": "public static String escapeString(String unescaped) {\n    if (unescaped == null) {\n        return null;\n    }\n    StringBuilder escaped = new StringBuilder();\n    for (int i = 0; i < unescaped.length(); i++) {\n        char c = unescaped.charAt(i);\n        if (c <= 127 && \"\\\\\\\"/\\b\\f\\n\\r\\t\".indexOf(c) >= 0) {\n            escaped.append('\\\\');\n            switch (c) {\n                case '\\\"':\n                    escaped.append('\\\"');\n                    break;\n                case '\\\\':\n                    escaped.append('\\\\');\n                    break;\n                case '/':\n                    escaped.append('/');\n                    break;\n                case '\\b':\n                    escaped.append('b');\n                    break;\n                case '\\f':\n                    escaped.append('f');\n                    break;\n                case '\\n':\n                    escaped.append('n');\n                    break;\n                case '\\r':\n                    escaped.append('r');\n                    break;\n                case '\\t':\n                    escaped.append('t');\n                    break;\n            }\n        } else if (c <= 127) {\n            escaped.append(c);\n        } else if ((c >= '\\u0800' && c <= '\\u0FFF')\n                || (c >= '\\u2000' && c <= '\\u20FF')) {\n            escaped.append(\"\\\\u\");\n            escaped.append(String.format(\"%04X\", (int)c));\n        } else if (c >= '\\uD800' && c <= '\\uDFFF') {\n            if (c >= '\\uD800' && c <= '\\uDBFF' && i < unescaped.length() - 1) {\n                char d = unescaped.charAt(i + 1);\n                if (d >= '\\uDC00' && d <= '\\uDFFF') {\n                    i++;\n                    int codepoint = 0x010000 + ((int)c - 0xD800 << 10) + (d - 0xDC00);\n                    escaped.append(\"\\\\u\");\n                    escaped.append(String.format(\"%04X\", (codepoint >> 16) & 0xFFFF));\n                    escaped.append(\"\\\\u\");\n                    escaped.append(String.format(\"%04X\", codepoint & 0xFFFF));\n                }\n            }\n        } else {\n            escaped.append(c);\n        }\n    }\n    return escaped.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..8f21277b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,65 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeString(String unescaped) {\n+    if (unescaped == null) {\n+        return null;\n+    }\n+    StringBuilder escaped = new StringBuilder();\n+    for (int i = 0; i < unescaped.length(); i++) {\n+        char c = unescaped.charAt(i);\n+        if (c <= 127 && \"\\\\\\\"/\\b\\f\\n\\r\\t\".indexOf(c) >= 0) {\n+            escaped.append('\\\\');\n+            switch (c) {\n+                case '\\\"':\n+                    escaped.append('\\\"');\n+                    break;\n+                case '\\\\':\n+                    escaped.append('\\\\');\n+                    break;\n+                case '/':\n+                    escaped.append('/');\n+                    break;\n+                case '\\b':\n+                    escaped.append('b');\n+                    break;\n+                case '\\f':\n+                    escaped.append('f');\n+                    break;\n+                case '\\n':\n+                    escaped.append('n');\n+                    break;\n+                case '\\r':\n+                    escaped.append('r');\n+                    break;\n+                case '\\t':\n+                    escaped.append('t');\n+                    break;\n+            }\n+        } else if (c <= 127) {\n+            escaped.append(c);\n+        } else if ((c >= '\\u0800' && c <= '\\u0FFF')\n+                || (c >= '\\u2000' && c <= '\\u20FF')) {\n+            escaped.append(\"\\\\u\");\n+            escaped.append(String.format(\"%04X\", (int)c));\n+        } else if (c >= '\\uD800' && c <= '\\uDFFF') {\n+            if (c >= '\\uD800' && c <= '\\uDBFF' && i < unescaped.length() - 1) {\n+                char d = unescaped.charAt(i + 1);\n+                if (d >= '\\uDC00' && d <= '\\uDFFF') {\n+                    i++;\n+                    int codepoint = 0x010000 + ((int)c - 0xD800 << 10) + (d - 0xDC00);\n+                    escaped.append(\"\\\\u\");\n+                    escaped.append(String.format(\"%04X\", (codepoint >> 16) & 0xFFFF));\n+                    escaped.append(\"\\\\u\");\n+                    escaped.append(String.format(\"%04X\", codepoint & 0xFFFF));\n+                }\n+            }\n+        } else {\n+            escaped.append(c);\n+        }\n+    }\n+    return escaped.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}