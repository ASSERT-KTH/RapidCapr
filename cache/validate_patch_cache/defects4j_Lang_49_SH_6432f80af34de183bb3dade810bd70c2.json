{
    "patch": "public Fraction reduce() {\n    int num = numerator;\n    int denom = denominator;\n    if (num == 0) {\n        return Fraction.ZERO;\n    }\n    int sign = (num > 0 ? 1 : -1) * (denom > 0 ? 1 : -1);\n    num = Math.abs(num);\n    denom = Math.abs(denom);\n    int rem;\n    while (denom != 0) {\n        rem = num % denom;\n        num = denom;\n        denom = rem;\n    }\n    if (num == 1) {\n        return this;\n    }\n    return new Fraction(sign * numerator / num, denominator / num);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..882aeca2 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,26 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+    int num = numerator;\n+    int denom = denominator;\n+    if (num == 0) {\n+        return Fraction.ZERO;\n+    }\n+    int sign = (num > 0 ? 1 : -1) * (denom > 0 ? 1 : -1);\n+    num = Math.abs(num);\n+    denom = Math.abs(denom);\n+    int rem;\n+    while (denom != 0) {\n+        rem = num % denom;\n+        num = denom;\n+        denom = rem;\n+    }\n+    if (num == 1) {\n+        return this;\n+    }\n+    return new Fraction(sign * numerator / num, denominator / num);\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}