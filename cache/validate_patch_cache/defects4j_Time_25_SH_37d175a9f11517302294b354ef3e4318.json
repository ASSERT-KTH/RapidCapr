{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n                // We need to ensure that we are not in a gap and the gap has caused the mismatch\n                if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n                    return offsetAdjusted;\n                }\n\n                if (nextLocal != nextAdjusted) {\n                    // if we want to preserve local time, we need to transition\n                    // at or after instantLocal\n                    if (nextLocal > instantLocal - offsetAdjusted) {\n                        return offsetLocal;\n                    }\n                    return offsetAdjusted;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..44f2c6fb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+                // We need to ensure that we are not in a gap and the gap has caused the mismatch\n+                if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+\n+                if (nextLocal != nextAdjusted) {\n+                    // if we want to preserve local time, we need to transition\n+                    // at or after instantLocal\n+                    if (nextLocal > instantLocal - offsetAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    return offsetAdjusted;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}