{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // extract the values\n            int[] chronoValues = new int[8];  // an array of size 8\n            DateTimeField[] fields = new DateTimeField[8];  // an array of size 8\n            int i = 0;\n            for (int iField = 0, nFields = partial.size(); iField < nFields; ++iField) {\n                DateTimeField field = partial.getFieldType(iField).getField(iChronology);\n                if (field.getDurationField().getType() == DurationFieldType.months()) {\n                    int value = values[iField] + valueToAdd;\n                    int year = partial.get(DateTimeFieldType.year());\n                    int month = partial.get(DateTimeFieldType.monthOfYear());\n                    int day = Math.min(value, iChronology.getDaysInMonthMax(month, year));\n                    Object newPartial = new MonthDay(month, day);\n                    return iChronology.get(newPartial, 0l);\n                } else {\n                    chronoValues[i] = values[iField];\n                    fields[i] = field;\n                    ++i;\n                }\n            }\n            // add the value to the values array\n            long instant = iChronology.getDateTimeMillis(chronoValues[0], chronoValues[1], chronoValues[2], chronoValues[3],\n                    chronoValues[4], chronoValues[5], chronoValues[6]) + valueToAdd * fields[0].getUnitMillis();\n            // convert the instant to fields and return it\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..81da2322 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            // extract the values\n+            int[] chronoValues = new int[8];  // an array of size 8\n+            DateTimeField[] fields = new DateTimeField[8];  // an array of size 8\n+            int i = 0;\n+            for (int iField = 0, nFields = partial.size(); iField < nFields; ++iField) {\n+                DateTimeField field = partial.getFieldType(iField).getField(iChronology);\n+                if (field.getDurationField().getType() == DurationFieldType.months()) {\n+                    int value = values[iField] + valueToAdd;\n+                    int year = partial.get(DateTimeFieldType.year());\n+                    int month = partial.get(DateTimeFieldType.monthOfYear());\n+                    int day = Math.min(value, iChronology.getDaysInMonthMax(month, year));\n+                    Object newPartial = new MonthDay(month, day);\n+                    return iChronology.get(newPartial, 0l);\n+                } else {\n+                    chronoValues[i] = values[iField];\n+                    fields[i] = field;\n+                    ++i;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n+            // add the value to the values array\n+            long instant = iChronology.getDateTimeMillis(chronoValues[0], chronoValues[1], chronoValues[2], chronoValues[3],\n+                    chronoValues[4], chronoValues[5], chronoValues[6]) + valueToAdd * fields[0].getUnitMillis();\n+            // convert the instant to fields and return it\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}