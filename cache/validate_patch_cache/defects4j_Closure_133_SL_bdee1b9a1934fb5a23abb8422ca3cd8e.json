{
    "patch": " private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n\n    while (result != null && !result.isEmpty() && result.charAt(0) == '*') {\n        result = stream.getRemainingJSDocLine();\n    }\n\n    if(result == null || result.isEmpty()) return null;\n    result = result.trim();\n\n    if (result.startsWith(\"@\")) {\n        try {\n            String currentLine = result;\n            while (stream.hasMoreLines()) {\n                String nextLine = stream.peekJSDocLine();\n                if (nextLine == null || nextLine.isEmpty()) break;\n                if (nextLine.startsWith(\"@\")) {\n                    currentLine += nextLine.substring(1).trim();\n                    stream.getNextJSDocLine();\n                } else {\n                    break;\n                }\n            }\n            result = currentLine;\n        } catch (IOException e) {\n            return null; // fallback to original line\n        }\n    }\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..2f4b2433 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,36 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+ private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+\n+    while (result != null && !result.isEmpty() && result.charAt(0) == '*') {\n+        result = stream.getRemainingJSDocLine();\n+    }\n+\n+    if(result == null || result.isEmpty()) return null;\n+    result = result.trim();\n+\n+    if (result.startsWith(\"@\")) {\n+        try {\n+            String currentLine = result;\n+            while (stream.hasMoreLines()) {\n+                String nextLine = stream.peekJSDocLine();\n+                if (nextLine == null || nextLine.isEmpty()) break;\n+                if (nextLine.startsWith(\"@\")) {\n+                    currentLine += nextLine.substring(1).trim();\n+                    stream.getNextJSDocLine();\n+                } else {\n+                    break;\n+                }\n+            }\n+            result = currentLine;\n+        } catch (IOException e) {\n+            return null; // fallback to original line\n+        }\n+    }\n+    return result;\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}