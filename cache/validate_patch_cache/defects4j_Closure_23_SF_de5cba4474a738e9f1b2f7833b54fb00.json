{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n    if (!right.isNumber()) {\n      return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    Node current = left.getFirstChild();\n    Node prev = null;\n    int currentIndex = 0;\n    while (current != null) {\n      Node next = current.getNext();\n      if (currentIndex == intIndex) {\n        if (current.isEmpty()) {\n          Node undefinedNode = NodeUtil.newUndefinedNode(n);\n          if (prev == null) {\n            parent.replaceChild(n, undefinedNode);\n          } else {\n            Node exprResult = NodeUtil.newExpr(next);\n            prev.replaceChild(current, exprResult);\n            exprResult.addChildToBack(undefinedNode);\n            parent.replaceChild(n, exprResult);\n          }\n          reportCodeChange();\n          return undefinedNode;\n        } else {\n          parent.replaceChild(n, current.detach());\n          if (left.getChildCount() == 0) {\n            left.addChildToBack(NodeUtil.newEmptyNode(n));\n          }\n          reportCodeChange();\n          return current;\n        }\n      }\n      currentIndex++;\n      prev = current;\n      current = next;\n    }\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..803040c2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,56 +1419,57 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n       return n;\n     }\n-\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n       return n;\n     }\n-\n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n       error(INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n-\n     if (intIndex < 0) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n     Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    Node prev = null;\n+    int currentIndex = 0;\n+    while (current != null) {\n+      Node next = current.getNext();\n+      if (currentIndex == intIndex) {\n+        if (current.isEmpty()) {\n+          Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+          if (prev == null) {\n+            parent.replaceChild(n, undefinedNode);\n+          } else {\n+            Node exprResult = NodeUtil.newExpr(next);\n+            prev.replaceChild(current, exprResult);\n+            exprResult.addChildToBack(undefinedNode);\n+            parent.replaceChild(n, exprResult);\n+          }\n+          reportCodeChange();\n+          return undefinedNode;\n+        } else {\n+          parent.replaceChild(n, current.detach());\n+          if (left.getChildCount() == 0) {\n+            left.addChildToBack(NodeUtil.newEmptyNode(n));\n+          }\n+          reportCodeChange();\n+          return current;\n+        }\n+      }\n+      currentIndex++;\n+      prev = current;\n+      current = next;\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}