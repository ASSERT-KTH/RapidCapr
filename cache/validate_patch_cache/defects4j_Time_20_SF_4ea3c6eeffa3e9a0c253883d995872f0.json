{
    "patch": "                    String tail = str.substring(id.length());\n                    DateTimeZone tz = null;\n                    if (tail.startsWith(\"/\") || tail.startsWith(\"\\\\\")) {\n                        tail = tail.substring(1);\n                        int slashPos = tail.indexOf('/');\n                        if (slashPos > 0) {\n                            String region = tail.substring(0, slashPos);\n                            try {\n                                tz = DateTimeZone.forID(id + '/' + region);\n                            } catch (IllegalArgumentException ex) {\n                                // ignore exception\n                            }\n                        }\n                    }\n                    if (tz == null) {\n                        tz = DateTimeZone.forID(id);\n                    }\n                    bucket.setZone(tz);\n                    return position + id.length();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..3c0b86dc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,25 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n+                    String tail = str.substring(id.length());\n+                    DateTimeZone tz = null;\n+                    if (tail.startsWith(\"/\") || tail.startsWith(\"\\\\\")) {\n+                        tail = tail.substring(1);\n+                        int slashPos = tail.indexOf('/');\n+                        if (slashPos > 0) {\n+                            String region = tail.substring(0, slashPos);\n+                            try {\n+                                tz = DateTimeZone.forID(id + '/' + region);\n+                            } catch (IllegalArgumentException ex) {\n+                                // ignore exception\n+                            }\n+                        }\n+                    }\n+                    if (tz == null) {\n+                        tz = DateTimeZone.forID(id);\n+                    }\n+                    bucket.setZone(tz);\n                     return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}