{
    "patch": "    if (typeOfThis != null) {\n      if (!(typeOfThis instanceof ObjectType)) {\n        t.report(\n            JSError.make(\n                THIS_TYPE_INVALID_IN_METHOD,\n                \"The type of 'this' in a method must be an object type or the unknown type\"));\n        typeOfThis = null;\n      } else {\n        typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..3725ec46 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,17 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null) {\n+      if (!(typeOfThis instanceof ObjectType)) {\n+        t.report(\n+            JSError.make(\n+                THIS_TYPE_INVALID_IN_METHOD,\n+                \"The type of 'this' in a method must be an object type or the unknown type\"));\n+        typeOfThis = null;\n+      } else {\n+        typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n+      }\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}