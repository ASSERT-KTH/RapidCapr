{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    JSType type = null;\n    JSType constructorType = constructor.getJSType();\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType() || constructorType.isEmptyType() || constructorType.isAllType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                if (type == null || type.isEmptyType() || type.isUnknownType() || type.isAllType()) {\n                    JSType thisType = ct.getTypeOfThis();\n                    if (thisType == null || thisType.isEmptyType() || thisType.isUnknownType() || thisType.isAllType()) {\n                        type = getNativeType(UNKNOWN_TYPE);\n                    } else {\n                        type = thisType;\n                    }\n                }\n            }\n        }\n        if (type != null) {\n            type = type.restrictByNotNullOrUndefined();\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..2c940961 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,38 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n     JSType type = null;\n+    JSType constructorType = constructor.getJSType();\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n+        if (constructorType.isUnknownType() || constructorType.isEmptyType() || constructorType.isAllType()) {\n+            type = getNativeType(UNKNOWN_TYPE);\n+        } else {\n+            FunctionType ct = constructorType.toMaybeFunctionType();\n+            if (ct != null && ct.isConstructor()) {\n+                type = ct.getInstanceType();\n+                if (type == null || type.isEmptyType() || type.isUnknownType() || type.isAllType()) {\n+                    JSType thisType = ct.getTypeOfThis();\n+                    if (thisType == null || thisType.isEmptyType() || thisType.isUnknownType() || thisType.isAllType()) {\n+                        type = getNativeType(UNKNOWN_TYPE);\n+                    } else {\n+                        type = thisType;\n+                    }\n+                }\n+            }\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (type != null) {\n+            type = type.restrictByNotNullOrUndefined();\n         }\n-      }\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}