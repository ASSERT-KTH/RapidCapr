{
    "patch": "        boolean dateOutOfRange = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (resetFields &&\n                savedFields[e.getIllegalFieldIndex()].getFieldType().equals\n                 (DateTimeFieldType.year()) &&\n                count <= 2) {\n                // Assume error occurred because date is out of supported range.\n                dateOutOfRange = true;\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].getFieldType().equals(DateTimeFieldType.year())) {\n                        Chronology chrono = savedFields[i].getDurationField().getRangeDurationField().getDurationType().getChronology();\n                        int year = iChrono.year().roundFloor(millis);\n                        int era = 1;\n                        if (year <= 0) {\n                            era = 0;\n                            year = 1 - year;\n                        }\n                        int adjust = year / 400 + year / 100 + year / 4;\n                        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n                            adjust--;\n                        }\n                        year += adjust;\n                        millis = chrono.year().set(0, year * era + (era == 0 ? 1 - year : year), millis);\n                    } else {\n                        millis = savedFields[i].set(millis, false);\n                    }\n                }\n            } else {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n        }\n        if (dateOutOfRange) {\n            throw new IllegalArgumentException(\n                \"Parsed date is outside supported range: \" + new LocalDate(millis, iChrono));",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f6af045b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,47 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean dateOutOfRange = false;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields &&\n+                savedFields[e.getIllegalFieldIndex()].getFieldType().equals\n+                 (DateTimeFieldType.year()) &&\n+                count <= 2) {\n+                // Assume error occurred because date is out of supported range.\n+                dateOutOfRange = true;\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].getFieldType().equals(DateTimeFieldType.year())) {\n+                        Chronology chrono = savedFields[i].getDurationField().getRangeDurationField().getDurationType().getChronology();\n+                        int year = iChrono.year().roundFloor(millis);\n+                        int era = 1;\n+                        if (year <= 0) {\n+                            era = 0;\n+                            year = 1 - year;\n+                        }\n+                        int adjust = year / 400 + year / 100 + year / 4;\n+                        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n+                            adjust--;\n+                        }\n+                        year += adjust;\n+                        millis = chrono.year().set(0, year * era + (era == 0 ? 1 - year : year), millis);\n+                    } else {\n+                        millis = savedFields[i].set(millis, false);\n+                    }\n+                }\n+            } else {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+        }\n+        if (dateOutOfRange) {\n+            throw new IllegalArgumentException(\n+                \"Parsed date is outside supported range: \" + new LocalDate(millis, iChrono));\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}