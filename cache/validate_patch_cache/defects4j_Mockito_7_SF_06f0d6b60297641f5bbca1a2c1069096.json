{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable<?>) {\n            readTypeVariableBounds((TypeVariable<?>) bound);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n\n    Type actualType = getActualTypeArgumentFor(typeVariable);\n    if (actualType != null) {\n        if (actualType instanceof TypeVariable) {\n            readTypeVariableBounds((TypeVariable<?>) actualType);\n        } else {\n            registerTypeVariablesOn(actualType);\n        }\n    }\n}\n\nprivate void readTypeVariableBounds(TypeVariable<?> variable) {\n    for (Type bound : variable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            readTypeVariableBounds((TypeVariable<?>) bound);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3d801048e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,39 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable<?>) {\n+            readTypeVariableBounds((TypeVariable<?>) bound);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+\n+    Type actualType = getActualTypeArgumentFor(typeVariable);\n+    if (actualType != null) {\n+        if (actualType instanceof TypeVariable) {\n+            readTypeVariableBounds((TypeVariable<?>) actualType);\n+        } else {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n+}\n+\n+private void readTypeVariableBounds(TypeVariable<?> variable) {\n+    for (Type bound : variable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            readTypeVariableBounds((TypeVariable<?>) bound);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}