{
    "patch": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData();\n    cachedL = null;\n    cachedLT = null;\n\n    for (int i = 0; i < order; i++) {\n        final double[] ltI = lTData[i];\n        double sum = ltI[i];\n        for (int j = 0; j < i; j++) {\n            final double[] ltJ = lTData[j];\n            double s = 0.0;\n            for (int k = 0; k < j; k++) {\n                s += ltI[k] * ltJ[k];\n            }\n            sum -= s * ltJ[j];\n            ltI[j] = s / ltJ[j];\n        }\n        if (sum <= 0) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        ltI[i] = Math.sqrt(sum);\n        for (int j = i + 1; j < order; j++) {\n            ltI[j] = 0.0;\n        }\n    }\n\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n        for (int j = i; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            double sum = 0.0;\n            for (int k = 0; k < order; ++k) {\n                sum += lI[k] * lJ[k];\n            }\n            if (i == j) {\n                if (sum <= absolutePositivityThreshold) {\n                    throw new NotPositiveDefiniteMatrixException();\n                }\n            } else {\n                double maxDelta =\n                        relativeSymmetryThreshold * Math.max(Math.abs(lTData[i][j]), Math.abs(lTData[j][i]));\n                if (Math.abs(lTData[i][j] - lTData[j][i]) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..f1389266c 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,65 +90,65 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n-                                     final double relativeSymmetryThreshold,\n-                                     final double absolutePositivityThreshold)\n+public CholeskyDecompositionImpl(final RealMatrix matrix,\n+                                 final double relativeSymmetryThreshold,\n+                                 final double absolutePositivityThreshold)\n         throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n-\n-        if (!matrix.isSquare()) {\n-            throw new NonSquareMatrixException(matrix.getRowDimension(),\n-                                               matrix.getColumnDimension());\n-        }\n+        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n \n-        final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n-        cachedL  = null;\n-        cachedLT = null;\n-\n-        // check the matrix before transformation\n-        for (int i = 0; i < order; ++i) {\n-\n-            final double[] lI = lTData[i];\n+    if (!matrix.isSquare()) {\n+        throw new NonSquareMatrixException(matrix.getRowDimension(),\n+                matrix.getColumnDimension());\n+    }\n \n-            if (lTData[i][i] < absolutePositivityThreshold) {\n-                throw new NotPositiveDefiniteMatrixException();\n+    final int order = matrix.getRowDimension();\n+    lTData = matrix.getData();\n+    cachedL = null;\n+    cachedLT = null;\n+\n+    for (int i = 0; i < order; i++) {\n+        final double[] ltI = lTData[i];\n+        double sum = ltI[i];\n+        for (int j = 0; j < i; j++) {\n+            final double[] ltJ = lTData[j];\n+            double s = 0.0;\n+            for (int k = 0; k < j; k++) {\n+                s += ltI[k] * ltJ[k];\n             }\n-            // check off-diagonal elements (and reset them to 0)\n-            for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n-                final double maxDelta =\n-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n-                    throw new NotSymmetricMatrixException();\n-                }\n-                lJ[i] = 0;\n-           }\n+            sum -= s * ltJ[j];\n+            ltI[j] = s / ltJ[j];\n         }\n+        if (sum <= 0) {\n+            throw new NotPositiveDefiniteMatrixException();\n+        }\n+        ltI[i] = Math.sqrt(sum);\n+        for (int j = i + 1; j < order; j++) {\n+            ltI[j] = 0.0;\n+        }\n+    }\n \n-        // transform the matrix\n-        for (int i = 0; i < order; ++i) {\n-\n-            final double[] ltI = lTData[i];\n-\n-            // check diagonal element\n-\n-            ltI[i] = Math.sqrt(ltI[i]);\n-            final double inverse = 1.0 / ltI[i];\n-\n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n+    for (int i = 0; i < order; ++i) {\n+        final double[] lI = lTData[i];\n+        for (int j = i; j < order; ++j) {\n+            final double[] lJ = lTData[j];\n+            double sum = 0.0;\n+            for (int k = 0; k < order; ++k) {\n+                sum += lI[k] * lJ[k];\n+            }\n+            if (i == j) {\n+                if (sum <= absolutePositivityThreshold) {\n+                    throw new NotPositiveDefiniteMatrixException();\n+                }\n+            } else {\n+                double maxDelta =\n+                        relativeSymmetryThreshold * Math.max(Math.abs(lTData[i][j]), Math.abs(lTData[j][i]));\n+                if (Math.abs(lTData[i][j] - lTData[j][i]) > maxDelta) {\n+                    throw new NotSymmetricMatrixException();\n                 }\n             }\n-\n         }\n-\n     }\n+}\n \n     /** {@inheritDoc} */\n     public RealMatrix getL() {",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<25.605551275463988>",
    "test_result": "FAIL"
}