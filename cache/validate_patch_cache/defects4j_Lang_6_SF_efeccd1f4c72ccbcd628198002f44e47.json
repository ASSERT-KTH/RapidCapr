{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char c = input.charAt(pos);\n            if (Character.isHighSurrogate(c) && pos + 1 < len &&\n                Character.isLowSurrogate(input.charAt(pos + 1))) {\n                // Combine the high and low surrogate into a single code point\n                int codePoint = Character.toCodePoint(c, input.charAt(pos + 1));\n                // Output the code point as a single escape sequence\n                out.write(String.format(\"&#%d;\", codePoint));\n                pos += 2;\n            } else {\n                out.write(escapeChar(c));\n                pos += 1;\n            }\n            continue;\n        }\n        // The translator has already taken care of the characters\n        pos += consumed;\n    }\n}\n\npublic static String escapeChar(char c) {\n    if (Character.getType(c) == Character.CONTROL ||\n        Character.getType(c) == Character.FORMAT) {\n        return String.format(\"&#%d;\", (int) c);\n    }\n    if (Character.isHighSurrogate(c) || Character.isLowSurrogate(c)) {\n        return String.format(\"&#%d;\", (int) c);\n    }\n    if (Character.isSurrogate(c)) {\n        // Invalid surrogate pair: output the character as is\n        return String.valueOf(c);\n    }\n    if (c == '&') {\n        return \"&amp;\";\n    }\n    if (c == '\\\"') {\n        return \"&quot;\";\n    }\n    if (c == '\\'') {\n        return \"&#39;\";\n    }\n    if (c == '<') {\n        return \"&lt;\";\n    }\n    if (c == '>') {\n        return \"&gt;\";\n    }\n    return String.valueOf(c);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..e07c2982 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,66 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            char c = input.charAt(pos);\n+            if (Character.isHighSurrogate(c) && pos + 1 < len &&\n+                Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                // Combine the high and low surrogate into a single code point\n+                int codePoint = Character.toCodePoint(c, input.charAt(pos + 1));\n+                // Output the code point as a single escape sequence\n+                out.write(String.format(\"&#%d;\", codePoint));\n+                pos += 2;\n+            } else {\n+                out.write(escapeChar(c));\n+                pos += 1;\n             }\n+            continue;\n         }\n+        // The translator has already taken care of the characters\n+        pos += consumed;\n+    }\n+}\n+\n+public static String escapeChar(char c) {\n+    if (Character.getType(c) == Character.CONTROL ||\n+        Character.getType(c) == Character.FORMAT) {\n+        return String.format(\"&#%d;\", (int) c);\n     }\n+    if (Character.isHighSurrogate(c) || Character.isLowSurrogate(c)) {\n+        return String.format(\"&#%d;\", (int) c);\n+    }\n+    if (Character.isSurrogate(c)) {\n+        // Invalid surrogate pair: output the character as is\n+        return String.valueOf(c);\n+    }\n+    if (c == '&') {\n+        return \"&amp;\";\n+    }\n+    if (c == '\\\"') {\n+        return \"&quot;\";\n+    }\n+    if (c == '\\'') {\n+        return \"&#39;\";\n+    }\n+    if (c == '<') {\n+        return \"&lt;\";\n+    }\n+    if (c == '>') {\n+        return \"&gt;\";\n+    }\n+    return String.valueOf(c);\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<<P&[]O>> but was:<<P&[amp;]O>>",
    "test_result": "FAIL"
}