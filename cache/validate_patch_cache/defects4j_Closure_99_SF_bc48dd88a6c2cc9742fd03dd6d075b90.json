{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // A method definition in a class body needs to be traversed, even if it has the @this annotation.\n        if (NodeUtil.isEs6ClassMemberFunctionDef(n)) {\n            return true;\n        }\n\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                        jsDoc.hasThisType() ||\n                        jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions that are immediately called with the global object as 'this'.\n        boolean isImmediatelyCalledWithGlobalThis = NodeUtil.isImmediatelyCalledWithGlobalThis(n);\n        if (isImmediatelyCalledWithGlobalThis) {\n            return false;\n        }\n\n        int pType = parent.getType();\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        if (pType != Token.BLOCK &&\n                pType != Token.SCRIPT &&\n                pType != Token.NAME &&\n                pType != Token.FOR &&\n                !NodeUtil.isEs6ClassMemberFunctionDef(parent) &&\n                pType != Token.EXPR_RESULT &&  // a function expression not in an expression statement is a valid source of @this.\n                (pType != Token.ASSIGN || parent.getFirstChild() != n)) {\n            return false;\n        }\n\n        if (pType == Token.FOR && NodeUtil.isForIn(parent)) {\n            // No traversing through the bound variable of a for-in loop.\n            if (parent.getFirstChild() == n) {\n                return false;\n            }\n        }\n    } else if (n.getType() == Token.NAME) {\n        int pType = parent.getType();\n        if (pType == Token.CATCH) {\n            // Don't traverse the exception variable in a catch block.\n            return (n != parent.getFirstChild());\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (lhs.getType() == Token.GETPROP &&\n                    lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nprivate boolean isImmediatelyCalledWithGlobalThis(Node n) {\n    Node firstChild = n.getFirstChild();\n    return firstChild != null &&\n            firstChild.getType() == Token.CALL &&\n            firstChild.getFirstChild() != null &&\n            firstChild.getFirstChild().getType() == Token.NAME &&\n            firstChild.getFirstChild().getString().equals(\"Function\") &&\n            firstChild.getLastChild() != null &&\n            firstChild.getLastChild().getType() == Token.STRING &&\n            firstChild.getLastChild().getString().equals(\"return this;\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..1040f662 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,94 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n+        // A method definition in a class body needs to be traversed, even if it has the @this annotation.\n+        if (NodeUtil.isEs6ClassMemberFunctionDef(n)) {\n+            return true;\n+        }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() ||\n+                        jsDoc.hasThisType() ||\n+                        jsDoc.isOverride())) {\n+            return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+\n+        // Don't traverse functions that are immediately called with the global object as 'this'.\n+        boolean isImmediatelyCalledWithGlobalThis = NodeUtil.isImmediatelyCalledWithGlobalThis(n);\n+        if (isImmediatelyCalledWithGlobalThis) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+\n+        int pType = parent.getType();\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {};\n+        if (pType != Token.BLOCK &&\n+                pType != Token.SCRIPT &&\n+                pType != Token.NAME &&\n+                pType != Token.FOR &&\n+                !NodeUtil.isEs6ClassMemberFunctionDef(parent) &&\n+                pType != Token.EXPR_RESULT &&  // a function expression not in an expression statement is a valid source of @this.\n+                (pType != Token.ASSIGN || parent.getFirstChild() != n)) {\n             return false;\n-          }\n-      }\n+        }\n+\n+        if (pType == Token.FOR && NodeUtil.isForIn(parent)) {\n+            // No traversing through the bound variable of a for-in loop.\n+            if (parent.getFirstChild() == n) {\n+                return false;\n+            }\n+        }\n+    } else if (n.getType() == Token.NAME) {\n+        int pType = parent.getType();\n+        if (pType == Token.CATCH) {\n+            // Don't traverse the exception variable in a catch block.\n+            return (n != parent.getFirstChild());\n+        }\n     }\n \n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (lhs.getType() == Token.GETPROP &&\n+                    lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                return false;\n+            }\n+        }\n+    }\n     return true;\n-  }\n+}\n+\n+private boolean isImmediatelyCalledWithGlobalThis(Node n) {\n+    Node firstChild = n.getFirstChild();\n+    return firstChild != null &&\n+            firstChild.getType() == Token.CALL &&\n+            firstChild.getFirstChild() != null &&\n+            firstChild.getFirstChild().getType() == Token.NAME &&\n+            firstChild.getFirstChild().getString().equals(\"Function\") &&\n+            firstChild.getLastChild() != null &&\n+            firstChild.getLastChild().getType() == Token.STRING &&\n+            firstChild.getLastChild().getString().equals(\"return this;\");\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}