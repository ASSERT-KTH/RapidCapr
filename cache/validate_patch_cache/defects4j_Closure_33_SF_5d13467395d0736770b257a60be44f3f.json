{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n    if (!constraintObj.isNominalConstructor()) {\n      return;\n    }\n    NominalType constructor = constraintObj.getConstructor();\n    if (constructor.isInterface()\n        || constructor.isAnonymous()) {\n      return;\n    }\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        if (constraintObj.isDict()) {\n          // Matching a dict does nothing.\n          continue;\n        }\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else {\n      NominalType clazz = constraintObj.getNominalTypeIfSingletonObj();\n      if (clazz == null) {\n        return;\n      }\n      if (clazz.isClassyOrInterface()) {\n        for (String pname : clazz.getPropertyNames()) {\n          Property prop = clazz.getSlot(pname);\n          if (!isPropertyTypeDeclared(prop.getName())) {\n            defineInferredProperty(prop.getName(), prop.getType(), prop);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..5a70b23e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,20 +552,21 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+public void matchConstraint(ObjectType constraintObj) {\n+    if (!constraintObj.isNominalConstructor()) {\n+      return;\n+    }\n+    NominalType constructor = constraintObj.getConstructor();\n+    if (constructor.isInterface()\n+        || constructor.isAnonymous()) {\n+      return;\n+    }\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n+        if (constraintObj.isDict()) {\n+          // Matching a dict does nothing.\n+          continue;\n+        }\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n@@ -576,6 +577,14 @@ class PrototypeObjectType extends ObjectType {\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n-    }\n-  }\n+    } else {\n+      NominalType clazz = constraintObj.getNominalTypeIfSingletonObj();\n+      if (clazz == null) {\n+        return;\n+      }\n+      if (clazz.isClassyOrInterface()) {\n+        for (String pname : clazz.getPropertyNames()) {\n+          Property prop = clazz.getSlot(pname);\n+          if (!isPropertyTypeDeclared(prop.getName())) {\n+            defineInferredProperty(prop.getName(), prop.getType(), prop);\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}