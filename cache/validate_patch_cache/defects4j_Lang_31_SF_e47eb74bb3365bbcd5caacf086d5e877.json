{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n\n    public static boolean containsAny(char[] str, char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n\n        int strSize = str.length;\n        int searchSize = searchChars.length;\n        int firstSupplementaryCharIndex = -1;\n\n        if (containsOnlyBmpChars(searchChars)) {\n            // use faster version for strings contatining only BMP characters\n            for (int i = 0; i < strSize; i++) {\n                char ch = str[i];\n                for (int j = 0; j < searchSize; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            if (strSize > searchSize) {\n                for (int i = 0; i < searchSize; i++) {\n                    if (Character.isHighSurrogate(searchChars[i])) {\n                        if (i + 1 < searchSize && Character.isLowSurrogate(searchChars[i + 1])) {\n                            firstSupplementaryCharIndex = i;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            for (int i = 0; i < strSize; i++) {\n                char ch = str[i];\n                if (containsToSurrogates(ch, searchChars, i, firstSupplementaryCharIndex)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean containsOnlyBmpChars(char[] chars) {\n        for (char ch : chars) {\n            if (Character.isHighSurrogate(ch)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean containsToSurrogates(char ch, char[] searchChars, int currentIndex, int nextSupplementaryCharIndex) {\n        if (Character.isHighSurrogate(ch)) {\n            if (nextSupplementaryCharIndex < 0 || nextSupplementaryCharIndex == searchChars.length - 1) {\n                return false;\n            }\n            return currentIndex < searchChars.length - 1 && searchChars[currentIndex] == ch && searchChars[currentIndex + 1] == searchChars[nextSupplementaryCharIndex + 1];\n        } else if (Character.isLowSurrogate(ch)) {\n            if (nextSupplementaryCharIndex < 0) {\n                return false;\n            }\n            return nextSupplementaryCharIndex < searchChars.length - 1 && searchChars[nextSupplementaryCharIndex] == searchChars[currentIndex - 1] && searchChars[nextSupplementaryCharIndex + 1] == ch;\n        } else {\n            for (char searchChar : searchChars) {\n                if (searchChar == ch) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..8852328e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,81 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(char[] str, char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+\n+        int strSize = str.length;\n+        int searchSize = searchChars.length;\n+        int firstSupplementaryCharIndex = -1;\n+\n+        if (containsOnlyBmpChars(searchChars)) {\n+            // use faster version for strings contatining only BMP characters\n+            for (int i = 0; i < strSize; i++) {\n+                char ch = str[i];\n+                for (int j = 0; j < searchSize; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            if (strSize > searchSize) {\n+                for (int i = 0; i < searchSize; i++) {\n+                    if (Character.isHighSurrogate(searchChars[i])) {\n+                        if (i + 1 < searchSize && Character.isLowSurrogate(searchChars[i + 1])) {\n+                            firstSupplementaryCharIndex = i;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+\n+            for (int i = 0; i < strSize; i++) {\n+                char ch = str[i];\n+                if (containsToSurrogates(ch, searchChars, i, firstSupplementaryCharIndex)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean containsOnlyBmpChars(char[] chars) {\n+        for (char ch : chars) {\n+            if (Character.isHighSurrogate(ch)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static boolean containsToSurrogates(char ch, char[] searchChars, int currentIndex, int nextSupplementaryCharIndex) {\n+        if (Character.isHighSurrogate(ch)) {\n+            if (nextSupplementaryCharIndex < 0 || nextSupplementaryCharIndex == searchChars.length - 1) {\n+                return false;\n+            }\n+            return currentIndex < searchChars.length - 1 && searchChars[currentIndex] == ch && searchChars[currentIndex + 1] == searchChars[nextSupplementaryCharIndex + 1];\n+        } else if (Character.isLowSurrogate(ch)) {\n+            if (nextSupplementaryCharIndex < 0) {\n+                return false;\n+            }\n+            return nextSupplementaryCharIndex < searchChars.length - 1 && searchChars[nextSupplementaryCharIndex] == searchChars[currentIndex - 1] && searchChars[nextSupplementaryCharIndex + 1] == ch;\n+        } else {\n+            for (char searchChar : searchChars) {\n+                if (searchChar == ch) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}