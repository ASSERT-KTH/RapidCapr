{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (m.getRowDimension() > 500 || m.getColumnDimension() > 500) {\n        return sqrtWithHessenbergReduction(m);\n    } else {\n        return sqrtWithEigenDecomposition(m);\n    }\n}\n\nprivate RealMatrix sqrtWithEigenDecomposition(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix s = dec.getSquareRoot();\n    RealMatrix t = dec.getVT().transpose();\n    return dec.getV().multiply(s).multiply(t);\n}\n\nprivate RealMatrix sqrtWithHessenbergReduction(RealMatrix m) {\n    HessenbergTransformer transformer = new HessenbergTransformer(m);\n    RealMatrix[] h = transformer.getFactors();\n    RealMatrix q = h[0];\n    RealMatrix b = h[1];\n    RealMatrix sqrtB = sqrtWithEigenDecomposition(b);\n    RealMatrix sqrtM = q.multiply(sqrtB).multiply(q.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a6c2f7369 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (m.getRowDimension() > 500 || m.getColumnDimension() > 500) {\n+        return sqrtWithHessenbergReduction(m);\n+    } else {\n+        return sqrtWithEigenDecomposition(m);\n     }\n }\n+\n+private RealMatrix sqrtWithEigenDecomposition(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix s = dec.getSquareRoot();\n+    RealMatrix t = dec.getVT().transpose();\n+    return dec.getV().multiply(s).multiply(t);\n+}\n+\n+private RealMatrix sqrtWithHessenbergReduction(RealMatrix m) {\n+    HessenbergTransformer transformer = new HessenbergTransformer(m);\n+    RealMatrix[] h = transformer.getFactors();\n+    RealMatrix q = h[0];\n+    RealMatrix b = h[1];\n+    RealMatrix sqrtB = sqrtWithEigenDecomposition(b);\n+    RealMatrix sqrtM = q.multiply(sqrtB).multiply(q.transpose());\n+    return sqrtM;\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}