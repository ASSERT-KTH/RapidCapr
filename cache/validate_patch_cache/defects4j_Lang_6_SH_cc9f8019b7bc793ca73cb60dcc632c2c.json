{
    "patch": "            if (escapedChar == null) {\n                if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len\n                        && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                    out.write(input.charAt(pos++));\n                    out.write(input.charAt(pos++));\n                } else {\n                    out.write(input.charAt(pos++));\n                }\n                continue;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..2e712bbe 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,16 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+            if (escapedChar == null) {\n+                if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len\n+                        && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                    out.write(input.charAt(pos++));\n+                    out.write(input.charAt(pos++));\n+                } else {\n+                    out.write(input.charAt(pos++));\n+                }\n+                continue;\n+            }\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}