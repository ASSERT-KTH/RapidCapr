{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[][] dp = new double[2][M];\n    dp[1][0] = 1;\n\n    for (int i = 1; i <= D; i++) {\n        int curr = i % 2;\n        int prev = (i - 1) % 2;\n\n        for (int j = 0; j < M; j++) {\n            double sum = 0;\n\n            for (int k = 0; k < M; k++) {\n                int dominant = getDominant(j, k, M);\n                sum += dp[prev][k] * genotypeProbabilities[dominant];\n            }\n\n            dp[curr][j] = sum;\n        }\n    }\n\n    double[] result = new double[N + 1];\n\n    for (int i = 0; i < M; i++) {\n        result[populationCount(i)] += dp[D % 2][i];\n    }\n\n    for (int i = 0; i <= N; i++) {\n        result[i] /= Math.pow(M, D);\n    }\n\n    return result;\n}\n\nprivate int getDominant(int i, int j, int M) {\n    if (j > i) {\n        return getDominant(j, i, M);\n    }\n\n    int count = 0;\n\n    for (int k = 0; k < i; k++) {\n        count += M - k;\n    }\n\n    return count + j;\n}\n\nprivate int populationCount(int i) {\n    int result = 0;\n\n    while (i > 0) {\n        result += i % 2;\n        i /= 2;\n    }\n\n    return result;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}