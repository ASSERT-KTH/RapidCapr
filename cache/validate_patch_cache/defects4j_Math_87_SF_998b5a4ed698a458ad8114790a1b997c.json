{
    "patch": "private Integer getBasicRow(final int col) {\n    Integer basicRow = null;\n    int basicCount = 0; // count of basic variables in the column\n    double entry;\n    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n        entry = getEntry(i, col);\n        if (MathUtils.equals(entry, 1.0, epsilon)) {\n            basicCount++;\n            if (basicCount > 1) {\n                return null; // more than one basic variable in the column\n            } else {\n                basicRow = i;\n            }\n        } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n            return null; // non-basic variable found in the column\n        }\n    }\n    return basicCount == 1 ? basicRow : null;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..ccfb9feae 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -269,19 +269,25 @@ class SimplexTableau implements Serializable {\n      * @param col index of the column to check\n      * @return the row that the variable is basic in.  null if the column is not basic\n      */\n-    private Integer getBasicRow(final int col) {\n-        Integer row = null;\n-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n-                row = i;\n-                } else {\n-                return null;\n-                }\n+private Integer getBasicRow(final int col) {\n+    Integer basicRow = null;\n+    int basicCount = 0; // count of basic variables in the column\n+    double entry;\n+    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n+        entry = getEntry(i, col);\n+        if (MathUtils.equals(entry, 1.0, epsilon)) {\n+            basicCount++;\n+            if (basicCount > 1) {\n+                return null; // more than one basic variable in the column\n+            } else {\n+                basicRow = i;\n             }\n+        } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n+            return null; // non-basic variable found in the column\n         }\n-        return row;\n     }\n+    return basicCount == 1 ? basicRow : null;\n+}\n \n     /**\n      * Removes the phase 1 objective function and artificial variables from this tableau.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}