{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockSettings mockSettings = Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS);\n        Object[] constructorArgs = {mockSettings};\n        String[] constructorSig = {\"org.mockito.MockSettings\"};\n        Object mockHandler = new MockHandler<T>(oldMockHandler).getProxied();\n        Object proxyInstance = Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n                mock.getClass().getInterfaces(), new MethodInterceptorFilter((MethodInterceptor) mockHandler, (MockSettingsImpl) mockSettings));\n        try {\n            Object factoryInstance = Class.forName(\"org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator\").getMethod(\n                    \"make\", Class.class, String.class, boolean.class, boolean.class, String.class, String.class, String.class, Object.class, MethodLookupEngine.class, AccessLookup.class, AndroidClassLoadingStrategy.class).invoke(\n                    null, mock.getClass(), \"RelaxedMockMaker\", false, false, \"$$EnhancerByMockitoWithCGLIB$$\" + mock.getClass().getSimpleName() + Mockito.RELAXED.toString(), mock.getClass().getName(), \"$$EnhancerByMockitoWithCGLIB$$\" + mock.getClass().getSimpleName(), null, MethodLookupEngine.Default.INSTANCE, AccessLookup.INSTANCE, new AndroidClassLoadingStrategy(null));\n\n            java.lang.reflect.Method findMethod = factoryInstance.getClass().getMethod(\"findConstructor\", String[].class, Object[].class);\n            Object inv = findMethod.invoke(factoryInstance, constructorSig, constructorArgs);\n\n            Object newInstance = ((Constructor<?>) inv).newInstance(constructorArgs);\n            java.lang.reflect.Method setCallbackMethod = factoryInstance.getClass().getMethod(\"setCallback\", int.class, Callback.class);\n            setCallbackMethod.invoke(factoryInstance, 0, (Callback) proxyInstance);\n        } catch (Exception e) {\n\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b848b04da 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockSettings mockSettings = Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS);\n+        Object[] constructorArgs = {mockSettings};\n+        String[] constructorSig = {\"org.mockito.MockSettings\"};\n+        Object mockHandler = new MockHandler<T>(oldMockHandler).getProxied();\n+        Object proxyInstance = Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n+                mock.getClass().getInterfaces(), new MethodInterceptorFilter((MethodInterceptor) mockHandler, (MockSettingsImpl) mockSettings));\n+        try {\n+            Object factoryInstance = Class.forName(\"org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator\").getMethod(\n+                    \"make\", Class.class, String.class, boolean.class, boolean.class, String.class, String.class, String.class, Object.class, MethodLookupEngine.class, AccessLookup.class, AndroidClassLoadingStrategy.class).invoke(\n+                    null, mock.getClass(), \"RelaxedMockMaker\", false, false, \"$$EnhancerByMockitoWithCGLIB$$\" + mock.getClass().getSimpleName() + Mockito.RELAXED.toString(), mock.getClass().getName(), \"$$EnhancerByMockitoWithCGLIB$$\" + mock.getClass().getSimpleName(), null, MethodLookupEngine.Default.INSTANCE, AccessLookup.INSTANCE, new AndroidClassLoadingStrategy(null));\n+\n+            java.lang.reflect.Method findMethod = factoryInstance.getClass().getMethod(\"findConstructor\", String[].class, Object[].class);\n+            Object inv = findMethod.invoke(factoryInstance, constructorSig, constructorArgs);\n+\n+            Object newInstance = ((Constructor<?>) inv).newInstance(constructorArgs);\n+            java.lang.reflect.Method setCallbackMethod = factoryInstance.getClass().getMethod(\"setCallback\", int.class, Callback.class);\n+            setCallbackMethod.invoke(factoryInstance, 0, (Callback) proxyInstance);\n+        } catch (Exception e) {\n+\n+        }\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}