{
    "patch": "      // Check if variable is a function parameter or a constant.\n      if (this.isParam() || this.isConst()) {\n        return true;\n      }\n\n      return getReferenceCount() <= 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..82ae915d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Check if variable is a function parameter or a constant.\n+      if (this.isParam() || this.isConst()) {\n+        return true;\n+      }\n+\n+      return getReferenceCount() <= 1;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}