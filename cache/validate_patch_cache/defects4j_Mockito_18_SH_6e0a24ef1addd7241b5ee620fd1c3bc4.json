{
    "patch": "public Object evaluate(Method method, Object[] args, ExecutionContext context) throws Throwable {\n    MockInvocation invocation = new MockInvocation(method, args);\n    Object returnValue = values.returnValueFor(method.getReturnType());\n    if (returnValue != null) {\n        return returnValue;\n    } else if (method.getReturnType().getTypeName().equals(\"void\")) {\n        return null;\n    } else if (method.getReturnType().isArray()) {\n        return Array.newInstance(method.getReturnType().getComponentType(), 0);\n    } else if (Iterable.class.isAssignableFrom(method.getReturnType())) {\n        return Collections.emptyList();\n    } else if (Map.class.isAssignableFrom(method.getReturnType())) {\n        return Collections.emptyMap();\n    }\n    throw new UnsupportedOperationException();\n} ",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}