{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    boolean maybeLive = false;\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state == VariableLiveness.MAYBE_LIVE) {\n          maybeLive = true;\n        } else if (state == VariableLiveness.READ) {\n          return VariableLiveness.READ;\n        } else if (state == VariableLiveness.KILL) {\n          return VariableLiveness.MAYBE_LIVE;\n        }\n      }\n    }\n    return maybeLive ? VariableLiveness.MAYBE_LIVE : VariableLiveness.DEAD;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..dafb8f5d 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -333,16 +333,22 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       }\n     }\n \n+    boolean maybeLive = false;\n+\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        if (state == VariableLiveness.MAYBE_LIVE) {\n+          maybeLive = true;\n+        } else if (state == VariableLiveness.READ) {\n+          return VariableLiveness.READ;\n+        } else if (state == VariableLiveness.KILL) {\n+          return VariableLiveness.MAYBE_LIVE;\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+    return maybeLive ? VariableLiveness.MAYBE_LIVE : VariableLiveness.DEAD;\n   }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}