{
    "patch": "} else if (parent.isAssign() && NodeUtil.isLhs(n, parent)) {\n    // Skip assignments to left hand side e.g. `a.b = c`\n    return;\n} else if (NodeUtil.isExpressionNode(parent) ||\n        parent.isStringKey() || parent.isArrayPattern() || parent.isDefaultValue() ||\n        parent.isComputedPropKey() || (parent.isUnary() && n == parent.getFirstChild())) {\n    // Expressions, array patterns, computed property keys, and default values\n    // are allowed to be non-qualified.\n    return;\n} else if (!n.isQualifiedName() && !NodeUtil.isVarDeclaration(parent) && !NodeUtil.isFunctionDeclaration(parent)) {\n    // Everything else should be qualified.\n    warnings.add(makeLintWarning(\"Suspicious code. Did you mean: \" +\n      NodeUtil.getGetpropImplicitCast(n.getFirstChild()), n));\n      return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}