{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n\n          // Check if this is a function declaration\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n            break;\n          }\n\n          // Check if this is a function expression\n          Node grandparent = parent.getParent();\n          if (grandparent != null && grandparent.isExprResult()) {\n            defineDeclaredFunction(n, grandparent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n\n      // handle function inputs for function expressions\n      if (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT) {\n        handleFunctionInputs(parent);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..8b3756c9 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1454,7 +1454,18 @@ final class TypedScopeCreator implements ScopeCreator {\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n+\n+          // Check if this is a function declaration\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+            break;\n+          }\n+\n+          // Check if this is a function expression\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null && grandparent.isExprResult()) {\n+            defineDeclaredFunction(n, grandparent);\n+          }\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1463,6 +1474,11 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+\n+      // handle function inputs for function expressions\n+      if (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT) {\n+        handleFunctionInputs(parent);\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}