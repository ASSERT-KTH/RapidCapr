{
    "patch": "    public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a <= 0 || b <= 0 || c <= 0) // check for negative or zero values\n            return false;\n        int[] sides = {a, b, c};\n        Arrays.sort(sides); // sort the array to find maximum side value\n        int max = sides[2];\n        int sum = sides[0] + sides[1] + max;\n        return (sum - max) > max && (sides[0]*sides[0] + sides[1]*sides[1] == max*max);\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java b/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java\nindex da0fd0a..ad20dcc 100644\n--- a/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java\n+++ b/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java\n@@ -10,6 +10,12 @@ package humaneval.buggy;\n \n public class RIGHT_ANGLE_TRIANGLE {\n     public static boolean right_angle_triangle(int a, int b, int c) {\n-        return a*a + b*b == c*c;\n+        if (a <= 0 || b <= 0 || c <= 0) // check for negative or zero values\n+            return false;\n+        int[] sides = {a, b, c};\n+        Arrays.sort(sides); // sort the array to find maximum side value\n+        int max = sides[2];\n+        int sum = sides[0] + sides[1] + max;\n+        return (sum - max) > max && (sides[0]*sides[0] + sides[1]*sides[1] == max*max);\n     }\n }",
    "result_reason": " /tmp/humaneval-RIGHT_ANGLE_TRIANGLE/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java:[16,9] cannot find symbol",
    "test_result": "ERROR"
}