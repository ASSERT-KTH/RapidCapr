{
    "patch": "        if (offsetLocal >= 0 && offsetAdjusted >= 0) {  // only positive offsets are affected\n            if (offsetLocal != offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                // if the adjusted time is less than nextLocal, we should use the previous offset\n                long previousLocal = previousTransition(instantAdjusted);\n                if ((previousLocal < instantAdjusted && previousLocal != nextLocal) \n                        || (previousLocal == instantAdjusted && previousTransition(previousLocal) != nextLocal)) {\n                    return getOffset(previousLocal);\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..cae2af7b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal >= 0 && offsetAdjusted >= 0) {  // only positive offsets are affected\n+            if (offsetLocal != offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // if the adjusted time is less than nextLocal, we should use the previous offset\n+                long previousLocal = previousTransition(instantAdjusted);\n+                if ((previousLocal < instantAdjusted && previousLocal != nextLocal) \n+                        || (previousLocal == instantAdjusted && previousTransition(previousLocal) != nextLocal)) {\n+                    return getOffset(previousLocal);\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}