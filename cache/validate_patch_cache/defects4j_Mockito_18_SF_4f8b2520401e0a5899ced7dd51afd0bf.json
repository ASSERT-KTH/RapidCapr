{
    "patch": "public boolean isPalindrome(char[] s) {\n    int len = s.length;\n    for (int i = 0, j = len - 1; i < j; i++, j--) {\n        while (i < j && !Character.isLetterOrDigit(s[i])) i++;\n        while (i < j && !Character.isLetterOrDigit(s[j])) j--;\n        if (i < j && Character.toLowerCase(s[i]) != Character.toLowerCase(s[j])) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a28d37057 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public boolean isPalindrome(char[] s) {\n+    int len = s.length;\n+    for (int i = 0, j = len - 1; i < j; i++, j--) {\n+        while (i < j && !Character.isLetterOrDigit(s[i])) i++;\n+        while (i < j && !Character.isLetterOrDigit(s[j])) j--;\n+        if (i < j && Character.toLowerCase(s[i]) != Character.toLowerCase(s[j])) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}