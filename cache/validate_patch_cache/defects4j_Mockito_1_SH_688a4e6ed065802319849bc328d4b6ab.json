{
    "patch": "            Object[] rawArguments = invocation.getRawArguments();\n            Object[][] arguments = new Object[1][rawArguments.length-indexOfVararg];\n            System.arraycopy(rawArguments,0, arguments[0], 0, rawArguments.length-indexOfVararg);\n            Matcher varargMatcher = matchers.get(matchers.size() -1);\n            if(varargMatcher instanceof CapturesArguments) {\n                ((CapturesArguments) varargMatcher).captureFrom(arguments);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..d2ebae979 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] rawArguments = invocation.getRawArguments();\n+            Object[][] arguments = new Object[1][rawArguments.length-indexOfVararg];\n+            System.arraycopy(rawArguments,0, arguments[0], 0, rawArguments.length-indexOfVararg);\n+            Matcher varargMatcher = matchers.get(matchers.size() -1);\n+            if(varargMatcher instanceof CapturesArguments) {\n+                ((CapturesArguments) varargMatcher).captureFrom(arguments);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}