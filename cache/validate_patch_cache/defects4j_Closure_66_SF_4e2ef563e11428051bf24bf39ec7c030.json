{
    "patch": "public double getTypedPercent(JsonObject jsonObject) {\n    int counted = 0;\n    int total = 0;\n    for (JsonElement element : jsonObject.get(\"fields\").getAsJsonArray()) {\n        JsonObject field = element.getAsJsonObject();\n        if (field.has(\"type\")) {\n            total++;\n            if (field.get(\"type\").getAsString().equals(\"typed\")) {\n                counted++;\n            }\n        }\n    }\n    if (total == 0) {\n        return 0;\n    } else {\n        return ((double) counted / total) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..90ea32ea 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JsonObject jsonObject) {\n+    int counted = 0;\n+    int total = 0;\n+    for (JsonElement element : jsonObject.get(\"fields\").getAsJsonArray()) {\n+        JsonObject field = element.getAsJsonObject();\n+        if (field.has(\"type\")) {\n+            total++;\n+            if (field.get(\"type\").getAsString().equals(\"typed\")) {\n+                counted++;\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 0;\n+    } else {\n+        return ((double) counted / total) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}