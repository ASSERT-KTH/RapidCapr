{
    "patch": "    public Class getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            if (actual instanceof ParameterizedType) {\n                    actual = ((ParameterizedType) actual).getRawType();\n            }\n            if (actual instanceof TypeVariable) {\n                actual = resolveTypeVariable((TypeVariable) actual,\n                        ((ParameterizedType) field.getDeclaringClass()\n                                .getGenericSuperclass()).getActualTypeArguments());\n            }\n            return (Class) actual;\n        }\n        return Object.class;\n    }\n\n    private Type resolveTypeVariable(TypeVariable typeVariable, Type[] actualTypeArguments) {\n        String name = typeVariable.getName();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            Type actualTypeArgument = actualTypeArguments[i];\n            if (actualTypeArgument instanceof TypeVariable &&\n                    ((TypeVariable) actualTypeArgument).getName().equals(name)) {\n                return resolveTypeVariable((TypeVariable) actualTypeArgument, actualTypeArguments);\n            }\n            if (actualTypeArgument instanceof Class && ((Class) actualTypeArgument).getTypeParameters().length > 0) {\n                TypeVariable[] typeParameters = ((Class) actualTypeArgument).getTypeParameters();\n                Type[] arguments = ((ParameterizedType) actualTypeArguments[i]).getActualTypeArguments();\n                for (int j = 0; j < typeParameters.length; j++) {\n                    if (typeParameters[j].getName().equals(name)) {\n                        return arguments[j];\n                    }\n                }\n            }\n            if (typeVariable.getBounds()[0] instanceof Class) {\n                return typeVariable.getBounds()[0];\n            }\n        }\n        throw new RuntimeException(\"Could not resolve type variable \" + name);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..3f3608c55 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,44 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+    public Class getGenericType(Field field) {\n+        Type generic = field.getGenericType();\n+        if (generic != null && generic instanceof ParameterizedType) {\n+            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+            if (actual instanceof ParameterizedType) {\n+                    actual = ((ParameterizedType) actual).getRawType();\n+            }\n+            if (actual instanceof TypeVariable) {\n+                actual = resolveTypeVariable((TypeVariable) actual,\n+                        ((ParameterizedType) field.getDeclaringClass()\n+                                .getGenericSuperclass()).getActualTypeArguments());\n+            }\n+            return (Class) actual;\n+        }\n+        return Object.class;\n+    }\n+\n+    private Type resolveTypeVariable(TypeVariable typeVariable, Type[] actualTypeArguments) {\n+        String name = typeVariable.getName();\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            Type actualTypeArgument = actualTypeArguments[i];\n+            if (actualTypeArgument instanceof TypeVariable &&\n+                    ((TypeVariable) actualTypeArgument).getName().equals(name)) {\n+                return resolveTypeVariable((TypeVariable) actualTypeArgument, actualTypeArguments);\n+            }\n+            if (actualTypeArgument instanceof Class && ((Class) actualTypeArgument).getTypeParameters().length > 0) {\n+                TypeVariable[] typeParameters = ((Class) actualTypeArgument).getTypeParameters();\n+                Type[] arguments = ((ParameterizedType) actualTypeArguments[i]).getActualTypeArguments();\n+                for (int j = 0; j < typeParameters.length; j++) {\n+                    if (typeParameters[j].getName().equals(name)) {\n+                        return arguments[j];\n+                    }\n+                }\n+            }\n+            if (typeVariable.getBounds()[0] instanceof Class) {\n+                return typeVariable.getBounds()[0];\n+            }\n+        }\n+        throw new RuntimeException(\"Could not resolve type variable \" + name);\n+    }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}