{
    "patch": "import java.util.*;\n\npublic static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    TreeMap<Integer, ArrayList<Integer>> digits_number = new TreeMap<Integer, ArrayList<Integer>>();\n\n    for (int i = 0; i < nums.length; i += 1) {\n        int n = nums[i];\n        int digit = 0;\n        int pos = 1;\n        if (n < 0) {\n            pos = -1;\n            n = -n;\n        }\n        int temp = n;\n        int factor = 1;\n\n        // compute the digit by multiplying each digit by appropriate power of 10\n        while (temp > 0) {\n            digit += pos * (temp % 10) * factor;\n            factor *= 10;\n            temp /= 10;\n        }\n        digits.add(digit);\n\n        if (! digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>(Arrays.asList(nums[i])));\n        } else {\n            digits_number.get(digit).add(nums[i]);\n        }\n    }\n\n    // occupy the container with sorted digits in the order they appeared in the input\n    ArrayList<Integer> result = new ArrayList<Integer>(nums.length);\n    for (Map.Entry<Integer, ArrayList<Integer>> entry : digits_number.entrySet()) {\n        for (int number : entry.getValue()) {\n            result.add(number);\n        }\n    }\n    return result.toArray(new Integer[] {});\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\nindex 4e6cd94..b59ceac 100644\n--- a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n+++ b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n@@ -14,32 +14,45 @@ For example:\n >>> order_by_points([]) == [] */\n \n public class ORDER_BY_POINTS {\n-    public static Integer[] order_by_points(Integer[] nums) {\n-        ArrayList<Integer> digits = new ArrayList<Integer>();\n-        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n-\n-        for (int i = 0; i < nums.length; i += 1){\n-            int neg = 1;\n-            int n = nums[i];\n-            if (n < 0) {\n-                n = -1 * n;\n-                neg = -1;\n-            }\n-            int digit = 0;\n-            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n-                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n-            }\n-            digits.add(digit);\n-            if (! digits_number.containsKey(digit))\n-                digits_number.put(digit, new ArrayList<Integer>());\n+import java.util.*;\n+\n+public static Integer[] order_by_points(Integer[] nums) {\n+    ArrayList<Integer> digits = new ArrayList<Integer>();\n+    TreeMap<Integer, ArrayList<Integer>> digits_number = new TreeMap<Integer, ArrayList<Integer>>();\n+\n+    for (int i = 0; i < nums.length; i += 1) {\n+        int n = nums[i];\n+        int digit = 0;\n+        int pos = 1;\n+        if (n < 0) {\n+            pos = -1;\n+            n = -n;\n+        }\n+        int temp = n;\n+        int factor = 1;\n+\n+        // compute the digit by multiplying each digit by appropriate power of 10\n+        while (temp > 0) {\n+            digit += pos * (temp % 10) * factor;\n+            factor *= 10;\n+            temp /= 10;\n+        }\n+        digits.add(digit);\n+\n+        if (! digits_number.containsKey(digit)) {\n+            digits_number.put(digit, new ArrayList<Integer>(Arrays.asList(nums[i])));\n+        } else {\n             digits_number.get(digit).add(nums[i]);\n         }\n-        Collections.sort(digits);\n-        \n-        ArrayList<Integer> result = new ArrayList<Integer>();\n-        for (int i = 0; i < digits.size(); i += 1) {\n-            result.addAll(digits_number.get(digits.get(i)));\n+    }\n+\n+    // occupy the container with sorted digits in the order they appeared in the input\n+    ArrayList<Integer> result = new ArrayList<Integer>(nums.length);\n+    for (Map.Entry<Integer, ArrayList<Integer>> entry : digits_number.entrySet()) {\n+        for (int number : entry.getValue()) {\n+            result.add(number);\n         }\n-        return result.toArray(new Integer[] {});\n     }\n+    return result.toArray(new Integer[] {});\n+}\n }",
    "result_reason": " /tmp/humaneval-ORDER_BY_POINTS/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java:[17,1] illegal start of type",
    "test_result": "ERROR"
}