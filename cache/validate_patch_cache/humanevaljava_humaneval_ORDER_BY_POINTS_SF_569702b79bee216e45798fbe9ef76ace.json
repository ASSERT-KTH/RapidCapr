{
    "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<>();\n    HashMap<Integer, ArrayList<Integer>> digit_number = new HashMap<>();\n\n    for (int i = 0; i < nums.length; i++) {\n        int num = nums[i];\n        int sign = 1;\n        if (num < 0) {\n            num = -num;\n            sign = -1;\n        }\n        int digit = 0;\n        while (num > 0) {\n            digit = digit * 10 + num % 10;\n            num /= 10;\n        }\n        digits.add(digit * sign);\n        if (!digit_number.containsKey(digit))\n            digit_number.put(digit, new ArrayList<>());\n        digit_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < digits.size(); i++)\n        result.addAll(digit_number.get(digits.get(i)));\n\n    return result.toArray(new Integer[0]);\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\nindex 4e6cd94..0d190e5 100644\n--- a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n+++ b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n@@ -14,32 +14,33 @@ For example:\n >>> order_by_points([]) == [] */\n \n public class ORDER_BY_POINTS {\n-    public static Integer[] order_by_points(Integer[] nums) {\n-        ArrayList<Integer> digits = new ArrayList<Integer>();\n-        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n+public static Integer[] order_by_points(Integer[] nums) {\n+    ArrayList<Integer> digits = new ArrayList<>();\n+    HashMap<Integer, ArrayList<Integer>> digit_number = new HashMap<>();\n \n-        for (int i = 0; i < nums.length; i += 1){\n-            int neg = 1;\n-            int n = nums[i];\n-            if (n < 0) {\n-                n = -1 * n;\n-                neg = -1;\n-            }\n-            int digit = 0;\n-            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n-                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n-            }\n-            digits.add(digit);\n-            if (! digits_number.containsKey(digit))\n-                digits_number.put(digit, new ArrayList<Integer>());\n-            digits_number.get(digit).add(nums[i]);\n+    for (int i = 0; i < nums.length; i++) {\n+        int num = nums[i];\n+        int sign = 1;\n+        if (num < 0) {\n+            num = -num;\n+            sign = -1;\n         }\n-        Collections.sort(digits);\n-        \n-        ArrayList<Integer> result = new ArrayList<Integer>();\n-        for (int i = 0; i < digits.size(); i += 1) {\n-            result.addAll(digits_number.get(digits.get(i)));\n+        int digit = 0;\n+        while (num > 0) {\n+            digit = digit * 10 + num % 10;\n+            num /= 10;\n         }\n-        return result.toArray(new Integer[] {});\n+        digits.add(digit * sign);\n+        if (!digit_number.containsKey(digit))\n+            digit_number.put(digit, new ArrayList<>());\n+        digit_number.get(digit).add(nums[i]);\n     }\n+    Collections.sort(digits);\n+\n+    ArrayList<Integer> result = new ArrayList<>();\n+    for (int i = 0; i < digits.size(); i++)\n+        result.addAll(digit_number.get(digits.get(i)));\n+\n+    return result.toArray(new Integer[0]);\n+}\n }",
    "result_reason": "   TEST_ORDER_BY_POINTS.test_1:19 array lengths differed, expected.length=21 actual.length=15; arrays first differed at element [5]; expected:<46> but was:<423>",
    "test_result": "FAIL"
}