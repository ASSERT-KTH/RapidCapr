{
    "patch": "public static double getTypedPercent(String[] logs) {\n    int count = 0;\n    int typed = 0;\n    for (String log : logs) {\n        String[] split = log.split(\" \");\n        if (split.length <= 1) {\n            continue;\n        }\n        if (split[1].equals(\"Typed\")) {\n            typed += Integer.parseInt(split[0]);\n        }\n        count += Integer.parseInt(split[0]);\n    }\n    return ((double) typed / (double) count) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..fa6bd2a3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[] logs) {\n+    int count = 0;\n+    int typed = 0;\n+    for (String log : logs) {\n+        String[] split = log.split(\" \");\n+        if (split.length <= 1) {\n+            continue;\n+        }\n+        if (split[1].equals(\"Typed\")) {\n+            typed += Integer.parseInt(split[0]);\n+        }\n+        count += Integer.parseInt(split[0]);\n+    }\n+    return ((double) typed / (double) count) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}