{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  if (isResolved()) {\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  if (resolvedViaRegistry) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  boolean resolvedViaProperties = false;\n  if (!resolvedViaRegistry) {\n    resolveViaProperties(t, enclosing);\n    resolvedViaProperties = isResolved();\n    super.resolveInternal(t, enclosing);\n    if (resolvedViaProperties) {\n      finishPropertyContinuations();\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  if (resolvedViaRegistry && !registry.isLastGeneration()) {\n    JSType resolvedType = getReferencedType();\n    JSType lastGenerationType = null;\n    while (resolvedType != lastGenerationType) {\n      lastGenerationType = resolvedType;\n      resolvedViaProperties = false;\n      if (!resolvedType.isResolved()) {\n        resolvedType.resolveViaProperties(t, enclosing);\n        resolvedViaProperties = resolvedType.isResolved();\n      }\n      if (resolvedViaProperties) {\n        resolvedType.super.resolveInternal(t, enclosing);\n        resolvedType.finishPropertyContinuations();\n        if (resolvedType.detectImplicitPrototypeCycle()) {\n          resolvedType.handleTypeCycle(t);\n        }\n        resolvedType = resolvedType.getReferencedType();\n      }\n    }\n    if (resolvedType.isResolved()) {\n      resolvedType.super.resolveInternal(t, enclosing);\n      resolvedType.finishPropertyContinuations();\n      return resolvedType.registry.isLastGeneration() ?\n          resolvedType.getReferencedType() : resolvedType;\n    }\n  }\n\n  super.resolveInternal(t, enclosing);\n  finishPropertyContinuations();\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..dab5c583 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,72 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  if (isResolved()) {\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  if (resolvedViaRegistry) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+  boolean resolvedViaProperties = false;\n+  if (!resolvedViaRegistry) {\n+    resolveViaProperties(t, enclosing);\n+    resolvedViaProperties = isResolved();\n+    super.resolveInternal(t, enclosing);\n+    if (resolvedViaProperties) {\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+  if (resolvedViaRegistry && !registry.isLastGeneration()) {\n+    JSType resolvedType = getReferencedType();\n+    JSType lastGenerationType = null;\n+    while (resolvedType != lastGenerationType) {\n+      lastGenerationType = resolvedType;\n+      resolvedViaProperties = false;\n+      if (!resolvedType.isResolved()) {\n+        resolvedType.resolveViaProperties(t, enclosing);\n+        resolvedViaProperties = resolvedType.isResolved();\n+      }\n+      if (resolvedViaProperties) {\n+        resolvedType.super.resolveInternal(t, enclosing);\n+        resolvedType.finishPropertyContinuations();\n+        if (resolvedType.detectImplicitPrototypeCycle()) {\n+          resolvedType.handleTypeCycle(t);\n+        }\n+        resolvedType = resolvedType.getReferencedType();\n+      }\n+    }\n+    if (resolvedType.isResolved()) {\n+      resolvedType.super.resolveInternal(t, enclosing);\n+      resolvedType.finishPropertyContinuations();\n+      return resolvedType.registry.isLastGeneration() ?\n+          resolvedType.getReferencedType() : resolvedType;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  super.resolveInternal(t, enclosing);\n+  finishPropertyContinuations();\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}