{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                // there is an offset transition at this instant, handle it\n                int diff = offsetAdjusted - offsetLocal;\n                Instant instantBeforeTransition = new Instant(instantLocal).minus(diff * DateTimeConstants.MILLIS_PER_HOUR);\n                int offsetBeforeTransition = getOffset(instantBeforeTransition.getMillis());\n                if (offsetBeforeTransition != offsetLocal && offsetBeforeTransition != offsetAdjusted) {\n                    // the instant before the transition has its own offset too\n                    // this means that we've jumped over at least two transitions\n                    return offsetBeforeTransition;\n                } else {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..600586bc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,17 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                // there is an offset transition at this instant, handle it\n+                int diff = offsetAdjusted - offsetLocal;\n+                Instant instantBeforeTransition = new Instant(instantLocal).minus(diff * DateTimeConstants.MILLIS_PER_HOUR);\n+                int offsetBeforeTransition = getOffset(instantBeforeTransition.getMillis());\n+                if (offsetBeforeTransition != offsetLocal && offsetBeforeTransition != offsetAdjusted) {\n+                    // the instant before the transition has its own offset too\n+                    // this means that we've jumped over at least two transitions\n+                    return offsetBeforeTransition;\n+                } else {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}