{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    if (escapingOn && pattern.charAt(start) == QUOTE) {\n        // Quoted string, skip over leading quote\n        int lastHold = pos.getIndex() + 1;\n        for (int i = pos.getIndex() + 1; i < pattern.length(); i++) {\n            char c = pattern.charAt(i);\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                // Handle escaped quote\n                i += ESCAPED_QUOTE.length() - 1;\n                continue;\n            } else if (c == QUOTE) {\n                // End of quoted string\n                pos.setIndex(i + 1);\n                return appendTo == null ? null : appendTo.append(pattern, lastHold, i - lastHold);\n            }\n        }\n        // Unterminated quoted string\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }\n    // Non-quoted string\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        char c = pattern.charAt(i);\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            // Handle escaped quote\n            i += ESCAPED_QUOTE.length() - 1;\n            continue;\n        } else if (c == QUOTE) {\n            // Start of quoted string\n            pos.setIndex(i);\n            return appendTo == null ? null : appendTo.append(pattern, lastHold, i - lastHold);\n        } else {\n            // Regular character\n            next(pos);\n        }\n    }\n    // End of input pattern\n    return appendTo == null ? null : appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..7e17ea58 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,48 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+        StringBuffer appendTo, boolean escapingOn) {\n+    int start = pos.getIndex();\n+    if (escapingOn && pattern.charAt(start) == QUOTE) {\n+        // Quoted string, skip over leading quote\n+        int lastHold = pos.getIndex() + 1;\n+        for (int i = pos.getIndex() + 1; i < pattern.length(); i++) {\n+            char c = pattern.charAt(i);\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n+                // Handle escaped quote\n+                i += ESCAPED_QUOTE.length() - 1;\n                 continue;\n-            }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+            } else if (c == QUOTE) {\n+                // End of quoted string\n+                pos.setIndex(i + 1);\n+                return appendTo == null ? null : appendTo.append(pattern, lastHold, i - lastHold);\n             }\n         }\n+        // Unterminated quoted string\n         throw new IllegalArgumentException(\n                 \"Unterminated quoted string at position \" + start);\n     }\n+    // Non-quoted string\n+    int lastHold = start;\n+    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+        char c = pattern.charAt(i);\n+        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+            // Handle escaped quote\n+            i += ESCAPED_QUOTE.length() - 1;\n+            continue;\n+        } else if (c == QUOTE) {\n+            // Start of quoted string\n+            pos.setIndex(i);\n+            return appendTo == null ? null : appendTo.append(pattern, lastHold, i - lastHold);\n+        } else {\n+            // Regular character\n+            next(pos);\n+        }\n+    }\n+    // End of input pattern\n+    return appendTo == null ? null : appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "java.lang.IndexOutOfBoundsException: start 3, end 0, s.length() 25",
    "test_result": "FAIL"
}