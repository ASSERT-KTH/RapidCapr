{
    "patch": "      boolean isOverride =\n          (parent != null && parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild().isGetProp() &&\n           parent.getFirstChild().getLastChild().getString().equals(propertyName) &&\n           parent.getFirstChild().getJSType() != null &&\n           parent.getFirstChild().getJSType().isObject() &&\n           objectType.isEquivalentTo(\n               ObjectType.cast(\n                   parent.getFirstChild().getJSType()).getImplicitPrototype()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..8918d0c7 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,15 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride =\n+          (parent != null && parent.getType() == Token.ASSIGN &&\n+           parent.getFirstChild().isGetProp() &&\n+           parent.getFirstChild().getLastChild().getString().equals(propertyName) &&\n+           parent.getFirstChild().getJSType() != null &&\n+           parent.getFirstChild().getJSType().isObject() &&\n+           objectType.isEquivalentTo(\n+               ObjectType.cast(\n+                   parent.getFirstChild().getJSType()).getImplicitPrototype()));\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}