{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (!isAliasDeclaration(n)) {\n      continue;\n    }\n    Node varChild = n.getChildAtIndex(1);\n    if (!varChild.isQualifiedName()) {\n      report(t, varChild, GOOG_SCOPE_NON_ALIAS_LOCAL, varChild.getString());\n      continue;\n    }\n    String name = varChild.getQualifiedName();\n    Var aliasVar = scope.getVar(name);\n    if (aliasVar != null && aliasVar.getInitialValue() != null \n        && aliasVar.getInitialValue().isQualifiedName()) {\n      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n      if (!aliasVar.isLocal() && !isPrivateAlias(name)) {\n        aliases.put(name, aliasVar);\n        transformation.addAlias(name, qualifiedName);\n      } else if (isPrivateAlias(name)) {\n        report(t, varChild, GOOG_SCOPE_NON_ALIAS_LOCAL, varChild.getString());\n      }\n    }\n  }\n}\n\nprivate boolean isAliasDeclaration(Node n) {\n  return n != null && n.isVar() && n.hasTwoChildren() \n      && n.getFirstChild().isName() && n.getSecondChild() != null;\n}\n\nprivate boolean isPrivateAlias(String str) {\n  return str.startsWith(PRIVATE_PREFIX) && str.substring(3).indexOf('.') == -1;\n}\n\nprivate static final String PRIVATE_PREFIX = \"___\";",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..ec223a12 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,43 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (!isAliasDeclaration(n)) {\n+      continue;\n+    }\n+    Node varChild = n.getChildAtIndex(1);\n+    if (!varChild.isQualifiedName()) {\n+      report(t, varChild, GOOG_SCOPE_NON_ALIAS_LOCAL, varChild.getString());\n+      continue;\n+    }\n+    String name = varChild.getQualifiedName();\n+    Var aliasVar = scope.getVar(name);\n+    if (aliasVar != null && aliasVar.getInitialValue() != null \n+        && aliasVar.getInitialValue().isQualifiedName()) {\n+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+      if (!aliasVar.isLocal() && !isPrivateAlias(name)) {\n+        aliases.put(name, aliasVar);\n+        transformation.addAlias(name, qualifiedName);\n+      } else if (isPrivateAlias(name)) {\n+        report(t, varChild, GOOG_SCOPE_NON_ALIAS_LOCAL, varChild.getString());\n       }\n     }\n+  }\n+}\n+\n+private boolean isAliasDeclaration(Node n) {\n+  return n != null && n.isVar() && n.hasTwoChildren() \n+      && n.getFirstChild().isName() && n.getSecondChild() != null;\n+}\n+\n+private boolean isPrivateAlias(String str) {\n+  return str.startsWith(PRIVATE_PREFIX) && str.substring(3).indexOf('.') == -1;\n+}\n+\n+private static final String PRIVATE_PREFIX = \"___\";\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}