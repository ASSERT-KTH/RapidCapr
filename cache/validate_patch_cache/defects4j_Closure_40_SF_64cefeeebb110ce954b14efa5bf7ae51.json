{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (NodeUtil.isFunctionDeclaration(n)) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      JsName nameInfo = getName(nameNode.getString(), true);\n      recordSet(nameInfo.name, nameNode);\n    }\n  }\n  if (n.isAssign()) {\n    Node target = n.getFirstChild();\n    if (target.isGetProp()) {\n      Node obj = target.getFirstChild();\n      if (obj.isName() && obj.getString().equals(Namespace.JSCompilerGlobal.NAME)) {\n        Node property = target.getSecondChild();\n        if (NodeUtil.isObjectLitKey(property)) {\n          NameInformation ni = createNameInformation(t, property, n);\n          if (ni != null) {\n            recordSet(ni.name, property);\n          }\n        }\n      }\n    } else if (target.isName()) {\n      NameInformation ns = createNameInformation(t, target, n);\n      if (ns != null) {\n        if (ns.isPrototype()) {\n          recordPrototypeSet(ns.getPrototypeClassName(), ns.getPrototypePropertyName(), n);\n        } else if (ns.isModuleExports()) {\n          recordModuleExportsSet(ns.getExportName(), n);\n        } else {\n          recordSet(ns.name, target);\n        }\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n      JsName name = getName(ns.name, false);\n      if (name != null) {\n        refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n      }\n    }\n  }\n  if (n.isName() && isGoogDefineCall(n)) {\n    visitGoogDefineCall(n, parent);\n  } else if (n.isString()) {\n    visitString(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..b1ecea00 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,56 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (NodeUtil.isFunctionDeclaration(n)) {\n+    Node nameNode = n.getFirstChild();\n+    NameInformation ns = createNameInformation(t, nameNode, n);\n+    if (ns != null) {\n+      JsName nameInfo = getName(nameNode.getString(), true);\n+      recordSet(nameInfo.name, nameNode);\n+    }\n+  }\n+  if (n.isAssign()) {\n+    Node target = n.getFirstChild();\n+    if (target.isGetProp()) {\n+      Node obj = target.getFirstChild();\n+      if (obj.isName() && obj.getString().equals(Namespace.JSCompilerGlobal.NAME)) {\n+        Node property = target.getSecondChild();\n+        if (NodeUtil.isObjectLitKey(property)) {\n+          NameInformation ni = createNameInformation(t, property, n);\n+          if (ni != null) {\n+            recordSet(ni.name, property);\n           }\n         }\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+    } else if (target.isName()) {\n+      NameInformation ns = createNameInformation(t, target, n);\n+      if (ns != null) {\n+        if (ns.isPrototype()) {\n+          recordPrototypeSet(ns.getPrototypeClassName(), ns.getPrototypePropertyName(), n);\n+        } else if (ns.isModuleExports()) {\n+          recordModuleExportsSet(ns.getExportName(), n);\n+        } else {\n+          recordSet(ns.name, target);\n         }\n       }\n     }\n+  } else if (n.isCall()) {\n+    Node nameNode = n.getFirstChild();\n+    NameInformation ns = createNameInformation(t, nameNode, n);\n+    if (ns != null && ns.onlyAffectsClassDef) {\n+      JsName name = getName(ns.name, false);\n+      if (name != null) {\n+        refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n+      }\n+    }\n+  }\n+  if (n.isName() && isGoogDefineCall(n)) {\n+    visitGoogDefineCall(n, parent);\n+  } else if (n.isString()) {\n+    visitString(n);\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: package Namespace does not exist",
    "test_result": "ERROR"
}