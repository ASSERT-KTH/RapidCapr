{
    "patch": "public class ConstraintMatcher {\n  public void matchConstraint(ObjectType constraintObj) {\n    if (constraintObj != null && !constraintObj.isNamedType() \n        && !constraintObj.isFunctionType() && !constraintObj.isUnionType()) {\n      if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n  \n  private boolean isPropertyTypeDeclared(String prop) {\n    // implementation\n  }\n  \n  private void defineInferredProperty(String prop, JSType typeToInfer, Object nullObject) {\n    // implementation\n  }\n  \n  private boolean hasProperty(String prop) {\n    // implementation\n  }\n  \n  private JSType getNativeType(JSTypeNative typeNative) {\n    // implementation\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..525f0070 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,39 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n+public class ConstraintMatcher {\n   public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+    if (constraintObj != null && !constraintObj.isNamedType() \n+        && !constraintObj.isFunctionType() && !constraintObj.isUnionType()) {\n+      if (constraintObj.isRecordType()) {\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+          JSType propType = constraintObj.getPropertyType(prop);\n+          if (!isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+            }\n+            defineInferredProperty(prop, typeToInfer, null);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n+  \n+  private boolean isPropertyTypeDeclared(String prop) {\n+    // implementation\n+  }\n+  \n+  private void defineInferredProperty(String prop, JSType typeToInfer, Object nullObject) {\n+    // implementation\n+  }\n+  \n+  private boolean hasProperty(String prop) {\n+    // implementation\n+  }\n+  \n+  private JSType getNativeType(JSTypeNative typeNative) {\n+    // implementation\n+  }\n+}\n }",
    "result_reason": "error: annotation type not applicable to this kind of declaration",
    "test_result": "ERROR"
}