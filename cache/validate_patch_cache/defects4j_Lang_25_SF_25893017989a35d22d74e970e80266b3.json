{
    "patch": "public static String unescape(String str) {\n    if (str == null || str.indexOf('%') == -1) {\n        return str;\n    }\n    int len = str.length();\n    StringBuffer sb = new StringBuffer(len);\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    for (int i = 0; i < len;) {\n        char c = str.charAt(i++);\n        if (c == '%') {\n            try {\n                out.write(Character.digit(str.charAt(i++), 16) << 4 | Character.digit(str.charAt(i++), 16));\n            } catch (Exception ex) {\n                throw new IllegalArgumentException(\"Failed to decode percent encoded string: \" + ex.getMessage(), ex);\n            }\n        } else {\n            if (out.size() > 0) {\n                try {\n                    sb.append(out.toString(\"ISO-8859-1\"));\n                    out.reset();\n                } catch (Exception ex) {\n                    throw new IllegalArgumentException(\"Failed to decode percent encoded string: \" + ex.getMessage(), ex);\n                }\n            }\n            sb.append(c);\n        }\n    }\n    if (out.size() > 0) {\n        try {\n            sb.append(out.toString(\"ISO-8859-1\"));\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(\"Failed to decode percent encoded string: \" + ex.getMessage(), ex);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..916709c1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,42 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    if (str == null || str.indexOf('%') == -1) {\n+        return str;\n+    }\n+    int len = str.length();\n+    StringBuffer sb = new StringBuffer(len);\n+    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+    for (int i = 0; i < len;) {\n+        char c = str.charAt(i++);\n+        if (c == '%') {\n+            try {\n+                out.write(Character.digit(str.charAt(i++), 16) << 4 | Character.digit(str.charAt(i++), 16));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"Failed to decode percent encoded string: \" + ex.getMessage(), ex);\n+            }\n+        } else {\n+            if (out.size() > 0) {\n+                try {\n+                    sb.append(out.toString(\"ISO-8859-1\"));\n+                    out.reset();\n+                } catch (Exception ex) {\n+                    throw new IllegalArgumentException(\"Failed to decode percent encoded string: \" + ex.getMessage(), ex);\n+                }\n+            }\n+            sb.append(c);\n+        }\n+    }\n+    if (out.size() > 0) {\n+        try {\n+            sb.append(out.toString(\"ISO-8859-1\"));\n+        } catch (Exception ex) {\n+            throw new IllegalArgumentException(\"Failed to decode percent encoded string: \" + ex.getMessage(), ex);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}