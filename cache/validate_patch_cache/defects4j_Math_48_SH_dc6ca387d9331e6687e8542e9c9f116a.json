{
    "patch": "// Detect early that algorithm is stuck, instead of waiting for\n// the maximum number of iterations to be exceeded.\nif (FastMath.abs(f1 - f0) < FunctionEvaluations.EPSILON_ACCURACY) {\n    throw new ConvergenceException(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS,\n            x0, x1, f0, f1);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..e2b9ba348 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,12 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting for\n+// the maximum number of iterations to be exceeded.\n+if (FastMath.abs(f1 - f0) < FunctionEvaluations.EPSILON_ACCURACY) {\n+    throw new ConvergenceException(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS,\n+            x0, x1, f0, f1);\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}