{
    "patch": "        // The rhs of the assignment is the caller or an object literal (which should be treated the same),\n        // so it's used by the context. Don't associate it w/ the lhs.\n        //\n        // These fixes only the specific cases where the assignment is the\n        // caller expression or an object literal, but it could be nested deeper in the caller and\n        // we would still get a bug.\n        if (NodeUtil.isCallOrNew(recordNode) && recordNode.getLastChild().equals(n)\n            || recordNode.isObjectLit()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..dbee337d 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,14 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        // The rhs of the assignment is the caller or an object literal (which should be treated the same),\n+        // so it's used by the context. Don't associate it w/ the lhs.\n+        //\n+        // These fixes only the specific cases where the assignment is the\n+        // caller expression or an object literal, but it could be nested deeper in the caller and\n+        // we would still get a bug.\n+        if (NodeUtil.isCallOrNew(recordNode) && recordNode.getLastChild().equals(n)\n+            || recordNode.isObjectLit()) {\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}