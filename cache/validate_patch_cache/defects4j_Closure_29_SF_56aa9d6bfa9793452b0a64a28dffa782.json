{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    for (Reference ref : refs) {\n      Node name = ref.getNode();\n      Node parent = ref.getParent();\n      Node gramps = ref.getGrandparent();\n\n      // Ignore indirect references, like x.y (except x.y(), since\n      // the function referenced by y might reference 'this').\n      //\n      if (parent.isGetProp()) {\n        Preconditions.checkState(parent.getFirstChild() == name);\n        // A call target maybe using the object as a 'this' value.\n        if (gramps.isCall()\n            && gramps.getFirstChild() == parent) {\n          return false;\n        }\n\n        // NOTE(nicksantos): This pass's object-splitting algorithm has\n        // a blind spot. It assumes that if a property isn't defined on an\n        // object, then the value is undefined. This is not true, because\n        // Object.prototype can have arbitrary properties on it.\n        //\n        // We short-circuit this problem by bailing out if we see a reference\n        // to a property that isn't defined on the object literal. This\n        // isn't a perfect algorithm, but it should catch most cases.\n        continue;\n      }\n\n      // Only rewrite VAR declarations or simple assignment statements\n      if (!isVarOrAssignExprLhs(name)) {\n         continue;\n      }\n\n      Node val = ref.getAssignedValue();\n      if (val == null) {\n        // A var with no assignment.\n        continue;\n      }\n\n      // We're looking for object literal assignments only.\n      if (!val.isObjectLit()) {\n        continue;\n      }\n\n      // Make sure that the value is not self-refential.\n      // IOW, disallow things like x = {b: x.a}.\n      // Also, ES5 getters/setters aren't handled by this pass.\n      // The algorithm is based on the fact that self-referential properties in an object\n      // can't be used to define other object properties, so the value of self-referential \n      // property shouldn't be used anywhere in the object definition except for the \n      // property assignment itself.\n      for (Node child = val.getFirstChild(); child != null;\n           child = child.getNext()) {\n        if (child.isStringKey()) {\n          Node childVal = child.getFirstChild();\n\n          if (childVal == null) {\n            continue;\n          }\n\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          if (isReferenceInNodeOrChild(child, refs, child)) {\n            // There's a self-referential assignment\n            return false;\n          }\n        } else if (!child.isSpread()) {\n          // The children must be either regular keys or spread operations.\n          // Bail out if we encounter something else.\n          return false;\n        }\n      }\n\n      // We have found an acceptable object literal assignment. As\n      // long as there are no other assignments that mess things up,\n      // we can inline.\n      return true;\n    }\n    return false;\n  }\n\n  private boolean isReferenceInNodeOrChild(Node node, List<Reference> refs, Node initialChildNode) {\n    for (Reference ref : refs) {\n      if (ref.getNode() != initialChildNode) {\n        // Ignore references that are not descendants of the initialChildNode\n        continue;\n      }\n      if (ref.getParent() == node) {\n        return true;\n      }\n      if (isReferenceInNodeOrChild(node, ref.getChildReferences(), initialChildNode)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..95ac8d37 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,103 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n+private boolean isInlinableObject(List<Reference> refs) {\n+    for (Reference ref : refs) {\n+      Node name = ref.getNode();\n+      Node parent = ref.getParent();\n+      Node gramps = ref.getGrandparent();\n+\n+      // Ignore indirect references, like x.y (except x.y(), since\n+      // the function referenced by y might reference 'this').\n+      //\n+      if (parent.isGetProp()) {\n+        Preconditions.checkState(parent.getFirstChild() == name);\n+        // A call target maybe using the object as a 'this' value.\n+        if (gramps.isCall()\n+            && gramps.getFirstChild() == parent) {\n+          return false;\n+        }\n+\n+        // NOTE(nicksantos): This pass's object-splitting algorithm has\n+        // a blind spot. It assumes that if a property isn't defined on an\n+        // object, then the value is undefined. This is not true, because\n+        // Object.prototype can have arbitrary properties on it.\n         //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+        // We short-circuit this problem by bailing out if we see a reference\n+        // to a property that isn't defined on the object literal. This\n+        // isn't a perfect algorithm, but it should catch most cases.\n+        continue;\n+      }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+      // Only rewrite VAR declarations or simple assignment statements\n+      if (!isVarOrAssignExprLhs(name)) {\n+         continue;\n+      }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+      Node val = ref.getAssignedValue();\n+      if (val == null) {\n+        // A var with no assignment.\n+        continue;\n+      }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+      // We're looking for object literal assignments only.\n+      if (!val.isObjectLit()) {\n+        continue;\n+      }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+      // Make sure that the value is not self-refential.\n+      // IOW, disallow things like x = {b: x.a}.\n+      // Also, ES5 getters/setters aren't handled by this pass.\n+      // The algorithm is based on the fact that self-referential properties in an object\n+      // can't be used to define other object properties, so the value of self-referential \n+      // property shouldn't be used anywhere in the object definition except for the \n+      // property assignment itself.\n+      for (Node child = val.getFirstChild(); child != null;\n+           child = child.getNext()) {\n+        if (child.isStringKey()) {\n+          Node childVal = child.getFirstChild();\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n+          if (childVal == null) {\n+            continue;\n           }\n \n-\n-          Node childVal = child.getFirstChild();\n           // Check if childVal is the parent of any of the passed in\n           // references, as that is how self-referential assignments\n           // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+          if (isReferenceInNodeOrChild(child, refs, child)) {\n+            // There's a self-referential assignment\n+            return false;\n           }\n+        } else if (!child.isSpread()) {\n+          // The children must be either regular keys or spread operations.\n+          // Bail out if we encounter something else.\n+          return false;\n         }\n+      }\n \n+      // We have found an acceptable object literal assignment. As\n+      // long as there are no other assignments that mess things up,\n+      // we can inline.\n+      return true;\n+    }\n+    return false;\n+  }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+  private boolean isReferenceInNodeOrChild(Node node, List<Reference> refs, Node initialChildNode) {\n+    for (Reference ref : refs) {\n+      if (ref.getNode() != initialChildNode) {\n+        // Ignore references that are not descendants of the initialChildNode\n+        continue;\n+      }\n+      if (ref.getParent() == node) {\n+        return true;\n+      }\n+      if (isReferenceInNodeOrChild(node, ref.getChildReferences(), initialChildNode)) {\n+        return true;\n       }\n-      return ret;\n     }\n+    return false;\n+  }\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}