{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            readTypeVariableBounds((TypeVariable<?>) type);\n        } else {\n            if (type instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) type;\n                for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            } else {\n                registerTypeVariablesOn(type);\n            }\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        if (actualTypeArgument instanceof TypeVariable) {\n            readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readTypeVariableBounds(TypeVariable<?> variable) {\n    for (Type type : variable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n            if (!typeVar.getName().equals(variable.getName())) {\n                readTypeVariableBounds(typeVar);\n            }\n        } else {\n            if (type instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) type;\n                for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            } else {\n                registerTypeVariablesOn(type);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..8df42509a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,54 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariableBounds((TypeVariable<?>) type);\n+        } else {\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) type;\n+                for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readTypeVariableBounds(TypeVariable<?> variable) {\n+    for (Type type : variable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+            if (!typeVar.getName().equals(variable.getName())) {\n+                readTypeVariableBounds(typeVar);\n+            }\n+        } else {\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) type;\n+                for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}