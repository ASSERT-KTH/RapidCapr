{
    "patch": "public static double getTypedPercent(String json) {\n  ObjectMapper mapper = new ObjectMapper();\n  double count = 0.0;\n  double typedCount = 0.0;\n  \n  try {\n    JsonNode root = mapper.readTree(json);\n    JsonNode nodes = root.get(\"nodes\");\n    for (JsonNode node : nodes) {\n      JsonNode type = node.get(\"type\");\n      count++;\n      if (type != null && !type.isNull()) {\n        typedCount++;\n      }\n    }\n  } catch (JsonProcessingException e) {\n    e.printStackTrace();\n  }\n  \n  if (count == 0.0) {\n    return 0.0;\n  }\n  \n  return (typedCount / count) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..48b41369 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+  ObjectMapper mapper = new ObjectMapper();\n+  double count = 0.0;\n+  double typedCount = 0.0;\n+  \n+  try {\n+    JsonNode root = mapper.readTree(json);\n+    JsonNode nodes = root.get(\"nodes\");\n+    for (JsonNode node : nodes) {\n+      JsonNode type = node.get(\"type\");\n+      count++;\n+      if (type != null && !type.isNull()) {\n+        typedCount++;\n+      }\n+    }\n+  } catch (JsonProcessingException e) {\n+    e.printStackTrace();\n+  }\n+  \n+  if (count == 0.0) {\n+    return 0.0;\n+  }\n+  \n+  return (typedCount / count) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}