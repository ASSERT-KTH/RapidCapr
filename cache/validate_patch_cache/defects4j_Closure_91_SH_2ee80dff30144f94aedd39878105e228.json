{
    "patch": "if (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n  Node rhs = lhs.getNext();\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle\n    // nested assignments properly (e.g., (a = this).property = c;),\n    // assignLhsChild should not be overridden.\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs;\n    }\n  } else {\n    // Only traverse the right side if it's not an assignment to a prototype\n    // property or subproperty.\n    if (NodeUtil.isGet(lhs)) {\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP &&\n          (llhs.getLastChild().getString().equals(\"prototype\") ||\n           llhs.getLastChild().getString().equals(\"constructor\"))) {\n        return false;\n      }\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (NodeUtil.isPrototypeProperty(lhs)) {\n      return false;\n    }\n\n    // Allow functions that are conditionally constructed if their declaration is inside a\n    // 'goog.scope' block.\n    if (NodeUtil.isExecutedOnlyConditionally(lhs)) {\n      Node current = parent;\n      while (current != null) {\n        if (NodeUtil.isGoogScopeBlock(current)) {\n          return true;\n        }\n        current = current.getParent();\n      }\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a3eaa3f6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,48 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+  Node rhs = lhs.getNext();\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle\n+    // nested assignments properly (e.g., (a = this).property = c;),\n+    // assignLhsChild should not be overridden.\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs;\n+    }\n+  } else {\n+    // Only traverse the right side if it's not an assignment to a prototype\n+    // property or subproperty.\n+    if (NodeUtil.isGet(lhs)) {\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP &&\n+          (llhs.getLastChild().getString().equals(\"prototype\") ||\n+           llhs.getLastChild().getString().equals(\"constructor\"))) {\n+        return false;\n+      }\n+    }\n+\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isPrototypeProperty(lhs)) {\n+      return false;\n+    }\n+\n+    // Allow functions that are conditionally constructed if their declaration is inside a\n+    // 'goog.scope' block.\n+    if (NodeUtil.isExecutedOnlyConditionally(lhs)) {\n+      Node current = parent;\n+      while (current != null) {\n+        if (NodeUtil.isGoogScopeBlock(current)) {\n+          return true;\n+        }\n+        current = current.getParent();\n+      }\n+      return false;\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}