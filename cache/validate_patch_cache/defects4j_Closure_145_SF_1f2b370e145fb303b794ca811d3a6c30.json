{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n        n = n.getLastChild();\n        // Check if label has an empty statement\n        if (n.getType() == Token.EMPTY) {\n            if (n.getNext().getType() != Token.FUNCTION && n.getNext().getType() != Token.DO) {\n                return false;\n            }\n            n = n.getNext();\n        }\n    }\n    // Check if node is a block\n    if (n.getType() == Token.BLOCK && n.hasChildren()) {\n        Node firstChild = n.getFirstChild();\n        Node lastChild = n.getLastChild();\n        // Check if block has exactly one child\n        if (firstChild == lastChild) {\n            return isOneExactlyFunctionOrDo(firstChild);\n        }\n        return false;\n    }\n    // Check if node is a function or do\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..47792e19 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,30 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.LABEL) {\n+        n = n.getLastChild();\n+        // Check if label has an empty statement\n+        if (n.getType() == Token.EMPTY) {\n+            if (n.getNext().getType() != Token.FUNCTION && n.getNext().getType() != Token.DO) {\n+                return false;\n+            }\n+            n = n.getNext();\n+        }\n+    }\n+    // Check if node is a block\n+    if (n.getType() == Token.BLOCK && n.hasChildren()) {\n+        Node firstChild = n.getFirstChild();\n+        Node lastChild = n.getLastChild();\n+        // Check if block has exactly one child\n+        if (firstChild == lastChild) {\n+            return isOneExactlyFunctionOrDo(firstChild);\n+        }\n+        return false;\n+    }\n+    // Check if node is a function or do\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}