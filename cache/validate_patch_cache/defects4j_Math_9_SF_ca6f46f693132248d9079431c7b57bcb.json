{
    "patch": "    public Line revert() {\n        final Vector3D zero = Vector3D.ZERO;\n        final Vector3D revertedDirection = direction.negate();\n        final double delta = 1e-12;\n        if (Math.abs(revertedDirection.getX() - zero.getX()) < delta\n                && Math.abs(revertedDirection.getY() - zero.getY()) < delta\n                && Math.abs(revertedDirection.getZ() - zero.getZ()) < delta) {\n            return new Line(zero, Vector3D.PLUS_I);\n        } else {\n            return new Line(zero, revertedDirection);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..9c865516f 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,8 +84,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+        final Vector3D zero = Vector3D.ZERO;\n+        final Vector3D revertedDirection = direction.negate();\n+        final double delta = 1e-12;\n+        if (Math.abs(revertedDirection.getX() - zero.getX()) < delta\n+                && Math.abs(revertedDirection.getY() - zero.getY()) < delta\n+                && Math.abs(revertedDirection.getZ() - zero.getZ()) < delta) {\n+            return new Line(zero, Vector3D.PLUS_I);\n+        } else {\n+            return new Line(zero, revertedDirection);\n+        }\n     }\n \n     /** Get the normalized direction vector.",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028581782127907653>",
    "test_result": "FAIL"
}