{
    "patch": "import org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.util.FastMath;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(),m.getColumnDimension());\n    for (int i = 0; i < sqrtD.getRowDimension(); i++) {\n        sqrtD.setEntry(i,i, FastMath.sqrt(dec.getRealEigenvalue(i)));\n    }\n    final RealMatrix v = dec.getV();\n    final DecompositionSolver solver = new LUDecomposition(sqrtD).getSolver();\n    return v.multiply(solver.getInverse()).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b7b051214 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.DecompositionSolver;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.util.FastMath;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(),m.getColumnDimension());\n+    for (int i = 0; i < sqrtD.getRowDimension(); i++) {\n+        sqrtD.setEntry(i,i, FastMath.sqrt(dec.getRealEigenvalue(i)));\n     }\n+    final RealMatrix v = dec.getV();\n+    final DecompositionSolver solver = new LUDecomposition(sqrtD).getSolver();\n+    return v.multiply(solver.getInverse()).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}