{
    "patch": "              case Token.CATCH:\n              case Token.FUNCTION:\n              case Token.SCRIPT:\n              case Token.MODULE_BODY:\n                if (NodeUtil.isFunctionExpression(parent)) {\n                  // We ignore assignments to function expressions,\n                  // because we handle the function declaration separately.\n                  return;\n                }\n                if (isGlobalNameReference(name, scope)) {\n                  if (isGlobalScope(scope)) {\n                    handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                  } else {\n                    handleSetFromLocal(module, scope, n, parent, name);\n                  }\n                }\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n            break;\n          case Token.NAME:\n            // This may be a variable get or set.\n            if (parent != null) {\n              switch (parent.getType()) {\n                case Token.VAR:\n                  isSet = true;\n                  Node rvalue = n.getFirstChild();\n                  type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                  break;\n                case Token.ASSIGN:\n                  if (parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = getValueType(n.getNext());\n                  }\n                  break;\n                case Token.GETPROP:\n                  return;\n                case Token.FUNCTION:\n                  Node gramps = parent.getParent();\n                  if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                    return;\n                  }\n                  isSet = true;\n                  type = Name.Type.FUNCTION;\n                  break;\n                case Token.CATCH:\n                case Token.SCRIPT:\n                case Token.MODULE_BODY:\n                  if (NodeUtil.isFunctionExpression(parent)) {\n                    // We ignore assignments to function expressions\n                    // because we handle the function declaration separately\n                    return;\n                  }\n                  if (isGlobalNameReference(name, scope)) {\n                    if (isGlobalScope(scope)) {\n                      handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                    } else {\n                      handleSetFromLocal(module, scope, n, parent, name);\n                    }\n                  }\n                  break;\n                case Token.INC:\n                case Token.DEC:\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  break;\n                default:\n                  if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = Name.Type.OTHER;\n                  }\n              }\n            }\n            name = n.getString();\n            break;\n          case Token.GETPROP:\n            // This may be a namespaced name get or set.\n            if (parent != null) {\n              switch (parent.getType()) {\n                case Token.ASSIGN:\n                  if (parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = getValueType(n.getNext());\n                    isPropAssign = true;\n                  }\n                  break;\n                case Token.INC:\n                case Token.DEC:\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  break;\n                case Token.GETPROP:\n                  return;\n                case Token.OBJECTLIT:\n                  if (parent.getParent().getType() == Token.CALL) return;\n                  //$FALL-THROUGH$",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..1a4a48e5 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,106 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+              case Token.CATCH:\n+              case Token.FUNCTION:\n+              case Token.SCRIPT:\n+              case Token.MODULE_BODY:\n+                if (NodeUtil.isFunctionExpression(parent)) {\n+                  // We ignore assignments to function expressions,\n+                  // because we handle the function declaration separately.\n+                  return;\n+                }\n+                if (isGlobalNameReference(name, scope)) {\n+                  if (isGlobalScope(scope)) {\n+                    handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                  } else {\n+                    handleSetFromLocal(module, scope, n, parent, name);\n+                  }\n+                }\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+            break;\n+          case Token.NAME:\n+            // This may be a variable get or set.\n+            if (parent != null) {\n+              switch (parent.getType()) {\n+                case Token.VAR:\n+                  isSet = true;\n+                  Node rvalue = n.getFirstChild();\n+                  type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n+                  break;\n+                case Token.ASSIGN:\n+                  if (parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = getValueType(n.getNext());\n+                  }\n+                  break;\n+                case Token.GETPROP:\n+                  return;\n+                case Token.FUNCTION:\n+                  Node gramps = parent.getParent();\n+                  if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                    return;\n+                  }\n+                  isSet = true;\n+                  type = Name.Type.FUNCTION;\n+                  break;\n+                case Token.CATCH:\n+                case Token.SCRIPT:\n+                case Token.MODULE_BODY:\n+                  if (NodeUtil.isFunctionExpression(parent)) {\n+                    // We ignore assignments to function expressions\n+                    // because we handle the function declaration separately\n+                    return;\n+                  }\n+                  if (isGlobalNameReference(name, scope)) {\n+                    if (isGlobalScope(scope)) {\n+                      handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                    } else {\n+                      handleSetFromLocal(module, scope, n, parent, name);\n+                    }\n+                  }\n+                  break;\n+                case Token.INC:\n+                case Token.DEC:\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  break;\n+                default:\n+                  if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = Name.Type.OTHER;\n+                  }\n+              }\n+            }\n+            name = n.getString();\n+            break;\n+          case Token.GETPROP:\n+            // This may be a namespaced name get or set.\n+            if (parent != null) {\n+              switch (parent.getType()) {\n+                case Token.ASSIGN:\n+                  if (parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = getValueType(n.getNext());\n+                    isPropAssign = true;\n+                  }\n+                  break;\n+                case Token.INC:\n+                case Token.DEC:\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  break;\n+                case Token.GETPROP:\n+                  return;\n+                case Token.OBJECTLIT:\n+                  if (parent.getParent().getType() == Token.CALL) return;\n+                  //$FALL-THROUGH$\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}