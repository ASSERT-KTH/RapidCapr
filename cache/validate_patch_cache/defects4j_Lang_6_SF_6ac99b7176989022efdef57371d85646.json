{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        pos = handleBackspace(input, out, pos, consumed);\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n\nprivate int handleBackspace(CharSequence input, Writer out, int pos, int consumed) throws IOException {\n    // Assume phase\n    int back = 0;\n    // Correct assumption\n    for (int pt = 0; pt < consumed; pt++) {\n        if (Character.getType(Character.codePointAt(input, pos + pt)) == Character.CONTROL) {\n            back++;\n        }\n    }\n    // No backspace found, return pos unchanged\n    if (back == 0) {\n        return pos;\n    }\n    // Update phase\n    StringBuilder builder = new StringBuilder();\n    int backCharCount = 0;\n    for (int pt = 0; pt < consumed; pt++) {\n        int codePoint = Character.codePointAt(input, pos + pt);\n        if (Character.getType(codePoint) == Character.CONTROL) {\n            backCharCount++;\n            if (codePoint == '\\b') {\n                if (builder.length() > 0) {\n                    builder.deleteCharAt(builder.length() - 1);\n                } else if (pos + pt > 0) {\n                    return backspaceOverflows(input, out, pos, pt);\n                }\n            }\n        } else {\n            builder.appendCodePoint(codePoint);\n        }\n    }\n    // Write the result\n    out.write(builder.toString());\n    return pos + (consumed - backCharCount);\n}\n\nprivate int backspaceOverflows(CharSequence input, Writer out, int pos, int pt) throws IOException {\n    int end = pos + pt;\n    StringBuilder builder = new StringBuilder(input.length());\n    builder.append(input.subSequence(0, end - 1));\n    builder.append(' ');\n    builder.append(input.subSequence(end, input.length()));\n    out.write(builder.toString());\n    return pos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ca0a8694 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,75 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            char[] c = Character.toChars(Character.codePointAt(input, pos));\n+            out.write(c);\n+            pos+= c.length;\n+            continue;\n         }\n-        if (input == null) {\n-            return;\n+        pos = handleBackspace(input, out, pos, consumed);\n+        for (int pt = 0; pt < consumed; pt++) {\n+            pos += Character.charCount(Character.codePointAt(input, pos));\n         }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    }\n+}\n+\n+private int handleBackspace(CharSequence input, Writer out, int pos, int consumed) throws IOException {\n+    // Assume phase\n+    int back = 0;\n+    // Correct assumption\n+    for (int pt = 0; pt < consumed; pt++) {\n+        if (Character.getType(Character.codePointAt(input, pos + pt)) == Character.CONTROL) {\n+            back++;\n+        }\n+    }\n+    // No backspace found, return pos unchanged\n+    if (back == 0) {\n+        return pos;\n+    }\n+    // Update phase\n+    StringBuilder builder = new StringBuilder();\n+    int backCharCount = 0;\n+    for (int pt = 0; pt < consumed; pt++) {\n+        int codePoint = Character.codePointAt(input, pos + pt);\n+        if (Character.getType(codePoint) == Character.CONTROL) {\n+            backCharCount++;\n+            if (codePoint == '\\b') {\n+                if (builder.length() > 0) {\n+                    builder.deleteCharAt(builder.length() - 1);\n+                } else if (pos + pt > 0) {\n+                    return backspaceOverflows(input, out, pos, pt);\n+                }\n             }\n+        } else {\n+            builder.appendCodePoint(codePoint);\n         }\n     }\n+    // Write the result\n+    out.write(builder.toString());\n+    return pos + (consumed - backCharCount);\n+}\n+\n+private int backspaceOverflows(CharSequence input, Writer out, int pos, int pt) throws IOException {\n+    int end = pos + pt;\n+    StringBuilder builder = new StringBuilder(input.length());\n+    builder.append(input.subSequence(0, end - 1));\n+    builder.append(' ');\n+    builder.append(input.subSequence(end, input.length()));\n+    out.write(builder.toString());\n+    return pos;\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: escapeJava(String) failed expected:<\\\\\\b[]\\t\\r> but was:<\\\\\\b[ \b \n]\\t\\r>",
    "test_result": "FAIL"
}