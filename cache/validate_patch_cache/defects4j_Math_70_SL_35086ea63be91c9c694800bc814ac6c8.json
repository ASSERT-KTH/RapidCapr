{
    "patch": "if (Double.isNaN(min) || Double.isNaN(max) || f == null) {\n    return Double.NaN;\n}\n\ndouble fMin = f.value(min);\ndouble fMax = f.value(max);\n\nif (Double.isNaN(fMin) || Double.isNaN(fMax) || fMin * fMax > 0 || min >= max) {\n    return Double.NaN;\n}\n\ndouble fInitial = f.value(initial);\nif(Double.isNaN(fInitial) || Double.isInfinite(fInitial)){\n    fInitial = (fMax+fMin)/2.0; // Choose midpoint as initial value\n}\n\nif (fInitial == 0) {\n    return initial;\n}\n\nif (fMin * fInitial < 0) {\n    return solve(f, min, initial);\n} else if (fMax * fInitial < 0) {\n    return solve(f, initial, max);\n} else if (Math.abs(fInitial) < solver.getAbsoluteAccuracy()) {\n    return initial;\n} else {\n    return solve(f, min, max);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..0bfc61fb0 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,35 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (Double.isNaN(min) || Double.isNaN(max) || f == null) {\n+    return Double.NaN;\n+}\n+\n+double fMin = f.value(min);\n+double fMax = f.value(max);\n+\n+if (Double.isNaN(fMin) || Double.isNaN(fMax) || fMin * fMax > 0 || min >= max) {\n+    return Double.NaN;\n+}\n+\n+double fInitial = f.value(initial);\n+if(Double.isNaN(fInitial) || Double.isInfinite(fInitial)){\n+    fInitial = (fMax+fMin)/2.0; // Choose midpoint as initial value\n+}\n+\n+if (fInitial == 0) {\n+    return initial;\n+}\n+\n+if (fMin * fInitial < 0) {\n+    return solve(f, min, initial);\n+} else if (fMax * fInitial < 0) {\n+    return solve(f, initial, max);\n+} else if (Math.abs(fInitial) < solver.getAbsoluteAccuracy()) {\n+    return initial;\n+} else {\n+    return solve(f, min, max);\n+}\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}