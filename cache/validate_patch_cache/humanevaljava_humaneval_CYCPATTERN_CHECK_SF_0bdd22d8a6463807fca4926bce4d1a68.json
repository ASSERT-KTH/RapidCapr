{
    "patch": "public static boolean cycpattern_check(String a, String b) {\n    int n = a.length();\n    int m = b.length();\n    if (n < m) return false;\n\n    // Check if b is a substring of a\n    if (a.contains(b)) return true;\n\n    // Check if b is a cyclic permutation of some substring of a\n    for (int i = 0; i < n; i++) {\n        if (i + m > n) break;\n        \n        String sub_a = a.substring(i, i + m);\n        if (is_cyclic_permutation(sub_a, b)) return true;\n    }\n\n    return false;\n}\n\n// Helper function to check if two strings are cyclic permutations of each other\npublic static boolean is_cyclic_permutation(String s1, String s2) {\n    if (s1.length() != s2.length()) return false;\n\n    // Generate all cyclic permutations of s1 and check if s2 is among them\n    for (int i = 0; i < s1.length(); i++) {\n        String rotated_s1 = s1.substring(i) + s1.substring(0, i);\n        if (rotated_s1.equals(s2)) return true;\n    }\n    \n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\nindex 763802b..684dc58 100644\n--- a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\n+++ b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\n@@ -9,14 +9,35 @@ package humaneval.buggy;\n // cycpattern_check(\"himenss\",\"simen\") => True\n \n public class CYCPATTERN_CHECK {\n-    public static boolean cycpattern_check(String a, String b) {\n-        int l = b.length();\n-        String pat = b;\n-        for (int i = 0; i < a.length(); i += 1) {\n-            for (int j = 0; j < l; j += 1) {\n-                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n-            }\n-        }\n-        return false;\n+public static boolean cycpattern_check(String a, String b) {\n+    int n = a.length();\n+    int m = b.length();\n+    if (n < m) return false;\n+\n+    // Check if b is a substring of a\n+    if (a.contains(b)) return true;\n+\n+    // Check if b is a cyclic permutation of some substring of a\n+    for (int i = 0; i < n; i++) {\n+        if (i + m > n) break;\n+        \n+        String sub_a = a.substring(i, i + m);\n+        if (is_cyclic_permutation(sub_a, b)) return true;\n+    }\n+\n+    return false;\n+}\n+\n+// Helper function to check if two strings are cyclic permutations of each other\n+public static boolean is_cyclic_permutation(String s1, String s2) {\n+    if (s1.length() != s2.length()) return false;\n+\n+    // Generate all cyclic permutations of s1 and check if s2 is among them\n+    for (int i = 0; i < s1.length(); i++) {\n+        String rotated_s1 = s1.substring(i) + s1.substring(0, i);\n+        if (rotated_s1.equals(s2)) return true;\n     }\n+    \n+    return false;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}