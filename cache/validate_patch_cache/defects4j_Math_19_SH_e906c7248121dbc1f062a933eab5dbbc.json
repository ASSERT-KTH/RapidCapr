{
    "patch": "double sum = 0.0;\nfor (int i = 0; i < init.length; i++) {\n    sum += FastMath.max(FastMath.abs(init[i]), FastMath.max(FastMath.abs(lB[i]), FastMath.abs(uB[i])));\n}\nif (sum > 1e18) {\n    throw new NumberIsTooLargeException(sum, 1e18, false);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..da28b30d6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,13 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+double sum = 0.0;\n+for (int i = 0; i < init.length; i++) {\n+    sum += FastMath.max(FastMath.abs(init[i]), FastMath.max(FastMath.abs(lB[i]), FastMath.abs(uB[i])));\n+}\n+if (sum > 1e18) {\n+    throw new NumberIsTooLargeException(sum, 1e18, false);\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}