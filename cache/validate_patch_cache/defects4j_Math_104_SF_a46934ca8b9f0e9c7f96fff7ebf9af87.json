{
    "patch": "public static double regularizedGammaP(double a, double x, double eps, int maxIter) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments for regularizedGammaP(a,x): a must be greater than zero and x must be non-negative.\");\n    }\n    double gp = Gamma.gammaP(a, x, eps, maxIter);\n    return gp / Gamma.gamma(a, eps, maxIter);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b0e562ef9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,13 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double eps, int maxIter) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for regularizedGammaP(a,x): a must be greater than zero and x must be non-negative.\");\n+    }\n+    double gp = Gamma.gammaP(a, x, eps, maxIter);\n+    return gp / Gamma.gamma(a, eps, maxIter);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}