{
    "patch": "        long millis = getMillis();\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        \n        // Extract years, months and days and reset them to 0\n        int years = result.getYears();\n        int months = result.getMonths();\n        int days = result.getDays();\n        result = result.withYears(0).withMonths(0).withDays(0);\n\n        // Add years in appropriate increments\n        if (years != 0) {\n            int currentYears = result.getYears();\n            int newYears = FieldUtils.safeAdd(currentYears, years);\n            result = result.withYears(newYears);\n        }\n        \n        // Add months and adjust year count as appropriate\n        if (months != 0) {\n            int currentYears = result.getYears();\n            int currentMonths = result.getMonths();\n            int newMonths = FieldUtils.safeAdd(currentMonths, months) % 12;\n            int yearIncrement = FieldUtils.safeDivide(FieldUtils.safeAdd(currentMonths, months), 12);\n            int newYears = FieldUtils.safeAdd(currentYears, yearIncrement);\n            result = result.withYears(newYears).withMonths(newMonths);\n        }\n        \n        // Add days and adjust month/year count as appropriate\n        if (days != 0) {\n            int currentYears = result.getYears();\n            int currentMonths = result.getMonths();\n            int currentDays = result.getDays();\n            int newDays = FieldUtils.safeAdd(currentDays, days);\n            int monthIncrement = FieldUtils.safeDivide(newDays, ISOChronology.getInstanceUTC().daysInMonth(newYears, currentMonths));\n            int newMonths = FieldUtils.safeAdd(currentMonths, monthIncrement) % 12;\n            int yearIncrement = FieldUtils.safeDivide(FieldUtils.safeAdd(currentMonths, monthIncrement), 12);\n            int newYears = FieldUtils.safeAdd(currentYears, yearIncrement);\n            result = result.withYears(newYears).withMonths(newMonths).withDays(newDays % ISOChronology.getInstanceUTC().daysInMonth(newYears, newMonths));\n        }\n\n        // Call normalizedStandard on the final result\n        return result.normalizedStandard(type);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f804ff4b 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,51 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        long millis = getMillis();\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        \n+        // Extract years, months and days and reset them to 0\n+        int years = result.getYears();\n+        int months = result.getMonths();\n+        int days = result.getDays();\n+        result = result.withYears(0).withMonths(0).withDays(0);\n+\n+        // Add years in appropriate increments\n+        if (years != 0) {\n+            int currentYears = result.getYears();\n+            int newYears = FieldUtils.safeAdd(currentYears, years);\n+            result = result.withYears(newYears);\n         }\n-        return result;\n-    }\n+        \n+        // Add months and adjust year count as appropriate\n+        if (months != 0) {\n+            int currentYears = result.getYears();\n+            int currentMonths = result.getMonths();\n+            int newMonths = FieldUtils.safeAdd(currentMonths, months) % 12;\n+            int yearIncrement = FieldUtils.safeDivide(FieldUtils.safeAdd(currentMonths, months), 12);\n+            int newYears = FieldUtils.safeAdd(currentYears, yearIncrement);\n+            result = result.withYears(newYears).withMonths(newMonths);\n+        }\n+        \n+        // Add days and adjust month/year count as appropriate\n+        if (days != 0) {\n+            int currentYears = result.getYears();\n+            int currentMonths = result.getMonths();\n+            int currentDays = result.getDays();\n+            int newDays = FieldUtils.safeAdd(currentDays, days);\n+            int monthIncrement = FieldUtils.safeDivide(newDays, ISOChronology.getInstanceUTC().daysInMonth(newYears, currentMonths));\n+            int newMonths = FieldUtils.safeAdd(currentMonths, monthIncrement) % 12;\n+            int yearIncrement = FieldUtils.safeDivide(FieldUtils.safeAdd(currentMonths, monthIncrement), 12);\n+            int newYears = FieldUtils.safeAdd(currentYears, yearIncrement);\n+            result = result.withYears(newYears).withMonths(newMonths).withDays(newDays % ISOChronology.getInstanceUTC().daysInMonth(newYears, newMonths));\n+        }\n+\n+        // Call normalizedStandard on the final result\n+        return result.normalizedStandard(type);\n \n }",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}