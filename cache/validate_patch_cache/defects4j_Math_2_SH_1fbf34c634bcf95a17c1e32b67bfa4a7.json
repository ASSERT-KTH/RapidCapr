{
    "patch": "if (getPopulationSize() == 0 || getSampleSize() == 0) {\n    return 0.0;\n} else {\n    double successRatio = ((double) getNumberOfSuccesses()) / ((double) getPopulationSize());\n    double mean = successRatio * ((double) getSampleSize());\n    if (mean < 0.0) {\n        return 0.0;\n    }\n    return mean;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..0e92e03a3 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,16 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+if (getPopulationSize() == 0 || getSampleSize() == 0) {\n+    return 0.0;\n+} else {\n+    double successRatio = ((double) getNumberOfSuccesses()) / ((double) getPopulationSize());\n+    double mean = successRatio * ((double) getSampleSize());\n+    if (mean < 0.0) {\n+        return 0.0;\n+    }\n+    return mean;\n+}\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}