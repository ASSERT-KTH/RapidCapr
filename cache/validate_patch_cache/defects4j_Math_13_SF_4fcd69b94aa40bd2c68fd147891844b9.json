{
    "patch": "import org.apache.commons.math3.linear.*;\nimport org.apache.commons.math3.util.FastMath;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrt = null;\n    try {\n        CholeskyDecomposition chol = new CholeskyDecomposition(m);\n        sqrt = chol.getL();\n    } catch (Exception e) {\n        // handle exception\n    }\n    if (sqrt == null) {\n        sqrt = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            for (int j = 0; j < m.getColumnDimension(); j++) {\n                sqrt.setEntry(i, j, FastMath.sqrt(m.getEntry(i, j)));\n            }\n        }\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..531f2b4ec 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.*;\n+import org.apache.commons.math3.util.FastMath;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrt = null;\n+    try {\n+        CholeskyDecomposition chol = new CholeskyDecomposition(m);\n+        sqrt = chol.getL();\n+    } catch (Exception e) {\n+        // handle exception\n+    }\n+    if (sqrt == null) {\n+        sqrt = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j = 0; j < m.getColumnDimension(); j++) {\n+                sqrt.setEntry(i, j, FastMath.sqrt(m.getEntry(i, j)));\n+            }\n+        }\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}