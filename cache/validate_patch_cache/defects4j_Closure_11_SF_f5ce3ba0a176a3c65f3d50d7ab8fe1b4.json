{
    "patch": "public static String getProperty(String key) {\n    if (configProps == null) {\n        try {\n            configProps = new Properties();\n            InputStream in = TestClass.class.getResourceAsStream(\"/config.properties\");\n            configProps.load(in);\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    String value = configProps.getProperty(key);\n    if (value == null) {\n        System.err.println(\"Warning: No value found for key \" + key);\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..f41c2946 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) {\n+    if (configProps == null) {\n+        try {\n+            configProps = new Properties();\n+            InputStream in = TestClass.class.getResourceAsStream(\"/config.properties\");\n+            configProps.load(in);\n+            in.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    String value = configProps.getProperty(key);\n+    if (value == null) {\n+        System.err.println(\"Warning: No value found for key \" + key);\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}