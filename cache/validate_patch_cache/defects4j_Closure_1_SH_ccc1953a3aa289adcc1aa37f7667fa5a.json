{
    "patch": "      // Find the first unreferenced parameter, if it exists.\n      Node unreferencedArg = null;\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          unreferencedArg = arg;\n          break;\n        }\n      }\n\n      // Remove all unreferenced arguments, starting from the first one found.\n      while (unreferencedArg != null) {\n        Node nextUnreferencedArg = null;\n        for (Node arg : argList.children()) {\n          if (arg == unreferencedArg) {\n            break;\n          }\n          Var var = fnScope.getVar(arg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n          } else {\n            nextUnreferencedArg = arg.getNext();\n          }\n        }\n        unreferencedArg = nextUnreferencedArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8df0e811 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Find the first unreferenced parameter, if it exists.\n+      Node unreferencedArg = null;\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          unreferencedArg = arg;\n+          break;\n+        }\n+      }\n+\n+      // Remove all unreferenced arguments, starting from the first one found.\n+      while (unreferencedArg != null) {\n+        Node nextUnreferencedArg = null;\n+        for (Node arg : argList.children()) {\n+          if (arg == unreferencedArg) {\n+            break;\n+          }\n+          Var var = fnScope.getVar(arg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+          } else {\n+            nextUnreferencedArg = arg.getNext();\n+          }\n+        }\n+        unreferencedArg = nextUnreferencedArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}