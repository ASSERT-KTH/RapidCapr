{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        // We're in an assignment context.\n        if (isPrototypeProperty(ownerOf(parent))) {\n          return false;\n        }\n\n        if (NodeUtil.isGet(parent)) {\n          // We're in a property access context.\n          Node lhs = parent.getFirstChild();\n          if (isPrototypeProperty(ownerOf(lhs))) {\n            // Property access to prototype.property().",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7a9b23ed 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        // We're in an assignment context.\n+        if (isPrototypeProperty(ownerOf(parent))) {\n+          return false;\n+        }\n+\n+        if (NodeUtil.isGet(parent)) {\n+          // We're in a property access context.\n+          Node lhs = parent.getFirstChild();\n+          if (isPrototypeProperty(ownerOf(lhs))) {\n+            // Property access to prototype.property().\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}