{
    "patch": "/**\n * Infers record types from object types.\n *\n * @param n The node where the inference occurs.\n * @param warnings A list to store any warning messages.\n * @param type The type to be inferred.\n * @param constraint The constraint to infer from.\n */\nvoid inferRecordTypesFromObjectTypes(\n      Node n, List<JSError> warnings, JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              warnings.add(JSError.make(n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not null or undefined.\n   *\n   * @param n The node where the dereferencing occurs.\n   * @param scope The current flow scope.\n   * @return The updated flow scope.\n   */\n  FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n        inferRecordTypesFromObjectTypes(n, warnings, narrowed, type);\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..03fd024d 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,7 +1111,16 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+/**\n+ * Infers record types from object types.\n+ *\n+ * @param n The node where the inference occurs.\n+ * @param warnings A list to store any warning messages.\n+ * @param type The type to be inferred.\n+ * @param constraint The constraint to infer from.\n+ */\n+void inferRecordTypesFromObjectTypes(\n+      Node n, List<JSError> warnings, JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n@@ -1128,6 +1137,7 @@ class TypeInference\n             if (!objType.hasProperty(prop)) {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              warnings.add(JSError.make(n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1137,18 +1147,24 @@ class TypeInference\n   }\n \n   /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n+   * If we access a property of a symbol, then that symbol is not null or undefined.\n+   *\n+   * @param n The node where the dereferencing occurs.\n+   * @param scope The current flow scope.\n+   * @return The updated flow scope.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n+        inferRecordTypesFromObjectTypes(n, warnings, narrowed, type);\n       }\n     }\n     return scope;\n+    }\n+    return scope;\n   }\n \n   private JSType getPropertyType(JSType objType, String propName,",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}