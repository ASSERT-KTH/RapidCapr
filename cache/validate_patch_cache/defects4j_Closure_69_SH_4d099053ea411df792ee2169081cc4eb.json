{
    "patch": "if (functionType.isConstructor() && !functionType.isNativeObjectType()) {\n  if (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern) {\n    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n}\n \n// Functions with explicit 'this' types must be called in a GETPROP or GETELEM or in a FUNCTION_EXPRESSION or as a CONSTRUCTOR.\nif (functionType.getTypeOfThis() != null && !NodeUtil.isGet(child.getParent()) && !NodeUtil.isFunctionExpression(child) && !(NodeUtil.isName(child) && functionType.isConstructor())) {\n  report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9be1b474 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.isConstructor() && !functionType.isNativeObjectType()) {\n+  if (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern) {\n+    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n+}\n+ \n+// Functions with explicit 'this' types must be called in a GETPROP or GETELEM or in a FUNCTION_EXPRESSION or as a CONSTRUCTOR.\n+if (functionType.getTypeOfThis() != null && !NodeUtil.isGet(child.getParent()) && !NodeUtil.isFunctionExpression(child) && !(NodeUtil.isName(child) && functionType.isConstructor())) {\n+  report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_FUNCTION_MASKS_VARIABLE. function function (this:Bar): string masks variable (IE bug) at testcode line 1 : 164 expected:<0> but was:<1>",
    "test_result": "FAIL"
}