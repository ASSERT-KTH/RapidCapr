{
    "patch": "private Node parseContextTypeExpression(JsDocToken token) {\n    Node typeExpression = parseTypeExpression(token);\n    if (typeExpression != null) {\n        return typeExpression;\n    }\n    // Parse the token as a type name instead\n    Node typeName = parseTypeName(token);\n    if (typeName != null) {\n        return typeName;\n    }\n    // If neither a type expression nor a type name could be parsed, throw an error\n    throw new RuntimeException(\"Bad type annotation: failed to parse type from \" + token.getValue() + \" at line \" + token.getLineNumber());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..4833cbb7 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,19 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+private Node parseContextTypeExpression(JsDocToken token) {\n+    Node typeExpression = parseTypeExpression(token);\n+    if (typeExpression != null) {\n+        return typeExpression;\n+    }\n+    // Parse the token as a type name instead\n+    Node typeName = parseTypeName(token);\n+    if (typeName != null) {\n+        return typeName;\n+    }\n+    // If neither a type expression nor a type name could be parsed, throw an error\n+    throw new RuntimeException(\"Bad type annotation: failed to parse type from \" + token.getValue() + \" at line \" + token.getLineNumber());\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}