{
    "patch": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      CompilerInput externsInput = new CompilerInput(\n          ImmutableList.of(SourceFile.fromCode(\"externs\", \"\")));\n      externsInput.putExterns(ImmutableList.of(externs));\n      CompilerInput rootInput = new CompilerInput(\n          ImmutableList.of(SourceFile.fromCode(\"input\", \"\")));\n      rootInput.putCode(\"\", root);\n      t.traverse(compiler.getInputs(externsInput, rootInput));\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..11e08b99 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -89,11 +89,16 @@ class Normalize implements CompilerPass, Callback {\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n+      CompilerInput externsInput = new CompilerInput(\n+          ImmutableList.of(SourceFile.fromCode(\"externs\", \"\")));\n+      externsInput.putExterns(ImmutableList.of(externs));\n+      CompilerInput rootInput = new CompilerInput(\n+          ImmutableList.of(SourceFile.fromCode(\"input\", \"\")));\n+      rootInput.putCode(\"\", root);\n+      t.traverse(compiler.getInputs(externsInput, rootInput));\n     }\n     removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n-        .process(externs, root);\n+    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n   }\n \n   @Override",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}