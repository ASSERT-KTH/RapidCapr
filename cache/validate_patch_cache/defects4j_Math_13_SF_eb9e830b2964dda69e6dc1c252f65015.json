{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getColumnDimension();\n    final double[][] r = new double[n][n];\n\n    // Cholesky decomposition\n    for (int k = 0; k < n; k++) {\n        double sum = 0;\n        for (int i = 0; i < k; i++) {\n            double rik = r[i][k];\n            sum += rik * rik;\n        }\n        double ekk = m.getEntry(k, k) - sum;\n        if (ekk < 0) {\n            throw new IllegalArgumentException(\"Matrix not positive definite\");\n        }\n        double ek = Math.sqrt(ekk);\n        r[k][k] = ek;\n        for (int i = k + 1; i < n; i++) {\n            double sum2 = 0;\n            for (int j = 0; j < k; j++) {\n                sum2 += r[j][i] * r[j][k];\n            }\n            r[k][i] = (m.getEntry(k, i) - sum2) / ek;\n        }\n    }\n\n    // Compute square root matrix\n    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            double sum = 0;\n            for (int k = 0; k <= Math.min(i, j); k++) {\n                sum += r[k][i] * r[k][j];\n            }\n            s.setEntry(i, j, sum);\n        }\n    }\n    return s;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d9e769480 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,43 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getColumnDimension();\n+    final double[][] r = new double[n][n];\n+\n+    // Cholesky decomposition\n+    for (int k = 0; k < n; k++) {\n+        double sum = 0;\n+        for (int i = 0; i < k; i++) {\n+            double rik = r[i][k];\n+            sum += rik * rik;\n+        }\n+        double ekk = m.getEntry(k, k) - sum;\n+        if (ekk < 0) {\n+            throw new IllegalArgumentException(\"Matrix not positive definite\");\n+        }\n+        double ek = Math.sqrt(ekk);\n+        r[k][k] = ek;\n+        for (int i = k + 1; i < n; i++) {\n+            double sum2 = 0;\n+            for (int j = 0; j < k; j++) {\n+                sum2 += r[j][i] * r[j][k];\n+            }\n+            r[k][i] = (m.getEntry(k, i) - sum2) / ek;\n+        }\n     }\n+\n+    // Compute square root matrix\n+    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            double sum = 0;\n+            for (int k = 0; k <= Math.min(i, j); k++) {\n+                sum += r[k][i] * r[k][j];\n+            }\n+            s.setEntry(i, j, sum);\n+        }\n+    }\n+    return s;\n+}\n }",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}