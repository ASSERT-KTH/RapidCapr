{
    "patch": "import java.util.Arrays;\n\npublic class EqualsBuilder {\n    \n    private boolean isEquals = true;\n    \n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            isEquals = lhs.equals(rhs);\n        }\n        else if (lhsClass != rhs.getClass()) {\n            this.setEquals(false);\n        }\n        else if (lhs instanceof Object[]) {\n            isEquals = Arrays.deepEquals((Object[]) lhs, (Object[]) rhs);\n        }\n        else if (lhs instanceof long[]) {\n            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n        } \n        else if (lhs instanceof int[]) {\n            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n        } \n        else if (lhs instanceof short[]) {\n            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n        } \n        else if (lhs instanceof char[]) {\n            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n        } \n        else if (lhs instanceof byte[]) {\n            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n        } \n        else if (lhs instanceof double[]) {\n            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n        } \n        else if (lhs instanceof float[]) {\n            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n        } \n        else if (lhs instanceof boolean[]) {\n            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n        }\n        return this;\n    }\n    \n    public boolean isEquals() {\n        return isEquals;\n    }\n    \n    public void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..1543c7f3 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,12 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.util.Arrays;\n+\n+public class EqualsBuilder {\n+    \n+    private boolean isEquals = true;\n+    \n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -375,38 +381,51 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            isEquals = lhs.equals(rhs);\n+        }\n+        else if (lhsClass != rhs.getClass()) {\n             this.setEquals(false);\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n+        else if (lhs instanceof Object[]) {\n+            isEquals = Arrays.deepEquals((Object[]) lhs, (Object[]) rhs);\n+        }\n         else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n+        } \n+        else if (lhs instanceof int[]) {\n+            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n+        } \n+        else if (lhs instanceof short[]) {\n+            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n+        } \n+        else if (lhs instanceof char[]) {\n+            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n+        } \n+        else if (lhs instanceof byte[]) {\n+            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n+        } \n+        else if (lhs instanceof double[]) {\n+            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n+        } \n+        else if (lhs instanceof float[]) {\n+            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n+        } \n+        else if (lhs instanceof boolean[]) {\n+            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n         }\n         return this;\n     }\n+    \n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+    \n+    public void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}