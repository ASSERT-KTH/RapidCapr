{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    }\n    PeriodPrinter printer = (PeriodPrinter) comp[0];\n    PeriodParser parser = (PeriodParser) comp[1];\n    int separatorIndex = -1;\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            separatorIndex = i;\n            break;\n        }\n    }\n    if (separatorIndex >= 0) {\n        Separator sep = (Separator) elementPairs.get(separatorIndex);\n        List<Object> beforeSeparatorPairs = elementPairs.subList(0, separatorIndex);\n        List<Object> afterSeparatorPairs = elementPairs.subList(separatorIndex + 1, size);\n        // Remove any leading literal elements from afterSeparatorPairs\n        while (!afterSeparatorPairs.isEmpty() && afterSeparatorPairs.get(0) instanceof Literal) {\n            afterSeparatorPairs = afterSeparatorPairs.subList(1, afterSeparatorPairs.size());\n        }\n        // Create formatters for the elements before and after the separator\n        PeriodFormatter beforeSeparatorFormatter = toFormatter(beforeSeparatorPairs, false, true);\n        PeriodFormatter afterSeparatorFormatter = toFormatter(afterSeparatorPairs, true, false);\n        // Finish the separator with the two formatters\n        sep = sep.finish(beforeSeparatorFormatter.getPrinter(), afterSeparatorFormatter.getParser());\n        // Combine the formatters before, separator and after into one formatter\n        if (printer == null) {\n            printer = beforeSeparatorFormatter.getPrinter();\n        }\n        if (parser == null) {\n            parser = afterSeparatorFormatter.getParser();\n        }\n        return new PeriodFormatter(combine(printer, sep, afterSeparatorFormatter.getPrinter()), combine(parser, sep, beforeSeparatorFormatter.getParser()));\n    } else {\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..578d1d47 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,54 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    }\n+    PeriodPrinter printer = (PeriodPrinter) comp[0];\n+    PeriodParser parser = (PeriodParser) comp[1];\n+    int separatorIndex = -1;\n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            separatorIndex = i;\n+            break;\n         }\n     }\n+    if (separatorIndex >= 0) {\n+        Separator sep = (Separator) elementPairs.get(separatorIndex);\n+        List<Object> beforeSeparatorPairs = elementPairs.subList(0, separatorIndex);\n+        List<Object> afterSeparatorPairs = elementPairs.subList(separatorIndex + 1, size);\n+        // Remove any leading literal elements from afterSeparatorPairs\n+        while (!afterSeparatorPairs.isEmpty() && afterSeparatorPairs.get(0) instanceof Literal) {\n+            afterSeparatorPairs = afterSeparatorPairs.subList(1, afterSeparatorPairs.size());\n+        }\n+        // Create formatters for the elements before and after the separator\n+        PeriodFormatter beforeSeparatorFormatter = toFormatter(beforeSeparatorPairs, false, true);\n+        PeriodFormatter afterSeparatorFormatter = toFormatter(afterSeparatorPairs, true, false);\n+        // Finish the separator with the two formatters\n+        sep = sep.finish(beforeSeparatorFormatter.getPrinter(), afterSeparatorFormatter.getParser());\n+        // Combine the formatters before, separator and after into one formatter\n+        if (printer == null) {\n+            printer = beforeSeparatorFormatter.getPrinter();\n+        }\n+        if (parser == null) {\n+            parser = afterSeparatorFormatter.getParser();\n+        }\n+        return new PeriodFormatter(combine(printer, sep, afterSeparatorFormatter.getPrinter()), combine(parser, sep, beforeSeparatorFormatter.getParser()));\n+    } else {\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}