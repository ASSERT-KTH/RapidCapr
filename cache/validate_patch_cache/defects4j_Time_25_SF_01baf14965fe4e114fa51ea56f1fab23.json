{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            // we need to check if there is a gap or overlap\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                // gap\n                return offsetLocal;\n            } else {\n                // overlap\n                int offsetNext = getOffset(nextLocal);\n                if (offsetLocal < offsetNext) {\n                    return offsetLocal;\n                } else if (offsetAdjusted >= offsetNext) {\n                    return offsetNext;\n                } else {\n                    return offsetAdjusted;\n                }\n            }\n        } else {\n            // we need to check if there is a gap or overlap\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            if (prevLocal == prevAdjusted) {\n                // gap\n                int offsetPrev = getOffset(prevLocal);\n                if (offsetPrev < offsetAdjusted) {\n                    return offsetPrev;\n                } else {\n                    return offsetAdjusted;\n                }\n            } else {\n                // overlap\n                int offsetPrev = getOffset(prevLocal);\n                if (offsetPrev < offsetAdjusted) {\n                    return offsetPrev;\n                } else {\n                    int offsetPrev2 = getOffset(prevAdjusted);\n                    if (offsetAdjusted >= offsetPrev2) {\n                        return offsetAdjusted;\n                    } else {\n                        return offsetPrev2;\n                    }\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5100cbc8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,67 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            // if we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition\n+            // we need to check if there is a gap or overlap\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                // gap\n+                return offsetLocal;\n+            } else {\n+                // overlap\n+                int offsetNext = getOffset(nextLocal);\n+                if (offsetLocal < offsetNext) {\n                     return offsetLocal;\n+                } else if (offsetAdjusted >= offsetNext) {\n+                    return offsetNext;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        } else {\n+            // we need to check if there is a gap or overlap\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            if (prevLocal == prevAdjusted) {\n+                // gap\n+                int offsetPrev = getOffset(prevLocal);\n+                if (offsetPrev < offsetAdjusted) {\n+                    return offsetPrev;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                // overlap\n+                int offsetPrev = getOffset(prevLocal);\n+                if (offsetPrev < offsetAdjusted) {\n+                    return offsetPrev;\n+                } else {\n+                    int offsetPrev2 = getOffset(prevAdjusted);\n+                    if (offsetAdjusted >= offsetPrev2) {\n+                        return offsetAdjusted;\n+                    } else {\n+                        return offsetPrev2;\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}