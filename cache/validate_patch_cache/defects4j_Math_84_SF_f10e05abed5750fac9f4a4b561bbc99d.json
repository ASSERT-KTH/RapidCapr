{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the contracted simplex\n                simplex = contract(original, best, comparator);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = contract(original, best, comparator);\n        } else if (shrink(comparator)) {\n            // start over\n            return;\n        }\n\n    }\n\n}\n\nprivate RealPointValuePair[] contract(RealPointValuePair[] original, RealPointValuePair best,\n        Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException {\n    final RealPointValuePair[] contractedSimplex = simplex;\n    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        return contractedSimplex;\n    } else {\n        return shrink(comparator) ? null : contractedSimplex;\n    }\n}\n\nprivate boolean shrink(Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n    for (int i = 1; i < simplex.length; i++) {\n        final RealPointValuePair[] single = new RealPointValuePair[n + 1];\n        for (int j = 0; j < n + 1; j++) {\n            single[j] = i == j ? simplex[j] : contract(new RealPointValuePair[] { simplex[j] },\n                simplex[0], comparator)[0];\n        }\n        final double[] original = simplex[0].getPoint();\n        final double[] centroid = centroid(single);\n        final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[n + 1];\n        reflectedSimplex[0] = simplex[0];\n        for (int j = 1; j < n + 1; j++) {\n            reflectedSimplex[j] = new RealPointValuePair(reflect(original, centroid, single[j]\n                    .getPoint()), Double.NaN);\n        }\n        final RealPointValuePair[] sorted = sortAndEvaluate(reflectedSimplex);\n        simplex[0] = sorted[0];\n        for (int j = 1; j < n + 1; j++) {\n            simplex[j] = new RealPointValuePair(centroid, Double.NaN);\n        }\n        final double[] best = simplex[0].getPoint();\n        double val = 0;\n        for (int j = 0; j < n; j++) {\n            final double diff = original[j] - best[j];\n            val += diff * diff;\n        }\n        if (Math.sqrt(val) >= threshold) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..c5d0d5175 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,95 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the contracted simplex\n+                simplex = contract(original, best, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n-                return;\n-            }\n+        }\n \n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = contract(original, best, comparator);\n+        } else if (shrink(comparator)) {\n+            // start over\n+            return;\n         }\n \n     }\n \n+}\n+\n+private RealPointValuePair[] contract(RealPointValuePair[] original, RealPointValuePair best,\n+        Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException {\n+    final RealPointValuePair[] contractedSimplex = simplex;\n+    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+    if (comparator.compare(contracted, best) < 0) {\n+        return contractedSimplex;\n+    } else {\n+        return shrink(comparator) ? null : contractedSimplex;\n+    }\n+}\n+\n+private boolean shrink(Comparator<RealPointValuePair> comparator)\n+        throws FunctionEvaluationException, OptimizationException {\n+    for (int i = 1; i < simplex.length; i++) {\n+        final RealPointValuePair[] single = new RealPointValuePair[n + 1];\n+        for (int j = 0; j < n + 1; j++) {\n+            single[j] = i == j ? simplex[j] : contract(new RealPointValuePair[] { simplex[j] },\n+                simplex[0], comparator)[0];\n+        }\n+        final double[] original = simplex[0].getPoint();\n+        final double[] centroid = centroid(single);\n+        final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[n + 1];\n+        reflectedSimplex[0] = simplex[0];\n+        for (int j = 1; j < n + 1; j++) {\n+            reflectedSimplex[j] = new RealPointValuePair(reflect(original, centroid, single[j]\n+                    .getPoint()), Double.NaN);\n+        }\n+        final RealPointValuePair[] sorted = sortAndEvaluate(reflectedSimplex);\n+        simplex[0] = sorted[0];\n+        for (int j = 1; j < n + 1; j++) {\n+            simplex[j] = new RealPointValuePair(centroid, Double.NaN);\n+        }\n+        final double[] best = simplex[0].getPoint();\n+        double val = 0;\n+        for (int j = 0; j < n; j++) {\n+            final double diff = original[j] - best[j];\n+            val += diff * diff;\n+        }\n+        if (Math.sqrt(val) >= threshold) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}