{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    // check if x is within bounds\n    for (double i : x) {\n        if (i < 0 || i > 1) {\n            return new double[x.length];\n        }\n    }\n    return decode(repair(x));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..3b769e49f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,15 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    // check if x is within bounds\n+    for (double i : x) {\n+        if (i < 0 || i > 1) {\n+            return new double[x.length];\n         }\n+    }\n+    return decode(repair(x));\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}