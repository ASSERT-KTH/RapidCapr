{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n        callbacks[0] = newFilter;\n        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n        factory.setCallbacks(callbacks);\n    } else {\n        MockCreationSettings<T> settings = Mockito.mockingDetails(mock).getMockCreationSettings();\n        T newMock = Mockito.mock((Class<T>) settings.getTypeToMock(), Mockito.withSettings()\n                .name(settings.getName())\n                .defaultAnswer(newMockHandler)\n                .extraInterfaces(settings.getExtraInterfaces())\n                .serializable(settings.isSerializable())\n                .spiedInstance(settings.getSpiedInstance())\n        );\n        Mockito.reset(mock);\n        copyMockState(newMock, mock);\n    }\n}\n\nprivate void copyMockState(Object sourceMock, Object destMock) {\n    MockCreationSettings<?> sourceSettings = mockingDetails(sourceMock).getMockCreationSettings();\n    MockCreationSettings<?> destSettings = mockingDetails(destMock).getMockCreationSettings();\n\n    if (sourceSettings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        fail(\"reset() cannot be used with mocks created with SerializableMode.ACROSS_CLASSLOADERS\");\n    }\n\n    destSettings.getFieldSaver().copyMockState(sourceMock, destMock);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7a91cbe16 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,43 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+        callbacks[0] = newFilter;\n+        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+        factory.setCallbacks(callbacks);\n+    } else {\n+        MockCreationSettings<T> settings = Mockito.mockingDetails(mock).getMockCreationSettings();\n+        T newMock = Mockito.mock((Class<T>) settings.getTypeToMock(), Mockito.withSettings()\n+                .name(settings.getName())\n+                .defaultAnswer(newMockHandler)\n+                .extraInterfaces(settings.getExtraInterfaces())\n+                .serializable(settings.isSerializable())\n+                .spiedInstance(settings.getSpiedInstance())\n+        );\n+        Mockito.reset(mock);\n+        copyMockState(newMock, mock);\n+    }\n+}\n+\n+private void copyMockState(Object sourceMock, Object destMock) {\n+    MockCreationSettings<?> sourceSettings = mockingDetails(sourceMock).getMockCreationSettings();\n+    MockCreationSettings<?> destSettings = mockingDetails(destMock).getMockCreationSettings();\n+\n+    if (sourceSettings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        fail(\"reset() cannot be used with mocks created with SerializableMode.ACROSS_CLASSLOADERS\");\n+    }\n+\n+    destSettings.getFieldSaver().copyMockState(sourceMock, destMock);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}