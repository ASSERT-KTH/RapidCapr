{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Get the zone offset of the instant based on its chronology\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    int instantOffset = zone.getOffset(instantMillis);\n\n    // Select the best chronology for parsing the text\n    chrono = selectChronology(chrono);\n\n    // Parse the text into a bucket\n    final DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis + instantOffset, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n    parser.parseInto(bucket, text, position);\n\n    // Set the parsed fields into the instant and chronology\n    chrono = bucket.getChronology();\n    zone = bucket.getZone();\n    instant.setChronology(chrono);\n    if (zone != null) {\n        instant.setZone(zone);\n    }\n\n    if (bucket.computeMillis(true, text) == instant.getMillis()) {\n        // If parsing was successful, update the instant fields\n        instant.setMillis(bucket.computeMillis(false, text));\n\n        if (iOffsetParsed) {\n            // If an offset was parsed, update the chronology's zone\n            Integer offsetInt = bucket.getOffsetInteger();\n            if (offsetInt != null) {\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(offsetInt);\n                chrono = chrono.withZone(parsedZone);\n                instant.setChronology(chrono);\n            }\n        }\n    } else {\n        // If parsing failed, return the error position\n        return ~bucket.getParsePosition();\n    }\n\n    return bucket.getParsePosition();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..405824d6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,55 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    // Get the zone offset of the instant based on its chronology\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    int instantOffset = zone.getOffset(instantMillis);\n+\n+    // Select the best chronology for parsing the text\n+    chrono = selectChronology(chrono);\n+\n+    // Parse the text into a bucket\n+    final DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis + instantOffset, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n+    parser.parseInto(bucket, text, position);\n+\n+    // Set the parsed fields into the instant and chronology\n+    chrono = bucket.getChronology();\n+    zone = bucket.getZone();\n+    instant.setChronology(chrono);\n+    if (zone != null) {\n+        instant.setZone(zone);\n+    }\n+\n+    if (bucket.computeMillis(true, text) == instant.getMillis()) {\n+        // If parsing was successful, update the instant fields\n         instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        if (iOffsetParsed) {\n+            // If an offset was parsed, update the chronology's zone\n+            Integer offsetInt = bucket.getOffsetInteger();\n+            if (offsetInt != null) {\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(offsetInt);\n+                chrono = chrono.withZone(parsedZone);\n+                instant.setChronology(chrono);\n+            }\n         }\n-        return newPos;\n+    } else {\n+        // If parsing failed, return the error position\n+        return ~bucket.getParsePosition();\n     }\n \n+    return bucket.getParsePosition();\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}