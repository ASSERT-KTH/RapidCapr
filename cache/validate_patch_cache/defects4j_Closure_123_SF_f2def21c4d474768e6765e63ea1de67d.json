{
    "patch": "public static String fixCode(String code) {\n    int index = code.indexOf(\"for(\");\n\n    while (index != -1) {\n        int firstSemicolonIndex = code.indexOf(\";\", index);\n\n        if (firstSemicolonIndex != -1) {\n            int secondSemicolonIndex = code.indexOf(\";\", firstSemicolonIndex + 1);\n\n            if (secondSemicolonIndex != -1) {\n                String conditionalExpression = code.substring(index + 4, firstSemicolonIndex);\n                String otherExpressions = code.substring(firstSemicolonIndex + 1, secondSemicolonIndex);\n\n                if (!conditionalExpression.contains(\"in\") && otherExpressions.contains(\"in\")) {\n                    int openBracketIndex = otherExpressions.indexOf(\"[\");\n                    int closeBracketIndex = otherExpressions.indexOf(\"]\");\n\n                    if (openBracketIndex != -1 && closeBracketIndex != -1) {\n                        String arrayExpression = otherExpressions.substring(openBracketIndex, closeBracketIndex + 1);\n                        return code.substring(0, openBracketIndex + firstSemicolonIndex + 2) + conditionalExpression + arrayExpression + code.substring(closeBracketIndex + firstSemicolonIndex + 2);\n                    }\n                }\n            }\n        }\n\n        index = code.indexOf(\"for(\", index + 1);\n    }\n\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..99c29790 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,36 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    int index = code.indexOf(\"for(\");\n+\n+    while (index != -1) {\n+        int firstSemicolonIndex = code.indexOf(\";\", index);\n+\n+        if (firstSemicolonIndex != -1) {\n+            int secondSemicolonIndex = code.indexOf(\";\", firstSemicolonIndex + 1);\n+\n+            if (secondSemicolonIndex != -1) {\n+                String conditionalExpression = code.substring(index + 4, firstSemicolonIndex);\n+                String otherExpressions = code.substring(firstSemicolonIndex + 1, secondSemicolonIndex);\n+\n+                if (!conditionalExpression.contains(\"in\") && otherExpressions.contains(\"in\")) {\n+                    int openBracketIndex = otherExpressions.indexOf(\"[\");\n+                    int closeBracketIndex = otherExpressions.indexOf(\"]\");\n+\n+                    if (openBracketIndex != -1 && closeBracketIndex != -1) {\n+                        String arrayExpression = otherExpressions.substring(openBracketIndex, closeBracketIndex + 1);\n+                        return code.substring(0, openBracketIndex + firstSemicolonIndex + 2) + conditionalExpression + arrayExpression + code.substring(closeBracketIndex + firstSemicolonIndex + 2);\n+                    }\n+                }\n+            }\n+        }\n+\n+        index = code.indexOf(\"for(\", index + 1);\n+    }\n+\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}