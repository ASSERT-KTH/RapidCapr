{
    "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n\n    if (n < 2) {\n        return primes; // return empty array for n < 2\n    }\n\n    primes.add(2);\n    for (int i = 3; i <= n; i += 2) {\n        boolean is_prime = true;\n\n        // iterate over the previously found prime numbers\n        for (int j = 0; j < primes.size(); j++) {\n            int current_prime = primes.get(j);\n\n            // if current prime number is greater than the square root of the current number,\n            // it means the current number is prime\n            // break the loop as there is no possibility of finding any non-prime value\n            if (current_prime > Math.sqrt(i)) {\n                break;\n            }\n\n            // if any previous prime number divides current number,\n            // it is not a prime number, break the loop\n            if (i % current_prime == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n\n        // if it passes all the prime number checks, add the current number to the prime number list\n        if (is_prime) {\n            primes.add(i);\n        }\n    }\n\n    return primes;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/COUNT_UP_TO.java b/src/main/java/humaneval/buggy/COUNT_UP_TO.java\nindex 2952188..f649f6f 100644\n--- a/src/main/java/humaneval/buggy/COUNT_UP_TO.java\n+++ b/src/main/java/humaneval/buggy/COUNT_UP_TO.java\n@@ -14,18 +14,42 @@ import java.util.List;\n // count_up_to(18) => [2,3,5,7,11,13,17]\n \n public class COUNT_UP_TO {\n-    public static List<Integer> count_up_to(int n) {\n-        List<Integer> primes = new ArrayList<Integer>();\n-\n-        for (int i = 2; i < n; i += 1){\n-            boolean is_prime = false;\n-            for (int j = 2; j < i; j += 1){\n-                if (i % j == 0) {\n-                    is_prime = false;\n-                }\n+public static List<Integer> count_up_to(int n) {\n+    List<Integer> primes = new ArrayList<Integer>();\n+\n+    if (n < 2) {\n+        return primes; // return empty array for n < 2\n+    }\n+\n+    primes.add(2);\n+    for (int i = 3; i <= n; i += 2) {\n+        boolean is_prime = true;\n+\n+        // iterate over the previously found prime numbers\n+        for (int j = 0; j < primes.size(); j++) {\n+            int current_prime = primes.get(j);\n+\n+            // if current prime number is greater than the square root of the current number,\n+            // it means the current number is prime\n+            // break the loop as there is no possibility of finding any non-prime value\n+            if (current_prime > Math.sqrt(i)) {\n+                break;\n             }\n-            if (is_prime) primes.add(i);\n+\n+            // if any previous prime number divides current number,\n+            // it is not a prime number, break the loop\n+            if (i % current_prime == 0) {\n+                is_prime = false;\n+                break;\n+            }\n+        }\n+\n+        // if it passes all the prime number checks, add the current number to the prime number list\n+        if (is_prime) {\n+            primes.add(i);\n         }\n-        return primes;\n     }\n+\n+    return primes;\n+}\n }",
    "result_reason": "   TEST_COUNT_UP_TO.test_0:11 expected:<[2, 3, 5]> but was:<[2, 3]>",
    "test_result": "FAIL"
}