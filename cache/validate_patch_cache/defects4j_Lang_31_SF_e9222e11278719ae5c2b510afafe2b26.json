{
    "patch": "public class StringUtils {\n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        return findAny(str, searchChars) != -1;\n    }\n\n    public static int findAny(final char[] str1, final char[] searchChars) {\n        if (str1 == null || searchChars == null) {\n            return -1;\n        }\n        final int len1 = str1.length;\n        final int len2 = searchChars.length;\n        for (int i = 0; i < len1; i++) {\n            final char ch = str1[i];\n            for (int j = 0; j < len2; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == len2 - 1) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return -1;\n                        }\n                        if (i < len1 - 1 && searchChars[j + 1] == str1[i + 1]) {\n                            return i;\n                        }\n                    } else {\n                        return i;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..34eeeb64 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,38 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        return findAny(str, searchChars) != -1;\n+    }\n+\n+    public static int findAny(final char[] str1, final char[] searchChars) {\n+        if (str1 == null || searchChars == null) {\n+            return -1;\n+        }\n+        final int len1 = str1.length;\n+        final int len2 = searchChars.length;\n+        for (int i = 0; i < len1; i++) {\n+            final char ch = str1[i];\n+            for (int j = 0; j < len2; j++) {\n+                if (searchChars[j] == ch) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == len2 - 1) {\n+                            // missing low surrogate, fine, like String.indexOf(String)\n+                            return -1;\n+                        }\n+                        if (i < len1 - 1 && searchChars[j + 1] == str1[i + 1]) {\n+                            return i;\n+                        }\n+                    } else {\n+                        return i;\n+                    }\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}