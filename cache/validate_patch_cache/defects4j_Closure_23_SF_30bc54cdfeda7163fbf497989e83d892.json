{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (!left.isArrayLit() && !left.isName()) {\n      return n;\n    }\n\n    Node elem = null;\n    if (left.isArrayLit()) {\n      int childCount = left.getChildCount();\n      if (intIndex >= childCount) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      elem = left.getChildAtIndex(intIndex);\n    } else {\n      elem = IR.getelem(left.cloneTree(), IR.number(intIndex));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..d7aafef9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,7 +1419,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n@@ -1446,30 +1446,20 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (!left.isArrayLit() && !left.isName()) {\n       return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    Node elem = null;\n+    if (left.isArrayLit()) {\n+      int childCount = left.getChildCount();\n+      if (intIndex >= childCount) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+      elem = left.getChildAtIndex(intIndex);\n     } else {\n-      left.removeChild(elem);\n-    }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+      elem = IR.getelem(left.cloneTree(), IR.number(intIndex));\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}