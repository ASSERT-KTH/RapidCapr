{
    "patch": "public String fixCode(String code) {\n    code = code.replace(\"in \", \"in Object \");\n    String[] lines = code.split(\"\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n        String[] words = lines[i].split(\" \");\n        for (int j = 0; j < words.length; j++) {\n            if (words[j].equals(\"in\")) {\n                if (j > 0 && (words[j-1].endsWith(\"]\") || words[j-1].equals(\")\"))) {\n                    int k = j-1;\n                    while (k >= 0 && !words[k].startsWith(\"[\")) {\n                        k--;\n                    }\n                    if (k < 0) { // no matching '[' found\n                        return code; // return original code (could not fix)\n                    }\n                    words[k] = words[k] + \" Object\";\n                } else { // add object to 'in' operator\n                    words[j-1] += \" Object\";\n                }\n            }\n        }\n        lines[i] = String.join(\" \", words);\n    }\n    code = String.join(\"\\n\", lines);\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..efcf6d30 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,32 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    code = code.replace(\"in \", \"in Object \");\n+    String[] lines = code.split(\"\\\\n\");\n+    for (int i = 0; i < lines.length; i++) {\n+        String[] words = lines[i].split(\" \");\n+        for (int j = 0; j < words.length; j++) {\n+            if (words[j].equals(\"in\")) {\n+                if (j > 0 && (words[j-1].endsWith(\"]\") || words[j-1].equals(\")\"))) {\n+                    int k = j-1;\n+                    while (k >= 0 && !words[k].startsWith(\"[\")) {\n+                        k--;\n+                    }\n+                    if (k < 0) { // no matching '[' found\n+                        return code; // return original code (could not fix)\n+                    }\n+                    words[k] = words[k] + \" Object\";\n+                } else { // add object to 'in' operator\n+                    words[j-1] += \" Object\";\n+                }\n+            }\n+        }\n+        lines[i] = String.join(\" \", words);\n+    }\n+    code = String.join(\"\\n\", lines);\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}