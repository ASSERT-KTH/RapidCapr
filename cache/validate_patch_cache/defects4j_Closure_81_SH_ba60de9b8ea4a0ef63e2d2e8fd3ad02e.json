{
    "patch": "  private Set<String> analyzeTheming(List<String> rules,\n      Set<String> fontNamesAndSizes, Set<String> colors) {\n>>> [ INFILL ] <<<\n    List<String> matches = new ArrayList<>();\n    Set<String> missing = new HashSet<>();\n\n    // Check for font names and sizes.\n    matches.addAll(this.matchRegex(regexFontNamesAndSizes, rules));\n    missing.addAll(fontNamesAndSizes);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..bfed1071 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,15 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+  private Set<String> analyzeTheming(List<String> rules,\n+      Set<String> fontNamesAndSizes, Set<String> colors) {\n+>>> [ INFILL ] <<<\n+    List<String> matches = new ArrayList<>();\n+    Set<String> missing = new HashSet<>();\n+\n+    // Check for font names and sizes.\n+    matches.addAll(this.matchRegex(regexFontNamesAndSizes, rules));\n+    missing.addAll(fontNamesAndSizes);\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}