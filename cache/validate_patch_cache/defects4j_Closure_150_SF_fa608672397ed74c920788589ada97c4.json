{
    "patch": "import com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.rhino.Node;\n\npublic class MyCustomPass extends AbstractCompiler.Pass {\n\n  private Scope scope;\n\n  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, new MyVisitor());\n  }\n\n  private class MyVisitor implements NodeTraversal.Callback {\n\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == t.getScopeRoot()) {\n        resetContext();\n        functionScope = Scope.createScope(Scope.Type.FUNCTION);\n        scope = Scope.createScope(Scope.Type.BLOCK, functionScope);\n      }\n\n      // Attach literal types to nodes.\n      attachLiteralTypes(n);\n\n      switch (n.getToken()) {\n        case FUNCTION:\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n          } else {\n            defineFunctionExpression(n, parent);\n          }\n          break;\n        case CATCH:\n          defineCatch(n);\n          break;\n        case VAR:\n        case LET:\n        case CONST:\n          defineVar(n);\n          break;\n        case LP:\n          if (parent != null && parent.getToken() == Token.EXPR_RESULT && parent.getFirstChild().isFunction()) {\n            handleFunctionInputs(parent);\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (n == t.getScopeRoot()) {\n        functionScope = null;\n        scope = null;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..220393b3 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,69 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.rhino.Node;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+public class MyCustomPass extends AbstractCompiler.Pass {\n+\n+  private Scope scope;\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    NodeTraversal.traverse(compiler, root, new MyVisitor());\n+  }\n+\n+  private class MyVisitor implements NodeTraversal.Callback {\n+\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+      return true;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == t.getScopeRoot()) {\n+        resetContext();\n+        functionScope = Scope.createScope(Scope.Type.FUNCTION);\n+        scope = Scope.createScope(Scope.Type.BLOCK, functionScope);\n       }\n \n+      // Attach literal types to nodes.\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+\n+      switch (n.getToken()) {\n+        case FUNCTION:\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+          } else {\n+            defineFunctionExpression(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n+        case CATCH:\n+          defineCatch(n);\n           break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n+        case VAR:\n+        case LET:\n+        case CONST:\n+          defineVar(n);\n+          break;\n+        case LP:\n+          if (parent != null && parent.getToken() == Token.EXPR_RESULT && parent.getFirstChild().isFunction()) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+        default:\n           break;\n       }\n+\n+      if (n == t.getScopeRoot()) {\n+        functionScope = null;\n+        scope = null;\n+      }\n     }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}