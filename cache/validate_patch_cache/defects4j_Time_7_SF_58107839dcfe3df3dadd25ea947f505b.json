{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n\n    long instantLocalMillis = instantMillis + chrono.getZone().getOffset(instantMillis);\n\n    chrono = selectChronology(chrono);\n\n    int defaultYear = chrono.year().get(instantLocalMillis);\n    int defaultMonthOfYear = chrono.monthOfYear().get(instantLocalMillis);\n    int defaultDayOfMonth = chrono.dayOfMonth().get(instantLocalMillis);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocalMillis, chrono, iLocale, iPivotYear, defaultYear);\n\n    if (bucket.restoreState(parser.parseInto(bucket, text, position)) < 0) {\n        instant.setMillis(instantLocalMillis);\n        return ~position;\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        long newInstant = instantLocalMillis - parsedOffset;\n        instant.setMillis(newInstant);\n        chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n        instant.setChronology(chrono);\n    } else if (bucket.getZone() != null) {\n        DateTimeZone parsedZone = bucket.getZone();\n        long newInstant = parsedZone.convertLocalToUTC(bucket.computeMillis(false, text), false);\n        instant.setMillis(newInstant);\n        chrono = chrono.withZone(parsedZone);\n        instant.setChronology(chrono);\n    } else {\n        chrono = chrono.withZone(DateTimeZone.getDefault());\n        long newInstant = chrono.withUTC().getDateTimeMillis(\n            defaultYear, defaultMonthOfYear, defaultDayOfMonth, 0);\n        instant.setMillis(newInstant);\n        instant.setChronology(chrono);\n    }\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return bucket.getPos();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..eea4d118 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,55 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+\n+    long instantLocalMillis = instantMillis + chrono.getZone().getOffset(instantMillis);\n+\n+    chrono = selectChronology(chrono);\n+\n+    int defaultYear = chrono.year().get(instantLocalMillis);\n+    int defaultMonthOfYear = chrono.monthOfYear().get(instantLocalMillis);\n+    int defaultDayOfMonth = chrono.dayOfMonth().get(instantLocalMillis);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocalMillis, chrono, iLocale, iPivotYear, defaultYear);\n+\n+    if (bucket.restoreState(parser.parseInto(bucket, text, position)) < 0) {\n+        instant.setMillis(instantLocalMillis);\n+        return ~position;\n+    }\n+\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        long newInstant = instantLocalMillis - parsedOffset;\n+        instant.setMillis(newInstant);\n+        chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+        instant.setChronology(chrono);\n+    } else if (bucket.getZone() != null) {\n+        DateTimeZone parsedZone = bucket.getZone();\n+        long newInstant = parsedZone.convertLocalToUTC(bucket.computeMillis(false, text), false);\n+        instant.setMillis(newInstant);\n+        chrono = chrono.withZone(parsedZone);\n+        instant.setChronology(chrono);\n+    } else {\n+        chrono = chrono.withZone(DateTimeZone.getDefault());\n+        long newInstant = chrono.withUTC().getDateTimeMillis(\n+            defaultYear, defaultMonthOfYear, defaultDayOfMonth, 0);\n+        instant.setMillis(newInstant);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return bucket.getPos();\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: bad operand types for binary operator '<'",
    "test_result": "ERROR"
}