{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if ((nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted)) {\n                    // Ambiguous local time around transition\n                    return offsetLocal;\n                }\n                if ((offsetLocal - offsetAdjusted) == -1 && (instantLocal - offsetLocal) == nextLocal) {\n                    return offsetLocal;\n                }\n                long prevLocal = previousTransition(instantAdjusted); // Add this line\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted); // Add this line\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            } else if ((offsetLocal - offsetAdjusted) > 0) {\n                // Positive offset change implies a gap in spring\n                // which clocks in local time move forward\n                long next = nextTransition(instantAdjusted);\n                if (next <= instantLocal) {\n                    next = nextTransition(next);\n                }\n                return getOffset(next);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..235f0c49 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,30 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if ((nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted)) {\n+                    // Ambiguous local time around transition\n+                    return offsetLocal;\n+                }\n+                if ((offsetLocal - offsetAdjusted) == -1 && (instantLocal - offsetLocal) == nextLocal) {\n+                    return offsetLocal;\n+                }\n+                long prevLocal = previousTransition(instantAdjusted); // Add this line\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted); // Add this line\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) > 0) {\n+                // Positive offset change implies a gap in spring\n+                // which clocks in local time move forward\n+                long next = nextTransition(instantAdjusted);\n+                if (next <= instantLocal) {\n+                    next = nextTransition(next);\n+                }\n+                return getOffset(next);\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}