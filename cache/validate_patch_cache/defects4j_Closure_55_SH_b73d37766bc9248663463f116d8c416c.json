{
    "patch": "    if (!NodeUtil.isFunctionExpression(n)) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null) {\n      return false;\n    }\n    int parentType = parent.getType();\n    if (parentType == Token.CALL || parentType == Token.NEW) {\n      return false;\n    } else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n        (parentType == Token.BLOCK && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION)) {\n      return true;\n    } else if (parentType == Token.RETURN) {\n      Node gp = parent.getParent();\n      if (gp == null) {\n        return false;\n      }\n      int gpType = gp.getType();\n      return gpType == Token.FUNCTION || gpType == Token.BLOCK && gp.getParent() != null && gp.getParent().getType() == Token.FUNCTION;\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..06ddbe6b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,28 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (!NodeUtil.isFunctionExpression(n)) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    if (parent == null) {\n+      return false;\n+    }\n+    int parentType = parent.getType();\n+    if (parentType == Token.CALL || parentType == Token.NEW) {\n+      return false;\n+    } else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n+        (parentType == Token.BLOCK && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION)) {\n+      return true;\n+    } else if (parentType == Token.RETURN) {\n+      Node gp = parent.getParent();\n+      if (gp == null) {\n+        return false;\n+      }\n+      int gpType = gp.getType();\n+      return gpType == Token.FUNCTION || gpType == Token.BLOCK && gp.getParent() != null && gp.getParent().getType() == Token.FUNCTION;\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}