{
    "patch": "public Line revert() {\n    BigDecimal[] zeroValues = {zero.getX(), zero.getY()};\n    BigDecimal[] directionValues = {direction.getX(), direction.getY()};\n    BigDecimal[] revertedDirection = {directionValues[0].negate(), directionValues[1].negate()};\n    return new Line(new Point(revertedDirection).setScale(15), new Point(zeroValues).setScale(15));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..8bc6e9886 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,12 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    BigDecimal[] zeroValues = {zero.getX(), zero.getY()};\n+    BigDecimal[] directionValues = {direction.getX(), direction.getY()};\n+    BigDecimal[] revertedDirection = {directionValues[0].negate(), directionValues[1].negate()};\n+    return new Line(new Point(revertedDirection).setScale(15), new Point(zeroValues).setScale(15));\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}