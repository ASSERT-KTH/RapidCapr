{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // ensure the input length is long enough and starts with \"&#\"\n        if (seqEnd - index >= 3 && input.charAt(index) == '&' && input.charAt(index + 1) == '#' && isDigitOrLetterX(input.charAt(index + 2))) {\n            boolean isHex = false;\n            int start = index + 2;\n\n            if(isX(input.charAt(start))) {\n                isHex = true;\n                start++;\n            }\n\n            int end = start;\n            while(end < seqEnd && (isDigitOrLetterAtoF(input.charAt(end)))) {\n                end++;\n            }\n            if (end == seqEnd || input.charAt(end) != ';') {\n                return 0; //invalid entity\n            }\n            String value = input.subSequence(start, end).toString();\n            if (value.isEmpty()) {\n                return 0; //invalid value\n            }\n\n            int charCode;\n            try {\n                charCode = Integer.parseInt(value, isHex ? 16 : 10);\n            } catch (NumberFormatException ex) {\n                return 0; //invalid value\n            }\n\n            if (isCharValid(charCode)) {\n                // write character to output\n                out.write(charCode);\n            } else {\n                // write escape sequence to output\n                out.write(\"&#\");\n                if (isHex) {\n                    out.write('x');\n                }\n                out.write(value);\n                out.write(';');\n            }\n\n            // return length of the entity\n            return end - index + 1;\n        }\n        return 0; // not a valid entity\n    }\n\n    // check if character is valid hexadecimal character\n    private boolean isHexChar(char ch) {\n        return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f');\n    }\n\n    // check if character is valid decimal digit character\n    private boolean isDigit(char ch) {\n        return (ch >= '0' && ch <= '9');\n    }\n\n    // check if character is valid hexadecimal digit or letter character\n    private boolean isDigitOrLetterAtoF(char ch) {\n        return isDigit(ch) || (ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f');\n    }\n\n    // check if character is valid hexadecimal digit or letter character\n    private boolean isDigitOrLetterX(char ch) {\n        return isDigitOrLetterAtoF(ch) || isX(ch);\n    }\n\n    // check if character is 'x' or 'X'\n    private boolean isX(char ch) {\n        return ch == 'x' || ch == 'X';\n    }\n\n    // check if character code is a valid Unicode character\n    private boolean isCharValid(int charCode) {\n        return !Character.isSurrogate((char) charCode) && Character.isDefined(charCode) && charCode != 0xffff;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..ee0bc79d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,83 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n+        // ensure the input length is long enough and starts with \"&#\"\n+        if (seqEnd - index >= 3 && input.charAt(index) == '&' && input.charAt(index + 1) == '#' && isDigitOrLetterX(input.charAt(index + 2))) {\n             boolean isHex = false;\n+            int start = index + 2;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n+            if(isX(input.charAt(start))) {\n                 isHex = true;\n-\n-                // Check there's more than just an x after the &#\n+                start++;\n             }\n \n             int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            while(end < seqEnd && (isDigitOrLetterAtoF(input.charAt(end)))) {\n                 end++;\n             }\n+            if (end == seqEnd || input.charAt(end) != ';') {\n+                return 0; //invalid entity\n+            }\n+            String value = input.subSequence(start, end).toString();\n+            if (value.isEmpty()) {\n+                return 0; //invalid value\n+            }\n \n-            int entityValue;\n+            int charCode;\n             try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n+                charCode = Integer.parseInt(value, isHex ? 16 : 10);\n+            } catch (NumberFormatException ex) {\n+                return 0; //invalid value\n             }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+            if (isCharValid(charCode)) {\n+                // write character to output\n+                out.write(charCode);\n             } else {\n-                out.write(entityValue);\n+                // write escape sequence to output\n+                out.write(\"&#\");\n+                if (isHex) {\n+                    out.write('x');\n+                }\n+                out.write(value);\n+                out.write(';');\n             }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            // return length of the entity\n+            return end - index + 1;\n         }\n-        return 0;\n+        return 0; // not a valid entity\n+    }\n+\n+    // check if character is valid hexadecimal character\n+    private boolean isHexChar(char ch) {\n+        return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f');\n+    }\n+\n+    // check if character is valid decimal digit character\n+    private boolean isDigit(char ch) {\n+        return (ch >= '0' && ch <= '9');\n+    }\n+\n+    // check if character is valid hexadecimal digit or letter character\n+    private boolean isDigitOrLetterAtoF(char ch) {\n+        return isDigit(ch) || (ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f');\n+    }\n+\n+    // check if character is valid hexadecimal digit or letter character\n+    private boolean isDigitOrLetterX(char ch) {\n+        return isDigitOrLetterAtoF(ch) || isX(ch);\n+    }\n+\n+    // check if character is 'x' or 'X'\n+    private boolean isX(char ch) {\n+        return ch == 'x' || ch == 'X';\n+    }\n+\n+    // check if character code is a valid Unicode character\n+    private boolean isCharValid(int charCode) {\n+        return !Character.isSurrogate((char) charCode) && Character.isDefined(charCode) && charCode != 0xffff;\n     }\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 887 expected:<\u0377[\u0378]> but was:<\u0377[&#x378;]>",
    "test_result": "FAIL"
}