{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable, boolean isLhs) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (isLhs) {\n      // If this is the LHS of an assignment, the kill occurs after the read.\n      // Therefore, the variable is always live.\n      return VariableLiveness.READ;\n    } else {\n      // If this is not the LHS of an assignment, the kill could occur before or after the read.\n      // Therefore, the variable is maybe live.\n      return VariableLiveness.MAYBE_LIVE;\n    }\n  }\n\n  VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      boolean childIsLhs = NodeUtil.isLhs(child, n);\n      VariableLiveness childState = isVariableReadBeforeKill(child, variable, childIsLhs);\n      if (childState == VariableLiveness.READ) {\n        // If any child node reads the variable, return READ.\n        return VariableLiveness.READ;\n      } else if (childState == VariableLiveness.KILL && !childIsLhs) {\n        // If the variable is written in a different branch that is not the LHS of an assignment,\n        // it is definitely dead. Update the state to reflect that.\n        state = VariableLiveness.KILL;\n      }\n    }\n  }\n  return state;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..aedecfcf 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,35 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n+private VariableLiveness isVariableReadBeforeKill(\n+    Node n, String variable, boolean isLhs) {\n+  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+    if (isLhs) {\n+      // If this is the LHS of an assignment, the kill occurs after the read.\n+      // Therefore, the variable is always live.\n+      return VariableLiveness.READ;\n+    } else {\n+      // If this is not the LHS of an assignment, the kill could occur before or after the read.\n+      // Therefore, the variable is maybe live.\n+      return VariableLiveness.MAYBE_LIVE;\n     }\n+  }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n+  VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n+      boolean childIsLhs = NodeUtil.isLhs(child, n);\n+      VariableLiveness childState = isVariableReadBeforeKill(child, variable, childIsLhs);\n+      if (childState == VariableLiveness.READ) {\n+        // If any child node reads the variable, return READ.\n+        return VariableLiveness.READ;\n+      } else if (childState == VariableLiveness.KILL && !childIsLhs) {\n+        // If the variable is written in a different branch that is not the LHS of an assignment,\n+        // it is definitely dead. Update the state to reflect that.\n+        state = VariableLiveness.KILL;\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n   }\n+  return state;\n+}\n }",
    "result_reason": "error: method isVariableReadBeforeKill in class DeadAssignmentsElimination cannot be applied to given types;",
    "test_result": "ERROR"
}