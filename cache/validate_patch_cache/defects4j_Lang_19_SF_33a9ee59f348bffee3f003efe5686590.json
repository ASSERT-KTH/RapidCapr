{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n            isHex = true;\n            start++;\n        }\n\n        int end = start;\n        while (end < seqEnd && ((isHex && containsHexDigit(input.charAt(end))) || (!isHex && Character.isDigit(input.charAt(end))))) {\n            end++;\n        }\n\n        if (end == start || (end == seqEnd && input.charAt(end - 1) != ';') || (input.charAt(end - 1) == '\"' && input.charAt(start - 1) != '&')) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String valueString = input.subSequence(start, end).toString();\n            if (isHex) {\n                entityValue = Integer.parseInt(valueString, 16);\n            } else {\n                entityValue = Integer.parseInt(valueString, 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        out.write(entityValue);\n\n        if (end < seqEnd && input.charAt(end) == ';') {\n            return end - index + 1;\n        }\n\n        return end - index;\n\n    }\n\n    return 0;\n}\n\nprivate boolean containsHexDigit(char c) {\n    return Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..8eb3553a 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,53 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-                // Check there's more than just an x after the &#\n-            }\n+        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+            isHex = true;\n+            start++;\n+        }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+        int end = start;\n+        while (end < seqEnd && ((isHex && containsHexDigit(input.charAt(end))) || (!isHex && Character.isDigit(input.charAt(end))))) {\n+            end++;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+        if (end == start || (end == seqEnd && input.charAt(end - 1) != ';') || (input.charAt(end - 1) == '\"' && input.charAt(start - 1) != '&')) {\n+            return 0;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue;\n+        try {\n+            String valueString = input.subSequence(start, end).toString();\n+            if (isHex) {\n+                entityValue = Integer.parseInt(valueString, 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(valueString, 10);\n             }\n+        } catch (NumberFormatException nfe) {\n+            return 0;\n+        }\n \n+        out.write(entityValue);\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (end < seqEnd && input.charAt(end) == ';') {\n+            return end - index + 1;\n         }\n-        return 0;\n+\n+        return end - index;\n+\n     }\n+\n+    return 0;\n+}\n+\n+private boolean containsHexDigit(char c) {\n+    return Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: Failed to unescape numeric entities supplementary characters expected:<[\ud803\udc22]> but was:<[\u0c22]>",
    "test_result": "FAIL"
}