{
    "patch": "if (savedFields[0].iField.getType().equals(DateTimeFieldType.year()) &&\n    count <= 2 &&\n    savedFields[0].getNumericValue() < 0) {\n    int year = (int) savedFields[0].getMillis(millis);\n    for (int i = 0; i < count; i++) {\n        long result = savedFields[i].set(millis, resetFields);\n        if (i == 0 && result < 0) {\n            year++;\n            result = savedFields[i].set(year, resetFields);\n        }\n        if (i == 0 && result == 0) {\n            year++;\n            result = savedFields[i].set(year, resetFields);\n        }\n        if (result < 0 && i > 0) {\n            year++;\n            result = savedFields[i].set(year, resetFields);\n        }\n        millis = result;\n    }\n} else {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..81130d36 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+if (savedFields[0].iField.getType().equals(DateTimeFieldType.year()) &&\n+    count <= 2 &&\n+    savedFields[0].getNumericValue() < 0) {\n+    int year = (int) savedFields[0].getMillis(millis);\n+    for (int i = 0; i < count; i++) {\n+        long result = savedFields[i].set(millis, resetFields);\n+        if (i == 0 && result < 0) {\n+            year++;\n+            result = savedFields[i].set(year, resetFields);\n+        }\n+        if (i == 0 && result == 0) {\n+            year++;\n+            result = savedFields[i].set(year, resetFields);\n+        }\n+        if (result < 0 && i > 0) {\n+            year++;\n+            result = savedFields[i].set(year, resetFields);\n+        }\n+        millis = result;\n+    }\n+} else {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}