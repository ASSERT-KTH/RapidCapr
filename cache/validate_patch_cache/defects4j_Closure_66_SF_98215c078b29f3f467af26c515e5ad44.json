{
    "patch": "public static double getTypedPercent(String js) {\n    int count = 0;\n    int total = 0;\n    Pattern pattern = Pattern.compile(\"\\\"type\\\": \\\"([A-Za-z]+)\\\", \\\"data\\\": (\\\\d+)\");\n    Matcher matcher = pattern.matcher(js);\n    while (matcher.find()) {\n        String type = matcher.group(1);\n        int data = Integer.parseInt(matcher.group(2));\n        if (type.equals(\"typed\")) {\n            count += data;\n        }\n        total += data;\n    }\n    return (double) count / total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a618db94 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int count = 0;\n+    int total = 0;\n+    Pattern pattern = Pattern.compile(\"\\\"type\\\": \\\"([A-Za-z]+)\\\", \\\"data\\\": (\\\\d+)\");\n+    Matcher matcher = pattern.matcher(js);\n+    while (matcher.find()) {\n+        String type = matcher.group(1);\n+        int data = Integer.parseInt(matcher.group(2));\n+        if (type.equals(\"typed\")) {\n+            count += data;\n+        }\n+        total += data;\n+    }\n+    return (double) count / total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}