{
    "patch": "public String getProp(String prop, String defaultValue) {\n    String[] warnings = getConfigurationErrors();\n    boolean hasWarning = false;\n    for (String w : warnings) {\n        if (w.contains(prop)) {\n            hasWarning = true;\n            break;\n        }\n    }\n    \n    if (hasWarning) {\n        return defaultValue;\n    }\n    \n    String value = getConfiguration().getProperty(prop);\n    return (value != null) ? value : defaultValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2731091a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String prop, String defaultValue) {\n+    String[] warnings = getConfigurationErrors();\n+    boolean hasWarning = false;\n+    for (String w : warnings) {\n+        if (w.contains(prop)) {\n+            hasWarning = true;\n+            break;\n+        }\n+    }\n+    \n+    if (hasWarning) {\n+        return defaultValue;\n+    }\n+    \n+    String value = getConfiguration().getProperty(prop);\n+    return (value != null) ? value : defaultValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}