{
    "patch": "import org.apache.commons.math3.util.FastMath;\n\npublic final class RegularizedGamma {\n    /** Maximum allowed numerical error. */\n    private static final double DEFAULT_EPSILON = 1e-9;\n    /** A value close to the smallest representable floating point number. */\n    private static final double MIN_VALUE = 2 * Double.MIN_VALUE;\n    /** The value of 1/2. */\n    private static final double HALF = 0.5;\n    /**\n     * Default constructor. Private to prevent instantiation.\n     */\n    private RegularizedGamma() {\n    }\n    /**\n     * Returns the regularized gamma function P(a, x).\n     *\n     * @param a Parameter.\n     * @param x Parameter.\n     * @param epsilon Maximum error allowed.\n     * @param maxIterations Maximum number of \"iterations\".\n     * @return the regularized gamma function P(a, x).\n     * @throws IllegalArgumentException if {@code a <= 0} or {@code x < 0}.\n     * @throws ArithmeticException if the algorithm fails to converge.\n     */\n    public static double gamma(double a,\n                               double x,\n                               double epsilon,\n                               int maxIterations) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be positive. Got \" + a);\n        }\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x must be non-negative. Got \" + x);\n        }\n\n        if (x == 0) {\n            return 0;\n        }\n\n        double ret;\n        if (x >= a + 1) {\n            // q will be a - 1 eventually\n            double q = a;\n            double xi = x + a;\n            double p = xi * (xi + 1);\n            double b = xi + 1;\n\n            double c = 0;\n            double d = 1 / b;\n            double h = d;\n\n            int i = 1;\n            double an;\n            while (true) {\n                an  = i * (q - i);\n                b += 2;\n                d  = an * d + b;\n                if (FastMath.abs(d) < MIN_VALUE) {\n                    d = MIN_VALUE;\n                }\n                c = b + an / c;\n                if (FastMath.abs(c) < MIN_VALUE) {\n                    c = MIN_VALUE;\n                }           \n                d = 1 / d;\n                final double del = d * c;\n                h *= del;\n                if (FastMath.abs(del - 1.0) <= epsilon) {\n                    ret = h * FastMath.exp(-xi + q * FastMath.log(xi) - logGamma(a));\n                    break;\n                }\n                ++i;\n                if (i > maxIterations) {\n                    throw new ArithmeticException(\"Max number of iterations exceeded\");\n                }\n            }\n        } else {\n            double p = 0;\n            double q = 1;\n            double xi = a;\n            double b  = x + 1 - a;\n            double c  = 1 / DEFAULT_EPSILON;\n            double d  = 1 / b;\n            double h  = d;\n\n            int i;\n            double an;\n            for (i = 1; i <= maxIterations; i++) {\n                an     = i * (a - i);\n                p     += b;\n                q     += an * b;\n                if (FastMath.abs(q) < MIN_VALUE) {\n                    q = MIN_VALUE;\n                }\n                final double s = p / q;\n                if (i % 2 == 0) {\n                    xi += s;\n                } else {\n                    xi -= s;\n                }\n                b = x + i + 1 - a;\n                d = an * d + b;\n                if (FastMath.abs(d) < MIN_VALUE) {\n                    d = MIN_VALUE;\n                }\n                d = 1 / d;\n                h *= d * xi;\n                if (FastMath.abs(xi - h) <= epsilon * xi) {\n                    ret = h * FastMath.exp(-x + a * FastMath.log(x) - logGamma(a));\n                    break;\n                }\n            }\n            if (i > maxIterations) {\n                throw new ArithmeticException(\"Max number of iterations exceeded\");\n            }\n        }\n\n        if (Double.isNaN(ret)) {\n            throw new ArithmeticException(\"Gamma returned NaN\");\n        }\n\n        return ret;\n    }\n    /**\n     * Returns the regularized gamma function P(a, x) using the default\n     * values for maxIterations ({@value #DEFAULT_MAX_ITERATIONS})\n     * and epsilon ({@value #DEFAULT_EPSILON}).\n     *\n     * @param a Parameter.\n     * @param x Parameter.\n     * @return the regularized gamma function P(a, x).\n     * @throws IllegalArgumentException if {@code a <= 0} or {@code x < 0}.\n     * @throws ArithmeticException if the algorithm fails to converge.\n     */\n    public static double gamma(double a,\n                               double x) {\n        return gamma(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n    /**\n     * Returns the natural logarithm of the gamma function.\n     *\n     * @param x Argument.\n     * @return the value of {@code log(Gamma(x))}, {@code Double.NaN} if\n     * {@code x <= 0}.\n     */\n    public static double logGamma(double x) {\n        if (x <= 0.0) {\n            return Double.NaN;\n        }\n        double ret;\n        double g = 607/128.; //initial approximation to Lanczos approximation\n        final double sum = LanczosApproximation.g() / (x + 1);\n        double gp = sum;\n        double fact = x;\n\n        int n = 1;\n        double tmp = g + sum;\n        while (FastMath.abs(tmp - g) > DEFAULT_EPSILON * FastMath.abs(tmp)) {\n            g = tmp;\n            ++n;\n            fact *= x + n;\n            gp = LanczosApproximation.g() / (x + n + 1);\n            sum += gp;\n            tmp = g + sum;\n        }\n        ret = LanczosApproximation.g() + sum - FastMath.log(fact) - (x + 0.5) * FastMath.log(x + g + 0.5);\n        return ret;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}