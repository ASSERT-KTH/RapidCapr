{
    "patch": "public <T> void resetMock(T mock) {\n    try {\n        Object handler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(handler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl)\n                org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if(mock instanceof Class) {\n            org.mockito.internal.creation.bytebuddy.MockAccess access = Mockito.mock((Class<T>)mock, newFilter);\n            Field f = access.getClass().getDeclaredField(\"mockHandler\");\n            f.setAccessible(true);\n            f.set(access, newMockHandler);\n        } else {\n            ((Mock) mock).setMockHandler(newMockHandler);\n            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n        }\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..4a5db1ae0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+public <T> void resetMock(T mock) {\n+    try {\n+        Object handler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(handler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl)\n+                org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if(mock instanceof Class) {\n+            org.mockito.internal.creation.bytebuddy.MockAccess access = Mockito.mock((Class<T>)mock, newFilter);\n+            Field f = access.getClass().getDeclaredField(\"mockHandler\");\n+            f.setAccessible(true);\n+            f.set(access, newMockHandler);\n+        } else {\n+            ((Mock) mock).setMockHandler(newMockHandler);\n+            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+        }\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+        e.printStackTrace();\n+    }\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}