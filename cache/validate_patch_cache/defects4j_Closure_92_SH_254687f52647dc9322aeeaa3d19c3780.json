{
    "patch": "    Node nearestEnclosingType = NodeUtil.getEnclosingType(replacementNode);\n    while (nearestEnclosingType != null\n        && nearestEnclosingType.getToken() != Token.SCRIPT\n        && nearestEnclosingType.getToken() != Token.MODULE_BODY) {\n      nearestEnclosingType = NodeUtil.getEnclosingType(nearestEnclosingType);\n    }\n\n    if (nearestEnclosingType == null) {\n      throw new IllegalStateException(\"Unable to get enclosing scope for node: \" + replacementNode);\n    }\n\n    if (nearestEnclosingType.getToken() == Token.SCRIPT) {\n      Node insertionPoint = compiler.getNodeForCodeInsertion(minimumModule);\n      if (insertionPoint != null) {\n        insertionPoint.addChildAfter(replacementNode, null);\n      } else {\n        Node script = nearestEnclosingType;\n        script.addChildToBack(replacementNode);\n      }\n    } else if (nearestEnclosingType.getToken() == Token.MODULE_BODY) {\n      nearestEnclosingType.addChildToFront(replacementNode);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..8559b8a6 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,28 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+    Node nearestEnclosingType = NodeUtil.getEnclosingType(replacementNode);\n+    while (nearestEnclosingType != null\n+        && nearestEnclosingType.getToken() != Token.SCRIPT\n+        && nearestEnclosingType.getToken() != Token.MODULE_BODY) {\n+      nearestEnclosingType = NodeUtil.getEnclosingType(nearestEnclosingType);\n+    }\n+\n+    if (nearestEnclosingType == null) {\n+      throw new IllegalStateException(\"Unable to get enclosing scope for node: \" + replacementNode);\n+    }\n+\n+    if (nearestEnclosingType.getToken() == Token.SCRIPT) {\n+      Node insertionPoint = compiler.getNodeForCodeInsertion(minimumModule);\n+      if (insertionPoint != null) {\n+        insertionPoint.addChildAfter(replacementNode, null);\n+      } else {\n+        Node script = nearestEnclosingType;\n+        script.addChildToBack(replacementNode);\n+      }\n+    } else if (nearestEnclosingType.getToken() == Token.MODULE_BODY) {\n+      nearestEnclosingType.addChildToFront(replacementNode);\n+    }\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}