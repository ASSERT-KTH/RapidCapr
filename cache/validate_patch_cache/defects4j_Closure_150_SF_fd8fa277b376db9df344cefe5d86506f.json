{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode())\n        return;\n\n      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.ASSIGN) {\n            defineDeclaredFunction(n, parent.getNext());\n            break;\n          } else if (parent.getType() == Token.NAME) {\n            defineDeclaredFunction(n, parent);\n            break;\n          }\n          defineDeclaredFunction(n, parent.getParent());\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1d26f72b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,10 +1440,12 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode())\n+        return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n         handleFunctionInputs(parent);\n         return;\n       }\n@@ -1451,10 +1453,14 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (parent.getType() == Token.ASSIGN) {\n+            defineDeclaredFunction(n, parent.getNext());\n+            break;\n+          } else if (parent.getType() == Token.NAME) {\n+            defineDeclaredFunction(n, parent);\n+            break;\n           }\n-          defineDeclaredFunction(n, parent);\n+          defineDeclaredFunction(n, parent.getParent());\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}