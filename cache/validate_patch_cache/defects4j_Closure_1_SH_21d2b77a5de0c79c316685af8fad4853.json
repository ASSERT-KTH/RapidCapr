{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = null;\n      for (Node argNode = argList.getFirstChild(); argNode != null; argNode = argNode.getNext()) {\n        if (!referenced.contains(fnScope.getVar(argNode.getString()))) {\n          argList.removeChild(argNode);\n          compiler.reportCodeChange();\n        } else {\n          lastArg = argNode;\n        }\n      }\n\n      // Remove from the beginning as well if possible.\n      // (This won't be possible if there was an argument in the middle whose\n      // name was not an identifier, but this should be very rare.)\n      while (argList.getFirstChild() != lastArg &&\n          !referenced.contains(fnScope.getVar(argList.getFirstChild().getString()))) {\n        argList.removeChild(argList.getFirstChild());\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bf9225c1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = null;\n+      for (Node argNode = argList.getFirstChild(); argNode != null; argNode = argNode.getNext()) {\n+        if (!referenced.contains(fnScope.getVar(argNode.getString()))) {\n+          argList.removeChild(argNode);\n+          compiler.reportCodeChange();\n+        } else {\n+          lastArg = argNode;\n+        }\n+      }\n+\n+      // Remove from the beginning as well if possible.\n+      // (This won't be possible if there was an argument in the middle whose\n+      // name was not an identifier, but this should be very rare.)\n+      while (argList.getFirstChild() != lastArg &&\n+          !referenced.contains(fnScope.getVar(argList.getFirstChild().getString()))) {\n+        argList.removeChild(argList.getFirstChild());\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}