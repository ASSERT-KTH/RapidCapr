{
    "patch": "public static <T> ReturnValue<Object> mockMethod(Class<T> returnType) {\n    if (returnType == int.class || returnType == Integer.class) {\n        return new ReturnValue<>(0);\n    } else if (returnType == boolean.class || returnType == Boolean.class) {\n        return new ReturnValue<>(false);\n    } else if (returnType == long.class || returnType == Long.class) {\n        return new ReturnValue<>(0L);\n    } else if (returnType == double.class || returnType == Double.class) {\n        return new ReturnValue<>(0.0);\n    } else if (returnType == float.class || returnType == Float.class) {\n        return new ReturnValue<>(0.0f);\n    } else if (returnType == byte.class || returnType == Byte.class) {\n        return new ReturnValue<>((byte) 0);\n    } else if (returnType == char.class || returnType == Character.class) {\n        return new ReturnValue<>((char) 0);\n    } else if (returnType == short.class || returnType == Short.class) {\n        return new ReturnValue<>((short) 0);\n    } else if (returnType == String.class) {\n        return new ReturnValue<>(\"\");\n    } else if (returnType == Iterable.class) {\n        return new ReturnValue<>(Collections.emptyList());\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cf1e871fb 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,30 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<Object> mockMethod(Class<T> returnType) {\n+    if (returnType == int.class || returnType == Integer.class) {\n+        return new ReturnValue<>(0);\n+    } else if (returnType == boolean.class || returnType == Boolean.class) {\n+        return new ReturnValue<>(false);\n+    } else if (returnType == long.class || returnType == Long.class) {\n+        return new ReturnValue<>(0L);\n+    } else if (returnType == double.class || returnType == Double.class) {\n+        return new ReturnValue<>(0.0);\n+    } else if (returnType == float.class || returnType == Float.class) {\n+        return new ReturnValue<>(0.0f);\n+    } else if (returnType == byte.class || returnType == Byte.class) {\n+        return new ReturnValue<>((byte) 0);\n+    } else if (returnType == char.class || returnType == Character.class) {\n+        return new ReturnValue<>((char) 0);\n+    } else if (returnType == short.class || returnType == Short.class) {\n+        return new ReturnValue<>((short) 0);\n+    } else if (returnType == String.class) {\n+        return new ReturnValue<>(\"\");\n+    } else if (returnType == Iterable.class) {\n+        return new ReturnValue<>(Collections.emptyList());\n+    }\n+    return null;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}