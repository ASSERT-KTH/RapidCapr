{
    "patch": "if (hasFiniteBounds) {\n    boolean hasInfiniteLowerBound = false;\n    boolean hasInfiniteUpperBound = false;\n\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i])) {\n            hasInfiniteLowerBound = true;\n        }\n        if (Double.isInfinite(uB[i])) {\n            hasInfiniteUpperBound = true;\n        }\n    }\n      \n    if (hasInfiniteLowerBound || hasInfiniteUpperBound) {\n        // If any bounds are infinite, the normalize method will not work.\n        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n    } else {\n        // Convert API to internal handling of boundaries.\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n\n        // Abort early if the normalization will overflow (cf. \"encode\" method).\n        if (Double.isInfinite(boundaries[1][0] - boundaries[0][0])) {\n            throw new NumberIsTooLargeException(boundaries[1][0] - boundaries[0][0], 0, true);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..ec410b068 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,34 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (hasFiniteBounds) {\n+    boolean hasInfiniteLowerBound = false;\n+    boolean hasInfiniteUpperBound = false;\n+\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isInfinite(lB[i])) {\n+            hasInfiniteLowerBound = true;\n+        }\n+        if (Double.isInfinite(uB[i])) {\n+            hasInfiniteUpperBound = true;\n+        }\n+    }\n+      \n+    if (hasInfiniteLowerBound || hasInfiniteUpperBound) {\n+        // If any bounds are infinite, the normalize method will not work.\n+        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n+    } else {\n+        // Convert API to internal handling of boundaries.\n+        boundaries = new double[2][];\n+        boundaries[0] = lB;\n+        boundaries[1] = uB;\n+\n+        // Abort early if the normalization will overflow (cf. \"encode\" method).\n+        if (Double.isInfinite(boundaries[1][0] - boundaries[0][0])) {\n+            throw new NumberIsTooLargeException(boundaries[1][0] - boundaries[0][0], 0, true);\n+        }\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}