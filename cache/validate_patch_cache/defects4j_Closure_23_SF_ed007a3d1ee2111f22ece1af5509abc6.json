{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    int i;\n    for (i = 0; current != null && i <= intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n\n    if (current != null) {\n      if (elem != left) {\n        elem.detachFromParent();\n        left.addChildToFront(elem);\n      }\n      return n;\n    }\n\n    // report JSC_INDEX_OUT_OF_BOUNDS_ERROR as warning\n    warning(INDEX_OUT_OF_BOUNDS_ERROR, right);\n\n    if (elem == null || elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(left);\n    } else {\n      elem.detachFromParent();\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..d28eaa99 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1421,16 +1421,11 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n       return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n       return n;\n     }\n \n@@ -1448,21 +1443,27 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n+    int i;\n+    for (i = 0; current != null && i <= intIndex; i++) {\n         elem = current;\n-\n-      current = current.getNext();\n+        current = current.getNext();\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (current != null) {\n+      if (elem != left) {\n+        elem.detachFromParent();\n+        left.addChildToFront(elem);\n+      }\n       return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    // report JSC_INDEX_OUT_OF_BOUNDS_ERROR as warning\n+    warning(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+\n+    if (elem == null || elem.isEmpty()) {\n+      elem = NodeUtil.newUndefinedNode(left);\n     } else {\n-      left.removeChild(elem);\n+      elem.detachFromParent();\n     }\n \n     // Replace the entire GETELEM with the value",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}