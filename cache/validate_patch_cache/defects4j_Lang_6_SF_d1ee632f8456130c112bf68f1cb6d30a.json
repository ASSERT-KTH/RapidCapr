{
    "patch": "public static String escapeCsv(String input) {\n    if (input == null) {\n        return null;\n    }\n    String[] fields = new String[] { input };\n    StringWriter stringWriter = new StringWriter();\n    try (CSVWriter writer = new CSVWriter(stringWriter)) {\n        writer.writeNext(fields);\n        String output = stringWriter.toString().trim();\n        // CSVWriter may add enclosing quotes - we need to remove them\n        if (output.length() > 1 && \n            output.charAt(0) == '\"' && \n            output.charAt(output.length() - 1) == '\"') {\n            output = output.substring(1, output.length() - 1);\n        }\n        return output;\n    } catch (IOException e) {\n        // StringWriter should not throw IOExceptions\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..9e9dbd83 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,27 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n+public static String escapeCsv(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    String[] fields = new String[] { input };\n+    StringWriter stringWriter = new StringWriter();\n+    try (CSVWriter writer = new CSVWriter(stringWriter)) {\n+        writer.writeNext(fields);\n+        String output = stringWriter.toString().trim();\n+        // CSVWriter may add enclosing quotes - we need to remove them\n+        if (output.length() > 1 && \n+            output.charAt(0) == '\"' && \n+            output.charAt(output.length() - 1) == '\"') {\n+            output = output.substring(1, output.length() - 1);\n         }\n+        return output;\n+    } catch (IOException e) {\n+        // StringWriter should not throw IOExceptions\n+        throw new RuntimeException(e);\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: try-with-resources is not supported in -source 1.5",
    "test_result": "ERROR"
}