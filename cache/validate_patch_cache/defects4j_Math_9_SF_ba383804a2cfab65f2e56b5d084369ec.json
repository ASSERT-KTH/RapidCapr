{
    "patch": "public void testRevert() {\n    Line line = new Line(new Vector(1.0f, 2.0f), new Vector(3.0f, 4.0f));\n    Line revertedLine = line.revert();\n    assertEquals(1.0f, revertedLine.getEnd().getX(), 0.001f);\n    assertEquals(2.0f, revertedLine.getEnd().getY(), 0.001f);\n    assertEquals(-3.0f, revertedLine.getDirection().getX(), 0.001f);\n    assertEquals(-4.0f, revertedLine.getDirection().getY(), 0.001f);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..51c85ae2c 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,14 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public void testRevert() {\n+    Line line = new Line(new Vector(1.0f, 2.0f), new Vector(3.0f, 4.0f));\n+    Line revertedLine = line.revert();\n+    assertEquals(1.0f, revertedLine.getEnd().getX(), 0.001f);\n+    assertEquals(2.0f, revertedLine.getEnd().getY(), 0.001f);\n+    assertEquals(-3.0f, revertedLine.getDirection().getX(), 0.001f);\n+    assertEquals(-4.0f, revertedLine.getDirection().getY(), 0.001f);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: Vector is abstract; cannot be instantiated",
    "test_result": "ERROR"
}