{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (!isBetter(reflected, best, comparator) && isBetter(reflected, worst,\n                    comparator)) {\n\n                // perform an expansion step\n                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n                if (!isBetter(expanded, reflected, comparator)) {\n                    simplex = replaceWorst(expanded, original, comparator);\n                } else {\n                    simplex = replaceWorst(reflected, original, comparator);\n                }\n\n            } else if (isBetter(reflected, best, comparator)) { // reflected is the best or just better than the worst\n                final RealPointValuePair[] reflectedSimplex = replaceWorst(reflected, original, comparator);\n\n                // perform an outside contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(reflectedSimplex, sigma, comparator);\n                if (isBetter(contracted, reflected, comparator)) {\n                    simplex = replaceWorst(contracted, reflectedSimplex, comparator);\n                } else {\n                    simplex = reflectedSimplex;\n                }\n\n            } else { // reflected is worse than the worst\n                final RealPointValuePair[] reflectedSimplex = replaceWorst(reflected, original, comparator);\n\n                // perform an inside contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(reflectedSimplex, psi, comparator);\n                if (isBetter(contracted, worst, comparator)) {\n                    simplex = replaceWorst(contracted, reflectedSimplex, comparator);\n\n                } else { // perform a shrink\n                    simplex = shrink(original, comparator);\n                }\n            }\n\n            if (checker != null && checker.converged(getIterations(), best, simplex)) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..9cd26c38d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -71,31 +71,45 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+            if (!isBetter(reflected, best, comparator) && isBetter(reflected, worst,\n+                    comparator)) {\n+\n+                // perform an expansion step\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+                if (!isBetter(expanded, reflected, comparator)) {\n+                    simplex = replaceWorst(expanded, original, comparator);\n+                } else {\n+                    simplex = replaceWorst(reflected, original, comparator);\n+                }\n+\n+            } else if (isBetter(reflected, best, comparator)) { // reflected is the best or just better than the worst\n+                final RealPointValuePair[] reflectedSimplex = replaceWorst(reflected, original, comparator);\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                // perform an outside contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(reflectedSimplex, sigma, comparator);\n+                if (isBetter(contracted, reflected, comparator)) {\n+                    simplex = replaceWorst(contracted, reflectedSimplex, comparator);\n+                } else {\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else { // reflected is worse than the worst\n+                final RealPointValuePair[] reflectedSimplex = replaceWorst(reflected, original, comparator);\n \n-            }\n+                // perform an inside contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(reflectedSimplex, psi, comparator);\n+                if (isBetter(contracted, worst, comparator)) {\n+                    simplex = replaceWorst(contracted, reflectedSimplex, comparator);\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                } else { // perform a shrink\n+                    simplex = shrink(original, comparator);\n+                }\n+            }\n \n-            // check convergence\n+            if (checker != null && checker.converged(getIterations(), best, simplex)) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}