{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n\n    try {\n        if (result == null) {\n            // Record the bad position information, then return an empty string\n            throw new IllegalStateException(\"Recorded bad position information\");\n        }\n        result = result.trim();\n        result = result.replaceAll(\"\\\\s+$\", \"\");\n    } catch (IllegalStateException e) {\n        result = \"\";\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..5bbc615a 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,22 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+\n+    try {\n+        if (result == null) {\n+            // Record the bad position information, then return an empty string\n+            throw new IllegalStateException(\"Recorded bad position information\");\n+        }\n+        result = result.trim();\n+        result = result.replaceAll(\"\\\\s+$\", \"\");\n+    } catch (IllegalStateException e) {\n+        result = \"\";\n+    }\n+\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}