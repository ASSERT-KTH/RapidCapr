{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null && constructorType.isConstructor()) {\n    type = constructorType.toMaybeFunctionType().getInstanceType();\n  }\n  if (type == null) { // No constructor type, or not a constructor\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    if (arg.getJSType() == null || arg.getJSType().isVoidType()) {\n      arg.setJSType(getNativeType(UNKNOWN_TYPE));\n    }\n    scope = traverse(arg, scope);\n  }\n\n  n.setJSType(type);\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..65ecba7e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,30 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null && constructorType.isConstructor()) {\n+    type = constructorType.toMaybeFunctionType().getInstanceType();\n+  }\n+  if (type == null) { // No constructor type, or not a constructor\n+    type = getNativeType(UNKNOWN_TYPE);\n+  }\n+\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    if (arg.getJSType() == null || arg.getJSType().isVoidType()) {\n+      arg.setJSType(getNativeType(UNKNOWN_TYPE));\n     }\n-    return scope;\n+    scope = traverse(arg, scope);\n   }\n \n+  n.setJSType(type);\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}