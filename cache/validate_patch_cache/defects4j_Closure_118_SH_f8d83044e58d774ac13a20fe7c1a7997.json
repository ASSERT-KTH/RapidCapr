{
    "patch": "if (child.isString()) {\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n} else {\n  Node propertyKey = child.getFirstChild();\n  if (NodeUtil.isStaticCtor(propertyKey)) {\n    // Externs that declare constructors to be used\n    // with `new` expressions may have static references\n    // to those constructors.\n    continue;\n  }\n\n  Node methodNode = propertyKey.getNext();\n  if (!methodNode.getLastChild().isFunction()) {\n    // We only care about function methods in handleObjectLit.\n    continue;\n  }\n\n  propertyKey.setString(\n      processMethod(t, propertyKey.getString(), (T) null,\n          methodNode.getFirstChild(), NodeUtil.getNameNode(n)));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..2744960b 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,37 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (child.isString()) {\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+} else {\n+  Node propertyKey = child.getFirstChild();\n+  if (NodeUtil.isStaticCtor(propertyKey)) {\n+    // Externs that declare constructors to be used\n+    // with `new` expressions may have static references\n+    // to those constructors.\n+    continue;\n+  }\n+\n+  Node methodNode = propertyKey.getNext();\n+  if (!methodNode.getLastChild().isFunction()) {\n+    // We only care about function methods in handleObjectLit.\n+    continue;\n+  }\n+\n+  propertyKey.setString(\n+      processMethod(t, propertyKey.getString(), (T) null,\n+          methodNode.getFirstChild(), NodeUtil.getNameNode(n)));\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}