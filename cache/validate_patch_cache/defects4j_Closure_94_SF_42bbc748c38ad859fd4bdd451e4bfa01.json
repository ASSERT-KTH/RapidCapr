{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    if (val == null) {\n        return false;\n    }\n\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n        \n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITNOT:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.AND:\n        case Token.OR:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n        case Token.ADD:\n        case Token.SUB:\n        case Token.MUL:\n        case Token.DIV:\n        case Token.MOD:\n            Node firstChild = val.getFirstChild();\n            Node lastChild = val.getLastChild();\n            return isValidDefineValue(firstChild, defines) &&\n                   isValidDefineValue(lastChild, defines);\n\n        // Uniary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n            Node child = val.getFirstChild();\n            return isValidDefineValue(child, defines);\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n            if (val.isName()) {\n                return defines.contains(val.getString());\n            } else if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n            break;\n\n        case Token.GETPROP:\n            if (val.isGetProp()) {\n                return isValidDefineValue(val.getFirstChild(), defines) &&\n                       isValidDefineValue(val.getLastChild(), defines);\n            }\n            break;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..474a222f 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,62 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n+    if (val == null) {\n+        return false;\n+    }\n \n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n+    switch (val.getType()) {\n+        case Token.STRING:\n+        case Token.NUMBER:\n+        case Token.TRUE:\n+        case Token.FALSE:\n+            return true;\n+        \n+        // Binary operators are only valid if both children are valid.\n+        case Token.BITAND:\n+        case Token.BITNOT:\n+        case Token.BITOR:\n+        case Token.BITXOR:\n+        case Token.AND:\n+        case Token.OR:\n+        case Token.LSH:\n+        case Token.RSH:\n+        case Token.URSH:\n+        case Token.ADD:\n+        case Token.SUB:\n+        case Token.MUL:\n+        case Token.DIV:\n+        case Token.MOD:\n+            Node firstChild = val.getFirstChild();\n+            Node lastChild = val.getLastChild();\n+            return isValidDefineValue(firstChild, defines) &&\n+                   isValidDefineValue(lastChild, defines);\n+\n+        // Uniary operators are valid if the child is valid.\n+        case Token.NOT:\n+        case Token.NEG:\n+            Node child = val.getFirstChild();\n+            return isValidDefineValue(child, defines);\n+\n+        // Names are valid if and only if they are defines themselves.\n+        case Token.NAME:\n+            if (val.isName()) {\n+                return defines.contains(val.getString());\n+            } else if (val.isQualifiedName()) {\n+                return defines.contains(val.getQualifiedName());\n+            }\n+            break;\n \n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n-        }\n+        case Token.GETPROP:\n+            if (val.isGetProp()) {\n+                return isValidDefineValue(val.getFirstChild(), defines) &&\n+                       isValidDefineValue(val.getLastChild(), defines);\n+            }\n+            break;\n     }\n     return false;\n-  }\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}