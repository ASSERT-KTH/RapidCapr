{
    "patch": "      if (block.isFunction) {\n        // Declarations within function bodies are assumed to be assigned to multiple times.\n        if (ref.isInitializingDeclaration() || block != ref.getBasicBlock()) {\n          return false;\n        }\n        break;\n      } else if (block.isLoop) {\n        // Declarations within loop bodies are assumed to be assigned to multiple times.\n        if (ref.getBasicBlock() != block) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..eb9adae2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // Declarations within function bodies are assumed to be assigned to multiple times.\n+        if (ref.isInitializingDeclaration() || block != ref.getBasicBlock()) {\n+          return false;\n+        }\n+        break;\n+      } else if (block.isLoop) {\n+        // Declarations within loop bodies are assumed to be assigned to multiple times.\n+        if (ref.getBasicBlock() != block) {\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}