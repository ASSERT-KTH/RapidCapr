{
    "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i++) {\n        A[i-1] = i*i-i+1;\n    }\n    int count = 0;\n    for (int i = 0; i < n-2; i++) {\n        for (int j = i + 1; j < n-1; j++) {\n            int sum = A[i] + A[j];\n            int target = sum%3==0? sum/3 : sum%3==1? sum/3+2 : sum/3+1; // choose the best target to make the third term divisible by 3\n            int start = j + 1, end = n - 1, idx = -1;\n            // binary search to find the largest index less than or equal to end such that A[idx] <= target\n            while (start <= end) {\n                int mid = start + (end - start) / 2;\n                if (A[mid] > target) {\n                    end = mid - 1;\n                } else {\n                    idx = mid;\n                    start = mid + 1;\n                }\n            }\n            if (idx != -1 && (sum+A[idx])%3==0) { // if such idx exists and the sum is divisible by 3, increment the count\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/GET_MAX_TRIPLES.java b/src/main/java/humaneval/buggy/GET_MAX_TRIPLES.java\nindex e32d115..37a9266 100644\n--- a/src/main/java/humaneval/buggy/GET_MAX_TRIPLES.java\n+++ b/src/main/java/humaneval/buggy/GET_MAX_TRIPLES.java\n@@ -13,19 +13,32 @@ Example :\n     The only valid triple is (1, 7, 13). */\n \n public class GET_MAX_TRIPLES {\n-    public static int get_max_triples(int n) {\n-        int[] A = new int[n];\n-        for (int i = 1; i <= n; i += 1)\n-            A[i - 1] = i * i - i + 1;\n-        \n-        int result = 0;\n-        for (int i = 0; i < n-2; i += 1) {\n-            for (int j = 0; j < n-1; j += 1) {\n-                for (int k = 0; k < n; k += 1) {\n-                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n+public static int get_max_triples(int n) {\n+    int[] A = new int[n];\n+    for (int i = 1; i <= n; i++) {\n+        A[i-1] = i*i-i+1;\n+    }\n+    int count = 0;\n+    for (int i = 0; i < n-2; i++) {\n+        for (int j = i + 1; j < n-1; j++) {\n+            int sum = A[i] + A[j];\n+            int target = sum%3==0? sum/3 : sum%3==1? sum/3+2 : sum/3+1; // choose the best target to make the third term divisible by 3\n+            int start = j + 1, end = n - 1, idx = -1;\n+            // binary search to find the largest index less than or equal to end such that A[idx] <= target\n+            while (start <= end) {\n+                int mid = start + (end - start) / 2;\n+                if (A[mid] > target) {\n+                    end = mid - 1;\n+                } else {\n+                    idx = mid;\n+                    start = mid + 1;\n                 }\n             }\n+            if (idx != -1 && (sum+A[idx])%3==0) { // if such idx exists and the sum is divisible by 3, increment the count\n+                count++;\n+            }\n         }\n-        return result;\n     }\n+    return count;\n+}\n }",
    "result_reason": "   TEST_GET_MAX_TRIPLES.test_0:7 expected:<0> but was:<1>",
    "test_result": "FAIL"
}