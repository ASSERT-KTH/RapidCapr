{
    "patch": "private void readTypeVariables() {\n    TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n    if (typeVariables.length == 0) {\n        return;\n    }\n    for (TypeVariable<?> variable : typeVariables) {\n        for (Type type : variable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        registerTypeVariablesOn(getActualTypeArgumentFor(variable));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..2821f057d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,23 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n+    if (typeVariables.length == 0) {\n+        return;\n+    }\n+    for (TypeVariable<?> variable : typeVariables) {\n+        for (Type type : variable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        registerTypeVariablesOn(getActualTypeArgumentFor(variable));\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}