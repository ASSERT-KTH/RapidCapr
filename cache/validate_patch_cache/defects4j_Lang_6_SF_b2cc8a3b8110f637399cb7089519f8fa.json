{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos+= c.length;\n                continue;\n            }\n            // if the translator asks us to translate less than a whole character (i.e., if it\n            // consumed only one byte of a multi-byte sequence), then it is a programming error\n            // and we throw IllegalArgumentException.\n            int bytesConsumed = 0;\n            for (int pt = 0; pt < consumed; pt++) {\n                int cp = Character.codePointAt(input, pos + bytesConsumed);\n                int charCount = Character.charCount(cp);\n                bytesConsumed += computeEncodedLength(cp);\n                if (pt < consumed - 1 && bytesConsumed == charCount) {\n                    throw new IllegalArgumentException(\"Consumed only one byte of a multi-byte sequence: \" \n                        + input.subSequence(pos, pos + bytesConsumed).toString());\n                }\n            }\n            out.write(input.subSequence(pos, pos + bytesConsumed).toString());\n            pos += bytesConsumed;\n        }\n    }\n    \n    /**\n     * Compute the byte-encoded length of a code point. \n     *\n     * <p>For ASCII and Latin1 characters, it returns 1. For multi-byte code points, it returns the \n     * number of bytes needed to encode them in the platform's default charset.\n     */\n    private static int computeEncodedLength(int cp) {\n        if (cp <= 0xFF) {\n            return 1;\n        }\n        CharsetEncoder enc = Charset.defaultCharset().newEncoder();\n        try {\n            return enc.encode(CharBuffer.wrap(Character.toChars(cp))).limit();\n        } catch (CharacterCodingException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..242ef356 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -89,11 +89,39 @@ public abstract class CharSequenceTranslator {\n                 pos+= c.length;\n                 continue;\n             }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n+            // if the translator asks us to translate less than a whole character (i.e., if it\n+            // consumed only one byte of a multi-byte sequence), then it is a programming error\n+            // and we throw IllegalArgumentException.\n+            int bytesConsumed = 0;\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                int cp = Character.codePointAt(input, pos + bytesConsumed);\n+                int charCount = Character.charCount(cp);\n+                bytesConsumed += computeEncodedLength(cp);\n+                if (pt < consumed - 1 && bytesConsumed == charCount) {\n+                    throw new IllegalArgumentException(\"Consumed only one byte of a multi-byte sequence: \" \n+                        + input.subSequence(pos, pos + bytesConsumed).toString());\n+                }\n             }\n+            out.write(input.subSequence(pos, pos + bytesConsumed).toString());\n+            pos += bytesConsumed;\n+        }\n+    }\n+    \n+    /**\n+     * Compute the byte-encoded length of a code point. \n+     *\n+     * <p>For ASCII and Latin1 characters, it returns 1. For multi-byte code points, it returns the \n+     * number of bytes needed to encode them in the platform's default charset.\n+     */\n+    private static int computeEncodedLength(int cp) {\n+        if (cp <= 0xFF) {\n+            return 1;\n+        }\n+        CharsetEncoder enc = Charset.defaultCharset().newEncoder();\n+        try {\n+            return enc.encode(CharBuffer.wrap(Character.toChars(cp))).limit();\n+        } catch (CharacterCodingException e) {\n+            throw new IllegalArgumentException(e);\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}