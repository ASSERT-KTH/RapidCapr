{
    "patch": "import org.apache.commons.lang3.CharUtils;\n\npublic class StringUtils {\n    public static boolean containsAny(final CharSequence string, final char... searchChars) {\n        if (isEmpty(string) || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n        final int len = string.length();\n        final int searchLen = searchChars.length;\n        final int endIndex = len - searchLen;\n        for (int i = 0; i <= endIndex; ++i) {\n            for (int j = 0; j < searchLen; ++j) {\n                if (CharUtils.equals(string.charAt(i + j), searchChars[j])) {\n                    return true;\n                }\n                // Handle supplementary characters (U+10000 to U+10FFFF)\n                if (Character.isHighSurrogate(searchChars[j]) && i < endIndex) {\n                    // Check if the next character is the low surrogate\n                    if (Character.isLowSurrogate(string.charAt(i + j + 1))) {\n                        final int codePoint = Character.toCodePoint(searchChars[j], string.charAt(i + j + 1));\n                        if (Character.charCount(codePoint) == 2) {\n                            // The supplementary character is represented as two chars in Java\n                            if (CharUtils.equals(string.charAt(i + j), Character.highSurrogate(codePoint))\n                                    && CharUtils.equals(string.charAt(i + j + 1), Character.lowSurrogate(codePoint))) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..2273f373 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import org.apache.commons.lang3.CharUtils;\n+\n+public class StringUtils {\n+    public static boolean containsAny(final CharSequence string, final char... searchChars) {\n+        if (isEmpty(string) || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+        final int len = string.length();\n+        final int searchLen = searchChars.length;\n+        final int endIndex = len - searchLen;\n+        for (int i = 0; i <= endIndex; ++i) {\n+            for (int j = 0; j < searchLen; ++j) {\n+                if (CharUtils.equals(string.charAt(i + j), searchChars[j])) {\n+                    return true;\n+                }\n+                // Handle supplementary characters (U+10000 to U+10FFFF)\n+                if (Character.isHighSurrogate(searchChars[j]) && i < endIndex) {\n+                    // Check if the next character is the low surrogate\n+                    if (Character.isLowSurrogate(string.charAt(i + j + 1))) {\n+                        final int codePoint = Character.toCodePoint(searchChars[j], string.charAt(i + j + 1));\n+                        if (Character.charCount(codePoint) == 2) {\n+                            // The supplementary character is represented as two chars in Java\n+                            if (CharUtils.equals(string.charAt(i + j), Character.highSurrogate(codePoint))\n+                                    && CharUtils.equals(string.charAt(i + j + 1), Character.lowSurrogate(codePoint))) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}