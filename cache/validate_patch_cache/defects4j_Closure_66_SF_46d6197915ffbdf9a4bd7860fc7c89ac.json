{
    "patch": "public static double getTypedPercent(String stats) {\n    int typed = 0;\n    int correct = 0;\n    for (String s : stats.split(\"\\n\")) {\n        String[] sp = s.split(\":\");\n        int val = Integer.parseInt(sp[1].trim());\n        if (sp[0].trim().equals(\"Typed\")) {\n            typed = val;\n        } else if (sp[0].trim().equals(\"Correct\")) {\n            correct = val;\n        }\n    }\n    return (double) correct / typed * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..de95cf58 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String stats) {\n+    int typed = 0;\n+    int correct = 0;\n+    for (String s : stats.split(\"\\n\")) {\n+        String[] sp = s.split(\":\");\n+        int val = Integer.parseInt(sp[1].trim());\n+        if (sp[0].trim().equals(\"Typed\")) {\n+            typed = val;\n+        } else if (sp[0].trim().equals(\"Correct\")) {\n+            correct = val;\n+        }\n+    }\n+    return (double) correct / typed * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}