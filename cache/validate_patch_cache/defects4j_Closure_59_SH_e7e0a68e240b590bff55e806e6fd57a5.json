{
    "patch": "  // Set the warning level for `GLOBAL_THIS` based on `checkGlobalThisLevel`.\n  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS,\n      options.checkGlobalThisLevel);\n\n  // Turn off `GLOBAL_THIS` warning if `checkGlobalThisLevel` is not enabled.\n  if (!options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..91706f80 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,14 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+  // Set the warning level for `GLOBAL_THIS` based on `checkGlobalThisLevel`.\n+  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS,\n+      options.checkGlobalThisLevel);\n+\n+  // Turn off `GLOBAL_THIS` warning if `checkGlobalThisLevel` is not enabled.\n+  if (!options.checkGlobalThisLevel.isOn()) {\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n+  }\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}