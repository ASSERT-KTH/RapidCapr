{
    "patch": "        int savedFieldsCount = iSavedFieldsCount;\n        DurationField savedFieldsDuration = null;\n        for (int i = 0; i < savedFieldsCount; i++) {\n            DurationField newDurationField = iSavedFields[i].iField.getDurationField();\n            if (savedFieldsDuration == null) {\n                savedFieldsDuration = newDurationField;\n            } else if (newDurationField != savedFieldsDuration) {\n                DurationField unwrappedDurationField = newDurationField.getWrappedField();\n                if ((unwrappedDurationField == null || unwrappedDurationField != savedFieldsDuration) &&\n                        (savedFieldsDuration.getRangeDurationField() != newDurationField.getRangeDurationField()\n                                || savedFieldsDuration.compareTo(newDurationField) > 0)) {\n                    throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n                }\n            }\n            savedFields[i].saveValue(iInstant, resetFields);\n            savedFields[i].saveValue(millis, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..376bece6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        int savedFieldsCount = iSavedFieldsCount;\n+        DurationField savedFieldsDuration = null;\n+        for (int i = 0; i < savedFieldsCount; i++) {\n+            DurationField newDurationField = iSavedFields[i].iField.getDurationField();\n+            if (savedFieldsDuration == null) {\n+                savedFieldsDuration = newDurationField;\n+            } else if (newDurationField != savedFieldsDuration) {\n+                DurationField unwrappedDurationField = newDurationField.getWrappedField();\n+                if ((unwrappedDurationField == null || unwrappedDurationField != savedFieldsDuration) &&\n+                        (savedFieldsDuration.getRangeDurationField() != newDurationField.getRangeDurationField()\n+                                || savedFieldsDuration.compareTo(newDurationField) > 0)) {\n+                    throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n+                }\n+            }\n+            savedFields[i].saveValue(iInstant, resetFields);\n+            savedFields[i].saveValue(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}