{
    "patch": "import java.util.Random;\n\nclass Distribution {\n\n    static final double EPSILON = 0.000001;\n\n    private final Random rng;\n    private final int max;\n\n    Distribution(Random rng, int max) {\n        this.rng = rng;\n        this.max = max;\n    }\n\n    int sample() {\n        return rng.nextInt(max) + 1;\n    }\n\n    double[] pmf() {\n        double[] result = new double[max];\n        for (int i = 1; i <= max; i++) {\n            result[i - 1] = 1.0 / max;\n        }\n        return result;\n    }\n}\n\nclass Main {\n\n    static final long SEED = 1L;\n\n    public static void main(String[] args) {\n        Random rng = new Random(SEED);\n        Distribution distribution = new Distribution(rng, 6);\n        int n = 1000000;\n        double[] pmf = distribution.pmf();\n        double[] observed = new double[6];\n        for (int i = 0; i < n; i++) {\n            int sample = distribution.sample();\n            observed[sample - 1] += 1.0 / n;\n        }\n        double expected = 0;\n        double actual = 0;\n        for (int i = 0; i < pmf.length; i++) {\n            expected += pmf[i] * i;\n            actual += observed[i] * i;\n        }\n        double s1 = 0d;\n        for (int i = 0; i < pmf.length; i++) {\n            s1 += Math.pow(expected - i, 2) * pmf[i];\n        }\n        double s2 = 0d;\n        for (int i = 0; i < observed.length; i++) {\n            s2 += Math.pow(actual - i, 2) * observed[i];\n        }\n        System.out.println(\"Expected: \" + expected);\n        System.out.println(\"Actual: \" + actual);\n        System.out.println(\"s1: \" + s1);\n        System.out.println(\"s2: \" + s2);\n        assert Math.abs(expected - actual) < Distribution.EPSILON;\n        assert Math.abs(s1 - s2) < Distribution.EPSILON;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}