{
    "patch": "Name name = functionNode.getFunctionName();\nBoolean isParenthesized = functionNode.isParenthesized();\nBoolean isUnnamedFunction = false;\n\nif (name == null && !isParenthesized) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n}\nNode node = newNode(Token.FUNCTION);\n\nNode newName = transform(name);\nif (isUnnamedFunction) {\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n}\n\nnode.addChildToBack(newName);\n\nif (isParenthesized) {\n    Node leftParen = newNode(Token.LP);\n    leftParen.setLineno(functionNode.getLineno());\n    leftParen.setCharno(position2charno(functionNode.getLp() + \n                functionNode.getAbsolutePosition()));\n    node.addChildToBack(leftParen);\n}\n\nNode lp = newNode(Token.LP);\nfor (AstNode param: functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n}\nnode.addChildToBack(lp);\n        \nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\n\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..39cc5b58 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,46 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+Boolean isParenthesized = functionNode.isParenthesized();\n+Boolean isUnnamedFunction = false;\n+\n+if (name == null && !isParenthesized) {\n+    name = new Name();\n+    name.setIdentifier(\"\");\n+    isUnnamedFunction = true;\n+}\n+Node node = newNode(Token.FUNCTION);\n+\n+Node newName = transform(name);\n+if (isUnnamedFunction) {\n+    newName.setLineno(functionNode.getLineno());\n+    int lpColumn = functionNode.getAbsolutePosition() +\n+            functionNode.getLp();\n+    newName.setCharno(position2charno(lpColumn));\n+}\n+\n+node.addChildToBack(newName);\n+\n+if (isParenthesized) {\n+    Node leftParen = newNode(Token.LP);\n+    leftParen.setLineno(functionNode.getLineno());\n+    leftParen.setCharno(position2charno(functionNode.getLp() + \n+                functionNode.getAbsolutePosition()));\n+    node.addChildToBack(leftParen);\n+}\n+\n+Node lp = newNode(Token.LP);\n+for (AstNode param: functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+}\n+node.addChildToBack(lp);\n+        \n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}