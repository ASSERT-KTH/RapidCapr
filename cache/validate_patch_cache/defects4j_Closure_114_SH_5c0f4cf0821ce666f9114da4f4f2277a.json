{
    "patch": "} else if (NodeUtil.isExpressionNode(n) && n.getLastChild().isFunction()) {\n    // The RHS of the assignment is a function call, so it should not\n    // be associated with the LHS.\n    // This fixes the issue where the RHS is the caller expression of\n    // the assignment.\n    // See testAssignWithCall2 for an example of this.\n    return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..fc699470 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,14 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+} else if (NodeUtil.isExpressionNode(n) && n.getLastChild().isFunction()) {\n+    // The RHS of the assignment is a function call, so it should not\n+    // be associated with the LHS.\n+    // This fixes the issue where the RHS is the caller expression of\n+    // the assignment.\n+    // See testAssignWithCall2 for an example of this.\n+    return;\n+}\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}