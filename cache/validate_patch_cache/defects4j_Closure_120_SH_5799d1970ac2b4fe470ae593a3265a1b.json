{
    "patch": "        if (block.isFunction && block.containsReference(ref)) {\n          // If the variable is initialized inside a closure that contains the\n          // reference to the variable, we have to assume it is assigned multiple times.\n          return false;\n        } else if (block.isLoop && !block.tightlyContainsReference(ref)) {\n          // The variable is assigned more than once in a loop that is not tightly\n          // looped (i.e. the loop doesn't tightly encapsulate the reference).\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..67d8bf21 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction && block.containsReference(ref)) {\n+          // If the variable is initialized inside a closure that contains the\n+          // reference to the variable, we have to assume it is assigned multiple times.\n+          return false;\n+        } else if (block.isLoop && !block.tightlyContainsReference(ref)) {\n+          // The variable is assigned more than once in a loop that is not tightly\n+          // looped (i.e. the loop doesn't tightly encapsulate the reference).\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}