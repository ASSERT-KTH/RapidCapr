{
    "patch": "        super();\n        int[] values = new int[4];\n        values[0] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_DAY);\n        values[1] = FieldUtils.safeToInt((duration / DateTimeConstants.MILLIS_PER_HOUR) % 24);\n        values[2] = FieldUtils.safeToInt((duration / DateTimeConstants.MILLIS_PER_MINUTE) % 60);\n        values[3] = FieldUtils.safeToInt((duration / DateTimeConstants.MILLIS_PER_SECOND) % 60);\n        super.setValues(values);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..a96ed238 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,13 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        super();\n+        int[] values = new int[4];\n+        values[0] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_DAY);\n+        values[1] = FieldUtils.safeToInt((duration / DateTimeConstants.MILLIS_PER_HOUR) % 24);\n+        values[2] = FieldUtils.safeToInt((duration / DateTimeConstants.MILLIS_PER_MINUTE) % 60);\n+        values[3] = FieldUtils.safeToInt((duration / DateTimeConstants.MILLIS_PER_SECOND) % 60);\n+        super.setValues(values);\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}