{
    "patch": "if (!constraintObj.isNamedType()) {\n  // We only want to match contraints on anonymous types provided they are not\n  // function types.\n  if ((constraintObj.isRecordType() || constraintObj.isUnionType()) && !constraintObj.isFunctionType() && !constraintObj.isConstructor()) {\n    // Handle the case where the constraint object is a record type or a union containing a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking each property on the record type (or each record type in the union) and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else {\n      for (JSType alt : constraintObj.getAlternates()) {\n        if (alt.isRecordType()) {\n          for (String prop : alt.getOwnPropertyNames()) {\n            JSType propType = alt.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n              JSType typeToInfer = propType;\n              if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n              }\n              defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..5ebd2ac3 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,50 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.isNamedType()) {\n+  // We only want to match contraints on anonymous types provided they are not\n+  // function types.\n+  if ((constraintObj.isRecordType() || constraintObj.isUnionType()) && !constraintObj.isFunctionType() && !constraintObj.isConstructor()) {\n+    // Handle the case where the constraint object is a record type or a union containing a record type.\n+    //\n+    // param constraintObj {{prop: (number|undefined)}}\n+    // function f(constraintObj) {}\n+    // f({});\n+    //\n+    // We want to modify the object literal to match the constraint, by\n+    // taking each property on the record type (or each record type in the union) and trying to match\n+    // properties on this object.\n+    if (constraintObj.isRecordType()) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!isPropertyTypeDeclared(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!hasProperty(prop)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                .getLeastSupertype(propType);\n+          }\n+          defineInferredProperty(prop, typeToInfer, null);\n+        }\n+      }\n+    } else {\n+      for (JSType alt : constraintObj.getAlternates()) {\n+        if (alt.isRecordType()) {\n+          for (String prop : alt.getOwnPropertyNames()) {\n+            JSType propType = alt.getPropertyType(prop);\n+            if (!isPropertyTypeDeclared(prop)) {\n+              JSType typeToInfer = propType;\n+              if (!hasProperty(prop)) {\n+                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+              }\n+              defineInferredProperty(prop, typeToInfer, null);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}