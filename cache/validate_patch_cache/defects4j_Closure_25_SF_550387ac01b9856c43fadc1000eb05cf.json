{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n\n    // Handle the case where the constructor type is null or unknown\n    if (constructorType == null || constructorType.isUnknownType() || constructorType.isNullType()) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else if (constructorType.isFunctionType()) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct.isConstructor()) {\n            // The constructor type is a constructor function, so return the instance type of the function\n            JSType instanceType = ct.getInstanceType();\n            if (instanceType != null) {\n                n.setJSType(instanceType.restrictByNotNullOrUndefined());\n            } else {\n                // The constructor function has no instance type, so return the unknown type\n                n.setJSType(getNativeType(UNKNOWN_TYPE));\n            }\n        } else {\n            // The constructor type is a function, but not a constructor, so return the \"unknown\" type\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n    } else {\n        // The constructor type is not a function, so return the constructor type\n        n.setJSType(constructorType.restrictByNotNullOrUndefined());\n    }\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..ed215291 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,41 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+\n+    // Handle the case where the constructor type is null or unknown\n+    if (constructorType == null || constructorType.isUnknownType() || constructorType.isNullType()) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else if (constructorType.isFunctionType()) {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (ct.isConstructor()) {\n+            // The constructor type is a constructor function, so return the instance type of the function\n+            JSType instanceType = ct.getInstanceType();\n+            if (instanceType != null) {\n+                n.setJSType(instanceType.restrictByNotNullOrUndefined());\n+            } else {\n+                // The constructor function has no instance type, so return the unknown type\n+                n.setJSType(getNativeType(UNKNOWN_TYPE));\n+            }\n+        } else {\n+            // The constructor type is a function, but not a constructor, so return the \"unknown\" type\n+            n.setJSType(getNativeType(UNKNOWN_TYPE));\n         }\n-      }\n+    } else {\n+        // The constructor type is not a function, so return the constructor type\n+        n.setJSType(constructorType.restrictByNotNullOrUndefined());\n     }\n-    n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}