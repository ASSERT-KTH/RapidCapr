{
    "patch": "public String fixCode(String input) {\n    if (input == null || input.isEmpty()) {\n        return input;\n    }\n    String pattern = \"(for\\\\s*\\\\([^;]+;[^;]+;[^)]+\\\\))\";\n    Pattern r = Pattern.compile(pattern);\n    Matcher m = r.matcher(input);\n\n    if (m.find()) {\n        String loopStatement = m.group(1);\n        int idxFirstBracket = input.indexOf(\"{\", m.end());\n        int idxSemicolon = input.lastIndexOf(\";\", idxFirstBracket);\n        String beforeSemicolon = input.substring(m.end(), idxSemicolon);\n        String afterSemicolon = input.substring(idxSemicolon + 1, idxFirstBracket);\n\n        // check if \"in\" keyword appears in for loop initializer\n        if (beforeSemicolon.contains(\"in\")) {\n            return input;\n        }\n\n        // check if \"in\" keyword appears in for loop condition\n        int idxSecondSemicolon = input.lastIndexOf(\";\", idxSemicolon - 1);\n        if (input.substring(idxSecondSemicolon + 1, idxSemicolon).contains(\"in\")) {\n            return input;\n        }\n\n        String result = input.substring(0, m.end()) + \"[\" + beforeSemicolon + \" in \" + afterSemicolon + \"]\"\n                + input.substring(idxFirstBracket);\n        return result;\n    }\n\n    // if no match found, return same input\n    return input;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..2eb39895 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,40 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String input) {\n+    if (input == null || input.isEmpty()) {\n+        return input;\n+    }\n+    String pattern = \"(for\\\\s*\\\\([^;]+;[^;]+;[^)]+\\\\))\";\n+    Pattern r = Pattern.compile(pattern);\n+    Matcher m = r.matcher(input);\n+\n+    if (m.find()) {\n+        String loopStatement = m.group(1);\n+        int idxFirstBracket = input.indexOf(\"{\", m.end());\n+        int idxSemicolon = input.lastIndexOf(\";\", idxFirstBracket);\n+        String beforeSemicolon = input.substring(m.end(), idxSemicolon);\n+        String afterSemicolon = input.substring(idxSemicolon + 1, idxFirstBracket);\n+\n+        // check if \"in\" keyword appears in for loop initializer\n+        if (beforeSemicolon.contains(\"in\")) {\n+            return input;\n+        }\n+\n+        // check if \"in\" keyword appears in for loop condition\n+        int idxSecondSemicolon = input.lastIndexOf(\";\", idxSemicolon - 1);\n+        if (input.substring(idxSecondSemicolon + 1, idxSemicolon).contains(\"in\")) {\n+            return input;\n+        }\n+\n+        String result = input.substring(0, m.end()) + \"[\" + beforeSemicolon + \" in \" + afterSemicolon + \"]\"\n+                + input.substring(idxFirstBracket);\n+        return result;\n+    }\n+\n+    // if no match found, return same input\n+    return input;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}