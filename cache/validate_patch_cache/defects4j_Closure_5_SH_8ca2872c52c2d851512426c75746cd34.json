{
    "patch": "if (parent.isGetProp() && parent.getFirstChild() == name) {\n            // A call target may be using the object as a 'this' value.\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n              return false;\n            }\n\n            if (NodeUtil.isDeleteProp(parent.getParent())) {\n              return false;\n            }\n\n            // check whether this is a static property and ignore those\n            // since the static properties cannot be inlined\n            if (NodeUtil.isObjectDefinition(parent.getParent())) {\n              return false;\n            }\n\n            // NOTE(nicksantos): This pass's object-splitting algorithm has\n            // a blind spot. It assumes that if a property isn't defined on an\n            // object, then the value is undefined. This is not true, because\n            // Object.prototype can have arbitrary properties on it.\n            //\n            // We short-circuit this problem by bailing out if we see a reference\n            // to a property that isn't defined on the object literal. This\n            // isn't a perfect algorithm, but it should catch most cases.\n            String propName = parent.getLastChild().getString();\n            if (!validProperties.contains(propName)) {\n              if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n                validProperties.add(propName);\n              } else {\n                return false;\n              }\n            }\n            continue;\n          } else if (isVarOrAssignExprLhs(name)) {\n            Node val = ref.getAssignedValue();\n            if (val != null && val.isObjectLit()) {\n              // Make sure that the value is not self-referential. IOW,\n              // disallow things like x = {b: x.a}.\n              //\n              // TODO: Only exclude unorderable self-referential\n              // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n              // but x = {a: 1, b: x.a} is.\n              //\n              // Also, ES5 getters/setters aren't handled by this pass.\n              for (Node child = val.getFirstChild(); child != null;\n                  child = child.getNext()) {\n                if (child.isGetterDef() || child.isSetterDef()) {\n                  // ES5 get/set not supported.\n                  return false;\n                }\n\n                validProperties.add(child.getString());\n\n                Node childVal = child.getFirstChild();\n                // Check if childVal is the parent of any of the passed in\n                // references, as that is how self-referential assignments\n                // will happen.\n                for (Reference t : refs) {\n                  Node refNode = t.getParent();\n                  while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                      // There's a self-referential assignment\n                      return false;\n                    }\n                    refNode = refNode.getParent();\n                  }\n                }\n              }\n\n              // We have found an acceptable object literal assignment. As\n              // long as there are no other assignments that mess things up,\n              // we can inline.\n              ret = true;\n            } else {\n              return false;\n            }\n          } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..5a349927 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,83 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+if (parent.isGetProp() && parent.getFirstChild() == name) {\n+            // A call target may be using the object as a 'this' value.\n+            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+              return false;\n+            }\n+\n+            if (NodeUtil.isDeleteProp(parent.getParent())) {\n+              return false;\n+            }\n+\n+            // check whether this is a static property and ignore those\n+            // since the static properties cannot be inlined\n+            if (NodeUtil.isObjectDefinition(parent.getParent())) {\n+              return false;\n+            }\n+\n+            // NOTE(nicksantos): This pass's object-splitting algorithm has\n+            // a blind spot. It assumes that if a property isn't defined on an\n+            // object, then the value is undefined. This is not true, because\n+            // Object.prototype can have arbitrary properties on it.\n+            //\n+            // We short-circuit this problem by bailing out if we see a reference\n+            // to a property that isn't defined on the object literal. This\n+            // isn't a perfect algorithm, but it should catch most cases.\n+            String propName = parent.getLastChild().getString();\n+            if (!validProperties.contains(propName)) {\n+              if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+                validProperties.add(propName);\n+              } else {\n+                return false;\n+              }\n+            }\n+            continue;\n+          } else if (isVarOrAssignExprLhs(name)) {\n+            Node val = ref.getAssignedValue();\n+            if (val != null && val.isObjectLit()) {\n+              // Make sure that the value is not self-referential. IOW,\n+              // disallow things like x = {b: x.a}.\n+              //\n+              // TODO: Only exclude unorderable self-referential\n+              // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+              // but x = {a: 1, b: x.a} is.\n+              //\n+              // Also, ES5 getters/setters aren't handled by this pass.\n+              for (Node child = val.getFirstChild(); child != null;\n+                  child = child.getNext()) {\n+                if (child.isGetterDef() || child.isSetterDef()) {\n+                  // ES5 get/set not supported.\n+                  return false;\n+                }\n+\n+                validProperties.add(child.getString());\n+\n+                Node childVal = child.getFirstChild();\n+                // Check if childVal is the parent of any of the passed in\n+                // references, as that is how self-referential assignments\n+                // will happen.\n+                for (Reference t : refs) {\n+                  Node refNode = t.getParent();\n+                  while (!NodeUtil.isStatementBlock(refNode)) {\n+                    if (refNode == childVal) {\n+                      // There's a self-referential assignment\n+                      return false;\n+                    }\n+                    refNode = refNode.getParent();\n+                  }\n+                }\n+              }\n+\n+              // We have found an acceptable object literal assignment. As\n+              // long as there are no other assignments that mess things up,\n+              // we can inline.\n+              ret = true;\n+            } else {\n+              return false;\n+            }\n+          } else {\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}