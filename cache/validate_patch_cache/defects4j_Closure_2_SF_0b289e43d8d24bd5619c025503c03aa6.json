{
    "patch": "  private void checkInterfaceConflictProperties(NodeTraversal t, Node n, String functionName,\n                                                HashMap<String, ObjectType> properties,\n                                                HashMap<String, ObjectType> currentProperties,\n                                                ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames = null;\n    if (implicitProto != null) {\n      // This can be the case if interfaceType is proxy to a non-existent\n      // object (which is a bad type annotation, but shouldn't crash).\n      currentPropertyNames = implicitProto.getOwnPropertyNames();\n    }\n    if (currentPropertyNames != null) {\n      for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        if (oType != null) {\n          if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                            functionName, name, oType.toString(), interfaceType.toString()));\n          }\n        }\n        currentProperties.put(name, interfaceType);\n      }\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(\n          t, n, functionName, properties, currentProperties, iType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..5d675c42 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,33 +1563,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n-      String functionName, HashMap<String, ObjectType> properties,\n-      HashMap<String, ObjectType> currentProperties,\n-      ObjectType interfaceType) {\n+  private void checkInterfaceConflictProperties(NodeTraversal t, Node n, String functionName,\n+                                                HashMap<String, ObjectType> properties,\n+                                                HashMap<String, ObjectType> currentProperties,\n+                                                ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n+    Set<String> currentPropertyNames = null;\n+    if (implicitProto != null) {\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n       currentPropertyNames = implicitProto.getOwnPropertyNames();\n-    for (String name : currentPropertyNames) {\n-      ObjectType oType = properties.get(name);\n-      if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n-          compiler.report(\n-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n+    }\n+    if (currentPropertyNames != null) {\n+      for (String name : currentPropertyNames) {\n+        ObjectType oType = properties.get(name);\n+        if (oType != null) {\n+          if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n+            compiler.report(\n+                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n+                            functionName, name, oType.toString(), interfaceType.toString()));\n+          }\n         }\n+        currentProperties.put(name, interfaceType);\n       }\n-      currentProperties.put(name, interfaceType);\n     }\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n-      checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n-    }\n-  }\n+      checkInterfaceConflictProperties(\n+          t, n, functionName, properties, currentProperties, iType);\n \n   /**\n    * Visits a {@link Token#FUNCTION} node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}