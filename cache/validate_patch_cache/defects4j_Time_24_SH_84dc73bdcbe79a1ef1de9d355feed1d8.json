{
    "patch": "        int firstFailedFieldIndex = -1;\n        boolean needToRethrowIllegalFieldValueException = false;\n\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n\n            try {\n                millis = savedField.set(millis, resetFields);\n\n                // Check for numeric overflow for each field\n                if (millis == Long.MIN_VALUE) {\n                    throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n                }\n            } catch (IllegalFieldValueException e) {\n                // Mark the index of the first field which threw the IllegalFieldValueException\n                if (firstFailedFieldIndex < 0) {\n                    firstFailedFieldIndex = i;\n                }\n\n                needToRethrowIllegalFieldValueException = true;\n            }\n        }\n\n        if (needToRethrowIllegalFieldValueException) {\n            // If there was an IllegalFieldValueException, re-throw the first exception\n            IllegalFieldValueException firstException = savedFields[firstFailedFieldIndex].exception;\n            if (text != null) {\n                firstException.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n            }\n            throw firstException;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..cd99b8e2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,37 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        int firstFailedFieldIndex = -1;\n+        boolean needToRethrowIllegalFieldValueException = false;\n+\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+\n+                // Check for numeric overflow for each field\n+                if (millis == Long.MIN_VALUE) {\n+                    throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                // Mark the index of the first field which threw the IllegalFieldValueException\n+                if (firstFailedFieldIndex < 0) {\n+                    firstFailedFieldIndex = i;\n+                }\n+\n+                needToRethrowIllegalFieldValueException = true;\n+            }\n+        }\n+\n+        if (needToRethrowIllegalFieldValueException) {\n+            // If there was an IllegalFieldValueException, re-throw the first exception\n+            IllegalFieldValueException firstException = savedFields[firstFailedFieldIndex].exception;\n+            if (text != null) {\n+                firstException.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+            }\n+            throw firstException;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}