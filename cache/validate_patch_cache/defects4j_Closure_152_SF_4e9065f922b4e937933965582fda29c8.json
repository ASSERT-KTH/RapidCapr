{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = safeResolve(call, t, scope) instanceof ArrowType ? (ArrowType) safeResolve(call, t, scope) : call;\n    prototype = safeResolve(prototype, t, scope) instanceof FunctionPrototypeType ? (FunctionPrototypeType) safeResolve(prototype, t, scope) : prototype;\n\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis != null && resolvedTypeOfThis.isObjectType()) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      JSType resolvedIface = safeResolve(iface, t, scope);\n      if (resolvedIface != null && resolvedIface.isObjectType()) {\n        ObjectType resolvedObj = (ObjectType) resolvedIface;\n        resolvedInterfaces.add(resolvedObj);\n        changed |= (resolvedObj != iface);\n      }\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        JSType resolvedSubType = safeResolve(subTypes.get(i), t, scope);\n        if (resolvedSubType != null && resolvedSubType.isFunctionType()) {\n          subTypes.set(i, (FunctionType) resolvedSubType);\n        }\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..f2518945 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -862,21 +862,23 @@ public class FunctionType extends PrototypeObjectType {\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+    call = safeResolve(call, t, scope) instanceof ArrowType ? (ArrowType) safeResolve(call, t, scope) : call;\n+    prototype = safeResolve(prototype, t, scope) instanceof FunctionPrototypeType ? (FunctionPrototypeType) safeResolve(prototype, t, scope) : prototype;\n \n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (resolvedTypeOfThis != null && resolvedTypeOfThis.isObjectType()) {\n+      typeOfThis = (ObjectType) resolvedTypeOfThis;\n+    }\n \n     boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+      JSType resolvedIface = safeResolve(iface, t, scope);\n+      if (resolvedIface != null && resolvedIface.isObjectType()) {\n+        ObjectType resolvedObj = (ObjectType) resolvedIface;\n+        resolvedInterfaces.add(resolvedObj);\n+        changed |= (resolvedObj != iface);\n+      }\n     }\n     if (changed) {\n       implementedInterfaces = resolvedInterfaces.build();\n@@ -884,7 +886,10 @@ public class FunctionType extends PrototypeObjectType {\n \n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        JSType resolvedSubType = safeResolve(subTypes.get(i), t, scope);\n+        if (resolvedSubType != null && resolvedSubType.isFunctionType()) {\n+          subTypes.set(i, (FunctionType) resolvedSubType);\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}