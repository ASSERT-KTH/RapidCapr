{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        return;\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            readTypeVariablesOn((TypeVariable<?>) bound);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n        TypeVariable<?>[] typeParameters = declaringClass.getTypeParameters();\n        int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n        if (index >= 0) {\n            Type superclassType = getClass().getGenericSuperclass();\n            if (superclassType instanceof ParameterizedType) {\n                Type[] actualTypeArguments = ((ParameterizedType) superclassType).getActualTypeArguments();\n                Type actualType = actualTypeArguments[index];\n                if (actualType instanceof TypeVariable) {\n                    readTypeVariablesOn((TypeVariable<?>) actualType);\n                } else {\n                    registerTypeVariablesOn(actualType);\n                }\n            }\n        }\n    }\n}\n\nprivate void readTypeVariablesOn(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        return;\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            readTypeVariablesOn((TypeVariable<?>) bound);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f3e296893 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,54 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            readTypeVariablesOn((TypeVariable<?>) bound);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n+        TypeVariable<?>[] typeParameters = declaringClass.getTypeParameters();\n+        int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n+        if (index >= 0) {\n+            Type superclassType = getClass().getGenericSuperclass();\n+            if (superclassType instanceof ParameterizedType) {\n+                Type[] actualTypeArguments = ((ParameterizedType) superclassType).getActualTypeArguments();\n+                Type actualType = actualTypeArguments[index];\n+                if (actualType instanceof TypeVariable) {\n+                    readTypeVariablesOn((TypeVariable<?>) actualType);\n+                } else {\n+                    registerTypeVariablesOn(actualType);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOn(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            readTypeVariablesOn((TypeVariable<?>) bound);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}