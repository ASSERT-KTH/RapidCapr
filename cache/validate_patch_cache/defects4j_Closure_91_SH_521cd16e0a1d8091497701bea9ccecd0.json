{
    "patch": "      boolean isLentToPrototype = isFunctionLentToPrototype(parent);\n      if (isLentToPrototype) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        boolean isPrototypeAssignment = false;\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n        }\n        if (!isPrototypeAssignment) {\n          return true;\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  private static boolean isFunctionLentToPrototype(Node parent) {\n    if (parent == null || parent.getType() != Token.ASSIGN) {\n      return false;\n    }\n    Node lhs = parent.getFirstChild();\n    if (lhs == null || !NodeUtil.isGet(lhs)) {\n      return false;\n    }\n    Node llhs = lhs.getFirstChild();\n    return llhs != null &&\n        llhs.getType() == Token.GETPROP &&\n        llhs.getLastChild().getString().equals(\"prototype\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a6deff9c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,59 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      boolean isLentToPrototype = isFunctionLentToPrototype(parent);\n+      if (isLentToPrototype) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        boolean isPrototypeAssignment = false;\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeAssignment = true;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeAssignment = true;\n+          }\n+        }\n+        if (!isPrototypeAssignment) {\n+          return true;\n+        }\n+      }\n+    } else {\n+      return true;\n+    }\n+  }\n+\n+  private static boolean isFunctionLentToPrototype(Node parent) {\n+    if (parent == null || parent.getType() != Token.ASSIGN) {\n+      return false;\n+    }\n+    Node lhs = parent.getFirstChild();\n+    if (lhs == null || !NodeUtil.isGet(lhs)) {\n+      return false;\n+    }\n+    Node llhs = lhs.getFirstChild();\n+    return llhs != null &&\n+        llhs.getType() == Token.GETPROP &&\n+        llhs.getLastChild().getString().equals(\"prototype\");\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}