{
    "patch": "public boolean canBeCalled() {\n  return isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n      return getReferenceName();\n  } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      boolean hasPrototypeProperties = false;\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n          if (current.hasNonPrototypeProperties()) {\n              hasPrototypeProperties = true;\n          }\n          propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n          if (i > 0) {\n              sb.append(\", \");\n          }\n\n          ObjectType propertyType = getPropertyType(property);\n          if (propertyType != null) {\n              boolean isPropertyValueInherited = (propertyType != this);\n              if (isPropertyValueInherited) {\n                  sb.append(\"[\" + property + \": \");\n                  sb.append(propertyType.toStringHelper(forAnnotations));\n                  sb.append(\"]\");\n              } else {\n                  sb.append(property + \": \");\n                  sb.append(propertyType.toStringHelper(forAnnotations));\n              }\n              \n          } else {\n              sb.append(property + \": ?\");\n          }\n\n          ++i;\n          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n              sb.append(\", ...\");\n              break;\n          }\n      }\n\n      if (hasPrototypeProperties) {\n          sb.append(\", prototype: \");\n          if (this.getImplicitPrototype() == null) {\n              sb.append(\"null\");\n          } else {\n              sb.append(getImplicitPrototype().toStringHelper(forAnnotations));\n          }\n      }\n\n      sb.append(\"}\");\n      prettyPrint = true;\n      return sb.toString();\n  } else {\n      return \"{...}\";\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..3111c47c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,25 +345,29 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+  return isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n       return getReferenceName();\n-    } else if (prettyPrint) {\n+  } else if (prettyPrint) {\n       // Don't pretty print recursively.\n       prettyPrint = false;\n \n       // Use a tree set so that the properties are sorted.\n       Set<String> propertyNames = Sets.newTreeSet();\n+      boolean hasPrototypeProperties = false;\n       for (ObjectType current = this;\n            current != null && !current.isNativeObjectType() &&\n                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+          if (current.hasNonPrototypeProperties()) {\n+              hasPrototypeProperties = true;\n+          }\n+          propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n       StringBuilder sb = new StringBuilder();\n@@ -371,29 +375,49 @@ class PrototypeObjectType extends ObjectType {\n \n       int i = 0;\n       for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+          if (i > 0) {\n+              sb.append(\", \");\n+          }\n+\n+          ObjectType propertyType = getPropertyType(property);\n+          if (propertyType != null) {\n+              boolean isPropertyValueInherited = (propertyType != this);\n+              if (isPropertyValueInherited) {\n+                  sb.append(\"[\" + property + \": \");\n+                  sb.append(propertyType.toStringHelper(forAnnotations));\n+                  sb.append(\"]\");\n+              } else {\n+                  sb.append(property + \": \");\n+                  sb.append(propertyType.toStringHelper(forAnnotations));\n+              }\n+              \n+          } else {\n+              sb.append(property + \": ?\");\n+          }\n+\n+          ++i;\n+          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+              sb.append(\", ...\");\n+              break;\n+          }\n+      }\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n+      if (hasPrototypeProperties) {\n+          sb.append(\", prototype: \");\n+          if (this.getImplicitPrototype() == null) {\n+              sb.append(\"null\");\n+          } else {\n+              sb.append(getImplicitPrototype().toStringHelper(forAnnotations));\n+          }\n       }\n \n       sb.append(\"}\");\n-\n       prettyPrint = true;\n       return sb.toString();\n-    } else {\n+  } else {\n       return \"{...}\";\n-    }\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}