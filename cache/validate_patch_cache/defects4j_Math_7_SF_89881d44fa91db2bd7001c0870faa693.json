{
    "patch": "public <T extends EventDetector> void doEvents(final SpacecraftState s0, final Collection<T> detectors) throws OrekitException {\n    final EventHandlerManager manager =\n        new EventHandlerManager(s0, Collections.unmodifiableCollection(detectors));\n    final Interpolator interpolator = s0.getOrbit().getPVCoordinates().getInterpolator();\n    double tStart = interpolator.getPreviousTime();\n    boolean isLastStep = false;\n\n    final List<EventState> eventsStates = new ArrayList<EventState>();\n\n    for (final EventDetector detector : detectors) {\n        // notify the detector before propagation starts\n        detector.init(s0.getDate(), s0.getFrame());\n        // add the event corresponding to the detector to the list\n        final EventState state = detector.createInitialState(s0);\n        eventsStates.add(state);\n        // register the start event to the event state\n        manager.add(state, detector.getMaxCheckInterval(), detector.getThreshold(),\n                    detector.getMaxIterationCount());\n    }\n\n    while (true) {\n\n        // search earliest events occurrence time\n        double minStep = Double.POSITIVE_INFINITY;\n        for (final EventState state : eventsStates) {\n            minStep = Math.min(minStep, state.getTimeOfNextEvent());\n        }\n        if (minStep <= tStart) {\n            throw new OrekitException(OrekitMessages.EVENTS_STOPPED_BEFORE_ANY_EVENT);\n        }\n\n        // propagate to the earliest detected event time\n        final double tEnd = Math.min(minStep, interpolator.getMaxTime());\n        interpolator.setSoftPreviousTime(tStart);\n        interpolator.setSoftCurrentTime(tEnd);\n        final SpacecraftState sEnd = new SpacecraftState(interpolator.getInterpolatedState(),\n                                                         interpolator.getInterpolatedDerivatives(),\n                                                         interpolator.getInterpolatedState().getFrame());\n\n        // handle events as soon as possible\n        manager.handleStep(sEnd);\n\n        // check if we should stop integration\n        for (final EventState es : eventsStates) {\n            if (es.isOccurred()) {\n                isLastStep = true;\n            }\n        }\n        if (isLastStep) {\n            return;\n        }\n\n        // through events analysis successfully detected occurrence times\n        for (final EventState state : eventsStates) {\n            if (state.isScheduled()) {\n                state.reinitializeBegin(sEnd);\n                manager.update(state, state.getTimeOfNextEvent(), sEnd);\n            } else {\n                state.stepAccepted(state.getTimeOfNextEvent(), sEnd);\n            }\n        }\n\n        // prepare handling of the next step\n        tStart        = tEnd;\n        for (final EventState state : eventsStates) {\n            // do not look already scheduled events\n            if (!state.isOccurred() && !state.isScheduled()) {\n                manager.add(state, state.getMaxCheckInterval(), state.getThreshold(),\n                            state.getMaxIterationCount());\n            }\n        }\n\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..eea629a64 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,81 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public <T extends EventDetector> void doEvents(final SpacecraftState s0, final Collection<T> detectors) throws OrekitException {\n+    final EventHandlerManager manager =\n+        new EventHandlerManager(s0, Collections.unmodifiableCollection(detectors));\n+    final Interpolator interpolator = s0.getOrbit().getPVCoordinates().getInterpolator();\n+    double tStart = interpolator.getPreviousTime();\n+    boolean isLastStep = false;\n+\n+    final List<EventState> eventsStates = new ArrayList<EventState>();\n+\n+    for (final EventDetector detector : detectors) {\n+        // notify the detector before propagation starts\n+        detector.init(s0.getDate(), s0.getFrame());\n+        // add the event corresponding to the detector to the list\n+        final EventState state = detector.createInitialState(s0);\n+        eventsStates.add(state);\n+        // register the start event to the event state\n+        manager.add(state, detector.getMaxCheckInterval(), detector.getThreshold(),\n+                    detector.getMaxIterationCount());\n+    }\n \n-            });\n+    while (true) {\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n+        // search earliest events occurrence time\n+        double minStep = Double.POSITIVE_INFINITY;\n+        for (final EventState state : eventsStates) {\n+            minStep = Math.min(minStep, state.getTimeOfNextEvent());\n+        }\n+        if (minStep <= tStart) {\n+            throw new OrekitException(OrekitMessages.EVENTS_STOPPED_BEFORE_ANY_EVENT);\n+        }\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+        // propagate to the earliest detected event time\n+        final double tEnd = Math.min(minStep, interpolator.getMaxTime());\n+        interpolator.setSoftPreviousTime(tStart);\n+        interpolator.setSoftCurrentTime(tEnd);\n+        final SpacecraftState sEnd = new SpacecraftState(interpolator.getInterpolatedState(),\n+                                                         interpolator.getInterpolatedDerivatives(),\n+                                                         interpolator.getInterpolatedState().getFrame());\n+\n+        // handle events as soon as possible\n+        manager.handleStep(sEnd);\n+\n+        // check if we should stop integration\n+        for (final EventState es : eventsStates) {\n+            if (es.isOccurred()) {\n+                isLastStep = true;\n+            }\n+        }\n+        if (isLastStep) {\n+            return;\n+        }\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+        // through events analysis successfully detected occurrence times\n+        for (final EventState state : eventsStates) {\n+            if (state.isScheduled()) {\n+                state.reinitializeBegin(sEnd);\n+                manager.update(state, state.getTimeOfNextEvent(), sEnd);\n+            } else {\n+                state.stepAccepted(state.getTimeOfNextEvent(), sEnd);\n+            }\n+        }\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+        // prepare handling of the next step\n+        tStart        = tEnd;\n+        for (final EventState state : eventsStates) {\n+            // do not look already scheduled events\n+            if (!state.isOccurred() && !state.isScheduled()) {\n+                manager.add(state, state.getMaxCheckInterval(), state.getThreshold(),\n+                            state.getMaxIterationCount());\n+            }\n+        }\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+    }\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}