{
    "patch": "public void doEvents(final double tMin, final double tMax) throws MaxCountExceededException {\n    final double previousT = interpolator.getPreviousTime();\n    boolean isLastStep = false;\n\n    // select events that occur during the step\n    final TreeSet<EventState> eventsStates = new TreeSet<EventState>(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n\n    for (final EventState state : states) {\n        final double t = state.getEventTime();\n        if ((t >= previousT) && (t <= tMax)) {\n            eventsStates.add(state);\n        }\n    }\n\n    // handle the events in chronological order\n    final List<EventState> occuringEvents = new ArrayList<EventState>();\n    while (!eventsStates.isEmpty()) {\n        // take the first event from the list\n        final Iterator<EventState> iterator = eventsStates.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // check if the event occurs during the current step\n        final double tEvent = currentEvent.getEventTime();\n        if (tEvent > tMax) {\n            // event occurs after the current step, stop\n            break;\n        }\n        if (currentEvent.evaluateStep(interpolator)) {\n            // add the event to the list of occurring events\n            occuringEvents.add(currentEvent);\n        }\n    }\n\n    // handle the occurring events\n    while (!occuringEvents.isEmpty()) {\n        // take the first event from the list\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // check if the event occurs during the current step\n        final double tEvent = currentEvent.getEventTime();\n        if (tEvent > tMax) {\n            // event occurs after the current step, stop\n            break;\n        }\n\n        // restrict the interpolator to the first part of the step, up to the event\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(tEvent);\n\n        // get state at event time\n        interpolator.setInterpolatedTime(tEvent);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to current time\n        currentEvent.stepAccepted(tEvent, eventY);\n        isLastStep = currentEvent.stop();\n\n        // handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        previousT = tEvent;\n        interpolator.setSoftPreviousTime(previousT);\n\n        // handle the part of the step following the event\n        for (final SecondaryEquations eq : secondary) {\n            eq.computeDerivatives(tEvent, eventY, eq.getCompleteState());\n        }\n        stepSize = integrator.integrate(new AbstractIntegratedAction() {\n            public void integrate(final double t, final double[] y, final double[] yDot,\n                                  final double[] yDDot, final double[] z) throws MaxCountExceededException {\n                for (int i = 0; i < y0.length; ++i) {\n                    y0[i] = y[i];\n                }\n                System.arraycopy(yDot, 0, yDot0, 0, y0.length);\n                for (final SecondaryEquations eq : secondary) {\n                    eq.start(t, y, yDot);\n                }\n                for (final StepHandler handler : stepHandlers) {\n                    handler.init(t, y, yDot, isLastStep);\n                }\n            }\n        }, previousT, y, yDot, stepSize, yTmp, yDotTmp);\n    }\n\n    // finalize the step\n    for (final StepHandler handler : stepHandlers) {\n        handler.finish(previousT, y, yDot);\n    }\n    System.arraycopy(y, 0, yDot, 0, y.length);\n    if (stepSize >= 0) {\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(tMax);\n        isLastStep = isLastStep || (integrator.isLastStep() && !handlerStop);\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..d06254dd1 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,113 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public void doEvents(final double tMin, final double tMax) throws MaxCountExceededException {\n+    final double previousT = interpolator.getPreviousTime();\n+    boolean isLastStep = false;\n+\n+    // select events that occur during the step\n+    final TreeSet<EventState> eventsStates = new TreeSet<EventState>(new Comparator<EventState>() {\n+        public int compare(EventState es0, EventState es1) {\n+            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+        }\n+    });\n \n-            });\n+    for (final EventState state : states) {\n+        final double t = state.getEventTime();\n+        if ((t >= previousT) && (t <= tMax)) {\n+            eventsStates.add(state);\n+        }\n+    }\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+    // handle the events in chronological order\n+    final List<EventState> occuringEvents = new ArrayList<EventState>();\n+    while (!eventsStates.isEmpty()) {\n+        // take the first event from the list\n+        final Iterator<EventState> iterator = eventsStates.iterator();\n+        final EventState currentEvent = iterator.next();\n+        iterator.remove();\n+\n+        // check if the event occurs during the current step\n+        final double tEvent = currentEvent.getEventTime();\n+        if (tEvent > tMax) {\n+            // event occurs after the current step, stop\n+            break;\n+        }\n+        if (currentEvent.evaluateStep(interpolator)) {\n+            // add the event to the list of occurring events\n+            occuringEvents.add(currentEvent);\n+        }\n+    }\n+\n+    // handle the occurring events\n+    while (!occuringEvents.isEmpty()) {\n+        // take the first event from the list\n+        final Iterator<EventState> iterator = occuringEvents.iterator();\n+        final EventState currentEvent = iterator.next();\n+        iterator.remove();\n+\n+        // check if the event occurs during the current step\n+        final double tEvent = currentEvent.getEventTime();\n+        if (tEvent > tMax) {\n+            // event occurs after the current step, stop\n+            break;\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n+        // restrict the interpolator to the first part of the step, up to the event\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(tEvent);\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+        // get state at event time\n+        interpolator.setInterpolatedTime(tEvent);\n+        final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+        // advance all event states to current time\n+        currentEvent.stepAccepted(tEvent, eventY);\n+        isLastStep = currentEvent.stop();\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+        // handle the first part of the step, up to the event\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        previousT = tEvent;\n+        interpolator.setSoftPreviousTime(previousT);\n \n-                // handle the first part of the step, up to the event\n+        // handle the part of the step following the event\n+        for (final SecondaryEquations eq : secondary) {\n+            eq.computeDerivatives(tEvent, eventY, eq.getCompleteState());\n+        }\n+        stepSize = integrator.integrate(new AbstractIntegratedAction() {\n+            public void integrate(final double t, final double[] y, final double[] yDot,\n+                                  final double[] yDDot, final double[] z) throws MaxCountExceededException {\n+                for (int i = 0; i < y0.length; ++i) {\n+                    y0[i] = y[i];\n+                }\n+                System.arraycopy(yDot, 0, yDot0, 0, y0.length);\n+                for (final SecondaryEquations eq : secondary) {\n+                    eq.start(t, y, yDot);\n+                }\n                 for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+                    handler.init(t, y, yDot, isLastStep);\n                 }\n+            }\n+        }, previousT, y, yDot, stepSize, yTmp, yDotTmp);\n+    }\n+\n+    // finalize the step\n+    for (final StepHandler handler : stepHandlers) {\n+        handler.finish(previousT, y, yDot);\n+    }\n+    System.arraycopy(y, 0, yDot, 0, y.length);\n+    if (stepSize >= 0) {\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(tMax);\n+        isLastStep = isLastStep || (integrator.isLastStep() && !handlerStop);\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}