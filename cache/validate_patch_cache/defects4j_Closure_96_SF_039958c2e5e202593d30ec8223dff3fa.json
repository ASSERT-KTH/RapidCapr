{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  int ordinal = 0;\n  while (parameters.hasNext()) {\n    if (!arguments.hasNext()) {\n      // Not enough arguments.\n      if (minArgs > ordinal) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs), \" but found \" + ordinal + \".\");\n      }\n      // Done processing all named parameters, consume the rest and return.\n      while (arguments.hasNext()) {\n        arguments.next();\n        ordinal++;\n      }\n      return;\n    }\n\n    // Validate the parameter with its corresponding argument.\n    ordinal++;\n    Node parameter = parameters.next();\n    Node argument = arguments.next();\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  if (maxArgs != -1) {\n    // Count the remaining var_arg arguments.\n    int remainingArgs = 0;\n    while (arguments.hasNext()) {\n      arguments.next();\n      remainingArgs++;\n    }\n    if (maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), \"\", \" and no more than \" + maxArgs + \" argument(s).\");\n    } else if (remainingArgs > maxArgs - ordinal) {\n      // Too many var_arg arguments.\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs), \" but found \" + (ordinal + remainingArgs) + \".\");\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..0dc6e3db 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,57 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  int ordinal = 0;\n+  while (parameters.hasNext()) {\n+    if (!arguments.hasNext()) {\n+      // Not enough arguments.\n+      if (minArgs > ordinal) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs), \" but found \" + ordinal + \".\");\n+      }\n+      // Done processing all named parameters, consume the rest and return.\n+      while (arguments.hasNext()) {\n+        arguments.next();\n+        ordinal++;\n+      }\n+      return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    // Validate the parameter with its corresponding argument.\n+    ordinal++;\n+    Node parameter = parameters.next();\n+    Node argument = arguments.next();\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+\n+  if (maxArgs != -1) {\n+    // Count the remaining var_arg arguments.\n+    int remainingArgs = 0;\n+    while (arguments.hasNext()) {\n+      arguments.next();\n+      remainingArgs++;\n+    }\n+    if (maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), \"\", \" and no more than \" + maxArgs + \" argument(s).\");\n+    } else if (remainingArgs > maxArgs - ordinal) {\n+      // Too many var_arg arguments.\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs), \" but found \" + (ordinal + remainingArgs) + \".\");\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...n requires at least [0 argument(s) and no more than 0 argument(s)].> but was:<...n requires at least [ argument(s) and no more than 0 argument(s).].>",
    "test_result": "FAIL"
}