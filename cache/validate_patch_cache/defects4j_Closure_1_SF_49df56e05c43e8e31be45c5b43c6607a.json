{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey((Node) function.getParent())) {\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n        LinkedHashMap<Node, String> unusedArgsMap = getUnusedFunctionArgs(fnScope);\n\n        for (Node unusedArg : unusedArgsMap.keySet()) {\n            argList.removeChild(unusedArg);\n        }\n\n        compiler.reportCodeChange();\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}\n\nprivate LinkedHashMap<Node, String> getUnusedFunctionArgs(Scope scope) {\n    NodeTraversal.Callback findUnreferencedVariables =\n            new GetUnusedNodeReferencesCallback(scope, referenced);\n\n    Node function = scope.getRootNode();\n    NodeTraversal.traverse(compiler, function, findUnreferencedVariables);\n\n    return ((GetUnusedNodeReferencesCallback) findUnreferencedVariables).getUnusedNodes();\n}\n\nprivate static class GetUnusedNodeReferencesCallback implements NodeTraversal.Callback {\n    private final Scope scope;\n    private final Set<Var> referenced;\n    private final LinkedHashMap<Node, String> unusedNodes = new LinkedHashMap<Node, String>();\n\n    private GetUnusedNodeReferencesCallback(Scope scope, Set<Var> referenced) {\n        this.scope = scope;\n        this.referenced = referenced;\n    }\n\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n        if (n.isFunction() && NodeUtil.getFunctionBody(n) != null) {\n            // skip the inner functions\n            return false;\n        }\n\n        if (n.isParamList()) {\n            // Compare the param list length of decl and call site parameter lists\n            int numParams = 0;\n            for (Node child : n.children()) {\n                if (child.isDefaultValue() || child.isRest()) {\n                    // Ignore optional params and rest params\n                    // These parameters may be undefined in the code, but that doesn't mean\n                    // they are unused or safe to remove entirely.\n                    continue;\n                }\n                numParams++;\n            }\n            if (numParams > referenced.size()) {\n                // Skip all removals if number of params exceed the number of referenced variables\n                // If variable is not defined in function scope, treat as used\n                for (Node param : n.children()) {\n                    final String paramName = param.getString();\n                    Var var = scope.getVar(paramName);\n                    if (var != null) {\n                        referenced.add(var);\n                    }\n                }\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n        if (n.isParamList()) {\n            Node function = n.getParent();\n            if (!function.getFirstChild().isArrowFunction()) {\n                // Always assume \"this\" is used in non-arrow functions.\n                referenced.add(scope.getVar(NodeUtil.thisName()));\n            }\n\n            int i = 0;\n            for (Node param : n.children()) {\n                // Check if parameter is unused\n                final String paramName = param.getString();\n                Var var = scope.getVar(paramName);\n\n                if (!referenced.contains(var)) {\n                    unusedNodes.put(param, paramName);\n                } else {\n                    referenced.remove(var);\n                }\n\n                i++;\n            }\n        } else if (n.isFunction()) {\n            nodeTraversal.getScope().getAllVars().stream()\n                    .filter(var -> !var.isArguments() && !var.isThis())\n                    .forEach(referenced::remove);\n        }\n    }\n\n    /**\n     * @return LinkedHashMap<Node, String> of unused nodes and their names. Always returns the same\n     * map as it is already sorted.\n     */\n    private LinkedHashMap<Node, String> getUnusedNodes() {\n        return unusedNodes;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b687541b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,126 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+\n+    if (NodeUtil.isGetOrSetKey((Node) function.getParent())) {\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+            && callSiteOptimizer.canModifyCallers(function);\n+\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        LinkedHashMap<Node, String> unusedArgsMap = getUnusedFunctionArgs(fnScope);\n+\n+        for (Node unusedArg : unusedArgsMap.keySet()) {\n+            argList.removeChild(unusedArg);\n         }\n-      }\n+\n+        compiler.reportCodeChange();\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n+\n+private LinkedHashMap<Node, String> getUnusedFunctionArgs(Scope scope) {\n+    NodeTraversal.Callback findUnreferencedVariables =\n+            new GetUnusedNodeReferencesCallback(scope, referenced);\n+\n+    Node function = scope.getRootNode();\n+    NodeTraversal.traverse(compiler, function, findUnreferencedVariables);\n+\n+    return ((GetUnusedNodeReferencesCallback) findUnreferencedVariables).getUnusedNodes();\n+}\n+\n+private static class GetUnusedNodeReferencesCallback implements NodeTraversal.Callback {\n+    private final Scope scope;\n+    private final Set<Var> referenced;\n+    private final LinkedHashMap<Node, String> unusedNodes = new LinkedHashMap<Node, String>();\n+\n+    private GetUnusedNodeReferencesCallback(Scope scope, Set<Var> referenced) {\n+        this.scope = scope;\n+        this.referenced = referenced;\n+    }\n+\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+        if (n.isFunction() && NodeUtil.getFunctionBody(n) != null) {\n+            // skip the inner functions\n+            return false;\n+        }\n+\n+        if (n.isParamList()) {\n+            // Compare the param list length of decl and call site parameter lists\n+            int numParams = 0;\n+            for (Node child : n.children()) {\n+                if (child.isDefaultValue() || child.isRest()) {\n+                    // Ignore optional params and rest params\n+                    // These parameters may be undefined in the code, but that doesn't mean\n+                    // they are unused or safe to remove entirely.\n+                    continue;\n+                }\n+                numParams++;\n+            }\n+            if (numParams > referenced.size()) {\n+                // Skip all removals if number of params exceed the number of referenced variables\n+                // If variable is not defined in function scope, treat as used\n+                for (Node param : n.children()) {\n+                    final String paramName = param.getString();\n+                    Var var = scope.getVar(paramName);\n+                    if (var != null) {\n+                        referenced.add(var);\n+                    }\n+                }\n+\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+        if (n.isParamList()) {\n+            Node function = n.getParent();\n+            if (!function.getFirstChild().isArrowFunction()) {\n+                // Always assume \"this\" is used in non-arrow functions.\n+                referenced.add(scope.getVar(NodeUtil.thisName()));\n+            }\n+\n+            int i = 0;\n+            for (Node param : n.children()) {\n+                // Check if parameter is unused\n+                final String paramName = param.getString();\n+                Var var = scope.getVar(paramName);\n+\n+                if (!referenced.contains(var)) {\n+                    unusedNodes.put(param, paramName);\n+                } else {\n+                    referenced.remove(var);\n+                }\n+\n+                i++;\n+            }\n+        } else if (n.isFunction()) {\n+            nodeTraversal.getScope().getAllVars().stream()\n+                    .filter(var -> !var.isArguments() && !var.isThis())\n+                    .forEach(referenced::remove);\n+        }\n+    }\n+\n+    /**\n+     * @return LinkedHashMap<Node, String> of unused nodes and their names. Always returns the same\n+     * map as it is already sorted.\n+     */\n+    private LinkedHashMap<Node, String> getUnusedNodes() {\n+        return unusedNodes;\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}