{
    "patch": " void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!(left.isGetProp() && left.getLastChild().getString().equals(\"join\"))\n            || !right.isString()) {\n        return;\n    }\n    Node arrayNode = left.getFirstChild();\n    if (!arrayNode.isArrayLit()) {\n        return;\n    }\n    final String joinString = right.getString();\n\n    // We fold together adjacent constant string literals and also\n    // record the maximum length of the hole in the array to fill.\n    final List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    int arrayFoldedHoleSize = 0;\n    final Node firstArrayChild = arrayNode.getFirstChild();\n    boolean lastChildWasConstant = false;\n    for (Node arrayChild = firstArrayChild; arrayChild != null;\n         arrayChild = arrayChild.getNext()) {\n        if (arrayChild.isString() && lastChildWasConstant) {\n            // Merge this string literal with the previous one.\n            arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)\n                    .setString(\n                            arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)\n                                    .getString() +\n                                    joinString + arrayChild.getString());\n        } else if (arrayChild.isString()) {\n            arrayFoldedChildren.add(arrayChild);\n            lastChildWasConstant = true;\n        } else if (isImmutableValue(arrayChild)) {\n            if (arrayFoldedChildren.isEmpty()) {\n                // Start a new string of constants.\n                arrayFoldedChildren.add(createStringLiteral(\"\"));\n                arrayFoldedHoleSize = arrayChild.getLength();\n            } else {\n                arrayFoldedHoleSize += joinString.length() + arrayChild.getLength();\n            }\n            final Node foldedImuutable = createStringLiteral(getStringValue(arrayChild));\n            arrayFoldedHoleSize = Math.max(arrayFoldedHoleSize,\n                    foldedImuutable.getLength());\n            arrayFoldedChildren.add(foldedImuutable);\n            lastChildWasConstant = true;\n        } else {\n            // We can't fold.\n            if (arrayFoldedChildren.isEmpty()) {\n                return;\n            }\n            int newLength = firstArrayChild.getLength() - 1;\n            for (Node child : arrayFoldedChildren) {\n                newLength += child.getLength() + joinString.length();\n            }\n            if (newLength > n.getLength()) {\n                return;\n            }\n            arrayNode.removeChildren();\n            for (Node child : arrayFoldedChildren) {\n                arrayNode.addChildToBack(child.detach());\n                arrayNode.addChildToBack(createStringLiteral(joinString).detach());\n            }\n            arrayNode.removeChild(arrayNode.getLastChild());\n\n            Node newJoin =\n                    new Node(\n                            Token.GETPROP,\n                            arrayNode,\n                            createName(\"join\"));\n            Node newCall =\n                    new Node(\n                            Token.CALL,\n                            newJoin,\n                            right.cloneTree());\n            parent.replaceChild(n, newCall);\n            t.getCompiler().reportCodeChange();\n            return;\n        }\n    }\n    // We can fold.\n    if (arrayFoldedChildren.isEmpty()) {\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        t.getCompiler().reportCodeChange();\n        return;\n    }\n    int newLength = firstArrayChild.getLength() - 1;\n    for (Node child : arrayFoldedChildren) {\n        newLength += child.getLength() + joinString.length();\n    }\n    if (newLength > n.getLength()) {\n        return;\n    }\n    arrayNode.removeChildren();\n    for (Node child : arrayFoldedChildren) {\n        arrayNode.addChildToBack(child.detach());\n        arrayNode.addChildToBack(createStringLiteral(joinString).detach());\n    }\n    arrayNode.removeChild(arrayNode.getLastChild());\n\n    Node newJoin = new Node(Token.GETPROP, arrayNode, createName(\"join\"));\n    Node newCall = new Node(Token.CALL, newJoin, right.cloneTree());\n    parent.replaceChild(n, newCall);\n    t.getCompiler().reportCodeChange();\n}\nprivate boolean isImmutableValue(Node node) {\n    switch (node.getToken()) {\n        case CAST:\n            return isImmutableValue(node.getFirstChild());\n        case STRING:\n            return true;\n        case NUMBER:\n        case TRUE:\n        case FALSE:\n        case NULL:\n            return !Double.isNaN(node.getDouble());\n        default:\n            return false;\n    }\n}\nprivate Node createStringLiteral(String string) {\n    return Node.newString(string);\n}\nprivate Node createName(String string) {\n    return Node.newString(string);\n}\nprivate String getStringValue(Node node) {\n    return node.getString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..8e2da67b 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,133 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+ void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+    if (!(left.isGetProp() && left.getLastChild().getString().equals(\"join\"))\n+            || !right.isString()) {\n+        return;\n     }\n-\n     Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if (!arrayNode.isArrayLit()) {\n+        return;\n     }\n-\n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+    final String joinString = right.getString();\n+\n+    // We fold together adjacent constant string literals and also\n+    // record the maximum length of the hole in the array to fill.\n+    final List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    int arrayFoldedHoleSize = 0;\n+    final Node firstArrayChild = arrayNode.getFirstChild();\n+    boolean lastChildWasConstant = false;\n+    for (Node arrayChild = firstArrayChild; arrayChild != null;\n+         arrayChild = arrayChild.getNext()) {\n+        if (arrayChild.isString() && lastChildWasConstant) {\n+            // Merge this string literal with the previous one.\n+            arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)\n+                    .setString(\n+                            arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)\n+                                    .getString() +\n+                                    joinString + arrayChild.getString());\n+        } else if (arrayChild.isString()) {\n+            arrayFoldedChildren.add(arrayChild);\n+            lastChildWasConstant = true;\n+        } else if (isImmutableValue(arrayChild)) {\n+            if (arrayFoldedChildren.isEmpty()) {\n+                // Start a new string of constants.\n+                arrayFoldedChildren.add(createStringLiteral(\"\"));\n+                arrayFoldedHoleSize = arrayChild.getLength();\n+            } else {\n+                arrayFoldedHoleSize += joinString.length() + arrayChild.getLength();\n+            }\n+            final Node foldedImuutable = createStringLiteral(getStringValue(arrayChild));\n+            arrayFoldedHoleSize = Math.max(arrayFoldedHoleSize,\n+                    foldedImuutable.getLength());\n+            arrayFoldedChildren.add(foldedImuutable);\n+            lastChildWasConstant = true;\n+        } else {\n+            // We can't fold.\n+            if (arrayFoldedChildren.isEmpty()) {\n+                return;\n+            }\n+            int newLength = firstArrayChild.getLength() - 1;\n+            for (Node child : arrayFoldedChildren) {\n+                newLength += child.getLength() + joinString.length();\n+            }\n+            if (newLength > n.getLength()) {\n+                return;\n+            }\n+            arrayNode.removeChildren();\n+            for (Node child : arrayFoldedChildren) {\n+                arrayNode.addChildToBack(child.detach());\n+                arrayNode.addChildToBack(createStringLiteral(joinString).detach());\n+            }\n+            arrayNode.removeChild(arrayNode.getLastChild());\n+\n+            Node newJoin =\n+                    new Node(\n+                            Token.GETPROP,\n+                            arrayNode,\n+                            createName(\"join\"));\n+            Node newCall =\n+                    new Node(\n+                            Token.CALL,\n+                            newJoin,\n+                            right.cloneTree());\n+            parent.replaceChild(n, newCall);\n+            t.getCompiler().reportCodeChange();\n+            return;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n     }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n+    // We can fold.\n+    if (arrayFoldedChildren.isEmpty()) {\n         Node emptyStringNode = Node.newString(\"\");\n         parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+        t.getCompiler().reportCodeChange();\n+        return;\n     }\n+    int newLength = firstArrayChild.getLength() - 1;\n+    for (Node child : arrayFoldedChildren) {\n+        newLength += child.getLength() + joinString.length();\n+    }\n+    if (newLength > n.getLength()) {\n+        return;\n+    }\n+    arrayNode.removeChildren();\n+    for (Node child : arrayFoldedChildren) {\n+        arrayNode.addChildToBack(child.detach());\n+        arrayNode.addChildToBack(createStringLiteral(joinString).detach());\n+    }\n+    arrayNode.removeChild(arrayNode.getLastChild());\n+\n+    Node newJoin = new Node(Token.GETPROP, arrayNode, createName(\"join\"));\n+    Node newCall = new Node(Token.CALL, newJoin, right.cloneTree());\n+    parent.replaceChild(n, newCall);\n     t.getCompiler().reportCodeChange();\n-  }\n+}\n+private boolean isImmutableValue(Node node) {\n+    switch (node.getToken()) {\n+        case CAST:\n+            return isImmutableValue(node.getFirstChild());\n+        case STRING:\n+            return true;\n+        case NUMBER:\n+        case TRUE:\n+        case FALSE:\n+        case NULL:\n+            return !Double.isNaN(node.getDouble());\n+        default:\n+            return false;\n+    }\n+}\n+private Node createStringLiteral(String string) {\n+    return Node.newString(string);\n+}\n+private Node createName(String string) {\n+    return Node.newString(string);\n+}\n+private String getStringValue(Node node) {\n+    return node.getString();\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}