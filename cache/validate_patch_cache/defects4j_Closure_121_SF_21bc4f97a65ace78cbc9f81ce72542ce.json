{
    "patch": "    private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments) {\n      int refCount = referenceInfo.references.size();\n      Reference declaration = referenceInfo.references.get(0);\n      Reference init = referenceInfo.getInitializingReference();\n      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n      if (isImmutableAndWellDefinedVariable(v, referenceInfo) && refCount > 1) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n          value = init.getAssignedValue();\n        } else {\n          // Create a new node for variable that is never initialized.\n          Node srcLocation = declaration.getNode();\n          value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      } else if (!isVarInlineForbidden(v) && referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n        // Look for an alias that we can inline.\n        // An alias can be inlined if it's declared at most once (other than the\n        // alias-declaration), it's trivially well-defined, and its value is\n        // either the variable itself (in the alias' initialization) or the\n        // variable *or* a constant (from the alias' reference).\n        List<Reference> refs = referenceInfo.references;\n        Preconditions.checkState(refs.size() >= 1);\n        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n          Node nameNode = refs.get(i).getNode();\n          if (aliasCandidates.containsKey(nameNode)) {\n            AliasCandidate candidate = aliasCandidates.get(nameNode);\n            if (candidate.refInfo.references.size() == 2 &&\n                !staleVars.contains(candidate.alias)) {\n              // We could inline the alias.  Check whether it's valid to do so.\n              Reference alias = candidate.refInfo.references.get(1);\n              if (canInline(declaration, init, alias)) {\n                Node value = alias.getAssignedValue();\n                inlineWellDefinedVariable(\n                    candidate.alias,\n                    value,\n                    candidate.refInfo.references);\n                staleVars.add(candidate.alias);\n              }\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..3830d9e2 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -259,8 +259,7 @@ class InlineVariables implements CompilerPass {\n       Reference init = referenceInfo.getInitializingReference();\n       int firstRefAfterInit = (declaration == init) ? 2 : 3;\n \n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+      if (isImmutableAndWellDefinedVariable(v, referenceInfo) && refCount > 1) {\n         // if the variable is referenced more than once, we can only\n         // inline it if it's immutable and never defined before referenced.\n         Node value;\n@@ -271,55 +270,33 @@ class InlineVariables implements CompilerPass {\n           Node srcLocation = declaration.getNode();\n           value = NodeUtil.newUndefinedNode(srcLocation);\n         }\n-        Preconditions.checkNotNull(value);\n         inlineWellDefinedVariable(v, value, referenceInfo.references);\n         staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n-        }\n-      }\n-\n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n+      } else if (!isVarInlineForbidden(v) && referenceInfo.isWellDefined() &&\n           referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n+        // Look for an alias that we can inline.\n+        // An alias can be inlined if it's declared at most once (other than the\n+        // alias-declaration), it's trivially well-defined, and its value is\n+        // either the variable itself (in the alias' initialization) or the\n+        // variable *or* a constant (from the alias' reference).\n         List<Reference> refs = referenceInfo.references;\n+        Preconditions.checkState(refs.size() >= 1);\n         for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n           Node nameNode = refs.get(i).getNode();\n           if (aliasCandidates.containsKey(nameNode)) {\n             AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n+            if (candidate.refInfo.references.size() == 2 &&\n+                !staleVars.contains(candidate.alias)) {\n+              // We could inline the alias.  Check whether it's valid to do so.\n+              Reference alias = candidate.refInfo.references.get(1);\n+              if (canInline(declaration, init, alias)) {\n+                Node value = alias.getAssignedValue();\n+                inlineWellDefinedVariable(\n+                    candidate.alias,\n+                    value,\n+                    candidate.refInfo.references);\n+                staleVars.add(candidate.alias);\n+              }\n             }\n           }\n         }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}