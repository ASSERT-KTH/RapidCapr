{
    "patch": "            parent.getType() == Token.LET ||\n            parent.getType() == Token.CONST ||\n            parent.getType() == Token.PARAM_LIST ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis =\n            scope.isGlobal()\n                && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP\n                && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      if (n.isFromExterns() && n.getType() == Token.NAME) {\n        Var existingVar = scopeToDeclareIn.getVar(variableName);\n        if (existingVar != null) {\n          if (scope.isDeclared(variableName, true)) {\n            validator.expectUndeclaredVariable(\n                sourceName, n, parent, existingVar, variableName, type);\n          } else {\n            String message = n + \" is defined in externs, \" + existingVar.getName()\n                + \" looks like it might be a typo, but there is no matching definition.\";\n            report(JSError.make(sourceName, n, VarCheck.UNDEFINED_EXTERN_VAR_ERROR, message));\n            NodeUtil.getNearestStatement(n).putBooleanProp(Node.EXTERN_DEFINITIONS_DELETED, true);\n          }\n        }\n      }\n\n      // declared in closest scope?\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(\n                variableName + \".prototype\",\n                n,\n                fnType.getPrototype(),\n                compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null\n                    || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..b119ca79 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,25 +869,17 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n+            parent.getType() == Token.LET ||\n+            parent.getType() == Token.CONST ||\n+            parent.getType() == Token.PARAM_LIST ||\n             parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+        shouldDeclareOnGlobalThis =\n+            scope.isGlobal()\n+                && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n       } else {\n         Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+            n.getType() == Token.GETPROP\n+                && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n       }\n       String variableName = n.getQualifiedName();\n       Preconditions.checkArgument(!variableName.isEmpty());\n@@ -897,8 +889,20 @@ final class TypedScopeCreator implements ScopeCreator {\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+      if (n.isFromExterns() && n.getType() == Token.NAME) {\n+        Var existingVar = scopeToDeclareIn.getVar(variableName);\n+        if (existingVar != null) {\n+          if (scope.isDeclared(variableName, true)) {\n+            validator.expectUndeclaredVariable(\n+                sourceName, n, parent, existingVar, variableName, type);\n+          } else {\n+            String message = n + \" is defined in externs, \" + existingVar.getName()\n+                + \" looks like it might be a typo, but there is no matching definition.\";\n+            report(JSError.make(sourceName, n, VarCheck.UNDEFINED_EXTERN_VAR_ERROR, message));\n+            NodeUtil.getNearestStatement(n).putBooleanProp(Node.EXTERN_DEFINITIONS_DELETED, true);\n+          }\n+        }\n+      }\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n@@ -918,10 +922,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           boolean isExtern = input.isExtern();\n           if (inferred) {\n             globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n+                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n           } else {\n             globalThis.defineDeclaredProperty(variableName, type, isExtern);\n           }\n@@ -933,16 +934,14 @@ final class TypedScopeCreator implements ScopeCreator {\n           FunctionType fnType = (FunctionType) type;\n           if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n+            scopeToDeclareIn.declare(\n+                variableName + \".prototype\",\n+                n,\n+                fnType.getPrototype(),\n+                compiler.getInput(sourceName),\n                 /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n-      }\n-    }\n+                superClassCtor == null\n+                    || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}