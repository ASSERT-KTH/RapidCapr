{
    "patch": "    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              if (!defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true)) {\n                // handle duplicate local variable declaration\n                compiler.report(JSError.make(astParameter,\n                    VarCheck.VAR_MULTIPLY_DECLARED_ERROR));\n              }\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..3419b1cb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1741,8 +1741,12 @@ final class TypedScopeCreator implements ScopeCreator {\n           Node jsDocParameter = jsDocParameters.getFirstChild();\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+              if (!defineSlot(astParameter, functionNode,\n+                  jsDocParameter.getJSType(), true)) {\n+                // handle duplicate local variable declaration\n+                compiler.report(JSError.make(astParameter,\n+                    VarCheck.VAR_MULTIPLY_DECLARED_ERROR));\n+              }\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);",
    "result_reason": "error: 'void' type not allowed here",
    "test_result": "ERROR"
}