{
    "patch": "} else if (parent.getType() == Token.TRY) {\n        // If we are coming out of the FINALLY block...\n        if (parent.getLastChild() == node) {\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..d3ce23d7 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,11 +764,20 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+} else if (parent.getType() == Token.TRY) {\n+        // If we are coming out of the FINALLY block...\n+        if (parent.getLastChild() == node) {\n+          if (cfa != null) {\n+            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n+            }\n+          }\n+          return computeFollowNode(fromNode, parent, cfa);\n+        }\n     }\n \n     // Now that we are done with the special cases follow should be its",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}