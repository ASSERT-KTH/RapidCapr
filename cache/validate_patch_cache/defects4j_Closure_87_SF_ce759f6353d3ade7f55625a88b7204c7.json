{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // If this block is an EXPR_RESULT block, check if the expression it contains is an\n      // expression that can be safely folded into a parent expression or statement.\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node firstChild = maybeExpr.getFirstChild();\n        if (isFoldableExpression(firstChild)) {\n          return true;\n        }\n      }\n      // Otherwise, check if the block contains a single expression that can be safely\n      // folded into a parent expression or statement.\n      else if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.getType() != Token.FUNCTION && !NodeUtil.mayHaveSideEffects(maybeExpr)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nprivate boolean isFoldableExpression(Node n) {\n  if (NodeUtil.isExpressionNode(n)) {\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // A function expression can be safely folded only if it has no free variables.\n        return NodeUtil.doesFunctionHaveFreeVariables(n) == false;\n      case Token.HOOK:\n        // Avoid folding conditional expressions.\n        return false;\n      case Token.ASSIGN_BITOR:\n      case Token.BITOR:\n        // Avoid folding bitwise OR, due to a bug in some versions of MSIE.\n        return false;\n      default:\n        // The expression node is safe to fold as long as it has no side effects.\n        return !NodeUtil.mayHaveSideEffects(n);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b56f5d34 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,50 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // If this block is an EXPR_RESULT block, check if the expression it contains is an\n+      // expression that can be safely folded into a parent expression or statement.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node firstChild = maybeExpr.getFirstChild();\n+        if (isFoldableExpression(firstChild)) {\n+          return true;\n+        }\n+      }\n+      // Otherwise, check if the block contains a single expression that can be safely\n+      // folded into a parent expression or statement.\n+      else if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.getType() != Token.FUNCTION && !NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+        return true;\n       }\n     }\n+  }\n \n-    return false;\n+  return false;\n+}\n+\n+private boolean isFoldableExpression(Node n) {\n+  if (NodeUtil.isExpressionNode(n)) {\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        // A function expression can be safely folded only if it has no free variables.\n+        return NodeUtil.doesFunctionHaveFreeVariables(n) == false;\n+      case Token.HOOK:\n+        // Avoid folding conditional expressions.\n+        return false;\n+      case Token.ASSIGN_BITOR:\n+      case Token.BITOR:\n+        // Avoid folding bitwise OR, due to a bug in some versions of MSIE.\n+        return false;\n+      default:\n+        // The expression node is safe to fold as long as it has no side effects.\n+        return !NodeUtil.mayHaveSideEffects(n);\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}