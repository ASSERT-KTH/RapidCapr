{
    "patch": "      BasicBlock block = ref.getBasicBlock();\n      if(block == null) {\n        return false;\n      }\n      for (; !block.isFunction; block = block.getParent()) {\n        if (block.isLoop) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7d693365 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      BasicBlock block = ref.getBasicBlock();\n+      if(block == null) {\n+        return false;\n+      }\n+      for (; !block.isFunction; block = block.getParent()) {\n+        if (block.isLoop) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}