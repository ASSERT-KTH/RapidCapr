{
    "patch": "public static Iterable<BigInteger> fibonacci() {\n    return new Iterable<BigInteger>() {\n        @Override\n        public Iterator<BigInteger> iterator() {\n            return new Iterator<BigInteger>() {\n\n                BigInteger a = BigInteger.ZERO;\n                BigInteger b = BigInteger.ONE;\n\n                @Override\n                public boolean hasNext() {\n                    return true;\n                }\n\n                @Override\n                public BigInteger next() {\n                    BigInteger temp = a;\n                    a = b;\n                    b = temp.add(b);\n                    return temp;\n                }\n            };\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..5b12686be 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,31 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<BigInteger> fibonacci() {\n+    return new Iterable<BigInteger>() {\n+        @Override\n+        public Iterator<BigInteger> iterator() {\n+            return new Iterator<BigInteger>() {\n+\n+                BigInteger a = BigInteger.ZERO;\n+                BigInteger b = BigInteger.ONE;\n+\n+                @Override\n+                public boolean hasNext() {\n+                    return true;\n+                }\n+\n+                @Override\n+                public BigInteger next() {\n+                    BigInteger temp = a;\n+                    a = b;\n+                    b = temp.add(b);\n+                    return temp;\n+                }\n+            };\n+        }\n+    };\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}