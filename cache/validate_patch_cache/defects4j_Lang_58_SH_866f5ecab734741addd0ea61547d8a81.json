{
    "patch": "if (numeric.matches(\"-?\\\\d+(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\")) {\n\n    if (numeric.endsWith(\"f\") || numeric.endsWith(\"F\")) {\n        Float f = NumberUtils.createFloat(numeric);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n            return f;\n        }\n    } else if (numeric.endsWith(\"d\") || numeric.endsWith(\"D\")) {\n        Double d = NumberUtils.createDouble(numeric);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            return d;\n        }\n    } else if (numeric.endsWith(\"l\") || numeric.endsWith(\"L\")) {\n        try {\n            return createLong(numeric);\n        } catch (NumberFormatException nfe) {\n            // Too big for a long\n        }\n        return createBigInteger(numeric);\n    } else {\n        // Must be an integer, so start small and work our way up\n        if (numeric.startsWith(\"0x\") || numeric.startsWith(\"0X\")) {\n            return createInteger(numeric);\n        }\n        if (numeric.startsWith(\"0\")) {\n            return createInteger(numeric, 8);\n        }\n        return createInteger(numeric, 10);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..c4415f3c 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,36 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (numeric.matches(\"-?\\\\d+(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\")) {\n+\n+    if (numeric.endsWith(\"f\") || numeric.endsWith(\"F\")) {\n+        Float f = NumberUtils.createFloat(numeric);\n+        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+            return f;\n+        }\n+    } else if (numeric.endsWith(\"d\") || numeric.endsWith(\"D\")) {\n+        Double d = NumberUtils.createDouble(numeric);\n+        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+            return d;\n+        }\n+    } else if (numeric.endsWith(\"l\") || numeric.endsWith(\"L\")) {\n+        try {\n+            return createLong(numeric);\n+        } catch (NumberFormatException nfe) {\n+            // Too big for a long\n+        }\n+        return createBigInteger(numeric);\n+    } else {\n+        // Must be an integer, so start small and work our way up\n+        if (numeric.startsWith(\"0x\") || numeric.startsWith(\"0X\")) {\n+            return createInteger(numeric);\n+        }\n+        if (numeric.startsWith(\"0\")) {\n+            return createInteger(numeric, 8);\n+        }\n+        return createInteger(numeric, 10);\n+    }\n+}\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}