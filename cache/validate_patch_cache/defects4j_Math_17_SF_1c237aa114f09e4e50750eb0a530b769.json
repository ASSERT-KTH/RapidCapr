{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), qnan);\n        }\n        final Dfp result = newInstance(this);\n        boolean invert = false;\n        int q = x;\n        if (q < 0) {\n            q = -q;\n            invert = true;\n        }\n        int r = 0;\n        Dfp xi = newInstance(this);\n        while (q != 0) {\n            if ((q & 1) != 0) {\n                r++;\n                if (invert) {\n                    xi = xi.negative();\n                }\n                result.selfAdd(xi);\n                if (invert) {\n                    xi = xi.negative();\n                }\n                if (result.isNaN()) {\n                    return result;\n                }\n            }\n            q >>= 1;\n            r++;\n            if (q != 0) {\n                xi.selfAdd(xi);\n                if (xi.isNaN()) {\n                    return xi;\n                }\n            }\n        }\n        if (r > precision) {\n            getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..fded6ff2c 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,45 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), qnan);\n+        }\n+        final Dfp result = newInstance(this);\n+        boolean invert = false;\n+        int q = x;\n+        if (q < 0) {\n+            q = -q;\n+            invert = true;\n+        }\n+        int r = 0;\n+        Dfp xi = newInstance(this);\n+        while (q != 0) {\n+            if ((q & 1) != 0) {\n+                r++;\n+                if (invert) {\n+                    xi = xi.negative();\n+                }\n+                result.selfAdd(xi);\n+                if (invert) {\n+                    xi = xi.negative();\n+                }\n+                if (result.isNaN()) {\n+                    return result;\n+                }\n+            }\n+            q >>= 1;\n+            r++;\n+            if (q != 0) {\n+                xi.selfAdd(xi);\n+                if (xi.isNaN()) {\n+                    return xi;\n+                }\n+            }\n+        }\n+        if (r > precision) {\n+            getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n+        }\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}