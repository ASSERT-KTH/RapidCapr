{
    "patch": "            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null) {\n                final Class<?> mockCandidateClazz = mockCandidate.getClass();\n                if (!isMockitoClass(mockCandidateClazz)) {\n                    field.setAccessible(true);\n                    try {\n                        Object oldValue = field.get(fieldInstance);\n                        field.set(fieldInstance, mockCandidate);\n                        for (Field innerField : mockCandidateClazz.getDeclaredFields()) {\n                            innerField.setAccessible(true);\n                            if (innerField.get(mockCandidate) == oldValue) {\n                                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n                            }\n                        }\n                    } catch (IllegalAccessException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n                else if (field.getType().isAssignableFrom(mockCandidateClazz)) {\n                    try {\n                        field.setAccessible(true);\n                        field.set(fieldInstance, mockCandidate);\n                    } catch (IllegalAccessException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n\n// isMockitoClass needs to be implemented as well\nprivate boolean isMockitoClass(Class<?> clazz) {\n    return clazz.getCanonicalName().startsWith(\"org.mockito.\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4bf257176 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,41 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null) {\n+                final Class<?> mockCandidateClazz = mockCandidate.getClass();\n+                if (!isMockitoClass(mockCandidateClazz)) {\n+                    field.setAccessible(true);\n+                    try {\n+                        Object oldValue = field.get(fieldInstance);\n+                        field.set(fieldInstance, mockCandidate);\n+                        for (Field innerField : mockCandidateClazz.getDeclaredFields()) {\n+                            innerField.setAccessible(true);\n+                            if (innerField.get(mockCandidate) == oldValue) {\n+                                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n+                            }\n+                        }\n+                    } catch (IllegalAccessException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                else if (field.getType().isAssignableFrom(mockCandidateClazz)) {\n+                    try {\n+                        field.setAccessible(true);\n+                        field.set(fieldInstance, mockCandidate);\n+                    } catch (IllegalAccessException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            }\n+\n+// isMockitoClass needs to be implemented as well\n+private boolean isMockitoClass(Class<?> clazz) {\n+    return clazz.getCanonicalName().startsWith(\"org.mockito.\");\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}