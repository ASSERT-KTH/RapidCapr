{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int maxMatrixSize = 10000;\n        if (m.getRowDimension() * m.getColumnDimension() > maxMatrixSize) {\n            // Compute the square root of a smaller matrix\n            final int factor = (int) Math.ceil(Math.sqrt(maxMatrixSize / (double) m.getColumnDimension()));\n            final RealMatrix smallerMatrix = MatrixUtils.createRealMatrix(m.getRowDimension() / factor, m.getColumnDimension() / factor);\n            for (int i = 0; i < smallerMatrix.getRowDimension(); i++) {\n                for (int j = 0; j < smallerMatrix.getColumnDimension(); j++) {\n                    smallerMatrix.setEntry(i, j, m.getEntry(i * factor, j * factor));\n                }\n            }\n            final EigenDecomposition dec = new EigenDecomposition(smallerMatrix);\n            final RealMatrix sqrt = dec.getSquareRoot();\n            return sqrt.scalarMultiply(factor);\n        } else {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6e34b9189 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        final int maxMatrixSize = 10000;\n+        if (m.getRowDimension() * m.getColumnDimension() > maxMatrixSize) {\n+            // Compute the square root of a smaller matrix\n+            final int factor = (int) Math.ceil(Math.sqrt(maxMatrixSize / (double) m.getColumnDimension()));\n+            final RealMatrix smallerMatrix = MatrixUtils.createRealMatrix(m.getRowDimension() / factor, m.getColumnDimension() / factor);\n+            for (int i = 0; i < smallerMatrix.getRowDimension(); i++) {\n+                for (int j = 0; j < smallerMatrix.getColumnDimension(); j++) {\n+                    smallerMatrix.setEntry(i, j, m.getEntry(i * factor, j * factor));\n+                }\n+            }\n+            final EigenDecomposition dec = new EigenDecomposition(smallerMatrix);\n+            final RealMatrix sqrt = dec.getSquareRoot();\n+            return sqrt.scalarMultiply(factor);\n+        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        }\n     }\n }",
    "result_reason": "org.apache.commons.math3.exception.DimensionMismatchException: 10 != 101",
    "test_result": "FAIL"
}