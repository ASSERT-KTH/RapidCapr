{
    "patch": "if(getPopulationSize() <= 0 || getSampleSize() <= 0){\n    return 0.0;\n}\ndouble probabilityOfSuccess = (double) getNumberOfSuccesses() / (double) getPopulationSize();\nif (Double.isNaN(probabilityOfSuccess) || Double.isInfinite(probabilityOfSuccess)) {\n    return 0.0;\n}\ndouble mean = probabilityOfSuccess * (double) getSampleSize();\nreturn mean >= 0 ? mean : 0.0;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..d40b0bb1e 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,15 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+if(getPopulationSize() <= 0 || getSampleSize() <= 0){\n+    return 0.0;\n+}\n+double probabilityOfSuccess = (double) getNumberOfSuccesses() / (double) getPopulationSize();\n+if (Double.isNaN(probabilityOfSuccess) || Double.isInfinite(probabilityOfSuccess)) {\n+    return 0.0;\n+}\n+double mean = probabilityOfSuccess * (double) getSampleSize();\n+return mean >= 0 ? mean : 0.0;\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}