{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                // Use the types of the arguments to determine the type of the new expression\n                type = inferTypeFromArguments(ct, constructor.getNext());\n            }\n        }\n    }\n    if (type == null) {\n        // If we couldn't infer the type of the new expression, default to unknown type\n        type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}\n\nprivate JSType inferTypeFromArguments(FunctionType ctor, Node args) {\n    JSType[] argTypes = new JSType[ctor.getParameterCount()];\n    int i = 0;\n    while (args != null && i < ctor.getParameterCount()) {\n        argTypes[i] = args.getJSType();\n        i++;\n        args = args.getNext();\n    }\n    return ctor.getReturnType().inferSlotType(argTypes);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..9a558d26 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,50 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n+        if (constructorType.isUnknownType()) {\n+            type = getNativeType(UNKNOWN_TYPE);\n+        } else {\n+            FunctionType ct = constructorType.toMaybeFunctionType();\n+            if (ct == null && constructorType instanceof FunctionType) {\n+                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n+                // return null. But NoObjectType implements the FunctionType\n+                // interface, precisely because it can validly construct objects.\n+                ct = (FunctionType) constructorType;\n+            }\n+            if (ct != null && ct.isConstructor()) {\n+                // Use the types of the arguments to determine the type of the new expression\n+                type = inferTypeFromArguments(ct, constructor.getNext());\n+            }\n         }\n-      }\n+    }\n+    if (type == null) {\n+        // If we couldn't infer the type of the new expression, default to unknown type\n+        type = getNativeType(UNKNOWN_TYPE);\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n+\n+private JSType inferTypeFromArguments(FunctionType ctor, Node args) {\n+    JSType[] argTypes = new JSType[ctor.getParameterCount()];\n+    int i = 0;\n+    while (args != null && i < ctor.getParameterCount()) {\n+        argTypes[i] = args.getJSType();\n+        i++;\n+        args = args.getNext();\n+    }\n+    return ctor.getReturnType().inferSlotType(argTypes);\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}