{
    "patch": "public static String unescapeJava(String string) {\n    if (string == null) {\n        return null;\n    }\n    StringBuffer stringBuffer = new StringBuffer(string.length());\n    CharBuffer charBuffer = CharBuffer.wrap(string);\n    while (charBuffer.hasRemaining()) {\n        char charValue = charBuffer.get();\n        if (charValue == '\\\\') {\n            if (charBuffer.remaining() >= 5 && charBuffer.get(charBuffer.position()) == 'u') {\n                charBuffer.get();\n                charBuffer.get();\n                char high = charBuffer.get();\n                char low = charBuffer.get();\n                int codePoint = Integer.parseInt(String.valueOf(high) + String.valueOf(low), 16);\n                stringBuffer.append((char) codePoint);\n            } else {\n                stringBuffer.append(charValue);\n            }\n        } else {\n            stringBuffer.append(charValue);\n        }\n    }\n    return stringBuffer.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..a385bee3 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,31 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String string) {\n+    if (string == null) {\n+        return null;\n+    }\n+    StringBuffer stringBuffer = new StringBuffer(string.length());\n+    CharBuffer charBuffer = CharBuffer.wrap(string);\n+    while (charBuffer.hasRemaining()) {\n+        char charValue = charBuffer.get();\n+        if (charValue == '\\\\') {\n+            if (charBuffer.remaining() >= 5 && charBuffer.get(charBuffer.position()) == 'u') {\n+                charBuffer.get();\n+                charBuffer.get();\n+                char high = charBuffer.get();\n+                char low = charBuffer.get();\n+                int codePoint = Integer.parseInt(String.valueOf(high) + String.valueOf(low), 16);\n+                stringBuffer.append((char) codePoint);\n+            } else {\n+                stringBuffer.append(charValue);\n+            }\n+        } else {\n+            stringBuffer.append(charValue);\n+        }\n+    }\n+    return stringBuffer.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}