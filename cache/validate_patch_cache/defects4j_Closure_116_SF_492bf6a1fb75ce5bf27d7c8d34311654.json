{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Note: The first child of the call node is not always a name.\n    // It is a MemberExpression if the function is being called as a method\n    // on an object.\n    Node cArg = NodeUtil.getArgumentForCallOrNew(callNode, 0);\n    if (!NodeUtil.isFunctionObjectCall(callNode)) {\n        cArg = cArg.getNext();\n    }\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    if (fnParam != null && fnParam.isRest()) {\n        // When the function has a rest parameter, there must be at least one argument.\n        if (cArg == null) {\n            return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n        fnParam = fnParam.getNext();\n    }\n\n    // Check each named parameter.\n    while (fnParam != null) {\n        if (cArg == null) {\n            // There are no more arguments to check, so if there are still named\n            // parameters, they are not being assigned a value.\n            return CanInlineResult.NO;\n        } else {\n            if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 &&\n                NodeUtil.mayEffectMutableState(cArg, compiler)) {\n                // This argument is evaluated more than once and has side-effects.\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n            fnParam = fnParam.getNext();\n            if (fnParam != null && fnParam.isRest()) {\n                // When the function has a rest parameter, any extra arguments should be\n                // captured by the rest parameter.\n                if (cArg == null) {\n                    return CanInlineResult.NO;\n                }\n                while (cArg != null) {\n                    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                        return CanInlineResult.NO;\n                    }\n                    cArg = cArg.getNext();\n                }\n            }\n        }\n    }\n\n    // Check for any additional arguments.\n    if (cArg != null) {\n        while (cArg != null) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        }\n        return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..06c215ef 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,74 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n+    // Note: The first child of the call node is not always a name.\n+    // It is a MemberExpression if the function is being called as a method\n+    // on an object.\n+    Node cArg = NodeUtil.getArgumentForCallOrNew(callNode, 0);\n+    if (!NodeUtil.isFunctionObjectCall(callNode)) {\n         cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    if (fnParam != null && fnParam.isRest()) {\n+        // When the function has a rest parameter, there must be at least one argument.\n+        if (cArg == null) {\n             return CanInlineResult.NO;\n-          }\n         }\n-\n-        // Move to the next name.\n+        cArg = cArg.getNext();\n         fnParam = fnParam.getNext();\n-      }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    // Check each named parameter.\n+    while (fnParam != null) {\n+        if (cArg == null) {\n+            // There are no more arguments to check, so if there are still named\n+            // parameters, they are not being assigned a value.\n+            return CanInlineResult.NO;\n+        } else {\n+            if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 &&\n+                NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+                // This argument is evaluated more than once and has side-effects.\n+                return CanInlineResult.NO;\n+            }\n+            cArg = cArg.getNext();\n+            fnParam = fnParam.getNext();\n+            if (fnParam != null && fnParam.isRest()) {\n+                // When the function has a rest parameter, any extra arguments should be\n+                // captured by the rest parameter.\n+                if (cArg == null) {\n+                    return CanInlineResult.NO;\n+                }\n+                while (cArg != null) {\n+                    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                        return CanInlineResult.NO;\n+                    }\n+                    cArg = cArg.getNext();\n+                }\n+            }\n         }\n-        cArg = cArg.getNext();\n-      }\n+    }\n+\n+    // Check for any additional arguments.\n+    if (cArg != null) {\n+        while (cArg != null) {\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+            cArg = cArg.getNext();\n+        }\n+        return CanInlineResult.NO;\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}