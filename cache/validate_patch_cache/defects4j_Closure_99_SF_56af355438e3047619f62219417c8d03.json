{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      boolean isConstructor = jsDoc != null && jsDoc.isConstructor();\n      if (isConstructor || n.isClass() || n.isSetProp() || n.isGetProp()) {\n        return false;\n      }\n\n      if (NodeUtil.isNameDeclaration(n.getParent())) {\n        // Traversal already happen when entering into the scope of var name\n        // declaration. So no need to traverse var node here.\n        return false;\n      }\n\n      if (parent.isBlock() || parent.isScript() || parent.isCatch()) {\n        return true;\n      }\n      if (n.isStringLit()) {\n        // Don't traverse string keys in object literals.\n        return false;\n      }\n      if (parent.isObjectLit()) {\n        // Only traverse the property value, not the key.\n        return n.getParent().getFirstChild() == n;\n      }\n      if (parent.isName()\n          || NodeUtil.isExpressionResultUsed(parent)\n          || NodeUtil.isStatementBlock(parent.getParent())) {\n        return true;\n      }\n\n      return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..b903e1aa 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -82,57 +82,36 @@ final class CheckGlobalThis implements Callback {\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      boolean isConstructor = jsDoc != null && jsDoc.isConstructor();\n+      if (isConstructor || n.isClass() || n.isSetProp() || n.isGetProp()) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+      if (NodeUtil.isNameDeclaration(n.getParent())) {\n+        // Traversal already happen when entering into the scope of var name\n+        // declaration. So no need to traverse var node here.\n         return false;\n       }\n-    }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n+      if (parent.isBlock() || parent.isScript() || parent.isCatch()) {\n+        return true;\n+      }\n+      if (n.isStringLit()) {\n+        // Don't traverse string keys in object literals.\n+        return false;\n+      }\n+      if (parent.isObjectLit()) {\n+        // Only traverse the property value, not the key.\n+        return n.getParent().getFirstChild() == n;\n+      }\n+      if (parent.isName()\n+          || NodeUtil.isExpressionResultUsed(parent)\n+          || NodeUtil.isStatementBlock(parent.getParent())) {\n+        return true;\n       }\n-    }\n \n-    return true;\n+      return false;\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}