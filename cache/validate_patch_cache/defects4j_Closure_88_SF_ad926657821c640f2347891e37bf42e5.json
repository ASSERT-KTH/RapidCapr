{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n   Node n, String variable) {\n if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n   if (NodeUtil.isLhs(n, n.getParent())) {\n     // The expression to which the assignment is made is evaluated before\n     // the RHS is evaluated (normal left to right evaluation) but the KILL\n     // occurs after the RHS is evaluated.\n     return VariableLiveness.KILL;\n   } else {\n     return VariableLiveness.READ;\n   }\n }\n\n // Expressions are evaluated left-right, depth first.\n for (Node child = n.getFirstChild();\n     child != null; child = child.getNext()) {\n   if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n     VariableLiveness state = isVariableReadBeforeKill(child, variable);\n     if (state == VariableLiveness.KILL) {\n       // Return KILL only if the variable is found to be killed within the subtree.\n       return VariableLiveness.KILL;\n     } else if (state == VariableLiveness.READ) {\n       // Return READ only if the first occurrence of the variable is found to be read within the subtree.\n       // Any subsequent occurrence of the variable within the subtree is irrelevant.\n       return VariableLiveness.READ;\n     }\n   }\n }\n return VariableLiveness.MAYBE_LIVE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..52f7f43d 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,34 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n-    }\n-\n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n-      }\n-    }\n-    return VariableLiveness.MAYBE_LIVE;\n-  }\n+private VariableLiveness isVariableReadBeforeKill(\n+   Node n, String variable) {\n+ if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+   if (NodeUtil.isLhs(n, n.getParent())) {\n+     // The expression to which the assignment is made is evaluated before\n+     // the RHS is evaluated (normal left to right evaluation) but the KILL\n+     // occurs after the RHS is evaluated.\n+     return VariableLiveness.KILL;\n+   } else {\n+     return VariableLiveness.READ;\n+   }\n+ }\n+\n+ // Expressions are evaluated left-right, depth first.\n+ for (Node child = n.getFirstChild();\n+     child != null; child = child.getNext()) {\n+   if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n+     VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+     if (state == VariableLiveness.KILL) {\n+       // Return KILL only if the variable is found to be killed within the subtree.\n+       return VariableLiveness.KILL;\n+     } else if (state == VariableLiveness.READ) {\n+       // Return READ only if the first occurrence of the variable is found to be read within the subtree.\n+       // Any subsequent occurrence of the variable within the subtree is irrelevant.\n+       return VariableLiveness.READ;\n+     }\n+   }\n+ }\n+ return VariableLiveness.MAYBE_LIVE;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}