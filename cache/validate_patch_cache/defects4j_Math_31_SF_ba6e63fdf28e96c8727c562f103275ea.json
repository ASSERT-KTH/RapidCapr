{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n            // continued fraction is diverging, try to recover:\n            double scale = 1.0;\n            double lastScale = 0.0;\n            for (int i = n + 1; i < n + 1024; i++) {\n                double aN = getA(i, x);\n                double bN = getB(i, x);\n\n                double pN = aN * hPrev + bN * p0;\n                double qN = aN * q1 + bN * dPrev;\n\n                double scaleFactor = 1.0;\n                if (FastMath.max(FastMath.abs(pN), FastMath.abs(qN)) > 1e8) {\n                    scaleFactor = 1e-30;\n                }\n\n                final double ratio = scale / scaleFactor;\n                final double hN2 = cPrev * ratio * deltaN(a, b, p0, q1) / (ratio - 1.0);\n                final double deltaN2 = hN2 / hPrev;\n\n                if (FastMath.abs(deltaN2 - deltaN) > 0.001) {\n                    scale = lastScale;\n                    break;\n                }\n\n                scale = scaleFactor;\n                lastScale = scaleFactor;\n                deltaN = deltaN2;\n                hN = hN2;\n                a = aN;\n                b = bN;\n                cN = a * hPrev + b * p0;\n                q2 = a * q1 + b * dPrev;\n                if (!(Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2))) {\n                    break;\n                }\n            }\n\n            if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n\n        final double deltaN = cN / q2 / cPrev;\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                           x);\n        }\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                           x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    // When evaluating at integers, n and d can exactly represent the returned value\n    if (Precision.compareTo(x, (double) ((int) x), epsilon) == 0) {\n        double num = 1.0;\n        double den = 0.0;\n        for (int i = n - 1; i >= 0; i--) {\n            final double a = getA(i, x);\n            final double b = getB(i, x);\n            double tmp = num;\n                num = a * num + b * den;\n                den = tmp;\n        }\n        return num / den;\n    }\n\n    return hN;\n}\n\nprivate double deltaN(double a, double b, double p0, double q1) {\n    if (a == 0.0 || b == 0.0) {\n       return 1.0;\n    }\n    final double delta = q1 / (a * p0) + b / a;\n    return 1.0 / delta;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..bb39e1fcb 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,124 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+\n+        if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n+            // continued fraction is diverging, try to recover:\n+            double scale = 1.0;\n+            double lastScale = 0.0;\n+            for (int i = n + 1; i < n + 1024; i++) {\n+                double aN = getA(i, x);\n+                double bN = getB(i, x);\n+\n+                double pN = aN * hPrev + bN * p0;\n+                double qN = aN * q1 + bN * dPrev;\n+\n+                double scaleFactor = 1.0;\n+                if (FastMath.max(FastMath.abs(pN), FastMath.abs(qN)) > 1e8) {\n+                    scaleFactor = 1e-30;\n                 }\n-            }\n \n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+                final double ratio = scale / scaleFactor;\n+                final double hN2 = cPrev * ratio * deltaN(a, b, p0, q1) / (ratio - 1.0);\n+                final double deltaN2 = hN2 / hPrev;\n \n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                if (FastMath.abs(deltaN2 - deltaN) > 0.001) {\n+                    scale = lastScale;\n+                    break;\n+                }\n+\n+                scale = scaleFactor;\n+                lastScale = scaleFactor;\n+                deltaN = deltaN2;\n+                hN = hN2;\n+                a = aN;\n+                b = bN;\n+                cN = a * hPrev + b * p0;\n+                q2 = a * q1 + b * dPrev;\n+                if (!(Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2))) {\n+                    break;\n+                }\n             }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n+        }\n \n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n+        final double deltaN = cN / q2 / cPrev;\n+        hN = cPrev * deltaN;\n+\n+        if (Double.isInfinite(hN)) {\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n+                                           x);\n+        }\n+        if (Double.isNaN(hN)) {\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n+                                           x);\n         }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            break;\n         }\n \n-        return hN;\n+        dPrev = q1;\n+        cPrev = cN / q2;\n+        p0 = hPrev;\n+        hPrev = cN;\n+        q1 = q2;\n+        n++;\n     }\n \n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                                            maxIterations, x);\n+    }\n+\n+    // When evaluating at integers, n and d can exactly represent the returned value\n+    if (Precision.compareTo(x, (double) ((int) x), epsilon) == 0) {\n+        double num = 1.0;\n+        double den = 0.0;\n+        for (int i = n - 1; i >= 0; i--) {\n+            final double a = getA(i, x);\n+            final double b = getB(i, x);\n+            double tmp = num;\n+                num = a * num + b * den;\n+                den = tmp;\n+        }\n+        return num / den;\n+    }\n+\n+    return hN;\n+}\n+\n+private double deltaN(double a, double b, double p0, double q1) {\n+    if (a == 0.0 || b == 0.0) {\n+       return 1.0;\n+    }\n+    final double delta = q1 / (a * p0) + b / a;\n+    return 1.0 / delta;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}