{
    "patch": "            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(indexOfVararg >= position ?\n                        invocation.getRawArguments()[position] :\n                        Array.newInstance(m.getClass().getComponentType(), 0));\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..4fe76b3d9 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,11 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (m instanceof CapturesArguments) {\n+                ((CapturesArguments) m).captureFrom(indexOfVararg >= position ?\n+                        invocation.getRawArguments()[position] :\n+                        Array.newInstance(m.getClass().getComponentType(), 0));\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}