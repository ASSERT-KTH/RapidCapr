{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal + initialOffset;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (initialOffset == offsetAdjusted) {\n        return initialOffset;\n    }\n    final long instantNext = nextTransition(instantAdjusted);\n    if (instantNext == Transition.MIN) {\n        // No next transition, so we are in overlap\n        return offsetAdjusted >= initialOffset ? offsetAdjusted : initialOffset;\n    }\n    final long instantPrevious = previousTransition(instantAdjusted);\n    if (instantNext - instantAdjusted < instantAdjusted - instantPrevious) {\n        return getOffset(instantNext);\n    }\n    return offsetAdjusted >= initialOffset ? initialOffset : getOffset(instantPrevious);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ea7769e2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,24 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal + initialOffset;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    if (initialOffset == offsetAdjusted) {\n+        return initialOffset;\n+    }\n+    final long instantNext = nextTransition(instantAdjusted);\n+    if (instantNext == Transition.MIN) {\n+        // No next transition, so we are in overlap\n+        return offsetAdjusted >= initialOffset ? offsetAdjusted : initialOffset;\n     }\n+    final long instantPrevious = previousTransition(instantAdjusted);\n+    if (instantNext - instantAdjusted < instantAdjusted - instantPrevious) {\n+        return getOffset(instantNext);\n+    }\n+    return offsetAdjusted >= initialOffset ? initialOffset : getOffset(instantPrevious);\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}