{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // Check if the matrix is positive definite\n    if (!isPositiveDefinite(m)) {\n        throw new IllegalArgumentException(\"Matrix must be positive definite.\");\n    }\n\n    // Use Cholesky decomposition for positive definite matrices\n    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    RealMatrix l = dec.getL();\n    RealMatrix lt = l.transpose();\n\n    return l.multiply(lt);\n}\n\nprivate boolean isPositiveDefinite(RealMatrix m) {\n    // Check if the matrix is symmetric\n    if (!isSymmetric(m)) {\n        return false;\n    }\n\n    // Check if all eigenvalues are positive\n    EigenDecomposition dec = new EigenDecomposition(m);\n    double[] eigenvalues = dec.getRealEigenvalues();\n    for (double eigenvalue : eigenvalues) {\n        if (eigenvalue <= 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isSymmetric(RealMatrix m) {\n    int n = m.getRowDimension();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (m.getEntry(i, j) != m.getEntry(j, i)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f2665e0da 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,47 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Check if the matrix is positive definite\n+    if (!isPositiveDefinite(m)) {\n+        throw new IllegalArgumentException(\"Matrix must be positive definite.\");\n     }\n+\n+    // Use Cholesky decomposition for positive definite matrices\n+    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    RealMatrix l = dec.getL();\n+    RealMatrix lt = l.transpose();\n+\n+    return l.multiply(lt);\n+}\n+\n+private boolean isPositiveDefinite(RealMatrix m) {\n+    // Check if the matrix is symmetric\n+    if (!isSymmetric(m)) {\n+        return false;\n+    }\n+\n+    // Check if all eigenvalues are positive\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    double[] eigenvalues = dec.getRealEigenvalues();\n+    for (double eigenvalue : eigenvalues) {\n+        if (eigenvalue <= 0) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+private boolean isSymmetric(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i + 1; j < n; j++) {\n+            if (m.getEntry(i, j) != m.getEntry(j, i)) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}