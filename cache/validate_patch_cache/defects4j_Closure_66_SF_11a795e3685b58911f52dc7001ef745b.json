{
    "patch": "public double getTypedPercent(JSONObject jsonObj){\n    try{\n        JSONArray questions = jsonObj.getJSONArray(\"questions\");\n        int typed = 0;\n        int total = questions.length();\n        for(int i=0;i<total;i++){\n            JSONObject question = questions.getJSONObject(i);\n            if(question.has(\"answer\") && !question.getString(\"answer\").equals(\"\")){\n                typed++;\n            }\n        }\n        if(total > 0){\n            double typedPercent = (double)typed / total * 100;\n            return typedPercent;\n        }\n    } catch(JSONException ex){\n        ex.printStackTrace();\n    }\n    return 0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8b8bc4a5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject jsonObj){\n+    try{\n+        JSONArray questions = jsonObj.getJSONArray(\"questions\");\n+        int typed = 0;\n+        int total = questions.length();\n+        for(int i=0;i<total;i++){\n+            JSONObject question = questions.getJSONObject(i);\n+            if(question.has(\"answer\") && !question.getString(\"answer\").equals(\"\")){\n+                typed++;\n+            }\n+        }\n+        if(total > 0){\n+            double typedPercent = (double)typed / total * 100;\n+            return typedPercent;\n+        }\n+    } catch(JSONException ex){\n+        ex.printStackTrace();\n+    }\n+    return 0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}