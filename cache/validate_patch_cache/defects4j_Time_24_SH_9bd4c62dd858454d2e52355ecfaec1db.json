{
    "patch": "        if (millis < iChrono.getDateTimeMillis(TRANSITION_MIN_YEAR, 1, 1, 0)) {\n            throw new IllegalArgumentException(\n                    \"The datetime \" + millis + \" is before 0000-01-01T00:00:00Z\");\n        }\n        if (millis >= iChrono.getDateTimeMillis(TRANSITION_MAX_YEAR, 1, 1, 0)) {\n            throw new IllegalArgumentException(\n                    \"The datetime \" + millis + \" is after \" + TRANSITION_MAX_YEAR + \"-12-31T23:59:59.999Z\");\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6d1ba766 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        if (millis < iChrono.getDateTimeMillis(TRANSITION_MIN_YEAR, 1, 1, 0)) {\n+            throw new IllegalArgumentException(\n+                    \"The datetime \" + millis + \" is before 0000-01-01T00:00:00Z\");\n+        }\n+        if (millis >= iChrono.getDateTimeMillis(TRANSITION_MAX_YEAR, 1, 1, 0)) {\n+            throw new IllegalArgumentException(\n+                    \"The datetime \" + millis + \" is after \" + TRANSITION_MAX_YEAR + \"-12-31T23:59:59.999Z\");\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}