{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // Split the input text into individual fields\n    int[] parsedFields = new int[3];\n    MutableDateTime mutableDateTime = new MutableDateTime(defaultYear, 1, 1, 0, 0, 0, 0, chrono);\n    int newPos = parser.parseInto(mutableDateTime, text, position);\n    parsedFields[0] = mutableDateTime.getMonthOfYear();\n    parsedFields[1] = mutableDateTime.getDayOfMonth();\n    parsedFields[2] = chrono.year().get(mutableDateTime);\n\n    // Check if the resulting date is valid\n    boolean isValidDate = true;\n    try {\n        chrono.getDateTimeMillis(parsedFields[2], parsedFields[0], parsedFields[1], 0);\n    } catch (IllegalFieldValueException e) {\n        isValidDate = false;\n    }\n\n    if (!isValidDate) {\n        // Try to adjust for leap year\n        int maxDayOfMonth = chrono.monthOfYear().set(chrono.monthOfYear().set(1, parsedFields[0]), parsedFields[2]).daysOfMonth().getMaximumValue();\n        if (parsedFields[1] > maxDayOfMonth) {\n            // Invalid day of month, try correcting it by moving to last day of month\n            parsedFields[1] = maxDayOfMonth;\n        }\n    }\n\n    instant.setMillis(chrono.getDateTimeMillis(parsedFields[2], parsedFields[0], parsedFields[1], 0));\n    instant.setChronology(chrono);\n\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..9733b9cc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,52 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    // Split the input text into individual fields\n+    int[] parsedFields = new int[3];\n+    MutableDateTime mutableDateTime = new MutableDateTime(defaultYear, 1, 1, 0, 0, 0, 0, chrono);\n+    int newPos = parser.parseInto(mutableDateTime, text, position);\n+    parsedFields[0] = mutableDateTime.getMonthOfYear();\n+    parsedFields[1] = mutableDateTime.getDayOfMonth();\n+    parsedFields[2] = chrono.year().get(mutableDateTime);\n+\n+    // Check if the resulting date is valid\n+    boolean isValidDate = true;\n+    try {\n+        chrono.getDateTimeMillis(parsedFields[2], parsedFields[0], parsedFields[1], 0);\n+    } catch (IllegalFieldValueException e) {\n+        isValidDate = false;\n+    }\n+\n+    if (!isValidDate) {\n+        // Try to adjust for leap year\n+        int maxDayOfMonth = chrono.monthOfYear().set(chrono.monthOfYear().set(1, parsedFields[0]), parsedFields[2]).daysOfMonth().getMaximumValue();\n+        if (parsedFields[1] > maxDayOfMonth) {\n+            // Invalid day of month, try correcting it by moving to last day of month\n+            parsedFields[1] = maxDayOfMonth;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n \n+    instant.setMillis(chrono.getDateTimeMillis(parsedFields[2], parsedFields[0], parsedFields[1], 0));\n+    instant.setChronology(chrono);\n+\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: incompatible types: MutableDateTime cannot be converted to DateTimeParserBucket",
    "test_result": "ERROR"
}