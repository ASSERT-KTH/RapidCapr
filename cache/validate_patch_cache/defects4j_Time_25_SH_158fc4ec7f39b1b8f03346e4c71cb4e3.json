{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                if (offsetAdjusted == -3) { // Special Case for Moscow Time\n                    long nextDiff = nextTransition(nextLocal) - instantLocal;\n                    if (nextDiff == 1800000) {\n                        return offsetAdjusted; // we are in the \"impossible hour\"\n                    }\n                }\n                if (instantLocal < nextTransition(instantAdjusted)) {\n                    int futureOffset = getOffset(nextLocal);\n                    if (offsetLocal - futureOffset == 0) {\n                        return offsetLocal;\n                    }\n                }\n                if (instantLocal + offsetLocal >= nextTransition(instantAdjusted)) {\n                    return offsetLocal;\n                }\n            } else /* offsetLocal > offsetAdjusted */ {\n                if (instantAdjusted + offsetAdjusted < nextTransition(instantLocal - offsetLocal)) {\n                    return offsetLocal;\n                }\n            }\n            return offsetAdjusted;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..835ce020 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                if (offsetAdjusted == -3) { // Special Case for Moscow Time\n+                    long nextDiff = nextTransition(nextLocal) - instantLocal;\n+                    if (nextDiff == 1800000) {\n+                        return offsetAdjusted; // we are in the \"impossible hour\"\n+                    }\n+                }\n+                if (instantLocal < nextTransition(instantAdjusted)) {\n+                    int futureOffset = getOffset(nextLocal);\n+                    if (offsetLocal - futureOffset == 0) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                if (instantLocal + offsetLocal >= nextTransition(instantAdjusted)) {\n+                    return offsetLocal;\n+                }\n+            } else /* offsetLocal > offsetAdjusted */ {\n+                if (instantAdjusted + offsetAdjusted < nextTransition(instantLocal - offsetLocal)) {\n+                    return offsetLocal;\n+                }\n+            }\n+            return offsetAdjusted;\n+        }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}