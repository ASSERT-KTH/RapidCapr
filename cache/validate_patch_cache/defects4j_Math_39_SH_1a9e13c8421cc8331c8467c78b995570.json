{
    "patch": "  public void testTooLargeFirstStep() {\n    try {\n      new DormandPrince853Integrator(0, endValue, 1e-10, 1e-10).integrate(new ExpandableODE(functions),\n                                                                            0.0, new double[6]);\n      Assert.fail(\"an exception should have been thrown\");\n    } catch (MathIllegalStateException e) {\n      // expected behavior\n    }\n    final double badStep = 1.000000000000002;\n    try {\n      new DormandPrince853Integrator(0, endValue, 1e-10, 1e-10, badStep * endValue).integrate(new ExpandableODE(functions),\n                                                                                                0.0, new double[6]);\n      Assert.fail(\"an exception should have been thrown\");\n    } catch (MathIllegalArgumentException e) {\n      // expected behavior\n    }\n    final double goodStep = 1.000000000000001;\n    try {\n      new DormandPrince853Integrator(0, endValue, 1e-10, 1e-10, goodStep * endValue).integrate(new ExpandableODE(functions),\n                                                                                                0.0, new double[6]);\n    } catch (MathIllegalStateException e) {\n      Assert.fail(\"no exception should have been thrown\");\n    }\n    Assert.assertTrue(true);\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..d794bfe21 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,31 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+  public void testTooLargeFirstStep() {\n+    try {\n+      new DormandPrince853Integrator(0, endValue, 1e-10, 1e-10).integrate(new ExpandableODE(functions),\n+                                                                            0.0, new double[6]);\n+      Assert.fail(\"an exception should have been thrown\");\n+    } catch (MathIllegalStateException e) {\n+      // expected behavior\n+    }\n+    final double badStep = 1.000000000000002;\n+    try {\n+      new DormandPrince853Integrator(0, endValue, 1e-10, 1e-10, badStep * endValue).integrate(new ExpandableODE(functions),\n+                                                                                                0.0, new double[6]);\n+      Assert.fail(\"an exception should have been thrown\");\n+    } catch (MathIllegalArgumentException e) {\n+      // expected behavior\n+    }\n+    final double goodStep = 1.000000000000001;\n+    try {\n+      new DormandPrince853Integrator(0, endValue, 1e-10, 1e-10, goodStep * endValue).integrate(new ExpandableODE(functions),\n+                                                                                                0.0, new double[6]);\n+    } catch (MathIllegalStateException e) {\n+      Assert.fail(\"no exception should have been thrown\");\n+    }\n+    Assert.assertTrue(true);\n+  }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}