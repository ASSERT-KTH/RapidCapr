{
    "patch": "public class Main {\n\n  enum Context {\n    FUNCTION,\n    OTHER\n  }\n\n  private static String generateCodeSnippet(String source, Context context) {\n\n    String commonCode = \"foo()\";\n    String conditionalCode = \"a=c?0:\";\n    boolean isContains = false;\n    switch (context) {\n      case FUNCTION:\n        isContains = source.startsWith(\"function\");\n        break;\n      case OTHER:\n        isContains = source.contains(\"in\");\n        break;\n    }\n    if (!isContains) {\n        boolean isConditional = source != null && source.trim().startsWith(conditionalCode.trim());\n        return isConditional ? \"for(\" + conditionalCode + \"[0 in d];)\"+ commonCode : \"for(\"+ conditionalCode + \"0;;)\" + commonCode;\n    }\n    return source.trim();\n  }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}