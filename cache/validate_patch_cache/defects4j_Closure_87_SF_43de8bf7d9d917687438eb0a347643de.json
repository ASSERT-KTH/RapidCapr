{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        Node expression = maybeExpr;\n\n        if (expression.getType() == Token.FUNCTION) {\n          // If expression is a function, check that its first child is null,\n          // its second child is a parameter list, and its third child is a block\n          Node functionNode = expression.getFirstChild();\n          if (functionNode == null) {\n            return false;\n          }\n\n          Node paramsNode = functionNode.getNext();\n          if (paramsNode == null || !paramsNode.isParamList()) {\n            return false;\n          }\n\n          Node blockNode = paramsNode.getNext();\n          if (blockNode == null || !blockNode.isBlock()) {\n            return false;\n          }\n\n          // Check that the function block contains only return statements\n          for (Node child : blockNode.children()) {\n            if (child.isReturn()) {\n              Node childExpr = child.getFirstChild();\n              if (childExpr != null && !isFoldableExpressBlock(new Node(Token.BLOCK, childExpr))) {\n                return false;\n              }\n            } else {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        if (expression.getType() == Token.NAME) {\n          String name = expression.getString();\n          return !name.startsWith(\"on\") && !name.equals(\"$jscomp\");\n        }\n\n        if (expression.getType() == Token.NOT) {\n          Node child = expression.getFirstChild();\n          return child.getType() != Token.NAME || !child.getString().startsWith(\"event\");\n        }\n\n        if (expression.getType() == Token.GETPROP) {\n          Node objNode = expression.getFirstChild();\n          if (objNode.getType() == Token.NAME) {\n            String objName = objNode.getString();\n            if (objName.startsWith(\"$jscomp\")) {\n              return false;\n            }\n          }\n\n          String propName = expression.getLastChild().getString();\n\n          if (propName.equals(\"returnValue\")) {\n            Node parent = n.getParent();\n            if (parent != null && parent.getParent() != null) {\n              return !parent.getParent().getLastChild().getString().equals(\"handler\");\n            }\n\n            return false;\n          }\n\n          return true;\n        }\n\n        if (expression.getType() == Token.HOOK) {\n          for (Node child : expression.children()) {\n            if (!isFoldableExpressBlock(new Node(Token.BLOCK, child))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        if (expression.getType() == Token.AND || expression.getType() == Token.OR || expression.getType() == Token.EQ\n            || expression.getType() == Token.NE) {\n          for (Node child : expression.children()) {\n            if (!isFoldableExpressBlock(new Node(Token.BLOCK, child))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..15f645a0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,106 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        Node expression = maybeExpr;\n+\n+        if (expression.getType() == Token.FUNCTION) {\n+          // If expression is a function, check that its first child is null,\n+          // its second child is a parameter list, and its third child is a block\n+          Node functionNode = expression.getFirstChild();\n+          if (functionNode == null) {\n+            return false;\n+          }\n+\n+          Node paramsNode = functionNode.getNext();\n+          if (paramsNode == null || !paramsNode.isParamList()) {\n+            return false;\n+          }\n+\n+          Node blockNode = paramsNode.getNext();\n+          if (blockNode == null || !blockNode.isBlock()) {\n+            return false;\n+          }\n+\n+          // Check that the function block contains only return statements\n+          for (Node child : blockNode.children()) {\n+            if (child.isReturn()) {\n+              Node childExpr = child.getFirstChild();\n+              if (childExpr != null && !isFoldableExpressBlock(new Node(Token.BLOCK, childExpr))) {\n+                return false;\n+              }\n+            } else {\n+              return false;\n+            }\n+          }\n+\n+          return true;\n+        }\n+\n+        if (expression.getType() == Token.NAME) {\n+          String name = expression.getString();\n+          return !name.startsWith(\"on\") && !name.equals(\"$jscomp\");\n+        }\n+\n+        if (expression.getType() == Token.NOT) {\n+          Node child = expression.getFirstChild();\n+          return child.getType() != Token.NAME || !child.getString().startsWith(\"event\");\n+        }\n+\n+        if (expression.getType() == Token.GETPROP) {\n+          Node objNode = expression.getFirstChild();\n+          if (objNode.getType() == Token.NAME) {\n+            String objName = objNode.getString();\n+            if (objName.startsWith(\"$jscomp\")) {\n+              return false;\n+            }\n+          }\n+\n+          String propName = expression.getLastChild().getString();\n+\n+          if (propName.equals(\"returnValue\")) {\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getParent() != null) {\n+              return !parent.getParent().getLastChild().getString().equals(\"handler\");\n+            }\n+\n+            return false;\n+          }\n+\n+          return true;\n+        }\n+\n+        if (expression.getType() == Token.HOOK) {\n+          for (Node child : expression.children()) {\n+            if (!isFoldableExpressBlock(new Node(Token.BLOCK, child))) {\n+              return false;\n+            }\n+          }\n+\n+          return true;\n+        }\n+\n+        if (expression.getType() == Token.AND || expression.getType() == Token.OR || expression.getType() == Token.EQ\n+            || expression.getType() == Token.NE) {\n+          for (Node child : expression.children()) {\n+            if (!isFoldableExpressBlock(new Node(Token.BLOCK, child))) {\n+              return false;\n+            }\n+          }\n+\n+          return true;\n+        }\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}