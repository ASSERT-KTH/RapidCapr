{
    "patch": "  private JSDocInfo getFunctionJsDocInfo(Node functionNode) {\n    // First, check if there's a doc comment directly preceding this node.\n    Node prev = functionNode.getPrevious();\n    while (prev != null && prev.isBlank()) {\n      prev = prev.getPrevious();\n    }\n    if (prev != null && prev.isComment()) {\n      String comment = prev.getString();\n      if (comment != null) {\n        Matcher matcher = FUNCTION_COMMENT.matcher(comment);\n        if (matcher.matches()) {\n          return JSDocInfoBuilder.buildFrom(matcher.group(1),\n              functionNode.getSourceFileName());\n        }\n      }\n    }\n\n    // If no comment, check if a comment appears in-line, but not on the first line.\n    for (Node child = functionNode.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetProp() && child.getLastChild().getString().equals(\"prototype\")) {\n        return null;\n      } else if (child.isComment()) {\n        String comment = child.getString();\n        if (comment != null) {\n          Matcher matcher = FUNCTION_COMMENT.matcher(comment);\n          if (matcher.matches()) {\n            return JSDocInfoBuilder.buildFrom(matcher.group(1),\n                functionNode.getSourceFileName());\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    // If no doc comment, try inheriting the return type from the parent\n    // function.\n    Node parent = functionNode.getParent();\n    if (parent != null && parent.getType() == Token.CAST) {\n      Node grandParent = parent.getParent();\n      if (grandParent != null && grandParent.getType() == Token.FUNCTION) {\n        JSDocInfo parentDocInfo = getFunctionJsDocInfo(grandParent);\n        if (parentDocInfo != null) {\n          JSDocInfoBuilder builder = JSDocInfoBuilder.copyFrom(parentDocInfo);\n          if (builder != null && builder.isOverride()) {\n            builder.recordOverride();\n          }\n          return builder.build(functionNode.getSourceFileName());\n        }\n      }\n    }\n\n    return null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..1e8ea14a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,58 +81,59 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n+  private JSDocInfo getFunctionJsDocInfo(Node functionNode) {\n+    // First, check if there's a doc comment directly preceding this node.\n+    Node prev = functionNode.getPrevious();\n+    while (prev != null && prev.isBlank()) {\n+      prev = prev.getPrevious();\n+    }\n+    if (prev != null && prev.isComment()) {\n+      String comment = prev.getString();\n+      if (comment != null) {\n+        Matcher matcher = FUNCTION_COMMENT.matcher(comment);\n+        if (matcher.matches()) {\n+          return JSDocInfoBuilder.buildFrom(matcher.group(1),\n+              functionNode.getSourceFileName());\n+        }\n       }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    // If no comment, check if a comment appears in-line, but not on the first line.\n+    for (Node child = functionNode.getFirstChild(); child != null; child = child.getNext()) {\n+      if (child.isGetProp() && child.getLastChild().getString().equals(\"prototype\")) {\n+        return null;\n+      } else if (child.isComment()) {\n+        String comment = child.getString();\n+        if (comment != null) {\n+          Matcher matcher = FUNCTION_COMMENT.matcher(comment);\n+          if (matcher.matches()) {\n+            return JSDocInfoBuilder.buildFrom(matcher.group(1),\n+                functionNode.getSourceFileName());\n+          }\n         }\n       } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n+        break;\n+      }\n+    }\n+\n+    // If no doc comment, try inheriting the return type from the parent\n+    // function.\n+    Node parent = functionNode.getParent();\n+    if (parent != null && parent.getType() == Token.CAST) {\n+      Node grandParent = parent.getParent();\n+      if (grandParent != null && grandParent.getType() == Token.FUNCTION) {\n+        JSDocInfo parentDocInfo = getFunctionJsDocInfo(grandParent);\n+        if (parentDocInfo != null) {\n+          JSDocInfoBuilder builder = JSDocInfoBuilder.copyFrom(parentDocInfo);\n+          if (builder != null && builder.isOverride()) {\n+            builder.recordOverride();\n           }\n+          return builder.build(functionNode.getSourceFileName());\n+        }\n       }\n     }\n \n-    return true;\n+    return null;\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: method getFunctionJsDocInfo(Node) is already defined in class CheckGlobalThis",
    "test_result": "ERROR"
}