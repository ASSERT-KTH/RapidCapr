{
    "patch": "          } else if (block.isLoop) {\n            return false;\n          }\n        }\n      }\n\n      // Check that every reference after the initialization is also an\n      // assignment, and there is only one assignment without intervening\n      // references. Also check that all assignments have the same value.\n      Node initialValue = ref.getParent().getLastChild();\n      Set<String> constantValues = null;\n      boolean foundAnotherAssignment = false;\n      for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n        Reference nextRef = references.get(i);\n        if (nextRef.isSimpleAssignmentToName()) {\n          Node value = nextRef.getParent().getLastChild();\n          if (!initialValue.isEquivalentTo(value)) {\n            return false;\n          }\n          if (constantValues == null) {\n            constantValues = new HashSet<>();\n            constantValues.add(initialValue.toStringTree());\n          }\n          foundAnotherAssignment = true;\n          constantValues.add(value.toStringTree());\n          if (constantValues.size() > 1) {\n            return false;\n          }\n        } else if(!nextRef.isDeclaration() || !nextRef.isHoisted()) {\n          return false;\n        }\n      }\n\n      return foundAnotherAssignment || constantValues == null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c908807a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,40 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          } else if (block.isLoop) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      // Check that every reference after the initialization is also an\n+      // assignment, and there is only one assignment without intervening\n+      // references. Also check that all assignments have the same value.\n+      Node initialValue = ref.getParent().getLastChild();\n+      Set<String> constantValues = null;\n+      boolean foundAnotherAssignment = false;\n+      for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n+        Reference nextRef = references.get(i);\n+        if (nextRef.isSimpleAssignmentToName()) {\n+          Node value = nextRef.getParent().getLastChild();\n+          if (!initialValue.isEquivalentTo(value)) {\n+            return false;\n+          }\n+          if (constantValues == null) {\n+            constantValues = new HashSet<>();\n+            constantValues.add(initialValue.toStringTree());\n+          }\n+          foundAnotherAssignment = true;\n+          constantValues.add(value.toStringTree());\n+          if (constantValues.size() > 1) {\n+            return false;\n+          }\n+        } else if(!nextRef.isDeclaration() || !nextRef.isHoisted()) {\n+          return false;\n+        }\n+      }\n+\n+      return foundAnotherAssignment || constantValues == null;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}