{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    switch (n.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            return;\n\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            } else {\n                Node lhs = n.getFirstChild();\n                Node rhs = lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    for (Node child = lhs.getFirstChild(); child != null; child = child.getNext()) {\n                        addToSetIfLocal(child, kill);\n                        addToSetIfLocal(child, gen);\n                    }\n                } else {\n                    addToSetIfLocal(lhs, kill);\n                    addToSetIfLocal(lhs, gen);\n                }\n                computeGenKill(rhs, gen, kill, conditional);\n            }\n            return;\n\n        case Token.VAR:\n            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                if (child.hasChildren()) {\n                    Node varName = child.getFirstChild();\n                    if(NodeUtil.isDestructuringLhs(varName)) {\n                        destructureVarDeclaration(varName, gen, kill);\n                    } else {\n                        computeGenKill(varName, gen, kill, conditional);\n                    }\n                    if (!conditional) {\n                        addToKillIfLocal(child, kill);\n                    }\n                }\n            }\n            return;\n\n        case Token.AND:\n        case Token.OR:\n            computeGenKill(n.getFirstChild(), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            if (!conditional) {\n                computeGenKill(n.getFirstChild(), gen, kill, false);\n                computeGenKill(n.getLastChild(), gen, kill, false);\n            }\n            return;\n\n        case Token.HOOK:\n            computeGenKill(n.getFirstChild(), gen, kill, true);\n            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            if (!conditional) {\n                computeGenKill(n.getFirstChild(), gen, kill, false);\n                computeGenKill(n.getFirstChild().getNext(), gen, kill, false);\n                computeGenKill(n.getLastChild(), gen, kill, false);\n            }\n            return;\n\n        case Token.NAME:\n            if (isArgumentsName(n)) {\n                markAllParametersEscaped();\n            } else {\n                addToSetIfLocal(n, gen);\n            }\n            return;\n\n        default:\n            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n                Node lhsNode = n.getFirstChild();\n                if (!conditional) {\n                    addToKillIfLocal(lhsNode, kill);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    addToSetIfLocal(lhsNode, gen);\n                }\n                computeGenKill(n.getNext(), gen, kill, conditional);\n            } else {\n                for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                    computeGenKill(child, gen, kill, conditional);\n                }\n            }\n            return;\n    }\n}\n\nprivate void destructureVarDeclaration(Node node, BitSet gen, BitSet kill) {\n    if(NodeUtil.isObjectLiterall(node) || NodeUtil.isArrayLiterall(node)) {\n        for(Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n            if(child.isDefaultValue()) {\n                Node lhs = child.getFirstChild();\n                addToSetIfLocal(lhs, kill);\n                addToSetIfLocal(lhs, gen);\n            }\n            else if(child.isObjectPatternField()) {\n                Node lhs = child.getFirstChild();\n                if(NodeUtil.isDestructuringLhs(lhs)) {\n                    destructureVarDeclaration(lhs, gen, kill);\n                } else {\n                    addToSetIfLocal(lhs, kill);\n                    addToSetIfLocal(lhs, gen);\n                }\n                Node rhs = child.getLastChild();\n                if(NodeUtil.isDestructuringLhs(rhs)) {\n                    destructureVarDeclaration(rhs, gen, kill);\n                } else {\n                    computeGenKill(rhs, gen, kill, false);\n                }\n            } else if (child.isRest()) {\n                Node lhs = child.getFirstChild();\n                addToSetIfLocal(lhs, gen);\n                Node rhs = child.getNext();\n                computeGenKill(rhs, gen, kill, false);\n            } else {\n                Node rhs = child.getFirstChild();\n                Node lhs = rhs.getFirstChild();\n                if(NodeUtil.isDestructuringLhs(lhs)) {\n                    destructureVarDeclaration(lhs, gen, kill);\n                } else {\n                    addToSetIfLocal(lhs, kill);\n                    addToSetIfLocal(lhs, gen);\n                }\n            computeGenKill(rhs.getNext(), gen, kill, false);\n            }\n        }\n    }\n    else {\n        Node curNode = node;\n        do {\n            if(curNode.isDefaultValue()) {\n                Node lhs = curNode.getFirstChild();\n                addToSetIfLocal(lhs, kill);\n                addToSetIfLocal(lhs, gen);\n            } else {\n                Node lhs = curNode.getFirstChild();\n                if(NodeUtil.isDestructuringLhs(lhs)) {\n                    destructureVarDeclaration(lhs, gen, kill);\n                } else {\n                    addToSetIfLocal(lhs, kill);\n                    addToSetIfLocal(lhs, gen);\n                }\n                Node rhs = curNode.getLastChild();\n                computeGenKill(rhs, gen, kill, false);\n            }\n            curNode = curNode.getNext();\n        } while(curNode != null);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..128430d6 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,164 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n     switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n-        }\n-        return;\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+        case Token.FUNCTION:\n+            return;\n+\n+        case Token.WHILE:\n+        case Token.DO:\n+        case Token.IF:\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+            return;\n+\n+        case Token.FOR:\n+            if (!NodeUtil.isForIn(n)) {\n+                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+            } else {\n+                Node lhs = n.getFirstChild();\n+                Node rhs = lhs.getNext();\n+                if (NodeUtil.isVar(lhs)) {\n+                    for (Node child = lhs.getFirstChild(); child != null; child = child.getNext()) {\n+                        addToSetIfLocal(child, kill);\n+                        addToSetIfLocal(child, gen);\n+                    }\n+                } else {\n+                    addToSetIfLocal(lhs, kill);\n+                    addToSetIfLocal(lhs, gen);\n+                }\n+                computeGenKill(rhs, gen, kill, conditional);\n+            }\n+            return;\n+\n+        case Token.VAR:\n+            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+                if (child.hasChildren()) {\n+                    Node varName = child.getFirstChild();\n+                    if(NodeUtil.isDestructuringLhs(varName)) {\n+                        destructureVarDeclaration(varName, gen, kill);\n+                    } else {\n+                        computeGenKill(varName, gen, kill, conditional);\n+                    }\n+                    if (!conditional) {\n+                        addToKillIfLocal(child, kill);\n+                    }\n+                }\n+            }\n+            return;\n \n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+        case Token.AND:\n+        case Token.OR:\n+            computeGenKill(n.getFirstChild(), gen, kill, true);\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n             if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+                computeGenKill(n.getFirstChild(), gen, kill, false);\n+                computeGenKill(n.getLastChild(), gen, kill, false);\n+            }\n+            return;\n+\n+        case Token.HOOK:\n+            computeGenKill(n.getFirstChild(), gen, kill, true);\n+            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+            if (!conditional) {\n+                computeGenKill(n.getFirstChild(), gen, kill, false);\n+                computeGenKill(n.getFirstChild().getNext(), gen, kill, false);\n+                computeGenKill(n.getLastChild(), gen, kill, false);\n+            }\n+            return;\n+\n+        case Token.NAME:\n+            if (isArgumentsName(n)) {\n+                markAllParametersEscaped();\n+            } else {\n+                addToSetIfLocal(n, gen);\n+            }\n+            return;\n+\n+        default:\n+            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+                Node lhsNode = n.getFirstChild();\n+                if (!conditional) {\n+                    addToKillIfLocal(lhsNode, kill);\n+                }\n+                if (!NodeUtil.isAssign(n)) {\n+                    addToSetIfLocal(lhsNode, gen);\n+                }\n+                computeGenKill(n.getNext(), gen, kill, conditional);\n+            } else {\n+                for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+                    computeGenKill(child, gen, kill, conditional);\n+                }\n+            }\n+            return;\n+    }\n+}\n+\n+private void destructureVarDeclaration(Node node, BitSet gen, BitSet kill) {\n+    if(NodeUtil.isObjectLiterall(node) || NodeUtil.isArrayLiterall(node)) {\n+        for(Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+            if(child.isDefaultValue()) {\n+                Node lhs = child.getFirstChild();\n+                addToSetIfLocal(lhs, kill);\n+                addToSetIfLocal(lhs, gen);\n+            }\n+            else if(child.isObjectPatternField()) {\n+                Node lhs = child.getFirstChild();\n+                if(NodeUtil.isDestructuringLhs(lhs)) {\n+                    destructureVarDeclaration(lhs, gen, kill);\n+                } else {\n+                    addToSetIfLocal(lhs, kill);\n+                    addToSetIfLocal(lhs, gen);\n+                }\n+                Node rhs = child.getLastChild();\n+                if(NodeUtil.isDestructuringLhs(rhs)) {\n+                    destructureVarDeclaration(rhs, gen, kill);\n+                } else {\n+                    computeGenKill(rhs, gen, kill, false);\n+                }\n+            } else if (child.isRest()) {\n+                Node lhs = child.getFirstChild();\n+                addToSetIfLocal(lhs, gen);\n+                Node rhs = child.getNext();\n+                computeGenKill(rhs, gen, kill, false);\n+            } else {\n+                Node rhs = child.getFirstChild();\n+                Node lhs = rhs.getFirstChild();\n+                if(NodeUtil.isDestructuringLhs(lhs)) {\n+                    destructureVarDeclaration(lhs, gen, kill);\n+                } else {\n+                    addToSetIfLocal(lhs, kill);\n+                    addToSetIfLocal(lhs, gen);\n+                }\n+            computeGenKill(rhs.getNext(), gen, kill, false);\n             }\n-          }\n-        }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n-        }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n         }\n-        return;\n     }\n-  }\n+    else {\n+        Node curNode = node;\n+        do {\n+            if(curNode.isDefaultValue()) {\n+                Node lhs = curNode.getFirstChild();\n+                addToSetIfLocal(lhs, kill);\n+                addToSetIfLocal(lhs, gen);\n+            } else {\n+                Node lhs = curNode.getFirstChild();\n+                if(NodeUtil.isDestructuringLhs(lhs)) {\n+                    destructureVarDeclaration(lhs, gen, kill);\n+                } else {\n+                    addToSetIfLocal(lhs, kill);\n+                    addToSetIfLocal(lhs, gen);\n+                }\n+                Node rhs = curNode.getLastChild();\n+                computeGenKill(rhs, gen, kill, false);\n+            }\n+            curNode = curNode.getNext();\n+        } while(curNode != null);\n+    }\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}