{
    "patch": "Map<Node, Var> referenced = new HashMap<>();\nNode function = fnScope.getRootNode();\n\n// Collecting the referenced parameters in a map\nfor (Var parameter : fnScope.getParameters()) {\n    if (parameter.getScope().getVar(parameter.getName()) != null) {\n        // if the function is a getter or a setter, we should not consider excluded parameters\n        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n            continue;\n        }\n        Node parameterNode = parameter.getNameNode();\n        if (!NodeUtil.references(NodeUtil.getFunctionBody(function), parameterNode)) {\n            argList.removeChild(parameterNode);\n            compiler.reportCodeChange();\n        } else {\n            referenced.put(parameterNode, parameter);\n        }\n    }\n}\n// if we are calling modifyCallSites, then optimize the call sites\nif (modifyCallSites) {\n    callSiteOptimizer.optimize(fnScope, referenced.values().stream().collect(Collectors.toList()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..df1f03ff 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Map<Node, Var> referenced = new HashMap<>();\n+Node function = fnScope.getRootNode();\n+\n+// Collecting the referenced parameters in a map\n+for (Var parameter : fnScope.getParameters()) {\n+    if (parameter.getScope().getVar(parameter.getName()) != null) {\n+        // if the function is a getter or a setter, we should not consider excluded parameters\n+        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+            continue;\n+        }\n+        Node parameterNode = parameter.getNameNode();\n+        if (!NodeUtil.references(NodeUtil.getFunctionBody(function), parameterNode)) {\n+            argList.removeChild(parameterNode);\n+            compiler.reportCodeChange();\n+        } else {\n+            referenced.put(parameterNode, parameter);\n+        }\n+    }\n+}\n+// if we are calling modifyCallSites, then optimize the call sites\n+if (modifyCallSites) {\n+    callSiteOptimizer.optimize(fnScope, referenced.values().stream().collect(Collectors.toList()));\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}