{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        int newTypesLen = iTypes.length + 1;\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[newTypesLen];\n        System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);\n        newTypes[newTypesLen - 1] = fieldType;\n        int[] newValues = new int[newTypesLen];\n        System.arraycopy(iValues, 0, newValues, 0, iTypes.length);\n        newValues[newTypesLen - 1] = value;\n        // Validate before creating a new partial\n        try {\n            iChronology.validate(newTypes, newValues);\n        } catch (IllegalFieldValueException e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n        return new Partial(iChronology, newTypes, newValues);\n    } else {\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getField(index).set(this, index, iValues, value);\n        // Validate before creating a new partial\n        try {\n            iChronology.validate(iTypes, newValues);\n        } catch (IllegalFieldValueException e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n        return new Partial(iChronology, iTypes, newValues);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..59f342e3 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,55 +423,40 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n-        }\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+    int index = indexOf(fieldType);\n+    if (index == -1) {\n+        int newTypesLen = iTypes.length + 1;\n+        DateTimeFieldType[] newTypes = new DateTimeFieldType[newTypesLen];\n+        System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);\n+        newTypes[newTypesLen - 1] = fieldType;\n+        int[] newValues = new int[newTypesLen];\n+        System.arraycopy(iValues, 0, newValues, 0, iTypes.length);\n+        newValues[newTypesLen - 1] = value;\n+        // Validate before creating a new partial\n+        try {\n+            iChronology.validate(newTypes, newValues);\n+        } catch (IllegalFieldValueException e) {\n+            throw new IllegalArgumentException(e.getMessage());\n+        }\n+        return new Partial(iChronology, newTypes, newValues);\n+    } else {\n         if (value == getValue(index)) {\n             return this;\n         }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+        int[] newValues = getField(index).set(this, index, iValues, value);\n+        // Validate before creating a new partial\n+        try {\n+            iChronology.validate(iTypes, newValues);\n+        } catch (IllegalFieldValueException e) {\n+            throw new IllegalArgumentException(e.getMessage());\n+        }\n+        return new Partial(iChronology, iTypes, newValues);\n     }\n+}\n \n     /**\n      * Gets a copy of this date with the specified field removed.",
    "result_reason": "error: method validate in class Chronology cannot be applied to given types;",
    "test_result": "ERROR"
}