{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Boolean isUnnamedFunction = false;\n  if (name == null || name.length() == 0) {\n    name = generateUniqueFunctionName();\n    Name n = new Name(Token.NAME, lineno, name);\n    n.setLength(name.length());\n    newName = transform(n);\n    isUnnamedFunction = true;\n  } else {\n    newName = transform(name);\n  }\n  Node node = newNode(Token.FUNCTION);\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  int lparenCharno = functionNode.getLp() +\n      functionNode.getAbsolutePosition();\n\n  lp.setLineno(positionToLineno(lparenCharno));\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  if (isScript) {\n    node.putProp(Node.SYMBOLS_PROP, functionNode.getScope().getSymbolTable());\n  } else {\n    node.putProp(Node.FUNCTION_PROP, functionNode.getFunctionType());\n  }\n  return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a6fb72e3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,43 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+  Name name = functionNode.getFunctionName();\n+  Boolean isUnnamedFunction = false;\n+  if (name == null || name.length() == 0) {\n+    name = generateUniqueFunctionName();\n+    Name n = new Name(Token.NAME, lineno, name);\n+    n.setLength(name.length());\n+    newName = transform(n);\n+    isUnnamedFunction = true;\n+  } else {\n+    newName = transform(name);\n+  }\n+  Node node = newNode(Token.FUNCTION);\n+  node.addChildToBack(newName);\n+  Node lp = newNode(Token.LP);\n+  int lparenCharno = functionNode.getLp() +\n+      functionNode.getAbsolutePosition();\n+\n+  lp.setLineno(positionToLineno(lparenCharno));\n+  lp.setCharno(position2charno(lparenCharno));\n+  for (AstNode param : functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+  }\n+  node.addChildToBack(lp);\n+\n+  Node bodyNode = transform(functionNode.getBody());\n+  parseDirectives(bodyNode);\n+  node.addChildToBack(bodyNode);\n+\n+  if (isScript) {\n+    node.putProp(Node.SYMBOLS_PROP, functionNode.getScope().getSymbolTable());\n+  } else {\n+    node.putProp(Node.FUNCTION_PROP, functionNode.getFunctionType());\n+  }\n+  return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}