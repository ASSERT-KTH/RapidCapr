{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          if (block.getBackEdges().size() == 1) {\n            List<BasicBlock> loopSuccessors = cfg.getSuccessors(block);\n            assert loopSuccessors.size() == 2;\n            BasicBlock exitSuccessor = loopSuccessors.get(0).equals(loopSuccessors.get(1))\n                ? loopSuccessors.get(0)\n                : cfg.getCommonDominator(loopSuccessors);\n            if (exitSuccessor != null) {\n              List<BasicBlock> exitSuccessorPredecessors = cfg.getPredecessors(exitSuccessor);\n              if (exitSuccessorPredecessors.size() == 1) {\n                BasicBlock exitPredecessor = exitSuccessorPredecessors.get(0);\n                int indexOfAssignment = exitPredecessor.getReferences().indexOf(ref);\n                if (indexOfAssignment >= 0\n                    && exitPredecessor.getReferences().lastIndexOf(ref) == indexOfAssignment) {\n                  return true;\n                }\n              }\n            }\n          }\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..bee69533 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          if (block.getBackEdges().size() == 1) {\n+            List<BasicBlock> loopSuccessors = cfg.getSuccessors(block);\n+            assert loopSuccessors.size() == 2;\n+            BasicBlock exitSuccessor = loopSuccessors.get(0).equals(loopSuccessors.get(1))\n+                ? loopSuccessors.get(0)\n+                : cfg.getCommonDominator(loopSuccessors);\n+            if (exitSuccessor != null) {\n+              List<BasicBlock> exitSuccessorPredecessors = cfg.getPredecessors(exitSuccessor);\n+              if (exitSuccessorPredecessors.size() == 1) {\n+                BasicBlock exitPredecessor = exitSuccessorPredecessors.get(0);\n+                int indexOfAssignment = exitPredecessor.getReferences().indexOf(ref);\n+                if (indexOfAssignment >= 0\n+                    && exitPredecessor.getReferences().lastIndexOf(ref) == indexOfAssignment) {\n+                  return true;\n+                }\n+              }\n+            }\n+          }\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}