{
    "patch": " // Strip unreferenced args off the end of the function declaration.\n-   Node lastArg;\n-   while ((lastArg = argList.getLastChild()) != null) {\n-     Var var = fnScope.getVar(lastArg.getString());\n-     if (!referenced.contains(var)) {\n-       argList.removeChild(lastArg);\n-       compiler.reportCodeChange();\n-     } else {\n-       break;\n-     }\n+   List<Node> toRemove = Lists.newArrayList();\n+   for (int i = 0; i < argList.getChildCount(); i++) {\n+     Node param = argList.getChildAtIndex(i);\n+     Var var = fnScope.getVar(param.getString());\n+     if (!referenced.contains(var)) {\n+        toRemove.add(param);\n+     }\n+   }\n+   for (Node rem : toRemove) {\n+     argList.removeChild(rem);\n+   }\n+   if (!toRemove.isEmpty()) {\n+     compiler.reportCodeChange();\n   }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0b8669c8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+ // Strip unreferenced args off the end of the function declaration.\n+-   Node lastArg;\n+-   while ((lastArg = argList.getLastChild()) != null) {\n+-     Var var = fnScope.getVar(lastArg.getString());\n+-     if (!referenced.contains(var)) {\n+-       argList.removeChild(lastArg);\n+-       compiler.reportCodeChange();\n+-     } else {\n+-       break;\n+-     }\n++   List<Node> toRemove = Lists.newArrayList();\n++   for (int i = 0; i < argList.getChildCount(); i++) {\n++     Node param = argList.getChildAtIndex(i);\n++     Var var = fnScope.getVar(param.getString());\n++     if (!referenced.contains(var)) {\n++        toRemove.add(param);\n++     }\n++   }\n++   for (Node rem : toRemove) {\n++     argList.removeChild(rem);\n++   }\n++   if (!toRemove.isEmpty()) {\n++     compiler.reportCodeChange();\n+   }\n+ }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}