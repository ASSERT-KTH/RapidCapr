{
    "patch": "            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null) {\n                if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                    field.setAccessible(true);\n                    try {\n                        Object oldValue = field.get(fieldInstance);\n                        field.set(fieldInstance, mockCandidate);\n                        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                            innerField.setAccessible(true);\n                            if (innerField.get(mockCandidate) == oldValue) {\n                                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n                            }\n                        }\n                    } catch (IllegalAccessException e) {\n                        throw new RuntimeException(e);\n                    }\n                } else if (!field.getType().isPrimitive() && !field.getType().isArray()) {\n                    // Check if mockCandidate has exactly one interface\n                    Class<?> mockClass = mockCandidate.getClass();\n                    Set<Class<?>> interfaces = new HashSet<Class<?>>(Arrays.asList(mockClass.getInterfaces()));\n                    interfaces.removeAll(Arrays.asList(mockClass.getSuperclass().getInterfaces()));\n                    if (interfaces.size() == 1) {\n                        Class<?> mockInterface = interfaces.iterator().next();\n                        if (field.getType().isAssignableFrom(mockInterface)) {\n                            Object proxy = Proxy.newProxyInstance(mockCandidate.getClass().getClassLoader(),\n                                    new Class<?>[]{mockInterface}, new InvocationHandler() {\n                                        @Override\n                                        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                                            return mockCandidate.getClass().getMethod(method.getName(), method.getParameterTypes())\n                                                    .invoke(mockCandidate, args);\n                                        }\n                                    });\n                            field.setAccessible(true);\n                            try {\n                                field.set(fieldInstance, proxy);\n                            } catch (IllegalAccessException e) {\n                                throw new RuntimeException(e);\n                            }\n                        }\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..d84903175 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,51 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null) {\n+                if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                    field.setAccessible(true);\n+                    try {\n+                        Object oldValue = field.get(fieldInstance);\n+                        field.set(fieldInstance, mockCandidate);\n+                        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                            innerField.setAccessible(true);\n+                            if (innerField.get(mockCandidate) == oldValue) {\n+                                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n+                            }\n+                        }\n+                    } catch (IllegalAccessException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                } else if (!field.getType().isPrimitive() && !field.getType().isArray()) {\n+                    // Check if mockCandidate has exactly one interface\n+                    Class<?> mockClass = mockCandidate.getClass();\n+                    Set<Class<?>> interfaces = new HashSet<Class<?>>(Arrays.asList(mockClass.getInterfaces()));\n+                    interfaces.removeAll(Arrays.asList(mockClass.getSuperclass().getInterfaces()));\n+                    if (interfaces.size() == 1) {\n+                        Class<?> mockInterface = interfaces.iterator().next();\n+                        if (field.getType().isAssignableFrom(mockInterface)) {\n+                            Object proxy = Proxy.newProxyInstance(mockCandidate.getClass().getClassLoader(),\n+                                    new Class<?>[]{mockInterface}, new InvocationHandler() {\n+                                        @Override\n+                                        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                                            return mockCandidate.getClass().getMethod(method.getName(), method.getParameterTypes())\n+                                                    .invoke(mockCandidate, args);\n+                                        }\n+                                    });\n+                            field.setAccessible(true);\n+                            try {\n+                                field.set(fieldInstance, proxy);\n+                            } catch (IllegalAccessException e) {\n+                                throw new RuntimeException(e);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}