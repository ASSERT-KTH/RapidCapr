{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean wrapField = false;\n        int maxRange = 0, minValue = 0, range = 0;\n        long instant = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {                \n            if (i == fieldIndex) {\n                int curValue = values[i];\n                range = partial.getFieldType(i).getField(iChronology).getRangeDurationField().getMaximumValue();\n                int newValue = FieldUtils.safeAdd(curValue, valueToAdd);\n                maxRange = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n                minValue = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n                if (newValue > maxRange || newValue < minValue) {\n                    wrapField = true;\n                    if (newValue > maxRange) {\n                        newValue -= range;\n                    } else if (newValue < minValue) {\n                        newValue += range;\n                    }\n                }\n                values[i] = newValue;\n            } else {\n                int curValue = values[i];\n                if (wrapField) {\n                    if (i < fieldIndex) {\n                        curValue += maxRange;\n                    } else if (i > fieldIndex) {\n                        curValue += (valueToAdd > 0) ? 1 : -1;\n                    }\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, curValue);\n                wrapField = false;\n            }\n        }\n        instant = iChronology.set(partial, instant);\n        int[] result = iChronology.get(partial, instant);\n\n        int maxDay = 0;\n        try {\n            maxDay = partial.getFieldType(0).getField(iChronology).getMaximumValue(instant);\n        } catch (Exception e) { }\n\n        if (result[0] > maxDay) {\n            int newValue = result[0]-maxDay;\n            int curValue = values[1];\n            result[0] = newValue;\n            result[1] = FieldUtils.safeAdd(curValue, 1);\n        } else if (result[0] < 1) {\n            int newValue = result[0]+maxDay;\n            int curValue = values[1];\n            result[0] = newValue;\n            result[1] = FieldUtils.safeAdd(curValue, -1);\n        }\n\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a6852795 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,68 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean wrapField = false;\n+        int maxRange = 0, minValue = 0, range = 0;\n+        long instant = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {                \n+            if (i == fieldIndex) {\n+                int curValue = values[i];\n+                range = partial.getFieldType(i).getField(iChronology).getRangeDurationField().getMaximumValue();\n+                int newValue = FieldUtils.safeAdd(curValue, valueToAdd);\n+                maxRange = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n+                minValue = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n+                if (newValue > maxRange || newValue < minValue) {\n+                    wrapField = true;\n+                    if (newValue > maxRange) {\n+                        newValue -= range;\n+                    } else if (newValue < minValue) {\n+                        newValue += range;\n+                    }\n+                }\n+                values[i] = newValue;\n+            } else {\n+                int curValue = values[i];\n+                if (wrapField) {\n+                    if (i < fieldIndex) {\n+                        curValue += maxRange;\n+                    } else if (i > fieldIndex) {\n+                        curValue += (valueToAdd > 0) ? 1 : -1;\n+                    }\n+                }\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, curValue);\n+                wrapField = false;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = iChronology.set(partial, instant);\n+        int[] result = iChronology.get(partial, instant);\n+\n+        int maxDay = 0;\n+        try {\n+            maxDay = partial.getFieldType(0).getField(iChronology).getMaximumValue(instant);\n+        } catch (Exception e) { }\n+\n+        if (result[0] > maxDay) {\n+            int newValue = result[0]-maxDay;\n+            int curValue = values[1];\n+            result[0] = newValue;\n+            result[1] = FieldUtils.safeAdd(curValue, 1);\n+        } else if (result[0] < 1) {\n+            int newValue = result[0]+maxDay;\n+            int curValue = values[1];\n+            result[0] = newValue;\n+            result[1] = FieldUtils.safeAdd(curValue, -1);\n+        }\n+\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}