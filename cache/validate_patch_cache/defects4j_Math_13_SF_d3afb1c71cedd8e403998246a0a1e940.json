{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix eigenvectors = dec.getV();\n        final RealMatrix eigenvalues = dec.getD();\n        final int n = m.getRowDimension();\n        final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            final double eigenvalue = eigenvalues.getEntry(i, i);\n            if (eigenvalue < 0) {\n                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n            }\n            sqrtEigenvalues.setEntry(i, i, FastMath.sqrt(eigenvalue));\n        }\n        return eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e6ce70e70 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix eigenvectors = dec.getV();\n+        final RealMatrix eigenvalues = dec.getD();\n+        final int n = m.getRowDimension();\n+        final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            final double eigenvalue = eigenvalues.getEntry(i, i);\n+            if (eigenvalue < 0) {\n+                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+            }\n+            sqrtEigenvalues.setEntry(i, i, FastMath.sqrt(eigenvalue));\n+        }\n+        return eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}