{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    // check if the day is valid for the month and year\n    // if the day is invalid, set to the last day of the month\n    DateTimeFormatter monthFormat = DateTimeFormat.forPattern(\"M\");\n    DateTimeFormatter yearFormat = DateTimeFormat.forPattern(\"y\");\n    String monthString = monthFormat.print(instant);\n    String yearString = yearFormat.print(instant);\n    int month = Integer.parseInt(monthString);\n    int year = Integer.parseInt(yearString);\n    int lastDayOfMonth = chrono.dayOfMonth().getMaximumValue(instantLocal);\n    int day = Integer.parseInt(text.substring(position, position + 2));\n    if (day > lastDayOfMonth) {\n        day = lastDayOfMonth;\n    }\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    String revisedText = String.format(\"%s %d\", monthString, day);\n    if (text.length() > 2) {\n        revisedText += text.substring(2);\n    }\n    int newPos = parser.parseInto(bucket, revisedText, position);\n    instant.setMillis(bucket.computeMillis(false, revisedText));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..8e80db41 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,53 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    \n+    // check if the day is valid for the month and year\n+    // if the day is invalid, set to the last day of the month\n+    DateTimeFormatter monthFormat = DateTimeFormat.forPattern(\"M\");\n+    DateTimeFormatter yearFormat = DateTimeFormat.forPattern(\"y\");\n+    String monthString = monthFormat.print(instant);\n+    String yearString = yearFormat.print(instant);\n+    int month = Integer.parseInt(monthString);\n+    int year = Integer.parseInt(yearString);\n+    int lastDayOfMonth = chrono.dayOfMonth().getMaximumValue(instantLocal);\n+    int day = Integer.parseInt(text.substring(position, position + 2));\n+    if (day > lastDayOfMonth) {\n+        day = lastDayOfMonth;\n+    }\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+    String revisedText = String.format(\"%s %d\", monthString, day);\n+    if (text.length() > 2) {\n+        revisedText += text.substring(2);\n+    }\n+    int newPos = parser.parseInto(bucket, revisedText, position);\n+    instant.setMillis(bucket.computeMillis(false, revisedText));\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": " java.lang.NumberFormatException: For input string: \"1:\"",
    "test_result": "ERROR"
}