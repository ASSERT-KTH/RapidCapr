{
    "patch": "    // The parameters object literal setters can not be removed, nor can destructured default values\n    if (NodeUtil.isGetOrSetKey(function.getParent())\n        || NodeUtil.getFunctionParameters(function).stream().flatMap(param -> {\n          return NodeUtil.getDeclarations(param).stream()\n              .flatMap(decl -> NodeUtil.getOffers(decl).stream())\n              .anyMatch(offer -> offer.isDefaultValue() || offer.isDestructuring()));\n        }).findFirst().isPresent()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d4e1b092 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,13 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // The parameters object literal setters can not be removed, nor can destructured default values\n+    if (NodeUtil.isGetOrSetKey(function.getParent())\n+        || NodeUtil.getFunctionParameters(function).stream().flatMap(param -> {\n+          return NodeUtil.getDeclarations(param).stream()\n+              .flatMap(decl -> NodeUtil.getOffers(decl).stream())\n+              .anyMatch(offer -> offer.isDefaultValue() || offer.isDestructuring()));\n+        }).findFirst().isPresent()) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}