{
    "patch": "if (number == 0) {\n    return \"\";\n}\nif (number < 0) {\n    throw new IllegalArgumentException(\"Negative numbers cannot be represented in mini roman numerals\");\n}\nStringBuilder sb = new StringBuilder(); //use StringBuilder for efficient concatenation\nfor (int j = num.length - 1; j >= 0; j--) {\n    while (number >= num[j]) {\n        sb.append(sym[j]); //append symbol to StringBuilder\n        number -= num[j];\n    }\n}\nreturn sb.toString().toLowerCase(); //convert StringBuilder to string and lowercase the result",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/INT_TO_MINI_ROMAN.java b/src/main/java/humaneval/buggy/INT_TO_MINI_ROMAN.java\nindex 0f3c881..a92a9fb 100644\n--- a/src/main/java/humaneval/buggy/INT_TO_MINI_ROMAN.java\n+++ b/src/main/java/humaneval/buggy/INT_TO_MINI_ROMAN.java\n@@ -19,7 +19,20 @@ public class INT_TO_MINI_ROMAN {\n         int i = 12;\n         String result = \"\";\n         while (number > 0) {\n-            result += sym[i];\n+if (number == 0) {\n+    return \"\";\n+}\n+if (number < 0) {\n+    throw new IllegalArgumentException(\"Negative numbers cannot be represented in mini roman numerals\");\n+}\n+StringBuilder sb = new StringBuilder(); //use StringBuilder for efficient concatenation\n+for (int j = num.length - 1; j >= 0; j--) {\n+    while (number >= num[j]) {\n+        sb.append(sym[j]); //append symbol to StringBuilder\n+        number -= num[j];\n+    }\n+}\n+return sb.toString().toLowerCase(); //convert StringBuilder to string and lowercase the result\n             number %= num[i];\n             i -= 1;\n         }",
    "result_reason": " /tmp/humaneval-INT_TO_MINI_ROMAN/src/main/java/humaneval/buggy/INT_TO_MINI_ROMAN.java:[36,13] unreachable statement",
    "test_result": "ERROR"
}