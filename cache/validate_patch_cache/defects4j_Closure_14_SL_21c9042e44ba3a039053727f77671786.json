{
    "patch": "if (finallyNode == null) {\n  return computeFollowNode(fromNode, parent, cfa);\n} else if (finallyNode.getFirstChild() == null) {\n  return computeFollowNode(fromNode, finallyNode.getNext(), cfa);\n} else {\n  Node firstChildOfFinally = finallyNode.getFirstChild();\n  Node secondChildOfFinally = firstChildOfFinally.getNext();\n  Node afterFinally;\n  if (secondChildOfFinally == null) {\n    afterFinally = finallyNode.getNext();\n  } else if (NodeUtil.isTry(secondChildOfFinally)) {\n    afterFinally = secondChildOfFinally.getFirstChild();\n  } else {\n    afterFinally = secondChildOfFinally;\n  }\n  computeFollowNode(firstChildOfFinally, cfa);\n  cfa.createEdge(firstChildOfFinally, Branch.UNCOND, secondChildOfFinally);\n  cfa.createEdge(secondChildOfFinally, Branch.UNCOND, afterFinally);\n  return computeFollowNode(fromNode, finallyNode.getFirstChild(), cfa);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..7f2a5e8e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,26 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode == null) {\n+  return computeFollowNode(fromNode, parent, cfa);\n+} else if (finallyNode.getFirstChild() == null) {\n+  return computeFollowNode(fromNode, finallyNode.getNext(), cfa);\n+} else {\n+  Node firstChildOfFinally = finallyNode.getFirstChild();\n+  Node secondChildOfFinally = firstChildOfFinally.getNext();\n+  Node afterFinally;\n+  if (secondChildOfFinally == null) {\n+    afterFinally = finallyNode.getNext();\n+  } else if (NodeUtil.isTry(secondChildOfFinally)) {\n+    afterFinally = secondChildOfFinally.getFirstChild();\n+  } else {\n+    afterFinally = secondChildOfFinally;\n+  }\n+  computeFollowNode(firstChildOfFinally, cfa);\n+  cfa.createEdge(firstChildOfFinally, Branch.UNCOND, secondChildOfFinally);\n+  cfa.createEdge(secondChildOfFinally, Branch.UNCOND, afterFinally);\n+  return computeFollowNode(fromNode, finallyNode.getFirstChild(), cfa);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}