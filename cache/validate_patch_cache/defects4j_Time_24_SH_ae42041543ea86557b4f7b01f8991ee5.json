{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year()\n                    && isIso(first) && isIso(savedFields[i].iField.getDurationType())) {\n                int year = savedFields[i].getValue();\n                int isoWeekyear = ISOChronology.getInstanceUTC().weekyear().get(millis);\n                int fieldDifference = year - isoWeekyear;\n                if (fieldDifference != 0) {\n                    millis = ISOChronology.getInstanceUTC().year().add(millis, fieldDifference);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ad9a4a3a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()\n+                    && isIso(first) && isIso(savedFields[i].iField.getDurationType())) {\n+                int year = savedFields[i].getValue();\n+                int isoWeekyear = ISOChronology.getInstanceUTC().weekyear().get(millis);\n+                int fieldDifference = year - isoWeekyear;\n+                if (fieldDifference != 0) {\n+                    millis = ISOChronology.getInstanceUTC().year().add(millis, fieldDifference);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}