{
    "patch": "    private static boolean containsUndefinedProperties(Node n) {\n        Node parent = n.getParent();\n        if (parent != null && parent.isOr() || parent.isAnd()) {\n            return containsUndefinedProperties(parent);\n        } else if (parent == null || n.getJSType() == null || !parent.isAssign()) {\n            return false; \n        } else {\n            // check if the right side of the assignment contains undefined properties\n            Node rhs = parent.getLastChild();\n            CollectPropertiesWithUndefinedValue collector = new CollectPropertiesWithUndefinedValue();\n            NodeTraversal.traverseEs6(compiler, rhs, collector);\n            return collector.propertiesWithUndefinedValue.size() > 0;   \n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}