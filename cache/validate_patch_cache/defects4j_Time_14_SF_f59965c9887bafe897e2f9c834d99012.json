{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial) && ((fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1)) {\n        long instant = 0L;\n        int daysInMonth = iChronology.monthOfYear().getMaximumValue(values[0]);\n        int year = iChronology.year().get(values[0]);\n        int monthOfYear = iChronology.monthOfYear().get(values[0]);\n        int dayOfMonth = iChronology.dayOfMonth().get(values[0]);\n        int hourOfDay = iChronology.hourOfDay().get(values[1]);\n        int minuteOfHour = iChronology.minuteOfHour().get(values[1]);\n        int secondOfMinute = iChronology.secondOfMinute().get(values[1]);\n        int millisOfSecond = iChronology.millisOfSecond().get(values[1]);\n        int newMonthOfYear = iChronology.monthOfYear().add(monthOfYear, valueToAdd);\n        int newYear = year;\n\n        while (newMonthOfYear < 1) {\n            newMonthOfYear += 12;\n            newYear -= 1;\n        }\n\n        while (newMonthOfYear > 12) {\n            newMonthOfYear -= 12;\n            newYear += 1;\n        }\n\n        int newDayOfMonth = Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(newYear, newMonthOfYear));\n        if (newDayOfMonth < dayOfMonth) {\n            // the maximum day-of-month must be reduced and re-calculated if it is less than the day-of-month.\n            daysInMonth = newDayOfMonth - 1;\n        }\n        instant = iChronology.year().set(0L, newYear);\n        instant = iChronology.monthOfYear().set(instant, newMonthOfYear);\n        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n        instant = iChronology.hourOfDay().set(instant, hourOfDay);\n        instant = iChronology.minuteOfHour().set(instant, minuteOfHour);\n        instant = iChronology.secondOfMinute().set(instant, secondOfMinute);\n        instant = iChronology.millisOfSecond().set(instant, millisOfSecond);\n        if (daysInMonth >= iChronology.dayOfMonth().getMaximumValue(instant)) {\n            instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..147b3f24 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,56 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial) && ((fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1)) {\n+        long instant = 0L;\n+        int daysInMonth = iChronology.monthOfYear().getMaximumValue(values[0]);\n+        int year = iChronology.year().get(values[0]);\n+        int monthOfYear = iChronology.monthOfYear().get(values[0]);\n+        int dayOfMonth = iChronology.dayOfMonth().get(values[0]);\n+        int hourOfDay = iChronology.hourOfDay().get(values[1]);\n+        int minuteOfHour = iChronology.minuteOfHour().get(values[1]);\n+        int secondOfMinute = iChronology.secondOfMinute().get(values[1]);\n+        int millisOfSecond = iChronology.millisOfSecond().get(values[1]);\n+        int newMonthOfYear = iChronology.monthOfYear().add(monthOfYear, valueToAdd);\n+        int newYear = year;\n+\n+        while (newMonthOfYear < 1) {\n+            newMonthOfYear += 12;\n+            newYear -= 1;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+        while (newMonthOfYear > 12) {\n+            newMonthOfYear -= 12;\n+            newYear += 1;\n         }\n+\n+        int newDayOfMonth = Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(newYear, newMonthOfYear));\n+        if (newDayOfMonth < dayOfMonth) {\n+            // the maximum day-of-month must be reduced and re-calculated if it is less than the day-of-month.\n+            daysInMonth = newDayOfMonth - 1;\n+        }\n+        instant = iChronology.year().set(0L, newYear);\n+        instant = iChronology.monthOfYear().set(instant, newMonthOfYear);\n+        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+        instant = iChronology.hourOfDay().set(instant, hourOfDay);\n+        instant = iChronology.minuteOfHour().set(instant, minuteOfHour);\n+        instant = iChronology.secondOfMinute().set(instant, secondOfMinute);\n+        instant = iChronology.millisOfSecond().set(instant, millisOfSecond);\n+        if (daysInMonth >= iChronology.dayOfMonth().getMaximumValue(instant)) {\n+            instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}