{
    "patch": "  private void addConstructorWithoutNewWarning(Node n, Node parent, Node prop, List<JSError> warnings) {\n    if (!NodeUtil.isStatement(n)) {\n      return;\n    }\n\n    Node firstInBlock = NodeUtil.getEnclosingBlock(n).getFirstChild();\n    if (firstInBlock != null && !firstInBlock.isFunction()) {\n      // We don't warn for object literals, etc.\n      return;\n    }\n\n    if (parent != null && parent.isCall() && n == parent.getFirstChild()\n        && NodeUtil.isCtorFunction(parent)) {\n      // Ignore the case where a constructor is called with \"new\" immediately.\n      // (i.e. \"new foo()\")\n      return;\n    }\n\n    if (n.getJSType() == null && parent.isAssign()) {\n      warnings.add(JSError.make(prop, CTOR_WITHOUT_NEW_ERROR, \"\"));\n      return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}