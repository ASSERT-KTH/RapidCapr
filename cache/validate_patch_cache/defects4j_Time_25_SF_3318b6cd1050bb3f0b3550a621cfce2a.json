{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // calculate initial offset and adjusted instant\n    int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal + initialOffset;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    // check if we have passed a DST transition; if so, need to adjust the instant\n    if (initialOffset >= 0) {\n        if (offsetAdjusted < initialOffset && isTransitionGap(instantAdjusted)) {\n            // we have just passed a DST boundary, and have landed in a \"gap\"\n            // need to adjust the instant to the next valid time\n            instantAdjusted = nextTransition(instantAdjusted);\n            offsetAdjusted = getOffset(instantAdjusted);\n        }\n    } else {\n        if (offsetAdjusted >= 0 || isTransitionOverlap(instantAdjusted)) {\n            // we have passed a DST boundary, and have landed in an ambiguous local time\n            // need to adjust the instant to the first valid time after the transition\n            instantAdjusted = previousTransition(instantAdjusted);\n            offsetAdjusted = getOffset(instantAdjusted);\n        }\n    }\n\n    // return the difference between the initial offset and the offset at the adjusted instant\n    return initialOffset - offsetAdjusted;\n}\n\nprivate boolean isTransitionGap(long instant) {\n    int offsetBefore = getOffset(instant - 1);\n    int offsetAfter = getOffset(instant + 1);\n    return offsetBefore > offsetAfter;\n}\n\nprivate boolean isTransitionOverlap(long instant) {\n    int offsetBefore = getOffset(instant - 1);\n    int offsetAfter = getOffset(instant + 1);\n    return offsetBefore != offsetAfter;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..876c5d53 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // calculate initial offset and adjusted instant\n+    int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal + initialOffset;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // check if we have passed a DST transition; if so, need to adjust the instant\n+    if (initialOffset >= 0) {\n+        if (offsetAdjusted < initialOffset && isTransitionGap(instantAdjusted)) {\n+            // we have just passed a DST boundary, and have landed in a \"gap\"\n+            // need to adjust the instant to the next valid time\n+            instantAdjusted = nextTransition(instantAdjusted);\n+            offsetAdjusted = getOffset(instantAdjusted);\n+        }\n+    } else {\n+        if (offsetAdjusted >= 0 || isTransitionOverlap(instantAdjusted)) {\n+            // we have passed a DST boundary, and have landed in an ambiguous local time\n+            // need to adjust the instant to the first valid time after the transition\n+            instantAdjusted = previousTransition(instantAdjusted);\n+            offsetAdjusted = getOffset(instantAdjusted);\n         }\n-        return offsetAdjusted;\n     }\n \n+    // return the difference between the initial offset and the offset at the adjusted instant\n+    return initialOffset - offsetAdjusted;\n+}\n+\n+private boolean isTransitionGap(long instant) {\n+    int offsetBefore = getOffset(instant - 1);\n+    int offsetAfter = getOffset(instant + 1);\n+    return offsetBefore > offsetAfter;\n+}\n+\n+private boolean isTransitionOverlap(long instant) {\n+    int offsetBefore = getOffset(instant - 1);\n+    int offsetAfter = getOffset(instant + 1);\n+    return offsetBefore != offsetAfter;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T12:00:00.000",
    "test_result": "FAIL"
}