{
    "patch": "    List<JSRequire> requires = new ArrayList<JSRequire>();\n    for (CompilerInput input : inputs) {\n      requires.addAll(input.getRequires());\n    }\n    Map<String, String> provideMap = calculateProvideMap();\n    ModuleLoader.ModulePathResolver modulePathResolver = options.dependencyOptions\n        .getPathResolver();\n    List<SourceFile> requireInputs = new ArrayList<SourceFile>();\n    for (JSRequire require : requires) {\n      String namespace = require.getNamespace();\n      String path = require.getPath();\n      String target = provideMap.get(namespace);\n      if (target == null) {\n        report(JSError.make(\n            MISSING_MODULE_OR_PROVIDE, namespace + \" used but not provided.\"));\n        if (hasErrors()) {\n          return null; // NOPMD\n        }\n        continue;\n      }\n      String resolvedPath = modulePathResolver.resolve(\n          path, PathUtil.getParent(target));\n      CompilerInput depInput = inputsByName.get(resolvedPath);\n      if (depInput == null) {\n        report(JSError.make(\n            MISSING_MODULE_OR_PROVIDE,\n            namespace + \" missing input: \" + resolvedPath));\n        if (hasErrors()) {\n          return null; // NOPMD\n        }\n        continue;\n      }\n      requireInputs.add(depInput.getSourceFile());\n    }\n\n    for (CompilerInput input : inputs) {\n      // Forward-declare all the provided types, so that they\n      // are not flagged even if they are dropped from the process.\n      for (String provide : input.getProvides()) {\n        getTypeRegistry().forwardDeclareType(provide);\n      }\n    }\n\n    if (options.dependencyOptions != null &&\n        options.dependencyOptions.needsManagement()) {\n      try {\n        inputs =\n            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n                .manageDependencies(options.dependencyOptions, inputs);\n      } catch (CircularDependencyException e) {\n        report(JSError.make(\n            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      } catch (MissingProvideException e) {\n        report(JSError.make(\n            MISSING_ENTRY_ERROR, e.getMessage()));\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n\n    if (options.closurePass) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77f..fbb6f874 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,75 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+    List<JSRequire> requires = new ArrayList<JSRequire>();\n+    for (CompilerInput input : inputs) {\n+      requires.addAll(input.getRequires());\n+    }\n+    Map<String, String> provideMap = calculateProvideMap();\n+    ModuleLoader.ModulePathResolver modulePathResolver = options.dependencyOptions\n+        .getPathResolver();\n+    List<SourceFile> requireInputs = new ArrayList<SourceFile>();\n+    for (JSRequire require : requires) {\n+      String namespace = require.getNamespace();\n+      String path = require.getPath();\n+      String target = provideMap.get(namespace);\n+      if (target == null) {\n+        report(JSError.make(\n+            MISSING_MODULE_OR_PROVIDE, namespace + \" used but not provided.\"));\n+        if (hasErrors()) {\n+          return null; // NOPMD\n+        }\n+        continue;\n+      }\n+      String resolvedPath = modulePathResolver.resolve(\n+          path, PathUtil.getParent(target));\n+      CompilerInput depInput = inputsByName.get(resolvedPath);\n+      if (depInput == null) {\n+        report(JSError.make(\n+            MISSING_MODULE_OR_PROVIDE,\n+            namespace + \" missing input: \" + resolvedPath));\n+        if (hasErrors()) {\n+          return null; // NOPMD\n+        }\n+        continue;\n+      }\n+      requireInputs.add(depInput.getSourceFile());\n+    }\n+\n+    for (CompilerInput input : inputs) {\n+      // Forward-declare all the provided types, so that they\n+      // are not flagged even if they are dropped from the process.\n+      for (String provide : input.getProvides()) {\n+        getTypeRegistry().forwardDeclareType(provide);\n+      }\n+    }\n+\n+    if (options.dependencyOptions != null &&\n+        options.dependencyOptions.needsManagement()) {\n+      try {\n+        inputs =\n+            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n+                .manageDependencies(options.dependencyOptions, inputs);\n+      } catch (CircularDependencyException e) {\n+        report(JSError.make(\n+            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n+\n+        // If in IDE mode, we ignore the error and keep going.\n+        if (hasErrors()) {\n+          return null;\n+        }\n+      } catch (MissingProvideException e) {\n+        report(JSError.make(\n+            MISSING_ENTRY_ERROR, e.getMessage()));\n+\n+        // If in IDE mode, we ignore the error and keep going.\n+        if (hasErrors()) {\n+          return null;\n+        }\n+      }\n+    }\n+\n+    if (options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}