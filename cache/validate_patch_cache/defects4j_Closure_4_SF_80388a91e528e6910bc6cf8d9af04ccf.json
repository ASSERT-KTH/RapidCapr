{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n    boolean resolvedViaRegistry = false;\n    boolean implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n    if (implicitPrototypeCycleDetected) {\n      handleTypeCycle(errorReporter);\n    }\n    if (!isResolved()) {\n      resolvedViaRegistry = resolveViaRegistry(errorReporter, enclosing);\n      if (!resolvedViaRegistry) {\n        resolveViaProperties(errorReporter, enclosing);\n        implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n        if (implicitPrototypeCycleDetected) {\n          handleTypeCycle(errorReporter);\n        }\n      }\n    }\n    super.resolveInternal(errorReporter, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry != null && registry.isLastGeneration() ? \n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..325ad1ac 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,33 +181,27 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n+    boolean resolvedViaRegistry = false;\n+    boolean implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n+    if (implicitPrototypeCycleDetected) {\n+      handleTypeCycle(errorReporter);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (!isResolved()) {\n+      resolvedViaRegistry = resolveViaRegistry(errorReporter, enclosing);\n+      if (!resolvedViaRegistry) {\n+        resolveViaProperties(errorReporter, enclosing);\n+        implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n+        if (implicitPrototypeCycleDetected) {\n+          handleTypeCycle(errorReporter);\n+        }\n+      }\n     }\n-\n-    super.resolveInternal(t, enclosing);\n+    super.resolveInternal(errorReporter, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n+    return registry != null && registry.isLastGeneration() ? \n         getReferencedType() : this;\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ong;",
    "test_result": "FAIL"
}