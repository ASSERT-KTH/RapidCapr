{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix sqrtm = dec.getSquareRoot();\n        final double[] realSqrt = new double[sqrtm.getRowDimension() * sqrtm.getColumnDimension()];\n        int k = 0;\n        for(int i = 0; i < sqrtm.getRowDimension(); i++) {\n            for(int j = 0; j < sqrtm.getColumnDimension(); j++) {\n                double value = sqrtm.getEntry(i, j);\n                if(value < 0) {\n                    realSqrt[k++] = 0;\n                } else {\n                    realSqrt[k++] = FastMath.sqrt(value);\n                }\n            }\n        }\n        return MatrixUtils.createRealMatrix(realSqrt, sqrtm.getRowDimension());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b88f99f87 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix sqrtm = dec.getSquareRoot();\n+        final double[] realSqrt = new double[sqrtm.getRowDimension() * sqrtm.getColumnDimension()];\n+        int k = 0;\n+        for(int i = 0; i < sqrtm.getRowDimension(); i++) {\n+            for(int j = 0; j < sqrtm.getColumnDimension(); j++) {\n+                double value = sqrtm.getEntry(i, j);\n+                if(value < 0) {\n+                    realSqrt[k++] = 0;\n+                } else {\n+                    realSqrt[k++] = FastMath.sqrt(value);\n+                }\n+            }\n+        }\n+        return MatrixUtils.createRealMatrix(realSqrt, sqrtm.getRowDimension());\n     }\n }",
    "result_reason": "error: no suitable method found for createRealMatrix(double[],int)",
    "test_result": "ERROR"
}