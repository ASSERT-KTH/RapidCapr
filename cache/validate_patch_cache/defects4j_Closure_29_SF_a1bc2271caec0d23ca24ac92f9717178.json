{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node node = ref.getNode();\n    Node parent = ref.getParent();\n    Node grandparent = ref.getGrandparent();\n\n    // We should not inline object literals if they are used as operands\n    // in inequality, instanceof, or 'in' binary expressions.\n    if (parent.isIn() || parent.isInstanceOf() || parent.isAnd() || parent.isOr()) {\n      return false;\n    }\n\n    // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this').\n    if (parent.isGetProp() || parent.isGetElem()) {\n      if (parent.getFirstChild() == node) {\n        if (grandparent.isCall()\n            && grandparent.getFirstChild() == parent) {\n          // A call target maybe using the object as a 'this' value.\n          return false;\n        }\n        continue;\n      }\n    }\n\n    if (!isVarOrAssignExprLhs(node)) {\n      // Only rewrite VAR declarations or simple assignment statements\n      return false;\n    }\n\n    Node value = ref.getAssignedValue();\n    if (value == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    if (!value.isObjectLit()) {\n      // We're looking for object literal assignments only.\n      return false;\n    }\n\n    // If the object literal has a self-reference within its properties,\n    // we should not inline it since it creates a circular reference.\n    if (referencesItselfWithinObjectLiteral(value, refs)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nprivate boolean referencesItselfWithinObjectLiteral(Node objectLiteral, List<Reference> refs) {\n  Set<Node> visitedNodes = new HashSet<>();\n  Deque<Node> nodesToVisit = new ArrayDeque<>();\n\n  // Initialize the stack with the children of the object literal node.\n  for (Node child = objectLiteral.getFirstChild(); child != null; child = child.getNext()) {\n    nodesToVisit.offer(child);\n  }\n\n  // Do a depth-first search of the object literal's properties.\n  while (!nodesToVisit.isEmpty()) {\n    Node node = nodesToVisit.poll();\n\n    // If the node has already been visited, that means we've seen this circular reference before.\n    if (visitedNodes.contains(node)) {\n      return true;\n    }\n\n    visitedNodes.add(node);\n\n    if (node.isObjectLit()) {\n      // If the node is itself an object literal, we need to add its children to the stack to explore them later.\n      for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n        nodesToVisit.offer(child);\n      }\n    } else {\n      // If the node is not an object, then check if any of its ancestors within the object literal are the parent of any passed-in references.\n      for (Reference ref : refs) {\n        Node refNode = ref.getParent();\n        while (refNode != null && refNode.getParent() != objectLiteral) {\n          if (refNode == node) {\n            return true;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..01805b61 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,99 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node node = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node grandparent = ref.getGrandparent();\n+\n+    // We should not inline object literals if they are used as operands\n+    // in inequality, instanceof, or 'in' binary expressions.\n+    if (parent.isIn() || parent.isInstanceOf() || parent.isAnd() || parent.isOr()) {\n+      return false;\n+    }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n+    // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this').\n+    if (parent.isGetProp() || parent.isGetElem()) {\n+      if (parent.getFirstChild() == node) {\n+        if (grandparent.isCall()\n+            && grandparent.getFirstChild() == parent) {\n+          // A call target maybe using the object as a 'this' value.\n+          return false;\n         }\n+        continue;\n+      }\n+    }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+    if (!isVarOrAssignExprLhs(node)) {\n+      // Only rewrite VAR declarations or simple assignment statements\n+      return false;\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+    Node value = ref.getAssignedValue();\n+    if (value == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    if (!value.isObjectLit()) {\n+      // We're looking for object literal assignments only.\n+      return false;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    // If the object literal has a self-reference within its properties,\n+    // we should not inline it since it creates a circular reference.\n+    if (referencesItselfWithinObjectLiteral(value, refs)) {\n+      return false;\n+    }\n \n+    return true;\n+  }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+  return false;\n+}\n+\n+private boolean referencesItselfWithinObjectLiteral(Node objectLiteral, List<Reference> refs) {\n+  Set<Node> visitedNodes = new HashSet<>();\n+  Deque<Node> nodesToVisit = new ArrayDeque<>();\n \n+  // Initialize the stack with the children of the object literal node.\n+  for (Node child = objectLiteral.getFirstChild(); child != null; child = child.getNext()) {\n+    nodesToVisit.offer(child);\n+  }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+  // Do a depth-first search of the object literal's properties.\n+  while (!nodesToVisit.isEmpty()) {\n+    Node node = nodesToVisit.poll();\n+\n+    // If the node has already been visited, that means we've seen this circular reference before.\n+    if (visitedNodes.contains(node)) {\n+      return true;\n+    }\n+\n+    visitedNodes.add(node);\n+\n+    if (node.isObjectLit()) {\n+      // If the node is itself an object literal, we need to add its children to the stack to explore them later.\n+      for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+        nodesToVisit.offer(child);\n+      }\n+    } else {\n+      // If the node is not an object, then check if any of its ancestors within the object literal are the parent of any passed-in references.\n+      for (Reference ref : refs) {\n+        Node refNode = ref.getParent();\n+        while (refNode != null && refNode.getParent() != objectLiteral) {\n+          if (refNode == node) {\n+            return true;\n+          }\n+          refNode = refNode.getParent();\n+        }\n       }\n-      return ret;\n     }\n+  }\n+\n+  return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}