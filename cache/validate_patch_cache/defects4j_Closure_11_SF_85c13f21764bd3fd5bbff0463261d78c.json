{
    "patch": "public String getProp(String propName, String defaultValue) {\n   try {\n      String propValue = System.getProperty(propName);\n      if (propValue == null || propValue.trim().length() == 0) {\n         return defaultValue;\n      }\n      return propValue.trim();\n   } catch (Exception ex) {\n      System.err.println(\"Error reading system property: \" + propName);\n      return defaultValue;\n   } catch (Error err) {\n      System.err.println(\"Error reading system property: \" + propName);\n      return defaultValue;\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..8897eb48 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String propName, String defaultValue) {\n+   try {\n+      String propValue = System.getProperty(propName);\n+      if (propValue == null || propValue.trim().length() == 0) {\n+         return defaultValue;\n+      }\n+      return propValue.trim();\n+   } catch (Exception ex) {\n+      System.err.println(\"Error reading system property: \" + propName);\n+      return defaultValue;\n+   } catch (Error err) {\n+      System.err.println(\"Error reading system property: \" + propName);\n+      return defaultValue;\n+   }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}