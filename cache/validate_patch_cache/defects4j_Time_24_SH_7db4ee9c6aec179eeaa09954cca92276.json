{
    "patch": "    private long handleUnknownValue(IllegalFieldValueException e, SavedField[] savedFields, int count, long millis) {\n        if (count == 0 || iStrict == false) {\n            throw e;\n        }\n        DurationField years = DurationFieldType.years().getField(iChrono);\n        DurationField weekYears = DurationFieldType.weekyears().getField(iChrono);\n        int yearIndex = -1, weekyearIndex = -1;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (field instanceof SkipDateTimeField) {\n                field = ((SkipDateTimeField)field).getWrappedField();\n            }\n            if (years == field.getDurationField()) {\n                yearIndex = i;\n            } else if (weekYears == field.getDurationField()) {\n                weekyearIndex = i;\n            }\n        }\n        if (weekyearIndex > 0) {\n            if (yearIndex < 0) {\n                throw e;\n            }\n            copy(savedFields, weekyearIndex, count, 1);\n            SavedField sf = savedFields[weekyearIndex - 1];\n            savedFields[weekyearIndex] = new SavedField(years.getField(iChrono),\n                            sf.iValue / 52);\n            savedFields[weekyearIndex - 1] = new SavedField(sf.iField, sf.iValue % 52);\n            count++;\n            sort(savedFields, count);\n            return computeMillis(false, null);\n        }\n        throw e;\n    }\n\n    private void copy(SavedField[] savedFields, int from, int to, int step) {\n        for (int i = from; i < savedFields.length; i += step) {\n            savedFields[i] = savedFields[to++];",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..99e0b163 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    private long handleUnknownValue(IllegalFieldValueException e, SavedField[] savedFields, int count, long millis) {\n+        if (count == 0 || iStrict == false) {\n+            throw e;\n+        }\n+        DurationField years = DurationFieldType.years().getField(iChrono);\n+        DurationField weekYears = DurationFieldType.weekyears().getField(iChrono);\n+        int yearIndex = -1, weekyearIndex = -1;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (field instanceof SkipDateTimeField) {\n+                field = ((SkipDateTimeField)field).getWrappedField();\n+            }\n+            if (years == field.getDurationField()) {\n+                yearIndex = i;\n+            } else if (weekYears == field.getDurationField()) {\n+                weekyearIndex = i;\n+            }\n+        }\n+        if (weekyearIndex > 0) {\n+            if (yearIndex < 0) {\n+                throw e;\n+            }\n+            copy(savedFields, weekyearIndex, count, 1);\n+            SavedField sf = savedFields[weekyearIndex - 1];\n+            savedFields[weekyearIndex] = new SavedField(years.getField(iChrono),\n+                            sf.iValue / 52);\n+            savedFields[weekyearIndex - 1] = new SavedField(sf.iField, sf.iValue % 52);\n+            count++;\n+            sort(savedFields, count);\n+            return computeMillis(false, null);\n+        }\n+        throw e;\n+    }\n+\n+    private void copy(SavedField[] savedFields, int from, int to, int step) {\n+        for (int i = from; i < savedFields.length; i += step) {\n+            savedFields[i] = savedFields[to++];\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}