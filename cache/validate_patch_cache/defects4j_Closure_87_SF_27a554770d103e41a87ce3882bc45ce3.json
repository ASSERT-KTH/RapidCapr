{
    "patch": "private static boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node cur = n.getFirstChild();\n    while (cur != null) {\n      if (NodeUtil.isExpressionNode(cur)) {\n        if (cur.getType() == Token.ASSIGN) {\n          return false;\n        } else if (cur.getType() == Token.RETURN) {\n          return isFoldableExpressBlock(cur);\n        } else if (!isSimpleExpression(cur)) {\n          return false;\n        }\n      }\n      cur = cur.getNext();\n    }\n    return true;\n  }\n\n  return false;\n}\n\nprivate static boolean isSimpleExpression(Node n) {\n  int type = n.getType();\n  if (type == Token.ARRAYLIT ||\n      type == Token.OBJECTLIT ||\n      type == Token.NOT ||\n      type == Token.INSTANCEOF ||\n      type == Token.TYPEOF ||\n      type == Token.VOID ||\n      type == Token.COMMA ||\n      type == Token.ADD ||\n      type == Token.SUB ||\n      type == Token.BITNOT) {\n    return false; // These should have already been catched.\n  }\n  if (n.isUnary()) {\n    return isSimpleExpression(n.getFirstChild());\n  }\n  if (type == Token.HOOK) {\n    return isSimpleExpression(n.getSecondChild()) && isSimpleExpression(n.getLastChild());\n  }\n  switch (type) {\n    case Token.TRUE:\n    case Token.FALSE:\n    case Token.NULL:\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.NAME:\n      return true;\n    case Token.GETPROP:\n      return isSimpleExpression(n.getFirstChild()) && isSimpleExpression(n.getLastChild());\n    case Token.CALL:\n      Node callee = n.getFirstChild();\n      while (callee.getType() == Token.GETPROP) {\n        callee = callee.getLastChild();\n      }\n      String name = callee.getString();\n      if (name.equals(\"String\") || name.equals(\"Number\") || name.equals(\"Object\") || \n          name.equals(\"Array\") || name.equals(\"Math\") || name.equals(\"RegExp\")) {\n        return true;\n      }\n      return callee.getType() == Token.NAME;\n    case Token.NEW:\n      Node constructor = n.getFirstChild();\n      String ctorName = constructor.getString();\n      return ctorName.equals(\"String\") || ctorName.equals(\"Number\") || ctorName.equals(\"Object\") || \n             ctorName.equals(\"Array\") || ctorName.equals(\"Boolean\") || ctorName.equals(\"RegExp\");\n    default:\n      return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..44980350 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,77 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private static boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node cur = n.getFirstChild();\n+    while (cur != null) {\n+      if (NodeUtil.isExpressionNode(cur)) {\n+        if (cur.getType() == Token.ASSIGN) {\n+          return false;\n+        } else if (cur.getType() == Token.RETURN) {\n+          return isFoldableExpressBlock(cur);\n+        } else if (!isSimpleExpression(cur)) {\n+          return false;\n+        }\n       }\n+      cur = cur.getNext();\n     }\n+    return true;\n+  }\n \n-    return false;\n+  return false;\n+}\n+\n+private static boolean isSimpleExpression(Node n) {\n+  int type = n.getType();\n+  if (type == Token.ARRAYLIT ||\n+      type == Token.OBJECTLIT ||\n+      type == Token.NOT ||\n+      type == Token.INSTANCEOF ||\n+      type == Token.TYPEOF ||\n+      type == Token.VOID ||\n+      type == Token.COMMA ||\n+      type == Token.ADD ||\n+      type == Token.SUB ||\n+      type == Token.BITNOT) {\n+    return false; // These should have already been catched.\n+  }\n+  if (n.isUnary()) {\n+    return isSimpleExpression(n.getFirstChild());\n   }\n+  if (type == Token.HOOK) {\n+    return isSimpleExpression(n.getSecondChild()) && isSimpleExpression(n.getLastChild());\n+  }\n+  switch (type) {\n+    case Token.TRUE:\n+    case Token.FALSE:\n+    case Token.NULL:\n+    case Token.STRING:\n+    case Token.NUMBER:\n+    case Token.NAME:\n+      return true;\n+    case Token.GETPROP:\n+      return isSimpleExpression(n.getFirstChild()) && isSimpleExpression(n.getLastChild());\n+    case Token.CALL:\n+      Node callee = n.getFirstChild();\n+      while (callee.getType() == Token.GETPROP) {\n+        callee = callee.getLastChild();\n+      }\n+      String name = callee.getString();\n+      if (name.equals(\"String\") || name.equals(\"Number\") || name.equals(\"Object\") || \n+          name.equals(\"Array\") || name.equals(\"Math\") || name.equals(\"RegExp\")) {\n+        return true;\n+      }\n+      return callee.getType() == Token.NAME;\n+    case Token.NEW:\n+      Node constructor = n.getFirstChild();\n+      String ctorName = constructor.getString();\n+      return ctorName.equals(\"String\") || ctorName.equals(\"Number\") || ctorName.equals(\"Object\") || \n+             ctorName.equals(\"Array\") || ctorName.equals(\"Boolean\") || ctorName.equals(\"RegExp\");\n+    default:\n+      return false;\n+  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}