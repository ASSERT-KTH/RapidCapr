{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Node fnNode = null;\n    scope = functionNode;\n    int functionType = functionNode.getFunctionType();\n\n    if (functionType == FunctionNode.FUNCTION_EXPRESSION ||\n            functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ||\n            functionType == FunctionNode.SETTER ||\n            functionType == FunctionNode.GETTER) {\n        fnNode = newNode(Token.FUNCTION);\n        addNameProperties(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getParams()));\n        transplantTypeAnnotations(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getBody()));\n        patchUpDestructuringResult(functionNode, fnNode);\n        if (functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {\n            Node exprStmt = newNode(Token.EXPR_RESULT, fnNode);\n            patchProp(fnNode, Node.NO_IN, Boolean.TRUE);\n            fnNode = exprStmt;\n        } else {\n            patchProp(fnNode, Node.IS_EXPRESSION, Boolean.TRUE);\n            if (functionNode.getParenthesized()) {\n                fnNode.putProp(Node.PARENTHESIZED_CALL, Boolean.TRUE);\n            }\n        }\n        fnNode = patchFunctionLength(functionNode, fnNode);\n\n    } else if (functionType == FunctionNode.FUNCTION_STATEMENT) {\n        fnNode = newNode(Token.FUNCTION);\n        addNameProperties(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getParams()));\n        transplantTypeAnnotations(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getBody()));\n        patchUpDestructuringResult(functionNode, fnNode);\n        fnNode.putProp(Node.STATEMENT_TYPE, Integer.valueOf(Token.FUNCTION));\n\n    } else if (functionType == FunctionNode.ARROW_FUNCTION) {\n        List<AstNode> params = functionNode.getParams();\n        Node arrowFnNode;\n        if (params.size() == 1 && params.get(0) instanceof DestructuringForm) {\n            DestructuringForm firstFormalParameter = (DestructuringForm) params.get(0);\n            arrowFnNode = new Node(Token.PARAM_LIST, transform(firstFormalParameter.getLeft()));\n        } else {\n            arrowFnNode = new Node(Token.PARAM_LIST);\n            arrowFnNode.addChildrenToBack(transform(functionNode.getParams()));\n        }\n        arrowFnNode.putProp(Node.IS_ARROW_FUNCTION, Boolean.TRUE);\n        arrowFnNode.putProp(Node.FUNCTION_PROP, functionNode);\n        arrowFnNode.addChildToBack(transform(functionNode.getBody()));\n        arrowFnNode.putProp(Node.DESTRUCTURING_PARAMS, functionNode.getHasParamSemi());\n\n        int line = functionNode.getLineno();\n        ast = null;\n        int tempCount = compiler.getNodeForCodeInsertion(null);\n        if (functionNode.getReturnType() != null) {\n            switch (functionNode.getReturnType().getType()) {\n                case Token.NAME:\n                    arrowFnNode.putProp(Node.RETURN_TYPE, functionNode.getReturnType().getString());\n                    break;\n                case Token.LP:\n                    formatter.init(functionNode.getSourceName(), functionNode.getSource(), line, functionNode.getFunctionName() != null);\n                    Node returnType = formatter.parse(functionNode.getReturnType().toSource());\n                    arrowFnNode.putProp(Node.RETURN_TYPE, functionNode.getReturnType().toSource());\n                    formatter.addCustomNodes(arrowFnNode, returnType);\n                    break;\n                default:\n                    report(\n                            \"Invalid type for arrow function return type\",\n                            functionNode.getLineno(),\n                            functionNode.getLength());\n                    break;\n            }\n        }\n        ast = null;\n        compiler.removeNodeForCodeInsertion(tempCount);\n        fnNode = arrowFnNode;\n\n    } else {\n        throw new IllegalArgumentException(\"Unsupported function type: \" + functionType);\n    }\n    scope = scope.getParent();\n    return fnNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..1e932f71 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,90 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n-\n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Node fnNode = null;\n+    scope = functionNode;\n+    int functionType = functionNode.getFunctionType();\n+\n+    if (functionType == FunctionNode.FUNCTION_EXPRESSION ||\n+            functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ||\n+            functionType == FunctionNode.SETTER ||\n+            functionType == FunctionNode.GETTER) {\n+        fnNode = newNode(Token.FUNCTION);\n+        addNameProperties(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getParams()));\n+        transplantTypeAnnotations(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getBody()));\n+        patchUpDestructuringResult(functionNode, fnNode);\n+        if (functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {\n+            Node exprStmt = newNode(Token.EXPR_RESULT, fnNode);\n+            patchProp(fnNode, Node.NO_IN, Boolean.TRUE);\n+            fnNode = exprStmt;\n+        } else {\n+            patchProp(fnNode, Node.IS_EXPRESSION, Boolean.TRUE);\n+            if (functionNode.getParenthesized()) {\n+                fnNode.putProp(Node.PARENTHESIZED_CALL, Boolean.TRUE);\n+            }\n+        }\n+        fnNode = patchFunctionLength(functionNode, fnNode);\n+\n+    } else if (functionType == FunctionNode.FUNCTION_STATEMENT) {\n+        fnNode = newNode(Token.FUNCTION);\n+        addNameProperties(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getParams()));\n+        transplantTypeAnnotations(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getBody()));\n+        patchUpDestructuringResult(functionNode, fnNode);\n+        fnNode.putProp(Node.STATEMENT_TYPE, Integer.valueOf(Token.FUNCTION));\n+\n+    } else if (functionType == FunctionNode.ARROW_FUNCTION) {\n+        List<AstNode> params = functionNode.getParams();\n+        Node arrowFnNode;\n+        if (params.size() == 1 && params.get(0) instanceof DestructuringForm) {\n+            DestructuringForm firstFormalParameter = (DestructuringForm) params.get(0);\n+            arrowFnNode = new Node(Token.PARAM_LIST, transform(firstFormalParameter.getLeft()));\n+        } else {\n+            arrowFnNode = new Node(Token.PARAM_LIST);\n+            arrowFnNode.addChildrenToBack(transform(functionNode.getParams()));\n+        }\n+        arrowFnNode.putProp(Node.IS_ARROW_FUNCTION, Boolean.TRUE);\n+        arrowFnNode.putProp(Node.FUNCTION_PROP, functionNode);\n+        arrowFnNode.addChildToBack(transform(functionNode.getBody()));\n+        arrowFnNode.putProp(Node.DESTRUCTURING_PARAMS, functionNode.getHasParamSemi());\n+\n+        int line = functionNode.getLineno();\n+        ast = null;\n+        int tempCount = compiler.getNodeForCodeInsertion(null);\n+        if (functionNode.getReturnType() != null) {\n+            switch (functionNode.getReturnType().getType()) {\n+                case Token.NAME:\n+                    arrowFnNode.putProp(Node.RETURN_TYPE, functionNode.getReturnType().getString());\n+                    break;\n+                case Token.LP:\n+                    formatter.init(functionNode.getSourceName(), functionNode.getSource(), line, functionNode.getFunctionName() != null);\n+                    Node returnType = formatter.parse(functionNode.getReturnType().toSource());\n+                    arrowFnNode.putProp(Node.RETURN_TYPE, functionNode.getReturnType().toSource());\n+                    formatter.addCustomNodes(arrowFnNode, returnType);\n+                    break;\n+                default:\n+                    report(\n+                            \"Invalid type for arrow function return type\",\n+                            functionNode.getLineno(),\n+                            functionNode.getLength());\n+                    break;\n+            }\n+        }\n+        ast = null;\n+        compiler.removeNodeForCodeInsertion(tempCount);\n+        fnNode = arrowFnNode;\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    } else {\n+        throw new IllegalArgumentException(\"Unsupported function type: \" + functionType);\n     }\n+    scope = scope.getParent();\n+    return fnNode;\n+}\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processFunctionCall(FunctionCall) in TypeSafeDispatcher",
    "test_result": "ERROR"
}