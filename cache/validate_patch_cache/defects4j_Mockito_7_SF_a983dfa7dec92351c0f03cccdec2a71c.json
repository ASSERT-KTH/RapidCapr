{
    "patch": "@Test\npublic void discoverDeepMockingOfGenerics() {\n    Mockito.mockStatic(TypeExtractor.class);\n    class Foo<T> {\n        T foo;\n    }\n    class Bar<T extends Foo<?>> {\n        T bar;\n    }\n    Bar<?> mock = Mockito.mock(Bar.class, withSettings().verboseLogging());\n    Bar<?> deepMock = Mockito.mock(Bar.class, withSettings().spiedInstance(mock).defaultAnswer(CALLS_REAL_METHODS));\n    doReturn(deepMock).when(deepMock).bar;\n    deepMock.bar.foo.getClass();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b74df7ce4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,21 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+@Test\n+public void discoverDeepMockingOfGenerics() {\n+    Mockito.mockStatic(TypeExtractor.class);\n+    class Foo<T> {\n+        T foo;\n+    }\n+    class Bar<T extends Foo<?>> {\n+        T bar;\n+    }\n+    Bar<?> mock = Mockito.mock(Bar.class, withSettings().verboseLogging());\n+    Bar<?> deepMock = Mockito.mock(Bar.class, withSettings().spiedInstance(mock).defaultAnswer(CALLS_REAL_METHODS));\n+    doReturn(deepMock).when(deepMock).bar;\n+    deepMock.bar.foo.getClass();\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}