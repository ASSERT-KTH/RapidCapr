{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    \n    if (nextLocal == nextAdjusted) {\n        if (offsetLocal < offsetAdjusted) {\n            int prevOffset =  getOffset(prevTransition(nextLocal));\n            if (prevOffset == offsetLocal) {\n                return offsetAdjusted;\n            }\n            return prevOffset;\n        } else {\n            long nextNextLocal = nextTransition(nextLocal);\n            if (getOffset(nextNextLocal) == offsetAdjusted) {\n                return offsetLocal;\n            }\n            return offsetAdjusted;\n        }\n    } else {\n        int beforeDstOffset = getOffset(nextAdjusted - 1);\n        int afterDstOffset = getOffset(nextAdjusted);\n        \n        if (afterDstOffset < offsetLocal) {\n            return afterDstOffset;\n        }\n        \n        if ((offsetLocal - afterDstOffset) < (beforeDstOffset - afterDstOffset) / 2) {\n            return offsetLocal;\n        } else {\n            return getOffset(nextLocal - 1);\n        }\n    }\n} else if (offsetLocal > offsetAdjusted) {\n    long prevLocal = prevTransition(instantAdjusted);\n        \n    if (prevLocal == prevTransition(instantLocal - offsetAdjusted)) {\n        return offsetLocal;\n    } else {\n        return getOffset(prevLocal);\n    }\n} else if (offsetLocal == offsetAdjusted) {\n    return offsetLocal;\n} \n\nlong nextLocal = nextTransition(instantAdjusted);\nlong nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\nif (nextLocal == nextAdjusted) {\n    return offsetLocal;\n}\n\nint offsetNextLocal = getOffset(nextLocal);\n\n// check if we're going to run into a big wall\nif (offsetNextLocal > offsetLocal) {\n    long wall = nextLocal + offsetNextLocal;\n    long next = nextTransition(Math.max(instantLocal, wall));\n    int nextOffsetLocal = getOffset(next);\n    if (nextOffsetLocal > offsetLocal) {\n        return offsetLocal;\n    } else {\n        return nextOffsetLocal;\n    }\n}\n\n// use the old rules\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2f3f4367 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,73 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    \n+    if (nextLocal == nextAdjusted) {\n+        if (offsetLocal < offsetAdjusted) {\n+            int prevOffset =  getOffset(prevTransition(nextLocal));\n+            if (prevOffset == offsetLocal) {\n+                return offsetAdjusted;\n+            }\n+            return prevOffset;\n+        } else {\n+            long nextNextLocal = nextTransition(nextLocal);\n+            if (getOffset(nextNextLocal) == offsetAdjusted) {\n+                return offsetLocal;\n+            }\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        int beforeDstOffset = getOffset(nextAdjusted - 1);\n+        int afterDstOffset = getOffset(nextAdjusted);\n+        \n+        if (afterDstOffset < offsetLocal) {\n+            return afterDstOffset;\n+        }\n+        \n+        if ((offsetLocal - afterDstOffset) < (beforeDstOffset - afterDstOffset) / 2) {\n+            return offsetLocal;\n+        } else {\n+            return getOffset(nextLocal - 1);\n+        }\n+    }\n+} else if (offsetLocal > offsetAdjusted) {\n+    long prevLocal = prevTransition(instantAdjusted);\n+        \n+    if (prevLocal == prevTransition(instantLocal - offsetAdjusted)) {\n+        return offsetLocal;\n+    } else {\n+        return getOffset(prevLocal);\n+    }\n+} else if (offsetLocal == offsetAdjusted) {\n+    return offsetLocal;\n+} \n+\n+long nextLocal = nextTransition(instantAdjusted);\n+long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+if (nextLocal == nextAdjusted) {\n+    return offsetLocal;\n+}\n+\n+int offsetNextLocal = getOffset(nextLocal);\n+\n+// check if we're going to run into a big wall\n+if (offsetNextLocal > offsetLocal) {\n+    long wall = nextLocal + offsetNextLocal;\n+    long next = nextTransition(Math.max(instantLocal, wall));\n+    int nextOffsetLocal = getOffset(next);\n+    if (nextOffsetLocal > offsetLocal) {\n+        return offsetLocal;\n+    } else {\n+        return nextOffsetLocal;\n+    }\n+}\n+\n+// use the old rules\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}