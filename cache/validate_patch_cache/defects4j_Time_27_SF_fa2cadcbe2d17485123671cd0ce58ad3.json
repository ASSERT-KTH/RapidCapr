{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            PeriodFormatter formatter = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            if (formatter.printTo(new StringBuilder(), new Period(2, 0, 0, 0, 0, 0, 0, 0)).endsWith(\"00\")) {\n                Composite comp2 = new Composite(formatArray(new Object[]{null, \"0\"}));\n                PeriodParser parser = formatter.getParser();\n                if (parser instanceof Composite) {\n                    parser = ((Composite) parser).withFirst(comp2);\n                } else {\n                    parser = comp2.withNext(parser);\n                }\n                formatter = new PeriodFormatter(formatter.getPrinter(), parser);\n            }\n            return formatter;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..9bf75536 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -798,9 +798,9 @@ public class PeriodFormatterBuilder {\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n@@ -808,7 +808,18 @@ public class PeriodFormatterBuilder {\n         } else if (notParser) {\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            PeriodFormatter formatter = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (formatter.printTo(new StringBuilder(), new Period(2, 0, 0, 0, 0, 0, 0, 0)).endsWith(\"00\")) {\n+                Composite comp2 = new Composite(formatArray(new Object[]{null, \"0\"}));\n+                PeriodParser parser = formatter.getParser();\n+                if (parser instanceof Composite) {\n+                    parser = ((Composite) parser).withFirst(comp2);\n+                } else {\n+                    parser = comp2.withNext(parser);\n+                }\n+                formatter = new PeriodFormatter(formatter.getPrinter(), parser);\n+            }\n+            return formatter;\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}