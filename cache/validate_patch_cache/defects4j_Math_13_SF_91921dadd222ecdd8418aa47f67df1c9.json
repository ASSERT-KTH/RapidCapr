{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n    final RealMatrix u = dec.getU();\n    final RealMatrix s = dec.getS();\n    final RealMatrix v = dec.getV();\n    final double eps = 1e-10; // tolerance value for small singular values\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        double singularValue = s.getEntry(i, i);\n        if (singularValue > eps) {\n            s.setEntry(i, i, Math.sqrt(singularValue));\n        } else {\n            s.setEntry(i, i, 0.0);\n        }\n    }\n    final RealMatrix uT = u.transpose();\n    final RealMatrix vT = v.transpose();\n    return v.multiply(s).multiply(uT);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..74f046f0c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+    final RealMatrix u = dec.getU();\n+    final RealMatrix s = dec.getS();\n+    final RealMatrix v = dec.getV();\n+    final double eps = 1e-10; // tolerance value for small singular values\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        double singularValue = s.getEntry(i, i);\n+        if (singularValue > eps) {\n+            s.setEntry(i, i, Math.sqrt(singularValue));\n+        } else {\n+            s.setEntry(i, i, 0.0);\n+        }\n     }\n+    final RealMatrix uT = u.transpose();\n+    final RealMatrix vT = v.transpose();\n+    return v.multiply(s).multiply(uT);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}