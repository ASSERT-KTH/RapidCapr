{
    "patch": "      double s1 = v1.getNorm();\n      double s2 = v2.getNorm();\n      if (s1 == 0 || s2 == 0) {\n          throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FORCING_ORTHOGONALIZATION, s1 == 0 ? v1 : v2);\n      }\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double maxS = FastMath.max(s1, s2);\n      double vs1 = v1.getX() / maxS;\n      double vs2 = v2.getX() / maxS;\n      double rho = vs1 * vs2;\n      vs1 = v1.getY() / maxS;\n      vs2 = v2.getY() / maxS;\n      rho += vs1 * vs2;\n      vs1 = v1.getZ() / maxS;\n      vs2 = v2.getZ() / maxS;\n      rho += vs1 * vs2;\n      rho *= 0.125; // 8 bits means divide by 256\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double resX = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n      final double resY = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n      final double resZ = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n\n      return new Vector3D(resX, resY, resZ);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..2f85fe0d1 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,11 +454,11 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+      double s1 = v1.getNorm();\n+      double s2 = v2.getNorm();\n+      if (s1 == 0 || s2 == 0) {\n+          throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FORCING_ORTHOGONALIZATION, s1 == 0 ? v1 : v2);\n+      }\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,12 +467,24 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      double maxS = FastMath.max(s1, s2);\n+      double vs1 = v1.getX() / maxS;\n+      double vs2 = v2.getX() / maxS;\n+      double rho = vs1 * vs2;\n+      vs1 = v1.getY() / maxS;\n+      vs2 = v2.getY() / maxS;\n+      rho += vs1 * vs2;\n+      vs1 = v1.getZ() / maxS;\n+      vs2 = v2.getZ() / maxS;\n+      rho += vs1 * vs2;\n+      rho *= 0.125; // 8 bits means divide by 256\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double resX = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n+      final double resY = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n+      final double resZ = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n \n-  }\n+      return new Vector3D(resX, resY, resZ);\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}