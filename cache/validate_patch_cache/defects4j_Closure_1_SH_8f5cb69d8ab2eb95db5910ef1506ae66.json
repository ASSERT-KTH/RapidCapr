{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode lastArg;\nwhile ((lastArg = argList.getLastChild()) != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n        if (!NodeUtil.isVarArgsForCallOrNew(lastArg)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n        }\n    } else {\n        break;\n    }\n}\n\nNode body = function.getLastChild();\nwhile (body != null && body.isFunction()) {\n    removeUnreferencedFunctionArgs(fnScope);\n    body = body.getSecondChild();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5824d679 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg;\n+while ((lastArg = argList.getLastChild()) != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+        if (!NodeUtil.isVarArgsForCallOrNew(lastArg)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+        }\n+    } else {\n+        break;\n+    }\n+}\n+\n+Node body = function.getLastChild();\n+while (body != null && body.isFunction()) {\n+    removeUnreferencedFunctionArgs(fnScope);\n+    body = body.getSecondChild();\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}