{
    "patch": "} else if (NodeUtil.isImmutableResult(parent)) {\n  return;\n} else if (!n.isQualifiedName() && parent.isExprResult() && parent.getParent().isFunction()) {\n  warnings.add(makeLintWarning(\"Suspicious code. Did you mean: \" + NodeUtil.getGetpropImplicitCast(n.getFirstChild()), n));\n  return;\n} else if (n.getJSType() != null && parent.isAssign() &&\n           parent.getFirstChild() != n && NodeUtil.getEnclosingType(parent, Token.GETPROTO) == null) {\n    warnings.add(makeLintWarning(\"Assignment to property of \" + n.getJSType().getDisplayName() + \" in \" \n      + parent.getFirstChild().toSource() + \". Did you forget 'this.'?\", n));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}