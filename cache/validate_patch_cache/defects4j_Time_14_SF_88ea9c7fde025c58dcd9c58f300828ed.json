{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n\n        long instant = 0L;\n        boolean isDayOfMonthUpdated = false;\n        int monthStart = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int curVal = values[i];\n                int newVal = iChronology.monthOfYear().add(curVal, valueToAdd);\n                if (newVal != curVal) {\n                    if (!isValidDayOfMonth(partial, iChronology, iChronology.year().get(instant), newVal, iChronology.dayOfMonth().get(instant))) {\n                        throw new org.joda.time.IllegalFieldValueException\n                            (DateTimeFieldType.monthOfYear(), Integer.valueOf(newVal), null, null);\n                    }\n                    monthStart = iChronology.monthOfYear().get(instant);\n                    isDayOfMonthUpdated = true;\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newVal);\n                if (!isDayOfMonthUpdated) {\n                    int curDayOfMonth = iChronology.dayOfMonth().get(instant);\n                    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                    if (curDayOfMonth > maxDayOfMonth) {\n                        instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n                    }\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        int monthEnd = iChronology.monthOfYear().get(instant);\n        if (monthStart != monthEnd) {\n            throw new org.joda.time.IllegalFieldValueException\n                (DateTimeFieldType.monthOfYear(), Integer.valueOf(monthEnd), null, null);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\n/**\n * Checks if the specified year, month and day constitute a valid date.\n */\nprivate boolean isValidDayOfMonth(ReadablePartial partial, Chronology chronology, int year, int month, int day) {\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    int maxDayOfMonth = chronology.dayOfMonth().getMaximumValue(year, month);\n    return (day >= 1 && day <= maxDayOfMonth);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..7d1eae4c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,64 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+\n+        long instant = 0L;\n+        boolean isDayOfMonthUpdated = false;\n+        int monthStart = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int curVal = values[i];\n+                int newVal = iChronology.monthOfYear().add(curVal, valueToAdd);\n+                if (newVal != curVal) {\n+                    if (!isValidDayOfMonth(partial, iChronology, iChronology.year().get(instant), newVal, iChronology.dayOfMonth().get(instant))) {\n+                        throw new org.joda.time.IllegalFieldValueException\n+                            (DateTimeFieldType.monthOfYear(), Integer.valueOf(newVal), null, null);\n+                    }\n+                    monthStart = iChronology.monthOfYear().get(instant);\n+                    isDayOfMonthUpdated = true;\n+                }\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newVal);\n+                if (!isDayOfMonthUpdated) {\n+                    int curDayOfMonth = iChronology.dayOfMonth().get(instant);\n+                    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    if (curDayOfMonth > maxDayOfMonth) {\n+                        instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n+                    }\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = add(instant, valueToAdd);\n+        int monthEnd = iChronology.monthOfYear().get(instant);\n+        if (monthStart != monthEnd) {\n+            throw new org.joda.time.IllegalFieldValueException\n+                (DateTimeFieldType.monthOfYear(), Integer.valueOf(monthEnd), null, null);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n+\n+/**\n+ * Checks if the specified year, month and day constitute a valid date.\n+ */\n+private boolean isValidDayOfMonth(ReadablePartial partial, Chronology chronology, int year, int month, int day) {\n+    if (month < 1 || month > 12) {\n+        return false;\n+    }\n+    int maxDayOfMonth = chronology.dayOfMonth().getMaximumValue(year, month);\n+    return (day >= 1 && day <= maxDayOfMonth);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}