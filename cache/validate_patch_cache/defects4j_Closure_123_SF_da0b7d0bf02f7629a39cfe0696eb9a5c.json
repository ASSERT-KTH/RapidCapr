{
    "patch": "public String fixCode(String code) {\n   String pattern = \"for\\\\s*\\\\(.*:.*\\\\)\\\\s*.*\";\n   Pattern r = Pattern.compile(pattern, Pattern.MULTILINE);\n   Matcher m = r.matcher(code);\n   if (m.find()) {\n      String forLoop = m.group(0);\n      String[] tokens = forLoop.split(\":\");\n      String newForLoop = \"for (\" + tokens[0] + \" : \";\n      String collection = tokens[1];\n      if (!collection.contains(\"(\")) {\n         // Collection is a variable name\n         newForLoop += \"Arrays.asList(\" + collection + \")\";\n      } else {\n         newForLoop += collection;\n      }\n      newForLoop += \")\";\n      code = code.replace(forLoop, newForLoop);\n   }\n   return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..98828696 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,26 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+   String pattern = \"for\\\\s*\\\\(.*:.*\\\\)\\\\s*.*\";\n+   Pattern r = Pattern.compile(pattern, Pattern.MULTILINE);\n+   Matcher m = r.matcher(code);\n+   if (m.find()) {\n+      String forLoop = m.group(0);\n+      String[] tokens = forLoop.split(\":\");\n+      String newForLoop = \"for (\" + tokens[0] + \" : \";\n+      String collection = tokens[1];\n+      if (!collection.contains(\"(\")) {\n+         // Collection is a variable name\n+         newForLoop += \"Arrays.asList(\" + collection + \")\";\n+      } else {\n+         newForLoop += collection;\n+      }\n+      newForLoop += \")\";\n+      code = code.replace(forLoop, newForLoop);\n+   }\n+   return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}