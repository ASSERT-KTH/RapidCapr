{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    double   vn1 = v1.getNorm();\n    double   vn2 = v2.getNorm();\n    double   v1n1 = v1.getX() / vn1, v1n2 = v1.getY() / vn1, v1n3 = v1.getZ() / vn1;\n    double   v2n1 = v2.getX() / vn2, v2n2 = v2.getY() / vn2, v2n3 = v2.getZ() / vn2;\n\n    double ax = (v1n2 * v2n3) - (v1n3 * v2n2);\n    double ay = (v1n3 * v2n1) - (v1n1 * v2n3);\n    double az = (v1n1 * v2n2) - (v1n2 * v2n1);\n\n    return new Vector3D(ax * vn1 * vn2, ay * vn1 * vn2, az * vn1 * vn2);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..5ff9a2b68 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,29 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    double   vn1 = v1.getNorm();\n+    double   vn2 = v2.getNorm();\n+    double   v1n1 = v1.getX() / vn1, v1n2 = v1.getY() / vn1, v1n3 = v1.getZ() / vn1;\n+    double   v2n1 = v2.getX() / vn2, v2n2 = v2.getY() / vn2, v2n3 = v2.getZ() / vn2;\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double ax = (v1n2 * v2n3) - (v1n3 * v2n2);\n+    double ay = (v1n3 * v2n1) - (v1n1 * v2n3);\n+    double az = (v1n1 * v2n2) - (v1n2 * v2n1);\n \n+    return new Vector3D(ax * vn1 * vn2, ay * vn1 * vn2, az * vn1 * vn2);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<-1.0000002150225664>",
    "test_result": "FAIL"
}