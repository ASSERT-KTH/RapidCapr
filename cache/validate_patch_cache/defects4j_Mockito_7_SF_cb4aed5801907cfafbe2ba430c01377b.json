{
    "patch": "private void readTypeVariables() {\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        for (Type bound : typeVariable.getBounds()) {\n            if (bound instanceof ParameterizedType) {\n                actualTypeArgument = ((ParameterizedType) bound).getActualTypeArguments()[0];\n                break;\n            }\n        }\n        if (actualTypeArgument == null) {\n            throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n        }\n    }\n    registerTypeVariablesOn(actualTypeArgument);\n    for (Type bound : typeVariable.getBounds()) {\n        registerTypeVariablesOn(bound);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..68bf06567 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        for (Type bound : typeVariable.getBounds()) {\n+            if (bound instanceof ParameterizedType) {\n+                actualTypeArgument = ((ParameterizedType) bound).getActualTypeArguments()[0];\n+                break;\n+            }\n+        }\n+        if (actualTypeArgument == null) {\n+            throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n+        }\n+    }\n+    registerTypeVariablesOn(actualTypeArgument);\n+    for (Type bound : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(bound);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.IllegalStateException: Cannot extract an actual type argument for type variable: MC3",
    "test_result": "FAIL"
}