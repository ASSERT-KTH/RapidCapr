{
    "patch": "        final int numRows = m.getRowDimension();\n        final int numCols = m.getColumnDimension();\n        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n        final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n        double eps;\n        double norm = m.getNorm();\n        do {\n            xOld.setSubMatrix(x.getData(), 0, 0);\n            final RealMatrix y = xOld.multiply(xOld);\n            eps = y.subtract(m).getNorm() / norm;\n            x.setSubMatrix(xOld.add(y.subtract(m).multiply(xOld).multiply(0.5)).getData(), 0, 0);\n        } while (eps > 1e-9);\n\n        return x;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..92d3a5f69 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final int numRows = m.getRowDimension();\n+        final int numCols = m.getColumnDimension();\n+        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n+        final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n+        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n+        double eps;\n+        double norm = m.getNorm();\n+        do {\n+            xOld.setSubMatrix(x.getData(), 0, 0);\n+            final RealMatrix y = xOld.multiply(xOld);\n+            eps = y.subtract(m).getNorm() / norm;\n+            x.setSubMatrix(xOld.add(y.subtract(m).multiply(xOld).multiply(0.5)).getData(), 0, 0);\n+        } while (eps > 1e-9);\n+\n+        return x;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}