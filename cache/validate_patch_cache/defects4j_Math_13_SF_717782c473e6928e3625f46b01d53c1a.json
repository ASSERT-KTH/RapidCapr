{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final RealMatrix[] svd = new SingularValueDecomposition(m).getUSV();\n    final RealMatrix s = MatrixUtils.createRealDiagonalMatrix(\n        ArrayUtils.addAll(\n            Arrays.stream(svd[1].getColumn(0)).map(d -> Math.sqrt(d)).toArray(),\n            new double[m.getColumnDimension() - svd[1].getRowDimension()])\n    );\n    return svd[0].multiply(s).multiply(svd[2].transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ae48d6898 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final RealMatrix[] svd = new SingularValueDecomposition(m).getUSV();\n+    final RealMatrix s = MatrixUtils.createRealDiagonalMatrix(\n+        ArrayUtils.addAll(\n+            Arrays.stream(svd[1].getColumn(0)).map(d -> Math.sqrt(d)).toArray(),\n+            new double[m.getColumnDimension() - svd[1].getRowDimension()])\n+    );\n+    return svd[0].multiply(s).multiply(svd[2].transpose());\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}