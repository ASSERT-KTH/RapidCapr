{
    "patch": "public static <T> ReturnValue<T> returnValue(T value) {\n    return new ReturnValue<>(new Object() {\n        @Override\n        public boolean equals(Object obj) {\n            return obj instanceof ReturnValue && Objects.equals(((ReturnValue<?>) obj).getValue(), value);\n        }\n\n        @Override\n        public String toString() {\n            return \"'\" + value + \"'\";\n        }\n    }, value);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..0ae4c6a42 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<T> returnValue(T value) {\n+    return new ReturnValue<>(new Object() {\n+        @Override\n+        public boolean equals(Object obj) {\n+            return obj instanceof ReturnValue && Objects.equals(((ReturnValue<?>) obj).getValue(), value);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"'\" + value + \"'\";\n+        }\n+    }, value);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}