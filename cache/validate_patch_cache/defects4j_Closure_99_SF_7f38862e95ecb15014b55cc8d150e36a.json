{
    "patch": "public static boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Only traverse functions that would normally be able to have a `this` annotation associated with them.\n        // Example: `var a = function() {};` or `function a() {}` or `a.x = function() {};`\n        if (parent.getType() == Token.NAME) {\n            Node varParent = parent.getParent();\n            if (varParent.getType() == Token.VAR || varParent.getType() == Token.CONST || varParent.getType() == Token.LET) {\n                return true;\n            }\n        } else if (parent.getType() == Token.ASSIGN) {\n            Node propNode = parent.getFirstChild();\n            if (propNode.getType() == Token.GETPROP) {\n                Node objNode = propNode.getFirstChild();\n                if (objNode.getType() == Token.NAME) {\n                    Node objParent = objNode.getParent();\n                    if (objParent.getType() == Token.VAR || objParent.getType() == Token.CONST || objParent.getType() == Token.LET) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle nested assignments properly\n            // (e.g., `(a = this).property = c;`), assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n            return true;\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n            return true;\n        }\n    }\n\n    return (parent != null) && (parent.getType() == Token.BLOCK || parent.getType() == Token.SCRIPT || parent.getType() == Token.EXPR_RESULT);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..99a9f8e6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,60 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public static boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+        // Only traverse functions that would normally be able to have a `this` annotation associated with them.\n+        // Example: `var a = function() {};` or `function a() {}` or `a.x = function() {};`\n+        if (parent.getType() == Token.NAME) {\n+            Node varParent = parent.getParent();\n+            if (varParent.getType() == Token.VAR || varParent.getType() == Token.CONST || varParent.getType() == Token.LET) {\n+                return true;\n+            }\n+        } else if (parent.getType() == Token.ASSIGN) {\n+            Node propNode = parent.getFirstChild();\n+            if (propNode.getType() == Token.GETPROP) {\n+                Node objNode = propNode.getFirstChild();\n+                if (objNode.getType() == Token.NAME) {\n+                    Node objParent = objNode.getParent();\n+                    if (objParent.getType() == Token.VAR || objParent.getType() == Token.CONST || objParent.getType() == Token.LET) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n         return false;\n-      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle nested assignments properly\n+            // (e.g., `(a = this).property = c;`), assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+            return true;\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n+            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                return false;\n+            }\n+            return true;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n-    return true;\n-  }\n+    return (parent != null) && (parent.getType() == Token.BLOCK || parent.getType() == Token.SCRIPT || parent.getType() == Token.EXPR_RESULT);\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: shouldTraverse(NodeTraversal,Node,Node) in CheckGlobalThis cannot implement shouldTraverse(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}