{
    "patch": "return new Iterator<Chromosome>() {\n            private final Iterator<Chromosome> iterator = chromosomes.iterator();\n            private Chromosome nextChromosome = null;\n\n            @Override\n            public boolean hasNext() {\n                if (nextChromosome != null) {\n                    return true;\n                }\n                while (iterator.hasNext()) {\n                    Chromosome chromosome = iterator.next();\n                    if (chromosome != null) {\n                        nextChromosome = chromosome;\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            @Override\n            public Chromosome next() {\n                if (!hasNext()) {\n                    throw new NoSuchElementException();\n                }\n                Chromosome currentChromosome = nextChromosome;\n                nextChromosome = null;\n                return currentChromosome;\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 1eb005316..0a8efc3d6 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -206,6 +206,39 @@ public abstract class ListPopulation implements Population {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+return new Iterator<Chromosome>() {\n+            private final Iterator<Chromosome> iterator = chromosomes.iterator();\n+            private Chromosome nextChromosome = null;\n+\n+            @Override\n+            public boolean hasNext() {\n+                if (nextChromosome != null) {\n+                    return true;\n+                }\n+                while (iterator.hasNext()) {\n+                    Chromosome chromosome = iterator.next();\n+                    if (chromosome != null) {\n+                        nextChromosome = chromosome;\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public Chromosome next() {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException();\n+                }\n+                Chromosome currentChromosome = nextChromosome;\n+                nextChromosome = null;\n+                return currentChromosome;\n+            }\n+\n+            @Override\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}