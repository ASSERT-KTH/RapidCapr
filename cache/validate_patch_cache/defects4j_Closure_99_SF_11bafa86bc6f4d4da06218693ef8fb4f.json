{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  int type = n.getType();\n  JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n  switch (type) {\n    case Token.SCRIPT:\n    case Token.BLOCK:\n    case Token.DO:\n    case Token.WHILE:\n    case Token.FOR:\n    case Token.FOR_IN:\n    case Token.IF:\n    case Token.TRY:\n    case Token.CATCH:\n    case Token.SWITCH:\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n    case Token.VAR:\n    case Token.LET:\n    case Token.CONST:\n    case Token.DEBUGGER:\n    case Token.LABEL:\n    case Token.THROW:\n    case Token.RETURN:\n    case Token.CONTINUE:\n    case Token.BREAK:\n    case Token.EXPORT:\n    case Token.IMPORT:\n    case Token.TEMPLATELIT:\n    case Token.TEMPLATELIT_SUB:\n      return true;\n    case Token.FUNCTION:\n      // Don't traverse functions that are constructors or have the @this or @override annotation.\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally be able to have a @this annotation\n      // associated with them. e.g., var a = function() { }, function a() {}; or a.x = function() {};\n      int pType = parent.getType();\n      if (pType == Token.ASSIGN ||\n          pType == Token.OBJECTLIT ||\n          pType == Token.COMMA) {\n        // Traverse function properties and expressions involving commas or object literals\n        return true;\n      } else if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME)) {\n        return false;\n      }\n      break;\n    case Token.CALL:\n      return parent.getType() != Token.EXPR_RESULT;\n    case Token.GETPROP:\n      // Only traverse the right-hand side if it's not an assignment to prototype property.\n      if (parent.getType() != Token.ASSIGN ||\n          parent.getFirstChild() != n) {\n        // Not the LHS of an assignment.\n        // a.b .. <--\n        return true;\n      } else {\n        Node current = n;\n        while (current.getType() == Token.GETPROP) {\n          if (current.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          current = current.getFirstChild();\n        }\n        if (current.getType() == Token.NAME && current.getString().equals(\"Object\")) {\n          return false;\n        }\n      }\n      break;\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..4377bd06 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,81 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  int type = n.getType();\n+  JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+  switch (type) {\n+    case Token.SCRIPT:\n+    case Token.BLOCK:\n+    case Token.DO:\n+    case Token.WHILE:\n+    case Token.FOR:\n+    case Token.FOR_IN:\n+    case Token.IF:\n+    case Token.TRY:\n+    case Token.CATCH:\n+    case Token.SWITCH:\n+    case Token.CASE:\n+    case Token.DEFAULT_CASE:\n+    case Token.VAR:\n+    case Token.LET:\n+    case Token.CONST:\n+    case Token.DEBUGGER:\n+    case Token.LABEL:\n+    case Token.THROW:\n+    case Token.RETURN:\n+    case Token.CONTINUE:\n+    case Token.BREAK:\n+    case Token.EXPORT:\n+    case Token.IMPORT:\n+    case Token.TEMPLATELIT:\n+    case Token.TEMPLATELIT_SUB:\n+      return true;\n+    case Token.FUNCTION:\n+      // Don't traverse functions that are constructors or have the @this or @override annotation.\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n+      // Don't traverse functions unless they would normally be able to have a @this annotation\n+      // associated with them. e.g., var a = function() { }, function a() {}; or a.x = function() {};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+      if (pType == Token.ASSIGN ||\n+          pType == Token.OBJECTLIT ||\n+          pType == Token.COMMA) {\n+        // Traverse function properties and expressions involving commas or object literals\n+        return true;\n+      } else if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME)) {\n         return false;\n       }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n+      break;\n+    case Token.CALL:\n+      return parent.getType() != Token.EXPR_RESULT;\n+    case Token.GETPROP:\n+      // Only traverse the right-hand side if it's not an assignment to prototype property.\n+      if (parent.getType() != Token.ASSIGN ||\n+          parent.getFirstChild() != n) {\n+        // Not the LHS of an assignment.\n+        // a.b .. <--\n+        return true;\n       } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        Node current = n;\n+        while (current.getType() == Token.GETPROP) {\n+          if (current.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n+          current = current.getFirstChild();\n+        }\n+        if (current.getType() == Token.NAME && current.getString().equals(\"Object\")) {\n+          return false;\n+        }\n       }\n-    }\n-\n-    return true;\n+      break;\n   }\n+  return true;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}