{
    "patch": "        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        currentStrategy= getStrategy(currentFormatField);\n        if(currentStrategy == null) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(nextStrategy == null) {\n                throw new IllegalArgumentException(\"Invalid pattern\");\n            }\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= null;\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..7f69760a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,21 +112,16 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n-\n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n-\n         Matcher patternMatcher= formatPattern.matcher(pattern);\n         if(!patternMatcher.lookingAt()) {\n             throw new IllegalArgumentException(\"Invalid pattern\");\n         }\n \n         currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n+        currentStrategy= getStrategy(currentFormatField);\n+        if(currentStrategy == null) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n         for(;;) {\n             patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n             if(!patternMatcher.lookingAt()) {\n@@ -135,6 +130,9 @@ public class FastDateParser implements DateParser, Serializable {\n             }\n             String nextFormatField= patternMatcher.group();\n             nextStrategy = getStrategy(nextFormatField);\n+            if(nextStrategy == null) {\n+                throw new IllegalArgumentException(\"Invalid pattern\");\n+            }\n             if(currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n@@ -147,7 +145,6 @@ public class FastDateParser implements DateParser, Serializable {\n         currentFormatField= null;\n         strategies= collector.toArray(new Strategy[collector.size()]);\n         parsePattern= Pattern.compile(regex.toString());\n-    }\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}