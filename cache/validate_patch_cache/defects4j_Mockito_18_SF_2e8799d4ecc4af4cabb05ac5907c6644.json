{
    "patch": "public static Map<String, Integer> wordCount(String[] strings) {\n    Map<String, Integer> map = new HashMap<String, Integer>();\n    if (strings == null || strings.length == 0) {\n        return map;\n    }\n    for (String string : strings) {\n        if (map.containsKey(string)) {\n            map.put(string, map.get(string) + 1);\n        } else {\n            map.put(string, 1);\n        }\n    }\n    return map;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a44e6568d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> wordCount(String[] strings) {\n+    Map<String, Integer> map = new HashMap<String, Integer>();\n+    if (strings == null || strings.length == 0) {\n+        return map;\n+    }\n+    for (String string : strings) {\n+        if (map.containsKey(string)) {\n+            map.put(string, map.get(string) + 1);\n+        } else {\n+            map.put(string, 1);\n+        }\n+    }\n+    return map;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}