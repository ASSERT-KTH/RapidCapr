{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n        try {\n            List<Node> successors = cfgNode.getSuccessors();\n            for (Node successor : successors) {\n                if (successor.getCatch() != null && successor.getCatch().size() > 0) {\n                    return true;\n                }\n                if (hasExceptionHandler(successor)) {\n                    return true;\n                }\n            }\n            return false;\n        } catch (Exception e) {\n            // catch any exception that might be thrown to avoid program termination\n            return false;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..67e198a1 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,23 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+        try {\n+            List<Node> successors = cfgNode.getSuccessors();\n+            for (Node successor : successors) {\n+                if (successor.getCatch() != null && successor.getCatch().size() > 0) {\n+                    return true;\n+                }\n+                if (hasExceptionHandler(successor)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        } catch (Exception e) {\n+            // catch any exception that might be thrown to avoid program termination\n+            return false;\n+        }\n+    }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}