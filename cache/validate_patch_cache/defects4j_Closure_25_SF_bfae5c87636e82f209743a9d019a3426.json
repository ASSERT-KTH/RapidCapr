{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n\n  if (constructorType != null) {\n    // First, we strip `null` and `undefined` from the constructor type.\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n\n    // If the constructor type is unknown, assign the unknown type to the result.\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else if (constructorType.isFunctionType()) {\n      // If the constructor type is a function type, use its instance type as the result.\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    } else if (constructorType.isTemplatizedType()) {\n      // If the constructor type is a templatized type, extract its referred type.\n      JSType referredType = constructorType.getTemplateTypeMap().getReferredType(0);\n      if (referredType.isFunctionType()) {\n        FunctionType ft = referredType.toMaybeFunctionType();\n        if (ft != null && ft.isConstructor()) {\n          type = ft.getInstanceType();\n        }\n      } else {\n        type = referredType;\n      }\n    } else {\n      // If the constructor type is neither a function type nor a templatized type, assign it as the result.\n      type = constructorType;\n    }\n  }\n\n  // Replace `null` or `undefined` with the unknown type.\n  if (type == null) {\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n\n  // Set the resulting type for the node, after restricting it to not be `null` or `undefined`.\n  n.setJSType(type.restrictByNotNullOrUndefined());\n\n  // Traverse the arguments in the call to the constructor function.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..3ae513d7 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,59 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+\n+  if (constructorType != null) {\n+    // First, we strip `null` and `undefined` from the constructor type.\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+\n+    // If the constructor type is unknown, assign the unknown type to the result.\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else if (constructorType.isFunctionType()) {\n+      // If the constructor type is a function type, use its instance type as the result.\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n+      }\n+    } else if (constructorType.isTemplatizedType()) {\n+      // If the constructor type is a templatized type, extract its referred type.\n+      JSType referredType = constructorType.getTemplateTypeMap().getReferredType(0);\n+      if (referredType.isFunctionType()) {\n+        FunctionType ft = referredType.toMaybeFunctionType();\n+        if (ft != null && ft.isConstructor()) {\n+          type = ft.getInstanceType();\n         }\n+      } else {\n+        type = referredType;\n       }\n+    } else {\n+      // If the constructor type is neither a function type nor a templatized type, assign it as the result.\n+      type = constructorType;\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n \n+  // Replace `null` or `undefined` with the unknown type.\n+  if (type == null) {\n+    type = getNativeType(UNKNOWN_TYPE);\n+  }\n+\n+  // Set the resulting type for the node, after restricting it to not be `null` or `undefined`.\n+  n.setJSType(type.restrictByNotNullOrUndefined());\n+\n+  // Traverse the arguments in the call to the constructor function.\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}