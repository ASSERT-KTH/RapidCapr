{
    "patch": "    if (offsetLocal > offsetAdjusted) {\n        // we are in a gap and cannot resolve to local. As getting here\n        // implies offsetLocal != offsetAdjusted it would otherwise be\n        // possible to return offsetLocal without this check.\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n        if (nextLocal == nextAdjusted) {\n            return offsetAdjusted;\n        }\n        nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted + DateTimeConstants.MILLIS_PER_DAY);\n        if (nextLocal == nextAdjusted) {\n            return offsetAdjusted;\n        }\n    } else if (offsetLocal < offsetAdjusted) {\n        long instantPrev = previousTransition(instantAdjusted);\n        if (instantPrev < instantLocal - offsetLocal) {\n            return offsetAdjusted;\n        }\n        long prevAdjusted = nextTransition(instantPrev) - DateTimeConstants.MILLIS_PER_SECOND;\n        if (instantLocal - prevAdjusted >= DateTimeConstants.MILLIS_PER_DAY << 1) {\n            return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..569c141c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    if (offsetLocal > offsetAdjusted) {\n+        // we are in a gap and cannot resolve to local. As getting here\n+        // implies offsetLocal != offsetAdjusted it would otherwise be\n+        // possible to return offsetLocal without this check.\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n+        if (nextLocal == nextAdjusted) {\n+            return offsetAdjusted;\n+        }\n+        nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted + DateTimeConstants.MILLIS_PER_DAY);\n+        if (nextLocal == nextAdjusted) {\n+            return offsetAdjusted;\n+        }\n+    } else if (offsetLocal < offsetAdjusted) {\n+        long instantPrev = previousTransition(instantAdjusted);\n+        if (instantPrev < instantLocal - offsetLocal) {\n+            return offsetAdjusted;\n+        }\n+        long prevAdjusted = nextTransition(instantPrev) - DateTimeConstants.MILLIS_PER_SECOND;\n+        if (instantLocal - prevAdjusted >= DateTimeConstants.MILLIS_PER_DAY << 1) {\n+            return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}