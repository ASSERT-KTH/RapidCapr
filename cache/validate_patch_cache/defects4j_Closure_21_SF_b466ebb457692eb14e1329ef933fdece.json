{
    "patch": " public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      if (!NodeUtil.isExpressionNode(n.getFirstChild())) {\n        return;\n      }\n\n      if (n.getParent().getType() == Token.FOR &&\n          n.getPrevious() == null &&\n          n.getNext() == null) {\n        return;\n      }\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    if (n.isFunction() &&\n        !n.getLastChild().isBlock()) {\n      // Don't report lack of side-effect warnings on inline function declarations.\n      return;\n    }\n\n    // The root node is special because it is also a script.\n    if (!n.isScript() && !NodeUtil.isStatement(n)) {\n      if (NodeUtil.isExpressionNode(n) &&\n          parent.getType() == Token.EXPR_RESULT) {\n        // If n is the only child and its parent is an EXPR_RESULT\n        // and it is part of a for loop we will keep it. see issue 361.\n        if (n.getNext() != null || parent.getParent().getType() == Token.FOR) {\n          return;\n        }\n      } else {\n        return;\n      }\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    // Avoid reporting \"unused variable\" for for-in loop variables.\n    if (parent.getType() == Token.FOR &&\n        parent.getChildCount() == 3 &&\n        parent.getFirstChild() == n &&\n        n.isVar()) {\n      Node grandparent = parent.getParent();\n      if (grandparent != null &&\n          grandparent.getType() == Token.FOR &&\n          grandparent.getChildCount() == 3 &&\n          grandparent.getFirstChild().getType() == Token.VAR) {\n        return;\n      }\n    }\n\n    // We detect prototypes in the condition since this will short circuit\n    // most cases where we compare against a nonexistent member.\n    if (isResultUsed && n.isGetProp() &&\n        n.getFirstChild().isName() &&\n        \"prototype\".equals(n.getFirstChild().getString())) {\n      return;\n    }\n\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT &&\n              ancestorType != Token.BLOCK &&\n              ancestorType != Token.FOR &&\n              ancestorType != Token.FUNCTION) {\n            return;\n          } else {\n            break;\n          }\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT &&\n               parent.getType() != Token.BLOCK &&\n               parent.getType() != Token.IF) {\n      if (parent.getType() == Token.VAR && parent.getParent().getType() == Token.FOR) {\n        // For loops are handled specially since the condition\n        // can be a simple variable declaration\n        if (parent.getNext() != null) {\n          Node secondChild = parent.getFirstChild().getNext();\n          if (secondChild != null) {\n            String msg = \"The variable \" + secondChild.getString() +\n                \" has no effect.\";\n            t.report(secondChild, USELESS_CODE_ERROR, msg);\n            problemNodes.add(secondChild);\n          }\n        }\n        return;\n      }\n\n      if (!(parent.getType() == Token.FOR &&\n            parent.getChildCount() == 4 &&\n            (n == parent.getFirstChild() ||\n             n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if ((isSimpleOp ||\n         !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.report(n, USELESS_CODE_ERROR, msg);\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..4418d597 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,7 +81,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+ public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n@@ -99,7 +99,15 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n     if (n.isExprResult()) {\n-      return;\n+      if (!NodeUtil.isExpressionNode(n.getFirstChild())) {\n+        return;\n+      }\n+\n+      if (n.getParent().getType() == Token.FOR &&\n+          n.getPrevious() == null &&\n+          n.getNext() == null) {\n+        return;\n+      }\n     }\n \n     // This no-op statement was there so that JSDoc information could\n@@ -108,8 +116,50 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       return;\n     }\n \n+    if (n.isFunction() &&\n+        !n.getLastChild().isBlock()) {\n+      // Don't report lack of side-effect warnings on inline function declarations.\n+      return;\n+    }\n+\n+    // The root node is special because it is also a script.\n+    if (!n.isScript() && !NodeUtil.isStatement(n)) {\n+      if (NodeUtil.isExpressionNode(n) &&\n+          parent.getType() == Token.EXPR_RESULT) {\n+        // If n is the only child and its parent is an EXPR_RESULT\n+        // and it is part of a for loop we will keep it. see issue 361.\n+        if (n.getNext() != null || parent.getParent().getType() == Token.FOR) {\n+          return;\n+        }\n+      } else {\n+        return;\n+      }\n+    }\n+\n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+    // Avoid reporting \"unused variable\" for for-in loop variables.\n+    if (parent.getType() == Token.FOR &&\n+        parent.getChildCount() == 3 &&\n+        parent.getFirstChild() == n &&\n+        n.isVar()) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null &&\n+          grandparent.getType() == Token.FOR &&\n+          grandparent.getChildCount() == 3 &&\n+          grandparent.getFirstChild().getType() == Token.VAR) {\n+        return;\n+      }\n+    }\n+\n+    // We detect prototypes in the condition since this will short circuit\n+    // most cases where we compare against a nonexistent member.\n+    if (isResultUsed && n.isGetProp() &&\n+        n.getFirstChild().isName() &&\n+        \"prototype\".equals(n.getFirstChild().getString())) {\n+      return;\n+    }\n+\n     if (parent.getType() == Token.COMMA) {\n       if (isResultUsed) {\n         return;\n@@ -118,17 +168,43 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+          if (ancestorType != Token.EXPR_RESULT &&\n+              ancestorType != Token.BLOCK &&\n+              ancestorType != Token.FOR &&\n+              ancestorType != Token.FUNCTION) {\n+            return;\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT &&\n+               parent.getType() != Token.BLOCK &&\n+               parent.getType() != Token.IF) {\n+      if (parent.getType() == Token.VAR && parent.getParent().getType() == Token.FOR) {\n+        // For loops are handled specially since the condition\n+        // can be a simple variable declaration\n+        if (parent.getNext() != null) {\n+          Node secondChild = parent.getFirstChild().getNext();\n+          if (secondChild != null) {\n+            String msg = \"The variable \" + secondChild.getString() +\n+                \" has no effect.\";\n+            t.report(secondChild, USELESS_CODE_ERROR, msg);\n+            problemNodes.add(secondChild);\n+          }\n         }\n+        return;\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+\n+      if (!(parent.getType() == Token.FOR &&\n+            parent.getChildCount() == 4 &&\n+            (n == parent.getFirstChild() ||\n+             n == parent.getFirstChild().getNext().getNext()))) {\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    if ((isSimpleOp ||\n+         !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n@@ -137,8 +213,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n             \"' operator is not being used.\";\n       }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      t.report(n, USELESS_CODE_ERROR, msg);\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}