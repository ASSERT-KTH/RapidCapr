{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    Separator lastSeparator = null;\n    boolean skipNextElem = false;\n    for (int i = 0; i < elementPairs.size(); i++) {\n        if (skipNextElem) {\n            skipNextElem = false;\n            continue;\n        }\n\n        Object elem = elementPairs.get(i);\n        if (elem instanceof Separator) {\n            Separator separator = (Separator) elem;\n            int endIndex = findSeparatorEndIndex(elementPairs, i + 1);\n            List<Object> subList = elementPairs.subList(i, endIndex+1);\n            PeriodFormatter subFormatter = toFormatter(subList, notPrinter, notParser);\n            if (lastSeparator == null) {\n                lastSeparator = separator.finish(\n                        subFormatter.getPrinter(),\n                        subFormatter.getParser());\n            } else {\n                PeriodFormatter innerFormatter = new PeriodFormatter(\n                        subFormatter.getPrinter(),\n                        subFormatter.getParser());\n                lastSeparator = lastSeparator.finish(\n                        innerFormatter.getPrinter(),\n                        innerFormatter.getParser());\n            }\n            printer = getPrinter(printer, subFormatter.getPrinter());\n            parser = getParser(parser, subFormatter.getParser());\n            i = endIndex;\n        } else {\n            Object[] comp = createComposite(Collections.singletonList(elem));\n            printer = getPrinter(printer, (PeriodPrinter) comp[0]);\n            parser = getParser(parser, (PeriodParser) comp[1]);\n        }\n    }\n\n    if (!notPrinter && !notParser && (printer == null || parser == null)) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    if (lastSeparator == null) {\n        return new PeriodFormatter(printer, parser);\n    } else {\n        return new PeriodFormatter(lastSeparator, lastSeparator);\n    }\n}\n\nprivate static int findSeparatorEndIndex(List<Object> elementPairs, int startIndex) {\n    if (startIndex >= elementPairs.size()) {\n        return startIndex - 1;\n    }\n\n    for (int i = startIndex; i < elementPairs.size(); i++) {\n        Object elem = elementPairs.get(i);\n        if (elem instanceof Separator) {\n            int endIndex = findSeparatorEndIndex(elementPairs, i + 1);\n            if (endIndex == i) {\n                return i;\n            } else {\n                i = endIndex;\n            }\n        } else {\n            // non-separator element; continue search\n        }\n    }\n\n    return elementPairs.size() - 1;\n}\n\nprivate static PeriodPrinter getPrinter(PeriodPrinter printer, PeriodPrinter subPrinter) {\n    if (subPrinter != null) {\n        return (printer == null ? subPrinter : new Composite(printer, subPrinter));\n    } else {\n        return printer;\n    }\n}\n\nprivate static PeriodParser getParser(PeriodParser parser, PeriodParser subParser) {\n    if (subParser != null) {\n        return (parser == null ? subParser : new Composite(parser, subParser));\n    } else {\n        return parser;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..62936a2f 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,98 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    Separator lastSeparator = null;\n+    boolean skipNextElem = false;\n+    for (int i = 0; i < elementPairs.size(); i++) {\n+        if (skipNextElem) {\n+            skipNextElem = false;\n+            continue;\n+        }\n+\n+        Object elem = elementPairs.get(i);\n+        if (elem instanceof Separator) {\n+            Separator separator = (Separator) elem;\n+            int endIndex = findSeparatorEndIndex(elementPairs, i + 1);\n+            List<Object> subList = elementPairs.subList(i, endIndex+1);\n+            PeriodFormatter subFormatter = toFormatter(subList, notPrinter, notParser);\n+            if (lastSeparator == null) {\n+                lastSeparator = separator.finish(\n+                        subFormatter.getPrinter(),\n+                        subFormatter.getParser());\n+            } else {\n+                PeriodFormatter innerFormatter = new PeriodFormatter(\n+                        subFormatter.getPrinter(),\n+                        subFormatter.getParser());\n+                lastSeparator = lastSeparator.finish(\n+                        innerFormatter.getPrinter(),\n+                        innerFormatter.getParser());\n+            }\n+            printer = getPrinter(printer, subFormatter.getPrinter());\n+            parser = getParser(parser, subFormatter.getParser());\n+            i = endIndex;\n+        } else {\n+            Object[] comp = createComposite(Collections.singletonList(elem));\n+            printer = getPrinter(printer, (PeriodPrinter) comp[0]);\n+            parser = getParser(parser, (PeriodParser) comp[1]);\n+        }\n+    }\n+\n+    if (!notPrinter && !notParser && (printer == null || parser == null)) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    if (lastSeparator == null) {\n+        return new PeriodFormatter(printer, parser);\n+    } else {\n+        return new PeriodFormatter(lastSeparator, lastSeparator);\n+    }\n+}\n+\n+private static int findSeparatorEndIndex(List<Object> elementPairs, int startIndex) {\n+    if (startIndex >= elementPairs.size()) {\n+        return startIndex - 1;\n+    }\n+\n+    for (int i = startIndex; i < elementPairs.size(); i++) {\n+        Object elem = elementPairs.get(i);\n+        if (elem instanceof Separator) {\n+            int endIndex = findSeparatorEndIndex(elementPairs, i + 1);\n+            if (endIndex == i) {\n+                return i;\n+            } else {\n+                i = endIndex;\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            // non-separator element; continue search\n         }\n     }\n \n+    return elementPairs.size() - 1;\n+}\n+\n+private static PeriodPrinter getPrinter(PeriodPrinter printer, PeriodPrinter subPrinter) {\n+    if (subPrinter != null) {\n+        return (printer == null ? subPrinter : new Composite(printer, subPrinter));\n+    } else {\n+        return printer;\n+    }\n+}\n+\n+private static PeriodParser getParser(PeriodParser parser, PeriodParser subParser) {\n+    if (subParser != null) {\n+        return (parser == null ? subParser : new Composite(parser, subParser));\n+    } else {\n+        return parser;\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: constructor Composite in class Composite cannot be applied to given types;",
    "test_result": "ERROR"
}