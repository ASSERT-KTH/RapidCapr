{
    "patch": "if (this.isUnknownType() && that.isUnknownType()) {\n    return new TypePair(null, null);\n} else if (this.isUnknownType()) {\n    return new TypePair(that.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n} else if (that.isUnknownType()) {\n    return new TypePair(this.restrictByNotNullOrUndefined(), this.restrictByNotNullOrUndefined());\n} else {\n    TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n    if (pair.typeA.isEquivalentTo(pair.typeB)) {\n        return new TypePair(pair.typeA, pair.typeB);\n    }\n    return pair;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..6693c9fb 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,19 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+if (this.isUnknownType() && that.isUnknownType()) {\n+    return new TypePair(null, null);\n+} else if (this.isUnknownType()) {\n+    return new TypePair(that.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+} else if (that.isUnknownType()) {\n+    return new TypePair(this.restrictByNotNullOrUndefined(), this.restrictByNotNullOrUndefined());\n+} else {\n+    TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+    if (pair.typeA.isEquivalentTo(pair.typeB)) {\n+        return new TypePair(pair.typeA, pair.typeB);\n+    }\n+    return pair;\n+}\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}