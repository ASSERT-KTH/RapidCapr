{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> sublistToRemoveFirstElement = elementPairs.subList(1, size);\n        while (sublistToRemoveFirstElement.get(0) instanceof Literal) {\n            int sublistSize = sublistToRemoveFirstElement.size();\n            if (sublistSize == 1) {\n                return new PeriodFormatter(null, null);\n            }\n            sublistToRemoveFirstElement = sublistToRemoveFirstElement.subList(1, sublistSize);\n            size -= 1;\n        }\n\n        PeriodFormatter formatter = toFormatter(sublistToRemoveFirstElement, notPrinter, notParser);\n        PeriodPrinter printer = formatter.getPrinter();\n        PeriodParser parser = formatter.getParser();\n        if (printer != null && parser != null) {\n            sep = sep.finish(printer, parser);\n        }\n        return new PeriodFormatter(sep, sep);\n    } else {\n        List<Object> nonLiteralPairs = new ArrayList<>();\n        boolean containsLiteral = false;\n        for (int i = 0; i < size; i++) {\n            Object pair = elementPairs.get(i);\n            if (pair instanceof Literal) {\n                containsLiteral = true;\n                if (i == size - 1) {\n                    nonLiteralPairs.add(new Composite((Object[]) elementPairs.subList(0, size - 1).toArray()));\n                }\n            } else {\n                nonLiteralPairs.add(pair);\n            }\n        }\n        if (containsLiteral) {\n            return toFormatter(nonLiteralPairs, notPrinter, notParser);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..061a771f 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,58 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> sublistToRemoveFirstElement = elementPairs.subList(1, size);\n+        while (sublistToRemoveFirstElement.get(0) instanceof Literal) {\n+            int sublistSize = sublistToRemoveFirstElement.size();\n+            if (sublistSize == 1) {\n+                return new PeriodFormatter(null, null);\n+            }\n+            sublistToRemoveFirstElement = sublistToRemoveFirstElement.subList(1, sublistSize);\n+            size -= 1;\n+        }\n+\n+        PeriodFormatter formatter = toFormatter(sublistToRemoveFirstElement, notPrinter, notParser);\n+        PeriodPrinter printer = formatter.getPrinter();\n+        PeriodParser parser = formatter.getParser();\n+        if (printer != null && parser != null) {\n+            sep = sep.finish(printer, parser);\n+        }\n+        return new PeriodFormatter(sep, sep);\n+    } else {\n+        List<Object> nonLiteralPairs = new ArrayList<>();\n+        boolean containsLiteral = false;\n+        for (int i = 0; i < size; i++) {\n+            Object pair = elementPairs.get(i);\n+            if (pair instanceof Literal) {\n+                containsLiteral = true;\n+                if (i == size - 1) {\n+                    nonLiteralPairs.add(new Composite((Object[]) elementPairs.subList(0, size - 1).toArray()));\n+                }\n+            } else {\n+                nonLiteralPairs.add(pair);\n+            }\n+        }\n+        if (containsLiteral) {\n+            return toFormatter(nonLiteralPairs, notPrinter, notParser);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}