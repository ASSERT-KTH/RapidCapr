{
    "patch": "public static String escapeHTML(String s) {\n    StringBuilder out = new StringBuilder(Math.max(16, s.length()));\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == '&') {\n            out.append(\"&amp;\");\n        } else if (c == '<') {\n            out.append(\"&lt;\");\n        } else if (c == '>') {\n            out.append(\"&gt;\");\n        } else if (c == '\\\"') {\n            out.append(\"&quot;\");\n        } else if (c == '\\'') {\n            out.append(\"&#x27;\");\n        } else if (c == '/') {\n            out.append(\"&#x2f;\");\n        } else if (Character.isISOControl(c) || !Character.isDefined(c)) {\n            out.append(\"&#\");\n            out.append((int)c);\n            out.append(\";\");\n        } else {\n            out.append(c);\n        }\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..29f1156b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,32 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeHTML(String s) {\n+    StringBuilder out = new StringBuilder(Math.max(16, s.length()));\n+    for (int i = 0; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        if (c == '&') {\n+            out.append(\"&amp;\");\n+        } else if (c == '<') {\n+            out.append(\"&lt;\");\n+        } else if (c == '>') {\n+            out.append(\"&gt;\");\n+        } else if (c == '\\\"') {\n+            out.append(\"&quot;\");\n+        } else if (c == '\\'') {\n+            out.append(\"&#x27;\");\n+        } else if (c == '/') {\n+            out.append(\"&#x2f;\");\n+        } else if (Character.isISOControl(c) || !Character.isDefined(c)) {\n+            out.append(\"&#\");\n+            out.append((int)c);\n+            out.append(\";\");\n+        } else {\n+            out.append(c);\n+        }\n+    }\n+    return out.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}