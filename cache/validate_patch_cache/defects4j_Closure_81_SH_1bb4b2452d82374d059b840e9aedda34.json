{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null || name.getLength() == 0) {\n        name = new Name(functionNode.getLineno(), \"\");\n        isUnnamedFunction = true;\n    }\n    Node node = new Node(Token.FUNCTION, name);\n    node.setLp(functionNode.getLp());\n    node.setRp(functionNode.getRp());\n    node.setIsGenerator(functionNode.isGenerator());\n    node.setIsAsyncFunction(functionNode.isAsyncFunction());\n    Node lp = new Node(Token.LP);\n    lp.setLineno(functionNode.getLineno());\n    lp.setCharno(position2charno(functionNode.getAbsolutePosition()\n            + functionNode.getLp()));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    if (isUnnamedFunction) {\n        node.putProp(Node.ORIGINALNAME_PROP, \"\");\n        node.setIsAnonymous(true);\n    }\n    return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..8f00ae86 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,36 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    Boolean isUnnamedFunction = false;\n+    if (name == null || name.getLength() == 0) {\n+        name = new Name(functionNode.getLineno(), \"\");\n+        isUnnamedFunction = true;\n+    }\n+    Node node = new Node(Token.FUNCTION, name);\n+    node.setLp(functionNode.getLp());\n+    node.setRp(functionNode.getRp());\n+    node.setIsGenerator(functionNode.isGenerator());\n+    node.setIsAsyncFunction(functionNode.isAsyncFunction());\n+    Node lp = new Node(Token.LP);\n+    lp.setLineno(functionNode.getLineno());\n+    lp.setCharno(position2charno(functionNode.getAbsolutePosition()\n+            + functionNode.getLp()));\n+    for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(lp);\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+    if (isUnnamedFunction) {\n+        node.putProp(Node.ORIGINALNAME_PROP, \"\");\n+        node.setIsAnonymous(true);\n+    }\n+    return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}