{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    if (comp[0] == null && notPrinter) {\n        return null;\n    }\n\n    if (comp[1] == null && notParser) {\n        return null;\n    }\n\n    PeriodPrinter printer = (PeriodPrinter) comp[0];\n    PeriodParser parser = (PeriodParser) comp[1];\n\n    if (printer == null) {\n        printer = ISOPeriodFormat.standard().getPrinter();\n    }\n\n    if (parser == null) {\n        parser = ISOPeriodFormat.standard().getParser();\n    }\n\n    if (elementPairs.size() >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter innerFormatter = toFormatter(elementPairs.subList(1, elementPairs.size()), false, false);\n        sep = sep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n        return new PeriodFormatter(sep, sep);\n    } else if (elementPairs.size() == 1) {\n        if (elementPairs.get(0) instanceof Separator) {\n            return new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);\n        } else {\n            throw new IllegalArgumentException(\"Odd number of elements without separator\");\n        }\n    } else if (elementPairs.isEmpty()) {\n        // No elements, so default formatter is used\n        return new PeriodFormatter(ISOPeriodFormat.standard().getPrinter(), ISOPeriodFormat.standard().getParser());\n    } else {\n        boolean strict = true;\n        int i;\n        for (i = 1; i < elementPairs.size(); i += 2) {\n            if (!(elementPairs.get(i) instanceof PeriodField)) {\n                strict = false;\n                break;\n            }\n        }\n        if (strict) {\n            // Only period fields, so use default separator\n            return new PeriodFormatter(printer, parser);\n        } else {\n            // At least one converter, so use separators\n            Separator separator = new Separator((String) null, (String) null, null, strict);\n            \n            List<Object> pairs = new ArrayList<>();\n            pairs.add(separator);\n            pairs.addAll(elementPairs);\n            \n            return toFormatter(pairs, notPrinter, notParser);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..49930a75 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,70 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+\n+    if (comp[0] == null && notPrinter) {\n+        return null;\n+    }\n+\n+    if (comp[1] == null && notParser) {\n+        return null;\n+    }\n+\n+    PeriodPrinter printer = (PeriodPrinter) comp[0];\n+    PeriodParser parser = (PeriodParser) comp[1];\n+\n+    if (printer == null) {\n+        printer = ISOPeriodFormat.standard().getPrinter();\n+    }\n+\n+    if (parser == null) {\n+        parser = ISOPeriodFormat.standard().getParser();\n+    }\n+\n+    if (elementPairs.size() >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter innerFormatter = toFormatter(elementPairs.subList(1, elementPairs.size()), false, false);\n+        sep = sep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    } else if (elementPairs.size() == 1) {\n+        if (elementPairs.get(0) instanceof Separator) {\n+            return new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalArgumentException(\"Odd number of elements without separator\");\n+        }\n+    } else if (elementPairs.isEmpty()) {\n+        // No elements, so default formatter is used\n+        return new PeriodFormatter(ISOPeriodFormat.standard().getPrinter(), ISOPeriodFormat.standard().getParser());\n+    } else {\n+        boolean strict = true;\n+        int i;\n+        for (i = 1; i < elementPairs.size(); i += 2) {\n+            if (!(elementPairs.get(i) instanceof PeriodField)) {\n+                strict = false;\n+                break;\n+            }\n+        }\n+        if (strict) {\n+            // Only period fields, so use default separator\n+            return new PeriodFormatter(printer, parser);\n+        } else {\n+            // At least one converter, so use separators\n+            Separator separator = new Separator((String) null, (String) null, null, strict);\n+            \n+            List<Object> pairs = new ArrayList<>();\n+            pairs.add(separator);\n+            pairs.addAll(elementPairs);\n+            \n+            return toFormatter(pairs, notPrinter, notParser);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}