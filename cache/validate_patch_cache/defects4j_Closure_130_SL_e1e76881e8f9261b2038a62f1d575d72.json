{
    "patch": "      if ((name.globalSets == 1 || name.aliasingGets > 0) && name.localSets == 0 && name.getDeclaration() != null &&\n          !name.isModuleExport() && name.canEliminate()) {\n        Ref decl = name.getDeclaration();\n        JSDocInfo info = NodeUtil.getBestJSDocInfo(decl.getNode());\n        if (info != null && info.isConstant()) {\n          List<Ref> refs = Lists.newArrayList(name.getRefs());\n          for (Ref ref : refs) {\n            if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n              if (inlineAliasIfPossible(ref, namespace)) {\n                name.removeRef(ref);\n              }\n            }\n          }\n        }\n      }\n\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..48f69e04 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,23 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if ((name.globalSets == 1 || name.aliasingGets > 0) && name.localSets == 0 && name.getDeclaration() != null &&\n+          !name.isModuleExport() && name.canEliminate()) {\n+        Ref decl = name.getDeclaration();\n+        JSDocInfo info = NodeUtil.getBestJSDocInfo(decl.getNode());\n+        if (info != null && info.isConstant()) {\n+          List<Ref> refs = Lists.newArrayList(name.getRefs());\n+          for (Ref ref : refs) {\n+            if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n+              if (inlineAliasIfPossible(ref, namespace)) {\n+                name.removeRef(ref);\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}