{
    "patch": "    public StringBuffer format(final Calendar calendar, final StringBuffer buf) {\n        final int originalLength = buf.length();\n        if (mTimeZoneForced) {\n            calendar.setTimeZone(mTimeZone);\n        }\n        applyRules(calendar, buf);\n        if (buf.length() == originalLength) {\n            throw new IllegalArgumentException(\"No date time elements were generated.\");\n        }\n        return buf;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..c059e192 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -867,12 +867,16 @@ public class FastDateFormat extends Format {\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n      */\n-    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n+    public StringBuffer format(final Calendar calendar, final StringBuffer buf) {\n+        final int originalLength = buf.length();\n         if (mTimeZoneForced) {\n-            calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n-        return applyRules(calendar, buf);\n+        applyRules(calendar, buf);\n+        if (buf.length() == originalLength) {\n+            throw new IllegalArgumentException(\"No date time elements were generated.\");\n+        }\n+        return buf;\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
    "test_result": "FAIL"
}