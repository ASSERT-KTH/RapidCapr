{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n          Set<String> inferredProperties = new HashSet<>();\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n            inferredProperties.add(prop);\n          } else if (!inferredProperties.contains(prop)) {\n            JSType declaredPropType = objType.getPropertyType(prop);\n            if (!propType.equals(declaredPropType)) {\n              objType.defineInferredProperty(prop, propType, null);\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..67a15144 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,19 +1121,26 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n+          Set<String> inferredProperties = new HashSet<>();\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+            inferredProperties.add(prop);\n+          } else if (!inferredProperties.contains(prop)) {\n+            JSType declaredPropType = objType.getPropertyType(prop);\n+            if (!propType.equals(declaredPropType)) {\n+              objType.defineInferredProperty(prop, propType, null);\n+            }\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}