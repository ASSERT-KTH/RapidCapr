{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors\n      // or have the @this annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n        return false;\n      }\n\n      // Don't traverse functions that have the @lends annotation\n      // referencing 'this' or '$jscomp.global'.\n      if (jsDoc != null && jsDoc.getLendsName() != null &&\n          (jsDoc.getLendsName().equals(\"this\") ||\n           jsDoc.getLendsName().equals(\"$jscomp.global\"))) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them.\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.GE ||\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      Node enclosingStatement = n.getParent();\n      if (enclosingStatement.getType() == Token.EXPR_RESULT) {\n        // Ignore immediately-invoked function expressions.\n        Node grandparent = enclosingStatement.getParent();\n        if (grandparent != null &&\n            grandparent.getType() == Token.BLOCK &&\n            grandparent.hasChildren() &&\n            grandparent.getFirstChild().equals(enclosingStatement)) {\n          return false;\n        }\n      }\n    }\n\n    // Only traverse the right side of the assignment if it's not an\n    // assignment to a prototype property or subproperty, or a global\n    // window assignment.\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (NodeUtil.isObjectLiteralKey(lhs)) {\n        if (rhs == n) {\n          return false;\n        }\n      } else if (NodeUtil.isPrototypeProperty(lhs)) {\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      } else if (lhs.matchesQualifiedName(\"window\")) {\n        return false;\n      } else if (NodeUtil.isGet(lhs)) {\n        if (NodeUtil.isName(lhs.getFirstChild(), \"Object\") &&\n            \"defineProperty\".equals(lhs.getLastChild().getString())) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e52bbc83 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,72 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      // Don't traverse functions that are constructors\n+      // or have the @this annotation.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n       if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+          (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that have the @lends annotation\n+      // referencing 'this' or '$jscomp.global'.\n+      if (jsDoc != null && jsDoc.getLendsName() != null &&\n+          (jsDoc.getLendsName().equals(\"this\") ||\n+           jsDoc.getLendsName().equals(\"$jscomp.global\"))) {\n         return false;\n       }\n \n       // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n+      // be able to have a @this annotation associated with them.\n       int pType = parent.getType();\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n-\n-            // object literal keys\n+            pType == Token.GE ||\n             pType == Token.STRING ||\n             pType == Token.NUMBER)) {\n         return false;\n       }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+      Node enclosingStatement = n.getParent();\n+      if (enclosingStatement.getType() == Token.EXPR_RESULT) {\n+        // Ignore immediately-invoked function expressions.\n+        Node grandparent = enclosingStatement.getParent();\n+        if (grandparent != null &&\n+            grandparent.getType() == Token.BLOCK &&\n+            grandparent.hasChildren() &&\n+            grandparent.getFirstChild().equals(enclosingStatement)) {\n+          return false;\n+        }\n+      }\n     }\n \n+    // Only traverse the right side of the assignment if it's not an\n+    // assignment to a prototype property or subproperty, or a global\n+    // window assignment.\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      if (NodeUtil.isObjectLiteralKey(lhs)) {\n+        if (rhs == n) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+      } else if (NodeUtil.isPrototypeProperty(lhs)) {\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n-      }\n-    }\n-\n-    return true;\n-  }\n+      } else if (lhs.matchesQualifiedName(\"window\")) {\n+        return false;\n+      } else if (NodeUtil.isGet(lhs)) {\n+        if (NodeUtil.isName(lhs.getFirstChild(), \"Object\") &&\n+            \"defineProperty\".equals(lhs.getLastChild().getString())) {\n+          return false;\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}