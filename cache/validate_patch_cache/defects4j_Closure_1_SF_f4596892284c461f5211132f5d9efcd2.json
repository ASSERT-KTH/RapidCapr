{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    ControlFlowAnalysis unusedCfa = new ControlFlowAnalysis(compiler, false, true);\n    unusedCfa.process(null, fnScope.getRootNode());\n    // Record which symbols are used.\n    Sets.newHashSet(referenced);\n    for (Var v : unusedCfa.getUnreferenced()) {\n      String name = v.getName();\n      Node closestDecl = NodeUtil.getClosestNodeToEnclosingScope(v.getNode());\n      boolean isParamList = NodeUtil.isFunctionParameters(closestDecl);\n      if (!isParamList || !NodeUtil.isFunctionExpression(fnScope.getRootNode())) {\n        Node varName = NodeUtil.newName(compiler, name, closestDecl);\n        NodeUtil.getEnclosingBlock(closestDecl).replaceChild(closestDecl, varName);\n        compiler.reportCodeChange();\n      }\n    }\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e9630d69 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -377,6 +377,21 @@ class RemoveUnusedVars\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n+    ControlFlowAnalysis unusedCfa = new ControlFlowAnalysis(compiler, false, true);\n+    unusedCfa.process(null, fnScope.getRootNode());\n+    // Record which symbols are used.\n+    Sets.newHashSet(referenced);\n+    for (Var v : unusedCfa.getUnreferenced()) {\n+      String name = v.getName();\n+      Node closestDecl = NodeUtil.getClosestNodeToEnclosingScope(v.getNode());\n+      boolean isParamList = NodeUtil.isFunctionParameters(closestDecl);\n+      if (!isParamList || !NodeUtil.isFunctionExpression(fnScope.getRootNode())) {\n+        Node varName = NodeUtil.newName(compiler, name, closestDecl);\n+        NodeUtil.getEnclosingBlock(closestDecl).replaceChild(closestDecl, varName);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}