{
    "patch": "      Node right = parent.getNext();\n      if (right != null && NodeUtil.mayBeLValue(right)) {\n        Node rparent = right.getParent();\n        if (rparent.getType() == Token.ASSIGN &&\n            NodeUtil.isPrototypeProperty(rparent.getParent())) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e8be04e5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node right = parent.getNext();\n+      if (right != null && NodeUtil.mayBeLValue(right)) {\n+        Node rparent = right.getParent();\n+        if (rparent.getType() == Token.ASSIGN &&\n+            NodeUtil.isPrototypeProperty(rparent.getParent())) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}