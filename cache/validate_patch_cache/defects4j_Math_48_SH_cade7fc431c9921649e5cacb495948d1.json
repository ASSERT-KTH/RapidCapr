{
    "patch": "// Detect early that algorithm is stuck, instead of waiting\n// for the maximum number of iterations to be exceeded.\nfinal double absDiff = FastMath.abs(x - x1);\nif (absDiff < FastMath.ulp(x1)) {\n    throw new ConvergenceException();\n} else if (absDiff / FastMath.max(FastMath.abs(x), FastMath.abs(x1)) < rtol + atol) {\n    if (FastMath.abs(fx) <= ftol) {\n        switch (allowed) {\n            case ANY_SIDE:\n                return x;\n            case LEFT_SIDE:\n                return inverted ? x : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x;\n            case BELOW_SIDE:\n                return (fx <= 0) ? x : x0;\n            case ABOVE_SIDE:\n                return (fx >= 0) ? x : x0;\n            default:\n                throw new MathInternalError();\n        }\n    }\n    throw new ConvergenceException();\n}\n\n// update bounds and function values\nif (f1 * fx < 0) {\n    x0 = x1;\n    f0 = f1;\n    inverted = !inverted;\n}\nx1 = x;\nf1 = fx;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..8f1a1391d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,39 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting\n+// for the maximum number of iterations to be exceeded.\n+final double absDiff = FastMath.abs(x - x1);\n+if (absDiff < FastMath.ulp(x1)) {\n+    throw new ConvergenceException();\n+} else if (absDiff / FastMath.max(FastMath.abs(x), FastMath.abs(x1)) < rtol + atol) {\n+    if (FastMath.abs(fx) <= ftol) {\n+        switch (allowed) {\n+            case ANY_SIDE:\n+                return x;\n+            case LEFT_SIDE:\n+                return inverted ? x : x0;\n+            case RIGHT_SIDE:\n+                return inverted ? x0 : x;\n+            case BELOW_SIDE:\n+                return (fx <= 0) ? x : x0;\n+            case ABOVE_SIDE:\n+                return (fx >= 0) ? x : x0;\n+            default:\n+                throw new MathInternalError();\n+        }\n+    }\n+    throw new ConvergenceException();\n+}\n+\n+// update bounds and function values\n+if (f1 * fx < 0) {\n+    x0 = x1;\n+    f0 = f1;\n+    inverted = !inverted;\n+}\n+x1 = x;\n+f1 = fx;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "org.apache.commons.math.exception.ConvergenceException: illegal state: convergence failed",
    "test_result": "FAIL"
}