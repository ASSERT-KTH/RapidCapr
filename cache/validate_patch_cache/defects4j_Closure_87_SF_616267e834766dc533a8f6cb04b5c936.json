{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.EXPR_RESULT) {\n    Node maybeBlock = n.getFirstChild();\n    if (maybeBlock.getType() == Token.BLOCK) {\n      if (NodeUtil.mayHaveSideEffects(maybeBlock)) {\n        // Don't fold blocks that have side effects.\n        return false;\n      }\n      Node maybeExpr = maybeBlock.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.getType() != Token.CALL) {\n        // This block contains a single expression. We can fold it.\n        return true;\n      }\n    }\n  } else if (n.getType() == Token.BLOCK) {\n    if (n.getChildCount() == 1) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.getType() != Token.CALL) {\n        // This block contains a single expression. We can fold it.\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2b94f392 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,31 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.EXPR_RESULT) {\n+    Node maybeBlock = n.getFirstChild();\n+    if (maybeBlock.getType() == Token.BLOCK) {\n+      if (NodeUtil.mayHaveSideEffects(maybeBlock)) {\n+        // Don't fold blocks that have side effects.\n+        return false;\n+      }\n+      Node maybeExpr = maybeBlock.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.getType() != Token.CALL) {\n+        // This block contains a single expression. We can fold it.\n+        return true;\n+      }\n+    }\n+  } else if (n.getType() == Token.BLOCK) {\n+    if (n.getChildCount() == 1) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.getType() != Token.CALL) {\n+        // This block contains a single expression. We can fold it.\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}