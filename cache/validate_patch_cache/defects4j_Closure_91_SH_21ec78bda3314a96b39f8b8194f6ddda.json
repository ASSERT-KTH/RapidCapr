{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (isLvalue(parent) && selectedNodeHasType(n, Token.FUNCTION)) {\n        Node grandparent = parent.getParent();\n        if (isGetPropLvalue(grandparent)) {\n          Node lvalueRoot = getLvalueRoot(grandparent);\n          if (isPrototypeAccess(lvalueRoot)) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..cbe82789 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (isLvalue(parent) && selectedNodeHasType(n, Token.FUNCTION)) {\n+        Node grandparent = parent.getParent();\n+        if (isGetPropLvalue(grandparent)) {\n+          Node lvalueRoot = getLvalueRoot(grandparent);\n+          if (isPrototypeAccess(lvalueRoot)) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}