{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.BLOCK:\n          Node grandparent = parent.getParent();\n          if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n            // Handle hoisted functions inside blocks within a function.\n            for (Node child : n.children()) {\n              if (child.getType() == Token.FUNCTION) {\n                defineFunctionLiteral(child, n);\n              }\n            }\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d2d4f4ac 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,6 +1462,17 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.BLOCK:\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n+            // Handle hoisted functions inside blocks within a function.\n+            for (Node child : n.children()) {\n+              if (child.getType() == Token.FUNCTION) {\n+                defineFunctionLiteral(child, n);\n+              }\n+            }\n+          }\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}