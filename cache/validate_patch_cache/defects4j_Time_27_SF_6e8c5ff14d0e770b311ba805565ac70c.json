{
    "patch": "private static Object[] createComposite(List<Object> elementPairs) {\n    if (elementPairs.size() == 0) {\n        return new Object[]{null, null};\n    }\n    Object con = elementPairs.get(0);\n    Object comp = con;\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    if (comp instanceof PeriodPrinter) {\n        printer = (PeriodPrinter) comp;\n    }\n    if (comp instanceof PeriodParser) {\n        parser = (PeriodParser) comp;\n    }\n    for (int i = 1; i < elementPairs.size(); i++) {\n        con = elementPairs.get(i);\n        if (con instanceof PeriodPrinter) {\n            if (printer != null) {\n                printer = new Composite(periodTranslators(printer), new PeriodPrinter[]{(PeriodPrinter) con});\n            } else {\n                printer = (PeriodPrinter) con;\n            }\n        }\n        if (con instanceof PeriodParser) {\n            if (parser != null) {\n                parser = new Composite(periodTranslators(parser), new PeriodParser[]{(PeriodParser) con});\n            } else {\n                parser = (PeriodParser) con;\n            }\n        }\n        comp = new Composite(comp, con);\n    }\n    return new Object[]{printer, parser};\n}\n\nprivate static PeriodPrinter[] periodTranslators (PeriodPrinter periodPrinter){\n    if(periodPrinter instanceof Composite){\n        List<PeriodPrinter> listPrinter = new ArrayList<>();\n        for(PeriodPrinter printer : ((Composite) periodPrinter).iPrinters){\n            listPrinter.addAll(Arrays.asList(periodTranslators(printer)));\n        }\n        return listPrinter.toArray(new PeriodPrinter[listPrinter.size()]);\n    }\n    return new PeriodPrinter[]{periodPrinter};\n}\n\nprivate static PeriodParser[] periodTranslators (PeriodParser periodParser){\n    if(periodParser instanceof Composite){\n        List<PeriodParser> listParser = new ArrayList<>();\n        for(PeriodParser parser : ((Composite) periodParser).iParsers){\n            listParser.addAll(Arrays.asList(periodTranslators(parser)));\n        }\n        return listParser.toArray(new PeriodParser[listParser.size()]);\n    }\n    return new PeriodParser[]{periodParser};\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c8a55fda 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,62 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static Object[] createComposite(List<Object> elementPairs) {\n+    if (elementPairs.size() == 0) {\n+        return new Object[]{null, null};\n+    }\n+    Object con = elementPairs.get(0);\n+    Object comp = con;\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    if (comp instanceof PeriodPrinter) {\n+        printer = (PeriodPrinter) comp;\n+    }\n+    if (comp instanceof PeriodParser) {\n+        parser = (PeriodParser) comp;\n+    }\n+    for (int i = 1; i < elementPairs.size(); i++) {\n+        con = elementPairs.get(i);\n+        if (con instanceof PeriodPrinter) {\n+            if (printer != null) {\n+                printer = new Composite(periodTranslators(printer), new PeriodPrinter[]{(PeriodPrinter) con});\n+            } else {\n+                printer = (PeriodPrinter) con;\n+            }\n+        }\n+        if (con instanceof PeriodParser) {\n+            if (parser != null) {\n+                parser = new Composite(periodTranslators(parser), new PeriodParser[]{(PeriodParser) con});\n+            } else {\n+                parser = (PeriodParser) con;\n+            }\n         }\n+        comp = new Composite(comp, con);\n     }\n+    return new Object[]{printer, parser};\n+}\n+\n+private static PeriodPrinter[] periodTranslators (PeriodPrinter periodPrinter){\n+    if(periodPrinter instanceof Composite){\n+        List<PeriodPrinter> listPrinter = new ArrayList<>();\n+        for(PeriodPrinter printer : ((Composite) periodPrinter).iPrinters){\n+            listPrinter.addAll(Arrays.asList(periodTranslators(printer)));\n+        }\n+        return listPrinter.toArray(new PeriodPrinter[listPrinter.size()]);\n+    }\n+    return new PeriodPrinter[]{periodPrinter};\n+}\n+\n+private static PeriodParser[] periodTranslators (PeriodParser periodParser){\n+    if(periodParser instanceof Composite){\n+        List<PeriodParser> listParser = new ArrayList<>();\n+        for(PeriodParser parser : ((Composite) periodParser).iParsers){\n+            listParser.addAll(Arrays.asList(periodTranslators(parser)));\n+        }\n+        return listParser.toArray(new PeriodParser[listParser.size()]);\n+    }\n+    return new PeriodParser[]{periodParser};\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}