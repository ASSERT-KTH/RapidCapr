{
    "patch": "if (val.startsWith(\"+\") || val.startsWith(\"-\")) {\n    char secondChar = val.charAt(1);\n    if (val.startsWith(\"--\") || (val.startsWith(\"-0\") && Character.isDigit(secondChar))) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        return null;\n    }\n    if (val.equals(\"+\") || val.equals(\"-\")) {\n        return null;\n    }\n    if (val.startsWith(\"+\")) {\n        val = val.substring(1);\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n    // Do not parse if it contains more than one decimal point or if the last character is a decimal point\n    if (StringUtils.countMatches(val, \".\") > 1 || val.charAt(val.length() - 1) == '.') {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    return isAllZeros(val) ? createInteger(\"0\") : createNumber(val);\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n    return createInteger(val);\n}\n// Do not parse if it contains more than one decimal point or if the last character is a decimal point\nif (StringUtils.countMatches(val, \".\") > 1 || val.charAt(val.length() - 1) == '.') {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nreturn isAllZeros(val) ? createInteger(\"0\") : createNumber(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..54c121ad 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,38 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.startsWith(\"+\") || val.startsWith(\"-\")) {\n+    char secondChar = val.charAt(1);\n+    if (val.startsWith(\"--\") || (val.startsWith(\"-0\") && Character.isDigit(secondChar))) {\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear \n+        // to be in specification of class. OS X Java parses it to \n+        // a wrong value.\n+        return null;\n+    }\n+    if (val.equals(\"+\") || val.equals(\"-\")) {\n+        return null;\n+    }\n+    if (val.startsWith(\"+\")) {\n+        val = val.substring(1);\n+    }\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        return createInteger(val);\n+    }\n+    // Do not parse if it contains more than one decimal point or if the last character is a decimal point\n+    if (StringUtils.countMatches(val, \".\") > 1 || val.charAt(val.length() - 1) == '.') {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    return isAllZeros(val) ? createInteger(\"0\") : createNumber(val);\n+}\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+    return createInteger(val);\n+}\n+// Do not parse if it contains more than one decimal point or if the last character is a decimal point\n+if (StringUtils.countMatches(val, \".\") > 1 || val.charAt(val.length() - 1) == '.') {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+return isAllZeros(val) ? createInteger(\"0\") : createNumber(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}