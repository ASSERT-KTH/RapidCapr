{
    "patch": "// union types\nif (that instanceof UnionType) {\n  TypePair p = that.getTypesUnderInequality(this);\n  return new TypePair(p.typeB, p.typeA);\n}\n\n// other types\nEqualityResult comparisonResult = this.testForEquality(that);\nif (comparisonResult.isTrue()) {\n  return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n} else if (comparisonResult.isFalse() || this.isUnknownType() || that.isUnknownType()) {\n  return new TypePair(null, null);\n} else {\n  return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..f28f1c2b 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,21 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+// union types\n+if (that instanceof UnionType) {\n+  TypePair p = that.getTypesUnderInequality(this);\n+  return new TypePair(p.typeB, p.typeA);\n+}\n+\n+// other types\n+EqualityResult comparisonResult = this.testForEquality(that);\n+if (comparisonResult.isTrue()) {\n+  return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+} else if (comparisonResult.isFalse() || this.isUnknownType() || that.isUnknownType()) {\n+  return new TypePair(null, null);\n+} else {\n+  return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+}\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}