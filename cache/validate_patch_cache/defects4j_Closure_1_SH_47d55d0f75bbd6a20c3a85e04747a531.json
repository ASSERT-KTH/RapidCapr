{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      List<Node> toRemove = new ArrayList<>();\n      boolean shouldRemove = false;\n      for (int i = 0; i < argList.getChildCount(); i++) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n\n        // check whether the argument is referenced\n        if (!referenced.contains(var)) {\n          shouldRemove = true;\n          toRemove.add(arg);\n        } else if (shouldRemove) {\n          // if we have already found an unreferenced argument, don't allow new\n          // referenced arguments that follow it further along in the param list\n          for (Node argToRemove : toRemove) {\n            argList.removeChild(argToRemove);\n            compiler.reportCodeChange();\n          }\n          return;\n        }\n      }\n      // remove all unreferenced arguments at the end of the arg list\n      for (Node argToRemove : toRemove) {\n        argList.removeChild(argToRemove);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..67b0d217 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      List<Node> toRemove = new ArrayList<>();\n+      boolean shouldRemove = false;\n+      for (int i = 0; i < argList.getChildCount(); i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+\n+        // check whether the argument is referenced\n+        if (!referenced.contains(var)) {\n+          shouldRemove = true;\n+          toRemove.add(arg);\n+        } else if (shouldRemove) {\n+          // if we have already found an unreferenced argument, don't allow new\n+          // referenced arguments that follow it further along in the param list\n+          for (Node argToRemove : toRemove) {\n+            argList.removeChild(argToRemove);\n+            compiler.reportCodeChange();\n+          }\n+          return;\n+        }\n+      }\n+      // remove all unreferenced arguments at the end of the arg list\n+      for (Node argToRemove : toRemove) {\n+        argList.removeChild(argToRemove);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}