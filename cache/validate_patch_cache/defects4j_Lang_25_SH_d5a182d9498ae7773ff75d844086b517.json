{
    "patch": "StringBuffer newStr = new StringBuffer();\nfor (int i=0;i<str.length();i++) {\n    char ch = str.charAt(i);\n    if (ch == '\\\\') {\n        if (i+2 > str.length())\n            break;\n        char nextChar = str.charAt(i+1);\n        if ((nextChar >= '0') && (nextChar <= '7')) {\n            String octalCode = str.substring(i+1,i+4);\n            newStr.append((char)Integer.parseInt(octalCode, 8));\n            i += 3;\n        } else {\n            switch (nextChar) {\n                case '\\\"': newStr.append('\\\"'); i++; break;\n                case '\\\\': newStr.append('\\\\'); i++; break;\n                case 'b': newStr.append('\\b'); i++; break;\n                case 'f': newStr.append('\\f'); i++; break;\n                case 'n': newStr.append('\\n'); i++; break;\n                case 'r': newStr.append('\\r'); i++; break;\n                case 't': newStr.append('\\t'); i++; break;\n                case 'u': \n                    if (i+6 > str.length())\n                        break;\n                    String unicodeCode = str.substring(i+2,i+6);\n                    char unicodeChar = (char)Integer.parseInt(unicodeCode, 16);\n                    newStr.append(unicodeChar);\n                    i += 5;\n                    break;\n                default: break;\n            }\n        }\n    } else {\n        newStr.append(ch);\n    }\n}\nString result = newStr.toString();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}