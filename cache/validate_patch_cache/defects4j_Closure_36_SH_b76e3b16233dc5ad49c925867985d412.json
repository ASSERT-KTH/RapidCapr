{
    "patch": "          if (value.isQualifiedName()\n              && convention.isPropertyRenameFunction(value.getLastChild().getString())) {\n            // Make sure it's a singleton class\n            Node className = AstUtil.getPrototypeClassName(value.getParent());\n            if (className == null\n                || !compiler.getCodingConvention().isSingletonGetter(className, value)) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..815ffd51 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,14 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          if (value.isQualifiedName()\n+              && convention.isPropertyRenameFunction(value.getLastChild().getString())) {\n+            // Make sure it's a singleton class\n+            Node className = AstUtil.getPrototypeClassName(value.getParent());\n+            if (className == null\n+                || !compiler.getCodingConvention().isSingletonGetter(className, value)) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}