{
    "patch": "if (NodeUtil.isObjectLitKey(parent, n)) {\n  // If the function is a key for an object literal, don't traverse it unless the\n  // object is a prototype assignment or the key is in a call or new expression.\n  Node objlit = parent.getParent();\n  if (objlit == null ||\n      !NodeUtil.isObjectLit(objlit) ||\n      !NodeUtil.isFunctionObjectKey(n, objlit)) {\n    return false;\n  }\n  Node owner = objlit.getParent();\n  if (owner == null ||\n      !NodeUtil.isNormalOrHookIfStatement(owner) ||\n      !NodeUtil.mayBeExpression(owner.getFirstChild()) ||\n      !NodeUtil.isExpressionResultUsed(owner)) {\n    return false;\n  }\n  Node call = owner.getFirstChild();\n  if (call.getType() == Token.EXPR_RESULT) {\n    call = call.getFirstChild();\n  }\n  if (!NodeUtil.isCallOrNew(call)) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9f031ece 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,30 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (NodeUtil.isObjectLitKey(parent, n)) {\n+  // If the function is a key for an object literal, don't traverse it unless the\n+  // object is a prototype assignment or the key is in a call or new expression.\n+  Node objlit = parent.getParent();\n+  if (objlit == null ||\n+      !NodeUtil.isObjectLit(objlit) ||\n+      !NodeUtil.isFunctionObjectKey(n, objlit)) {\n+    return false;\n+  }\n+  Node owner = objlit.getParent();\n+  if (owner == null ||\n+      !NodeUtil.isNormalOrHookIfStatement(owner) ||\n+      !NodeUtil.mayBeExpression(owner.getFirstChild()) ||\n+      !NodeUtil.isExpressionResultUsed(owner)) {\n+    return false;\n+  }\n+  Node call = owner.getFirstChild();\n+  if (call.getType() == Token.EXPR_RESULT) {\n+    call = call.getFirstChild();\n+  }\n+  if (!NodeUtil.isCallOrNew(call)) {\n+    return false;\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}