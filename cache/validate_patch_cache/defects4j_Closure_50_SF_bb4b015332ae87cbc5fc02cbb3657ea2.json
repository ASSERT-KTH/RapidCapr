{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      functionName.getType() != Token.STRING ||\n      !\"join\".equals(functionName.getString())) {\n    return n;\n  }\n  String joinString = \",\";\n  if (right != null) {\n    joinString = NodeUtil.getStringValue(right);\n  }\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (elem.getType() == Token.EMPTY || NodeUtil.isImmutableValue(elem)) {\n      String str = NodeUtil.getArrayElementStringValue(elem);\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(str);\n    } else {\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        // + 2 for the quotes\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(\n            Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    prev = elem;\n  }\n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    // + 2 for the quotes\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n        Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  foldedSize += arrayFoldedChildren.size() - 1;\n  int originalSize = InlineCostEstimator.getCost(n);\n  if (arrayFoldedChildren.isEmpty()) {\n    Node emptyStringNode = Node.newString(\"\");\n    n.replaceWith(emptyStringNode);\n    reportCodeChange();\n    return emptyStringNode;\n  } else if (arrayFoldedChildren.size() == 1) {\n    Node foldedStringNode = arrayFoldedChildren.get(0);\n    if (foldedSize <= originalSize) {\n      foldedStringNode.srcrefTree(n);\n      n.replaceWith(foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    }\n  } else {\n    int kJoinOverhead = \"[].join()\".length() + ((right == null) ? 0 :\n        InlineCostEstimator.getCost(right));\n    foldedSize += kJoinOverhead;\n    if (foldedSize <= originalSize) {\n      Node newArray = new Node(Token.ARRAYLIT);\n      for (Node node : arrayFoldedChildren) {\n        newArray.addChildToBack(node);\n      }\n      Node joinCall = new Node(Token.CALL, newArray, new Node(Token.STRING, joinString));\n      if (right != null) {\n        joinCall.addChildToBack(right.cloneTree());\n      }\n      joinCall.srcrefTree(n);\n      n.replaceWith(joinCall);\n      reportCodeChange();\n      return joinCall;\n    }\n  }\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..ea282f08 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,96 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n-\n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n-\n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n-\n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n-\n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n+  Node right = callTarget.getNext();\n+  if (right != null && !NodeUtil.isImmutableValue(right)) {\n+    return n;\n+  }\n+  Node arrayNode = callTarget.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n+  if (arrayNode.getType() != Token.ARRAYLIT ||\n+      functionName.getType() != Token.STRING ||\n+      !\"join\".equals(functionName.getString())) {\n+    return n;\n+  }\n+  String joinString = \",\";\n+  if (right != null) {\n+    joinString = NodeUtil.getStringValue(right);\n+  }\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = null;\n+  int foldedSize = 0;\n+  Node prev = null;\n+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n+    if (elem.getType() == Token.EMPTY || NodeUtil.isImmutableValue(elem)) {\n+      String str = NodeUtil.getArrayElementStringValue(elem);\n+      if (sb == null) {\n+        sb = new StringBuilder();\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        sb.append(joinString);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      sb.append(str);\n+    } else {\n+      if (sb != null) {\n+        Preconditions.checkNotNull(prev);\n+        // + 2 for the quotes\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(\n+            Node.newString(sb.toString()).copyInformationFrom(prev));\n+        sb = null;\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    prev = elem;\n+  }\n+  if (sb != null) {\n+    Preconditions.checkNotNull(prev);\n+    // + 2 for the quotes\n+    foldedSize += sb.length() + 2;\n+    arrayFoldedChildren.add(\n+        Node.newString(sb.toString()).copyInformationFrom(prev));\n+  }\n+  foldedSize += arrayFoldedChildren.size() - 1;\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  if (arrayFoldedChildren.isEmpty()) {\n+    Node emptyStringNode = Node.newString(\"\");\n+    n.replaceWith(emptyStringNode);\n+    reportCodeChange();\n+    return emptyStringNode;\n+  } else if (arrayFoldedChildren.size() == 1) {\n+    Node foldedStringNode = arrayFoldedChildren.get(0);\n+    if (foldedSize <= originalSize) {\n+      foldedStringNode.srcrefTree(n);\n+      n.replaceWith(foldedStringNode);\n+      reportCodeChange();\n+      return foldedStringNode;\n+    }\n+  } else {\n+    int kJoinOverhead = \"[].join()\".length() + ((right == null) ? 0 :\n+        InlineCostEstimator.getCost(right));\n+    foldedSize += kJoinOverhead;\n+    if (foldedSize <= originalSize) {\n+      Node newArray = new Node(Token.ARRAYLIT);\n+      for (Node node : arrayFoldedChildren) {\n+        newArray.addChildToBack(node);\n+      }\n+      Node joinCall = new Node(Token.CALL, newArray, new Node(Token.STRING, joinString));\n+      if (right != null) {\n+        joinCall.addChildToBack(right.cloneTree());\n+      }\n+      joinCall.srcrefTree(n);\n+      n.replaceWith(joinCall);\n+      reportCodeChange();\n+      return joinCall;\n     }\n-\n-    return n;\n   }\n+  return n;\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +622,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}