{
    "patch": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData();\n    cachedL = null;\n    cachedLT = null;\n\n    boolean positiveDefinite = true;\n\n    // Check for positive definiteness at the beginning\n    for (int i = 0; i < order; ++i) {\n\n        final double[] ltI = lTData[i];\n        final double diagonalElement = ltI[i];\n\n        if (diagonalElement <= absolutePositivityThreshold) {\n            positiveDefinite = false;\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        for (int j = i + 1; j < order; ++j) {\n            final double[] ltJ = lTData[j];\n            final double offDiagonalElement = ltI[j];\n            final double symmetricOffDiagonalElement = ltJ[i];\n            final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(offDiagonalElement), Math.abs(symmetricOffDiagonalElement));\n            if (Math.abs(offDiagonalElement - symmetricOffDiagonalElement) > maxDelta) {\n                positiveDefinite = false;\n                throw new NotSymmetricMatrixException();\n            }\n            ltJ[i] = 0;\n        }\n    }\n\n    if (positiveDefinite) {\n        // Do Cholesky decomposition\n        for (int i = 0; i < order; ++i) {\n            final double[] ltI = lTData[i];\n\n            for (int q = 0; q < i; ++q) {\n                final double[] ltQ = lTData[q];\n                final double ltIQ = ltI[q];\n                ltI[i] -= ltIQ * ltIQ;\n            }\n\n            final double diagonalElement = ltI[i];\n            if (diagonalElement <= 0.0) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n            ltI[i] = Math.sqrt(diagonalElement);\n            final double inverse = 1.0 / ltI[i];\n\n            for (int j = i + 1; j < order; ++j) {\n                final double[] ltJ = lTData[j];\n                final double ltIJ = ltJ[i];\n                final double symmetricOffDiagonalElement = ltI[j];\n                ltI[j] = (ltIJ - ltI[q] * ltJ[q]) * inverse;\n            }\n            ltI[i] *= inverse;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..7b3a56aaf 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,65 +90,77 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n-                                     final double relativeSymmetryThreshold,\n-                                     final double absolutePositivityThreshold)\n+public CholeskyDecompositionImpl(final RealMatrix matrix,\n+                                 final double relativeSymmetryThreshold,\n+                                 final double absolutePositivityThreshold)\n         throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n+        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n \n-        if (!matrix.isSquare()) {\n-            throw new NonSquareMatrixException(matrix.getRowDimension(),\n-                                               matrix.getColumnDimension());\n-        }\n+    if (!matrix.isSquare()) {\n+        throw new NonSquareMatrixException(matrix.getRowDimension(),\n+                matrix.getColumnDimension());\n+    }\n \n-        final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n-        cachedL  = null;\n-        cachedLT = null;\n+    final int order = matrix.getRowDimension();\n+    lTData = matrix.getData();\n+    cachedL = null;\n+    cachedLT = null;\n \n-        // check the matrix before transformation\n-        for (int i = 0; i < order; ++i) {\n+    boolean positiveDefinite = true;\n \n-            final double[] lI = lTData[i];\n+    // Check for positive definiteness at the beginning\n+    for (int i = 0; i < order; ++i) {\n \n-            if (lTData[i][i] < absolutePositivityThreshold) {\n-                throw new NotPositiveDefiniteMatrixException();\n+        final double[] ltI = lTData[i];\n+        final double diagonalElement = ltI[i];\n+\n+        if (diagonalElement <= absolutePositivityThreshold) {\n+            positiveDefinite = false;\n+            throw new NotPositiveDefiniteMatrixException();\n+        }\n+\n+        for (int j = i + 1; j < order; ++j) {\n+            final double[] ltJ = lTData[j];\n+            final double offDiagonalElement = ltI[j];\n+            final double symmetricOffDiagonalElement = ltJ[i];\n+            final double maxDelta =\n+                    relativeSymmetryThreshold * Math.max(Math.abs(offDiagonalElement), Math.abs(symmetricOffDiagonalElement));\n+            if (Math.abs(offDiagonalElement - symmetricOffDiagonalElement) > maxDelta) {\n+                positiveDefinite = false;\n+                throw new NotSymmetricMatrixException();\n             }\n-            // check off-diagonal elements (and reset them to 0)\n-            for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n-                final double maxDelta =\n-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n-                    throw new NotSymmetricMatrixException();\n-                }\n-                lJ[i] = 0;\n-           }\n+            ltJ[i] = 0;\n         }\n+    }\n \n-        // transform the matrix\n+    if (positiveDefinite) {\n+        // Do Cholesky decomposition\n         for (int i = 0; i < order; ++i) {\n-\n             final double[] ltI = lTData[i];\n \n-            // check diagonal element\n+            for (int q = 0; q < i; ++q) {\n+                final double[] ltQ = lTData[q];\n+                final double ltIQ = ltI[q];\n+                ltI[i] -= ltIQ * ltIQ;\n+            }\n \n-            ltI[i] = Math.sqrt(ltI[i]);\n+            final double diagonalElement = ltI[i];\n+            if (diagonalElement <= 0.0) {\n+                throw new NotPositiveDefiniteMatrixException();\n+            }\n+            ltI[i] = Math.sqrt(diagonalElement);\n             final double inverse = 1.0 / ltI[i];\n \n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n-                }\n+            for (int j = i + 1; j < order; ++j) {\n+                final double[] ltJ = lTData[j];\n+                final double ltIJ = ltJ[i];\n+                final double symmetricOffDiagonalElement = ltI[j];\n+                ltI[j] = (ltIJ - ltI[q] * ltJ[q]) * inverse;\n             }\n-\n+            ltI[i] *= inverse;\n         }\n-\n     }\n+}\n \n     /** {@inheritDoc} */\n     public RealMatrix getL() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}