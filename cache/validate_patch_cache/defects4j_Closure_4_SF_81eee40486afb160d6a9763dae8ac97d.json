{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      if (registry.isLastGeneration()) {\n        return getReferencedType();\n      }\n      finishPropertyContinuations();\n      return this;\n    }\n    \n    // Produce warning only if the named type is not resolved.\n    t.warning(JSError.make(nameNode, RESOLUTION_ERROR, name));\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    \n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      if (registry.isLastGeneration()) {\n        return getReferencedType();\n      }\n      finishPropertyContinuations();\n      return this;\n    }\n    \n    // Produce warning only if the named type is not resolved.\n    t.warning(JSError.make(nameNode, RESOLUTION_ERROR, name));\n    return this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..df4af852 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,10 +182,6 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n@@ -193,22 +189,31 @@ class NamedType extends ProxyObjectType {\n \n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n+      if (registry.isLastGeneration()) {\n+        return getReferencedType();\n+      }\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      return this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n+    \n+    // Produce warning only if the named type is not resolved.\n+    t.warning(JSError.make(nameNode, RESOLUTION_ERROR, name));\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    \n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n+      if (registry.isLastGeneration()) {\n+        return getReferencedType();\n+      }\n       finishPropertyContinuations();\n+      return this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    \n+    // Produce warning only if the named type is not resolved.\n+    t.warning(JSError.make(nameNode, RESOLUTION_ERROR, name));\n+    return this;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}