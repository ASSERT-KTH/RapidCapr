{
    "patch": "        boolean isMonthDay = isMonthDay(partial);\n\n        if (isMonthDay && partial.size() == 2 && values[1] == 29 && values[0] == 2) {\n            partial = new MonthDay(2, 28);\n            values = partial.getValues();\n        }\n\n        long instant = 0L;\n        for (int i = 0; i < partial.size(); i++) {\n            if (isMonthDay && i == 1 && values[0] == 2 && values[1] == 28 && valueToAdd >= 12 && valueToAdd % 12 == 0) {\n                // Handle the special case where we are adding a multiple of 12 months to a Feb 28 month-day\n                // In this case, the new year will also have a Feb 28 and our resulting month-day values should be 2,28\n                valueToAdd /= 12;\n                partial = new MonthDay(2, 28);\n                values = partial.getValues();\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        \n        instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n        int[] result = new int[partial.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = partial.getFieldType(i).getField(iChronology).get(instant);\n        }\n        return result;       \n    }\n\n    private boolean isMonthDay(ReadablePartial partial) {\n        return partial instanceof MonthDay || (partial.size() == 2 && partial.getFieldType(0) == DateTimeFieldType.monthOfYear());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..95cf8497 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+        boolean isMonthDay = isMonthDay(partial);\n+\n+        if (isMonthDay && partial.size() == 2 && values[1] == 29 && values[0] == 2) {\n+            partial = new MonthDay(2, 28);\n+            values = partial.getValues();\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        long instant = 0L;\n+        for (int i = 0; i < partial.size(); i++) {\n+            if (isMonthDay && i == 1 && values[0] == 2 && values[1] == 28 && valueToAdd >= 12 && valueToAdd % 12 == 0) {\n+                // Handle the special case where we are adding a multiple of 12 months to a Feb 28 month-day\n+                // In this case, the new year will also have a Feb 28 and our resulting month-day values should be 2,28\n+                valueToAdd /= 12;\n+                partial = new MonthDay(2, 28);\n+                values = partial.getValues();\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n+        \n+        instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n+        int[] result = new int[partial.size()];\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = partial.getFieldType(i).getField(iChronology).get(instant);\n+        }\n+        return result;       \n     }\n \n+    private boolean isMonthDay(ReadablePartial partial) {\n+        return partial instanceof MonthDay || (partial.size() == 2 && partial.getFieldType(0) == DateTimeFieldType.monthOfYear());\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}