{
    "patch": "        // check if initial guess is NaN or infinite\n        if (!Double.isFinite(initial)) {\n            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + initial);\n        }\n\n        // check if initial guess brackets the root\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        } else {\n            double yMin = f.value(min);\n            double yMax = f.value(max);\n            if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) || (yInitial > yMax && yInitial > yMin) || (yInitial < yMax && yInitial < yMin)) {\n                throw new IllegalArgumentException(\"Function values at endpoints do not have different signs or the initial guess does not bracket the root. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n            }\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..674852f00 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,26 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if initial guess is NaN or infinite\n+        if (!Double.isFinite(initial)) {\n+            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + initial);\n+        }\n+\n+        // check if initial guess brackets the root\n+        double yInitial = f.value(initial);\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+            setResult(initial, 0);\n+            return result;\n+        } else {\n+            double yMin = f.value(min);\n+            double yMax = f.value(max);\n+            if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) || (yInitial > yMax && yInitial > yMin) || (yInitial < yMax && yInitial < yMin)) {\n+                throw new IllegalArgumentException(\"Function values at endpoints do not have different signs or the initial guess does not bracket the root. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n+            }\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: variable yInitial is already defined in method solve(UnivariateRealFunction,double,double,double)",
    "test_result": "ERROR"
}