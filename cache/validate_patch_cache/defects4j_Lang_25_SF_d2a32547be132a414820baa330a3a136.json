{
    "patch": "public static String unescape(String s) {\n    StringBuilder result = new StringBuilder();\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n        char c = s.charAt(i);\n        if (c == '\\\\') {\n            i++;\n            if (i < len) {\n                c = s.charAt(i);\n                switch (c) {\n                    case 'n':\n                        result.append('\\n');\n                        break;\n                    case 'r':\n                        result.append('\\r');\n                        break;\n                    case 't':\n                        result.append('\\t');\n                        break;\n                    case 'f':\n                        result.append('\\f');\n                        break;\n                    case 'b':\n                        result.append('\\b');\n                        break;\n                    case '\\\"':\n                        result.append('\\\"');\n                        break;\n                    case '\\'':\n                        result.append('\\'');\n                        break;\n                    case '\\\\':\n                        result.append('\\\\');\n                        break;\n                    case 'u':\n                        if (i + 4 < len) {\n                            char[] hex = new char[4];\n                            s.getChars(i + 1, i + 5, hex, 0);\n                            result.append((char) Integer.parseInt(new String(hex), 16));\n                            i += 4;\n                        }\n                        break;\n                    case 'U':\n                        if (i + 8 < len) {\n                            char[] hex = new char[8];\n                            s.getChars(i + 1, i + 9, hex, 0);\n                            result.append((char) Integer.parseInt(new String(hex), 16));\n                            i += 8;\n                        }\n                        break;\n                    default:\n                        // Invalid escape sequence\n                        result.append('\\\\');\n                        result.append(c);\n                }\n            }\n        } else {\n            result.append(c);\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..102c551c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,68 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s) {\n+    StringBuilder result = new StringBuilder();\n+    int len = s.length();\n+    for (int i = 0; i < len; i++) {\n+        char c = s.charAt(i);\n+        if (c == '\\\\') {\n+            i++;\n+            if (i < len) {\n+                c = s.charAt(i);\n+                switch (c) {\n+                    case 'n':\n+                        result.append('\\n');\n+                        break;\n+                    case 'r':\n+                        result.append('\\r');\n+                        break;\n+                    case 't':\n+                        result.append('\\t');\n+                        break;\n+                    case 'f':\n+                        result.append('\\f');\n+                        break;\n+                    case 'b':\n+                        result.append('\\b');\n+                        break;\n+                    case '\\\"':\n+                        result.append('\\\"');\n+                        break;\n+                    case '\\'':\n+                        result.append('\\'');\n+                        break;\n+                    case '\\\\':\n+                        result.append('\\\\');\n+                        break;\n+                    case 'u':\n+                        if (i + 4 < len) {\n+                            char[] hex = new char[4];\n+                            s.getChars(i + 1, i + 5, hex, 0);\n+                            result.append((char) Integer.parseInt(new String(hex), 16));\n+                            i += 4;\n+                        }\n+                        break;\n+                    case 'U':\n+                        if (i + 8 < len) {\n+                            char[] hex = new char[8];\n+                            s.getChars(i + 1, i + 9, hex, 0);\n+                            result.append((char) Integer.parseInt(new String(hex), 16));\n+                            i += 8;\n+                        }\n+                        break;\n+                    default:\n+                        // Invalid escape sequence\n+                        result.append('\\\\');\n+                        result.append(c);\n+                }\n+            }\n+        } else {\n+            result.append(c);\n+        }\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}