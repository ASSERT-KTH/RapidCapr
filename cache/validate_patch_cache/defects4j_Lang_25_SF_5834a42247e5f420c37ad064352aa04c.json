{
    "patch": "public static String unescape(String pString) {\n    StringBuffer sb = new StringBuffer();\n    StringCharacterIterator sci = new StringCharacterIterator(pString);\n    char c =  sci.current();\n    while (c != CharacterIterator.DONE ) {\n        if (c == '\\\\') {\n            char n = sci.next();\n            if (n == 't') {\n                sb.append('\\t');\n            } else if (n == 'r') {\n                sb.append('\\r');\n            } else if (n == 'n') {\n                sb.append('\\n');\n            } else if (n == 'f') {\n                sb.append('\\f');\n            } else if (n == '\\\\') {\n                sb.append('\\\\');\n            } else if (n == '\\'') {\n                sb.append('\\'');\n            } else if (n == '\\\"') {\n                sb.append('\\\"');\n            } else if (n == 'u') {\n                StringBuilder hex = new StringBuilder();\n                for (int i = 0; i < 4; i++) {\n                    hex.append(sci.next());\n                }\n                sb.append((char) Integer.parseInt(hex.toString(), 16));\n            } else if (n >= '0' && n <= '7') {\n                StringBuilder oct = new StringBuilder();\n                for (int i = 0; i < 3 && n >= '0' && n <= '7'; i++) {\n                    oct.append(n);\n                    n = sci.next();\n                }\n                sb.append((char) Integer.parseInt(oct.toString(), 8));\n                continue; // Don't advance iterator in for-loop\n            }\n        } else {\n            sb.append(c);\n        }\n        c = sci.next();\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..44714c49 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,49 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String pString) {\n+    StringBuffer sb = new StringBuffer();\n+    StringCharacterIterator sci = new StringCharacterIterator(pString);\n+    char c =  sci.current();\n+    while (c != CharacterIterator.DONE ) {\n+        if (c == '\\\\') {\n+            char n = sci.next();\n+            if (n == 't') {\n+                sb.append('\\t');\n+            } else if (n == 'r') {\n+                sb.append('\\r');\n+            } else if (n == 'n') {\n+                sb.append('\\n');\n+            } else if (n == 'f') {\n+                sb.append('\\f');\n+            } else if (n == '\\\\') {\n+                sb.append('\\\\');\n+            } else if (n == '\\'') {\n+                sb.append('\\'');\n+            } else if (n == '\\\"') {\n+                sb.append('\\\"');\n+            } else if (n == 'u') {\n+                StringBuilder hex = new StringBuilder();\n+                for (int i = 0; i < 4; i++) {\n+                    hex.append(sci.next());\n+                }\n+                sb.append((char) Integer.parseInt(hex.toString(), 16));\n+            } else if (n >= '0' && n <= '7') {\n+                StringBuilder oct = new StringBuilder();\n+                for (int i = 0; i < 3 && n >= '0' && n <= '7'; i++) {\n+                    oct.append(n);\n+                    n = sci.next();\n+                }\n+                sb.append((char) Integer.parseInt(oct.toString(), 8));\n+                continue; // Don't advance iterator in for-loop\n+            }\n+        } else {\n+            sb.append(c);\n+        }\n+        c = sci.next();\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}