{
    "patch": "stepSize = hNew;\ndouble nextStepStart = stepStart + stepSize;\nif ((forward && nextStepStart > t) || (!forward && nextStepStart < t)) {\n    stepSize = t - stepStart;\n    nextStepStart = stepStart + stepSize;\n}\nif ((forward && nextStepStart > t) || (!forward && nextStepStart < t)) {\n    // next step still overshoots the final time (floating point issue)\n    stepSize = Math.max(0, stepSize - 1e-12);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..3976aa905 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,16 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+stepSize = hNew;\n+double nextStepStart = stepStart + stepSize;\n+if ((forward && nextStepStart > t) || (!forward && nextStepStart < t)) {\n+    stepSize = t - stepStart;\n+    nextStepStart = stepStart + stepSize;\n+}\n+if ((forward && nextStepStart > t) || (!forward && nextStepStart < t)) {\n+    // next step still overshoots the final time (floating point issue)\n+    stepSize = Math.max(0, stepSize - 1e-12);\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}