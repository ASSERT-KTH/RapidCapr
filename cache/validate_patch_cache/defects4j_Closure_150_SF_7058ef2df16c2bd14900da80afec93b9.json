{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    attachLiteralTypes(n);\n\n    switch (n.getType()) {\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n) && (parent == null || NodeUtil.isStatementBlock(parent))) {\n                defineDeclaredFunction(n, parent);\n            } else if (NodeUtil.isFunctionExpression(n)) {\n                if (NodeUtil.isStatement(parent) || parent.getType() == Token.SCRIPT) {\n                    defineVar(n, parent);\n                } else if (parent.getType() == Token.ASSIGN) {\n                    // Function expression in assignment, we'll handle the assignment instead.\n                    // We won't handle the function recursively.\n                    Node varParent = parent.getParent();\n                    String name = n.getFirstChild().getString();\n\n                    Node assignNode = IR.assign(\n                            IR.getprop(IR.name(varParent.getString()), IR.string(name)),\n                            n\n                    ).useSourceInfoFrom(n);\n\n                    assignNode.getFirstChild().setJSDocInfo(n.getJSDocInfo());\n\n                    defineVar(assignNode, varParent);\n                    n.detach();\n                }\n            }\n            break;\n        case Token.NAME:\n            if (NodeUtil.isNameDeclaration(parent) || parent.getType() == Token.FUNCTION) {\n                defineVar(n, parent);\n            }\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4d37f39d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,52 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+    attachLiteralTypes(n);\n+\n+    switch (n.getType()) {\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n+        case Token.FUNCTION:\n+            if (NodeUtil.isFunctionDeclaration(n) && (parent == null || NodeUtil.isStatementBlock(parent))) {\n+                defineDeclaredFunction(n, parent);\n+            } else if (NodeUtil.isFunctionExpression(n)) {\n+                if (NodeUtil.isStatement(parent) || parent.getType() == Token.SCRIPT) {\n+                    defineVar(n, parent);\n+                } else if (parent.getType() == Token.ASSIGN) {\n+                    // Function expression in assignment, we'll handle the assignment instead.\n+                    // We won't handle the function recursively.\n+                    Node varParent = parent.getParent();\n+                    String name = n.getFirstChild().getString();\n+\n+                    Node assignNode = IR.assign(\n+                            IR.getprop(IR.name(varParent.getString()), IR.string(name)),\n+                            n\n+                    ).useSourceInfoFrom(n);\n+\n+                    assignNode.getFirstChild().setJSDocInfo(n.getJSDocInfo());\n+\n+                    defineVar(assignNode, varParent);\n+                    n.detach();\n+                }\n+            }\n+            break;\n+        case Token.NAME:\n+            if (NodeUtil.isNameDeclaration(parent) || parent.getType() == Token.FUNCTION) {\n+                defineVar(n, parent);\n+            }\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}