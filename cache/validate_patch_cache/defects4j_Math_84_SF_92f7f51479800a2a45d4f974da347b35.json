{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 2]) < 0) {\n                    // compute an even more expanded simplex \n                    final RealPointValuePair[] doubleExpandedSimplex = evaluateNewSimplex(original, gamma, comparator);\n                    if (comparator.compare(doubleExpandedSimplex[doubleExpandedSimplex.length - 1], expanded) < 0) {\n                        simplex = doubleExpandedSimplex;\n                    } else {\n                        simplex = reflectedSimplex;\n                    }\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = computeContractedSimplex(original, contracted);\n            } else {\n                // perform a shrink step\n                simplex = performShrink(original, comparator);\n            }\n\n            // check convergence\n            final RealPointValuePair[] current = simplex;\n            double[] xSmallest = current[0].getPoint();\n            double fxSmallest = current[0].getValue();\n            double[] xNext = current[1].getPoint();\n            double fxNext = current[1].getValue();\n            if (comparator.compare(evaluateAtSimplex(xSmallest), fxSmallest, \n                    evaluateAtSimplex(xNext), fxNext) >= 0) {\n                boolean converge = true;\n                for (int i = 1; i < current.length; i++) {\n                    if (comparator.compare(current[i - 1], current[i]) < 0) {\n                        converge = false;\n                        break;\n                    }\n                }\n                if (converge) {\n                    return;\n                }\n            }\n\n        }\n\n    }\n\n    /** Compute a contracted simplex.\n     * @param original original simplex.\n     * @param contracted contracted point.\n     * @return contracted simplex.\n     */\n    private RealPointValuePair[] computeContractedSimplex(final RealPointValuePair[] original,\n                                                       final RealPointValuePair contracted) {\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n        for (int i = 0; i < original.length; i++) {\n            final double[] contractedPoint = new double[original[i].getPoint().length];\n            for (int j = 0; j < contractedPoint.length; j++) {\n                contractedPoint[j] = contractionCoefficient * original[i].getPoint()[j] +\n                                     (1 - contractionCoefficient) * contracted.getPoint()[j];\n            }\n            final double contractedValue = computeObjectiveValue(contractedPoint);\n            contractedSimplex[i] = new RealPointValuePair(contractedPoint, contractedValue);\n        }\n        return contractedSimplex;\n    }\n\n    /** Perform a shrink step.\n     * @param original original simplex.\n     * @param comparator comparator to use.\n     * @return new simplex.\n     */\n    private RealPointValuePair[] performShrink(final RealPointValuePair[] original,\n                                                final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n        newSimplex[0] = best;\n        for (int i = 1; i < original.length; i++) {\n            final double[] point = original[i].getPoint();\n            final double[] shrunk = new double[point.length];\n            for (int j = 0; j < point.length; j++) {\n                shrunk[j] = best.getPoint()[j] + shrinkCoefficient * (point[j] - best.getPoint()[j]);\n            }\n            final double value = computeObjectiveValue(shrunk);\n            newSimplex[i] = new RealPointValuePair(shrunk, value);\n        }\n        Arrays.sort(newSimplex, comparator);\n        return newSimplex;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..dcdea7d7c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -76,7 +76,15 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 2]) < 0) {\n+                    // compute an even more expanded simplex \n+                    final RealPointValuePair[] doubleExpandedSimplex = evaluateNewSimplex(original, gamma, comparator);\n+                    if (comparator.compare(doubleExpandedSimplex[doubleExpandedSimplex.length - 1], expanded) < 0) {\n+                        simplex = doubleExpandedSimplex;\n+                    } else {\n+                        simplex = reflectedSimplex;\n+                    }\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n@@ -86,18 +94,82 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = computeContractedSimplex(original, contracted);\n+            } else {\n+                // perform a shrink step\n+                simplex = performShrink(original, comparator);\n+            }\n \n             // check convergence\n-                return;\n+            final RealPointValuePair[] current = simplex;\n+            double[] xSmallest = current[0].getPoint();\n+            double fxSmallest = current[0].getValue();\n+            double[] xNext = current[1].getPoint();\n+            double fxNext = current[1].getValue();\n+            if (comparator.compare(evaluateAtSimplex(xSmallest), fxSmallest, \n+                    evaluateAtSimplex(xNext), fxNext) >= 0) {\n+                boolean converge = true;\n+                for (int i = 1; i < current.length; i++) {\n+                    if (comparator.compare(current[i - 1], current[i]) < 0) {\n+                        converge = false;\n+                        break;\n+                    }\n+                }\n+                if (converge) {\n+                    return;\n+                }\n             }\n \n         }\n \n     }\n \n+    /** Compute a contracted simplex.\n+     * @param original original simplex.\n+     * @param contracted contracted point.\n+     * @return contracted simplex.\n+     */\n+    private RealPointValuePair[] computeContractedSimplex(final RealPointValuePair[] original,\n+                                                       final RealPointValuePair contracted) {\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+        for (int i = 0; i < original.length; i++) {\n+            final double[] contractedPoint = new double[original[i].getPoint().length];\n+            for (int j = 0; j < contractedPoint.length; j++) {\n+                contractedPoint[j] = contractionCoefficient * original[i].getPoint()[j] +\n+                                     (1 - contractionCoefficient) * contracted.getPoint()[j];\n+            }\n+            final double contractedValue = computeObjectiveValue(contractedPoint);\n+            contractedSimplex[i] = new RealPointValuePair(contractedPoint, contractedValue);\n+        }\n+        return contractedSimplex;\n+    }\n+\n+    /** Perform a shrink step.\n+     * @param original original simplex.\n+     * @param comparator comparator to use.\n+     * @return new simplex.\n+     */\n+    private RealPointValuePair[] performShrink(final RealPointValuePair[] original,\n+                                                final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n+        newSimplex[0] = best;\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] point = original[i].getPoint();\n+            final double[] shrunk = new double[point.length];\n+            for (int j = 0; j < point.length; j++) {\n+                shrunk[j] = best.getPoint()[j] + shrinkCoefficient * (point[j] - best.getPoint()[j]);\n+            }\n+            final double value = computeObjectiveValue(shrunk);\n+            newSimplex[i] = new RealPointValuePair(shrunk, value);\n+        }\n+        Arrays.sort(newSimplex, comparator);\n+        return newSimplex;\n+    }\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}