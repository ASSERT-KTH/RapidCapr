{
    "patch": "                    if (f0 * fx < 0.0) {\n                        x1 = x;\n                        f1 = fx;\n                    } else {\n                        x0 = x;\n                        f0 = fx;\n                    }\n                    if (--maximalIterationCount == 0) {\n                        throw new ConvergenceException(\n                                LocalizedFormats.CONVERGENCE_FAILED,\n                                getMaximalIterationCount());\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..d6bfa6580 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,18 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (f0 * fx < 0.0) {\n+                        x1 = x;\n+                        f1 = fx;\n+                    } else {\n+                        x0 = x;\n+                        f0 = fx;\n+                    }\n+                    if (--maximalIterationCount == 0) {\n+                        throw new ConvergenceException(\n+                                LocalizedFormats.CONVERGENCE_FAILED,\n+                                getMaximalIterationCount());\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}