{
    "patch": "  private boolean isBlockOrExprResult(Node parent) {\n    int parentType = parent.getType();\n    return parentType == Token.EXPR_RESULT || parentType == Token.BLOCK;\n  }\n\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // These extra semicolons should not be flagged as useless code.\n    if (n.isEmpty()) {\n      return;\n    }\n\n    if (n.isComma()) {\n      // Do not try to remove a block or an expression result. We already handle\n      // these cases when we visit the child, and the peephole passes will\n      // fix up the tree in more clever ways when these are removed.\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        // Ignore qualified names used due to their namespace.\n        return;\n      } else if (n.isCall()) {\n        // Some calls are allowed to be unused.\n        if (n.getFirstChild().isName()) {\n          String fnName = n.getFirstChild().getString();\n          if (fnName.equals(\"goog.setTestOnly\") ||\n              fnName.equals(\"goog.define\") ||\n              fnName.equals(\"goog.asserts.fail\")) {\n            return;\n          }\n        } else if (n.getFirstChild().isGetProp() && n.getFirstFirstChild().isName()\n            && n.getFirstChild().getLastChild().getString().equals(\"bind\") &&\n            n.getFirstChild().getFirstChild().matchesQualifiedName(\"Function.prototype\")) {\n          return;\n        }\n      } else if (n.isFunction() || n.isClass()) {\n        // Allow unused constructors and nested functions.\n        return;\n      } else if (n.isExprResult()) {\n        // If we get here, the expression result should only have been preserved\n        // if there was a parse error detected.\n        if (t.getCompiler().hasHaltingErrors()) {\n          return;\n        }\n        // If we get here, the expression did not have a side-effect and it was\n        // not preserved as a side-effect of parse error recovery. Therefore,\n        // report this as useless code.\n        t.getCompiler().report(\n            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                \"This code lacks side-effects. Is there a bug?\"));\n        return;\n      } else if (isBlockOrExprResult(parent)) {\n        Node grandParent = parent.getParent();\n        if (grandParent == null || !isBlockOrExprResult(grandParent)) {\n          // If we get here, it's a nontrivial statement within a block or expression result;\n          // therefore enforce the \"use at least once\" rule.\n          t.getCompiler().report(\n              t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                  \"This code lacks side-effects. Is there a bug?\"));\n        }\n      } else if (parent.isFor() && !parent.getParent().isForIn() && !parent.getParent().isForOf()) {\n        // Allow the init expression and condition to be unused in a for loop.\n        if (n != parent.getFirstChild().getNext().getNext()) {\n          t.getCompiler().report(\n              t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                  \"This code lacks side-effects. Is there a bug?\"));\n        }\n      } else if (parent.isCase()) {\n        t.getCompiler().report(\n            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                \"This code lacks side-effects. Is there a bug?\"));\n      } else if (n.isString()) {\n        t.getCompiler().report(\n            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                \"Is there a missing '+' on the previous line?\"));\n      } else if (isSimpleOp) {\n        t.getCompiler().report(\n            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                \"' operator is not being used.\"));\n      } else if (n.isObjectLit()) {\n        // Allow empty object literals.\n        if (n.hasChildren()) {\n          t.getCompiler().report(\n              t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                  \"This code lacks side-effects. Is there a bug?\"));\n        }\n      } else {\n        t.getCompiler().report(\n            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n                \"This code lacks side-effects. Is there a bug?\"));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..4716fbb7 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,50 +81,27 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n+  private boolean isBlockOrExprResult(Node parent) {\n+    int parentType = parent.getType();\n+    return parentType == Token.EXPR_RESULT || parentType == Token.BLOCK;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+    // These extra semicolons should not be flagged as useless code.\n+    if (n.isEmpty()) {\n       return;\n     }\n \n-    if (parent == null) {\n+    if (n.isComma()) {\n+      // Do not try to remove a block or an expression result. We already handle\n+      // these cases when we visit the child, and the peephole passes will\n+      // fix up the tree in more clever ways when these are removed.\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n-        }\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n+    if (parent == null) {\n       return;\n-      }\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n@@ -132,27 +109,78 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+        // Ignore qualified names used due to their namespace.\n+        return;\n+      } else if (n.isCall()) {\n+        // Some calls are allowed to be unused.\n+        if (n.getFirstChild().isName()) {\n+          String fnName = n.getFirstChild().getString();\n+          if (fnName.equals(\"goog.setTestOnly\") ||\n+              fnName.equals(\"goog.define\") ||\n+              fnName.equals(\"goog.asserts.fail\")) {\n+            return;\n+          }\n+        } else if (n.getFirstChild().isGetProp() && n.getFirstFirstChild().isName()\n+            && n.getFirstChild().getLastChild().getString().equals(\"bind\") &&\n+            n.getFirstChild().getFirstChild().matchesQualifiedName(\"Function.prototype\")) {\n+          return;\n+        }\n+      } else if (n.isFunction() || n.isClass()) {\n+        // Allow unused constructors and nested functions.\n         return;\n       } else if (n.isExprResult()) {\n+        // If we get here, the expression result should only have been preserved\n+        // if there was a parse error detected.\n+        if (t.getCompiler().hasHaltingErrors()) {\n+          return;\n+        }\n+        // If we get here, the expression did not have a side-effect and it was\n+        // not preserved as a side-effect of parse error recovery. Therefore,\n+        // report this as useless code.\n+        t.getCompiler().report(\n+            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                \"This code lacks side-effects. Is there a bug?\"));\n         return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n+      } else if (isBlockOrExprResult(parent)) {\n+        Node grandParent = parent.getParent();\n+        if (grandParent == null || !isBlockOrExprResult(grandParent)) {\n+          // If we get here, it's a nontrivial statement within a block or expression result;\n+          // therefore enforce the \"use at least once\" rule.\n+          t.getCompiler().report(\n+              t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                  \"This code lacks side-effects. Is there a bug?\"));\n+        }\n+      } else if (parent.isFor() && !parent.getParent().isForIn() && !parent.getParent().isForOf()) {\n+        // Allow the init expression and condition to be unused in a for loop.\n+        if (n != parent.getFirstChild().getNext().getNext()) {\n+          t.getCompiler().report(\n+              t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                  \"This code lacks side-effects. Is there a bug?\"));\n+        }\n+      } else if (parent.isCase()) {\n+        t.getCompiler().report(\n+            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                \"This code lacks side-effects. Is there a bug?\"));\n+      } else if (n.isString()) {\n+        t.getCompiler().report(\n+            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                \"Is there a missing '+' on the previous line?\"));\n       } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n-    }\n-  }\n+        t.getCompiler().report(\n+            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n+                \"' operator is not being used.\"));\n+      } else if (n.isObjectLit()) {\n+        // Allow empty object literals.\n+        if (n.hasChildren()) {\n+          t.getCompiler().report(\n+              t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                  \"This code lacks side-effects. Is there a bug?\"));\n+        }\n+      } else {\n+        t.getCompiler().report(\n+            t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR,\n+                \"This code lacks side-effects. Is there a bug?\"));\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}