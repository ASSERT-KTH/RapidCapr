{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  // Check if we are in global scope\n  if (!t.inGlobalScope()) {\n    return;\n  }\n\n  switch (n.getToken()) {\n    case VAR:\n    case LET:\n    case CONST:\n      if (n.hasChildren()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.name != null) {\n          recordSet(ns.name, nameNode);\n        } \n      }\n      break;\n\n    case FUNCTION:\n      if (n.getFirstChild().isName()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          JsName nameInfo = getName(ns.name, true);\n          if (nameInfo != null && nameInfo.name != null) {\n            recordSet(nameInfo.name, nameNode);\n          }\n        }\n      }\n      break;\n\n    case CLASS:\n      if (n.getFirstChild().isName()) {\n        Node nameNode = n.getFirstChild();\n        String className = nameNode.getString();\n        JsName nameInfo = getName(className, false);\n        \n        if (nameInfo != null && nameInfo.name != null) {\n          recordSet(nameInfo.name, nameNode);\n        }\n      }\n      break;\n\n    case ASSIGN:\n      if (n.getFirstChild().isName()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.name != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      }\n      break;\n\n    case CALL:\n      if (n.getFirstChild().isName()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.name != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null && name.name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n          }\n        }\n      }\n      break;\n\n    default:\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..2464665f 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,82 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // Check if we are in global scope\n+  if (!t.inGlobalScope()) {\n+    return;\n+  }\n+\n+  switch (n.getToken()) {\n+    case VAR:\n+    case LET:\n+    case CONST:\n+      if (n.hasChildren()) {\n+        Node nameNode = n.getFirstChild();\n+        NameInformation ns = createNameInformation(t, nameNode, n);\n+        if (ns != null && ns.name != null) {\n+          recordSet(ns.name, nameNode);\n+        } \n+      }\n+      break;\n \n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n+    case FUNCTION:\n+      if (n.getFirstChild().isName()) {\n+        Node nameNode = n.getFirstChild();\n+        NameInformation ns = createNameInformation(t, nameNode, n);\n+        if (ns != null) {\n+          JsName nameInfo = getName(ns.name, true);\n+          if (nameInfo != null && nameInfo.name != null) {\n             recordSet(nameInfo.name, nameNode);\n           }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n         }\n       }\n+      break;\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n+    case CLASS:\n+      if (n.getFirstChild().isName()) {\n         Node nameNode = n.getFirstChild();\n+        String className = nameNode.getString();\n+        JsName nameInfo = getName(className, false);\n+        \n+        if (nameInfo != null && nameInfo.name != null) {\n+          recordSet(nameInfo.name, nameNode);\n+        }\n+      }\n+      break;\n \n+    case ASSIGN:\n+      if (n.getFirstChild().isName()) {\n+        Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n+        if (ns != null && ns.name != null) {\n           if (ns.isPrototype) {\n             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n           } else {\n             recordSet(ns.name, nameNode);\n           }\n         }\n-      } else if (n.isCall()) {\n+      }\n+      break;\n+\n+    case CALL:\n+      if (n.getFirstChild().isName()) {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n+        if (ns != null && ns.name != null && ns.onlyAffectsClassDef) {\n           JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n+          if (name != null && name.name != null) {\n+            refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n           }\n         }\n       }\n-    }\n+      break;\n+\n+    default:\n+      break;\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}