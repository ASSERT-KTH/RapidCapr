{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType objPropType = objType.getPropertyType(prop);\n          if (propType != null && !objType.isPropertyTypeDeclared(prop) && \n              (objPropType == null || !objPropType.isSubtype(propType))) {\n            JSType inferredType = objPropType != null ? \n                objPropType.getLeastSupertype(propType) : propType;\n            objType.defineInferredProperty(prop, inferredType, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..1f82588d 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,17 +1123,17 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          JSType objPropType = objType.getPropertyType(prop);\n+          if (propType != null && !objType.isPropertyTypeDeclared(prop) && \n+              (objPropType == null || !objPropType.isSubtype(propType))) {\n+            JSType inferredType = objPropType != null ? \n+                objPropType.getLeastSupertype(propType) : propType;\n+            objType.defineInferredProperty(prop, inferredType, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}