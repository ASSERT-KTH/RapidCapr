{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = selectChronology(instant.getChronology());\n    DateTimeZone zone = chrono.getZone();\n    long instantMillis = instant.getMillis();\n    int offset = zone.getOffset(instantMillis);\n    long instantLocal = instantMillis + offset;\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(true, text));\n\n    // Check if year is valid, if not, adjust and parse again\n    int year = bucket.computeLocalDateTime().getYear();\n    if (!chrono.year().isValidValue(year)) {\n        if (year > 0) {\n            year--;\n        } else {\n            year++;\n        }\n        bucket = new DateTimeParserBucket(\n            bucket.computeMillis(false, text), chrono.withYear(year), iLocale, iPivotYear);\n        newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(true, text));\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        offset = bucket.getOffsetInteger().intValue();\n        zone = DateTimeZone.forOffsetMillis(offset);\n        chrono = chrono.withZone(zone);\n    } else if (bucket.getZone() != null) {\n        zone = bucket.getZone();\n        chrono = chrono.withZone(zone);\n    }\n    instant.setChronology(chrono);\n    instant.setZone(zone);\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7e0803d8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,49 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = selectChronology(instant.getChronology());\n+    DateTimeZone zone = chrono.getZone();\n+    long instantMillis = instant.getMillis();\n+    int offset = zone.getOffset(instantMillis);\n+    long instantLocal = instantMillis + offset;\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(true, text));\n+\n+    // Check if year is valid, if not, adjust and parse again\n+    int year = bucket.computeLocalDateTime().getYear();\n+    if (!chrono.year().isValidValue(year)) {\n+        if (year > 0) {\n+            year--;\n+        } else {\n+            year++;\n         }\n-        return newPos;\n-    }\n+        bucket = new DateTimeParserBucket(\n+            bucket.computeMillis(false, text), chrono.withYear(year), iLocale, iPivotYear);\n+        newPos = parser.parseInto(bucket, text, position);\n+        instant.setMillis(bucket.computeMillis(true, text));\n+    }\n+\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        offset = bucket.getOffsetInteger().intValue();\n+        zone = DateTimeZone.forOffsetMillis(offset);\n+        chrono = chrono.withZone(zone);\n+    } else if (bucket.getZone() != null) {\n+        zone = bucket.getZone();\n+        chrono = chrono.withZone(zone);\n+    }\n+    instant.setChronology(chrono);\n+    instant.setZone(zone);\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}