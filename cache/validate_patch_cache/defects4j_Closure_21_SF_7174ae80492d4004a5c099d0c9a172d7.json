{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  // Do not touch function nodes or empty/extra semicolon blocks.\n  if (n.isEmpty() || n.isComma() || n.isFunction()) {\n    return;\n  }\n\n  // Root node, do not do anything.\n  if (parent == null) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  // if in a block with no side effects, report error\n  if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    if(parent.isBlock() && !NodeUtil.mayHaveSideEffects(parent, t.getCompiler())) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    }\n  }\n\n  if (parent.getType() == Token.EXPR_RESULT) {\n    // expression result to be deleted\n    if (!NodeUtil.mayHaveSideEffects(n)) {\n      t.reportCodeChange();\n      NodeUtil.removeChild(parent.getParent(), parent);\n      return;\n    }\n  }\n\n  if (n.isString()) {\n    // missing concatenation operator for string literals\n    Node next = n.getNext();\n    if (next != null && next.isString()) {\n      String msg = \"Is there a missing '+' on the previous line?\";\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    }\n  }\n\n  if (n.isOr() || n.isAnd() || n.isNot()) {\n    // boolean literals in conditional expressions\n    boolean isCond = parent.isIf() || parent.isWhile() || parent.isFor();\n    if (isCond) {\n      Node trueLit = n.getFirstChild();\n      Node falseLit = n.getLastChild();\n      if ((trueLit.isTrue() && n.isOr()) ||\n          (trueLit.isFalse() && n.isAnd()) ||\n          (falseLit.isFalse() && n.isOr()) ||\n          (falseLit.isTrue() && n.isAnd()) ||\n          n.isNot()) {\n        String msg = \"This condition will always evaluate to \" + trueLit.toString() + \".\";\n        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      }\n    }\n  }\n\n  if (n.isVar()) {\n    // unreferenced variables\n    Node varName = n.getFirstChild();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(varName.getString());\n    if (var != null && var.getScope() == scope && !NodeUtil.isReferenceUsed(varName, var, scope)) {\n      String msg = \"The variable '\" + varName.getString() + \"' is never referenced.\";\n      t.getCompiler().report(t.makeError(varName, level, USELESS_CODE_ERROR, msg));\n      t.getCompiler().reportCodeChange();\n      if (n.getChildCount() == 1) {\n        // single var declaration\n        NodeUtil.removeChild(parent, n);\n        return;\n      } else {\n        // multiple var declarations\n        NodeUtil.removeChild(n, varName);\n        t.reportCodeChange();\n        if (n.getChildCount() == 1) {\n          // single var declaration remaining\n          NodeUtil.removeChild(parent, n);\n        }\n      }\n    }\n  }\n\n  if (n.isWhile() || n.isDo() || n.isFor()) {\n    // infinite loops\n    if (NodeUtil.isLoopInfinite(n, t.getCompiler())) {\n      String msg = \"This loop will always be infinite.\";\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    }\n  }\n\n  if (n.isExprResult()) {\n    // expression statement to be deleted\n    Node expr = n.getFirstChild();\n    if (!NodeUtil.mayHaveSideEffects(expr)) {\n      t.reportCodeChange();\n      NodeUtil.removeChild(parent, n);\n      return;\n    }\n  }\n\n  if (NodeUtil.isUnaryOp(n) && n.getParent().isExprResult() && !NodeUtil.mayHaveSideEffects(n)) {\n    // unused result of a unary operator expression\n    String msg = \"The result of the '\" + n.getQualifiedName() + \"' operator is not being used.\";\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n  }\n\n  if (n.isBlock() && n.getParent() != null && n.getParent().isFunction()) {\n    // missing return statement in function\n    boolean hasAnyReturn = false;\n    for (Node child : n.children()) {\n      if (child.isReturn()) {\n        hasAnyReturn = true;\n        break;\n      }\n    }\n    if (!hasAnyReturn) {\n      String msg = \"This function does not have a return statement.\";\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..0ccc1a18 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,130 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // Do not touch function nodes or empty/extra semicolon blocks.\n+  if (n.isEmpty() || n.isComma() || n.isFunction()) {\n+    return;\n+  }\n+\n+  // Root node, do not do anything.\n+  if (parent == null) {\n+    return;\n+  }\n+\n+  // This no-op statement was there so that JSDoc information could\n+  // be attached to the name. This check should not complain about it.\n+  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    return;\n+  }\n+\n+  // if in a block with no side effects, report error\n+  if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+    if(parent.isBlock() && !NodeUtil.mayHaveSideEffects(parent, t.getCompiler())) {\n+      String msg = \"This code lacks side-effects. Is there a bug?\";\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n     }\n+  }\n \n-    if (parent == null) {\n+  if (parent.getType() == Token.EXPR_RESULT) {\n+    // expression result to be deleted\n+    if (!NodeUtil.mayHaveSideEffects(n)) {\n+      t.reportCodeChange();\n+      NodeUtil.removeChild(parent.getParent(), parent);\n       return;\n     }\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n+  if (n.isString()) {\n+    // missing concatenation operator for string literals\n+    Node next = n.getNext();\n+    if (next != null && next.isString()) {\n+      String msg = \"Is there a missing '+' on the previous line?\";\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n     }\n+  }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n+  if (n.isOr() || n.isAnd() || n.isNot()) {\n+    // boolean literals in conditional expressions\n+    boolean isCond = parent.isIf() || parent.isWhile() || parent.isFor();\n+    if (isCond) {\n+      Node trueLit = n.getFirstChild();\n+      Node falseLit = n.getLastChild();\n+      if ((trueLit.isTrue() && n.isOr()) ||\n+          (trueLit.isFalse() && n.isAnd()) ||\n+          (falseLit.isFalse() && n.isOr()) ||\n+          (falseLit.isTrue() && n.isAnd()) ||\n+          n.isNot()) {\n+        String msg = \"This condition will always evaluate to \" + trueLit.toString() + \".\";\n+        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      }\n     }\n+  }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n+  if (n.isVar()) {\n+    // unreferenced variables\n+    Node varName = n.getFirstChild();\n+    Scope scope = t.getScope();\n+    Var var = scope.getVar(varName.getString());\n+    if (var != null && var.getScope() == scope && !NodeUtil.isReferenceUsed(varName, var, scope)) {\n+      String msg = \"The variable '\" + varName.getString() + \"' is never referenced.\";\n+      t.getCompiler().report(t.makeError(varName, level, USELESS_CODE_ERROR, msg));\n+      t.getCompiler().reportCodeChange();\n+      if (n.getChildCount() == 1) {\n+        // single var declaration\n+        NodeUtil.removeChild(parent, n);\n         return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+      } else {\n+        // multiple var declarations\n+        NodeUtil.removeChild(n, varName);\n+        t.reportCodeChange();\n+        if (n.getChildCount() == 1) {\n+          // single var declaration remaining\n+          NodeUtil.removeChild(parent, n);\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+  }\n+\n+  if (n.isWhile() || n.isDo() || n.isFor()) {\n+    // infinite loops\n+    if (NodeUtil.isLoopInfinite(n, t.getCompiler())) {\n+      String msg = \"This loop will always be infinite.\";\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+    }\n+  }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+  if (n.isExprResult()) {\n+    // expression statement to be deleted\n+    Node expr = n.getFirstChild();\n+    if (!NodeUtil.mayHaveSideEffects(expr)) {\n+      t.reportCodeChange();\n+      NodeUtil.removeChild(parent, n);\n+      return;\n+    }\n+  }\n+\n+  if (NodeUtil.isUnaryOp(n) && n.getParent().isExprResult() && !NodeUtil.mayHaveSideEffects(n)) {\n+    // unused result of a unary operator expression\n+    String msg = \"The result of the '\" + n.getQualifiedName() + \"' operator is not being used.\";\n+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+  }\n+\n+  if (n.isBlock() && n.getParent() != null && n.getParent().isFunction()) {\n+    // missing return statement in function\n+    boolean hasAnyReturn = false;\n+    for (Node child : n.children()) {\n+      if (child.isReturn()) {\n+        hasAnyReturn = true;\n+        break;\n       }\n     }\n+    if (!hasAnyReturn) {\n+      String msg = \"This function does not have a return statement.\";\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+    }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}