{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean hasLeapYear = false;\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                // add/subtract months directly to the month value\n                int month = values[i];\n                int newMonth = month + valueToAdd;\n                if (newMonth < 1) {\n                    // move to previous year and month 12\n                    values[i] = newMonth + 12;\n                    int yearFieldIndex = i - 1;\n                    while (yearFieldIndex >= 0 && !partial.isSupported(yearFieldIndex)) {\n                        yearFieldIndex--;\n                    }\n                    if (yearFieldIndex < 0) {\n                        throw new IllegalArgumentException(\"Unable to add months to partial, no year specified\");\n                    }\n                    long yearInstant = partial.getFieldType(yearFieldIndex).getField(iChronology).set(0L, values[yearFieldIndex]);\n                    instant = iChronology.monthOfYear().set(instant, 12);\n                    instant = iChronology.year().add(instant, -1).withField(iChronology.year(), yearInstant);\n                } else if (newMonth > 12) {\n                    // move to next year and month 1\n                    values[i] = newMonth - 12;\n                    int yearFieldIndex = i - 1;\n                    while (yearFieldIndex >= 0 && !partial.isSupported(yearFieldIndex)) {\n                        yearFieldIndex--;\n                    }\n                    if (yearFieldIndex < 0) {\n                        throw new IllegalArgumentException(\"Unable to add months to partial, no year specified\");\n                    }\n                    long yearInstant = partial.getFieldType(yearFieldIndex).getField(iChronology).set(0L, values[yearFieldIndex]);\n                    instant = iChronology.monthOfYear().set(instant, 1);\n                    instant = iChronology.year().add(instant, 1).withField(iChronology.year(), yearInstant);\n                } else {\n                    values[i] = newMonth;\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonth);\n                    if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n                        hasLeapYear = true;\n                    }\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n                    hasLeapYear = true;\n                }\n            }\n        }\n        if (hasLeapYear && iChronology.monthOfYear().get(instant) == 3 && iChronology.dayOfMonth().get(instant) == 1) {\n            instant = iChronology.monthOfYear().set(instant, 2);\n            instant = iChronology.dayOfMonth().set(instant, 29);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e7bdb725 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,70 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean hasLeapYear = false;\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                // add/subtract months directly to the month value\n+                int month = values[i];\n+                int newMonth = month + valueToAdd;\n+                if (newMonth < 1) {\n+                    // move to previous year and month 12\n+                    values[i] = newMonth + 12;\n+                    int yearFieldIndex = i - 1;\n+                    while (yearFieldIndex >= 0 && !partial.isSupported(yearFieldIndex)) {\n+                        yearFieldIndex--;\n+                    }\n+                    if (yearFieldIndex < 0) {\n+                        throw new IllegalArgumentException(\"Unable to add months to partial, no year specified\");\n+                    }\n+                    long yearInstant = partial.getFieldType(yearFieldIndex).getField(iChronology).set(0L, values[yearFieldIndex]);\n+                    instant = iChronology.monthOfYear().set(instant, 12);\n+                    instant = iChronology.year().add(instant, -1).withField(iChronology.year(), yearInstant);\n+                } else if (newMonth > 12) {\n+                    // move to next year and month 1\n+                    values[i] = newMonth - 12;\n+                    int yearFieldIndex = i - 1;\n+                    while (yearFieldIndex >= 0 && !partial.isSupported(yearFieldIndex)) {\n+                        yearFieldIndex--;\n+                    }\n+                    if (yearFieldIndex < 0) {\n+                        throw new IllegalArgumentException(\"Unable to add months to partial, no year specified\");\n+                    }\n+                    long yearInstant = partial.getFieldType(yearFieldIndex).getField(iChronology).set(0L, values[yearFieldIndex]);\n+                    instant = iChronology.monthOfYear().set(instant, 1);\n+                    instant = iChronology.year().add(instant, 1).withField(iChronology.year(), yearInstant);\n+                } else {\n+                    values[i] = newMonth;\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonth);\n+                    if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n+                        hasLeapYear = true;\n+                    }\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n+                    hasLeapYear = true;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (hasLeapYear && iChronology.monthOfYear().get(instant) == 3 && iChronology.dayOfMonth().get(instant) == 1) {\n+            instant = iChronology.monthOfYear().set(instant, 2);\n+            instant = iChronology.dayOfMonth().set(instant, 29);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method isSupported in interface ReadablePartial cannot be applied to given types;",
    "test_result": "ERROR"
}