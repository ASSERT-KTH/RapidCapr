{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double v1x = v1.getX();\n      final double v1y = v1.getY();\n      final double v1z = v1.getZ();\n\n      final double v2x = v2.getX();\n      final double v2y = v2.getY();\n      final double v2z = v2.getZ();\n\n      final double compX = v1y * v2z - v1z * v2y;\n      final double compY = v1z * v2x - v1x * v2z;\n      final double compZ = v1x * v2y - v1y * v2x;\n\n      // rescale the cross product to avoid numerical errors\n      final double max = Math.max(Math.max(Math.abs(compX), Math.abs(compY)), Math.abs(compZ));\n      if (max <= Precision.SAFE_MIN) {\n          return Vector3D.ZERO;\n      }\n      final double invMax = 1.0 / max;\n\n      return new Vector3D(compX * invMax, compY * invMax, compZ * invMax);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..f8ed964bd 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,21 +456,26 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double v1x = v1.getX();\n+      final double v1y = v1.getY();\n+      final double v1z = v1.getZ();\n+\n+      final double v2x = v2.getX();\n+      final double v2y = v2.getY();\n+      final double v2z = v2.getZ();\n+\n+      final double compX = v1y * v2z - v1z * v2y;\n+      final double compY = v1z * v2x - v1x * v2z;\n+      final double compZ = v1x * v2y - v1y * v2x;\n+\n+      // rescale the cross product to avoid numerical errors\n+      final double max = Math.max(Math.max(Math.abs(compX), Math.abs(compY)), Math.abs(compZ));\n+      if (max <= Precision.SAFE_MIN) {\n+          return Vector3D.ZERO;\n+      }\n+      final double invMax = 1.0 / max;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      return new Vector3D(compX * invMax, compY * invMax, compZ * invMax);\n \n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}