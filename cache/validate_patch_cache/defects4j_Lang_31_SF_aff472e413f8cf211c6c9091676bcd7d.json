{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    int len = StringUtils.length(str);\n    int searchLen = searchChars.length;\n    int endIndex = len - 1;\n    int i = 0;\n    while (i < len) {\n        char ch = str.charAt(i);\n        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE && i < endIndex) {\n            char ch2 = str.charAt(i + 1);\n            if (ch2 >= Character.MIN_LOW_SURROGATE && ch2 <= Character.MAX_LOW_SURROGATE) {\n                ch = Character.toCodePoint(ch, ch2);\n                i++;\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return true;\n            }\n        }\n        i++;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..72358941 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,29 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    int len = StringUtils.length(str);\n+    int searchLen = searchChars.length;\n+    int endIndex = len - 1;\n+    int i = 0;\n+    while (i < len) {\n+        char ch = str.charAt(i);\n+        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE && i < endIndex) {\n+            char ch2 = str.charAt(i + 1);\n+            if (ch2 >= Character.MIN_LOW_SURROGATE && ch2 <= Character.MAX_LOW_SURROGATE) {\n+                ch = Character.toCodePoint(ch, ch2);\n+                i++;\n+            }\n+        }\n+        for (int j = 0; j < searchLen; j++) {\n+            if (searchChars[j] == ch) {\n+                return true;\n+            }\n+        }\n+        i++;\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}