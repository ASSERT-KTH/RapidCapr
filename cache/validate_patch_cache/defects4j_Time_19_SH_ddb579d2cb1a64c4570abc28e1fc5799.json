{
    "patch": "        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                int offsetNextLocal = getOffset(nextLocal);\n                int offsetNextAdjusted = getOffset(nextAdjusted);\n                if (offsetLocal < 0 && offsetAdjusted < 0) {\n                    if ((nextLocal + offsetNextLocal) <= (nextAdjusted + offsetNextAdjusted)) {\n                        return offsetLocal;\n                    } else {\n                        return offsetPrev(instantLocal - offsetAdjusted, offsetLocal);\n                    }\n                } else {\n                    if ((nextAdjusted + offsetNextAdjusted) < (instantLocal - offsetLocal)) {\n                        // find next transition after instantLocal\n                        final long next = nextTransition(instantLocal - offsetLocal);\n                        final int offsetNext = getOffset(next);\n                        if (offsetLocal != offsetNext) {\n                            return offsetNext;\n                        }\n                    }\n                }\n            } else if ((offsetLocal - offsetAdjusted) == 1) {\n                long prev = previousTransition(instantAdjusted);\n                int offsetPrev = getOffset(prev);\n                if (offsetPrev <= offsetAdjusted) {\n                    return offsetPrev;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..b7dc4ab3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                int offsetNextLocal = getOffset(nextLocal);\n+                int offsetNextAdjusted = getOffset(nextAdjusted);\n+                if (offsetLocal < 0 && offsetAdjusted < 0) {\n+                    if ((nextLocal + offsetNextLocal) <= (nextAdjusted + offsetNextAdjusted)) {\n+                        return offsetLocal;\n+                    } else {\n+                        return offsetPrev(instantLocal - offsetAdjusted, offsetLocal);\n+                    }\n+                } else {\n+                    if ((nextAdjusted + offsetNextAdjusted) < (instantLocal - offsetLocal)) {\n+                        // find next transition after instantLocal\n+                        final long next = nextTransition(instantLocal - offsetLocal);\n+                        final int offsetNext = getOffset(next);\n+                        if (offsetLocal != offsetNext) {\n+                            return offsetNext;\n+                        }\n+                    }\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) == 1) {\n+                long prev = previousTransition(instantAdjusted);\n+                int offsetPrev = getOffset(prev);\n+                if (offsetPrev <= offsetAdjusted) {\n+                    return offsetPrev;\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}