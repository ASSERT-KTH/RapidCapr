{
    "patch": "protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    \n    if (flags == null) {\n        throw new IllegalArgumentException(\"Flags cannot be null\");\n    }\n    \n    CompilationLevel level = flags.compilation_level;\n    if (level != null) {\n        level.setOptionsForCompilationLevel(options);\n        if (flags.debug) {\n            level.setDebugOptionsForCompilationLevel(options);\n        }\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    if (wLevel != null) {\n        wLevel.setOptionsForWarningLevel(options);\n    }\n\n    List<FormattingOption> formattingOptions = flags.formatting;\n    if (formattingOptions != null) {\n        for (FormattingOption formattingOption : formattingOptions) {\n            if (formattingOption != null) {\n                formattingOption.applyToOption",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..ac0d8c39 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,32 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n+    \n+    if (flags == null) {\n+        throw new IllegalArgumentException(\"Flags cannot be null\");\n+    }\n+    \n     CompilationLevel level = flags.compilation_level;\n-    level.setOptionsForCompilationLevel(options);\n-    if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+    if (level != null) {\n+        level.setOptionsForCompilationLevel(options);\n+        if (flags.debug) {\n+            level.setDebugOptionsForCompilationLevel(options);\n+        }\n     }\n \n     WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n-    }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+    if (wLevel != null) {\n+        wLevel.setOptionsForWarningLevel(options);\n     }\n \n-    initOptionsFromFlags(options);\n-    return options;\n-  }\n+    List<FormattingOption> formattingOptions = flags.formatting;\n+    if (formattingOptions != null) {\n+        for (FormattingOption formattingOption : formattingOptions) {\n+            if (formattingOption != null) {\n+                formattingOption.applyToOption\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}