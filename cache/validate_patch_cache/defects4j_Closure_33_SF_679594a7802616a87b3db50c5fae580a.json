{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  if (constraintObj != null && !constraintObj.isNominalConstructor() && !constraintObj.isFunctionType()) {\n    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          } else {\n            JSType inferredType = getInferredPropertyType(prop);\n            if (inferredType != null) {\n              typeToInfer = inferredType.getLeastSupertype(propType);\n            }\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..a1be72be 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,18 +552,10 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match constraints on anonymous types.\n+  if (constraintObj != null && !constraintObj.isNominalConstructor() && !constraintObj.isFunctionType()) {\n     // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n@@ -572,6 +564,11 @@ class PrototypeObjectType extends ObjectType {\n           if (!hasProperty(prop)) {\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                 .getLeastSupertype(propType);\n+          } else {\n+            JSType inferredType = getInferredPropertyType(prop);\n+            if (inferredType != null) {\n+              typeToInfer = inferredType.getLeastSupertype(propType);\n+            }\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n@@ -579,3 +576,4 @@ class PrototypeObjectType extends ObjectType {\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}