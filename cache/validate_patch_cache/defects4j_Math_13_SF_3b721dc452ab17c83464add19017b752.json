{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition eig = new EigenDecomposition(m);\n    final RealMatrix v = eig.getV();\n    final RealMatrix d = eig.getD();\n    final int n = m.getRowDimension();\n    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        final double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < -1.0e-6) {\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n        } else if (FastMath.abs(eigenvalue) < 1.0e-6) {\n            sqrt.setEntry(i, i, 0.0);\n        } else {\n            sqrt.setEntry(i, i, FastMath.sqrt(eigenvalue));\n        }\n    }\n\n    RealMatrix inv = new LUDecomposition(sqrt).getSolver().getInverse();\n\n    return v.multiply(inv).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3bc0433e3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix d = eig.getD();\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        final double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < -1.0e-6) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n+        } else if (FastMath.abs(eigenvalue) < 1.0e-6) {\n+            sqrt.setEntry(i, i, 0.0);\n+        } else {\n+            sqrt.setEntry(i, i, FastMath.sqrt(eigenvalue));\n+        }\n     }\n+\n+    RealMatrix inv = new LUDecomposition(sqrt).getSolver().getInverse();\n+\n+    return v.multiply(inv).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}