{
    "patch": "public void verify(VerificationData data) {\n        AssertionError error = null;\n        boolean isJUnitMessage = false;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            } catch (Exception e) {\n                Throwable cause = e.getCause();\n                if (cause != null && cause.getClass().getName().contains(\"junit\")) {\n                    isJUnitMessage = true;\n                }\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            String message = error.getMessage();\n            if (isJUnitMessage) {\n                message += String.format(\n                        \"%n'%s' has some dependency to JUnit\", VerificationOverTimeImpl.class.getName());\n            }\n            throw new AssertionError(message, error);\n        }\n    }\n\n    private AssertionError handleVerifyException(Exception e) {\n        return new AssertionError(e.getMessage(), e);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..5df615795 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -72,8 +72,9 @@ public class VerificationOverTimeImpl implements VerificationMode {\n      *\n      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n      */\n-    public void verify(VerificationData data) {\n+public void verify(VerificationData data) {\n         AssertionError error = null;\n+        boolean isJUnitMessage = false;\n \n         timer.start();\n         while (timer.isCounting()) {\n@@ -87,17 +88,29 @@ public class VerificationOverTimeImpl implements VerificationMode {\n                 }\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n-            }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+            } catch (Exception e) {\n+                Throwable cause = e.getCause();\n+                if (cause != null && cause.getClass().getName().contains(\"junit\")) {\n+                    isJUnitMessage = true;\n+                }\n                 error = handleVerifyException(e);\n             }\n         }\n \n         if (error != null) {\n-            throw error;\n+            String message = error.getMessage();\n+            if (isJUnitMessage) {\n+                message += String.format(\n+                        \"%n'%s' has some dependency to JUnit\", VerificationOverTimeImpl.class.getName());\n+            }\n+            throw new AssertionError(message, error);\n         }\n     }\n \n+    private AssertionError handleVerifyException(Exception e) {\n+        return new AssertionError(e.getMessage(), e);\n+    }\n+\n     private AssertionError handleVerifyException(AssertionError e) {\n         if (canRecoverFromFailure(delegate)) {\n             sleep(pollingPeriodMillis);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}