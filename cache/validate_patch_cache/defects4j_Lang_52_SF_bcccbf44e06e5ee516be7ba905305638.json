{
    "patch": "private static final String[] ESCAPE_JS_CHARS = {\n        \"\\\\\\\"\",  // \" -> \\\"\n        \"\\\\'\",   // ' -> \\'\n        \"\\\\\\\\\",  // \\ -> \\\\\n        \"\\\\/\",   // / -> \\/\n        \"\\\\b\",   // backspace -> \\b\n        \"\\\\f\",   // form feed -> \\f\n        \"\\\\n\",   // line feed -> \\n\n        \"\\\\r\",   // carriage return -> \\r\n        \"\\\\t\"    // tab -> \\t\n};\n\nprivate static void escapeJavaScript(Writer out, String str) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str == null) {\n        return;\n    }\n    int sz = str.length();\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n        if (ch >= ESCAPE_JS_CHARS.length) {\n            if (ch > 0xfff) {\n                out.write(\"\\\\u\" + hex(ch));\n            } else if (ch > 0xff) {\n                out.write(\"\\\\u0\" + hex(ch));\n            } else if (ch > 0x7f) {\n                out.write(\"\\\\u00\" + hex(ch));\n            } else {\n                out.write(ch);\n            }\n        } else {\n            String escape = ESCAPE_JS_CHARS[ch];\n            if (escape != null) {\n                out.write(escape);\n            } else {\n                out.write(ch);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091d..c92fb180 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -168,78 +168,48 @@ public class StringEscapeUtils {\n      * @param escapeSingleQuote escapes single quotes if <code>true</code>\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (str == null) {\n-            return;\n-        }\n-        int sz;\n-        sz = str.length();\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n+private static final String[] ESCAPE_JS_CHARS = {\n+        \"\\\\\\\"\",  // \" -> \\\"\n+        \"\\\\'\",   // ' -> \\'\n+        \"\\\\\\\\\",  // \\ -> \\\\\n+        \"\\\\/\",   // / -> \\/\n+        \"\\\\b\",   // backspace -> \\b\n+        \"\\\\f\",   // form feed -> \\f\n+        \"\\\\n\",   // line feed -> \\n\n+        \"\\\\r\",   // carriage return -> \\r\n+        \"\\\\t\"    // tab -> \\t\n+};\n \n-            // handle unicode\n+private static void escapeJavaScript(Writer out, String str) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (str == null) {\n+        return;\n+    }\n+    int sz = str.length();\n+    for (int i = 0; i < sz; i++) {\n+        char ch = str.charAt(i);\n+        if (ch >= ESCAPE_JS_CHARS.length) {\n             if (ch > 0xfff) {\n                 out.write(\"\\\\u\" + hex(ch));\n             } else if (ch > 0xff) {\n                 out.write(\"\\\\u0\" + hex(ch));\n             } else if (ch > 0x7f) {\n                 out.write(\"\\\\u00\" + hex(ch));\n-            } else if (ch < 32) {\n-                switch (ch) {\n-                    case '\\b':\n-                        out.write('\\\\');\n-                        out.write('b');\n-                        break;\n-                    case '\\n':\n-                        out.write('\\\\');\n-                        out.write('n');\n-                        break;\n-                    case '\\t':\n-                        out.write('\\\\');\n-                        out.write('t');\n-                        break;\n-                    case '\\f':\n-                        out.write('\\\\');\n-                        out.write('f');\n-                        break;\n-                    case '\\r':\n-                        out.write('\\\\');\n-                        out.write('r');\n-                        break;\n-                    default :\n-                        if (ch > 0xf) {\n-                            out.write(\"\\\\u00\" + hex(ch));\n-                        } else {\n-                            out.write(\"\\\\u000\" + hex(ch));\n-                        }\n-                        break;\n-                }\n             } else {\n-                switch (ch) {\n-                    case '\\'':\n-                        if (escapeSingleQuote) {\n-                          out.write('\\\\');\n-                        }\n-                        out.write('\\'');\n-                        break;\n-                    case '\"':\n-                        out.write('\\\\');\n-                        out.write('\"');\n-                        break;\n-                    case '\\\\':\n-                        out.write('\\\\');\n-                        out.write('\\\\');\n-                        break;\n-                    default :\n-                        out.write(ch);\n-                        break;\n-                }\n+                out.write(ch);\n+            }\n+        } else {\n+            String escape = ESCAPE_JS_CHARS[ch];\n+            if (escape != null) {\n+                out.write(escape);\n+            } else {\n+                out.write(ch);\n             }\n         }\n     }\n+}\n \n     /**\n      * <p>Returns an upper case hexadecimal <code>String</code> for the given",
    "result_reason": "error: method escapeJavaScript(Writer,String) is already defined in class StringEscapeUtils",
    "test_result": "ERROR"
}