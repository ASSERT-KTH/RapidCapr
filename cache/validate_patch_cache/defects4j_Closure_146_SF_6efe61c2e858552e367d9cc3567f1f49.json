{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n        return new TypePair(this, that);\n\n      case UNKNOWN:\n        if (this.isUnknownType() && !that.isUnknownType()) {\n          return new TypePair(null, that);\n        } else if (!this.isUnknownType() && that.isUnknownType()) {\n          return new TypePair(this, null);\n        } else if (this.isNoType() && that.isUnknownType()) {\n          return new TypePair(this, null);\n        } else {\n          return new TypePair(this, that);\n        }\n\n      default:\n        // switch case is exhaustive\n        throw new IllegalStateException();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..e3f0b0e4 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,7 +693,7 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n+public TypePair getTypesUnderInequality(JSType that) {\n     // unions types\n     if (that instanceof UnionType) {\n       TypePair p = that.getTypesUnderInequality(this);\n@@ -706,12 +706,23 @@ public abstract class JSType implements Serializable {\n         return new TypePair(null, null);\n \n       case FALSE:\n-      case UNKNOWN:\n         return new TypePair(this, that);\n-    }\n \n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n+      case UNKNOWN:\n+        if (this.isUnknownType() && !that.isUnknownType()) {\n+          return new TypePair(null, that);\n+        } else if (!this.isUnknownType() && that.isUnknownType()) {\n+          return new TypePair(this, null);\n+        } else if (this.isNoType() && that.isUnknownType()) {\n+          return new TypePair(this, null);\n+        } else {\n+          return new TypePair(this, that);\n+        }\n+\n+      default:\n+        // switch case is exhaustive\n+        throw new IllegalStateException();\n+    }\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<None> but was:<undefined>",
    "test_result": "FAIL"
}