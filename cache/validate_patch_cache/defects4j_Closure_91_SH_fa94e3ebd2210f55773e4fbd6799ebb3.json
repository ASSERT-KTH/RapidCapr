{
    "patch": "if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n        if (NodeUtil.isObjectLitKey(lhs)) {\n            // Object literal key being assigned a function, ok to keep\n            return true;\n        }\n        if (NodeUtil.isNameDeclaration(lhs.getParent()) &&\n            !NodeUtil.isConstantNameDeclaration(lhs.getParent())) {\n            // var x = function() { ... } or let x = function() { ... }\n            // The function is not used in the rest of the scope, so skip it\n            return false;\n        }\n    } else {\n        // Only traverse the right side if it's not an assignment to [something].prototype.[something]\n        if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7b7323fe 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+        if (NodeUtil.isObjectLitKey(lhs)) {\n+            // Object literal key being assigned a function, ok to keep\n+            return true;\n+        }\n+        if (NodeUtil.isNameDeclaration(lhs.getParent()) &&\n+            !NodeUtil.isConstantNameDeclaration(lhs.getParent())) {\n+            // var x = function() { ... } or let x = function() { ... }\n+            // The function is not used in the rest of the scope, so skip it\n+            return false;\n+        }\n+    } else {\n+        // Only traverse the right side if it's not an assignment to [something].prototype.[something]\n+        if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+        }\n+    }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: method isObjectLitKey in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}