{
    "patch": "        } else if (offsetLocal >= 0 && offsetAdjusted >= 0){\n            // both offsets are non-negative, check if they differ\n            if (offsetLocal != offsetAdjusted) {\n                // we must be near a DST boundary\n                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n                if (nextTransitionAdjusted == instantAdjusted) {\n                    // the next transition is the instant itself, go to the previous transition\n                    nextTransitionAdjusted = previousTransition(instantAdjusted - 1);\n                }\n                if (nextTransitionAdjusted <= instantLocal - offsetLocal) {\n                    return getOffset(nextTransitionAdjusted);\n                }\n            }\n        } else {\n            // negative offset(s) present, check if they differ\n            if (offsetLocal != offsetAdjusted) {\n                // we must be near a DST boundary \n                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n                long nextTransitionLocal = nextTransition(instantLocal - offsetAdjusted);\n                if (nextTransitionAdjusted == nextTransitionLocal) {\n                    // the next transitions occur at the same instant, check the offset\n                    if (getOffset(nextTransitionAdjusted) == offsetLocal) {\n                        return offsetLocal;\n                    }\n                } else {\n                    // use the earliest next transition\n                    long nextTransition = nextTransitionAdjusted < nextTransitionLocal ? nextTransitionAdjusted : nextTransitionLocal;\n                    if (nextTransition <= instantLocal - offsetLocal) {\n                        return getOffset(nextTransition);\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..9d96665b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0){\n+            // both offsets are non-negative, check if they differ\n+            if (offsetLocal != offsetAdjusted) {\n+                // we must be near a DST boundary\n+                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+                if (nextTransitionAdjusted == instantAdjusted) {\n+                    // the next transition is the instant itself, go to the previous transition\n+                    nextTransitionAdjusted = previousTransition(instantAdjusted - 1);\n+                }\n+                if (nextTransitionAdjusted <= instantLocal - offsetLocal) {\n+                    return getOffset(nextTransitionAdjusted);\n+                }\n+            }\n+        } else {\n+            // negative offset(s) present, check if they differ\n+            if (offsetLocal != offsetAdjusted) {\n+                // we must be near a DST boundary \n+                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+                long nextTransitionLocal = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextTransitionAdjusted == nextTransitionLocal) {\n+                    // the next transitions occur at the same instant, check the offset\n+                    if (getOffset(nextTransitionAdjusted) == offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    // use the earliest next transition\n+                    long nextTransition = nextTransitionAdjusted < nextTransitionLocal ? nextTransitionAdjusted : nextTransitionLocal;\n+                    if (nextTransition <= instantLocal - offsetLocal) {\n+                        return getOffset(nextTransition);\n+                    }\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}