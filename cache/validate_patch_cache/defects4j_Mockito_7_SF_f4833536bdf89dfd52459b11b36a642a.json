{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        Type actualType = getActualTypeArgumentFor(typeVariable);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n        }\n    } else {\n        for (Type type : bounds) {\n            if (type instanceof TypeVariable) {\n                TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n                Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n                if (actualTypeArgument != null) {\n                    registerTypeVariablesOn(actualTypeArgument);\n                } else {\n                    readTypeVariablesOfBounds(typeVariable);\n                }\n            } else {\n                registerTypeVariablesOn(type);\n            }\n        }\n    }\n}\n\nprivate void readTypeVariablesOfBounds(TypeVariable<?> typeVariable) {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> nestedTypeVariable = (TypeVariable<?>) type;\n            Type actualTypeArgument = getActualTypeArgumentFor(nestedTypeVariable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            } else {\n                readTypeVariablesOfBounds(nestedTypeVariable);\n            }\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a9baf9782 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,46 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        Type actualType = getActualTypeArgumentFor(typeVariable);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    } else {\n+        for (Type type : bounds) {\n+            if (type instanceof TypeVariable) {\n+                TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+                Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+                if (actualTypeArgument != null) {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                } else {\n+                    readTypeVariablesOfBounds(typeVariable);\n+                }\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOfBounds(TypeVariable<?> typeVariable) {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> nestedTypeVariable = (TypeVariable<?>) type;\n+            Type actualTypeArgument = getActualTypeArgumentFor(nestedTypeVariable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            } else {\n+                readTypeVariablesOfBounds(nestedTypeVariable);\n+            }\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}