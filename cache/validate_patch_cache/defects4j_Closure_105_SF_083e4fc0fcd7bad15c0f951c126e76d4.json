{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isStringLiteral(elem)) {\n        String stringValue = elem.getString();\n        if (stringValue.isEmpty()) {\n          // Empty strings do not need to be joined.\n          elem = elem.getNext();\n          continue;\n        }\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(stringValue);\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(IR.string(sb.toString())\n              .srcref(elem.getSourceFileName()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem.cloneTree());\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(IR.string(sb.toString())\n          .srcref(arrayNode.getNext().getSourceFileName()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = IR.string(\"\").srcref(n.getSourceFileName());\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          foldedStringNode = IR.add(IR.string(\"\")\n                  .srcref(n.getSourceFileName()), foldedStringNode.cloneTree())\n              .srcref(n.getSourceFileName());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..673eaa9a 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,9 +1458,9 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    if (!NodeUtil.isGetProp(left)) {\n       return;\n     }\n \n@@ -1473,26 +1473,33 @@ class FoldConstants extends AbstractPostOrderCallback\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    List<Node> arrayFoldedChildren = new ArrayList<>();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n+      if (NodeUtil.isStringLiteral(elem)) {\n+        String stringValue = elem.getString();\n+        if (stringValue.isEmpty()) {\n+          // Empty strings do not need to be joined.\n+          elem = elem.getNext();\n+          continue;\n+        }\n         if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n+        sb.append(stringValue);\n       } else {\n         if (sb.length() > 0) {\n           // + 2 for the quotes.\n           foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n+          arrayFoldedChildren.add(IR.string(sb.toString())\n+              .srcref(elem.getSourceFileName()));\n           sb = new StringBuilder();\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        arrayFoldedChildren.add(elem.cloneTree());\n       }\n       elem = elem.getNext();\n     }\n@@ -1500,7 +1507,8 @@ class FoldConstants extends AbstractPostOrderCallback\n     if (sb.length() > 0) {\n       // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+      arrayFoldedChildren.add(IR.string(sb.toString())\n+          .srcref(arrayNode.getNext().getSourceFileName()));\n     }\n     // one for each comma.\n     foldedSize += arrayFoldedChildren.size() - 1;\n@@ -1508,7 +1516,7 @@ class FoldConstants extends AbstractPostOrderCallback\n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+        Node emptyStringNode = IR.string(\"\").srcref(n.getSourceFileName());\n         parent.replaceChild(n, emptyStringNode);\n         break;\n \n@@ -1521,32 +1529,9 @@ class FoldConstants extends AbstractPostOrderCallback\n         if (foldedStringNode.getType() != Token.STRING) {\n           // If the Node is not a string literal, ensure that\n           // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n-  }\n+          foldedStringNode = IR.add(IR.string(\"\")\n+                  .srcref(n.getSourceFileName()), foldedStringNode.cloneTree())\n+              .srcref(n.getSourceFileName());\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}