{
    "patch": "import org.mockito.cglib.proxy.Callback;\nimport org.mockito.cglib.proxy.Enhancer;\nimport org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.InvocationHandler;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\npublic class MockResetter {\n    @SuppressWarnings(\"unchecked\")\n    public static <T> void resetMock(T mock) {\n        Enhancer enhancer = new Enhancer();\n        if (mock instanceof Factory) {\n            enhancer.setSuperclass(((Factory) mock).getClass().getSuperclass());\n            enhancer.setInterfaces(((Factory) mock).getCallbackTypes());\n        } else {\n            enhancer.setSuperclass(mock.getClass());\n        }\n        \n        enhancer.setCallback(new InvocationHandler() {\n            private final MockHandlerInterface<?> mockHandler = getMockHandler(mock);\n\n            @Override\n            public Object invoke(Object o, Method method, Object[] objects) throws Throwable {\n                if (method.getDeclaringClass() == Object.class) {\n                    return method.invoke(this, objects);\n                }\n                return mockHandler.handle(new MethodInvocationReport(method, objects));\n            }\n        });\n\n        T newMock;\n        if (mock instanceof Factory) {\n            newMock = (T) enhancer.create(((Factory) mock).getCallbackTypes(),\n                    ((Factory) mock).getCallbacks());\n        } else {\n            newMock = (T) enhancer.create();\n        }\n\n        if (mock instanceof Factory) {\n            List<Callback> callbacks = ((Factory) mock).getCallbacks();\n            ((Factory) newMock).setCallbacks(callbacks.toArray(new Callback[0]));\n        }\n\n        for (Method method : mock.getClass().getDeclaredMethods()) {\n            if (method.getDeclaringClass() != Object.class) {\n                try {\n                    Method newMethod = newMock.getClass().getDeclaredMethod(method.getName(),\n                            method.getParameterTypes());\n                    newMethod.setAccessible(true);\n                } catch (NoSuchMethodException e) {\n                    continue;\n                }\n            }\n        }\n\n        if (mock instanceof Factory) {\n            ((Factory) mock).getCallbacks()[0] = ((Factory) newMock).getCallbacks()[0];\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        if (mock instanceof Factory) {\n            Callback[] callbacks = ((Factory) mock).getCallbacks();\n            MethodInterceptor methodInterceptor = (MethodInterceptor) callbacks[0];\n            MockHandler<T> handler = (MockHandler<T>) methodInterceptor.getHandler();\n            return handler.getMockHandler();\n        } else {\n            MethodInterceptor methodInterceptor = (MethodInterceptor) mock;\n            MockHandler<T> handler = (MockHandler<T>) methodInterceptor.getHandler();\n            return handler.getMockHandler();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..cccf9e5ad 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,84 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Callback;\n+import org.mockito.cglib.proxy.Enhancer;\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.InvocationHandler;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+public class MockResetter {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> void resetMock(T mock) {\n+        Enhancer enhancer = new Enhancer();\n+        if (mock instanceof Factory) {\n+            enhancer.setSuperclass(((Factory) mock).getClass().getSuperclass());\n+            enhancer.setInterfaces(((Factory) mock).getCallbackTypes());\n+        } else {\n+            enhancer.setSuperclass(mock.getClass());\n+        }\n+        \n+        enhancer.setCallback(new InvocationHandler() {\n+            private final MockHandlerInterface<?> mockHandler = getMockHandler(mock);\n+\n+            @Override\n+            public Object invoke(Object o, Method method, Object[] objects) throws Throwable {\n+                if (method.getDeclaringClass() == Object.class) {\n+                    return method.invoke(this, objects);\n+                }\n+                return mockHandler.handle(new MethodInvocationReport(method, objects));\n+            }\n+        });\n+\n+        T newMock;\n+        if (mock instanceof Factory) {\n+            newMock = (T) enhancer.create(((Factory) mock).getCallbackTypes(),\n+                    ((Factory) mock).getCallbacks());\n+        } else {\n+            newMock = (T) enhancer.create();\n+        }\n+\n+        if (mock instanceof Factory) {\n+            List<Callback> callbacks = ((Factory) mock).getCallbacks();\n+            ((Factory) newMock).setCallbacks(callbacks.toArray(new Callback[0]));\n+        }\n+\n+        for (Method method : mock.getClass().getDeclaredMethods()) {\n+            if (method.getDeclaringClass() != Object.class) {\n+                try {\n+                    Method newMethod = newMock.getClass().getDeclaredMethod(method.getName(),\n+                            method.getParameterTypes());\n+                    newMethod.setAccessible(true);\n+                } catch (NoSuchMethodException e) {\n+                    continue;\n+                }\n+            }\n+        }\n+\n+        if (mock instanceof Factory) {\n+            ((Factory) mock).getCallbacks()[0] = ((Factory) newMock).getCallbacks()[0];\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        if (mock instanceof Factory) {\n+            Callback[] callbacks = ((Factory) mock).getCallbacks();\n+            MethodInterceptor methodInterceptor = (MethodInterceptor) callbacks[0];\n+            MockHandler<T> handler = (MockHandler<T>) methodInterceptor.getHandler();\n+            return handler.getMockHandler();\n+        } else {\n+            MethodInterceptor methodInterceptor = (MethodInterceptor) mock;\n+            MockHandler<T> handler = (MockHandler<T>) methodInterceptor.getHandler();\n+            return handler.getMockHandler();\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}