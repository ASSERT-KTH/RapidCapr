{
    "patch": "    private boolean isInlinableObject(List<Reference> refs) {\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        if (parent == null) {\n          return false;\n        }\n        Node grandparent = parent.getParent();\n        if (grandparent == null) {\n          return false;\n        }\n\n        // Don't try to inline object keys that are computed/generated.\n        if (NodeUtil.isLhsByDestructuring(name)\n            || parent.isComputedProp()) {\n          return false;\n        }\n\n        Node target = null;\n        boolean isDeclaration = false;\n\n        if (NodeUtil.isNameDeclaration(parent)) {\n          target = name;\n          isDeclaration = true;\n        } else if (NodeUtil.isAssignmentOp(parent)) {\n          target = parent.getFirstChild();\n        } else {\n          continue;\n        }\n\n        Node value = target.getFirstChild();\n        if (value == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!value.isObjectLit()) {\n          continue;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node key = value.getFirstChild(); key != null;\n             key = key.getNext()) {\n          if (key.isGetterDef() ||\n              key.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          Node childValue = key.getFirstChild();\n          if (childValue != null) {\n            boolean isInlinableValue = (childValue.isName()\n                && NodeUtil.isLValue(childValue,\n                                      grandparent));\n            if (!isInlinableValue) {\n              return false;\n            }\n          }\n        }\n\n        // If we have a variable declaration, and we've gotten this\n        // far, then we can inline. There are no other assignments to\n        // this variable name that would mess up the inlining.\n        // Otherwise (i.e. we have an assignent), we need to check\n        // the rest of the scope to make sure that there are no other\n        // assignments that may conflict with the inlining. If we pass\n        // that, we can inline.\n        if (isDeclaration) {\n          return true;\n        } else if (noConflictsExist(target, value)) {\n          return true;\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..d90c7b8c 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -153,48 +153,44 @@ class InlineObjectLiterals implements CompilerPass {\n      * </pre>\n      */\n     private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+        if (parent == null) {\n+          return false;\n+        }\n+        Node grandparent = parent.getParent();\n+        if (grandparent == null) {\n+          return false;\n+        }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n+        // Don't try to inline object keys that are computed/generated.\n+        if (NodeUtil.isLhsByDestructuring(name)\n+            || parent.isComputedProp()) {\n+          return false;\n         }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+        Node target = null;\n+        boolean isDeclaration = false;\n+\n+        if (NodeUtil.isNameDeclaration(parent)) {\n+          target = name;\n+          isDeclaration = true;\n+        } else if (NodeUtil.isAssignmentOp(parent)) {\n+          target = parent.getFirstChild();\n+        } else {\n+          continue;\n         }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n+        Node value = target.getFirstChild();\n+        if (value == null) {\n           // A var with no assignment.\n           continue;\n         }\n \n         // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n+        if (!value.isObjectLit()) {\n+          continue;\n         }\n \n         // Make sure that the value is not self-refential. IOW,\n@@ -205,38 +201,39 @@ class InlineObjectLiterals implements CompilerPass {\n         // but x = {a: 1, b: x.a} is.\n         //\n         // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n+        for (Node key = value.getFirstChild(); key != null;\n+             key = key.getNext()) {\n+          if (key.isGetterDef() ||\n+              key.isSetterDef()) {\n             // ES5 get/set not supported.\n             return false;\n           }\n \n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n+          Node childValue = key.getFirstChild();\n+          if (childValue != null) {\n+            boolean isInlinableValue = (childValue.isName()\n+                && NodeUtil.isLValue(childValue,\n+                                      grandparent));\n+            if (!isInlinableValue) {\n+              return false;\n             }\n           }\n         }\n \n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+        // If we have a variable declaration, and we've gotten this\n+        // far, then we can inline. There are no other assignments to\n+        // this variable name that would mess up the inlining.\n+        // Otherwise (i.e. we have an assignent), we need to check\n+        // the rest of the scope to make sure that there are no other\n+        // assignments that may conflict with the inlining. If we pass\n+        // that, we can inline.\n+        if (isDeclaration) {\n+          return true;\n+        } else if (noConflictsExist(target, value)) {\n+          return true;\n+        }\n       }\n-      return ret;\n+      return false;\n     }\n \n     private boolean isVarOrAssignExprLhs(Node n) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}