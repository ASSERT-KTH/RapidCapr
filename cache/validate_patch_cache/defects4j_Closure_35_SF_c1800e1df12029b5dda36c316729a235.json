{
    "patch": "   * Infers properties of an object from a constraint object.\n   * If the constraint object is a record type, this function adds inferred properties to the\n   * given type that exist on the constraint object but are not already declared on the type.\n   */\n  void inferPropertiesFromConstraint(JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n\n    if (constraintObj != null && constraintObj.isRecordType() &&\n        type.isSubtypeOf(getNativeType(OBJECT_TYPE))) {\n\n      ObjectType objType =\n          ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n      JSType constraint = getJSTypeOfQnameDeclaration(n);\n      inferPropertiesFromConstraint(narrowed, constraint);\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..6b8608d4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,15 +1111,23 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+   * Infers properties of an object from a constraint object.\n+   * If the constraint object is a record type, this function adds inferred properties to the\n+   * given type that exist on the constraint object but are not already declared on the type.\n+   */\n+  void inferPropertiesFromConstraint(JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+\n+    if (constraintObj != null && constraintObj.isRecordType() &&\n+        type.isSubtypeOf(getNativeType(OBJECT_TYPE))) {\n+\n+      ObjectType objType =\n+          ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n@@ -1140,13 +1148,17 @@ class TypeInference\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n+      JSType constraint = getJSTypeOfQnameDeclaration(n);\n+      inferPropertiesFromConstraint(narrowed, constraint);\n+    }\n+    return scope;\n     }\n     return scope;\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}