{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int inputLength = input.length();\n\n    // if input does not contain '&' return 0\n    if(index >= inputLength - 1 || input.charAt(index) != '&') {\n        return 0;\n    }\n    int value = 0;\n    boolean isHex = false;\n\n    // check hex value\n    int nextIndex = index + 2;\n    if (nextIndex < inputLength && input.charAt(nextIndex - 1) == '#' && (input.charAt(nextIndex) == 'x' || input.charAt(nextIndex) == 'X')) {\n        isHex = true;\n        nextIndex++;\n    }\n    \n    // get the end index of the entity\n    int endIndex = nextIndex;\n    while(endIndex < inputLength && input.charAt(endIndex) != ';') {\n        endIndex++;\n    }\n\n    // early return if the entity does not end with ';'\n    if(endIndex == inputLength) {\n        return 0;\n    }\n\n    try {\n        String entity = input.subSequence(nextIndex, endIndex).toString();\n        if(isHex) {\n            value = Integer.parseInt(entity, 16);\n        } else {\n            value = Integer.parseInt(entity, 10);\n        }\n    } catch(NumberFormatException nfe) {\n        return 0;\n    }\n\n    // check for surrogate pairs\n    if(value >= 0xD800 && value <= 0xDFFF) {\n        return 0;\n    } else if(value > 0xFFFF) {\n        value -= 0x10000;\n        out.write((value >>> 10) + 0xD800);\n        out.write((value & 0x3FF) + 0xDC00);\n    } else {\n        out.write((char) value);\n    }\n\n    // return the number of characters read\n    return endIndex - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..c85de66f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,57 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int inputLength = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+    // if input does not contain '&' return 0\n+    if(index >= inputLength - 1 || input.charAt(index) != '&') {\n+        return 0;\n+    }\n+    int value = 0;\n+    boolean isHex = false;\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    // check hex value\n+    int nextIndex = index + 2;\n+    if (nextIndex < inputLength && input.charAt(nextIndex - 1) == '#' && (input.charAt(nextIndex) == 'x' || input.charAt(nextIndex) == 'X')) {\n+        isHex = true;\n+        nextIndex++;\n+    }\n+    \n+    // get the end index of the entity\n+    int endIndex = nextIndex;\n+    while(endIndex < inputLength && input.charAt(endIndex) != ';') {\n+        endIndex++;\n+    }\n \n+    // early return if the entity does not end with ';'\n+    if(endIndex == inputLength) {\n+        return 0;\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+    try {\n+        String entity = input.subSequence(nextIndex, endIndex).toString();\n+        if(isHex) {\n+            value = Integer.parseInt(entity, 16);\n+        } else {\n+            value = Integer.parseInt(entity, 10);\n         }\n+    } catch(NumberFormatException nfe) {\n         return 0;\n     }\n+\n+    // check for surrogate pairs\n+    if(value >= 0xD800 && value <= 0xDFFF) {\n+        return 0;\n+    } else if(value > 0xFFFF) {\n+        value -= 0x10000;\n+        out.write((value >>> 10) + 0xD800);\n+        out.write((value & 0x3FF) + 0xDC00);\n+    } else {\n+        out.write((char) value);\n+    }\n+\n+    // return the number of characters read\n+    return endIndex - index + 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 55295 expected:<\ud7ff[?]> but was:<\ud7ff[&#xd800;]>",
    "test_result": "FAIL"
}