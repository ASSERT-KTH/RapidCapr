{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int totalMonths = (getYears() * 12) + getMonths();\n\n    int totalDays = getDays();\n    totalDays += getWeeks() * 7;\n\n    int years = 0;\n    int months = 0;\n    int weeks = 0;\n    int days = 0;\n\n    if (type.isSupported(DurationFieldType.years())) {\n        years = totalMonths / 12;\n        totalMonths %= 12;\n    }\n\n    if (type.isSupported(DurationFieldType.months())) {\n        months = totalMonths;\n        if (type.isSupported(DurationFieldType.weeks())) {\n            int totalWeeks = totalDays / 7;\n            weeks = totalWeeks;\n            days = totalDays % 7;\n        } else {\n            days += totalDays;\n            months += days / 30;\n            days %= 30;\n            if (months >= 12 && type.isSupported(DurationFieldType.years())) {\n                years += months / 12;\n                months %= 12;\n            }\n        }\n    } else if (type.isSupported(DurationFieldType.weeks())) {\n        weeks = totalDays / 7;\n        days = totalDays % 7;\n        years = 0;\n        months = 0;\n    } else {\n        days = totalDays + (totalMonths * 30);\n        years = 0;\n        months = 0;\n        weeks = 0;\n    }\n\n    Period result = new Period(0, 0, 0, 0, years, months, weeks, days, type, ISOChronology.getInstanceUTC());\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..4b638a8e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,53 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int totalMonths = (getYears() * 12) + getMonths();\n+\n+    int totalDays = getDays();\n+    totalDays += getWeeks() * 7;\n+\n+    int years = 0;\n+    int months = 0;\n+    int weeks = 0;\n+    int days = 0;\n+\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years = totalMonths / 12;\n+        totalMonths %= 12;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months = totalMonths;\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            int totalWeeks = totalDays / 7;\n+            weeks = totalWeeks;\n+            days = totalDays % 7;\n+        } else {\n+            days += totalDays;\n+            months += days / 30;\n+            days %= 30;\n+            if (months >= 12 && type.isSupported(DurationFieldType.years())) {\n+                years += months / 12;\n+                months %= 12;\n             }\n         }\n-        return result;\n-    }\n+    } else if (type.isSupported(DurationFieldType.weeks())) {\n+        weeks = totalDays / 7;\n+        days = totalDays % 7;\n+        years = 0;\n+        months = 0;\n+    } else {\n+        days = totalDays + (totalMonths * 30);\n+        years = 0;\n+        months = 0;\n+        weeks = 0;\n+    }\n+\n+    Period result = new Period(0, 0, 0, 0, years, months, weeks, days, type, ISOChronology.getInstanceUTC());\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,int,PeriodType,ISOChronology)",
    "test_result": "ERROR"
}