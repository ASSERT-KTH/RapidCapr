{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent.isCatch()) {\n      // ignore catch parameter\n      continue;\n    }\n    if (v.isLocal()) {\n      if (parent.isVar() && parent.getParent().isScript()\n          && !n.hasChildren()) {\n        continue;\n      }\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null) {\n          aliases.put(name, aliasVar);\n          Node initialValue = aliasVar.getInitialValue();\n          if (initialValue != null) {\n            String qualifiedName = initialValue.getQualifiedName();\n            if (qualifiedName != null) {\n              transformation.addAlias(name, qualifiedName);\n            }\n          }\n        } else {\n          if (isPrivateName(name)) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          }\n        }\n      } else if (!parent.isBlock() && !parent.isFunction()\n                 && !parent.isCatch() && !parent.isModuleBody()) {\n        // It's not a var declaration, so we might later assume that it's an alias.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n  }\n}\nprivate boolean isPrivateName(String name) {\n  return name.indexOf(PRIVATE_PREFIX) == 0;\n}\nprivate static final String PRIVATE_PREFIX = \"___\";",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..163cce90 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,49 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent.isCatch()) {\n+      // ignore catch parameter\n+      continue;\n+    }\n+    if (v.isLocal()) {\n+      if (parent.isVar() && parent.getParent().isScript()\n+          && !n.hasChildren()) {\n+        continue;\n+      }\n+      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null) {\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+          Node initialValue = aliasVar.getInitialValue();\n+          if (initialValue != null) {\n+            String qualifiedName = initialValue.getQualifiedName();\n+            if (qualifiedName != null) {\n+              transformation.addAlias(name, qualifiedName);\n+            }\n+          }\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          if (isPrivateName(name)) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          }\n         }\n+      } else if (!parent.isBlock() && !parent.isFunction()\n+                 && !parent.isCatch() && !parent.isModuleBody()) {\n+        // It's not a var declaration, so we might later assume that it's an alias.\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n     }\n+  }\n+}\n+private boolean isPrivateName(String name) {\n+  return name.indexOf(PRIVATE_PREFIX) == 0;\n+}\n+private static final String PRIVATE_PREFIX = \"___\";\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}