{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isObjectLitKey(n)) {\n          return false; // Don't traverse object literal keys.\n        }\n        if (NodeUtil.isLValue(n) &&\n            (NodeUtil.isGet(lhs) || NodeUtil.isGet(rhs))) {\n          // Only traverse the left side of the assignment.\n          if (!NodeUtil.isAssignmentOp(parent) || n == lhs) {\n            if (assignLhsChild == null) {\n              assignLhsChild = lhs;\n            }\n          }\n          return n == lhs; // return true for lhs so it gets processed\n        } else {\n          if (parent.getLastChild() != n && NodeUtil.isGet(lhs)) {\n            boolean childIsPrototype = lhs.getLastChild().getString().equals(\"prototype\");\n            boolean parentIsPrototype = NodeUtil.isSubclassAssignment(parent) || childIsPrototype;\n            if (!parentIsPrototype) {\n              return false; // Don't traverse for prototype assignments\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e1b95ffa 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (NodeUtil.isObjectLitKey(n)) {\n+          return false; // Don't traverse object literal keys.\n+        }\n+        if (NodeUtil.isLValue(n) &&\n+            (NodeUtil.isGet(lhs) || NodeUtil.isGet(rhs))) {\n+          // Only traverse the left side of the assignment.\n+          if (!NodeUtil.isAssignmentOp(parent) || n == lhs) {\n+            if (assignLhsChild == null) {\n+              assignLhsChild = lhs;\n+            }\n+          }\n+          return n == lhs; // return true for lhs so it gets processed\n+        } else {\n+          if (parent.getLastChild() != n && NodeUtil.isGet(lhs)) {\n+            boolean childIsPrototype = lhs.getLastChild().getString().equals(\"prototype\");\n+            boolean parentIsPrototype = NodeUtil.isSubclassAssignment(parent) || childIsPrototype;\n+            if (!parentIsPrototype) {\n+              return false; // Don't traverse for prototype assignments\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: method isObjectLitKey in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}