{
    "patch": "private void defineDeclaredFunction(Node fn, Node parent) {\n  Node name = NodeUtil.getNameNode(fn);\n\n  if (NodeUtil.isNamespaceDecl(name)) {\n    defineNamespace(name, parent);\n  } else if (NodeUtil.isTypedefDecl(fn)) {\n    defineTypedef(fn);\n  } else if (!NodeUtil.isFunctionExpression(fn)) {\n    String varName = name.getString();\n    boolean inferred = currentScope.hasUndeclaredVar(varName);\n    // Create the variable and declare it in the current scope.\n    Var var = Var.makeFunction(varName, fn, currentScope, inferred);\n    currentScope.declare(var);\n    defineFunctionNode(fn, var);\n  } else {\n    // function expressions are handled in their parent expression.\n    // For example, fn() is handled in CALL.\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..35886b17 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,25 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+private void defineDeclaredFunction(Node fn, Node parent) {\n+  Node name = NodeUtil.getNameNode(fn);\n+\n+  if (NodeUtil.isNamespaceDecl(name)) {\n+    defineNamespace(name, parent);\n+  } else if (NodeUtil.isTypedefDecl(fn)) {\n+    defineTypedef(fn);\n+  } else if (!NodeUtil.isFunctionExpression(fn)) {\n+    String varName = name.getString();\n+    boolean inferred = currentScope.hasUndeclaredVar(varName);\n+    // Create the variable and declare it in the current scope.\n+    Var var = Var.makeFunction(varName, fn, currentScope, inferred);\n+    currentScope.declare(var);\n+    defineFunctionNode(fn, var);\n+  } else {\n+    // function expressions are handled in their parent expression.\n+    // For example, fn() is handled in CALL.\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: defineDeclaredFunction(Node,Node) in TypedScopeCreator.LocalScopeBuilder cannot override defineDeclaredFunction(Node,Node) in TypedScopeCreator.AbstractScopeBuilder",
    "test_result": "ERROR"
}