{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    try {\n        millis = savedField.set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}\n\nif (count > 0 && text != null) {\n    String[] fields = new String[count];\n    for (int i = 0; i < count; i++) {\n        fields[i] = savedFields[i].toString();\n    }\n    DateTimeParser parser = new DateTimeFormatterBuilder().appendPattern(\"[yyyy-MM-dd HH:mm:ss]\").toParser();\n    DateTimeParserBucket bucket = new DateTimeParserBucket(0L, chrono, null, iDefaultYear, iDefaultZone);\n    int pos = parser.parseInto(bucket, text, 0);\n    if (pos >= 0) {\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (bucket.containsField(field)) {\n                String value = Integer.toString(bucket.getValue(field));\n                String required = fields[i].substring(fields[i].indexOf('=') + 1, fields[i].indexOf(',', fields[i].indexOf('=') + 1));\n                if (!required.equals(value)) {\n                    throw new IllegalArgumentException(\"Value of \" + field.getType() + \" field does not match parsed data. \"\n                            + \"Parse data: \" + text + \", field: \" + fields[i].substring(0, fields[i].indexOf('=')) + \", required: \" + required + \", found: \" + value);\n                }\n            }\n        }\n    }\n}\n\nif (millis == Long.MIN_VALUE) {\n    throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n}\n\nif (iZone == null) {\n    millis -= iOffset;\n} else {\n    int offset = iZone.getOffsetFromLocal(millis);\n    millis -= offset;\n    if (offset != iZone.getOffset(millis)) {\n        String message =\n            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n        if (text != null) {\n            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n        }\n        throw new IllegalArgumentException(message);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e5d8b161 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,59 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    try {\n+        millis = savedField.set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+}\n+\n+if (count > 0 && text != null) {\n+    String[] fields = new String[count];\n+    for (int i = 0; i < count; i++) {\n+        fields[i] = savedFields[i].toString();\n+    }\n+    DateTimeParser parser = new DateTimeFormatterBuilder().appendPattern(\"[yyyy-MM-dd HH:mm:ss]\").toParser();\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(0L, chrono, null, iDefaultYear, iDefaultZone);\n+    int pos = parser.parseInto(bucket, text, 0);\n+    if (pos >= 0) {\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (bucket.containsField(field)) {\n+                String value = Integer.toString(bucket.getValue(field));\n+                String required = fields[i].substring(fields[i].indexOf('=') + 1, fields[i].indexOf(',', fields[i].indexOf('=') + 1));\n+                if (!required.equals(value)) {\n+                    throw new IllegalArgumentException(\"Value of \" + field.getType() + \" field does not match parsed data. \"\n+                            + \"Parse data: \" + text + \", field: \" + fields[i].substring(0, fields[i].indexOf('=')) + \", required: \" + required + \", found: \" + value);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+if (millis == Long.MIN_VALUE) {\n+    throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+}\n+\n+if (iZone == null) {\n+    millis -= iOffset;\n+} else {\n+    int offset = iZone.getOffsetFromLocal(millis);\n+    millis -= offset;\n+    if (offset != iZone.getOffset(millis)) {\n+        String message =\n+            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+        if (text != null) {\n+            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        }\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}