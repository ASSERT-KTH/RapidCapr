{
    "patch": "        if (block.isFunction && !block.equals(ref.getBasicBlock())) {\n          // If the variable is declared inside a function/closure, and not used nor assigned outside of it, \n          // we have to assume that it will be assigned multiple times because it may be re-initialized each\n          // time the closure is called.\n          return false;\n        } else if (block.isLoop && block.getParent() == ref.getBasicBlock().getParent()) {\n          // If the variable is assigned inside a loop that doesn't contain the reference block, we have to assume \n          // that it will be assigned multiple times. Ref: https://github.com/google/closure-compiler/issues/1053\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4a26d3fd 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction && !block.equals(ref.getBasicBlock())) {\n+          // If the variable is declared inside a function/closure, and not used nor assigned outside of it, \n+          // we have to assume that it will be assigned multiple times because it may be re-initialized each\n+          // time the closure is called.\n+          return false;\n+        } else if (block.isLoop && block.getParent() == ref.getBasicBlock().getParent()) {\n+          // If the variable is assigned inside a loop that doesn't contain the reference block, we have to assume \n+          // that it will be assigned multiple times. Ref: https://github.com/google/closure-compiler/issues/1053\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}