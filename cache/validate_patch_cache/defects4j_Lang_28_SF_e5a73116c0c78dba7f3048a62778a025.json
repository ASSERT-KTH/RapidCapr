{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input == null || index < 0 || index >= input.length()) {\n        return 0;\n    }\n\n    int entityEnd = input.toString().indexOf(';', index);\n    if (input.charAt(index) == '&' && entityEnd > index) {\n        int radix = 10;\n        String entity = input.toString().substring(index + 2, entityEnd);\n        if (entity.matches(\"^#x[0-9a-fA-F]+$\")) {\n            radix = 16;\n            entity = entity.substring(2);\n        } else if (entity.matches(\"^#[0-9]+$\")) {\n            entity = entity.substring(1);\n        } else {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(entity, radix);\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n\n        if (entityValue >= Character.MIN_CODE_POINT && entityValue <= Character.MAX_CODE_POINT &&\n                Character.isValidCodePoint(entityValue)) {\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n            return entityEnd - index + 1;\n        }\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..07fb73ae 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,39 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    if (input == null || index < 0 || index >= input.length()) {\n+        return 0;\n+    }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+    int entityEnd = input.toString().indexOf(';', index);\n+    if (input.charAt(index) == '&' && entityEnd > index) {\n+        int radix = 10;\n+        String entity = input.toString().substring(index + 2, entityEnd);\n+        if (entity.matches(\"^#x[0-9a-fA-F]+$\")) {\n+            radix = 16;\n+            entity = entity.substring(2);\n+        } else if (entity.matches(\"^#[0-9]+$\")) {\n+            entity = entity.substring(1);\n+        } else {\n+            return 0;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+        int entityValue;\n+        try {\n+            entityValue = Integer.parseInt(entity, radix);\n+        } catch (NumberFormatException e) {\n+            return 0;\n+        }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (entityValue >= Character.MIN_CODE_POINT && entityValue <= Character.MAX_CODE_POINT &&\n+                Character.isValidCodePoint(entityValue)) {\n+            char[] chars = Character.toChars(entityValue);\n+            out.write(chars);\n+            return entityEnd - index + 1;\n         }\n-        return 0;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: -1",
    "test_result": "FAIL"
}