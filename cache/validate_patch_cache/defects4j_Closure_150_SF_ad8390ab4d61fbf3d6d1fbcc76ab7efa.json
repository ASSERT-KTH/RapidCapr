{
    "patch": "@Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == t.getScopeRoot()) {\n      resetContext();\n      functionScope = t.getScope();\n      scope = functionScope;\n\n      // The top level scope is not a block scope because it\n      // has no braces.\n      currentScopeIsBlockScope = false;\n    }\n\n    if (n.isScript()) {\n      resetContext();\n      return;\n    }\n\n    attachLiteralTypes(n);\n\n    switch (n.getToken()) {\n      case FUNCTION:\n        if (parent != null && parent.getToken() == Token.ASSIGN) {\n          defineFunctionAlias(n);\n        } else if (parent != null && parent.getToken() == Token.EXPR_RESULT) {\n          defineFunctionExpression(n, parent);\n        } else if (parent == null || parent.getToken() != Token.EXPR_RESULT ||\n            NodeUtil.isNamespaceDecl(parent)) {\n          defineDeclaredFunction(n, parent);\n        } else {\n          checkState(false, \"Unexpected state.\");\n        }\n        break;\n\n      case CATCH:\n        defineCatch(n, parent);\n        break;\n\n      case VAR:\n      case LET:\n      case CONST:\n        defineVar(n, parent);\n        break;\n\n      case NAME:\n        if (NodeUtil.isLhsByDestructuring(parent) || NodeUtil.isTopLevelNamespaceDecl(parent)) {\n          declareVar(n, parent);\n        }\n        break;\n\n      case CALL:\n        if (parent == null && NodeUtil.isExpressionStatement(n)) {\n          handleCallStatement(n);\n        }\n        break;\n\n      case RETURN:\n        hasReturn = true;\n\n        Node returnValue = n.getFirstChild();\n        if (returnValue != null) {\n          checkState(returnValue != null);\n          // If we are inside a function, we should already have a return type,\n          // so this should not overwrite that.\n          if (returnType == null) {\n            returnType = createTypeFromNode(returnValue);\n          }\n        }\n        break;\n\n      case CLASS:\n        defineClass(n, parent);\n        break;\n\n      case OBJECTLIT:\n        if (parent == null || !parent.isExprResult()) {\n          boolean isObjectLitInNamespace = (parent != null\n              && parent.isAssign()\n              && parent.getFirstChild().isObjectLit()\n              && NodeUtil.isNamespaceDecl(parent.getParent()));\n\n          if (!isObjectLitInNamespace) {\n            defineObjectLiteral(n, parent);\n          }\n        }\n        break;\n\n      case STRING_KEY:\n        if (parent.isObjectLit() && parent.getParent() == null) {\n          defineVar(n, parent);\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    if (n == t.getScopeRoot()) {\n      scope = null;\n      functionScope = null;\n      currentScopeIsBlockScope = false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..acffacd4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,109 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == t.getScopeRoot()) {\n+      resetContext();\n+      functionScope = t.getScope();\n+      scope = functionScope;\n+\n+      // The top level scope is not a block scope because it\n+      // has no braces.\n+      currentScopeIsBlockScope = false;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    if (n.isScript()) {\n+      resetContext();\n+      return;\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    attachLiteralTypes(n);\n+\n+    switch (n.getToken()) {\n+      case FUNCTION:\n+        if (parent != null && parent.getToken() == Token.ASSIGN) {\n+          defineFunctionAlias(n);\n+        } else if (parent != null && parent.getToken() == Token.EXPR_RESULT) {\n+          defineFunctionExpression(n, parent);\n+        } else if (parent == null || parent.getToken() != Token.EXPR_RESULT ||\n+            NodeUtil.isNamespaceDecl(parent)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+        } else {\n+          checkState(false, \"Unexpected state.\");\n+        }\n+        break;\n+\n+      case CATCH:\n+        defineCatch(n, parent);\n+        break;\n+\n+      case VAR:\n+      case LET:\n+      case CONST:\n+        defineVar(n, parent);\n+        break;\n+\n+      case NAME:\n+        if (NodeUtil.isLhsByDestructuring(parent) || NodeUtil.isTopLevelNamespaceDecl(parent)) {\n+          declareVar(n, parent);\n+        }\n+        break;\n+\n+      case CALL:\n+        if (parent == null && NodeUtil.isExpressionStatement(n)) {\n+          handleCallStatement(n);\n+        }\n+        break;\n+\n+      case RETURN:\n+        hasReturn = true;\n+\n+        Node returnValue = n.getFirstChild();\n+        if (returnValue != null) {\n+          checkState(returnValue != null);\n+          // If we are inside a function, we should already have a return type,\n+          // so this should not overwrite that.\n+          if (returnType == null) {\n+            returnType = createTypeFromNode(returnValue);\n+          }\n+        }\n+        break;\n+\n+      case CLASS:\n+        defineClass(n, parent);\n+        break;\n+\n+      case OBJECTLIT:\n+        if (parent == null || !parent.isExprResult()) {\n+          boolean isObjectLitInNamespace = (parent != null\n+              && parent.isAssign()\n+              && parent.getFirstChild().isObjectLit()\n+              && NodeUtil.isNamespaceDecl(parent.getParent()));\n+\n+          if (!isObjectLitInNamespace) {\n+            defineObjectLiteral(n, parent);\n+          }\n+        }\n+        break;\n+\n+      case STRING_KEY:\n+        if (parent.isObjectLit() && parent.getParent() == null) {\n           defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+\n+      default:\n+        break;\n     }\n \n+    if (n == t.getScopeRoot()) {\n+      scope = null;\n+      functionScope = null;\n+      currentScopeIsBlockScope = false;\n+    }\n+  }\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}