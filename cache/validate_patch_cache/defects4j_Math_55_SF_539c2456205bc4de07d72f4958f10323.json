{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double v1x = v1.getX();\n      final double v1y = v1.getY();\n      final double v1z = v1.getZ();\n\n      final double v2x = v2.getX();\n      final double v2y = v2.getY();\n      final double v2z = v2.getZ();\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double factor = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n      final double factor2 = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n      final double rescaleFactor = factor * factor2;\n\n      final double v1xs = v1x / rescaleFactor;\n      final double v1ys = v1y / rescaleFactor;\n      final double v1zs = v1z / rescaleFactor;\n\n      final double v2xs = v2x / rescaleFactor;\n      final double v2ys = v2y / rescaleFactor;\n      final double v2zs = v2z / rescaleFactor;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double rho = ((v1xs * v2xs) + (v1ys * v2ys)) + (v1zs * v2zs);\n\n      final double absV2 = Vector3D.NORM.applyAsDouble(v2);\n      double eps = PRECISION * Vector3D.NORM.applyAsDouble(v1) * absV2;\n      if ((rho < eps) && (rho > -eps)) {\n          // if angle(V1, V2) is too small, use cross product by determinant\n          return new Vector3D(v1ys * v2zs - v1zs * v2ys,\n                              v1zs * v2xs - v1xs * v2zs,\n                              v1xs * v2ys - v1ys * v2xs);\n      }\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D((v1ys * v2zs - v1zs * v2ys) - rho * v2xs,\n                          (v1zs * v2xs - v1xs * v2zs) - rho * v2ys,\n                          (v1xs * v2ys - v1ys * v2xs) - rho * v2zs);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..7e6a39135 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,11 +454,29 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double v1x = v1.getX();\n+      final double v1y = v1.getY();\n+      final double v1z = v1.getZ();\n+\n+      final double v2x = v2.getX();\n+      final double v2y = v2.getY();\n+      final double v2z = v2.getZ();\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double factor = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n+      final double factor2 = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n+      final double rescaleFactor = factor * factor2;\n+\n+      final double v1xs = v1x / rescaleFactor;\n+      final double v1ys = v1y / rescaleFactor;\n+      final double v1zs = v1z / rescaleFactor;\n+\n+      final double v2xs = v2x / rescaleFactor;\n+      final double v2ys = v2y / rescaleFactor;\n+      final double v2zs = v2z / rescaleFactor;\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,12 +485,21 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double rho = ((v1xs * v2xs) + (v1ys * v2ys)) + (v1zs * v2zs);\n+\n+      final double absV2 = Vector3D.NORM.applyAsDouble(v2);\n+      double eps = PRECISION * Vector3D.NORM.applyAsDouble(v1) * absV2;\n+      if ((rho < eps) && (rho > -eps)) {\n+          // if angle(V1, V2) is too small, use cross product by determinant\n+          return new Vector3D(v1ys * v2zs - v1zs * v2ys,\n+                              v1zs * v2xs - v1xs * v2zs,\n+                              v1xs * v2ys - v1ys * v2xs);\n+      }\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+      return new Vector3D((v1ys * v2zs - v1zs * v2ys) - rho * v2xs,\n+                          (v1zs * v2xs - v1xs * v2zs) - rho * v2ys,\n+                          (v1xs * v2ys - v1ys * v2xs) - rho * v2zs);\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}