{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (candidate != null) {\n                if (field.getType().isAssignableFrom(candidate.getClass())) {\n                    try {\n                        field.setAccessible(true);\n                        field.set(fieldInstance, candidate);\n\n                        for (Field f : orderedInstanceFieldsFrom(candidate.getClass())) {\n                            injectMockCandidate(f.getType(), mocks, candidate);\n                        }\n                    } catch (IllegalAccessException e) {\n                        throw new IllegalStateException(\"Could not set field value\", e);\n                    }\n                } else {\n                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..fff9554e1 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,26 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (candidate != null) {\n+                if (field.getType().isAssignableFrom(candidate.getClass())) {\n+                    try {\n+                        field.setAccessible(true);\n+                        field.set(fieldInstance, candidate);\n+\n+                        for (Field f : orderedInstanceFieldsFrom(candidate.getClass())) {\n+                            injectMockCandidate(f.getType(), mocks, candidate);\n+                        }\n+                    } catch (IllegalAccessException e) {\n+                        throw new IllegalStateException(\"Could not set field value\", e);\n+                    }\n+                } else {\n+                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}