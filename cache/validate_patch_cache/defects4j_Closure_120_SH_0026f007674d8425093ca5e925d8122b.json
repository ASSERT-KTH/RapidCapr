{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      int count = 0;\n      Node cfgNode = ref.getCfgNode();\n      for (DiGraphEdge<Node, Branch> edge : getCfg().getOutEdges(cfgNode)) {\n        if (edge.getValue() == Branch.NORMAL) {\n          BasicBlock outBlock = edge.getEnd().getJavaScript().getBlock();\n          if (outBlock == null || !outBlock.isFunction && !outBlock.isLoop) {\n            count++;\n            if (count > 1) {\n              return false;\n            }\n          }\n        } else if (edge.getValue() == Branch.ON_EX) {\n          return false;\n        }\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6a72c865 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      int count = 0;\n+      Node cfgNode = ref.getCfgNode();\n+      for (DiGraphEdge<Node, Branch> edge : getCfg().getOutEdges(cfgNode)) {\n+        if (edge.getValue() == Branch.NORMAL) {\n+          BasicBlock outBlock = edge.getEnd().getJavaScript().getBlock();\n+          if (outBlock == null || !outBlock.isFunction && !outBlock.isLoop) {\n+            count++;\n+            if (count > 1) {\n+              return false;\n+            }\n+          }\n+        } else if (edge.getValue() == Branch.ON_EX) {\n+          return false;\n+        }\n+      }\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}