{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    \n    if (elementPairs.isEmpty()) {\n        throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n    }\n    \n    Object[] comp = createComposite(elementPairs);\n    \n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    \n    for (Object o : elementPairs) {\n        if (o instanceof Separator) {\n            throw new IllegalArgumentException(\"Separators not supported\");\n        }\n    }\n    \n    if (!notPrinter) {\n        printer = (PeriodPrinter) comp[0];\n        if (printer == null) {\n            int i = 1;\n            while (i < elementPairs.size()) {\n                Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n                if (tempComp[0] instanceof Composite) {\n                    i += tempComp.length - 1;\n                } else {\n                    printer = (PeriodPrinter) tempComp[0];\n                    break;\n                }\n                i++;\n            }\n        }\n    }\n    \n    if (!notParser) {\n        parser = (PeriodParser) comp[1];\n        if (parser == null) {\n            int i = 1;\n            while (i < elementPairs.size()) {\n                Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n                if (tempComp[0] instanceof Composite) {\n                    i += tempComp.length - 1;\n                } else {\n                    parser = (PeriodParser) tempComp[1];\n                    break;\n                }\n                i++;\n            }\n        }\n    }\n    \n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..f4ee499d 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,62 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    \n+    if (elementPairs.isEmpty()) {\n+        throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n+    }\n+    \n+    Object[] comp = createComposite(elementPairs);\n+    \n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    \n+    for (Object o : elementPairs) {\n+        if (o instanceof Separator) {\n+            throw new IllegalArgumentException(\"Separators not supported\");\n         }\n     }\n+    \n+    if (!notPrinter) {\n+        printer = (PeriodPrinter) comp[0];\n+        if (printer == null) {\n+            int i = 1;\n+            while (i < elementPairs.size()) {\n+                Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n+                if (tempComp[0] instanceof Composite) {\n+                    i += tempComp.length - 1;\n+                } else {\n+                    printer = (PeriodPrinter) tempComp[0];\n+                    break;\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+    \n+    if (!notParser) {\n+        parser = (PeriodParser) comp[1];\n+        if (parser == null) {\n+            int i = 1;\n+            while (i < elementPairs.size()) {\n+                Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n+                if (tempComp[0] instanceof Composite) {\n+                    i += tempComp.length - 1;\n+                } else {\n+                    parser = (PeriodParser) tempComp[1];\n+                    break;\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+    \n+    return new PeriodFormatter(printer, parser);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}