{
    "patch": "        if (Double.isNaN(result[resultOffset])) {\n            if (y[yOffset] > 0) {\n                result[resultOffset] = FastMath.PI / 2;\n            } else if (y[yOffset] < 0) {\n                result[resultOffset] = -FastMath.PI / 2;\n            } else {\n                result[resultOffset] =\n                        (x[xOffset] == 1.0 && Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToRawLongBits(0.0)) ?\n                                0.0 :\n                                ((Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToRawLongBits(-1.0) &&\n                                        Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToRawLongBits(0.0)) ?\n                                        ((y[yOffset] < 0) ? -FastMath.PI : FastMath.PI) :\n                                        Double.NaN);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..df1cc1724 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,21 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isNaN(result[resultOffset])) {\n+            if (y[yOffset] > 0) {\n+                result[resultOffset] = FastMath.PI / 2;\n+            } else if (y[yOffset] < 0) {\n+                result[resultOffset] = -FastMath.PI / 2;\n+            } else {\n+                result[resultOffset] =\n+                        (x[xOffset] == 1.0 && Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToRawLongBits(0.0)) ?\n+                                0.0 :\n+                                ((Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToRawLongBits(-1.0) &&\n+                                        Double.doubleToRawLongBits(y[yOffset]) == Double.doubleToRawLongBits(0.0)) ?\n+                                        ((y[yOffset] < 0) ? -FastMath.PI : FastMath.PI) :\n+                                        Double.NaN);\n+            }\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}