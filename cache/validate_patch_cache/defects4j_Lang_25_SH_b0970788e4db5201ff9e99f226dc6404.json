{
    "patch": "private static final char[] HEX_CHARS = \"0123456789ABCDEF\".toCharArray();\n\npublic static String escape(String input, String encoding) {\n    if (input == null) {\n        return null;\n    }\n    StringBuilder output = new StringBuilder(input.length());\n    Charset charset = Charset.forName(encoding);\n    CharsetEncoder encoder = charset.newEncoder();\n    for (int i = 0; i < input.length(); i++) {\n        char character = input.charAt(i);\n        if (character > 0x7F) {\n            ByteBuffer bb;\n            try {\n                bb = encoder.encode(CharBuffer.wrap(new char[] { character }));\n            } catch (CharacterCodingException cce) {\n                throw new IllegalStateException(\"Encoding failure\", cce);\n            }\n            while (bb.hasRemaining()) {\n                int b = bb.get() & 0xFF;\n                output.append(\"%\").append(HEX_CHARS[b >>> 4]).append(HEX_CHARS[b & 0xF]);\n            }\n        } else {\n            if (character == ' ') { // this line was incorrect\n                output.append(\"+\"); // fixed line\n            } else if (!Character.isLetterOrDigit(character) && \"-_.~\".indexOf(character) < 0) {\n                output.append(\"%\").append(HEX_CHARS[character >>> 4]).append(HEX_CHARS[character & 0xF]);\n            } else {\n                output.append(character);\n            }\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}