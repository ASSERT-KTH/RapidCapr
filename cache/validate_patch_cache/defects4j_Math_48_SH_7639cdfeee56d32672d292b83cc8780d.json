{
    "patch": "// Detect early that algorithm is stuck, instead of waiting\n// for the maximum number of iterations to be exceeded.\nif (FastMath.abs(x1 - x) < FastMath.ulp(x1)) {\n    throw new ConvergenceException();\n}\n\n// detect infinite loop i.e. x1 and x0 have not changed\nif (x == x0 || x == x1) {\n    throw new ConvergenceException();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..775cb687a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,16 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting\n+// for the maximum number of iterations to be exceeded.\n+if (FastMath.abs(x1 - x) < FastMath.ulp(x1)) {\n+    throw new ConvergenceException();\n+}\n+\n+// detect infinite loop i.e. x1 and x0 have not changed\n+if (x == x0 || x == x1) {\n+    throw new ConvergenceException();\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}