{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (!changed.contains(functionName)) {\n          changed.add(functionName);\n          Node functionNode = findFunctionNode(functionName);\n          if (functionNode != null) {\n            findCalledFunctions(functionNode, changed);\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n  \n  private Node findFunctionNode(String functionName) {\n    Node root = compiler.getNodeForCodeInsertion(null);\n    NodeTraversal.traverseRoots(compiler, new NodeTraversal.Callback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.getType() == Token.FUNCTION) {\n          Node nameNode = n.getFirstChild();\n          String name = nameNode.getString();\n          if (functionName.equals(name)) {\n            root.addChildToFront(n.cloneTree());\n          }\n        }\n      }\n    });\n    Node functionNode = root.getFirstChild();\n    Preconditions.checkNotNull(functionNode, \"Function node not found: %s\", functionName);\n    return functionNode;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..64737e62 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,39 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (!changed.contains(functionName)) {\n+          changed.add(functionName);\n+          Node functionNode = findFunctionNode(functionName);\n+          if (functionNode != null) {\n+            findCalledFunctions(functionNode, changed);\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n+  \n+  private Node findFunctionNode(String functionName) {\n+    Node root = compiler.getNodeForCodeInsertion(null);\n+    NodeTraversal.traverseRoots(compiler, new NodeTraversal.Callback() {\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.getType() == Token.FUNCTION) {\n+          Node nameNode = n.getFirstChild();\n+          String name = nameNode.getString();\n+          if (functionName.equals(name)) {\n+            root.addChildToFront(n.cloneTree());\n+          }\n+        }\n+      }\n+    });\n+    Node functionNode = root.getFirstChild();\n+    Preconditions.checkNotNull(functionNode, \"Function node not found: %s\", functionName);\n+    return functionNode;\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}