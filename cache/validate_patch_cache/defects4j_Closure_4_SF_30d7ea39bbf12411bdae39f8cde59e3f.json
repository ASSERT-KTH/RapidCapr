{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean visited = visit();\n    if (!visited) {\n      return this;\n    }\n\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean resolvedOwnProps = resolved && resolveOwnProperties(t, enclosing);\n    if (resolvedOwnProps) {\n      super.resolveInternal(t, enclosing);\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    resolveViaProperties(t, enclosing);\n    if (isInterface() && !isNominalConstructor()\n        && !registry.isSubtypeEmpty(getNominalType(), getNominalType().getInstantiatedInterfaces())) {\n      boolean warned = t.report(\n          JSError.make(registry.getTypeMismatchErrorMessage(), getSourceFile()));\n      registry.getTypeMismatchHelper().setMismatchFound(warned);\n    }\n\n    if (resolvedOwnProps) {\n      finishPropertyContinuations();\n    }\n\n    if (resolved) {\n      if (registry.isLastGeneration() && resolvedOwnProps) {\n        return getReferencedType();\n      }\n      resolveParentNames();\n    }\n\n    if (!resolvedOwnProps) {\n      super.resolveInternal(t, enclosing);\n    }\n\n    if (getNominalType() != null && !registry.isUnresolvedNominalType(getNominalType()) &&\n        getPropMap().hasNominalProp()) {\n      warnInvalidationWhenNeedsCheck(\"illegal use of nominal type for property access\");\n    }\n\n    return this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..0675de2e 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,50 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    boolean visited = visit();\n+    if (!visited) {\n+      return this;\n     }\n \n-    if (resolved) {\n+    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolvedOwnProps = resolved && resolveOwnProperties(t, enclosing);\n+    if (resolvedOwnProps) {\n       super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n+    resolveViaProperties(t, enclosing);\n+    if (isInterface() && !isNominalConstructor()\n+        && !registry.isSubtypeEmpty(getNominalType(), getNominalType().getInstantiatedInterfaces())) {\n+      boolean warned = t.report(\n+          JSError.make(registry.getTypeMismatchErrorMessage(), getSourceFile()));\n+      registry.getTypeMismatchHelper().setMismatchFound(warned);\n+    }\n+\n+    if (resolvedOwnProps) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+\n+    if (resolved) {\n+      if (registry.isLastGeneration() && resolvedOwnProps) {\n+        return getReferencedType();\n+      }\n+      resolveParentNames();\n+    }\n+\n+    if (!resolvedOwnProps) {\n+      super.resolveInternal(t, enclosing);\n+    }\n+\n+    if (getNominalType() != null && !registry.isUnresolvedNominalType(getNominalType()) &&\n+        getPropMap().hasNominalProp()) {\n+      warnInvalidationWhenNeedsCheck(\"illegal use of nominal type for property access\");\n+    }\n+\n+    return this;\n   }\n \n   /**",
    "result_reason": "error: no suitable method found for visit()",
    "test_result": "ERROR"
}