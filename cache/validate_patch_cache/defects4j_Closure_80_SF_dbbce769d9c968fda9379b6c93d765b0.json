{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport java.util.function.Predicate;\n\nclass Main {\n  public static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELETE:\n        return NodeUtil.isImmutableValue(value.getLastChild());\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        // \"delete x\" is an lvalue context but evaluates to undefined.\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        } else {\n          throw new IllegalStateException(\n              \"Unexpected expression node\" + value +\n              \"\\n parent:\" + value.getParent());\n        }\n      }\n  }\n\n  static boolean callHasLocalResult(Node n) {\n    final int childCount = n.getChildCount();\n    if (childCount == 0) {\n      // Parenthesized expressions are allowed as long as their\n      // contained expression is.\n      return true;\n    }\n    final Node fn = n.getFirstChild();\n    switch (fn.getType()) {\n      case Token.NAME:\n        // function f() {}\n        // var x = f();\n        return true;\n      case Token.GETPROP:\n        // a.b or super.b where a is local.\n        return NodeUtil.isImmutableValue(fn.getLastChild());\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n      case Token.NOT:\n        // operators only have a local effect.\n        return true;\n      case Token.CALL:\n      case Token.NEW:\n        final Node target = fn.getFirstChild();\n        if (NodeUtil.isFunctionExpression(target)\n            && target.getFirstChild() == null) {\n          // : doesn't have any required parameters so it doesn't matter\n          // how many arguments are passed to it\n          return true;\n        }\n        // fallthru\n      default: {\n          return false;\n        }\n    }\n  }\n  \n    static boolean newHasLocalResult(Node n) {\n    final Node constructor = NodeUtil.getPrototypeProperty(n.getFirstChild());\n    if (constructor == null) {\n      // new () -- create Instance with anonymous constructor.\n      return true;\n    }\n    switch (constructor.getType()) {\n      case Token.NAME:\n        return constructor.getBooleanProp(Node.IS_LOCAL_FUNCTION);\n      case Token.GETPROP:\n        if (constructor.getFirstChild().getType() == Token.NAME\n            && constructor.getFirstChild().getBooleanProp(Node.IS_NAMESPACE)) {\n          return false;\n        }\n        // fallthru\n      default:\n        return true;\n    }\n  }\n\n  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_EXPONENT:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static boolean isSimpleOperator(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.STRING:\n      case Token.TRUE:\n      case Token.VOID:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.BOOLEAN:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.TRUE:\n      case Token.UNDEFINED:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  public static void main(String[] args) {\n    Node node = Node.newString(\"Hello World!\");\n    Predicate<Node> pred = (n) -> true;\n\n    System.out.println(evaluatesToLocalValue(node, pred));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..d938985d 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,198 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import java.util.function.Predicate;\n+\n+class Main {\n+  public static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    switch (value.getType()) {\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.apply(value)\n+                && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case Token.THIS:\n+        return locals.apply(value);\n+      case Token.NAME:\n+        return isImmutableValue(value) || locals.apply(value);\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        // There is no information about the locality of object properties.\n+        return locals.apply(value);\n+      case Token.CALL:\n+        return callHasLocalResult(value)\n+            || isToStringMethodCall(value)\n+            || locals.apply(value);\n+      case Token.NEW:\n+        return newHasLocalResult(value)\n+               || locals.apply(value);\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        // Literals objects with non-literal children are allowed.\n+        return true;\n+      case Token.DELETE:\n+        return NodeUtil.isImmutableValue(value.getLastChild());\n       case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n+        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n+        // \"delete x\" is an lvalue context but evaluates to undefined.\n         return true;\n       default:\n-        return false;\n-    }\n+        // Other op force a local value:\n+        //  x = '' + g (x is now an local string)\n+        //  x -= g (x is now an local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        } else {\n+          throw new IllegalStateException(\n+              \"Unexpected expression node\" + value +\n+              \"\\n parent:\" + value.getParent());\n+        }\n+      }\n   }\n \n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n+  static boolean callHasLocalResult(Node n) {\n+    final int childCount = n.getChildCount();\n+    if (childCount == 0) {\n+      // Parenthesized expressions are allowed as long as their\n+      // contained expression is.\n+      return true;\n+    }\n+    final Node fn = n.getFirstChild();\n+    switch (fn.getType()) {\n+      case Token.NAME:\n+        // function f() {}\n+        // var x = f();\n+        return true;\n+      case Token.GETPROP:\n+        // a.b or super.b where a is local.\n+        return NodeUtil.isImmutableValue(fn.getLastChild());\n+      case Token.POS:\n+      case Token.NEG:\n+      case Token.BITNOT:\n+      case Token.NOT:\n+        // operators only have a local effect.\n         return true;\n+      case Token.CALL:\n+      case Token.NEW:\n+        final Node target = fn.getFirstChild();\n+        if (NodeUtil.isFunctionExpression(target)\n+            && target.getFirstChild() == null) {\n+          // : doesn't have any required parameters so it doesn't matter\n+          // how many arguments are passed to it\n+          return true;\n+        }\n+        // fallthru\n+      default: {\n+          return false;\n+        }\n+    }\n+  }\n+  \n+    static boolean newHasLocalResult(Node n) {\n+    final Node constructor = NodeUtil.getPrototypeProperty(n.getFirstChild());\n+    if (constructor == null) {\n+      // new () -- create Instance with anonymous constructor.\n+      return true;\n+    }\n+    switch (constructor.getType()) {\n       case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+        return constructor.getBooleanProp(Node.IS_LOCAL_FUNCTION);\n+      case Token.GETPROP:\n+        if (constructor.getFirstChild().getType() == Token.NAME\n+            && constructor.getFirstChild().getBooleanProp(Node.IS_NAMESPACE)) {\n+          return false;\n+        }\n+        // fallthru\n+      default:\n+        return true;\n     }\n-    return false;\n   }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n+  static boolean isAssignmentOp(Node n) {\n+    switch (n.getType()) {\n+      case Token.ASSIGN:\n+      case Token.ASSIGN_ADD:\n+      case Token.ASSIGN_SUB:\n+      case Token.ASSIGN_MUL:\n+      case Token.ASSIGN_DIV:\n+      case Token.ASSIGN_MOD:\n+      case Token.ASSIGN_EXPONENT:\n+      case Token.ASSIGN_BITOR:\n+      case Token.ASSIGN_BITXOR:\n+      case Token.ASSIGN_BITAND:\n+      case Token.ASSIGN_LSH:\n+      case Token.ASSIGN_RSH:\n+      case Token.ASSIGN_URSH:\n+        return true;\n+      default:\n+        return false;\n+    }\n   }\n \n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n+  static boolean isSimpleOperator(Node n) {\n+    switch (n.getType()) {\n+      case Token.EMPTY:\n+      case Token.FALSE:\n+      case Token.NULL:\n+      case Token.NUMBER:\n+      case Token.STRING:\n+      case Token.TRUE:\n+      case Token.VOID:\n+        return true;\n+      default:\n+        return false;\n+    }\n   }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+  static boolean isImmutableValue(Node n) {\n+    switch (n.getType()) {\n+      case Token.BOOLEAN:\n+      case Token.EMPTY:\n+      case Token.FALSE:\n+      case Token.FUNCTION:\n+      case Token.NULL:\n+      case Token.NUMBER:\n+      case Token.REGEXP:\n+      case Token.STRING:\n+      case Token.TRUE:\n+      case Token.UNDEFINED:\n+        return true;\n+      default:\n+        return false;\n     }\n   }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n+  public static void main(String[] args) {\n+    Node node = Node.newString(\"Hello World!\");\n+    Predicate<Node> pred = (n) -> true;\n \n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+    System.out.println(evaluatesToLocalValue(node, pred));\n   }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}