{
    "patch": "      JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n      if (info != null && info.hasThisType()) {\n        Node parent = n.getParent();\n        if (parent != null && parent.isGetProp()) {\n          Node recv = parent.getFirstChild();\n          if (getJSType(recv).requiresTypeInformation()) {\n            JSType registryType = getJSTypeRegistry().createObjectType(\n                \"Function.call\", getJSType(recv), functionType);\n            ensureTyped(t, n, registryType.getReturnType());\n            visitParameterList(t, n, functionType);\n            return;\n          }\n        }\n        report(t, n, EXPERT_EXPRESS_THIS, childType.toString());\n        ensureTyped(t, n);\n        return;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..5b08911c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+      if (info != null && info.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (parent != null && parent.isGetProp()) {\n+          Node recv = parent.getFirstChild();\n+          if (getJSType(recv).requiresTypeInformation()) {\n+            JSType registryType = getJSTypeRegistry().createObjectType(\n+                \"Function.call\", getJSType(recv), functionType);\n+            ensureTyped(t, n, registryType.getReturnType());\n+            visitParameterList(t, n, functionType);\n+            return;\n+          }\n+        }\n+        report(t, n, EXPERT_EXPRESS_THIS, childType.toString());\n+        ensureTyped(t, n);\n+        return;\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}