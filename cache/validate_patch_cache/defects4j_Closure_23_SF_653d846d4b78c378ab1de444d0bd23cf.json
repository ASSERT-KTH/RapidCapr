{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (isAssignmentTarget(n)) {\n        return n;\n    }     \n\n    // Check if the index is a number.\n    if (!right.isNumber()) {\n        return n;\n    }\n\n    // Check if the index is an integer.\n    double index = right.getDouble();\n    if (Double.isInfinite(index) || Double.isNaN(index)) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    // Check if the index is out of bounds.\n    int numChildren = left.getChildCount();\n    if (intIndex < 0 || intIndex >= numChildren) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    // Get the corresponding element from the array.\n    Node elem = left.getChildAtIndex(intIndex);\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    }\n\n    // Replace the GETELEM with the corresponding element from the array.\n    Node parent = n.getParent();\n    if (parent.getChildCount() > 1) {\n        // If there are other child nodes in the parent's children list,\n        // we need to wrap elem in an expression statement before replacing.\n        Node tmp = IR.exprResult(elem).srcref(n);\n        parent.replaceChild(n, tmp);\n    } else {\n        // Otherwise, we can replace n directly with elem.\n        parent.replaceChild(n, elem);\n    }\n    reportCodeChange();\n\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..8ffd7c4e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,56 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n+        return n;\n+    }     \n \n+    // Check if the index is a number.\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        return n;\n     }\n \n+    // Check if the index is an integer.\n     double index = right.getDouble();\n+    if (Double.isInfinite(index) || Double.isNaN(index)) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n+    }\n     int intIndex = (int) index;\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+    // Check if the index is out of bounds.\n+    int numChildren = left.getChildCount();\n+    if (intIndex < 0 || intIndex >= numChildren) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    // Get the corresponding element from the array.\n+    Node elem = left.getChildAtIndex(intIndex);\n+    if (elem.isEmpty()) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    // Replace the GETELEM with the corresponding element from the array.\n+    Node parent = n.getParent();\n+    if (parent.getChildCount() > 1) {\n+        // If there are other child nodes in the parent's children list,\n+        // we need to wrap elem in an expression statement before replacing.\n+        Node tmp = IR.exprResult(elem).srcref(n);\n+        parent.replaceChild(n, tmp);\n     } else {\n-      left.removeChild(elem);\n+        // Otherwise, we can replace n directly with elem.\n+        parent.replaceChild(n, elem);\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n+\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "java.lang.IllegalStateException: Expected expression but was EXPR_RESULT Reference node EXPR_RESULT 1 [source_file: testcode]",
    "test_result": "FAIL"
}