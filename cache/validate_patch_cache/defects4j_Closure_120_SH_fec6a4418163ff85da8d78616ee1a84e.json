{
    "patch": "else if (isInitializingAssignmentAt(0)) {\n  Reference initAssignment = references.get(0);\n  if (isOneLiner(initAssignment.getNode().getSource())) {\n    // Make sure the statement is only assigning to this symbol and not doing\n    // something complicated. For simplicity, we use the parse tree for this.\n                    /*\n                    OLD CODE:\n                    Preconditions.checkState(initAssignment\n                        .getNode().isEquivalentTo(condition.getNode()));\n                    */\n    // NEW CODE:\n    Node currentNode = initAssignment.getParentNode();\n\n    while (!currentNode.isScript()) {\n      if (currentNode.isBlock() && currentNode.getParent() != null &&\n          currentNode.getParent().isFunction()) {\n        break;\n      }\n      currentNode = currentNode.getParent();\n    }\n\n    Node statement = currentNode.getFirstChild();\n\n    // If the statement is an empty expression, advance to the next statement.\n    if (statement.isEmpty()) {\n      statement = statement.getNext();\n    }\n\n    if (statement.getNext() == null && NodeUtil.isExpressionStatement(statement)) {\n      Node expr = statement.getFirstChild();\n      if (NodeUtil.isAssignmentOp(expr.getType())) {\n        Node lhs = expr.getFirstChild();\n        Node rhs = lhs.getNext();\n        QualifiedName thisName = initAssignment.getNode().getQualifiedName();\n\n        if (NodeUtil.isSimpleName(lhs)) {\n          if (!lhs.getQualifiedName().equals(thisName)) {\n            return false;\n          }\n        } else if (NodeUtil.isGet(lhs) && lhs.getFirstChild().getQualifiedName().equals(thisName)) {\n          // A property of the same name.\n          Node obj = lhs.getFirstChild().getNext();\n          if (!NodeUtil.isThis(obj)) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n\n        if (isOneLiner(rhs)) {\n          return true;\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e49fc5e7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,62 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+else if (isInitializingAssignmentAt(0)) {\n+  Reference initAssignment = references.get(0);\n+  if (isOneLiner(initAssignment.getNode().getSource())) {\n+    // Make sure the statement is only assigning to this symbol and not doing\n+    // something complicated. For simplicity, we use the parse tree for this.\n+                    /*\n+                    OLD CODE:\n+                    Preconditions.checkState(initAssignment\n+                        .getNode().isEquivalentTo(condition.getNode()));\n+                    */\n+    // NEW CODE:\n+    Node currentNode = initAssignment.getParentNode();\n+\n+    while (!currentNode.isScript()) {\n+      if (currentNode.isBlock() && currentNode.getParent() != null &&\n+          currentNode.getParent().isFunction()) {\n+        break;\n+      }\n+      currentNode = currentNode.getParent();\n+    }\n+\n+    Node statement = currentNode.getFirstChild();\n+\n+    // If the statement is an empty expression, advance to the next statement.\n+    if (statement.isEmpty()) {\n+      statement = statement.getNext();\n+    }\n+\n+    if (statement.getNext() == null && NodeUtil.isExpressionStatement(statement)) {\n+      Node expr = statement.getFirstChild();\n+      if (NodeUtil.isAssignmentOp(expr.getType())) {\n+        Node lhs = expr.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        QualifiedName thisName = initAssignment.getNode().getQualifiedName();\n+\n+        if (NodeUtil.isSimpleName(lhs)) {\n+          if (!lhs.getQualifiedName().equals(thisName)) {\n+            return false;\n+          }\n+        } else if (NodeUtil.isGet(lhs) && lhs.getFirstChild().getQualifiedName().equals(thisName)) {\n+          // A property of the same name.\n+          Node obj = lhs.getFirstChild().getNext();\n+          if (!NodeUtil.isThis(obj)) {\n+            return false;\n+          }\n+        } else {\n+          return false;\n+        }\n+\n+        if (isOneLiner(rhs)) {\n+          return true;\n+        }\n+      }\n+    }\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}