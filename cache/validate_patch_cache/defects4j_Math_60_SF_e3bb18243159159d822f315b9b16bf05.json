{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Invalid input value: x = NaN\");\n    }\n\n    final double dev = x - mean;\n\n    if (Double.isInfinite(dev) || Double.isInfinite(standardDeviation)) {\n        if (dev > 0) {\n            return 1.0;\n        } else {\n            return 0.0;\n        }\n    } else {\n        final double nSigma = dev / standardDeviation;\n        final double absNSigma = FastMath.abs(nSigma);\n\n        if (absNSigma > FastMath.sqrt(Double.MAX_VALUE)) {\n            if (nSigma < 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        } else {\n            final double cp = 0.5 * Erf.erfc(-nSigma / FastMath.sqrt(2.0));\n            return (nSigma < 0.0) ?  cp : 1.0 - cp;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..f97d64f92 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,35 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Invalid input value: x = NaN\");\n+    }\n+\n+    final double dev = x - mean;\n+\n+    if (Double.isInfinite(dev) || Double.isInfinite(standardDeviation)) {\n+        if (dev > 0) {\n+            return 1.0;\n+        } else {\n+            return 0.0;\n+        }\n+    } else {\n+        final double nSigma = dev / standardDeviation;\n+        final double absNSigma = FastMath.abs(nSigma);\n+\n+        if (absNSigma > FastMath.sqrt(Double.MAX_VALUE)) {\n+            if (nSigma < 0) {\n+                return 0.0;\n             } else {\n-                throw ex;\n+                return 1.0;\n             }\n+        } else {\n+            final double cp = 0.5 * Erf.erfc(-nSigma / FastMath.sqrt(2.0));\n+            return (nSigma < 0.0) ?  cp : 1.0 - cp;\n         }\n     }\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}