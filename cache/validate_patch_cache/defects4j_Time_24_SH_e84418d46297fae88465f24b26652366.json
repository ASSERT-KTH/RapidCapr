{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n\n            if (iZone == null) {\n                millis -= iOffset;\n            } else {\n                int offset = iZone.getOffsetFromLocal(millis);\n                millis -= offset;\n                if (offset != iZone.getOffset(millis)) {\n                    String message =\n                            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                    if (text != null) {\n                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                    }\n                    throw new IllegalArgumentException(message);\n                }\n            }\n\n            if (resetFields) {\n                // Check that all the fields were correctly set to object fields\n                long trialMillis = iMillis;\n                try {\n                    for (int i = 0; i < count; i++) {\n                        trialMillis = savedFields[i].set(trialMillis, false);\n                    }\n                } catch (IllegalFieldValueException ex) {\n                    // Only need to worry about non-lenient mode, as lenient mode accepts any value\n                    if (iStrict) {\n                        if (text == null) {\n                            text = \"\";\n                        }\n                        ex.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n                        throw ex;\n                    }\n                }\n                if (millis != trialMillis) {\n                    if (text == null) {\n                        text = \"\";\n                    }\n                    throw new IllegalFieldValueException(\n                        \"Cannot parse \\\"\" + text + \"\\\": \" +\n                        \"computed result of \" + millis +\n                        \" does not equal final result of \" + trialMillis, null);\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0c74f20f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,59 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+\n+            if (iZone == null) {\n+                millis -= iOffset;\n+            } else {\n+                int offset = iZone.getOffsetFromLocal(millis);\n+                millis -= offset;\n+                if (offset != iZone.getOffset(millis)) {\n+                    String message =\n+                            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                    if (text != null) {\n+                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                    }\n+                    throw new IllegalArgumentException(message);\n+                }\n+            }\n+\n+            if (resetFields) {\n+                // Check that all the fields were correctly set to object fields\n+                long trialMillis = iMillis;\n+                try {\n+                    for (int i = 0; i < count; i++) {\n+                        trialMillis = savedFields[i].set(trialMillis, false);\n+                    }\n+                } catch (IllegalFieldValueException ex) {\n+                    // Only need to worry about non-lenient mode, as lenient mode accepts any value\n+                    if (iStrict) {\n+                        if (text == null) {\n+                            text = \"\";\n+                        }\n+                        ex.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                        throw ex;\n+                    }\n+                }\n+                if (millis != trialMillis) {\n+                    if (text == null) {\n+                        text = \"\";\n+                    }\n+                    throw new IllegalFieldValueException(\n+                        \"Cannot parse \\\"\" + text + \"\\\": \" +\n+                        \"computed result of \" + millis +\n+                        \" does not equal final result of \" + trialMillis, null);\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}