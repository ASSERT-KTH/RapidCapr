{
    "patch": "public static double regularizedGammaP(double a, double x) {\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }  \n\n    double sum = 1.0 / a;\n    double term = sum;\n\n    for (int i = 1; i < 1000; ++i) {\n        term *= x / (a + i);\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * 1.0E-15) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n    return Double.NaN;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            if (n == 0) {\n                return 1.0;\n            }\n            if (n == 1) {\n                return 1.0 - a;\n            }\n            return (2 * n - 1 - a + x);\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return n;\n        }\n    };\n\n    return 1.0 / fraction.evaluate(x, 1.0E-15, Integer.MAX_VALUE);\n}\n\nprivate static double logGamma(double x) {\n    if (x <= 0.0) {\n        return Double.NaN;\n    }\n\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 5.36382E-06 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1ad9a6f52 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,76 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }  \n+\n+    double sum = 1.0 / a;\n+    double term = sum;\n+\n+    for (int i = 1; i < 1000; ++i) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * 1.0E-15) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+    return Double.NaN;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            if (n == 0) {\n+                return 1.0;\n+            }\n+            if (n == 1) {\n+                return 1.0 - a;\n+            }\n+            return (2 * n - 1 - a + x);\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return n;\n+        }\n+    };\n+\n+    return 1.0 / fraction.evaluate(x, 1.0E-15, Integer.MAX_VALUE);\n+}\n+\n+private static double logGamma(double x) {\n+    if (x <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 5.36382E-06 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}