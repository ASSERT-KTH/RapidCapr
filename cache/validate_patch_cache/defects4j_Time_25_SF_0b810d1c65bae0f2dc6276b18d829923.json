{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n\n    // calculate the next transition time from the local time\n    long nextTransitionLocal = nextTransition(instantLocal);\n    // recalculate the offset using the transition time\n    int nextTransitionOffset = getOffset(nextTransitionLocal);\n\n    // if the transition time is exactly equal to the instantLocal,\n    // and the offset just after the transition isn't equal to the\n    // offsetLocal, then the offset must actually be the one before\n    if (nextTransitionLocal == instantLocal && nextTransitionOffset != offsetLocal) {\n        return getOffset(previousTransition(instantLocal - nextTransitionOffset));\n    }\n\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        } else {\n            long prevTransitionLocal = previousTransition(instantLocal);\n            int prevTransitionOffset = getOffset(prevTransitionLocal);\n            if (prevTransitionLocal <= instantAdjusted && instantAdjusted < nextTransitionLocal) {\n                if (offsetLocal - offsetAdjusted > 0 && offsetLocal >= prevTransitionOffset) {\n                    return offsetLocal;\n                } else if (offsetLocal - offsetAdjusted < 0 && offsetLocal != prevTransitionOffset) {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal != prevAdjusted) {\n                        return prevTransitionOffset;\n                    }\n                }\n            } else {\n                if (offsetAdjusted - offsetLocal > 0 && offsetAdjusted != nextTransitionOffset) {\n                    return nextTransitionOffset;\n                } else if (offsetLocal - offsetAdjusted < 0 && offsetLocal != prevTransitionOffset) {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal != prevAdjusted) {\n                        return prevTransitionOffset;\n                    }\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..73448776 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,65 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal);\n+\n+    // calculate the next transition time from the local time\n+    long nextTransitionLocal = nextTransition(instantLocal);\n+    // recalculate the offset using the transition time\n+    int nextTransitionOffset = getOffset(nextTransitionLocal);\n+\n+    // if the transition time is exactly equal to the instantLocal,\n+    // and the offset just after the transition isn't equal to the\n+    // offsetLocal, then the offset must actually be the one before\n+    if (nextTransitionLocal == instantLocal && nextTransitionOffset != offsetLocal) {\n+        return getOffset(previousTransition(instantLocal - nextTransitionOffset));\n+    }\n+\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            // if we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n+            }\n+        } else {\n+            long prevTransitionLocal = previousTransition(instantLocal);\n+            int prevTransitionOffset = getOffset(prevTransitionLocal);\n+            if (prevTransitionLocal <= instantAdjusted && instantAdjusted < nextTransitionLocal) {\n+                if (offsetLocal - offsetAdjusted > 0 && offsetLocal >= prevTransitionOffset) {\n                     return offsetLocal;\n+                } else if (offsetLocal - offsetAdjusted < 0 && offsetLocal != prevTransitionOffset) {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal != prevAdjusted) {\n+                        return prevTransitionOffset;\n+                    }\n+                }\n+            } else {\n+                if (offsetAdjusted - offsetLocal > 0 && offsetAdjusted != nextTransitionOffset) {\n+                    return nextTransitionOffset;\n+                } else if (offsetLocal - offsetAdjusted < 0 && offsetLocal != prevTransitionOffset) {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal != prevAdjusted) {\n+                        return prevTransitionOffset;\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}