{
    "patch": "              Node maybeName2 = elseAssign.getFirstChild();\n\n              if (name1.hasChildren()\n                  && maybeName2.isName()\n                  && name1.getString().equals(maybeName2.getString())\n                  && !mayHaveSideEffects(maybeName2)) {\n                Node thenExpr = name1.removeChildren();\n                Node elseExpr = elseAssign.getLastChild().detachFromParent();\n                cond.detachFromParent();\n                Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(n);\n                var.detachFromParent();\n                name1.addChildrenToBack(hookNode);\n                parent.replaceChild(n, var);\n                reportCodeChange();\n                return var;\n              }\n            } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n                       getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n              Node var = getBlockVar(elseBranch);\n              Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n              Node maybeName1 = thenAssign.getFirstChild();\n              Node name2 = var.getFirstChild();\n              if (name2.hasChildren()\n                  && maybeName1.isName()\n                  && maybeName1.getString().equals(name2.getString())\n                  && !mayHaveSideEffects(name2)) {\n                Node thenExpr = thenAssign.getLastChild().detachFromParent();\n                Node elseExpr = name2.removeChildren();\n                cond.detachFromParent();\n                Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(n);\n                var.detachFromParent();\n                name2.addChildrenToBack(hookNode);\n                parent.replaceChild(n, var);\n                reportCodeChange();\n                return var;\n              }\n            }\n\n            return n;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..3a5de6ea 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,47 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node maybeName2 = elseAssign.getFirstChild();\n+\n+              if (name1.hasChildren()\n+                  && maybeName2.isName()\n+                  && name1.getString().equals(maybeName2.getString())\n+                  && !mayHaveSideEffects(maybeName2)) {\n+                Node thenExpr = name1.removeChildren();\n+                Node elseExpr = elseAssign.getLastChild().detachFromParent();\n+                cond.detachFromParent();\n+                Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n+                                    .srcref(n);\n+                var.detachFromParent();\n+                name1.addChildrenToBack(hookNode);\n+                parent.replaceChild(n, var);\n+                reportCodeChange();\n+                return var;\n+              }\n+            } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n+                       getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n+              Node var = getBlockVar(elseBranch);\n+              Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n+              Node maybeName1 = thenAssign.getFirstChild();\n+              Node name2 = var.getFirstChild();\n+              if (name2.hasChildren()\n+                  && maybeName1.isName()\n+                  && maybeName1.getString().equals(name2.getString())\n+                  && !mayHaveSideEffects(name2)) {\n+                Node thenExpr = thenAssign.getLastChild().detachFromParent();\n+                Node elseExpr = name2.removeChildren();\n+                cond.detachFromParent();\n+                Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n+                                    .srcref(n);\n+                var.detachFromParent();\n+                name2.addChildrenToBack(hookNode);\n+                parent.replaceChild(n, var);\n+                reportCodeChange();\n+                return var;\n+              }\n+            }\n+\n+            return n;\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}