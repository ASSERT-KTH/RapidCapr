{
    "patch": "TypeVariable<? extends Class<?>>[] typeVariables = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\nfor (TypeVariable<? extends Class<?>> tv : typeVariables) {\n    if (tv.getName().equals(typeVariable.getName())) {\n        Type[] bounds = tv.getBounds();\n        if (bounds.length > 0) {\n            for (Type type : bounds) {\n                registerTypeVariablesOn(type);\n            }\n        } else {\n            registerTypeVariablesOn(Object.class);\n        }\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..230ddd4ea 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+TypeVariable<? extends Class<?>>[] typeVariables = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n+for (TypeVariable<? extends Class<?>> tv : typeVariables) {\n+    if (tv.getName().equals(typeVariable.getName())) {\n+        Type[] bounds = tv.getBounds();\n+        if (bounds.length > 0) {\n+            for (Type type : bounds) {\n+                registerTypeVariablesOn(type);\n+            }\n+        } else {\n+            registerTypeVariablesOn(Object.class);\n+        }\n+        break;\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.ClassCastException: java.lang.reflect.Method cannot be cast to java.lang.Class",
    "test_result": "FAIL"
}