{
    "patch": "    final Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    final Node argList = function.getSecondChild();\n    Node arg = argList.getFirstChild();\n    while (arg != null && !referenced.contains(fnScope.getVar(arg.getString()))) {\n      arg = arg.getNext();\n      argList.removeChild(arg.getPrevious());\n      compiler.reportCodeChange();\n    }\n    if (arg != null) {\n      Node prev = arg;\n      arg = arg.getNext();\n      while (arg != null) {\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          arg = arg.getNext();\n          argList.removeChild(arg.getPrevious());\n          compiler.reportCodeChange();\n        } else {\n          prev = arg;\n          arg = arg.getNext();\n        }\n      }\n      if (prev.getNext() != null && NodeUtil.isVarargsForCallOrNew(prev.getNext())) {\n        argList.removeChild(prev.getNext());\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1bebfbfa 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    final Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    final Node argList = function.getSecondChild();\n+    Node arg = argList.getFirstChild();\n+    while (arg != null && !referenced.contains(fnScope.getVar(arg.getString()))) {\n+      arg = arg.getNext();\n+      argList.removeChild(arg.getPrevious());\n+      compiler.reportCodeChange();\n+    }\n+    if (arg != null) {\n+      Node prev = arg;\n+      arg = arg.getNext();\n+      while (arg != null) {\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          arg = arg.getNext();\n+          argList.removeChild(arg.getPrevious());\n+          compiler.reportCodeChange();\n+        } else {\n+          prev = arg;\n+          arg = arg.getNext();\n+        }\n+      }\n+      if (prev.getNext() != null && NodeUtil.isVarargsForCallOrNew(prev.getNext())) {\n+        argList.removeChild(prev.getNext());\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}