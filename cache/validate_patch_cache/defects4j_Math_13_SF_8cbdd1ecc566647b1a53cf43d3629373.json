{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        double eigenvalue = dec.getRealEigenvalue(i);\n        if (eigenvalue < 0) {\n            sqrtD.setEntry(i, i, 0);\n        } else {\n            sqrtD.setEntry(i, i, Math.sqrt(eigenvalue));\n        }\n    }\n    final RealMatrix v = dec.getV();\n    final RealMatrix vT = v.transpose();\n    return v.multiply(sqrtD).multiply(vT);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9486e31de 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        double eigenvalue = dec.getRealEigenvalue(i);\n+        if (eigenvalue < 0) {\n+            sqrtD.setEntry(i, i, 0);\n+        } else {\n+            sqrtD.setEntry(i, i, Math.sqrt(eigenvalue));\n+        }\n     }\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vT = v.transpose();\n+    return v.multiply(sqrtD).multiply(vT);\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}