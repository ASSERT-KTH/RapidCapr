{
    "patch": "public static double getTypedPercent(String[] arr) {\n    double countOfInts = 0;\n    double countOfStrings = 0;\n    for (int i = 0; i < arr.length; i++) {\n        try {\n            Integer.parseInt(arr[i]);\n            countOfInts++;\n        } catch (NumberFormatException e) {\n            countOfStrings++;\n        }\n    }\n    if (countOfInts == 0) {\n        return 0;\n    }\n    return countOfInts * 100 / (countOfInts + countOfStrings);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7ab00493 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[] arr) {\n+    double countOfInts = 0;\n+    double countOfStrings = 0;\n+    for (int i = 0; i < arr.length; i++) {\n+        try {\n+            Integer.parseInt(arr[i]);\n+            countOfInts++;\n+        } catch (NumberFormatException e) {\n+            countOfStrings++;\n+        }\n+    }\n+    if (countOfInts == 0) {\n+        return 0;\n+    }\n+    return countOfInts * 100 / (countOfInts + countOfStrings);\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}