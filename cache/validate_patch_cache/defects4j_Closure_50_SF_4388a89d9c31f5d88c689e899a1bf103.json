{
    "patch": "      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // Default separator is \",\"\n    String joinString = \",\";\n    if (right != null) {\n      joinString = NodeUtil.getStringValue(right);\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node prev = null;\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      if (elem.getType() == Token.EMPTY) {\n        continue;\n      }\n\n      if (!NodeUtil.isImmutableValue(elem)) {\n        sb = null;\n        if (arrayFoldedChildren.size() > 0) {\n          Node lastAdded = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n          if (lastAdded.getType() != Token.STRING) {\n            Node emptyStringNode = Node.newString(\"\");\n            lastAdded.getParent().addChildAfter(emptyStringNode, lastAdded);\n            lastAdded = emptyStringNode;\n            arrayFoldedChildren.set(arrayFoldedChildren.size() - 1, lastAdded);\n          }\n          foldedSize += lastAdded.getLength();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n        prev = elem;\n      } else {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      }\n    }\n\n    if (sb != null) {\n      if (arrayFoldedChildren.size() > 0) {\n        Node lastAdded = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n        if (lastAdded.getType() != Token.STRING) {\n          Node emptyStringNode = Node.newString(\"\");\n          lastAdded.getParent().addChildAfter(emptyStringNode, lastAdded);\n          lastAdded = emptyStringNode;\n          arrayFoldedChildren.set(arrayFoldedChildren.size() - 1, lastAdded);\n        }\n        foldedSize += lastAdded.getLength();\n      }\n      foldedSize += sb.length();\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    if (arrayFoldedChildren.size() == 0) {\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    }\n\n    // one for each separator.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (arrayFoldedChildren.size() == 1) {\n      // No folder was done, just replace the string join call with a string literal.\n      Node foldedStringNode = arrayFoldedChildren.get(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    }\n\n    foldedSize += \"[].join()\".length();\n    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n    if (foldedSize > originalSize) {\n      return n;\n    }\n\n    arrayNode.detachChildren();\n    arrayNode.setType(Token.STRING);\n    StringBuilder sb2 = new StringBuilder();\n    for (Node node : arrayFoldedChildren) {\n      sb2.append(NodeUtil.getStringValue(node));\n    }\n    arrayNode.setString(sb2.toString());\n\n    if (right != null && !right.getString().isEmpty()) {\n      // In this case, the separator is not the default \",\", so we perform a string\n      // concatenation to join the array.\n      arrayNode.setStringJoinSeparator(joinString);\n      Node joinNode = new Node(Token.ADD,\n          arrayNode,\n          right.detachFromParent());\n      n.getParent().replaceChild(n, joinNode);\n    } else {\n      n.getParent().replaceChild(n, arrayNode);\n    }\n\n    reportCodeChange();\n    return arrayNode;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..c482e999 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,15 +364,6 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n-\n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n-\n-    Node right = callTarget.getNext();\n-    if (right != null) {\n       if (!NodeUtil.isImmutableValue(right)) {\n         return n;\n       }\n@@ -386,94 +377,111 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    // Default separator is \",\"\n+    String joinString = \",\";\n+    if (right != null) {\n+      joinString = NodeUtil.getStringValue(right);\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n+    StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n+      if (elem.getType() == Token.EMPTY) {\n+        continue;\n+      }\n+\n+      if (!NodeUtil.isImmutableValue(elem)) {\n+        sb = null;\n+        if (arrayFoldedChildren.size() > 0) {\n+          Node lastAdded = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n+          if (lastAdded.getType() != Token.STRING) {\n+            Node emptyStringNode = Node.newString(\"\");\n+            lastAdded.getParent().addChildAfter(emptyStringNode, lastAdded);\n+            lastAdded = emptyStringNode;\n+            arrayFoldedChildren.set(arrayFoldedChildren.size() - 1, lastAdded);\n+          }\n+          foldedSize += lastAdded.getLength();\n+        }\n+        foldedSize += InlineCostEstimator.getCost(elem);\n+        arrayFoldedChildren.add(elem);\n+        prev = elem;\n+      } else {\n         if (sb == null) {\n           sb = new StringBuilder();\n         } else {\n           sb.append(joinString);\n         }\n         sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n     }\n \n     if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      if (arrayFoldedChildren.size() > 0) {\n+        Node lastAdded = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n+        if (lastAdded.getType() != Token.STRING) {\n+          Node emptyStringNode = Node.newString(\"\");\n+          lastAdded.getParent().addChildAfter(emptyStringNode, lastAdded);\n+          lastAdded = emptyStringNode;\n+          arrayFoldedChildren.set(arrayFoldedChildren.size() - 1, lastAdded);\n+        }\n+        foldedSize += lastAdded.getLength();\n+      }\n+      foldedSize += sb.length();\n+      arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n+\n+    if (arrayFoldedChildren.size() == 0) {\n+      Node emptyStringNode = Node.newString(\"\");\n+      n.getParent().replaceChild(n, emptyStringNode);\n+      reportCodeChange();\n+      return emptyStringNode;\n+    }\n+\n+    // one for each separator.\n     foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    if (arrayFoldedChildren.size() == 1) {\n+      // No folder was done, just replace the string join call with a string literal.\n+      Node foldedStringNode = arrayFoldedChildren.get(0);\n+      if (foldedSize > originalSize) {\n+        return n;\n+      }\n+      n.getParent().replaceChild(n, foldedStringNode);\n+      reportCodeChange();\n+      return foldedStringNode;\n     }\n \n-    return n;\n-  }\n+    foldedSize += \"[].join()\".length();\n+    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n+    if (foldedSize > originalSize) {\n+      return n;\n+    }\n+\n+    arrayNode.detachChildren();\n+    arrayNode.setType(Token.STRING);\n+    StringBuilder sb2 = new StringBuilder();\n+    for (Node node : arrayFoldedChildren) {\n+      sb2.append(NodeUtil.getStringValue(node));\n+    }\n+    arrayNode.setString(sb2.toString());\n+\n+    if (right != null && !right.getString().isEmpty()) {\n+      // In this case, the separator is not the default \",\", so we perform a string\n+      // concatenation to join the array.\n+      arrayNode.setStringJoinSeparator(joinString);\n+      Node joinNode = new Node(Token.ADD,\n+          arrayNode,\n+          right.detachFromParent());\n+      n.getParent().replaceChild(n, joinNode);\n+    } else {\n+      n.getParent().replaceChild(n, arrayNode);\n+    }\n+\n+    reportCodeChange();\n+    return arrayNode;\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +650,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}