{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class GammaFunction {\n\n    public static double evaluate(double x) {\n        if (x > 0) {\n            return Gamma.logGamma(x);\n        } else {\n            double sinVal = FastMath.sin(FastMath.PI * x);\n            return -FastMath.log(FastMath.abs(FastMath.PI / (x * sinVal)));\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1e73dee78 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,21 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaFunction {\n+\n+    public static double evaluate(double x) {\n+        if (x > 0) {\n+            return Gamma.logGamma(x);\n+        } else {\n+            double sinVal = FastMath.sin(FastMath.PI * x);\n+            return -FastMath.log(FastMath.abs(FastMath.PI / (x * sinVal)));\n+        }\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}