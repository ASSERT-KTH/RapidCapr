{
    "patch": "final Vector3D revertedDirection = direction.negate().normalize();\nfinal double norm = revertedDirection.getNorm();\nif (norm == 0) {\n    throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n}\nfinal Vector3D newOrigin = zero.add(revertedDirection.scalarMultiply(direction.getNorm()).scalarMultiply(0.5));\nfinal Line reverted = new Line(newOrigin, revertedDirection);\nreturn reverted;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..15b85c7ae 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,14 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final Vector3D revertedDirection = direction.negate().normalize();\n+final double norm = revertedDirection.getNorm();\n+if (norm == 0) {\n+    throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+}\n+final Vector3D newOrigin = zero.add(revertedDirection.scalarMultiply(direction.getNorm()).scalarMultiply(0.5));\n+final Line reverted = new Line(newOrigin, revertedDirection);\n+return reverted;\n         return reverted;\n     }\n ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}