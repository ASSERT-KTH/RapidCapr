{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix l = new LUDecomposition(m).getL();\n    int n = l.getRowDimension();\n    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j <= i; j++) {\n            double sij = 0;\n            for (int k = 0; k < j; k++) {\n                sij += s.getEntry(i, k) * s.getEntry(j, k);\n            }\n            if (i == j) {\n                sij = Math.sqrt(l.getEntry(i, i) - sij);\n            } else {\n                sij = (l.getEntry(i, j) - sij) / s.getEntry(j, j);\n            }\n            s.setEntry(i, j, sij);\n        }\n    }\n    return s.multiply(s.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fd51e919d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix l = new LUDecomposition(m).getL();\n+    int n = l.getRowDimension();\n+    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j <= i; j++) {\n+            double sij = 0;\n+            for (int k = 0; k < j; k++) {\n+                sij += s.getEntry(i, k) * s.getEntry(j, k);\n+            }\n+            if (i == j) {\n+                sij = Math.sqrt(l.getEntry(i, i) - sij);\n+            } else {\n+                sij = (l.getEntry(i, j) - sij) / s.getEntry(j, j);\n+            }\n+            s.setEntry(i, j, sij);\n+        }\n     }\n+    return s.multiply(s.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}