{
    "patch": "public static double getTypedPercent(String json) {\n    int count = 0, typed = 0;\n    boolean inString = false;\n    for (int i = 0; i < json.length() - 1; i++) {\n        char c = json.charAt(i);\n        if (c == '\"' && json.charAt(i - 1) != '\\\\') {\n            inString = !inString;\n        }\n        if (!inString) {\n            if (c == '{') {\n                count++;\n            } else if (c == '}') {\n                count--;\n            } else if (c == ':') {\n                char nextChar = json.charAt(i+1);\n                if (nextChar == '\"' || nextChar == '[' || nextChar == '{') {\n                    typed++;\n                }\n            }\n        }\n    }\n    return (double) typed / (double) count * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e9f1bc02 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    int count = 0, typed = 0;\n+    boolean inString = false;\n+    for (int i = 0; i < json.length() - 1; i++) {\n+        char c = json.charAt(i);\n+        if (c == '\"' && json.charAt(i - 1) != '\\\\') {\n+            inString = !inString;\n+        }\n+        if (!inString) {\n+            if (c == '{') {\n+                count++;\n+            } else if (c == '}') {\n+                count--;\n+            } else if (c == ':') {\n+                char nextChar = json.charAt(i+1);\n+                if (nextChar == '\"' || nextChar == '[' || nextChar == '{') {\n+                    typed++;\n+                }\n+            }\n+        }\n+    }\n+    return (double) typed / (double) count * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}