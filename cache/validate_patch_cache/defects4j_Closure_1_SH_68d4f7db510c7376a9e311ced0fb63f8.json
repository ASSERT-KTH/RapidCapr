{
    "patch": "      List<Node> allArgs = getAllFunctionArgs(function);\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = allArgs.isEmpty() ? null : allArgs.get(allArgs.size() - 1);\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var) || lastArg.isDefaultValue()) {\n          argList.removeChild(lastArg);\n          allArgs.remove(allArgs.size() - 1);\n          compiler.reportCodeChange();\n          lastArg = allArgs.isEmpty() ? null : allArgs.get(allArgs.size() - 1);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8d3ad665 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,16 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      List<Node> allArgs = getAllFunctionArgs(function);\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = allArgs.isEmpty() ? null : allArgs.get(allArgs.size() - 1);\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var) || lastArg.isDefaultValue()) {\n+          argList.removeChild(lastArg);\n+          allArgs.remove(allArgs.size() - 1);\n+          compiler.reportCodeChange();\n+          lastArg = allArgs.isEmpty() ? null : allArgs.get(allArgs.size() - 1);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}