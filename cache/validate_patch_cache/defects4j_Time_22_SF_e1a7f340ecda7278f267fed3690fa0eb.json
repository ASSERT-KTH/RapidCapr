{
    "patch": "import org.joda.time.DateTimeParserBucket;\nimport org.joda.time.DateTimeZone;\n\npublic int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    String bestId = null;\n    for (String id : ALL_IDS) {\n        if (str.startsWith(id) && (bestId == null || id.length() > bestId.length())) {\n            bestId = id;\n        }\n    }\n    if (bestId != null) {\n        bucket.setZone(DateTimeZone.forID(bestId));\n        return position + bestId.length();\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..be30bb8a 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,23 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+import org.joda.time.DateTimeParserBucket;\n+import org.joda.time.DateTimeZone;\n+\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    String bestId = null;\n+    for (String id : ALL_IDS) {\n+        if (str.startsWith(id) && (bestId == null || id.length() > bestId.length())) {\n+            bestId = id;\n+        }\n+    }\n+    if (bestId != null) {\n+        bucket.setZone(DateTimeZone.forID(bestId));\n+        return position + bestId.length();\n     }\n+    return ~position;\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}