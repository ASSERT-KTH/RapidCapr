{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n            jsDoc.isInterface() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. \n    // i.e. only traverse functions that are in a valid location\n    boolean isAllowedFunctionLocation = NodeUtil.isStatementBlock(parent) ||\n        parent.getType() == Token.ARRAY_PATTERN ||\n        parent.getType() == Token.OBJECT_PATTERN ||\n        parent.getType() == Token.DESTRUCTURING_LHS ||\n        parent.getType() == Token.CATCH ||\n        NodeUtil.isNameDeclaration(parent) ||\n        NodeUtil.isFunctionExpression(parent) ||\n        NodeUtil.isClassExpression(parent) ||\n        parent.getType() == Token.CALL ||\n        parent.getType() == Token.NEW ||\n        parent.getType() == Token.COMMA ||\n        parent.getType() == Token.ASSIGN ||\n        (parent.getType() == Token.PARAM_LIST && parent.getParent().getType() == Token.FUNCTION);\n    \n    if (!isAllowedFunctionLocation) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isGetProp()) {\n      Node getPropNode = parent.getFirstChild();\n      Node prototypeNode = NodeUtil.getPrototypePropertyReference(getPropNode);\n      if (n.matchesQualifiedName(prototypeNode)) {\n        return false;\n      }\n    }\n  }\n\n  if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isObjectPattern()) {\n    // for object destructuring assignments, do not traverse the entire assign node since that will lead to only\n    // non-descriptive object keys. Instead traverse each key of the object pattern.\n    return n.getParent() != parent;\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..de6af24b 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,72 +79,59 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+            jsDoc.isInterface() ||\n+            jsDoc.hasThisType() ||\n+            jsDoc.isOverride())) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. \n+    // i.e. only traverse functions that are in a valid location\n+    boolean isAllowedFunctionLocation = NodeUtil.isStatementBlock(parent) ||\n+        parent.getType() == Token.ARRAY_PATTERN ||\n+        parent.getType() == Token.OBJECT_PATTERN ||\n+        parent.getType() == Token.DESTRUCTURING_LHS ||\n+        parent.getType() == Token.CATCH ||\n+        NodeUtil.isNameDeclaration(parent) ||\n+        NodeUtil.isFunctionExpression(parent) ||\n+        NodeUtil.isClassExpression(parent) ||\n+        parent.getType() == Token.CALL ||\n+        parent.getType() == Token.NEW ||\n+        parent.getType() == Token.COMMA ||\n+        parent.getType() == Token.ASSIGN ||\n+        (parent.getType() == Token.PARAM_LIST && parent.getParent().getType() == Token.FUNCTION);\n+    \n+    if (!isAllowedFunctionLocation) {\n+      return false;\n+    }\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isGetProp()) {\n+      Node getPropNode = parent.getFirstChild();\n+      Node prototypeNode = NodeUtil.getPrototypePropertyReference(getPropNode);\n+      if (n.matchesQualifiedName(prototypeNode)) {\n+        return false;\n       }\n     }\n+  }\n \n-    return true;\n+  if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isObjectPattern()) {\n+    // for object destructuring assignments, do not traverse the entire assign node since that will lead to only\n+    // non-descriptive object keys. Instead traverse each key of the object pattern.\n+    return n.getParent() != parent;\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}