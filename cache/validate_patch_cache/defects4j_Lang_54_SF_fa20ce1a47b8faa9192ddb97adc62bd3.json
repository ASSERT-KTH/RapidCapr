{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n\n    int len = str.length();\n    if (len != 2 && len != 5 && len < 7) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    // Language must consist of 2 lower-case letters\n    if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (len == 2) { // lang only (we don't support country only)\n        return new Locale(str, \"\");\n    } else if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    } else {\n        // Country must consist of 2 upper-case letters OR 3 letters\n        if ((Character.isUpperCase(str.charAt(3)) && Character.isUpperCase(str.charAt(4))) ||\n            (len == 7 && Character.isLetter(str.charAt(3)) && Character.isLetter(str.charAt(4)) && Character.isLetter(str.charAt(5)))) {\n            if (len == 5 || (len == 7 && str.charAt(5) == '_')) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else if (len >= 8 && str.charAt(5) == '_' && (len <= 9 || Character.isLetter(str.charAt(6)))) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }\n\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..5b718456 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,41 +91,40 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n+public static Locale toLocale(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+\n+    int len = str.length();\n+    if (len != 2 && len != 5 && len < 7) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    // Language must consist of 2 lower-case letters\n+    if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (len == 2) { // lang only (we don't support country only)\n+        return new Locale(str, \"\");\n+    } else if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    } else {\n+        // Country must consist of 2 upper-case letters OR 3 letters\n+        if ((Character.isUpperCase(str.charAt(3)) && Character.isUpperCase(str.charAt(4))) ||\n+            (len == 7 && Character.isLetter(str.charAt(3)) && Character.isLetter(str.charAt(4)) && Character.isLetter(str.charAt(5)))) {\n+            if (len == 5 || (len == 7 && str.charAt(5) == '_')) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n+            } else if (len >= 8 && str.charAt(5) == '_' && (len <= 9 || Character.isLetter(str.charAt(6)))) {\n                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n             }\n         }\n     }\n \n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__POSIX",
    "test_result": "FAIL"
}