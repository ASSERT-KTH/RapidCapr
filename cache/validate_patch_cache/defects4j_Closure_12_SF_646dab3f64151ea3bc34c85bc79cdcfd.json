{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    FunctionNode functionNode = cfgNode.getFunctionNode();\n    List<Node> exceptionHandlers = cfgNode.findExceptionHandlers();\n    for (Node handler : exceptionHandlers) {\n      CFGExceptionNode exceptionNode = (CFGExceptionNode) handler;\n      if (exceptionNode.getHandledExceptionTypes().isEmpty() ||\n          exceptionNode.getHandledExceptionTypes().contains(functionNode.getExceptionType())) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..d0ca37db 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,15 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+    FunctionNode functionNode = cfgNode.getFunctionNode();\n+    List<Node> exceptionHandlers = cfgNode.findExceptionHandlers();\n+    for (Node handler : exceptionHandlers) {\n+      CFGExceptionNode exceptionNode = (CFGExceptionNode) handler;\n+      if (exceptionNode.getHandledExceptionTypes().isEmpty() ||\n+          exceptionNode.getHandledExceptionTypes().contains(functionNode.getExceptionType())) {\n+        return true;\n+      }\n+    }\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}