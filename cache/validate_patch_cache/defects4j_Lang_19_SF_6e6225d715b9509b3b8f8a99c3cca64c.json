{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if(seqEnd-index<2) {\n        return 0;\n    }\n    if(input.charAt(index) == '&' && input.charAt(index+1) == '#'){\n        int start=index+2;\n        boolean isHex=false;\n        if(start<seqEnd && (input.charAt(start)=='x'||input.charAt(start)=='X')){\n            isHex=true;\n            start++;\n        }\n        int end=start;\n        while(end<seqEnd){\n            if(isHex&&Character.isDigit(input.charAt(end))){\n                end++;\n            }\n            else if(!isHex&&(Character.isDigit(input.charAt(end)))){\n                end++;\n            }\n            else if(input.charAt(end)==';') {\n                end++;\n                break;\n            }\n            else{\n                break;\n            }\n        }\n        if(end==start||end==seqEnd&&!isHex){\n            return 0;\n        }\n        String subStr=input.subSequence(start, end).toString();\n        boolean valid=false;\n        int entityValue=0;\n        if(isHex){\n            try{\n                entityValue=Integer.parseInt(subStr, 16);\n                valid=true;\n            }\n            catch (NumberFormatException ignored){}\n        }\n        else{\n            try{\n                entityValue=Integer.parseInt(subStr, 10);\n                valid=true;\n            }\n            catch (NumberFormatException ignored){}\n        }\n        if(entityValue>0xFFFF&&valid){\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        }\n        else if(valid){\n            out.write(entityValue);\n        }\n        else{\n            return 0;\n        }\n        return end-index;\n    }\n    else {\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..c882c245 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,69 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if(seqEnd-index<2) {\n+        return 0;\n+    }\n+    if(input.charAt(index) == '&' && input.charAt(index+1) == '#'){\n+        int start=index+2;\n+        boolean isHex=false;\n+        if(start<seqEnd && (input.charAt(start)=='x'||input.charAt(start)=='X')){\n+            isHex=true;\n+            start++;\n+        }\n+        int end=start;\n+        while(end<seqEnd){\n+            if(isHex&&Character.isDigit(input.charAt(end))){\n+                end++;\n             }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            else if(!isHex&&(Character.isDigit(input.charAt(end)))){\n                 end++;\n             }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n+            else if(input.charAt(end)==';') {\n+                end++;\n+                break;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+            else{\n+                break;\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n+        if(end==start||end==seqEnd&&!isHex){\n+            return 0;\n+        }\n+        String subStr=input.subSequence(start, end).toString();\n+        boolean valid=false;\n+        int entityValue=0;\n+        if(isHex){\n+            try{\n+                entityValue=Integer.parseInt(subStr, 16);\n+                valid=true;\n+            }\n+            catch (NumberFormatException ignored){}\n+        }\n+        else{\n+            try{\n+                entityValue=Integer.parseInt(subStr, 10);\n+                valid=true;\n+            }\n+            catch (NumberFormatException ignored){}\n+        }\n+        if(entityValue>0xFFFF&&valid){\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs[0]);\n+            out.write(chrs[1]);\n+        }\n+        else if(valid){\n+            out.write(entityValue);\n+        }\n+        else{\n+            return 0;\n+        }\n+        return end-index;\n+    }\n+    else {\n         return 0;\n     }\n }\n+}",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&#x80; F;]>",
    "test_result": "FAIL"
}