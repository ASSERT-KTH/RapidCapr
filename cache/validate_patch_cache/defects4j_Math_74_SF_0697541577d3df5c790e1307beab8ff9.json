{
    "patch": "import org.apache.commons.math3.exception.DerivativeException;\nimport org.apache.commons.math3.exception.IntegratorException;\nimport org.apache.commons.math3.ode.FirstOrderDifferentialEquations;\nimport org.apache.commons.math3.ode.events.CombinedEventsManager;\nimport org.apache.commons.math3.ode.events.EventHandler;\nimport org.apache.commons.math3.ode.events.EventState;\nimport org.apache.commons.math3.ode.events.EventStateComparator;\nimport org.apache.commons.math3.ode.events.EventStateImpl;\nimport org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;\nimport org.apache.commons.math3.ode.sampling.DummyStepInterpolator;\nimport org.apache.commons.math3.ode.sampling.StepHandler;\nimport org.apache.commons.math3.ode.sampling.StepInterpolator;\nimport org.apache.commons.math3.ode.sampling.StepNormalizerBounds;\nimport org.apache.commons.math3.ode.sampling.StepNormalizerMode;\nimport org.apache.commons.math3.ode.sampling.StepNormalizerOutput;\nimport org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BoundsType;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class Integrator {\n\n    /**\n     * Base class for <i>Fixed Step</i> integrators of differential equations.\n     * <br/>\n     * This base class defined several internal classes for interpolate local\n     * approximation of the solution during the step.\n     * @version $Id: AbstractIntegratedSolver.java 1244107 2012-02-14 16:17:55Z sebb $\n     * @since 2.2\n     */\n    protected static abstract class AbstractFixedStepIntegrator extends AbstractIntegrator {\n\n        /** Step size. */\n        protected double stepSize;\n\n        /** First integration step. */\n        private boolean firstStep;\n\n        /** Last integration step. */\n        private boolean lastStep;\n\n        /** Array for the scaled higher order derivatives. */\n        protected double[] scaled;\n\n        /** Array for the scaled derivatives. */\n        protected double[] stateTmp;\n\n        /** Slopes from specialized Runge-Kutta methods (when applicable). */\n        protected double[][] mbF;\n\n        /** Integrator output. */\n        private StepNormalizerOutput stepNormalizer;\n\n        /**\n         * Creates a new instance of this class.\n         * @param name Name of the method.\n         */\n        protected AbstractFixedStepIntegrator(final String name) {\n            super(name);\n            stepSize = -1;\n            firstStep = true;\n            lastStep = false;\n            stepNormalizer = null;\n        }\n\n        /**\n         * Computes the state derivative for the given time and state.\n         * <p>\n         * This method <em>must</em> be called by the {@code integrate}\n         * method each time <em>before</em> {@link #integrateStep}\n         * as the {@link #integrateStep} method needs the state derivative\n         * information.\n         * </p>\n         * @param t Current value of the independent <I>time</I> variable.\n         * @param y Array containing the current value of the state vector.\n         * @return Time derivative of the state vector.\n         */\n        protected abstract double[] computeDerivatives(double t, double[] y);\n\n        /**\n         * Method for subclasses to set slope values when using a discrete method.\n         * <p>\n         * This acts as a feed-through interface allowing a specialized stepper\n         * based on the same order of accuracy to obtain the slopes for discrete\n         * methods.\n         * </p>\n         * <p>\n         * The base class implementation does nothing.\n         * </p>\n         * @param mbF New value for slopes from specialized discrete method.\n         * @since 2.0\n         */\n        protected void setMBF(final double[][] mbF) {\n            // do nothing\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setStepNormalizer(final double referenceTime,\n                                      final double h,\n                                      final double[] normalizedAbsoluteTolerance,\n                                      final double[] normalizedRelativeTolerance,\n                                      final StepNormalizerBounds bounds,\n                                      final StepNormalizerMode mode) {\n\n            stepNormalizer = new StepNormalizerOutput(referenceTime,\n                                                      h,\n                                                      normalizedAbsoluteTolerance,\n                                                      normalizedRelativeTolerance,\n                                                      bounds,\n                                                      mode);\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void clearStepNormalizer() {\n            stepNormalizer = null;\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void integrate(final FirstOrderDifferentialEquations equations,\n                              final double t0, final double[] y0,\n                              final double t, final double[] y)\n            throws DerivativeException, IntegratorException {\n\n            sanityChecks(equations, t0, y0, t, y);\n\n            setEquations(equations);\n            initializeStep(t0, y0, t, stepNormalizer != null);\n            setStepStart(t0);\n            scaled = new double[y0.length];\n            stateTmp = y0.clone();\n\n            // compute initial state derivatives\n            final double[] yDot0 = computeDerivatives(stepStart, stateTmp);\n\n            // main integration loop\n            boolean stop = false;\n            int count = 0;\n            do {\n                ++count;\n\n                stepStart = acceptStep(new StepInterpolator() {\n\n                    private final StepInterpolator base = new DummyStepInterpolator();\n\n                    public void reinitialize(final AbstractIntegrator integrator,\n                                              final double[] y, final double[][] yDotK,\n                                              final boolean forward) {\n                        // should never be called here\n                        throw new UnsupportedOperationException();\n                    }\n\n                    public void storeTime(final double t) {\n                        if (stepNormalizer != null) {\n                            stepNormalizer.storeTime(t);\n                        }\n                    }\n\n                    public void setInterpolatedTime(final double time) {\n                        if (stepNormalizer != null) {\n                            stepNormalizer.setInterpolatedTime(time);\n                        }\n                    }\n\n                    public void setInterpolatedState(final double[] state) {\n                        if (stepNormalizer != null) {\n                            stepNormalizer.setInterpolatedState(state);\n                        }\n                    }\n\n                    public void setInterpolatedDerivatives(final double[] derivatives) {\n                        if (stepNormalizer != null) {\n                            stepNormalizer.setInterpolatedDerivatives(derivatives);\n                        }\n                    }\n\n                    public double getCurrentTime() {\n                        return stepStart;\n                    }\n\n                    public double[] getInterpolatedState() {\n                        return stateTmp;\n                    }\n\n                    public double[] getInterpolatedDerivatives() {\n                        return computeDerivatives(getCurrentTime(), stateTmp);\n                    }\n\n                    public double[] getInterpolatedSecondaryState(final int index) {\n                        if (stepNormalizer != null) {\n                            return stepNormalizer.getInterpolatedSecondaryState(index);\n                        }\n                        throw new UnsupportedOperationException();\n                    }\n\n                    public double[] getInterpolatedSecondaryDerivatives(final int index) {\n                        if (stepNormalizer != null) {\n                            return stepNormalizer.getInterpolatedSecondaryDerivatives(index);\n                        }\n                        throw new UnsupportedOperationException();\n                    }\n\n                    public void writeExternal(final java.io.ObjectOutput out)\n                        throws java.io.IOException {\n                        base.writeExternal(out);\n                    }\n\n                    public void readExternal(final java.io.ObjectInput in)\n                        throws java.io.IOException, ClassNotFoundException {\n                        base.readExternal(in);\n                    }\n                }, y, yDot0, t);\n\n                if (stepNormalizer != null) {\n                    stepNormalizer.finish(stepSize);\n                }\n\n                // adaptation control (next step size)\n                final double nextT = stepStart + stepSize;\n                lastStep = stop = (nextT >= t) ? (stepSize = t - stepStart) : false;\n                stepSize = computeStepSize();\n                if (!stop) {\n                    if (nextT + stepSize > t) {\n                        stepSize = t - nextT;\n                    }\n                } else {\n                    // ensure last step exactly reaches target, without rounding error effects\n                    stepSize = nextT - t;\n                }\n\n            } while (!stop);\n\n            setStepStart(Double.NaN);\n        }\n\n        /**\n         * Accept a step, and notify all the step handlers.\n         * The step is accepted only if all the event handlers agree to.\n         * This method may be called several times for the same step, it just ensure\n         * all step handlers are triggered in the correct order, but checks are\n         * performed only once (for the first call).\n         * @param interpolator step interpolator\n         * @param y predicted state at the end of the step\n         * @param yDot dot(y) predicted state derivative at the end of the step\n         * @param maxCheckInterval maximal interval between events checking\n         * @throws DerivativeException if one call to a user function generates one\n         * @throws IntegratorException if the integrator cannot perform integration\n         * @return the accepted step\n         * @since 2.0\n         */\n        protected double acceptStep(final StepInterpolator interpolator,\n                                     final double[] y, final double[] yDot,\n                                     final double maxCheckInterval)\n            throws DerivativeException, IntegratorException {\n\n            boolean errorHappen;\n\n            stepNormalizer.initialize(interpolator, y, yDot);\n\n            // Initialize events states, unless the step start is 0 (initialization call)\n            if (stepStart >= getMinStep()) {\n                eventsHandlersManager.reset(stepStart, y);\n                for (final EventState state : eventsHandlersManager.getEventsStates()) {\n                    final double maxCheck = state.getMaxCheckInterval();\n                    state.getEventHandler().resetState(stepStart, y);\n                    if (maxCheck < Double.POSITIVE_INFINITY) {\n                        final double nextTEvent =\n                                state.getEventHandler().evaluateStep(interpolator);\n                        state.reinitializeBegin(stepStart, y, nextTEvent);\n                        if (eventsHandlersManager.changeOccurred()) {\n                            break;\n                        }\n                    } else {\n                        state.reinitializeBegin(stepStart, y);\n                    }\n                }\n            }\n\n            do {\n\n                errorHappen = false;\n\n                // interpolate in the middle of the step\n                final double prev = interpolator.getCurrentTime();\n                final double[] interpolatedYSwitch = interpolator.getInterpolatedState();\n                final double next = prev + .5 * stepSize;\n                final double[] interpolatedYDotSwitch = computeDerivatives(next, interpolatedYSwitch);\n\n                // step accept tests\n                for (final EventState state : eventsHandlersManager.getEventsStates()) {\n\n                    // handle the first part of the step (f0 --> fp)\n                    final EventHandler handler = state.getEventHandler();\n                    final double    previousEventTime = state.getPreviousEventTime();\n                    final double    dt = state.evaluateStep(interpolator);\n                    final double    t = state.getEventTime();\n                    final EventState.StateValue[] currentState = state.getInterpolatedStateAndDerivatives(t);\n\n                    // Evaluate the function at the end and the middle of the step and\n                    // check if an event occurs\n                    state.setInterpolatedTime(next);\n                    final double[]   interpolatedY = state.getInterpolatedState();\n                    final double     h2             = t - prev;\n                    final double[]   yMiddle        = new double[y.length];\n                    final double[][] yDotMiddle     = new double[y.length][yDot.length];\n                    final double        d0          = h2 / stepSize;\n                    final double        d1          = 1.0 - d0;\n                    for (int j = 0; j < y.length; ++j) {\n                        yMiddle[j] = y[j] * d1 + interpolatedY[j] * d0;\n                        for (int k = 0; k < yDot.length; ++k) {\n                            yDotMiddle[j][k] = yDot[k] * d1 + interpolatedYDotSwitch[k][j] * d0;\n                        }\n                    }\n\n                    if (currentState != null && dt >= 0) {\n                        // there is a chanc",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..8c66dd6b5 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,174 +189,328 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n-    sanityChecks(equations, t0, y0, t, y);\n-    setEquations(equations);\n-    resetEvaluations();\n-    final boolean forward = t > t0;\n-\n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n-    if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n-    }\n-    final double[][] yDotK = new double[stages][y0.length];\n-    final double[] yTmp = new double[y0.length];\n-\n-    // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n-    } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n-    }\n-    interpolator.storeTime(t0);\n-\n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n-\n-    // main integration loop\n-    while (!lastStep) {\n-\n-      interpolator.shift();\n-\n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n-\n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n+import org.apache.commons.math3.exception.DerivativeException;\n+import org.apache.commons.math3.exception.IntegratorException;\n+import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;\n+import org.apache.commons.math3.ode.events.CombinedEventsManager;\n+import org.apache.commons.math3.ode.events.EventHandler;\n+import org.apache.commons.math3.ode.events.EventState;\n+import org.apache.commons.math3.ode.events.EventStateComparator;\n+import org.apache.commons.math3.ode.events.EventStateImpl;\n+import org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;\n+import org.apache.commons.math3.ode.sampling.DummyStepInterpolator;\n+import org.apache.commons.math3.ode.sampling.StepHandler;\n+import org.apache.commons.math3.ode.sampling.StepInterpolator;\n+import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;\n+import org.apache.commons.math3.ode.sampling.StepNormalizerMode;\n+import org.apache.commons.math3.ode.sampling.StepNormalizerOutput;\n+import org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BoundsType;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class Integrator {\n+\n+    /**\n+     * Base class for <i>Fixed Step</i> integrators of differential equations.\n+     * <br/>\n+     * This base class defined several internal classes for interpolate local\n+     * approximation of the solution during the step.\n+     * @version $Id: AbstractIntegratedSolver.java 1244107 2012-02-14 16:17:55Z sebb $\n+     * @since 2.2\n+     */\n+    protected static abstract class AbstractFixedStepIntegrator extends AbstractIntegrator {\n+\n+        /** Step size. */\n+        protected double stepSize;\n+\n+        /** First integration step. */\n+        private boolean firstStep;\n+\n+        /** Last integration step. */\n+        private boolean lastStep;\n+\n+        /** Array for the scaled higher order derivatives. */\n+        protected double[] scaled;\n+\n+        /** Array for the scaled derivatives. */\n+        protected double[] stateTmp;\n+\n+        /** Slopes from specialized Runge-Kutta methods (when applicable). */\n+        protected double[][] mbF;\n+\n+        /** Integrator output. */\n+        private StepNormalizerOutput stepNormalizer;\n+\n+        /**\n+         * Creates a new instance of this class.\n+         * @param name Name of the method.\n+         */\n+        protected AbstractFixedStepIntegrator(final String name) {\n+            super(name);\n+            stepSize = -1;\n+            firstStep = true;\n+            lastStep = false;\n+            stepNormalizer = null;\n         }\n \n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n-            } else {\n-              scale = vecAbsoluteTolerance;\n-            }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n+        /**\n+         * Computes the state derivative for the given time and state.\n+         * <p>\n+         * This method <em>must</em> be called by the {@code integrate}\n+         * method each time <em>before</em> {@link #integrateStep}\n+         * as the {@link #integrateStep} method needs the state derivative\n+         * information.\n+         * </p>\n+         * @param t Current value of the independent <I>time</I> variable.\n+         * @param y Array containing the current value of the state vector.\n+         * @return Time derivative of the state vector.\n+         */\n+        protected abstract double[] computeDerivatives(double t, double[] y);\n+\n+        /**\n+         * Method for subclasses to set slope values when using a discrete method.\n+         * <p>\n+         * This acts as a feed-through interface allowing a specialized stepper\n+         * based on the same order of accuracy to obtain the slopes for discrete\n+         * methods.\n+         * </p>\n+         * <p>\n+         * The base class implementation does nothing.\n+         * </p>\n+         * @param mbF New value for slopes from specialized discrete method.\n+         * @since 2.0\n+         */\n+        protected void setMBF(final double[][] mbF) {\n+            // do nothing\n         }\n \n-        stepSize = hNew;\n-\n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n-            }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n-\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public void setStepNormalizer(final double referenceTime,\n+                                      final double h,\n+                                      final double[] normalizedAbsoluteTolerance,\n+                                      final double[] normalizedRelativeTolerance,\n+                                      final StepNormalizerBounds bounds,\n+                                      final StepNormalizerMode mode) {\n+\n+            stepNormalizer = new StepNormalizerOutput(referenceTime,\n+                                                      h,\n+                                                      normalizedAbsoluteTolerance,\n+                                                      normalizedRelativeTolerance,\n+                                                      bounds,\n+                                                      mode);\n         }\n \n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public void clearStepNormalizer() {\n+            stepNormalizer = null;\n         }\n \n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public void integrate(final FirstOrderDifferentialEquations equations,\n+                              final double t0, final double[] y0,\n+                              final double t, final double[] y)\n+            throws DerivativeException, IntegratorException {\n+\n+            sanityChecks(equations, t0, y0, t, y);\n+\n+            setEquations(equations);\n+            initializeStep(t0, y0, t, stepNormalizer != null);\n+            setStepStart(t0);\n+            scaled = new double[y0.length];\n+            stateTmp = y0.clone();\n+\n+            // compute initial state derivatives\n+            final double[] yDot0 = computeDerivatives(stepStart, stateTmp);\n+\n+            // main integration loop\n+            boolean stop = false;\n+            int count = 0;\n+            do {\n+                ++count;\n+\n+                stepStart = acceptStep(new StepInterpolator() {\n+\n+                    private final StepInterpolator base = new DummyStepInterpolator();\n+\n+                    public void reinitialize(final AbstractIntegrator integrator,\n+                                              final double[] y, final double[][] yDotK,\n+                                              final boolean forward) {\n+                        // should never be called here\n+                        throw new UnsupportedOperationException();\n+                    }\n+\n+                    public void storeTime(final double t) {\n+                        if (stepNormalizer != null) {\n+                            stepNormalizer.storeTime(t);\n+                        }\n+                    }\n+\n+                    public void setInterpolatedTime(final double time) {\n+                        if (stepNormalizer != null) {\n+                            stepNormalizer.setInterpolatedTime(time);\n+                        }\n+                    }\n+\n+                    public void setInterpolatedState(final double[] state) {\n+                        if (stepNormalizer != null) {\n+                            stepNormalizer.setInterpolatedState(state);\n+                        }\n+                    }\n+\n+                    public void setInterpolatedDerivatives(final double[] derivatives) {\n+                        if (stepNormalizer != null) {\n+                            stepNormalizer.setInterpolatedDerivatives(derivatives);\n+                        }\n+                    }\n+\n+                    public double getCurrentTime() {\n+                        return stepStart;\n+                    }\n+\n+                    public double[] getInterpolatedState() {\n+                        return stateTmp;\n+                    }\n+\n+                    public double[] getInterpolatedDerivatives() {\n+                        return computeDerivatives(getCurrentTime(), stateTmp);\n+                    }\n+\n+                    public double[] getInterpolatedSecondaryState(final int index) {\n+                        if (stepNormalizer != null) {\n+                            return stepNormalizer.getInterpolatedSecondaryState(index);\n+                        }\n+                        throw new UnsupportedOperationException();\n+                    }\n+\n+                    public double[] getInterpolatedSecondaryDerivatives(final int index) {\n+                        if (stepNormalizer != null) {\n+                            return stepNormalizer.getInterpolatedSecondaryDerivatives(index);\n+                        }\n+                        throw new UnsupportedOperationException();\n+                    }\n+\n+                    public void writeExternal(final java.io.ObjectOutput out)\n+                        throws java.io.IOException {\n+                        base.writeExternal(out);\n+                    }\n+\n+                    public void readExternal(final java.io.ObjectInput in)\n+                        throws java.io.IOException, ClassNotFoundException {\n+                        base.readExternal(in);\n+                    }\n+                }, y, yDot0, t);\n+\n+                if (stepNormalizer != null) {\n+                    stepNormalizer.finish(stepSize);\n+                }\n+\n+                // adaptation control (next step size)\n+                final double nextT = stepStart + stepSize;\n+                lastStep = stop = (nextT >= t) ? (stepSize = t - stepStart) : false;\n+                stepSize = computeStepSize();\n+                if (!stop) {\n+                    if (nextT + stepSize > t) {\n+                        stepSize = t - nextT;\n+                    }\n+                } else {\n+                    // ensure last step exactly reaches target, without rounding error effects\n+                    stepSize = nextT - t;\n+                }\n+\n+            } while (!stop);\n+\n+            setStepStart(Double.NaN);\n         }\n \n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n-\n-    }\n-\n-    final double stopTime = stepStart;\n-    resetInternalState();\n-    return stopTime;\n+        /**\n+         * Accept a step, and notify all the step handlers.\n+         * The step is accepted only if all the event handlers agree to.\n+         * This method may be called several times for the same step, it just ensure\n+         * all step handlers are triggered in the correct order, but checks are\n+         * performed only once (for the first call).\n+         * @param interpolator step interpolator\n+         * @param y predicted state at the end of the step\n+         * @param yDot dot(y) predicted state derivative at the end of the step\n+         * @param maxCheckInterval maximal interval between events checking\n+         * @throws DerivativeException if one call to a user function generates one\n+         * @throws IntegratorException if the integrator cannot perform integration\n+         * @return the accepted step\n+         * @since 2.0\n+         */\n+        protected double acceptStep(final StepInterpolator interpolator,\n+                                     final double[] y, final double[] yDot,\n+                                     final double maxCheckInterval)\n+            throws DerivativeException, IntegratorException {\n+\n+            boolean errorHappen;\n+\n+            stepNormalizer.initialize(interpolator, y, yDot);\n+\n+            // Initialize events states, unless the step start is 0 (initialization call)\n+            if (stepStart >= getMinStep()) {\n+                eventsHandlersManager.reset(stepStart, y);\n+                for (final EventState state : eventsHandlersManager.getEventsStates()) {\n+                    final double maxCheck = state.getMaxCheckInterval();\n+                    state.getEventHandler().resetState(stepStart, y);\n+                    if (maxCheck < Double.POSITIVE_INFINITY) {\n+                        final double nextTEvent =\n+                                state.getEventHandler().evaluateStep(interpolator);\n+                        state.reinitializeBegin(stepStart, y, nextTEvent);\n+                        if (eventsHandlersManager.changeOccurred()) {\n+                            break;\n+                        }\n+                    } else {\n+                        state.reinitializeBegin(stepStart, y);\n+                    }\n+                }\n+            }\n \n-  }\n+            do {\n+\n+                errorHappen = false;\n+\n+                // interpolate in the middle of the step\n+                final double prev = interpolator.getCurrentTime();\n+                final double[] interpolatedYSwitch = interpolator.getInterpolatedState();\n+                final double next = prev + .5 * stepSize;\n+                final double[] interpolatedYDotSwitch = computeDerivatives(next, interpolatedYSwitch);\n+\n+                // step accept tests\n+                for (final EventState state : eventsHandlersManager.getEventsStates()) {\n+\n+                    // handle the first part of the step (f0 --> fp)\n+                    final EventHandler handler = state.getEventHandler();\n+                    final double    previousEventTime = state.getPreviousEventTime();\n+                    final double    dt = state.evaluateStep(interpolator);\n+                    final double    t = state.getEventTime();\n+                    final EventState.StateValue[] currentState = state.getInterpolatedStateAndDerivatives(t);\n+\n+                    // Evaluate the function at the end and the middle of the step and\n+                    // check if an event occurs\n+                    state.setInterpolatedTime(next);\n+                    final double[]   interpolatedY = state.getInterpolatedState();\n+                    final double     h2             = t - prev;\n+                    final double[]   yMiddle        = new double[y.length];\n+                    final double[][] yDotMiddle     = new double[y.length][yDot.length];\n+                    final double        d0          = h2 / stepSize;\n+                    final double        d1          = 1.0 - d0;\n+                    for (int j = 0; j < y.length; ++j) {\n+                        yMiddle[j] = y[j] * d1 + interpolatedY[j] * d0;\n+                        for (int k = 0; k < yDot.length; ++k) {\n+                            yDotMiddle[j][k] = yDot[k] * d1 + interpolatedYDotSwitch[k][j] * d0;\n+                        }\n+                    }\n+\n+                    if (currentState != null && dt >= 0) {\n+                        // there is a chanc\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}