{
    "patch": "            // if the offsets differ, we must be near a DST boundary\n            if (offsetLocal != offsetAdjusted) {\n\n                // Handling the case when local time matches a transition\n                if (offsetLocal == offsetAdjusted) { \n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    int diff = nextLocal < nextAdjusted ? offsetLocal : getOffset(nextLocal);\n                    return diff;\n                }\n\n                // We need to ensure that time is always after the DST gap\n                boolean positiveOffset = offsetLocal > 0 && offsetAdjusted >= 0;\n                boolean negativeOffset = offsetLocal < 0 && offsetAdjusted <= 0;\n                if (positiveOffset || negativeOffset) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal == nextAdjusted) {\n                        return offsetAdjusted;\n                    }\n                    else {\n                        int diff = nextLocal > instantAdjusted ? offsetLocal : getOffset(nextLocal);\n                        return diff;\n                    }\n                }\n                else {\n                    // (offsetLocal > 0 && offsetAdjusted < 0) || (offsetLocal < 0 && offsetAdjusted > 0)\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal == prevAdjusted) {\n                        return offsetLocal; \n                    }\n                    else {\n                        int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : offsetLocal;  \n                        return diff;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1575d47c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // if the offsets differ, we must be near a DST boundary\n+            if (offsetLocal != offsetAdjusted) {\n+\n+                // Handling the case when local time matches a transition\n+                if (offsetLocal == offsetAdjusted) { \n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    int diff = nextLocal < nextAdjusted ? offsetLocal : getOffset(nextLocal);\n+                    return diff;\n+                }\n+\n+                // We need to ensure that time is always after the DST gap\n+                boolean positiveOffset = offsetLocal > 0 && offsetAdjusted >= 0;\n+                boolean negativeOffset = offsetLocal < 0 && offsetAdjusted <= 0;\n+                if (positiveOffset || negativeOffset) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal == nextAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                    else {\n+                        int diff = nextLocal > instantAdjusted ? offsetLocal : getOffset(nextLocal);\n+                        return diff;\n+                    }\n+                }\n+                else {\n+                    // (offsetLocal > 0 && offsetAdjusted < 0) || (offsetLocal < 0 && offsetAdjusted > 0)\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal == prevAdjusted) {\n+                        return offsetLocal; \n+                    }\n+                    else {\n+                        int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : offsetLocal;  \n+                        return diff;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}