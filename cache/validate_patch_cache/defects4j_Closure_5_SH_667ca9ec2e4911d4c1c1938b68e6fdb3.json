{
    "patch": "          Node var = NodeUtil.getEnclosingNode(ref.getNode(), Token.VAR);\n          if (var != null) {\n            Node grandparent = var.getParent();\n            if (grandparent.isForIn() && var == grandparent.getFirstChild()) {\n              // for (x in y) {}\n              return false;\n            }\n            if (var.hasTwoChildren()) {\n              // Multiple variables defined in the same var statement.\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..478461e2 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,18 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          Node var = NodeUtil.getEnclosingNode(ref.getNode(), Token.VAR);\n+          if (var != null) {\n+            Node grandparent = var.getParent();\n+            if (grandparent.isForIn() && var == grandparent.getFirstChild()) {\n+              // for (x in y) {}\n+              return false;\n+            }\n+            if (var.hasTwoChildren()) {\n+              // Multiple variables defined in the same var statement.\n+              return false;\n+            }\n+          }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}