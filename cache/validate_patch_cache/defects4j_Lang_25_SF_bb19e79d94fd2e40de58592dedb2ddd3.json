{
    "patch": "public static String unescapeISO8859_1(String input) {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        char character = input.charAt(i);\n        // If character is a backslash\n        if (character == '\\\\') {\n            // Check the next character\n            if (++i < input.length()) {\n                character = input.charAt(i);\n                switch (character) {\n                    case 'r':\n                        builder.append('\\r');\n                        break;\n                    case 'n':\n                        builder.append('\\n');\n                        break;\n                    case 't':\n                        builder.append('\\t');\n                        break;\n                    case 'f':\n                        builder.append('\\f');\n                        break;\n                    case '\\\\':\n                        builder.append('\\\\');\n                        break;\n                    case '\\'':\n                        builder.append('\\'');\n                        break;\n                    case '\\\"':\n                        builder.append('\\\"');\n                        break;\n                    // If the character is not one of the above, consider it as an octal value\n                    default:\n                        if (character >= '0' && character <= '7') {\n                            int octalValue = character - '0';\n                            // Check if there are more octal digits\n                            if (i + 1 < input.length() && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n                                octalValue = octalValue * 8 + (input.charAt(i + 1) - '0');\n                                i++;\n                                if (i + 1 < input.length() && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n                                    octalValue = octalValue * 8 + (input.charAt(i + 1) - '0');\n                                    i++;\n                                }\n                            }\n                            builder.append((char)octalValue);\n                        } else {\n                            // If the character is not an octal value, ignore the backslash and append the character\n                            builder.append('\\\\');\n                            builder.append(character);\n                        }\n                        break;\n                }\n            } else {\n                // If the backslash is the last character, ignore it\n                builder.append('\\\\');\n            }\n        } else {\n            // Append the character if it is not a backslash\n            builder.append(character);\n        }\n    }\n    return builder.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..dd94c5af 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,69 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeISO8859_1(String input) {\n+    StringBuilder builder = new StringBuilder();\n+    for (int i = 0; i < input.length(); i++) {\n+        char character = input.charAt(i);\n+        // If character is a backslash\n+        if (character == '\\\\') {\n+            // Check the next character\n+            if (++i < input.length()) {\n+                character = input.charAt(i);\n+                switch (character) {\n+                    case 'r':\n+                        builder.append('\\r');\n+                        break;\n+                    case 'n':\n+                        builder.append('\\n');\n+                        break;\n+                    case 't':\n+                        builder.append('\\t');\n+                        break;\n+                    case 'f':\n+                        builder.append('\\f');\n+                        break;\n+                    case '\\\\':\n+                        builder.append('\\\\');\n+                        break;\n+                    case '\\'':\n+                        builder.append('\\'');\n+                        break;\n+                    case '\\\"':\n+                        builder.append('\\\"');\n+                        break;\n+                    // If the character is not one of the above, consider it as an octal value\n+                    default:\n+                        if (character >= '0' && character <= '7') {\n+                            int octalValue = character - '0';\n+                            // Check if there are more octal digits\n+                            if (i + 1 < input.length() && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n+                                octalValue = octalValue * 8 + (input.charAt(i + 1) - '0');\n+                                i++;\n+                                if (i + 1 < input.length() && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n+                                    octalValue = octalValue * 8 + (input.charAt(i + 1) - '0');\n+                                    i++;\n+                                }\n+                            }\n+                            builder.append((char)octalValue);\n+                        } else {\n+                            // If the character is not an octal value, ignore the backslash and append the character\n+                            builder.append('\\\\');\n+                            builder.append(character);\n+                        }\n+                        break;\n+                }\n+            } else {\n+                // If the backslash is the last character, ignore it\n+                builder.append('\\\\');\n+            }\n+        } else {\n+            // Append the character if it is not a backslash\n+            builder.append(character);\n+        }\n+    }\n+    return builder.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}