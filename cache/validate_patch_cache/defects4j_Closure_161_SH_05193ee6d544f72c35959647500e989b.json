{
    "patch": "if (left.isArrayLit() && left.getChildCount() > intIndex) {\n  Node elem = left.removeFirstChild();\n  for (int i = 0; i < intIndex; i++) {\n    elem = left.removeFirstChild();\n  }\n  if (elem != null) {\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    }\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  } else {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n} else {\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..c9c594fb 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,25 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.isArrayLit() && left.getChildCount() > intIndex) {\n+  Node elem = left.removeFirstChild();\n+  for (int i = 0; i < intIndex; i++) {\n+    elem = left.removeFirstChild();\n+  }\n+  if (elem != null) {\n+    if (elem.getType() == Token.EMPTY) {\n+      elem = NodeUtil.newUndefinedNode(elem);\n+    }\n+    parent.replaceChild(n, elem);\n+    reportCodeChange();\n+    return elem;\n+  } else {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n+} else {\n+  return n;\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}