{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(dim, vals.length);\n    }\n\n    final double exponent = getExponentTerm(vals);\n    final double normFactor = getNormalizationFactor();\n\n    if (Double.isInfinite(exponent) || Double.isNaN(exponent) || Double.isInfinite(normFactor) || Double.isNaN(normFactor)) {\n        // handle large or small values that might cause an overflow or underflow\n        return 0.0;\n    }\n\n    return normFactor * exponent;\n}\n\nprivate double getNormalizationFactor() {\n    final int dim = getDimension();\n    final double pow = FastMath.pow(2 * FastMath.PI, -dim / 2);\n    final double determinantSqrt = FastMath.sqrt(FastMath.abs(covarianceMatrixDeterminant));\n    return pow / determinantSqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..e11df077d 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,30 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(dim, vals.length);\n+    }\n+\n+    final double exponent = getExponentTerm(vals);\n+    final double normFactor = getNormalizationFactor();\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    if (Double.isInfinite(exponent) || Double.isNaN(exponent) || Double.isInfinite(normFactor) || Double.isNaN(normFactor)) {\n+        // handle large or small values that might cause an overflow or underflow\n+        return 0.0;\n     }\n \n+    return normFactor * exponent;\n+}\n+\n+private double getNormalizationFactor() {\n+    final int dim = getDimension();\n+    final double pow = FastMath.pow(2 * FastMath.PI, -dim / 2);\n+    final double determinantSqrt = FastMath.sqrt(FastMath.abs(covarianceMatrixDeterminant));\n+    return pow / determinantSqrt;\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.006681015176564677> but was:<0.016746821544815844>",
    "test_result": "FAIL"
}