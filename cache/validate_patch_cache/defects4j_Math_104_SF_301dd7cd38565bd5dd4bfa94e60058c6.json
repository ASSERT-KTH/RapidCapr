{
    "patch": "public static double regularizedGamma(double a, double x) {\n   final double epsilon = 10e-15;\n   final int maxIterations = 1000;\n   if (Double.isNaN(a) || Double.isNaN(x) || x < 0 || a <= 0) {\n      return Double.NaN;\n   }\n   if (x == 0.0) {\n      return 0.0;\n   }\n   if (x >= a + 1) {\n      return 1 - regularizedGammaComplement(a, x);\n   }\n   double sum = 1 / a;\n   double increment = sum;\n   for (int n = 1; n <= maxIterations; n++) {\n      increment *= x / (a + n);\n      sum += increment;\n      if (Math.abs(increment / sum) < epsilon) {\n         return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n      }\n   }\n   throw new MaxIterationsExceededException(maxIterations);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..28243dd3a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,29 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+   final double epsilon = 10e-15;\n+   final int maxIterations = 1000;\n+   if (Double.isNaN(a) || Double.isNaN(x) || x < 0 || a <= 0) {\n+      return Double.NaN;\n+   }\n+   if (x == 0.0) {\n+      return 0.0;\n+   }\n+   if (x >= a + 1) {\n+      return 1 - regularizedGammaComplement(a, x);\n+   }\n+   double sum = 1 / a;\n+   double increment = sum;\n+   for (int n = 1; n <= maxIterations; n++) {\n+      increment *= x / (a + n);\n+      sum += increment;\n+      if (Math.abs(increment / sum) < epsilon) {\n+         return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+      }\n+   }\n+   throw new MaxIterationsExceededException(maxIterations);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}