{
    "patch": "            } catch (IllegalFieldValueException e) {\n                // Find the array index of the field with invalid value\n                int invalidFieldIndex = -1;\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].getField() == e.getField()) {\n                        invalidFieldIndex = i;\n                        break;\n                    }\n                }\n                \n                // Rewind any validated fields\n                for (int i = 0; i < invalidFieldIndex; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n                \n                // If the invalid field is optional, remove from fields list and try again\n                DateTimeFieldType fieldType = e.getFieldType();\n                if (fieldType instanceof DateTimeFieldType.Optional) {\n                    int removedIndex = removeSavedField(savedFields, invalidFieldIndex);\n                    count--;\n                    if (resetFields && removedIndex < count) {\n                        resetFields(savedFields, removedIndex, count);\n                    }\n                    return computeMillis(resetFields, text);\n                }\n                \n                // Otherwise, throw the exception\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7113ab46 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                // Find the array index of the field with invalid value\n+                int invalidFieldIndex = -1;\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].getField() == e.getField()) {\n+                        invalidFieldIndex = i;\n+                        break;\n+                    }\n+                }\n+                \n+                // Rewind any validated fields\n+                for (int i = 0; i < invalidFieldIndex; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+                \n+                // If the invalid field is optional, remove from fields list and try again\n+                DateTimeFieldType fieldType = e.getFieldType();\n+                if (fieldType instanceof DateTimeFieldType.Optional) {\n+                    int removedIndex = removeSavedField(savedFields, invalidFieldIndex);\n+                    count--;\n+                    if (resetFields && removedIndex < count) {\n+                        resetFields(savedFields, removedIndex, count);\n+                    }\n+                    return computeMillis(resetFields, text);\n+                }\n+                \n+                // Otherwise, throw the exception\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}