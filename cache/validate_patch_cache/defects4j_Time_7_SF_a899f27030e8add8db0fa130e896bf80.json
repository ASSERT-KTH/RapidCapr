{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n        int newPos = parser.parseInto(bucket, text, position);\n\n        StringBuilder sb = new StringBuilder(text);\n        if (newPos >= 0) {\n            // Handle Feb 29 case separately\n            int yearField = chrono.year().getField(getConstrainedValue(bucket, ChronoField.YEAR));\n            int monthField = chrono.monthOfYear().getField(getConstrainedValue(bucket, ChronoField.MONTH_OF_YEAR));\n            if (monthField == 2) {\n                int newDayOfMonth = getConstrainedValue(bucket, ChronoField.DAY_OF_MONTH);\n                if (newDayOfMonth == 29) { // Feb 29 case\n                    try {\n                        chrono.year().set(bucket, yearField + 1);\n                        chrono.monthOfYear().set(bucket, 1);\n                        chrono.dayOfMonth().set(bucket, 1);\n                        bucket.computeMillis();\n                        if (instant.isAfter(bucket.getInstant())) {\n                            bucket.add(chrono.year(), 1);\n                        }\n                        sb.replace(bucket.getCursor(), newPos, \" 1\");\n                        newPos = bucket.getCursor() + 2;\n                    } catch (Exception e) {\n                        throw new \n                            IllegalFieldValueException(ChronoField.DAY_OF_MONTH, newDayOfMonth, e.getMessage());\n                    }\n                }\n            }\n        }\n        instant.setMillis(bucket.computeMillis());\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else {\n                chrono = chrono.withUTC();\n            }\n        } else if (iZone != null) {\n            chrono = chrono.withZone(iZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        return newPos;\n    }\n    \n    private int getConstrainedValue(DateTimeParserBucket bucket, ChronoField field) {\n        ValueRange range = field.range();\n        int value = bucket.getInt(field);\n        if (value < range.getMinimum())\n            throw new IllegalFieldValueException(field, value, range.getMinimum(), range.getMaximum());\n        if (value > range.getMaximum())\n            throw new IllegalFieldValueException(field, value, range.getMinimum(), range.getMaximum());\n        return value;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..95bdcfad 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,30 +702,70 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+\n+        StringBuilder sb = new StringBuilder(text);\n+        if (newPos >= 0) {\n+            // Handle Feb 29 case separately\n+            int yearField = chrono.year().getField(getConstrainedValue(bucket, ChronoField.YEAR));\n+            int monthField = chrono.monthOfYear().getField(getConstrainedValue(bucket, ChronoField.MONTH_OF_YEAR));\n+            if (monthField == 2) {\n+                int newDayOfMonth = getConstrainedValue(bucket, ChronoField.DAY_OF_MONTH);\n+                if (newDayOfMonth == 29) { // Feb 29 case\n+                    try {\n+                        chrono.year().set(bucket, yearField + 1);\n+                        chrono.monthOfYear().set(bucket, 1);\n+                        chrono.dayOfMonth().set(bucket, 1);\n+                        bucket.computeMillis();\n+                        if (instant.isAfter(bucket.getInstant())) {\n+                            bucket.add(chrono.year(), 1);\n+                        }\n+                        sb.replace(bucket.getCursor(), newPos, \" 1\");\n+                        newPos = bucket.getCursor() + 2;\n+                    } catch (Exception e) {\n+                        throw new \n+                            IllegalFieldValueException(ChronoField.DAY_OF_MONTH, newDayOfMonth, e.getMessage());\n+                    }\n+                }\n+            }\n+        }\n+        instant.setMillis(bucket.computeMillis());\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else {\n+                chrono = chrono.withUTC();\n+            }\n+        } else if (iZone != null) {\n+            chrono = chrono.withZone(iZone);\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n         return newPos;\n     }\n+    \n+    private int getConstrainedValue(DateTimeParserBucket bucket, ChronoField field) {\n+        ValueRange range = field.range();\n+        int value = bucket.getInt(field);\n+        if (value < range.getMinimum())\n+            throw new IllegalFieldValueException(field, value, range.getMinimum(), range.getMaximum());\n+        if (value > range.getMaximum())\n+            throw new IllegalFieldValueException(field, value, range.getMinimum(), range.getMaximum());\n+        return value;\n+    }\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}