{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long oldMillis = millis;\n        SavedField savedField = savedFields[i];\n        long newMillis = savedField.set(millis, resetFields);\n        if (newMillis < oldMillis && millis > 0) {  // detect integer underflow\n            millis = Long.MIN_VALUE;  // reset to the minimum value to avoid overflow\n        } else if (newMillis > oldMillis && millis < 0) {  // detect integer overflow\n            millis = Long.MAX_VALUE;  // reset to the maximum value to avoid overflow\n        } else {\n            millis = newMillis;  // no overflow occurred, update millis normally\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8f126436 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long oldMillis = millis;\n+        SavedField savedField = savedFields[i];\n+        long newMillis = savedField.set(millis, resetFields);\n+        if (newMillis < oldMillis && millis > 0) {  // detect integer underflow\n+            millis = Long.MIN_VALUE;  // reset to the minimum value to avoid overflow\n+        } else if (newMillis > oldMillis && millis < 0) {  // detect integer overflow\n+            millis = Long.MAX_VALUE;  // reset to the maximum value to avoid overflow\n+        } else {\n+            millis = newMillis;  // no overflow occurred, update millis normally\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-06-30T00:00:00.000+01:00> but was:<292278994-08-16T14:25:51.616+01:00>",
    "test_result": "FAIL"
}