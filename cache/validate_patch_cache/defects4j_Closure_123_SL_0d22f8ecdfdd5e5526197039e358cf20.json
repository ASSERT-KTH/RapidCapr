{
    "patch": "        boolean isNumeric = rhsNode instanceof IntegerLiteralExpr || rhsNode instanceof DoubleLiteralExpr || rhsNode instanceof LongLiteralExpr;\n        String rhsString = isNumeric ? rhsNode.toString() : String.format(\"(%s)\", rhsNode);\n\n        String infixExpr;\n        if (rhsNode instanceof ArrayAccessExpr) {\n            ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) rhsNode;\n            String arrayName = arrayAccessExpr.getName().toString();\n            String arrayIndex = arrayAccessExpr.getIndex().toString();\n            infixExpr = String.format(\"%s%s %s %s\", isArray(arrayName) ? \"\" : \"var \", arrayName, operatorSymbol, arrayIndex);\n        } else {\n            infixExpr = String.format(\"%s %s %s\", rhsString, operatorSymbol, lhsName);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}