{
    "patch": "public static String getprop(String propName, String defaultValue) {\n    String value = System.getProperty(propName);\n    String[] warnings = {\n        \"Cannot find property \" + propName + \", using default: \" + defaultValue,\n        \"Property \" + propName + \" had invalid value \" + value + \", using default: \" + defaultValue\n    };\n    if (value != null) {\n        return value;\n    }\n    for (String warning : warnings) {\n        System.err.println(warning);\n    }\n    return defaultValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..38124a70 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String propName, String defaultValue) {\n+    String value = System.getProperty(propName);\n+    String[] warnings = {\n+        \"Cannot find property \" + propName + \", using default: \" + defaultValue,\n+        \"Property \" + propName + \" had invalid value \" + value + \", using default: \" + defaultValue\n+    };\n+    if (value != null) {\n+        return value;\n+    }\n+    for (String warning : warnings) {\n+        System.err.println(warning);\n+    }\n+    return defaultValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}