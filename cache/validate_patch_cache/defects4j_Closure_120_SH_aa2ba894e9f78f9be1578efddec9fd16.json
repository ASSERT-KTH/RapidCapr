{
    "patch": "      List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n      for (DiGraphEdge<Node, Branch> edge : outEdges) {\n          if (edge.getValue() == Branch.ON_EX) {\n              return true;\n          } else if (edge.getValue() == Branch.ON_TRUE) {\n              Node target = edge.getTarget();\n              if (isLoopExit(target)) {\n                  return false;\n              }\n          }\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5bbd7852 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+      for (DiGraphEdge<Node, Branch> edge : outEdges) {\n+          if (edge.getValue() == Branch.ON_EX) {\n+              return true;\n+          } else if (edge.getValue() == Branch.ON_TRUE) {\n+              Node target = edge.getTarget();\n+              if (isLoopExit(target)) {\n+                  return false;\n+              }\n+          }\n+      }\n+      return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}