{
    "patch": "          boolean seenAssignment = false;\n          List<Reference> seenReferences = Lists.newArrayList();\n          for (BasicBlock block = getBlock();\n               block != null;\n               block = block.getParent()) {\n            for (int i = 0; i < block.getStatements().size(); i++) {\n              // Stop after reaching the first use.\n              if (!seenAssignment && seenReferences.contains(references.get(0))) {\n                return false;\n              }\n              seenReferences.addAll(referencesInStatement(block.getStatements().get(i)));\n              if (!seenAssignment && isAssignmentTo(references.get(0), seenReferences)) {\n                seenAssignment = true;\n              }\n            }\n          }\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..91f6b4dd 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          boolean seenAssignment = false;\n+          List<Reference> seenReferences = Lists.newArrayList();\n+          for (BasicBlock block = getBlock();\n+               block != null;\n+               block = block.getParent()) {\n+            for (int i = 0; i < block.getStatements().size(); i++) {\n+              // Stop after reaching the first use.\n+              if (!seenAssignment && seenReferences.contains(references.get(0))) {\n+                return false;\n+              }\n+              seenReferences.addAll(referencesInStatement(block.getStatements().get(i)));\n+              if (!seenAssignment && isAssignmentTo(references.get(0), seenReferences)) {\n+                seenAssignment = true;\n+              }\n+            }\n+          }\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}