{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  JSType constructorType = n.getFirstChild().getJSType();\n\n  // Check if the constructor has a JSType\n  if (constructorType == null) {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n    return scope;\n  }\n\n  // Check if the constructor is a function\n  if (!constructorType.isFunctionType()) {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n    return scope;\n  }\n\n  // Check if the function is a constructor\n  FunctionType ct = constructorType.toMaybeFunctionType();\n  if (ct == null || !ct.isConstructor()) {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n    return scope;\n  }\n\n  // Traverse the arguments to the constructor function\n  scope = traverseChildren(n.getFirstChild().getNext(), scope);\n\n  // Set the type of the new expression to the instance type of the constructor\n  JSType instanceType = ct.getInstanceType();\n  if (instanceType != null) {\n    n.setJSType(instanceType.restrictByNotNullOrUndefined());\n  } else {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n  }\n\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..35bbc74c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,42 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  JSType constructorType = n.getFirstChild().getJSType();\n+\n+  // Check if the constructor has a JSType\n+  if (constructorType == null) {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    return scope;\n+  }\n+\n+  // Check if the constructor is a function\n+  if (!constructorType.isFunctionType()) {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    return scope;\n+  }\n+\n+  // Check if the function is a constructor\n+  FunctionType ct = constructorType.toMaybeFunctionType();\n+  if (ct == null || !ct.isConstructor()) {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n     return scope;\n   }\n \n+  // Traverse the arguments to the constructor function\n+  scope = traverseChildren(n.getFirstChild().getNext(), scope);\n+\n+  // Set the type of the new expression to the instance type of the constructor\n+  JSType instanceType = ct.getInstanceType();\n+  if (instanceType != null) {\n+    n.setJSType(instanceType.restrictByNotNullOrUndefined());\n+  } else {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n+  }\n+\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}