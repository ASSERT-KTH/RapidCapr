{
    "patch": "    static void runOnFunctionBody(Node root) {\n      NodeTraversal.Callback cb = new MinimizeExitPointsCallback();\n      NodeTraversal t = new NodeTraversal(compiler, cb);\n      t.traverseWithScope(root, root.getEnclosingScope());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..c0629961 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,11 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+    static void runOnFunctionBody(Node root) {\n+      NodeTraversal.Callback cb = new MinimizeExitPointsCallback();\n+      NodeTraversal t = new NodeTraversal(compiler, cb);\n+      t.traverseWithScope(root, root.getEnclosingScope());\n+    }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}