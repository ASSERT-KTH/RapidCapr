{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    double norm = m.getNorm();\n    int n = m.getRowDimension();\n    if (n > 1000 || norm > 1.0) {\n        m = m.scalarMultiply(1.0 / norm);\n        CholeskyDecomposition dec = new CholeskyDecomposition(m);\n        RealMatrix sqrt = dec.getL();\n        if (sqrt == null) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        return sqrt.scalarMultiply(norm);\n    }\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = dec.getSquareRoot();\n    if (sqrt == null) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..12f0f0b4a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    double norm = m.getNorm();\n+    int n = m.getRowDimension();\n+    if (n > 1000 || norm > 1.0) {\n+        m = m.scalarMultiply(1.0 / norm);\n+        CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+        RealMatrix sqrt = dec.getL();\n+        if (sqrt == null) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        return sqrt.scalarMultiply(norm);\n+    }\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = dec.getSquareRoot();\n+    if (sqrt == null) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}