{
    "patch": "                  !mayEffectMutableState(lhs)) {\n            n.removeChild(cond);\n            Node assignName = thenOp.removeFirstChild();\n            Node thenExpr = thenOp.removeFirstChild();\n            Node elseExpr = elseOp.getLastChild();\n            elseOp.removeChild(elseExpr);\n\n            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                                .srcref(thenOp);\n            Node expr = NodeUtil.newExpr(assign);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n\n            return expr;\n          }\n        }\n      }\n      // if(x)foo();else bar(); -> x?foo():bar()\n      n.removeChild(cond);\n      thenOp.detachFromParent();\n      elseOp.detachFromParent();\n      Node hookNode = IR.hook(cond, thenOp, elseOp).srcref(n);\n      Node expr = NodeUtil.newExpr(hookNode);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..020cb0c0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,30 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+                  !mayEffectMutableState(lhs)) {\n+            n.removeChild(cond);\n+            Node assignName = thenOp.removeFirstChild();\n+            Node thenExpr = thenOp.removeFirstChild();\n+            Node elseExpr = elseOp.getLastChild();\n+            elseOp.removeChild(elseExpr);\n+\n+            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                                .srcref(thenOp);\n+            Node expr = NodeUtil.newExpr(assign);\n+            parent.replaceChild(n, expr);\n+            reportCodeChange();\n+\n+            return expr;\n+          }\n+        }\n+      }\n+      // if(x)foo();else bar(); -> x?foo():bar()\n+      n.removeChild(cond);\n+      thenOp.detachFromParent();\n+      elseOp.detachFromParent();\n+      Node hookNode = IR.hook(cond, thenOp, elseOp).srcref(n);\n+      Node expr = NodeUtil.newExpr(hookNode);\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}