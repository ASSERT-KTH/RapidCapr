{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    final int entityStart = index;\n    int semiColonIndex = -1; // Index of the semicolon\n\n    // Find the end of the entity\n    for (int i = index + 1; i < seqEnd; i++) {\n        char c = input.charAt(i);\n        if (c == ';') {\n            semiColonIndex = i;\n            break;\n        }\n        if (c < '0' || c > '9') {\n            if (i == index + 2 && (c == 'x' || c == 'X')) {\n                continue;\n            }\n            return 0; // Invalid input\n        }\n    }\n\n    if (semiColonIndex == -1) {\n        // The input ends with an unfinished entity\n        return 0;\n    }\n\n    String entityText = input.subSequence(entityStart, semiColonIndex + 1).toString();\n\n    int entityValue;\n    try {\n        if (entityText.length() > 3 && entityText.charAt(1) == 'x') {\n            entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1), 16);\n        } else {\n            entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1));\n        }\n    } catch (NumberFormatException nfe) {\n        // The input is invalid\n        return 0;\n    }\n\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n\n    return semiColonIndex - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..ce62a456 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,53 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int seqEnd = input.length();\n+    final int entityStart = index;\n+    int semiColonIndex = -1; // Index of the semicolon\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n+    // Find the end of the entity\n+    for (int i = index + 1; i < seqEnd; i++) {\n+        char c = input.charAt(i);\n+        if (c == ';') {\n+            semiColonIndex = i;\n+            break;\n+        }\n+        if (c < '0' || c > '9') {\n+            if (i == index + 2 && (c == 'x' || c == 'X')) {\n+                continue;\n             }\n+            return 0; // Invalid input\n+        }\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    if (semiColonIndex == -1) {\n+        // The input ends with an unfinished entity\n+        return 0;\n+    }\n \n+    String entityText = input.subSequence(entityStart, semiColonIndex + 1).toString();\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+    int entityValue;\n+    try {\n+        if (entityText.length() > 3 && entityText.charAt(1) == 'x') {\n+            entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1), 16);\n+        } else {\n+            entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1));\n         }\n+    } catch (NumberFormatException nfe) {\n+        // The input is invalid\n         return 0;\n     }\n+\n+    if (entityValue > 0xFFFF) {\n+        char[] chrs = Character.toChars(entityValue);\n+        out.write(chrs[0]);\n+        out.write(chrs[1]);\n+    } else {\n+        out.write(entityValue);\n+    }\n+\n+    return semiColonIndex - index + 1;\n+}\n }",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: -1",
    "test_result": "FAIL"
}