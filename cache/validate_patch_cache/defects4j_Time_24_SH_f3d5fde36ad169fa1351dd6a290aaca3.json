{
    "patch": "boolean adjusted = false;\ntry {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (millis > 0 && newMillis < 0 || millis < 0 && newMillis > 0) {\n            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n        }\n        if (!adjusted && newMillis != millis) {\n            adjusted = true;\n            if (iSavedFieldsShared) {\n                iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n                iSavedFieldsShared = false;\n            }\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[i].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                millis = computeMillis(resetFields, text); // reset millis to recomputed value\n                continue; // recompute newMillis for the same index\n            }\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9755c526 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,37 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+boolean adjusted = false;\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (millis > 0 && newMillis < 0 || millis < 0 && newMillis > 0) {\n+            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+        }\n+        if (!adjusted && newMillis != millis) {\n+            adjusted = true;\n+            if (iSavedFieldsShared) {\n+                iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+                iSavedFieldsShared = false;\n+            }\n+            // alter base year for parsing if first field is month or day\n+            DurationField months = DurationFieldType.months().getField(iChrono);\n+            DurationField days = DurationFieldType.days().getField(iChrono);\n+            DurationField first = savedFields[i].iField.getDurationField();\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                millis = computeMillis(resetFields, text); // reset millis to recomputed value\n+                continue; // recompute newMillis for the same index\n+            }\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: The datetime is too large to be represented",
    "test_result": "FAIL"
}