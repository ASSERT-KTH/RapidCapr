{
    "patch": "public double getTypedPercent(List<JSONSection> sections) {\n    double typedChars = 0;\n    double totalChars = 0;\n    for (int i = 0; i < sections.size(); i++) {\n        JSONSection section = sections.get(i);\n        if (section.getType() == Type.TYPED) {\n            typedChars += section.getText().length();\n        }\n        totalChars += section.getText().length();\n    }\n    if (totalChars == 0) {\n        return 0;\n    }\n    return (typedChars / totalChars) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7a997cb2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(List<JSONSection> sections) {\n+    double typedChars = 0;\n+    double totalChars = 0;\n+    for (int i = 0; i < sections.size(); i++) {\n+        JSONSection section = sections.get(i);\n+        if (section.getType() == Type.TYPED) {\n+            typedChars += section.getText().length();\n+        }\n+        totalChars += section.getText().length();\n+    }\n+    if (totalChars == 0) {\n+        return 0;\n+    }\n+    return (typedChars / totalChars) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}