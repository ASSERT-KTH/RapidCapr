{
    "patch": "            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null) {\n                field.setAccessible(true);\n                try {\n                    if (isFinal(field)) {\n                        Object previousValue = replaceFinalField(field, fieldInstance, mockCandidate);\n                        mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n                        if (mockCandidate == null) {\n                            mockCandidate = previousValue;\n                        }\n                    }\n                    if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                        field.set(fieldInstance, mockCandidate);\n                        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                            innerField.setAccessible(true);\n                            Object innerFieldInstance = innerField.get(mockCandidate);\n                            Object candidate = mockCandidateFilter.filterCandidate(mocks, innerField, innerFieldInstance).thenInject();\n                            if (candidate != null && innerField.getType().isAssignableFrom(candidate.getClass())) {\n                                innerField.set(mockCandidate, candidate);\n                            }\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..dc455fcd6 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,35 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null) {\n+                field.setAccessible(true);\n+                try {\n+                    if (isFinal(field)) {\n+                        Object previousValue = replaceFinalField(field, fieldInstance, mockCandidate);\n+                        mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+                        if (mockCandidate == null) {\n+                            mockCandidate = previousValue;\n+                        }\n+                    }\n+                    if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                        field.set(fieldInstance, mockCandidate);\n+                        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                            innerField.setAccessible(true);\n+                            Object innerFieldInstance = innerField.get(mockCandidate);\n+                            Object candidate = mockCandidateFilter.filterCandidate(mocks, innerField, innerFieldInstance).thenInject();\n+                            if (candidate != null && innerField.getType().isAssignableFrom(candidate.getClass())) {\n+                                innerField.set(mockCandidate, candidate);\n+                            }\n+                        }\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}