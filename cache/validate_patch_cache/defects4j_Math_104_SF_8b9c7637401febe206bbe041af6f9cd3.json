{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.stat.inference.TestUtils;\n\npublic class GammaFunction {\n    /**\n     * Compute the regularized gamma function P(a, x).\n     *\n     * @param a the scale parameter.\n     * @param x the value at which to evaluate the function.\n     * @return the regularized gamma function P(a, x).\n     */\n    public static double regularizedGamma(double a, double x) {\n        double epsilon = 10e-15;\n        double sum = 0.0;\n        int n = 0;\n        double term = Math.pow(x, a) * Math.exp(-x) / Gamma.gamma(a + 1.0);\n\n        while (Math.abs(term) > epsilon) {\n            sum += term;\n            n++;\n            term = Math.pow(x, a + n) * Math.exp(-x) / (Gamma.gamma(a + n + 1.0) * (a + n));\n        }\n\n        return sum;\n    }\n\n    /**\n     * Main method for testing the implementation.\n     *\n     * @param args command line arguments\n     */\n    public static void main(String[] args) {\n        double x = 2.0;\n        double a = 1.5;\n\n        double expected = 0.632120558828558;\n        double actualP = GammaFunction.regularizedGamma(a, x);\n\n        TestUtils.assertEquals(expected, actualP, 10e-15);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..01118e487 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,47 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.stat.inference.TestUtils;\n+\n+public class GammaFunction {\n+    /**\n+     * Compute the regularized gamma function P(a, x).\n+     *\n+     * @param a the scale parameter.\n+     * @param x the value at which to evaluate the function.\n+     * @return the regularized gamma function P(a, x).\n+     */\n+    public static double regularizedGamma(double a, double x) {\n+        double epsilon = 10e-15;\n+        double sum = 0.0;\n+        int n = 0;\n+        double term = Math.pow(x, a) * Math.exp(-x) / Gamma.gamma(a + 1.0);\n+\n+        while (Math.abs(term) > epsilon) {\n+            sum += term;\n+            n++;\n+            term = Math.pow(x, a + n) * Math.exp(-x) / (Gamma.gamma(a + n + 1.0) * (a + n));\n+        }\n+\n+        return sum;\n+    }\n+\n+    /**\n+     * Main method for testing the implementation.\n+     *\n+     * @param args command line arguments\n+     */\n+    public static void main(String[] args) {\n+        double x = 2.0;\n+        double a = 1.5;\n+\n+        double expected = 0.632120558828558;\n+        double actualP = GammaFunction.regularizedGamma(a, x);\n+\n+        TestUtils.assertEquals(expected, actualP, 10e-15);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}