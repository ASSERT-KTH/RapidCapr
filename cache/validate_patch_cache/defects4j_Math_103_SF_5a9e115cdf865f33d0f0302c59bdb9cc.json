{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Input is NaN\");\n    }\n    if (Double.isInfinite(x)) {\n        return x < 0 ? 0.0 : 1.0;\n    }\n    if (x > mean + 40.0 * standardDeviation) {\n        return 1.0;\n    }\n    if (x < mean - 40.0 * standardDeviation) {\n        return 0.0;\n    }\n    double dev = (x - mean) / standardDeviation;\n    double ret = Erf.erf(dev / Math.sqrt(2.0));\n    ret = 0.5d * (1d + ret);\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..6a8394ae4 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,24 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Input is NaN\");\n     }\n+    if (Double.isInfinite(x)) {\n+        return x < 0 ? 0.0 : 1.0;\n+    }\n+    if (x > mean + 40.0 * standardDeviation) {\n+        return 1.0;\n+    }\n+    if (x < mean - 40.0 * standardDeviation) {\n+        return 0.0;\n+    }\n+    double dev = (x - mean) / standardDeviation;\n+    double ret = Erf.erf(dev / Math.sqrt(2.0));\n+    ret = 0.5d * (1d + ret);\n+    return ret;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded",
    "test_result": "FAIL"
}