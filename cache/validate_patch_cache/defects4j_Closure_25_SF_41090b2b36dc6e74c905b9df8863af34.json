{
    "patch": "@Test\n  public void testBackwardsInferenceNew() {\n    String js = lines(\n        \"class Foo {}\",\n        \"class Bar extends Foo {}\",\n        \"\",\n        \"/** @interface */\",\n        \"function Baz() {}\",\n        \"Baz.prototype.qux = function() {};\",\n        \"\",\n        \"function test() {\",\n        \"  var x;\",\n        \"  if (true) {\",\n        \"    x = Foo;\",\n        \"  } else {\",\n        \"    x = Bar;\",\n        \"  }\",\n        \"\",\n        \"  if (true) {\",\n        \"    x = /** @type {!Foo} */ (new x());\",\n        \"  } else {\",\n        \"    x = /** @type {!Bar} */ (new x());\",\n        \"  }\",\n        \"\",\n        \"  if (true) {\",\n        \"    x = /** @type {!Baz} */ (new x());\",\n        \"  }\",\n        \"\",\n        \"  x.qux();\",\n        \"}\",\n        \"\",\n        \"test();\");\n    testSame(js);\n    assertThat(lastCompiler.getWarnings().getMessages()).isEmpty();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..e4efdd57 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,40 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n+@Test\n+  public void testBackwardsInferenceNew() {\n+    String js = lines(\n+        \"class Foo {}\",\n+        \"class Bar extends Foo {}\",\n+        \"\",\n+        \"/** @interface */\",\n+        \"function Baz() {}\",\n+        \"Baz.prototype.qux = function() {};\",\n+        \"\",\n+        \"function test() {\",\n+        \"  var x;\",\n+        \"  if (true) {\",\n+        \"    x = Foo;\",\n+        \"  } else {\",\n+        \"    x = Bar;\",\n+        \"  }\",\n+        \"\",\n+        \"  if (true) {\",\n+        \"    x = /** @type {!Foo} */ (new x());\",\n+        \"  } else {\",\n+        \"    x = /** @type {!Bar} */ (new x());\",\n+        \"  }\",\n+        \"\",\n+        \"  if (true) {\",\n+        \"    x = /** @type {!Baz} */ (new x());\",\n+        \"  }\",\n+        \"\",\n+        \"  x.qux();\",\n+        \"}\",\n+        \"\",\n+        \"test();\");\n+    testSame(js);\n+    assertThat(lastCompiler.getWarnings().getMessages()).isEmpty();\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}