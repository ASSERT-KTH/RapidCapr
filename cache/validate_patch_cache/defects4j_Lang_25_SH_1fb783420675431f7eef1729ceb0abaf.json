{
    "patch": "public static String unescape(String s) throws IllegalCharsetNameException {\n    StringBuilder result = new StringBuilder(s.length());\n    int i = 0;\n    while (i < s.length()) {\n        char c = s.charAt(i);\n        if (c == '\\\\') {\n            i++;\n            if (i >= s.length()) {\n                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + s.substring(i-1));\n            }\n            c = s.charAt(i);\n            if (c == 'n') {\n                result.append('\\n');\n            } else if (c == 'r') {\n                result.append('\\r');\n            } else if (c == 't') {\n                result.append('\\t');\n            } else if (c == 'b') {\n                result.append('\\b');\n            } else if (c == 'f') {\n                result.append('\\f');\n            } else if (c == '\\\"' || c == '\\'' || c == '\\\\') {\n                result.append(c);\n            } else if (c >= '0' && c <= '7') {\n                char o1 = c;\n                i++;\n                if (i >= s.length()) {\n                    throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + s.substring(i-2));\n                }\n                c = s.charAt(i);\n                if (c >= '0' && c <= '7') {\n                    char o2 = c;\n                    i++;\n                    if (i >= s.length()) {\n                        throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + s.substring(i-3));\n                    }\n                    c = s.charAt(i);\n                    if (c >= '0' && c <= '7') {\n                        int code = ((o1 - '0') * 64) + ((o2 - '0') * 8) + (c - '0');\n                        result.append((char) code);\n                    } else {\n                        throw new IllegalArgumentException(\"Invalid octal escape sequence: \\\\\" + o1 + o2 + c);\n                    }\n                } else {\n                    int code = (o1 - '0') * 8 + (c - '0');\n                    result.append((char) code);\n                }\n            } else if (c == 'u' || c == 'x') {\n                boolean isUnary = c == 'u';\n                int length = isUnary ? 4 : 2;\n                int code = 0;\n                for (int j = 0; j < length; j++) {\n                    i++;\n                    if (i >= s.length()) {\n                        throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + s.substring(i-1));\n                    }\n                    c = s.charAt(i);\n                    int digit;\n                    if (c >= '0' && c <= '9') {\n                        digit = c - '0';\n                    } else if (c >= 'a' && c <= 'f') {\n                        digit = c - 'a' + 10;\n                    } else if (c >= 'A' && c <= 'F') {\n                        digit = c - 'A' + 10;\n                    } else {\n                        throw new IllegalArgumentException(\"Invalid hexadecimal digit in escape sequence: \" + c);\n                    }\n                    code = (code << 4) + digit;\n                }\n                result.append((char) code);\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + c);\n            }\n        } else {\n            result.append(c);\n        }\n        i++;\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}