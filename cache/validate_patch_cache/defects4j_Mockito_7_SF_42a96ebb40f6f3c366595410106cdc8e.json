{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument;\n    if (typeVariable instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n        if (actualTypeArguments.length > 0) {\n            actualTypeArgument = actualTypeArguments[0];\n        } else {\n            // resolve recursively if actualTypeArguments are empty\n            Type[] upperBounds = ((TypeVariable<?>) typeVariable).getBounds();\n            if (upperBounds.length > 0) {\n                actualTypeArgument = upperBounds[0];\n                new TypeVariableProcessor(actualTypeArgument, registerTypeVariablesOn).process();\n                return;\n            } else {\n                // fallback to Object\n                actualTypeArgument = Object.class;\n            }\n        }\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..031c1c07f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument;\n+    if (typeVariable instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n+        if (actualTypeArguments.length > 0) {\n+            actualTypeArgument = actualTypeArguments[0];\n+        } else {\n+            // resolve recursively if actualTypeArguments are empty\n+            Type[] upperBounds = ((TypeVariable<?>) typeVariable).getBounds();\n+            if (upperBounds.length > 0) {\n+                actualTypeArgument = upperBounds[0];\n+                new TypeVariableProcessor(actualTypeArgument, registerTypeVariablesOn).process();\n+                return;\n+            } else {\n+                // fallback to Object\n+                actualTypeArgument = Object.class;\n+            }\n+        }\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}