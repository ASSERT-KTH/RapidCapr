{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    // Get type information for constructor function\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    \n    // Get type information for constructor arguments\n    if (constructor != null) {\n      Node arg = constructor.getNext();\n      if (arg != null) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null) {\n          FunctionType.ParameterTypeIterator iter = ct.getParameterTypeIter();\n          while (iter.hasNext() && arg != null) {\n            JSType argType = iter.next();\n            if (argType != null) {\n              scope = traverse(arg, scope).inferSlotType(\"new\", argType, null);\n            }\n            arg = arg.getNext();\n          }\n        }\n      }\n    }\n\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..9c5875c6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,8 +1033,9 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n+\n+    // Get type information for constructor function\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n@@ -1056,9 +1057,25 @@ class TypeInference\n       }\n     }\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    \n+    // Get type information for constructor arguments\n+    if (constructor != null) {\n+      Node arg = constructor.getNext();\n+      if (arg != null) {\n+        FunctionType ct = constructorType.toMaybeFunctionType();\n+        if (ct != null) {\n+          FunctionType.ParameterTypeIterator iter = ct.getParameterTypeIter();\n+          while (iter.hasNext() && arg != null) {\n+            JSType argType = iter.next();\n+            if (argType != null) {\n+              scope = traverse(arg, scope).inferSlotType(\"new\", argType, null);\n+            }\n+            arg = arg.getNext();\n+          }\n+        }\n+      }\n     }\n+\n     return scope;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}