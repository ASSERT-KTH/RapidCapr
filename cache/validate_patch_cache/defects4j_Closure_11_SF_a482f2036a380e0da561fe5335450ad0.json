{
    "patch": "public static String getprop(String property) {\n    Process p;\n    String result = \"\";\n    try {\n        p = Runtime.getRuntime()\n                .exec(\"getprop \" + property);\n        p.waitFor();\n        InputStream inStream = p.getInputStream();\n        byte[] buffer = new byte[1024];\n        while (inStream.read(buffer) != -1) {\n            result += new String(buffer);\n        }\n        inStream.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    return result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..1ef97a16 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String property) {\n+    Process p;\n+    String result = \"\";\n+    try {\n+        p = Runtime.getRuntime()\n+                .exec(\"getprop \" + property);\n+        p.waitFor();\n+        InputStream inStream = p.getInputStream();\n+        byte[] buffer = new byte[1024];\n+        while (inStream.read(buffer) != -1) {\n+            result += new String(buffer);\n+        }\n+        inStream.close();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    } catch (InterruptedException e) {\n+        e.printStackTrace();\n+    }\n+    return result.trim();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}