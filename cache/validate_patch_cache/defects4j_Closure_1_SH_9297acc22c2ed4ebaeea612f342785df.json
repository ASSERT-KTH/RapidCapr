{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor(){\n        @Override\n        public void visit(Node node) {\n            // Remove the parameter if it is unused.\n            if (node.isParamList()) {\n                Node current = node.getFirstChild();\n                while (current != null) {\n                    Node next = current.getNext();\n                    if (!NodeUtil.isNameReferenced(function, current.getString())) {\n                        current.detach();\n                        compiler.reportCodeChange();\n                    }\n                    current = next;\n                }\n            }\n        }\n    });\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6990b4cf 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    Node function = fnScope.getRootNode();\n+    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor(){\n+        @Override\n+        public void visit(Node node) {\n+            // Remove the parameter if it is unused.\n+            if (node.isParamList()) {\n+                Node current = node.getFirstChild();\n+                while (current != null) {\n+                    Node next = current.getNext();\n+                    if (!NodeUtil.isNameReferenced(function, current.getString())) {\n+                        current.detach();\n+                        compiler.reportCodeChange();\n+                    }\n+                    current = next;\n+                }\n+            }\n+        }\n+    });\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}