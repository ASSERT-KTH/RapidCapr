{
    "patch": "if (topType.isUnknownType()) {\n    return getNativeType(ARRAY_TYPE);\n} else if (topType.isUnionType()) {\n    JSType trueType = null;\n    for (JSType type : topType.getUnionMembers()) {\n        if (type.isUnknownType()) {\n            trueType = getNativeType(ARRAY_TYPE);\n        } else {\n            trueType = type;\n        }\n        if (trueType.isSubtypeOf(getNativeType(ARRAY_TYPE))) {\n            return trueType;\n        }\n    }\n} else if (topType.isSubtypeOf(getNativeType(ARRAY_TYPE))) {\n    return topType;\n}\nreturn null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..878c5a80 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -51,7 +51,24 @@ public class ClosureReverseAbstractInterpreter\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n-          return topType;\n+if (topType.isUnknownType()) {\n+    return getNativeType(ARRAY_TYPE);\n+} else if (topType.isUnionType()) {\n+    JSType trueType = null;\n+    for (JSType type : topType.getUnionMembers()) {\n+        if (type.isUnknownType()) {\n+            trueType = getNativeType(ARRAY_TYPE);\n+        } else {\n+            trueType = type;\n+        }\n+        if (trueType.isSubtypeOf(getNativeType(ARRAY_TYPE))) {\n+            return trueType;\n+        }\n+    }\n+} else if (topType.isSubtypeOf(getNativeType(ARRAY_TYPE))) {\n+    return topType;\n+}\n+return null;\n         }\n \n         @Override",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}