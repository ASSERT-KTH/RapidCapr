{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - initialOffset;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (initialOffset == offsetAdjusted) {\n        return initialOffset;\n    }\n\n    final long nextTransition = nextTransition(instantAdjusted);\n\n    if (nextTransition == instantAdjusted) {\n        return initialOffset;\n    }\n\n    final int offsetAtTransition = getOffset(nextTransition);\n\n    // Check if the instant is in a gap after a DST transition\n    if (initialOffset > offsetAdjusted && initialOffset > offsetAtTransition) {\n        if (isInGap(nextTransition, instantLocal)) {\n            return offsetAdjusted;\n        }\n        return initialOffset;\n    }\n\n    // Check if the instant is in an overlap after a DST transition\n    if (offsetAdjusted > initialOffset && offsetAdjusted < offsetAtTransition) {\n        if (!isInGap(nextTransition, instantAdjusted)) {\n            return offsetAdjusted;\n        }\n    }\n\n    return offsetAtTransition;\n}\n\n/**\n * Checks if an instant is in a DST gap.\n *\n * @param nextTransition The next DST transition time.\n * @param instant The instant to be checked.\n * @return True if in gap.\n */\nprivate boolean isInGap(long nextTransition, long instant) {\n    long previousTransition = previousTransition(nextTransition);\n    int offsetBefore = getOffset(previousTransition);\n    int offsetAfter = getOffset(nextTransition);\n\n    // Check if there is a gap at this transition\n    if (offsetBefore > offsetAfter) {\n        // Check if the instant falls within the gap\n        if ((instant >= nextTransition - offsetAfter) && (instant < nextTransition - offsetBefore)) {\n            return true;\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..35c38410 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,64 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - initialOffset;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (initialOffset == offsetAdjusted) {\n+        return initialOffset;\n+    }\n+\n+    final long nextTransition = nextTransition(instantAdjusted);\n+\n+    if (nextTransition == instantAdjusted) {\n+        return initialOffset;\n+    }\n+\n+    final int offsetAtTransition = getOffset(nextTransition);\n+\n+    // Check if the instant is in a gap after a DST transition\n+    if (initialOffset > offsetAdjusted && initialOffset > offsetAtTransition) {\n+        if (isInGap(nextTransition, instantLocal)) {\n+            return offsetAdjusted;\n         }\n-        return offsetAdjusted;\n+        return initialOffset;\n     }\n \n+    // Check if the instant is in an overlap after a DST transition\n+    if (offsetAdjusted > initialOffset && offsetAdjusted < offsetAtTransition) {\n+        if (!isInGap(nextTransition, instantAdjusted)) {\n+            return offsetAdjusted;\n+        }\n+    }\n+\n+    return offsetAtTransition;\n+}\n+\n+/**\n+ * Checks if an instant is in a DST gap.\n+ *\n+ * @param nextTransition The next DST transition time.\n+ * @param instant The instant to be checked.\n+ * @return True if in gap.\n+ */\n+private boolean isInGap(long nextTransition, long instant) {\n+    long previousTransition = previousTransition(nextTransition);\n+    int offsetBefore = getOffset(previousTransition);\n+    int offsetAfter = getOffset(nextTransition);\n+\n+    // Check if there is a gap at this transition\n+    if (offsetBefore > offsetAfter) {\n+        // Check if the instant falls within the gap\n+        if ((instant >= nextTransition - offsetAfter) && (instant < nextTransition - offsetBefore)) {\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}