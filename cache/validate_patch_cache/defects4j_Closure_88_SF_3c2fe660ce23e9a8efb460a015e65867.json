{
    "patch": "  /**\n   * Returns whether the given variable is read before it is killed in the\n   * given node.\n   *\n   * @param n The node to check\n   * @param variable The name of the variable to check\n   * @return Whether the variable is read before it is killed\n   */\n  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      Node parent = n.getParent();\n      if (parent.isVar()) {\n        // The variable is killed before being read if it is assigned to\n        Node initializer = n.getFirstChild();\n        return initializer == null ? VariableLiveness.KILL : VariableLiveness.READ;\n      } else if (NodeUtil.isLhs(n, parent)) {\n        // The expression to which the assignment is made is evaluated\n        // before the RHS is evaluated (normal left to right evaluation).\n        // Therefore, if the name node is on the LHS,\n        // reading it will not provide the old value of the variable.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n        return VariableLiveness.MAYBE_LIVE;\n      }\n\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..5bc9faec 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,27 +320,39 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+  /**\n+   * Returns whether the given variable is read before it is killed in the\n+   * given node.\n+   *\n+   * @param n The node to check\n+   * @param variable The name of the variable to check\n+   * @return Whether the variable is read before it is killed\n+   */\n+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n+      Node parent = n.getParent();\n+      if (parent.isVar()) {\n+        // The variable is killed before being read if it is assigned to\n+        Node initializer = n.getFirstChild();\n+        return initializer == null ? VariableLiveness.KILL : VariableLiveness.READ;\n+      } else if (NodeUtil.isLhs(n, parent)) {\n+        // The expression to which the assignment is made is evaluated\n+        // before the RHS is evaluated (normal left to right evaluation).\n+        // Therefore, if the name node is on the LHS,\n+        // reading it will not provide the old value of the variable.\n         return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n       }\n     }\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+        return VariableLiveness.MAYBE_LIVE;\n+      }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n+      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+      if (state != VariableLiveness.MAYBE_LIVE) {\n+        return state;\n       }\n     }\n     return VariableLiveness.MAYBE_LIVE;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}