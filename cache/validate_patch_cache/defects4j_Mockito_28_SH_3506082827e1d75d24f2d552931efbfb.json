{
    "patch": "import com.tngtech.java.junit.dataprovider.DataProviderRunner;\nimport org.hamcrest.StringDescription;\nimport org.junit.runner.RunWith;\n\n...\n\n    private boolean toStringEquals(Matcher m, Object arg) {\n        return StringDescription.asString(m).equals(arg == null ? \"null\" : arg.toString());\n    }\n\n    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            List<MockCandidate> mockCandidateList = mockCandidateFilter.filterCandidates(mocks, field, fieldInstance);\n            if (!mockCandidateList.isEmpty()) {\n                Collections.sort(mockCandidateList);\n                mockCandidateList.get(0).thenInject();\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..7faa7ac6c 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,29 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import org.hamcrest.StringDescription;\n+import org.junit.runner.RunWith;\n+\n+...\n+\n+    private boolean toStringEquals(Matcher m, Object arg) {\n+        return StringDescription.asString(m).equals(arg == null ? \"null\" : arg.toString());\n+    }\n+\n+    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            List<MockCandidate> mockCandidateList = mockCandidateFilter.filterCandidates(mocks, field, fieldInstance);\n+            if (!mockCandidateList.isEmpty()) {\n+                Collections.sort(mockCandidateList);\n+                mockCandidateList.get(0).thenInject();\n+                return;\n+            }\n+        }\n+    }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}