{
    "patch": "Node first = n.getFirstChild();\nif (parent.getType() == Token.EXPR_RESULT && first != null && first.getType() == Token.FUNCTION) {\n  attachLiteralTypes(first);\n  defineDeclaredFunction(first, parent);\n} else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n  handleFunctionInputs(parent);\n} else {\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.EXPR_RESULT) {\n        defineDeclaredFunction(n, parent);\n      } else if (n.getFirstChild().getType() == Token.NAME) {\n        defineDeclaredFunction(n.getFirstChild(), n);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      if (n.hasChildren() && n.getFirstChild().getType() == Token.NAME) {\n        defineVar(n.getFirstChild(), n);\n      }\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..cbbc7640 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,32 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+Node first = n.getFirstChild();\n+if (parent.getType() == Token.EXPR_RESULT && first != null && first.getType() == Token.FUNCTION) {\n+  attachLiteralTypes(first);\n+  defineDeclaredFunction(first, parent);\n+} else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+  handleFunctionInputs(parent);\n+} else {\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent.getType() == Token.EXPR_RESULT) {\n+        defineDeclaredFunction(n, parent);\n+      } else if (n.getFirstChild().getType() == Token.NAME) {\n+        defineDeclaredFunction(n.getFirstChild(), n);\n       }\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      if (n.hasChildren() && n.getFirstChild().getType() == Token.NAME) {\n+        defineVar(n.getFirstChild(), n);\n+      }\n+      break;\n+  }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}