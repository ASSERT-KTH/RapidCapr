{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          JSType returnType = ct.getReturnType();\n          if (returnType == null || returnType.isEmptyType()) {\n            type = ct.getInstanceType();\n          } else {\n            JSType[] params = new JSType[ct.getMaxArity()];\n            Arrays.fill(params, getNativeType(U2U_CONSTRUCTOR_INITIALIZER_ARG_TYPE_NAME));\n            JSType keyedType = ct.getFormalType(0).getParameterType(params);\n            JSError warning = checkProperty(keyedType,\n                n.getLineno(), CheckLevel.WARNING, \"No properties on this expression\");\n            if (warning == null) {\n              type = returnType;\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..60a920e0 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1044,14 +1044,20 @@ class TypeInference\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+          JSType returnType = ct.getReturnType();\n+          if (returnType == null || returnType.isEmptyType()) {\n+            type = ct.getInstanceType();\n+          } else {\n+            JSType[] params = new JSType[ct.getMaxArity()];\n+            Arrays.fill(params, getNativeType(U2U_CONSTRUCTOR_INITIALIZER_ARG_TYPE_NAME));\n+            JSType keyedType = ct.getFormalType(0).getParameterType(params);\n+            JSError warning = checkProperty(keyedType,\n+                n.getLineno(), CheckLevel.WARNING, \"No properties on this expression\");\n+            if (warning == null) {\n+              type = returnType;\n+            }\n+          }\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}