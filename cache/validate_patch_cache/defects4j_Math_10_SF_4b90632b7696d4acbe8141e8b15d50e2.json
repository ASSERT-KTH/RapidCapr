{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // check for NaN\n        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n            for (int i = 0; i < getSize(); i++) {\n                result[resultOffset + i] = Double.NaN;\n            }\n            return;\n        }\n\n        // check for special cases\n        if (x[xOffset] == 0 && y[yOffset] == 0) {\n            // set the result to 0\n            for (int i = 0; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        }\n        if (x[xOffset] == 0) {\n            // set the result to pi/2 with the correct sign\n            result[resultOffset] = (y[yOffset] >= 0 ? 1 : -1) * FastMath.PI / 2;\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        }\n        if (y[yOffset] == 0) {\n            // set the result to zero with the correct sign\n            result[resultOffset] = (x[xOffset] >= 0 ? 0 : FastMath.PI);\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        }\n        if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n            // set the result to pi/2 with the correct sign\n            result[resultOffset] = (y[yOffset] >= 0 ? 1 : -1) * FastMath.PI / 2;\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            double tmp = ((tmp2[0] <= 0) ? -1 : 1);\n            result[resultOffset] = tmp * FastMath.PI - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..75fb43dbe 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1383,6 +1383,47 @@ public class DSCompiler {\n                       final double[] x, final int xOffset,\n                       final double[] result, final int resultOffset) {\n \n+        // check for NaN\n+        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+            for (int i = 0; i < getSize(); i++) {\n+                result[resultOffset + i] = Double.NaN;\n+            }\n+            return;\n+        }\n+\n+        // check for special cases\n+        if (x[xOffset] == 0 && y[yOffset] == 0) {\n+            // set the result to 0\n+            for (int i = 0; i < getSize(); ++i) {\n+                result[resultOffset + i] = 0;\n+            }\n+            return;\n+        }\n+        if (x[xOffset] == 0) {\n+            // set the result to pi/2 with the correct sign\n+            result[resultOffset] = (y[yOffset] >= 0 ? 1 : -1) * FastMath.PI / 2;\n+            for (int i = 1; i < getSize(); ++i) {\n+                result[resultOffset + i] = 0;\n+            }\n+            return;\n+        }\n+        if (y[yOffset] == 0) {\n+            // set the result to zero with the correct sign\n+            result[resultOffset] = (x[xOffset] >= 0 ? 0 : FastMath.PI);\n+            for (int i = 1; i < getSize(); ++i) {\n+                result[resultOffset + i] = 0;\n+            }\n+            return;\n+        }\n+        if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n+            // set the result to pi/2 with the correct sign\n+            result[resultOffset] = (y[yOffset] >= 0 ? 1 : -1) * FastMath.PI / 2;\n+            for (int i = 1; i < getSize(); ++i) {\n+                result[resultOffset + i] = 0;\n+            }\n+            return;\n+        }\n+\n         // compute r = sqrt(x^2+y^2)\n         double[] tmp1 = new double[getSize()];\n         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n@@ -1407,16 +1448,14 @@ public class DSCompiler {\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+            double tmp = ((tmp2[0] <= 0) ? -1 : 1);\n+            result[resultOffset] = tmp * FastMath.PI - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n             for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+                result[resultOffset + i] = -2 * tmp * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n             }\n \n         }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n-\n     }\n \n     /** Compute hyperbolic cosine of a derivative structure.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}