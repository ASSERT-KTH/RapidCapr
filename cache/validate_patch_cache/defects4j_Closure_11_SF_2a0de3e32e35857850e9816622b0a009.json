{
    "patch": "public static String getProperty(String key, String defaultValue) {\n    String value = null;\n    try {\n        value = System.getProperty(key, defaultValue);\n        if (value == null || value.trim().length() == 0) {\n            value = defaultValue;\n            String[] warnings = {\"Property value not set, using default value: \" + defaultValue};\n            System.err.println(warnings[0]);\n        }\n    } catch (SecurityException e) {\n        value = defaultValue;\n        String[] warnings = {\"Caught SecurityException reading system property '\" + key + \"', using default value: \" + defaultValue};\n        System.err.println(warnings[0]);\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..0a4df2c0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key, String defaultValue) {\n+    String value = null;\n+    try {\n+        value = System.getProperty(key, defaultValue);\n+        if (value == null || value.trim().length() == 0) {\n+            value = defaultValue;\n+            String[] warnings = {\"Property value not set, using default value: \" + defaultValue};\n+            System.err.println(warnings[0]);\n+        }\n+    } catch (SecurityException e) {\n+        value = defaultValue;\n+        String[] warnings = {\"Caught SecurityException reading system property '\" + key + \"', using default value: \" + defaultValue};\n+        System.err.println(warnings[0]);\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}