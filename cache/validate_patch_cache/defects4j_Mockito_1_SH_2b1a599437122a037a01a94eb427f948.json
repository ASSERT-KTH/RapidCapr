{
    "patch": "            if (indexOfVararg < matchers.size() - 1) {\n                throw new UnsupportedOperationException(\"vararg matcher must be the last matcher\");\n            }\n            Matcher m = matchers.get(indexOfVararg);\n            Object varargs = invocation.getRawArguments()[indexOfVararg];\n            if (m instanceof CapturesArguments) {\n                int varargsLength = Array.getLength(varargs);\n                for (int i = 0; i < varargsLength; i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(varargs, i));",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..93b538297 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,15 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (indexOfVararg < matchers.size() - 1) {\n+                throw new UnsupportedOperationException(\"vararg matcher must be the last matcher\");\n+            }\n+            Matcher m = matchers.get(indexOfVararg);\n+            Object varargs = invocation.getRawArguments()[indexOfVararg];\n+            if (m instanceof CapturesArguments) {\n+                int varargsLength = Array.getLength(varargs);\n+                for (int i = 0; i < varargsLength; i++) {\n+                    ((CapturesArguments) m).captureFrom(Array.get(varargs, i));\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}