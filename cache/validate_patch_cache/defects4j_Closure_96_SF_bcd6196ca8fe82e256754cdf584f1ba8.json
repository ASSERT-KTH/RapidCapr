{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean hasVarArgs = functionType.getRestFormal() != null;\n\n    while (arguments.hasNext() && (parameters.hasNext() || hasVarArgs)) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      if (!parameters.hasNext() && hasVarArgs) {\n        parameter = functionType.getRestFormal();\n      } else {\n        parameter = parameters.next();\n      }\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs < minArgs) {\n      report(\n          t,\n          call,\n          TYPE_MISMATCH_WARNING,\n          validator.getFunctionName(call),\n          String.valueOf(numArgs),\n          String.valueOf(minArgs),\n          String.valueOf(maxArgs));\n    } else if (maxArgs >= 0 && numArgs > maxArgs) {\n      report(\n          t,\n          call,\n          TYPE_MISMATCH_WARNING,\n          validator.getFunctionName(call),\n          String.valueOf(numArgs),\n          String.valueOf(minArgs),\n          String.valueOf(maxArgs));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..63830b74 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1404,43 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n+    boolean hasVarArgs = functionType.getRestFormal() != null;\n+\n+    while (arguments.hasNext() && (parameters.hasNext() || hasVarArgs)) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n+      if (!parameters.hasNext() && hasVarArgs) {\n+        parameter = functionType.getRestFormal();\n+      } else {\n         parameter = parameters.next();\n+      }\n       argument = arguments.next();\n       ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      validator.expectArgumentMatchesParameter(\n+          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+    if (numArgs < minArgs) {\n+      report(\n+          t,\n+          call,\n+          TYPE_MISMATCH_WARNING,\n+          validator.getFunctionName(call),\n+          String.valueOf(numArgs),\n+          String.valueOf(minArgs),\n+          String.valueOf(maxArgs));\n+    } else if (maxArgs >= 0 && numArgs > maxArgs) {\n+      report(\n+          t,\n+          call,\n+          TYPE_MISMATCH_WARNING,\n+          validator.getFunctionName(call),\n+          String.valueOf(numArgs),\n+          String.valueOf(minArgs),\n+          String.valueOf(maxArgs));\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}