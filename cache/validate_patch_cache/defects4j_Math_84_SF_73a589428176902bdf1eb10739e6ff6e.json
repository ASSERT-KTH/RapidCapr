{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // perform a contraction step\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                contractedSimplex[0] = best;\n                for (int i = 1; i < original.length; i++) {\n                    final double[] contractedPoint = new double[original[i].getPoint().length];\n                    for (int j = 0; j < contractedPoint.length; j++) {\n                        contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n                    }\n                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n                }\n                final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex;\n                } else {\n                    // perform a shrinking step\n                    for (int i = 1; i < original.length; i++) {\n                        final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[original.length];\n                        shrunkSimplex[0] = best;\n                        final double[] shrunkPoint = new double[original[i].getPoint().length];\n                        for (int j = 0; j < shrunkPoint.length; j++) {\n                            shrunkPoint[j] = sigma * original[i].getPoint()[j] + (1 - sigma) * best.getPoint()[j];\n                        }\n                        shrunkSimplex[i] = new RealPointValuePair(shrunkPoint, Double.NaN);\n                        simplex = evaluateNewSimplex(shrunkSimplex, 1.0, comparator);\n                        if (comparator.compare(simplex[0], best) < 0) {\n                            // accept the shrunk simplex\n                            break;\n                        }\n                    }\n                }\n            }\n            return;\n        }\n\n        // perform a contraction step\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n        contractedSimplex[0] = best;\n        for (int i = 1; i < original.length; i++) {\n            final double[] contractedPoint = new double[original[i].getPoint().length];\n            for (int j = 0; j < contractedPoint.length; j++) {\n                contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n            }\n            contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n        }\n        final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = contractedSimplex;\n            return;\n        }\n\n        // perform a shrinking step\n        for (int i = 1; i < original.length; i++) {\n            final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[original.length];\n            shrunkSimplex[0] = best;\n            final double[] shrunkPoint = new double[original[i].getPoint().length];\n            for (int j = 0; j < shrunkPoint.length; j++) {\n                shrunkPoint[j] = sigma * original[i].getPoint()[j] + (1 - sigma) * best.getPoint()[j];\n            }\n            shrunkSimplex[i] = new RealPointValuePair(shrunkPoint, Double.NaN);\n            simplex = evaluateNewSimplex(shrunkSimplex, 1.0, comparator);\n            if (comparator.compare(simplex[0], best) < 0) {\n                // accept the shrunk simplex\n                break;\n            }\n        }\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..82ea63f32 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,97 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // perform a contraction step\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                contractedSimplex[0] = best;\n+                for (int i = 1; i < original.length; i++) {\n+                    final double[] contractedPoint = new double[original[i].getPoint().length];\n+                    for (int j = 0; j < contractedPoint.length; j++) {\n+                        contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n+                    }\n+                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+                }\n+                final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contractedSimplex;\n+                } else {\n+                    // perform a shrinking step\n+                    for (int i = 1; i < original.length; i++) {\n+                        final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[original.length];\n+                        shrunkSimplex[0] = best;\n+                        final double[] shrunkPoint = new double[original[i].getPoint().length];\n+                        for (int j = 0; j < shrunkPoint.length; j++) {\n+                            shrunkPoint[j] = sigma * original[i].getPoint()[j] + (1 - sigma) * best.getPoint()[j];\n+                        }\n+                        shrunkSimplex[i] = new RealPointValuePair(shrunkPoint, Double.NaN);\n+                        simplex = evaluateNewSimplex(shrunkSimplex, 1.0, comparator);\n+                        if (comparator.compare(simplex[0], best) < 0) {\n+                            // accept the shrunk simplex\n+                            break;\n+                        }\n+                    }\n                 }\n-\n-                return;\n-\n             }\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        // perform a contraction step\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+        contractedSimplex[0] = best;\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] contractedPoint = new double[original[i].getPoint().length];\n+            for (int j = 0; j < contractedPoint.length; j++) {\n+                contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n             }\n+            contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+        }\n+        final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = contractedSimplex;\n+            return;\n+        }\n \n+        // perform a shrinking step\n+        for (int i = 1; i < original.length; i++) {\n+            final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[original.length];\n+            shrunkSimplex[0] = best;\n+            final double[] shrunkPoint = new double[original[i].getPoint().length];\n+            for (int j = 0; j < shrunkPoint.length; j++) {\n+                shrunkPoint[j] = sigma * original[i].getPoint()[j] + (1 - sigma) * best.getPoint()[j];\n+            }\n+            shrunkSimplex[i] = new RealPointValuePair(shrunkPoint, Double.NaN);\n+            simplex = evaluateNewSimplex(shrunkSimplex, 1.0, comparator);\n+            if (comparator.compare(simplex[0], best) < 0) {\n+                // accept the shrunk simplex\n+                break;\n+            }\n         }\n \n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}