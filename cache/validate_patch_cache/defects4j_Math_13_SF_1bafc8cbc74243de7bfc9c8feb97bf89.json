{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n    RealMatrix u = dec.getU();\n    RealMatrix s = dec.getS();\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        s.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n    }\n    RealMatrix sRoot = u.multiply(s).multiply(u.transpose());\n    return sRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..40acf2370 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+    RealMatrix u = dec.getU();\n+    RealMatrix s = dec.getS();\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        s.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n     }\n+    RealMatrix sRoot = u.multiply(s).multiply(u.transpose());\n+    return sRoot;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}