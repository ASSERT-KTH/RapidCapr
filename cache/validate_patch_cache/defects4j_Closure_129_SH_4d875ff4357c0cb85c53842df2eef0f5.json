{
    "patch": "// Ignore cast nodes and update first node accordingly\nif (first.isCast()) {\n  first = first.getFirstChild();\n  n.setFirstChild(first);\n  n.putBooleanProp(Node.FREE_CALL, !NodeUtil.isGet(first));\n} else if (!NodeUtil.isGet(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Keep track of the context in which eval is called\nif (first.isName() && \"eval\".equals(first.getString())) {\n  first.putBooleanProp(Node.DIRECT_EVAL, true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..b091a4e3 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,19 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// Ignore cast nodes and update first node accordingly\n+if (first.isCast()) {\n+  first = first.getFirstChild();\n+  n.setFirstChild(first);\n+  n.putBooleanProp(Node.FREE_CALL, !NodeUtil.isGet(first));\n+} else if (!NodeUtil.isGet(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Keep track of the context in which eval is called\n+if (first.isName() && \"eval\".equals(first.getString())) {\n+  first.putBooleanProp(Node.DIRECT_EVAL, true);\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}