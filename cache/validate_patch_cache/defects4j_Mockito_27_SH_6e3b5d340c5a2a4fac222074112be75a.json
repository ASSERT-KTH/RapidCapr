{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nCallback[] callbacks = ((Factory) mock).getCallbacks();\nif (callbacks == null) {\n    ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n    return;\n}\nfor (int i = 0; i < callbacks.length; i++) {\n    if (callbacks[i] instanceof MethodInterceptorFilter) {\n        callbacks[i] = newFilter;\n        ((Factory) mock).setCallbacks(callbacks);\n        return;\n    }\n}\n((Factory) mock).setCallbacks(Arrays.copyOf(callbacks, callbacks.length + 1));\n((Factory) mock).setCallback(callbacks.length, newFilter);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7f13a11d3 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+Callback[] callbacks = ((Factory) mock).getCallbacks();\n+if (callbacks == null) {\n+    ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+    return;\n+}\n+for (int i = 0; i < callbacks.length; i++) {\n+    if (callbacks[i] instanceof MethodInterceptorFilter) {\n+        callbacks[i] = newFilter;\n+        ((Factory) mock).setCallbacks(callbacks);\n+        return;\n+    }\n+}\n+((Factory) mock).setCallbacks(Arrays.copyOf(callbacks, callbacks.length + 1));\n+((Factory) mock).setCallback(callbacks.length, newFilter);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}