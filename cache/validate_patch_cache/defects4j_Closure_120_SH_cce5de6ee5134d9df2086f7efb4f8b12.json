{
    "patch": "      if (block.isFunction) {\n        // If there is a function in the reaching block, it may modify the variable too.\n        return false;\n      } else if (block.isLoop) {\n        // Loops can produce assignments different from current one;\n        // or there's a possibility of more than one execution;\n        // or a function inside a loop assigns the variable.\n        return false;\n>>> [ INFILL ] <<<",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..17d27a00 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // If there is a function in the reaching block, it may modify the variable too.\n+        return false;\n+      } else if (block.isLoop) {\n+        // Loops can produce assignments different from current one;\n+        // or there's a possibility of more than one execution;\n+        // or a function inside a loop assigns the variable.\n+        return false;\n+>>> [ INFILL ] <<<\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}