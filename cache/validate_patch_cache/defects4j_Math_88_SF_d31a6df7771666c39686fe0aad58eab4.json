{
    "patch": "        final double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        final double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n\n            // If basicRow is null, then the corresponding coefficient is 0.\n            double value = 0.0;\n            if (basicRow != null) {\n                value = getEntry(basicRow, getRhsOffset());\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    final double jthCoefficient = coefficients[j - getNumObjectiveFunctions()];\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        if (j == i && Math.abs(jthCoefficient) > 0.0) {\n                            // If multiple variables can take a given value,\n                            // we use the coefficient of the first variable.\n                            value = jthCoefficient;\n                        } else {\n                            value -= jthCoefficient * tableau.getEntry(basicRow, j);\n                        }\n                    }\n                }\n            }\n            coefficients[i] = value;\n            if (!restrictToNonNegative) {\n                coefficients[i] -= mostNegative;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..0f2cf7fba 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,32 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        final double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+        final double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+\n+            // If basicRow is null, then the corresponding coefficient is 0.\n+            double value = 0.0;\n             if (basicRow != null) {\n+                value = getEntry(basicRow, getRhsOffset());\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n+                    final double jthCoefficient = coefficients[j - getNumObjectiveFunctions()];\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                        if (j == i && Math.abs(jthCoefficient) > 0.0) {\n+                            // If multiple variables can take a given value,\n+                            // we use the coefficient of the first variable.\n+                            value = jthCoefficient;\n+                        } else {\n+                            value -= jthCoefficient * tableau.getEntry(basicRow, j);\n+                        }\n                     }\n                 }\n             }\n-        }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n-    }\n+            coefficients[i] = value;\n+            if (!restrictToNonNegative) {\n+                coefficients[i] -= mostNegative;\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}