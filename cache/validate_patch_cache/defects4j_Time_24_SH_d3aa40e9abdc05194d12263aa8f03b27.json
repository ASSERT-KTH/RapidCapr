{
    "patch": "    SavedField lastSavedField = null;\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        if (lastSavedField != null) {\n            DurationField currentField = lastSavedField.iField.getDurationField();\n            DurationField nextDurationField = savedField.iField.getDurationField();\n            boolean invalidFields = false;\n            try {\n                currentField.getDifferenceAsLong(lastSavedField.iValue, savedField.iValue);\n            } catch (ArithmeticException e) {\n                invalidFields = true;\n            }\n            if (compareReverse(currentField, nextDurationField) > 0 || invalidFields) {\n                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n            }\n        }\n        try {\n            millis = savedField.set(millis, resetFields);\n        } catch (IllegalFieldValueException e) {\n            // Year is occasionally interpreted wrong due to Gregorian Reform\n            if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n                iDefaultYear = -iDefaultYear;\n                long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n            } else if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear() && (lastSavedField == null || lastSavedField.iField.getType() == DateTimeFieldType.weekyear() || lastSavedField.iField.getDurationField().getUnitMillis() < DateTimeConstants.MILLIS_PER_WEEK)) {\n                long instant = iChrono.weekyear().roundFloor(millis);\n                int iWeekyear = savedFields[i].iField.get(instant);\n                millis = iChrono.weekyear().set(instant, iWeekyear);\n            } else if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                throw e;\n            } else {\n                throw e;\n            }\n        }\n        lastSavedField = savedField;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..214c7fe7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    SavedField lastSavedField = null;\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        if (lastSavedField != null) {\n+            DurationField currentField = lastSavedField.iField.getDurationField();\n+            DurationField nextDurationField = savedField.iField.getDurationField();\n+            boolean invalidFields = false;\n+            try {\n+                currentField.getDifferenceAsLong(lastSavedField.iValue, savedField.iValue);\n+            } catch (ArithmeticException e) {\n+                invalidFields = true;\n+            }\n+            if (compareReverse(currentField, nextDurationField) > 0 || invalidFields) {\n+                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n+            }\n+        }\n+        try {\n+            millis = savedField.set(millis, resetFields);\n+        } catch (IllegalFieldValueException e) {\n+            // Year is occasionally interpreted wrong due to Gregorian Reform\n+            if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+                iDefaultYear = -iDefaultYear;\n+                long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+            } else if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear() && (lastSavedField == null || lastSavedField.iField.getType() == DateTimeFieldType.weekyear() || lastSavedField.iField.getDurationField().getUnitMillis() < DateTimeConstants.MILLIS_PER_WEEK)) {\n+                long instant = iChrono.weekyear().roundFloor(millis);\n+                int iWeekyear = savedFields[i].iField.get(instant);\n+                millis = iChrono.weekyear().set(instant, iWeekyear);\n+            } else if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                throw e;\n+            } else {\n+                throw e;\n+            }\n+        }\n+        lastSavedField = savedField;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}