{
    "patch": "public static String unescape(String s)\n{ \n    StringBuilder sb = new StringBuilder(s.length()); \n    for (int i = 0; i < s.length(); i++)\n    { \n        char c = s.charAt(i); \n        if (c == '\\\\')\n        { \n            if (++i < s.length())\n            { \n                c = s.charAt(i); \n\n                if (c == 'n') { \n                    sb.append('\\n'); \n                } \n                else if (c == 'r') { \n                    sb.append('\\r'); \n                } \n                else if (c == 't') { \n                    sb.append('\\t'); \n                } \n                else if (c == 'f') { \n                    sb.append('\\f'); \n                } \n                else if (c == '\\\\' || c == '\\'') { \n                    sb.append(c); \n                } \n                else if (c >= '0' && c <= '7')\n                { \n                    int oct = Character.digit(c, 8); \n                    if (++i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '7')\n                    { \n                        oct = oct * 8 + Character.digit(s.charAt(i), 8); \n                    } \n                    if (++i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '7')\n                    { \n                        oct = oct * 8 + Character.digit(s.charAt(i), 8); \n                    }\n                    sb.append((char) oct); \n                    i--; \n                } \n                else if (c == 'u' && i + 4 < s.length()) { \n                    String hex = s.substring(i + 1, i + 5); \n                    try\n                    { \n                        sb.append((char) Integer.parseInt(hex, 16)); \n                    } \n                    catch (NumberFormatException e)\n                    { \n                        throw new IllegalArgumentException( \"Illegal Unicode escape sequence: \" + hex); \n                    } \n                    i += 4; \n                } \n                else { \n                    throw new IllegalArgumentException( \"Unrecognized escape character: \\\\\" + c); \n                } \n\n            } \n            else { \n                throw new IllegalArgumentException( \"Incomplete escape sequence at end of string\"); \n            } \n\n        } \n        else { \n            sb.append(c); \n        } \n    } \n    return sb.toString(); \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..8238d720 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,75 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s)\n+{ \n+    StringBuilder sb = new StringBuilder(s.length()); \n+    for (int i = 0; i < s.length(); i++)\n+    { \n+        char c = s.charAt(i); \n+        if (c == '\\\\')\n+        { \n+            if (++i < s.length())\n+            { \n+                c = s.charAt(i); \n+\n+                if (c == 'n') { \n+                    sb.append('\\n'); \n+                } \n+                else if (c == 'r') { \n+                    sb.append('\\r'); \n+                } \n+                else if (c == 't') { \n+                    sb.append('\\t'); \n+                } \n+                else if (c == 'f') { \n+                    sb.append('\\f'); \n+                } \n+                else if (c == '\\\\' || c == '\\'') { \n+                    sb.append(c); \n+                } \n+                else if (c >= '0' && c <= '7')\n+                { \n+                    int oct = Character.digit(c, 8); \n+                    if (++i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '7')\n+                    { \n+                        oct = oct * 8 + Character.digit(s.charAt(i), 8); \n+                    } \n+                    if (++i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '7')\n+                    { \n+                        oct = oct * 8 + Character.digit(s.charAt(i), 8); \n+                    }\n+                    sb.append((char) oct); \n+                    i--; \n+                } \n+                else if (c == 'u' && i + 4 < s.length()) { \n+                    String hex = s.substring(i + 1, i + 5); \n+                    try\n+                    { \n+                        sb.append((char) Integer.parseInt(hex, 16)); \n+                    } \n+                    catch (NumberFormatException e)\n+                    { \n+                        throw new IllegalArgumentException( \"Illegal Unicode escape sequence: \" + hex); \n+                    } \n+                    i += 4; \n+                } \n+                else { \n+                    throw new IllegalArgumentException( \"Unrecognized escape character: \\\\\" + c); \n+                } \n+\n+            } \n+            else { \n+                throw new IllegalArgumentException( \"Incomplete escape sequence at end of string\"); \n+            } \n+\n+        } \n+        else { \n+            sb.append(c); \n+        } \n+    } \n+    return sb.toString(); \n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}