{
    "patch": "protected BasePeriod(long duration) {\n    PeriodType periodType = PeriodType.forFields(new DurationFieldType[]{\n            DurationFieldType.years(),\n            DurationFieldType.months(),\n            DurationFieldType.weeks(),\n            DurationFieldType.days(),\n            DurationFieldType.hours(),\n            DurationFieldType.minutes(),\n            DurationFieldType.seconds(),\n            DurationFieldType.millis()\n    }).withMillisRemoved();\n\n    if (duration >= DateTimeConstants.MILLIS_PER_WEEK) {\n        periodType = periodType.withSecondsRemoved().withMinutesRemoved();\n    }\n\n    if (duration >= DateTimeConstants.MILLIS_PER_DAY) {\n        periodType = periodType.withHoursRemoved();\n    }\n\n    this(duration, periodType, null);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..32bfbeca 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,11 +218,29 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    PeriodType periodType = PeriodType.forFields(new DurationFieldType[]{\n+            DurationFieldType.years(),\n+            DurationFieldType.months(),\n+            DurationFieldType.weeks(),\n+            DurationFieldType.days(),\n+            DurationFieldType.hours(),\n+            DurationFieldType.minutes(),\n+            DurationFieldType.seconds(),\n+            DurationFieldType.millis()\n+    }).withMillisRemoved();\n+\n+    if (duration >= DateTimeConstants.MILLIS_PER_WEEK) {\n+        periodType = periodType.withSecondsRemoved().withMinutesRemoved();\n+    }\n+\n+    if (duration >= DateTimeConstants.MILLIS_PER_DAY) {\n+        periodType = periodType.withHoursRemoved();\n     }\n \n+    this(duration, periodType, null);\n+}\n+\n     /**\n      * Creates a period from the given millisecond duration, which is only really\n      * suitable for durations less than one day.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}