{
    "patch": "        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          var.removeReference(lastArg);\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          referenced.add(var);\n          var.getInferredType().use();\n          break;\n        }\n      }\n      // Add types to referenced arguments.\n      Node arg = argList.getFirstChild();\n      while (arg != null) {\n        String argName = arg.getString();\n        Var var = fnScope.getVar(argName);\n        if (referenced.contains(var)) {\n          var.getInferredType().use();\n        }\n        arg = arg.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7a6e0206 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          var.removeReference(lastArg);\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          referenced.add(var);\n+          var.getInferredType().use();\n+          break;\n+        }\n+      }\n+      // Add types to referenced arguments.\n+      Node arg = argList.getFirstChild();\n+      while (arg != null) {\n+        String argName = arg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (referenced.contains(var)) {\n+          var.getInferredType().use();\n+        }\n+        arg = arg.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}