{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden, need to increment these\n    if (meanImpl.getClass() != Mean.class) {\n        meanImpl.increment(value);\n    }\n    if (varianceImpl.getClass() != Variance.class) {\n        varianceImpl.increment(value);\n    }\n    if (geoMeanImpl.getClass() != GeometricMean.class) {\n        geoMeanImpl.increment(value);\n    }\n\n    n++;\n\n    // Handle case where n is zero\n    if (n == 0) {\n        meanImpl.clear();\n        varianceImpl.clear();\n        geoMeanImpl.clear();\n    } else if (n == 1) {\n        meanImpl.increment(value);\n        varianceImpl.increment(value);\n        geoMeanImpl.increment(value);\n    } else {\n        // Compute mean, variance, and geometric mean using the appropriate implementations\n        double mean = meanImpl.getResult();\n        double variance = varianceImpl.getResult();\n        double geoMean = geoMeanImpl.getResult();\n\n        double delta = value - mean;\n        meanImpl.increment(delta / n);\n        secondMoment.increment(delta * (value - meanImpl.getResult()));\n        varianceImpl.increment(value);\n        geoMeanImpl.increment(value);\n        geoMean = Math.exp(Math.log(geoMeanImpl.getResult()) / n);\n\n        // Update sumLogImpl and geoMeanImpl in case values were NaN\n        if (Double.isNaN(sumLogImpl.getResult())) {\n            sumLogImpl.clear();\n            for (int i = 1; i <= n; i++) {\n                sumLogImpl.increment(scores[i]);\n            }\n        }\n        if (Double.isNaN(geoMean)) {\n            geoMeanImpl.clear();\n            for (int i = 1; i <= n; i++) {\n                geoMeanImpl.increment(scores[i]);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..87d538a01 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,64 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden, need to increment these\n+    if (meanImpl.getClass() != Mean.class) {\n+        meanImpl.increment(value);\n+    }\n+    if (varianceImpl.getClass() != Variance.class) {\n+        varianceImpl.increment(value);\n+    }\n+    if (geoMeanImpl.getClass() != GeometricMean.class) {\n+        geoMeanImpl.increment(value);\n+    }\n+\n+    n++;\n+\n+    // Handle case where n is zero\n+    if (n == 0) {\n+        meanImpl.clear();\n+        varianceImpl.clear();\n+        geoMeanImpl.clear();\n+    } else if (n == 1) {\n+        meanImpl.increment(value);\n+        varianceImpl.increment(value);\n+        geoMeanImpl.increment(value);\n+    } else {\n+        // Compute mean, variance, and geometric mean using the appropriate implementations\n+        double mean = meanImpl.getResult();\n+        double variance = varianceImpl.getResult();\n+        double geoMean = geoMeanImpl.getResult();\n+\n+        double delta = value - mean;\n+        meanImpl.increment(delta / n);\n+        secondMoment.increment(delta * (value - meanImpl.getResult()));\n+        varianceImpl.increment(value);\n+        geoMeanImpl.increment(value);\n+        geoMean = Math.exp(Math.log(geoMeanImpl.getResult()) / n);\n+\n+        // Update sumLogImpl and geoMeanImpl in case values were NaN\n+        if (Double.isNaN(sumLogImpl.getResult())) {\n+            sumLogImpl.clear();\n+            for (int i = 1; i <= n; i++) {\n+                sumLogImpl.increment(scores[i]);\n+            }\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        if (Double.isNaN(geoMean)) {\n+            geoMeanImpl.clear();\n+            for (int i = 1; i <= n; i++) {\n+                geoMeanImpl.increment(scores[i]);\n+            }\n         }\n-        n++;\n     }\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}