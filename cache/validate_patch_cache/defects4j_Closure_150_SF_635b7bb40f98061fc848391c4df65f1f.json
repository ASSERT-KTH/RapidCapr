{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n\n  if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n    handleFunctionInputs(n);\n  } else {\n    Node grandparent = parent.getParent();\n    if (n.getType() == Token.FUNCTION && parent.getType() == Token.NAME) return;\n    if (n.getType() == Token.NAME && grandparent != null &&\n        NodeUtil.isFunctionExpression(n) && parent.isVar() &&\n        grandparent.getType() == Token.EXPR_RESULT) {\n      defineDeclaredFunction(parent.getFirstChild(), grandparent);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..09780be7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,43 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n+\n+  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+    handleFunctionInputs(parent);\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent.getType() == Token.NAME) {\n         return;\n       }\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+  }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+  if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n+    handleFunctionInputs(n);\n+  } else {\n+    Node grandparent = parent.getParent();\n+    if (n.getType() == Token.FUNCTION && parent.getType() == Token.NAME) return;\n+    if (n.getType() == Token.NAME && grandparent != null &&\n+        NodeUtil.isFunctionExpression(n) && parent.isVar() &&\n+        grandparent.getType() == Token.EXPR_RESULT) {\n+      defineDeclaredFunction(parent.getFirstChild(), grandparent);\n     }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}