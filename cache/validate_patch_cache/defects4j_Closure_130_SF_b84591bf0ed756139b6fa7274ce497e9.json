{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    if ((name.globalSets == 1 || name.localSets == 1) && name.getDeclaration() != null &&\n        name.aliasingGets > 0) {\n      // {@code name} meets condition (b).\n\n      // We need to capture aliases of all names in a subtree rooted at {@code name}.\n      // We keep a separate worklist for subtree root names.\n      Deque<Name> subtreeRoots = new ArrayDeque<>();\n      subtreeRoots.push(name);\n\n      // Collect aliases of all names in the subtree; add their subtree roots (if not already\n      // processed) to {@code subtreeRoots}.\n      Set<Name> seen = new HashSet<>();\n      while (!subtreeRoots.isEmpty()) {\n        Name subtreeRoot = subtreeRoots.pop();\n        // Collect all aliases of {@code subtreeRoot}.\n        subtreeRoot.addAliasesTo(seen);\n        // Add all children of {@code subtreeRoot} to {@code subtreeRoots}.\n        if (subtreeRoot.props != null) {\n          for (Name child : subtreeRoot.props) {\n            if (seen.add(child)) {\n              subtreeRoots.push(child);\n            }\n          }\n        }\n      }\n\n      // Try to inline aliases.\n      for (Name alias : seen) {\n        if (alias.type == Name.Type.OBJECTLIT || alias.type == Name.Type.FUNCTION) {\n          // We can only inline an alias of an object literal or function.\n          Ref decl = alias.getDeclaration();\n          Ref get = Iterables.getOnlyElement(alias.getRefs(Ref.Type.ALIASING_GET), null);\n          if (get != null && decl != null && inlineAlias(alias, decl, get)) {\n            // We successfully inlined an alias. Remove the corresponding Refs from\n            // {@code alias}.\n            alias.removeRef(get);\n            decl.node.removeChild(get.node);\n          }\n        }\n      }\n    }\n\n    // Check if {@code name} has any aliases left after inlining.\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..2d91998b 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,65 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+private void inlineAliases(GlobalNamespace namespace) {\n+  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+\n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    if ((name.globalSets == 1 || name.localSets == 1) && name.getDeclaration() != null &&\n+        name.aliasingGets > 0) {\n+      // {@code name} meets condition (b).\n+\n+      // We need to capture aliases of all names in a subtree rooted at {@code name}.\n+      // We keep a separate worklist for subtree root names.\n+      Deque<Name> subtreeRoots = new ArrayDeque<>();\n+      subtreeRoots.push(name);\n+\n+      // Collect aliases of all names in the subtree; add their subtree roots (if not already\n+      // processed) to {@code subtreeRoots}.\n+      Set<Name> seen = new HashSet<>();\n+      while (!subtreeRoots.isEmpty()) {\n+        Name subtreeRoot = subtreeRoots.pop();\n+        // Collect all aliases of {@code subtreeRoot}.\n+        subtreeRoot.addAliasesTo(seen);\n+        // Add all children of {@code subtreeRoot} to {@code subtreeRoots}.\n+        if (subtreeRoot.props != null) {\n+          for (Name child : subtreeRoot.props) {\n+            if (seen.add(child)) {\n+              subtreeRoots.push(child);\n             }\n           }\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+      // Try to inline aliases.\n+      for (Name alias : seen) {\n+        if (alias.type == Name.Type.OBJECTLIT || alias.type == Name.Type.FUNCTION) {\n+          // We can only inline an alias of an object literal or function.\n+          Ref decl = alias.getDeclaration();\n+          Ref get = Iterables.getOnlyElement(alias.getRefs(Ref.Type.ALIASING_GET), null);\n+          if (get != null && decl != null && inlineAlias(alias, decl, get)) {\n+            // We successfully inlined an alias. Remove the corresponding Refs from\n+            // {@code alias}.\n+            alias.removeRef(get);\n+            decl.node.removeChild(get.node);\n+          }\n+        }\n       }\n     }\n+\n+    // Check if {@code name} has any aliases left after inlining.\n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n+        name.aliasingGets == 0 && name.props != null) {\n+      workList.addAll(name.props);\n+    }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}