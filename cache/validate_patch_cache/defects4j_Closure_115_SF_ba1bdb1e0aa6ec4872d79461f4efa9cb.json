{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n  Node argList = callNode.getSecondChild();\n\n  // Check the number of parameters and arguments.\n  int numParams = NodeUtil.countChildren(paramList);\n  int numArgs = NodeUtil.countChildren(argList);\n  if (numParams != numArgs) {\n    return CanInlineResult.NO;\n  }\n\n  // Check for potential side effects.\n  Node block = fnNode.getLastChild();\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n\n  // Check each arg/param pair for potential issues.\n  for (int i = 0; i < numParams; i++) {\n    Node param = paramList.getChildAtIndex(i);\n    Node arg = argList.getChildAtIndex(i);\n\n    // Check for potential side effects.\n    if (hasSideEffects && NodeUtil.canBeSideEffected(arg)) {\n      return CanInlineResult.NO;\n    }\n\n    // Check for mutable arguments that may have multiple uses.\n    if (NodeUtil.mayEffectMutableState(arg, compiler) &&\n        NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..65eb945a 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,52 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n+  Node argList = callNode.getSecondChild();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // Check the number of parameters and arguments.\n+  int numParams = NodeUtil.countChildren(paramList);\n+  int numArgs = NodeUtil.countChildren(argList);\n+  if (numParams != numArgs) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  // Check for potential side effects.\n+  Node block = fnNode.getLastChild();\n+  boolean hasSideEffects = false;\n+  if (block.hasChildren()) {\n+    Preconditions.checkState(block.hasOneChild());\n+    Node stmt = block.getFirstChild();\n+    if (stmt.isReturn()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n     }\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  // Check each arg/param pair for potential issues.\n+  for (int i = 0; i < numParams; i++) {\n+    Node param = paramList.getChildAtIndex(i);\n+    Node arg = argList.getChildAtIndex(i);\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    // Check for potential side effects.\n+    if (hasSideEffects && NodeUtil.canBeSideEffected(arg)) {\n+      return CanInlineResult.NO;\n     }\n \n-    return CanInlineResult.YES;\n+    // Check for mutable arguments that may have multiple uses.\n+    if (NodeUtil.mayEffectMutableState(arg, compiler) &&\n+        NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n+      return CanInlineResult.NO;\n+    }\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}