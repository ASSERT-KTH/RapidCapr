{
    "patch": "public static List<Integer> findMissingNumbers(int[] nums) {\n    List<Integer> missingNumbers = new ArrayList<>();\n    Arrays.sort(nums);\n    int expected = nums[0];\n    for (int num : nums) {\n        if (num != expected) {\n            while (expected < num) {\n                missingNumbers.add(expected);\n                expected++;\n            }\n        }\n        expected++;\n    }\n    return missingNumbers;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a70712674 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static List<Integer> findMissingNumbers(int[] nums) {\n+    List<Integer> missingNumbers = new ArrayList<>();\n+    Arrays.sort(nums);\n+    int expected = nums[0];\n+    for (int num : nums) {\n+        if (num != expected) {\n+            while (expected < num) {\n+                missingNumbers.add(expected);\n+                expected++;\n+            }\n+        }\n+        expected++;\n+    }\n+    return missingNumbers;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}