{
    "patch": "\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockSettingsImpl<T> settings = (MockSettingsImpl<T>) Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS);;\n        try {\n            settings = (MockSettingsImpl<T>) settings.spiedInstance(mock);\n        } catch (Exception e) {\n            // Ignoring exception since spied instance cannot be created\n        }\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n        if (mock instanceof Factory) {\n            ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..229eba953 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockSettingsImpl<T> settings = (MockSettingsImpl<T>) Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS);;\n+        try {\n+            settings = (MockSettingsImpl<T>) settings.spiedInstance(mock);\n+        } catch (Exception e) {\n+            // Ignoring exception since spied instance cannot be created\n+        }\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+        if (mock instanceof Factory) {\n+            ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: type MockSettingsImpl does not take parameters",
    "test_result": "ERROR"
}