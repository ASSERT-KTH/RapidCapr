{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          compiler.report(\n              JSError.make(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility) {\n          compiler.report(\n              JSError.make(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        if (sameInput) {\n          // private access is always allowed in the same file.\n          return;\n        }\n        boolean isPrivate = visibility == Visibility.PRIVATE;\n        boolean isProtected = visibility == Visibility.PROTECTED;\n        if (isPrivate || isProtected) {\n          if (currentScope == null) {\n            return;\n          }\n          boolean definedInClassScope = false;\n          Scope hoistScope =\n              currentScope.getParent().getClosestHoistScope();\n          JSType superClass = null;\n          if (docInfo.isConstructor() &&\n              currentScope.getRootVar() != null) {\n            JSType jsType = currentScope.getRootVar().getType();\n            if (jsType != null) {\n              superClass = jsType.toObjectType().getImplicitPrototype();\n            }\n          }\n          for (Scope.Var var : currentScope.getVarIterable()) {\n            if (var.isLocal()) {\n              continue;\n            }\n            ObjectType varType = var.getType().toObjectType();\n            if (varType == null) {\n              continue;\n            }\n            Pair<Boolean, Node> definitionInfo =\n                definitionInfoMap.get(var.getName()).getFirst();\n            JSDocInfo varDocInfo = definitionInfo.second.getJSDocInfo();\n            if (varDocInfo != null && varDocInfo.isConstructor()) {\n              superClass = varType.getImplicitPrototype();\n            }\n            if (var.getName().equals(objectType.toString())) {\n              definedInClassScope =\n                  hoistScope.getVar(var.getName(), false) != null;\n              break;\n            }\n          }\n          boolean inSameClass =\n              ownerType == normalizeClassType(currentClass);\n          boolean inSubClass = superClass != null &&\n              ownerType.isSubtype(superClass);\n\n          if (isPrivate) {\n            if (inSameClass && definedInClassScope) {\n              // private access is always allowed in the same class scope.\n              return;\n            }\n            if (!inSameClass && definedInClassScope) {\n              // private access is allowed if the relevant scopes are the same.\n              List<Scope> localScopes = new ArrayList<Scope>();\n              Scope scope = currentScope;\n              while (scope.getClosestHoistScope() != hoistScope) {\n                localScopes.add(scope);\n                scope = scope.getParent();\n              }\n              int hoistScopeIndex = localScopes.size() - 1;\n              Scope varScope =\n                  hoistScope.getVar(objectType.toString(), false).getScope();\n              while (hoistScopeIndex >= 0 && varScope != null) {\n                if (localScopes.get(hoistScopeIndex) == varScope) {\n                  return;\n                }\n                varScope = varScope.getParent();\n                hoistScopeIndex--;\n              }\n            }\n            if (inSubClass) {\n              // private access is allowed from a subclass.\n              return;\n            }\n            // private access is not allowed outside the class.\n            compiler.report(\n                JSError.make(\n                    getprop,\n                    BAD_PRIVATE_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n          } else if (isProtected) {\n            if (inSameClass || inSubClass) {\n              // protected access is always allowed from the same class or subclass.\n              return;\n            }\n            // protected access is not allowed outside of the class or subclasses.\n            compiler.report(\n                JSError.make(\n                    getprop,\n                    BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..239e61f8 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,8 +404,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n+  private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n     ObjectType objectType =\n         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n@@ -453,12 +452,12 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         // visibility of the original property.\n         if (visibility == Visibility.PRIVATE && !sameInput) {\n           compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n+              JSError.make(getprop, PRIVATE_OVERRIDE,\n                   objectType.toString()));\n         } else if (overridingVisibility != Visibility.INHERITED &&\n             overridingVisibility != visibility) {\n           compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n+              JSError.make(getprop, VISIBILITY_MISMATCH,\n                   visibility.name(), objectType.toString(),\n                   overridingVisibility.name()));\n         }\n@@ -466,30 +465,95 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         if (sameInput) {\n           // private access is always allowed in the same file.\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n+        }\n+        boolean isPrivate = visibility == Visibility.PRIVATE;\n+        boolean isProtected = visibility == Visibility.PROTECTED;\n+        if (isPrivate || isProtected) {\n+          if (currentScope == null) {\n             return;\n           }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n+          boolean definedInClassScope = false;\n+          Scope hoistScope =\n+              currentScope.getParent().getClosestHoistScope();\n+          JSType superClass = null;\n+          if (docInfo.isConstructor() &&\n+              currentScope.getRootVar() != null) {\n+            JSType jsType = currentScope.getRootVar().getType();\n+            if (jsType != null) {\n+              superClass = jsType.toObjectType().getImplicitPrototype();\n+            }\n+          }\n+          for (Scope.Var var : currentScope.getVarIterable()) {\n+            if (var.isLocal()) {\n+              continue;\n+            }\n+            ObjectType varType = var.getType().toObjectType();\n+            if (varType == null) {\n+              continue;\n+            }\n+            Pair<Boolean, Node> definitionInfo =\n+                definitionInfoMap.get(var.getName()).getFirst();\n+            JSDocInfo varDocInfo = definitionInfo.second.getJSDocInfo();\n+            if (varDocInfo != null && varDocInfo.isConstructor()) {\n+              superClass = varType.getImplicitPrototype();\n+            }\n+            if (var.getName().equals(objectType.toString())) {\n+              definedInClassScope =\n+                  hoistScope.getVar(var.getName(), false) != null;\n+              break;\n+            }\n+          }\n+          boolean inSameClass =\n+              ownerType == normalizeClassType(currentClass);\n+          boolean inSubClass = superClass != null &&\n+              ownerType.isSubtype(superClass);\n+\n+          if (isPrivate) {\n+            if (inSameClass && definedInClassScope) {\n+              // private access is always allowed in the same class scope.\n+              return;\n+            }\n+            if (!inSameClass && definedInClassScope) {\n+              // private access is allowed if the relevant scopes are the same.\n+              List<Scope> localScopes = new ArrayList<Scope>();\n+              Scope scope = currentScope;\n+              while (scope.getClosestHoistScope() != hoistScope) {\n+                localScopes.add(scope);\n+                scope = scope.getParent();\n+              }\n+              int hoistScopeIndex = localScopes.size() - 1;\n+              Scope varScope =\n+                  hoistScope.getVar(objectType.toString(), false).getScope();\n+              while (hoistScopeIndex >= 0 && varScope != null) {\n+                if (localScopes.get(hoistScopeIndex) == varScope) {\n+                  return;\n+                }\n+                varScope = varScope.getParent();\n+                hoistScopeIndex--;\n+              }\n+            }\n+            if (inSubClass) {\n+              // private access is allowed from a subclass.\n+              return;\n+            }\n+            // private access is not allowed outside the class.\n+            compiler.report(\n+                JSError.make(\n+                    getprop,\n+                    BAD_PRIVATE_PROPERTY_ACCESS,\n+                    propertyName,\n+                    validator.getReadableJSTypeName(\n+                        getprop.getFirstChild(), true)));\n+          } else if (isProtected) {\n+            if (inSameClass || inSubClass) {\n+              // protected access is always allowed from the same class or subclass.\n+              return;\n+            }\n+            // protected access is not allowed outside of the class or subclasses.\n             compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n+                JSError.make(\n+                    getprop,\n+                    BAD_PROTECTED_PROPERTY_ACCESS,\n                     propertyName,\n                     validator.getReadableJSTypeName(\n                         getprop.getFirstChild(), true)));",
    "result_reason": "error: no suitable method found for make(Node,DiagnosticType,String)",
    "test_result": "ERROR"
}