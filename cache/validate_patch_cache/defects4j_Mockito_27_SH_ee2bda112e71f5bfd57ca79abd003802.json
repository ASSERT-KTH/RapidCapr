{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\nMockSettingsImpl<Object> mockSettings = (MockSettingsImpl<Object>) withSettings().defaultAnswer(RETURNS_DEFAULTS).spiedInstance(mock);\n\nMockMaker mockMaker = mockitoSession.getMockMaker();\nClass<?> mockType = mock.getClass();\nSet<Class<?>> interfaces = new HashSet<>(Arrays.asList(mock.getClass().getInterfaces()));\nif (mockType.isInterface()) {\n    interfaces.add(mockType);\n}\nInvocationHandler handler = mockMaker.getHandler(mock);\nObject initializedSpy = mockMaker.createMock(mockSettings, handler, interfaces.toArray(new Class[0]));\n\nif (initializedSpy instanceof Factory) {\n    ((Factory) initializedSpy).setCallbacks(new Callback[] {handler});\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7897528e5 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+MockSettingsImpl<Object> mockSettings = (MockSettingsImpl<Object>) withSettings().defaultAnswer(RETURNS_DEFAULTS).spiedInstance(mock);\n+\n+MockMaker mockMaker = mockitoSession.getMockMaker();\n+Class<?> mockType = mock.getClass();\n+Set<Class<?>> interfaces = new HashSet<>(Arrays.asList(mock.getClass().getInterfaces()));\n+if (mockType.isInterface()) {\n+    interfaces.add(mockType);\n+}\n+InvocationHandler handler = mockMaker.getHandler(mock);\n+Object initializedSpy = mockMaker.createMock(mockSettings, handler, interfaces.toArray(new Class[0]));\n+\n+if (initializedSpy instanceof Factory) {\n+    ((Factory) initializedSpy).setCallbacks(new Callback[] {handler});\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}