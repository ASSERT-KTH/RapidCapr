{
    "patch": "switch (child.getToken()) {\n  case GETPROP:\n    T type = typeSystem.getType(getScope(), child);\n    String name = child.getLastChild().getString();\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child.getLastChild(),\n                               processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child.getLastChild(),\n            propertiesToErrorFor.get(name), Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), child.toString(),\n            \"\"));\n      }\n    }\n    break;\n  case STRING:\n    name = child.getString();\n    type = typeSystem.getType(getScope(), n, name);\n    prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n    break;\n  default:\n    // We have a non-string key in the obj literal,\n    // (e.g. a NUMBER or NAME). We don't handle these\n    // yet, but we don't expect them.\n    throw new IllegalStateException(\n        \"Unexpected object literal key:\" + child);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..02a08390 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,43 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+switch (child.getToken()) {\n+  case GETPROP:\n+    T type = typeSystem.getType(getScope(), child);\n+    String name = child.getLastChild().getString();\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child.getLastChild(),\n+                               processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child.getLastChild(),\n+            propertiesToErrorFor.get(name), Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), child.toString(),\n+            \"\"));\n+      }\n+    }\n+    break;\n+  case STRING:\n+    name = child.getString();\n+    type = typeSystem.getType(getScope(), n, name);\n+    prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child,\n+                               processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      }\n+    }\n+    break;\n+  default:\n+    // We have a non-string key in the obj literal,\n+    // (e.g. a NUMBER or NAME). We don't handle these\n+    // yet, but we don't expect them.\n+    throw new IllegalStateException(\n+        \"Unexpected object literal key:\" + child);\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}