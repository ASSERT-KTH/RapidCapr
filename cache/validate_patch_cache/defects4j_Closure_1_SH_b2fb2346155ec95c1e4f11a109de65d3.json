{
    "patch": "Node function = fnScope.getRootNode();\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\nNode argList = getFunctionArgList(function);\nif (argList == null) {\n  return;\n}\n\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\n\n// Check if there are any unreferenced parameters.\nNode firstArg = argList.getFirstChild();\nif (firstArg == null) {\n  return;\n}\nList<Node> unusedParams = null;\nfor (Node arg = firstArg; arg != null; arg = arg.getNext()) {\n  Var var = fnScope.getVar(arg.getString());\n\n  // Ignore \"arguments\" parameters.\n  if (var != null && var.isArguments()) {\n    continue;\n  }\n\n  if (!referenced.contains(var)) {\n    if (unusedParams == null) {\n      unusedParams = new ArrayList<>();\n    }\n    unusedParams.add(arg);\n  }\n}\n\n// Make modifications to the AST if any unreferenced parameters found.\nif (unusedParams != null) {\n  // Remove the unused parameters from arglist.\n  for (Node unusedParam : unusedParams) {\n    unusedParam.detachFromParent();\n    compiler.reportCodeChange();\n  }\n  // Fix the parameter name map.\n  fnScope.resetParameterNames();\n  // Fix the function call sites.\n  if (modifyCallers) {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e456eecb 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,55 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+Node argList = getFunctionArgList(function);\n+if (argList == null) {\n+  return;\n+}\n+\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+\n+// Check if there are any unreferenced parameters.\n+Node firstArg = argList.getFirstChild();\n+if (firstArg == null) {\n+  return;\n+}\n+List<Node> unusedParams = null;\n+for (Node arg = firstArg; arg != null; arg = arg.getNext()) {\n+  Var var = fnScope.getVar(arg.getString());\n+\n+  // Ignore \"arguments\" parameters.\n+  if (var != null && var.isArguments()) {\n+    continue;\n+  }\n+\n+  if (!referenced.contains(var)) {\n+    if (unusedParams == null) {\n+      unusedParams = new ArrayList<>();\n+    }\n+    unusedParams.add(arg);\n+  }\n+}\n+\n+// Make modifications to the AST if any unreferenced parameters found.\n+if (unusedParams != null) {\n+  // Remove the unused parameters from arglist.\n+  for (Node unusedParam : unusedParams) {\n+    unusedParam.detachFromParent();\n+    compiler.reportCodeChange();\n+  }\n+  // Fix the parameter name map.\n+  fnScope.resetParameterNames();\n+  // Fix the function call sites.\n+  if (modifyCallers) {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}