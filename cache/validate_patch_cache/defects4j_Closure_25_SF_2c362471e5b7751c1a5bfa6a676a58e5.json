{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    FunctionType constructorFunctionType = constructor.getJSType().toMaybeFunctionType();\n    if (constructorFunctionType != null) {\n      JSType type = constructorFunctionType.getInstanceType();\n      n.setJSType(type);\n\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        JSType argType = arg.getJSType();\n        if (argType == null) {\n          argType = getNativeType(UNKNOWN_TYPE);\n        }\n        JSType parameterType = constructorFunctionType.getTypeOfThis();\n        if (parameterType != null) {\n          parameterType = parameterType.autoRemovePrototype();\n          if (parameterType.isUnknownType() || parameterType.isAllType()) {\n            parameterType = argType;\n          } else {\n            if (!argType.isUnknownType()) {\n              parameterType = parameterType.specialize(argType);\n            }\n          }\n          parameterType = parameterType.autobox();\n          flowScope.declare(parameterType.toString(), arg, parameterType, true);\n        }\n        scope = traverse(arg, scope);\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..dd171e78 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1035,30 +1035,32 @@ class TypeInference\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+    FunctionType constructorFunctionType = constructor.getJSType().toMaybeFunctionType();\n+    if (constructorFunctionType != null) {\n+      JSType type = constructorFunctionType.getInstanceType();\n+      n.setJSType(type);\n+\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        JSType argType = arg.getJSType();\n+        if (argType == null) {\n+          argType = getNativeType(UNKNOWN_TYPE);\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        JSType parameterType = constructorFunctionType.getTypeOfThis();\n+        if (parameterType != null) {\n+          parameterType = parameterType.autoRemovePrototype();\n+          if (parameterType.isUnknownType() || parameterType.isAllType()) {\n+            parameterType = argType;\n+          } else {\n+            if (!argType.isUnknownType()) {\n+              parameterType = parameterType.specialize(argType);\n+            }\n+          }\n+          parameterType = parameterType.autobox();\n+          flowScope.declare(parameterType.toString(), arg, parameterType, true);\n         }\n+        scope = traverse(arg, scope);\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n     return scope;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}