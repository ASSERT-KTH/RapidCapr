{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    Type[] bounds = typeVariable.getBounds();\n\n    if (bounds.length == 0) {\n        Type actualType = getActualTypeArgumentFor(typeVariable);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n        }\n    } else {\n        for (Type type : bounds) {\n            registerTypeVariablesOn(type);\n            if (type instanceof TypeVariable) {\n                TypeVariable<?> tv = (TypeVariable<?>) type;\n                readTypeVariablesOfTypeVariable(tv);\n            }\n        }\n    }\n}\n\nprivate void readTypeVariablesOfTypeVariable(TypeVariable<?> tv) {\n    Type[] bounds = tv.getBounds();\n\n    if (bounds.length == 0) {\n        Type actualType = getActualTypeArgumentFor(tv);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n        } else {\n            registerTypeVariablesOn(tv);\n        }\n    } else {\n        for (Type type : bounds) {\n            registerTypeVariablesOn(type);\n            if (type instanceof TypeVariable) {\n                TypeVariable<?> nestedTv = (TypeVariable<?>) type;\n                readTypeVariablesOfTypeVariable(nestedTv);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..322ff26d4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,49 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    Type[] bounds = typeVariable.getBounds();\n+\n+    if (bounds.length == 0) {\n+        Type actualType = getActualTypeArgumentFor(typeVariable);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    } else {\n+        for (Type type : bounds) {\n+            registerTypeVariablesOn(type);\n+            if (type instanceof TypeVariable) {\n+                TypeVariable<?> tv = (TypeVariable<?>) type;\n+                readTypeVariablesOfTypeVariable(tv);\n+            }\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOfTypeVariable(TypeVariable<?> tv) {\n+    Type[] bounds = tv.getBounds();\n+\n+    if (bounds.length == 0) {\n+        Type actualType = getActualTypeArgumentFor(tv);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+        } else {\n+            registerTypeVariablesOn(tv);\n+        }\n+    } else {\n+        for (Type type : bounds) {\n+            registerTypeVariablesOn(type);\n+            if (type instanceof TypeVariable) {\n+                TypeVariable<?> nestedTv = (TypeVariable<?>) type;\n+                readTypeVariablesOfTypeVariable(nestedTv);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}