{
    "patch": "public static String getFirstCharacter(String str) {\n    return str.charAt(0); // causes a NPE when str is null\n}\n\npublic static String getFirstCharacterFixed(String str) {\n    if (str == null || str.isEmpty()) {\n        return \"\"; // return empty string if str is null or empty\n    } else {\n        return str.charAt(0);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..5f1600f2e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static String getFirstCharacter(String str) {\n+    return str.charAt(0); // causes a NPE when str is null\n+}\n+\n+public static String getFirstCharacterFixed(String str) {\n+    if (str == null || str.isEmpty()) {\n+        return \"\"; // return empty string if str is null or empty\n+    } else {\n+        return str.charAt(0);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}