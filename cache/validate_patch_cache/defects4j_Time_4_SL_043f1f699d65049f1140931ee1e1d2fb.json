{
    "patch": "for (int j = 0; j < newTypes.length; j++) {\n    fieldIndex = indexOf(newTypes[j]);\n    if (fieldIndex == -1) {\n        partial = partial.withField(newTypes[j], newValues[j]);\n    } else {\n        partial = partial.withField(newTypes[j], newValues[j]).withFieldRemoved(fieldIndex);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..febca4d0 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,14 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+for (int j = 0; j < newTypes.length; j++) {\n+    fieldIndex = indexOf(newTypes[j]);\n+    if (fieldIndex == -1) {\n+        partial = partial.withField(newTypes[j], newValues[j]);\n+    } else {\n+        partial = partial.withField(newTypes[j], newValues[j]).withFieldRemoved(fieldIndex);\n+    }\n+}\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}