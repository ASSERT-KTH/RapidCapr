{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Check if the only child is an expression\n      if (NodeUtil.isExpressionNode(maybeExpr)\n          || (maybeExpr.getType() == Token.EXPR_RESULT\n          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n\n        // Traverse up the tree and check if the expression is inside a conditional or loop\n        Node parent = n.getParent();\n        boolean insideConditional = false;\n        while (parent != null && !insideConditional) {\n          int type = parent.getType();\n\n          if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n            insideConditional = true;\n          } else if (NodeUtil.isLoopStructure(parent)) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              insideConditional = true;\n            }\n            break;\n          } else if (type == Token.IF) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              insideConditional = true;\n              break;\n            }\n          }\n          parent = parent.getParent();\n        }\n\n        // If expression is inside a conditional, don't fold it\n        if (insideConditional) {\n          return false;\n        }\n\n        // Check if expression has side effects\n        if (!NodeUtil.mayHaveSideEffects(maybeExpr)) {\n          return false;\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b0cf34f6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,55 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Check if the only child is an expression\n+      if (NodeUtil.isExpressionNode(maybeExpr)\n+          || (maybeExpr.getType() == Token.EXPR_RESULT\n+          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n+\n+        // Traverse up the tree and check if the expression is inside a conditional or loop\n+        Node parent = n.getParent();\n+        boolean insideConditional = false;\n+        while (parent != null && !insideConditional) {\n+          int type = parent.getType();\n+\n+          if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n+            insideConditional = true;\n+          } else if (NodeUtil.isLoopStructure(parent)) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              insideConditional = true;\n+            }\n+            break;\n+          } else if (type == Token.IF) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              insideConditional = true;\n+              break;\n+            }\n+          }\n+          parent = parent.getParent();\n+        }\n+\n+        // If expression is inside a conditional, don't fold it\n+        if (insideConditional) {\n+          return false;\n+        }\n+\n+        // Check if expression has side effects\n+        if (!NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+          return false;\n+        }\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}