{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || left.getFirstChild().getNext().getString() == null || !\"join\".equals(left.getFirstChild().getNext().getString())) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (!arrayNode.isArrayLit() || !right.isString()) {\n        return; // newly added fix\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n      if (elem.isString()) {\n        String str = NodeUtil.getStringValue(elem);\n        if (!str.isEmpty()) {\n          if (sb.length() > 0) {\n            sb.append(joinString);\n          }\n          sb.append(str);\n        }\n      } else {\n        if (sb.length() > 0) {\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    if (arrayFoldedChildren.isEmpty()) {\n      parent.replaceChild(n, IR.string(\"\"));\n    } else if (arrayFoldedChildren.size() == 1) {\n      Node foldedNode = arrayFoldedChildren.get(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      parent.replaceChild(n, foldedNode.isString() ? foldedNode : IR.add(IR.string(\"\"), foldedNode));\n    } else {\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      Node foldedCall = IR.call(\n          IR.getprop(\n              arrayNode.cloneTree(),\n              IR.string(\"join\")),\n          IR.string(joinString));\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      parent.replaceChild(n, foldedCall);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..9e48f568 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,18 +1458,17 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    if (!NodeUtil.isGetProp(left) || left.getFirstChild().getNext().getString() == null || !\"join\".equals(left.getFirstChild().getNext().getString())) {\n       return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if (!arrayNode.isArrayLit() || !right.isString()) {\n+        return; // newly added fix\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n@@ -1477,16 +1476,18 @@ class FoldConstants extends AbstractPostOrderCallback\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n+      if (elem.isString()) {\n+        String str = NodeUtil.getStringValue(elem);\n+        if (!str.isEmpty()) {\n+          if (sb.length() > 0) {\n+            sb.append(joinString);\n+          }\n+          sb.append(str);\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n       } else {\n         if (sb.length() > 0) {\n-          // + 2 for the quotes.\n           foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n           sb = new StringBuilder();\n@@ -1498,55 +1499,37 @@ class FoldConstants extends AbstractPostOrderCallback\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n     foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n-  }\n+    if (arrayFoldedChildren.isEmpty()) {\n+      parent.replaceChild(n, IR.string(\"\"));\n+    } else if (arrayFoldedChildren.size() == 1) {\n+      Node foldedNode = arrayFoldedChildren.get(0);\n+      if (foldedSize > originalSize) {\n+        return;\n+      }\n+      parent.replaceChild(n, foldedNode.isString() ? foldedNode : IR.add(IR.string(\"\"), foldedNode));\n+    } else {\n+      int kJoinOverhead = \"[].join()\".length();\n+      foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);\n+      if (foldedSize > originalSize) {\n+        return;\n+      }\n+      Node foldedCall = IR.call(\n+          IR.getprop(\n+              arrayNode.cloneTree(),\n+              IR.string(\"join\")),\n+          IR.string(joinString));\n+      arrayNode.detachChildren();\n+      for (Node node : arrayFoldedChildren) {\n+        arrayNode.addChildToBack(node);\n+      }\n+      parent.replaceChild(n, foldedCall);\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}