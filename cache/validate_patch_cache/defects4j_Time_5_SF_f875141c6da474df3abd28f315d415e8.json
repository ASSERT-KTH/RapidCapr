{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    PeriodType supportedType = PeriodType.standard().withFieldsRemoved(type);\n    boolean unsupportedFields = !supportedType.equals(PeriodType.standard());\n    if (unsupportedFields) {\n        DateTimeField unsupportedField = type.getField(this, 0);\n        long unsupportedValue = unsupportedField.getDifferenceAsLong(this, 0);\n        DateTimeField supportedField = supportedType.getField(this, 0);\n        long supportedValue = supportedField.getDifferenceAsLong(this, 0);\n        if (unsupportedValue > 0) {\n            supportedValue = ((supportedField.roundFloor(millis) == millis) ? supportedValue : supportedValue + 1);\n        } else if (unsupportedValue < 0) {\n            supportedValue = ((supportedField.roundCeiling(millis) == millis) ? supportedValue : supportedValue - 1);\n        }\n        millis = supportedField.add(millis, supportedValue);\n    }\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..e5991f70 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,42 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    PeriodType supportedType = PeriodType.standard().withFieldsRemoved(type);\n+    boolean unsupportedFields = !supportedType.equals(PeriodType.standard());\n+    if (unsupportedFields) {\n+        DateTimeField unsupportedField = type.getField(this, 0);\n+        long unsupportedValue = unsupportedField.getDifferenceAsLong(this, 0);\n+        DateTimeField supportedField = supportedType.getField(this, 0);\n+        long supportedValue = supportedField.getDifferenceAsLong(this, 0);\n+        if (unsupportedValue > 0) {\n+            supportedValue = ((supportedField.roundFloor(millis) == millis) ? supportedValue : supportedValue + 1);\n+        } else if (unsupportedValue < 0) {\n+            supportedValue = ((supportedField.roundCeiling(millis) == millis) ? supportedValue : supportedValue - 1);\n+        }\n+        millis = supportedField.add(millis, supportedValue);\n+    }\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    int years = getYears();\n+    int months = getMonths();\n+    if (years != 0 || months != 0) {\n+        years = FieldUtils.safeAdd(years, months / 12);\n+        months = months % 12;\n+        if (years != 0) {\n+            result = result.withYears(years);\n+        }\n+        if (months != 0) {\n+            result = result.withMonths(months);\n         }\n-        return result;\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}