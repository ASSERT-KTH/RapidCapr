{
    "patch": "private static Set<Locale> cAvailableLocaleSet;\n\nstatic {\n    // Initialize the available locale set\n    ResourceBundle bundle = ResourceBundle.getBundle(\"org.apache.commons.lang3.LocaleUtils\");\n    Set<Locale> set = new HashSet<>();\n    Enumeration<String> keys = bundle.getKeys();\n    while (keys.hasMoreElements()) {\n        String key = keys.nextElement();\n        set.add(LocaleUtils.toLocale(key));\n    }\n    cAvailableLocaleSet = Collections.unmodifiableSet(set);\n}\n\npublic static boolean isAvailableLocale(Locale locale) {\n    return cAvailableLocaleSet.contains(locale);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091d..79a1eddd 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -168,78 +168,23 @@ public class StringEscapeUtils {\n      * @param escapeSingleQuote escapes single quotes if <code>true</code>\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (str == null) {\n-            return;\n-        }\n-        int sz;\n-        sz = str.length();\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n+private static Set<Locale> cAvailableLocaleSet;\n \n-            // handle unicode\n-            if (ch > 0xfff) {\n-                out.write(\"\\\\u\" + hex(ch));\n-            } else if (ch > 0xff) {\n-                out.write(\"\\\\u0\" + hex(ch));\n-            } else if (ch > 0x7f) {\n-                out.write(\"\\\\u00\" + hex(ch));\n-            } else if (ch < 32) {\n-                switch (ch) {\n-                    case '\\b':\n-                        out.write('\\\\');\n-                        out.write('b');\n-                        break;\n-                    case '\\n':\n-                        out.write('\\\\');\n-                        out.write('n');\n-                        break;\n-                    case '\\t':\n-                        out.write('\\\\');\n-                        out.write('t');\n-                        break;\n-                    case '\\f':\n-                        out.write('\\\\');\n-                        out.write('f');\n-                        break;\n-                    case '\\r':\n-                        out.write('\\\\');\n-                        out.write('r');\n-                        break;\n-                    default :\n-                        if (ch > 0xf) {\n-                            out.write(\"\\\\u00\" + hex(ch));\n-                        } else {\n-                            out.write(\"\\\\u000\" + hex(ch));\n-                        }\n-                        break;\n-                }\n-            } else {\n-                switch (ch) {\n-                    case '\\'':\n-                        if (escapeSingleQuote) {\n-                          out.write('\\\\');\n-                        }\n-                        out.write('\\'');\n-                        break;\n-                    case '\"':\n-                        out.write('\\\\');\n-                        out.write('\"');\n-                        break;\n-                    case '\\\\':\n-                        out.write('\\\\');\n-                        out.write('\\\\');\n-                        break;\n-                    default :\n-                        out.write(ch);\n-                        break;\n-                }\n-            }\n-        }\n+static {\n+    // Initialize the available locale set\n+    ResourceBundle bundle = ResourceBundle.getBundle(\"org.apache.commons.lang3.LocaleUtils\");\n+    Set<Locale> set = new HashSet<>();\n+    Enumeration<String> keys = bundle.getKeys();\n+    while (keys.hasMoreElements()) {\n+        String key = keys.nextElement();\n+        set.add(LocaleUtils.toLocale(key));\n     }\n+    cAvailableLocaleSet = Collections.unmodifiableSet(set);\n+}\n+\n+public static boolean isAvailableLocale(Locale locale) {\n+    return cAvailableLocaleSet.contains(locale);\n+}\n \n     /**\n      * <p>Returns an upper case hexadecimal <code>String</code> for the given",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}