{
    "patch": "// Traverse through any cast nodes and update first node accordingly\nwhile (first.isCast()) {\n  first = first.getFirstChild();\n}\n\nif (NodeUtil.isGet(first)) {\n  // If the first child is a getter, traverse into it to check if it is an eval call\n  Node getterFirstChild = first.getFirstChild();\n  while (getterFirstChild.isCast()) {\n    getterFirstChild = getterFirstChild.getFirstChild();\n  }\n  if (getterFirstChild.isName() && \"eval\".equals(getterFirstChild.getString())) {\n    getterFirstChild.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n} else {\n  // Otherwise, mark the call as a free call and check if the first child is an eval call\n  n.putBooleanProp(Node.FREE_CALL, true);\n  if (first.isName() && \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..306150bc 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,27 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// Traverse through any cast nodes and update first node accordingly\n+while (first.isCast()) {\n+  first = first.getFirstChild();\n+}\n+\n+if (NodeUtil.isGet(first)) {\n+  // If the first child is a getter, traverse into it to check if it is an eval call\n+  Node getterFirstChild = first.getFirstChild();\n+  while (getterFirstChild.isCast()) {\n+    getterFirstChild = getterFirstChild.getFirstChild();\n+  }\n+  if (getterFirstChild.isName() && \"eval\".equals(getterFirstChild.getString())) {\n+    getterFirstChild.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+} else {\n+  // Otherwise, mark the call as a free call and check if the first child is an eval call\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+  if (first.isName() && \"eval\".equals(first.getString())) {\n+    first.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}