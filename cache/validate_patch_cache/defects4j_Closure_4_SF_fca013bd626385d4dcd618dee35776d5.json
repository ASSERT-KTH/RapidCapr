{
    "patch": "    boolean resolved = false;\n    boolean needsFinishPropertyContinuations = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    resolved = resolveViaRegistry(t, enclosing);\n    if (!isResolved() && this.hasNonInterfaceImplementedType()) {\n      t.report(getNameNode(), JSError.make(\"JSC_IMPLEMENTS_NON_INTERFACE\"));\n    }\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      needsFinishPropertyContinuations = true;\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    if (shouldResolveViaProperties()) {\n      if (isGeneric()) {\n        resolveWithPropertyScope(t, enclosing, TypeMode.ONLY_IN_NAMESPACE);\n        needsFinishPropertyContinuations = isResolved();\n      }\n      resolveViaProperties(t, enclosing);\n      if (isResolved()) {\n        needsFinishPropertyContinuations = true;\n        if (isGeneric() && shouldResolveWithScope()) {\n          resolveWithPropertyScope(\n              t, enclosing, TypeMode.ONLY_IN_NAMESPACE);\n        }\n      }\n    }\n    if (isResolved()) {\n      super.resolveInternal(t, enclosing);\n      if (needsFinishPropertyContinuations) {\n        finishPropertyContinuations();\n      }\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    return this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..34cded81 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,45 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolved = false;\n+    boolean needsFinishPropertyContinuations = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    resolved = resolveViaRegistry(t, enclosing);\n+    if (!isResolved() && this.hasNonInterfaceImplementedType()) {\n+      t.report(getNameNode(), JSError.make(\"JSC_IMPLEMENTS_NON_INTERFACE\"));\n+    }\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      needsFinishPropertyContinuations = true;\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (shouldResolveViaProperties()) {\n+      if (isGeneric()) {\n+        resolveWithPropertyScope(t, enclosing, TypeMode.ONLY_IN_NAMESPACE);\n+        needsFinishPropertyContinuations = isResolved();\n+      }\n+      resolveViaProperties(t, enclosing);\n+      if (isResolved()) {\n+        needsFinishPropertyContinuations = true;\n+        if (isGeneric() && shouldResolveWithScope()) {\n+          resolveWithPropertyScope(\n+              t, enclosing, TypeMode.ONLY_IN_NAMESPACE);\n+        }\n+      }\n     }\n-\n-    super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+      super.resolveInternal(t, enclosing);\n+      if (needsFinishPropertyContinuations) {\n+        finishPropertyContinuations();\n+      }\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}