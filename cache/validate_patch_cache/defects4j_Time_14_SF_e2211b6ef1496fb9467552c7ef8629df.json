{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            int[] newValues = Arrays.copyOf(values, partial.size());\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                newValues[i] = partial.getFieldType(i).getField(iChronology).addWrapField(values[i], valueToAdd);\n            }\n            try {\n                instant = iChronology.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n                for (int i = 3; i < newValues.length; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (e.getIllegalFieldValueFailureType() != DateTimeFieldType.monthOfYear()) {\n                    throw e;\n                }\n                int dayCount = iChronology.getDaysInMonthMax();\n                int day = Math.min(newValues[2], dayCount);\n                instant = iChronology.getDateTimeMillis(newValues[0], newValues[1], day, 0);\n                for (int i = 3; i < newValues.length; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n                }\n                while (iChronology.get(instant, 2) != newValues[1]) {\n                    instant = iChronology.dayOfMonth().addWrapField(instant, -1);\n                }\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..31ad1599 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,32 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            int[] newValues = Arrays.copyOf(values, partial.size());\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                newValues[i] = partial.getFieldType(i).getField(iChronology).addWrapField(values[i], valueToAdd);\n+            }\n+            try {\n+                instant = iChronology.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n+                for (int i = 3; i < newValues.length; i++) {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (e.getIllegalFieldValueFailureType() != DateTimeFieldType.monthOfYear()) {\n+                    throw e;\n+                }\n+                int dayCount = iChronology.getDaysInMonthMax();\n+                int day = Math.min(newValues[2], dayCount);\n+                instant = iChronology.getDateTimeMillis(newValues[0], newValues[1], day, 0);\n+                for (int i = 3; i < newValues.length; i++) {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n+                }\n+                while (iChronology.get(instant, 2) != newValues[1]) {\n+                    instant = iChronology.dayOfMonth().addWrapField(instant, -1);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}