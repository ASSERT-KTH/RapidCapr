{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n\n  if (NodeUtil.isStatementBlock(n.getParent())) {\n    return false;\n  }\n\n  if (n.getParent() != null &&\n      (n.getParent().getType() == Token.FOR ||\n       n.getParent().getType() == Token.WHILE ||\n       n.getParent().getType() == Token.DO)) {\n    return false;\n  }\n\n  if (maybeExpr.getType() == Token.EXPR_RESULT &&\n      (maybeExpr.getFirstChild() == null ||\n       !NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n    return false;\n  }\n\n  boolean hasNonExpressionChildren = false;\n  boolean hasVarDeclaration = false;\n  boolean hasMoreThanOneChild = false;\n\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.equals(maybeExpr)) {\n      continue;\n    }\n\n    if (child.getType() != Token.EXPR_RESULT &&\n        child.getType() != Token.VAR &&\n        !NodeUtil.isExpressionNode(child)) {\n      hasNonExpressionChildren = true;\n      break;\n    }\n\n    if (child.getType() == Token.VAR) {\n      if (!child.hasOneChild() ||\n          child.getFirstChild().getType() != Token.NAME) {\n        hasNonExpressionChildren = true;\n        break;\n      }\n\n      hasVarDeclaration = true;\n\n      Node nextNode = child.getNext();\n      while (nextNode != null) {\n        if (nextNode.getType() != Token.EMPTY) {\n          hasNonExpressionChildren = true;\n          break;\n        }\n        nextNode = nextNode.getNext();\n      }\n    }\n\n    Node nextSibling = child.getNext();\n    while (nextSibling != null) {\n      if (nextSibling.getType() != Token.EMPTY) {\n        hasMoreThanOneChild = true;\n        break;\n      }\n\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (hasMoreThanOneChild || hasNonExpressionChildren) {\n      break;\n    }\n  }\n\n  return (NodeUtil.isExpressionNode(maybeExpr) || hasVarDeclaration) &&\n         !hasNonExpressionChildren &&\n         !hasMoreThanOneChild;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..ff72fa45 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,85 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node maybeExpr = n.getFirstChild();\n+\n+  if (NodeUtil.isStatementBlock(n.getParent())) {\n+    return false;\n+  }\n+\n+  if (n.getParent() != null &&\n+      (n.getParent().getType() == Token.FOR ||\n+       n.getParent().getType() == Token.WHILE ||\n+       n.getParent().getType() == Token.DO)) {\n+    return false;\n+  }\n+\n+  if (maybeExpr.getType() == Token.EXPR_RESULT &&\n+      (maybeExpr.getFirstChild() == null ||\n+       !NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n+    return false;\n+  }\n+\n+  boolean hasNonExpressionChildren = false;\n+  boolean hasVarDeclaration = false;\n+  boolean hasMoreThanOneChild = false;\n+\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.equals(maybeExpr)) {\n+      continue;\n+    }\n+\n+    if (child.getType() != Token.EXPR_RESULT &&\n+        child.getType() != Token.VAR &&\n+        !NodeUtil.isExpressionNode(child)) {\n+      hasNonExpressionChildren = true;\n+      break;\n+    }\n+\n+    if (child.getType() == Token.VAR) {\n+      if (!child.hasOneChild() ||\n+          child.getFirstChild().getType() != Token.NAME) {\n+        hasNonExpressionChildren = true;\n+        break;\n+      }\n+\n+      hasVarDeclaration = true;\n+\n+      Node nextNode = child.getNext();\n+      while (nextNode != null) {\n+        if (nextNode.getType() != Token.EMPTY) {\n+          hasNonExpressionChildren = true;\n+          break;\n+        }\n+        nextNode = nextNode.getNext();\n       }\n     }\n \n-    return false;\n+    Node nextSibling = child.getNext();\n+    while (nextSibling != null) {\n+      if (nextSibling.getType() != Token.EMPTY) {\n+        hasMoreThanOneChild = true;\n+        break;\n+      }\n+\n+      nextSibling = nextSibling.getNext();\n+    }\n+\n+    if (hasMoreThanOneChild || hasNonExpressionChildren) {\n+      break;\n+    }\n   }\n \n+  return (NodeUtil.isExpressionNode(maybeExpr) || hasVarDeclaration) &&\n+         !hasNonExpressionChildren &&\n+         !hasMoreThanOneChild;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}