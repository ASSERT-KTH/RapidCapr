{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int size = m.getRowDimension();\n    final EigenDecomposition dec;\n    if (size > 500) {\n        // Use iterative method for large matrices\n        final CholeskyDecomposition chol = new CholeskyDecomposition(m);\n        final MatrixUtils matrixUtils = new MatrixUtils();\n        final RealMatrix sqrt = matrixUtils.createRealIdentityMatrix(size);\n        final double[][] sqrtData = sqrt.getDataRef();\n        for (int i = 0; i < size; i++) {\n            for (int j = i; j < size; j++) {\n                sqrtData[i][j] = chol.getSolver().getL().getRowVector(i).dotProduct(chol.getSolver().getL().getRowVector(j));\n                sqrtData[j][i] = sqrtData[i][j];\n            }\n        }\n        dec = new EigenDecomposition(sqrt);\n    } else {\n        dec = new EigenDecomposition(m);\n    }\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..57f86cec6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int size = m.getRowDimension();\n+    final EigenDecomposition dec;\n+    if (size > 500) {\n+        // Use iterative method for large matrices\n+        final CholeskyDecomposition chol = new CholeskyDecomposition(m);\n+        final MatrixUtils matrixUtils = new MatrixUtils();\n+        final RealMatrix sqrt = matrixUtils.createRealIdentityMatrix(size);\n+        final double[][] sqrtData = sqrt.getDataRef();\n+        for (int i = 0; i < size; i++) {\n+            for (int j = i; j < size; j++) {\n+                sqrtData[i][j] = chol.getSolver().getL().getRowVector(i).dotProduct(chol.getSolver().getL().getRowVector(j));\n+                sqrtData[j][i] = sqrtData[i][j];\n+            }\n+        }\n+        dec = new EigenDecomposition(sqrt);\n+    } else {\n+        dec = new EigenDecomposition(m);\n     }\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}