{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a > 0 && x > 0) {\n        double gammaValue = Gamma.gamma(a);\n        return regularizedGamma(a, x, gammaValue);\n    } else {\n        throw new IllegalArgumentException(\"Both arguments to the incomplete \"\n            + \"gamma function must be positive. Received a = \" + a + \", x = \" + x);\n    }\n}\n\npublic static double regularizedGamma(double a, double x, double gammaValue) {\n    if (a > 0 && x > 0) {\n        double sum = 0.0;\n        double term = Math.pow(x, a) * Math.exp(-x) / gammaValue;\n        sum += term;\n\n        for (int k = 1; k <= 1000; k++) {\n            term *= x / (a + k);\n            sum += term;\n            if (Math.abs(term / sum) < 1e-15) {\n                return sum;\n            }\n        }\n        throw new IllegalStateException(\"Failed to converge to a limit\");\n    } else {\n        throw new IllegalArgumentException(\"Both arguments to the incomplete \"\n            + \"gamma function must be positive. Received a = \" + a + \", x = \" + x);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..66553a05c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,35 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a > 0 && x > 0) {\n+        double gammaValue = Gamma.gamma(a);\n+        return regularizedGamma(a, x, gammaValue);\n+    } else {\n+        throw new IllegalArgumentException(\"Both arguments to the incomplete \"\n+            + \"gamma function must be positive. Received a = \" + a + \", x = \" + x);\n+    }\n+}\n+\n+public static double regularizedGamma(double a, double x, double gammaValue) {\n+    if (a > 0 && x > 0) {\n+        double sum = 0.0;\n+        double term = Math.pow(x, a) * Math.exp(-x) / gammaValue;\n+        sum += term;\n+\n+        for (int k = 1; k <= 1000; k++) {\n+            term *= x / (a + k);\n+            sum += term;\n+            if (Math.abs(term / sum) < 1e-15) {\n+                return sum;\n+            }\n+        }\n+        throw new IllegalStateException(\"Failed to converge to a limit\");\n+    } else {\n+        throw new IllegalArgumentException(\"Both arguments to the incomplete \"\n+            + \"gamma function must be positive. Received a = \" + a + \", x = \" + x);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}