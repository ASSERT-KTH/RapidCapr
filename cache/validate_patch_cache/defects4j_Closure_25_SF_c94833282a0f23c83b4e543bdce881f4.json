{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n\n  // Visit the arguments of the constructor before the constructor itself so that the arguments\n  // are evaluated in the scope that existed before the constructor was called. Arguments are evaluated\n  // from left to right.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n\n  // Visit the constructor node.\n  scope = traverse(constructor, scope);\n\n  // Get the type of the constructor\n  JSType constructorType = constructor.getJSType();\n\n  // Determine the type of the object being created by the new expression\n  JSType type = null;\n  if (constructorType == null || constructorType.isUnknownType()) {\n    // If the constructor type is unknown, then set the new expression type to the unknown type\n    type = getNativeType(UNKNOWN_TYPE);\n  } else {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      // If the constructor type is unknown, then set the new expression type to the unknown type\n      type = getNativeType(UNKNOWN_TYPE);\n    } else if (constructorType.isFunctionType()) {\n      // If the constructor type is a constructor function\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null) {\n        // If the constructor type is not a function type, set the new expression type to the unknown type\n        type = getNativeType(UNKNOWN_TYPE);\n      } else if (!ct.isConstructor()) {\n        // If the constructor type is a function type but not a constructor function type, then set\n        // the new expression type to the function type\n        type = constructorType;\n      } else {\n        // If the constructor type is a constructor function type, then set the new expression type\n        // to the instance type of the constructor function type\n        type = ct.getInstanceType();\n      }\n    } else {\n      // If the constructor type is not a function type, set the new expression type to the unknown type\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n  }\n\n  // Set the type of the new expression node\n  n.setJSType(type);\n\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..649b78dd 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,59 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+\n+  // Visit the arguments of the constructor before the constructor itself so that the arguments\n+  // are evaluated in the scope that existed before the constructor was called. Arguments are evaluated\n+  // from left to right.\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+\n+  // Visit the constructor node.\n+  scope = traverse(constructor, scope);\n+\n+  // Get the type of the constructor\n+  JSType constructorType = constructor.getJSType();\n+\n+  // Determine the type of the object being created by the new expression\n+  JSType type = null;\n+  if (constructorType == null || constructorType.isUnknownType()) {\n+    // If the constructor type is unknown, then set the new expression type to the unknown type\n+    type = getNativeType(UNKNOWN_TYPE);\n+  } else {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      // If the constructor type is unknown, then set the new expression type to the unknown type\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else if (constructorType.isFunctionType()) {\n+      // If the constructor type is a constructor function\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct == null) {\n+        // If the constructor type is not a function type, set the new expression type to the unknown type\n         type = getNativeType(UNKNOWN_TYPE);\n+      } else if (!ct.isConstructor()) {\n+        // If the constructor type is a function type but not a constructor function type, then set\n+        // the new expression type to the function type\n+        type = constructorType;\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        // If the constructor type is a constructor function type, then set the new expression type\n+        // to the instance type of the constructor function type\n+        type = ct.getInstanceType();\n       }\n+    } else {\n+      // If the constructor type is not a function type, set the new expression type to the unknown type\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n \n+  // Set the type of the new expression node\n+  n.setJSType(type);\n+\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}