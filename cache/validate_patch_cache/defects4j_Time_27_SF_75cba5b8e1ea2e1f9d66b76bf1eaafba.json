{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    List<Object> extractedPairs = extractSeparators(elementPairs);\n    boolean lastSeparatorNoPrint = false;\n    if (extractedPairs.size() == 1){\n        Object[] pair = createComposite(extractedPairs);\n        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) pair[0], notParser ? null : (PeriodParser) pair[1]);\n    }\n\n    int size = extractedPairs.size();\n    if (extractedPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) extractedPairs.get(0);\n        extractedPairs = extractedPairs.subList(1, size);\n        Object[] pair = createComposite(extractedPairs);\n        return new PeriodFormatter(notPrinter ? null : sep.finish((PeriodPrinter) pair[0], null), notParser ? null : (PeriodParser) pair[1]);\n    } else if (extractedPairs.get(size - 1) instanceof Separator) {\n        Separator sep = (Separator) extractedPairs.get(size - 1);\n        extractedPairs = extractedPairs.subList(0, size - 1);\n        Object[] pair = createComposite(extractedPairs);\n        return new PeriodFormatter(notPrinter ? null : sep.finish(null, (PeriodPrinter) pair[0]), notParser ? null : (PeriodParser) pair[1]);\n    } else {\n        Object[] pair = createComposite(extractedPairs);\n        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) pair[0], notParser ? null : (PeriodParser) pair[1]);\n    }\n}\n\nprivate static List<Object> extractSeparators(List<Object> elementPairs) {\n    int size = elementPairs.size();\n    List<Object> extractedPairs = new ArrayList<Object>(size + 2);\n\n    Separator lastTypeSep = null;\n    for (int i = 0; i < size; i++) {\n        Object currentElement = elementPairs.get(i);\n        if (currentElement instanceof Separator) {\n            Separator sep = (Separator) currentElement;\n            if (i == 0 && !sep.isRequired()) {\n                //ignore the prefix separator if not required and first in the list\n                continue;\n            }\n            if (i == size - 1 && !sep.isRequired()) {\n                //mark last separator as no-print if not required and last character in the list\n                lastTypeSep = sep;\n                break;\n            }\n            extractedPairs.add(currentElement);\n        } else {\n            extractedPairs.add(currentElement);\n        }\n    }\n\n    if (lastTypeSep != null) {\n        lastTypeSep = lastTypeSep.withLater(null);\n        extractedPairs.add(lastTypeSep);\n    }\n    return extractedPairs;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e9a766b6 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,66 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    List<Object> extractedPairs = extractSeparators(elementPairs);\n+    boolean lastSeparatorNoPrint = false;\n+    if (extractedPairs.size() == 1){\n+        Object[] pair = createComposite(extractedPairs);\n+        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) pair[0], notParser ? null : (PeriodParser) pair[1]);\n+    }\n+\n+    int size = extractedPairs.size();\n+    if (extractedPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) extractedPairs.get(0);\n+        extractedPairs = extractedPairs.subList(1, size);\n+        Object[] pair = createComposite(extractedPairs);\n+        return new PeriodFormatter(notPrinter ? null : sep.finish((PeriodPrinter) pair[0], null), notParser ? null : (PeriodParser) pair[1]);\n+    } else if (extractedPairs.get(size - 1) instanceof Separator) {\n+        Separator sep = (Separator) extractedPairs.get(size - 1);\n+        extractedPairs = extractedPairs.subList(0, size - 1);\n+        Object[] pair = createComposite(extractedPairs);\n+        return new PeriodFormatter(notPrinter ? null : sep.finish(null, (PeriodPrinter) pair[0]), notParser ? null : (PeriodParser) pair[1]);\n+    } else {\n+        Object[] pair = createComposite(extractedPairs);\n+        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) pair[0], notParser ? null : (PeriodParser) pair[1]);\n+    }\n+}\n+\n+private static List<Object> extractSeparators(List<Object> elementPairs) {\n+    int size = elementPairs.size();\n+    List<Object> extractedPairs = new ArrayList<Object>(size + 2);\n+\n+    Separator lastTypeSep = null;\n+    for (int i = 0; i < size; i++) {\n+        Object currentElement = elementPairs.get(i);\n+        if (currentElement instanceof Separator) {\n+            Separator sep = (Separator) currentElement;\n+            if (i == 0 && !sep.isRequired()) {\n+                //ignore the prefix separator if not required and first in the list\n+                continue;\n+            }\n+            if (i == size - 1 && !sep.isRequired()) {\n+                //mark last separator as no-print if not required and last character in the list\n+                lastTypeSep = sep;\n+                break;\n+            }\n+            extractedPairs.add(currentElement);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            extractedPairs.add(currentElement);\n         }\n     }\n \n+    if (lastTypeSep != null) {\n+        lastTypeSep = lastTypeSep.withLater(null);\n+        extractedPairs.add(lastTypeSep);\n+    }\n+    return extractedPairs;\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: method finish in class Separator cannot be applied to given types;",
    "test_result": "ERROR"
}