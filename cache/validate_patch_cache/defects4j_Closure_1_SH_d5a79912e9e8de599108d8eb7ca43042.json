{
    "patch": "    ArrayList<Node> references = Lists.newArrayList(referenced);\n    // Avoid removing the last param, since it matches array rest arg\n    boolean avoidLastParam =\n        NodeUtil.mayHaveRestArgs(function.getLastChild())\n        || references.contains(function.getLastChild());\n    int occupiedParams = function.getLastChild().getIntProp(Node.FUNCTION_TARGET_ARITY);\n    int i = 0;\n    for (Node arg = function.getFirstChild().getNext();\n         arg != null && i < occupiedParams - (avoidLastParam ? 1 : 0);\n         arg = arg.getNext(), i++) {\n      if (!references.contains(arg)) {\n        Preconditions.checkState(arg.isName());\n        arg.detach();\n        compiler.reportCodeChange();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..562a9ab5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ArrayList<Node> references = Lists.newArrayList(referenced);\n+    // Avoid removing the last param, since it matches array rest arg\n+    boolean avoidLastParam =\n+        NodeUtil.mayHaveRestArgs(function.getLastChild())\n+        || references.contains(function.getLastChild());\n+    int occupiedParams = function.getLastChild().getIntProp(Node.FUNCTION_TARGET_ARITY);\n+    int i = 0;\n+    for (Node arg = function.getFirstChild().getNext();\n+         arg != null && i < occupiedParams - (avoidLastParam ? 1 : 0);\n+         arg = arg.getNext(), i++) {\n+      if (!references.contains(arg)) {\n+        Preconditions.checkState(arg.isName());\n+        arg.detach();\n+        compiler.reportCodeChange();\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}