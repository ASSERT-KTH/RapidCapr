{
    "patch": "      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(child);\n      if (docInfo != null) {\n        JSType thisType = docInfo.getType();\n        if (thisType != null) {\n          Node parent = n.getParent();\n          boolean calledViaGetProp = false;\n          if (parent.isGetElem() || parent.isGetProp()) {\n            calledViaGetProp = true;\n          } else if (parent.isCall() || parent.isNew()) {\n            Node grandparent = parent.getParent();\n            if (grandparent.isGetElem() || grandparent.isGetProp()) {\n              calledViaGetProp = true;\n            }\n          }\n          if (!calledViaGetProp) {\n            report(t, n, THIS_BEFORE_SUPER, childType.toString());\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..56cfd471 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(child);\n+      if (docInfo != null) {\n+        JSType thisType = docInfo.getType();\n+        if (thisType != null) {\n+          Node parent = n.getParent();\n+          boolean calledViaGetProp = false;\n+          if (parent.isGetElem() || parent.isGetProp()) {\n+            calledViaGetProp = true;\n+          } else if (parent.isCall() || parent.isNew()) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent.isGetElem() || grandparent.isGetProp()) {\n+              calledViaGetProp = true;\n+            }\n+          }\n+          if (!calledViaGetProp) {\n+            report(t, n, THIS_BEFORE_SUPER, childType.toString());\n+          }\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}