{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double tol = 1e-12; // set a tolerance\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigen = dec.getRealEigenvalues();\n    \n    for (int i = 0; i < realEigen.length; i++) {\n        if (realEigen[i] < -tol) {\n            throw new IllegalArgumentException(\"Matrix not positive definite\");\n        }\n        \n        if (realEigen[i] < 0.0) {\n            realEigen[i] = 0.0;\n        } else {\n            realEigen[i] = Math.sqrt(realEigen[i]);\n        }\n    }\n    \n    final RealMatrix sqrt = dec.getV().multiply(\n            MatrixUtils.createRealDiagonalMatrix(realEigen)).multiply(dec.getV().transpose());\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f5c8a20be 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double tol = 1e-12; // set a tolerance\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    \n+    for (int i = 0; i < realEigen.length; i++) {\n+        if (realEigen[i] < -tol) {\n+            throw new IllegalArgumentException(\"Matrix not positive definite\");\n+        }\n+        \n+        if (realEigen[i] < 0.0) {\n+            realEigen[i] = 0.0;\n+        } else {\n+            realEigen[i] = Math.sqrt(realEigen[i]);\n+        }\n     }\n+    \n+    final RealMatrix sqrt = dec.getV().multiply(\n+            MatrixUtils.createRealDiagonalMatrix(realEigen)).multiply(dec.getV().transpose());\n+    return sqrt;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}