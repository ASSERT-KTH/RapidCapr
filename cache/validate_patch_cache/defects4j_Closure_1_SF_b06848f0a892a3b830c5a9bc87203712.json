{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node fnNode = fnScope.getRootNode();\n    Preconditions.checkState(fnNode.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n        // This function is an object literal getter or setter, which cannot have its params removed.\n        return;\n    }\n\n    Node paramList = fnNode.getSecondChild();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnNode);\n\n    // The referenced set is used only for advanced mode.\n    if (!modifyCallers && paramList.hasChildren() && !compiler.getOptions().isWarningLevelVerbose()) {\n        Node lastParam = paramList.getLastChild();\n        Var var = fnScope.getVar(lastParam.getString());\n        if (referenced.contains(var)) {\n            return; // all params are referenced.\n        }\n\n        Node currParam = lastParam.getPrevious();\n        while (currParam != null) {\n            String paramName = currParam.getString();\n            var = fnScope.getVar(paramName);\n\n            if (!referenced.contains(var)) {\n                paramList.removeChild(currParam);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n\n            currParam = currParam.getPrevious();\n        }\n\n        // Also remove the last param if it is not used.\n        if (currParam == null && !referenced.contains(fnScope.getVar(lastParam.getString()))) {\n            paramList.removeChild(lastParam);\n            compiler.reportCodeChange();\n        }\n\n    } else if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6be969f7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,52 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node fnNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnNode.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+        // This function is an object literal getter or setter, which cannot have its params removed.\n+        return;\n+    }\n+\n+    Node paramList = fnNode.getSecondChild();\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        && callSiteOptimizer.canModifyCallers(fnNode);\n+\n+    // The referenced set is used only for advanced mode.\n+    if (!modifyCallers && paramList.hasChildren() && !compiler.getOptions().isWarningLevelVerbose()) {\n+        Node lastParam = paramList.getLastChild();\n+        Var var = fnScope.getVar(lastParam.getString());\n+        if (referenced.contains(var)) {\n+            return; // all params are referenced.\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+\n+        Node currParam = lastParam.getPrevious();\n+        while (currParam != null) {\n+            String paramName = currParam.getString();\n+            var = fnScope.getVar(paramName);\n+\n+            if (!referenced.contains(var)) {\n+                paramList.removeChild(currParam);\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n+\n+            currParam = currParam.getPrevious();\n+        }\n+\n+        // Also remove the last param if it is not used.\n+        if (currParam == null && !referenced.contains(fnScope.getVar(lastParam.getString()))) {\n+            paramList.removeChild(lastParam);\n+            compiler.reportCodeChange();\n+        }\n+\n+    } else if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}