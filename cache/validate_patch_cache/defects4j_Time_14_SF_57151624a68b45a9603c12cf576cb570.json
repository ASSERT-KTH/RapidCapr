{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean skipMonthDayMaxCheck = false;\n            int monthOfYearMax = 0;\n            int yearMax = 0;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                int value = values[i];\n                if (i == DateTimeFieldType.monthOfYear().getFieldIndex() && DateTimeUtils.isContiguous(partial, DateTimeFieldType.monthOfYear())) {\n                    value += valueToAdd;\n                    int monthMax = field.getMaximumValue(instant);\n                    if (value <= 0 || value > monthMax) {\n                        long instant2 = instant + valueToAdd * DateUtils.MILLIS_PER_MONTH;\n                        int[] result = iChronology.get(partial, instant2);\n                        int year = result[0];\n                        int monthOfYear = result[1];\n                        monthOfYearMax = iChronology.dayOfMonth().getMaximumValue(instant2.withField(DateTimeFieldType.year(), year).withField(DateTimeFieldType.monthOfYear(), monthOfYear).getMillis());\n                        yearMax = (year == result[0]) ? year : year + ((monthOfYear == 1) ? -1 : 0);\n                        skipMonthDayMaxCheck = true;\n                        value = monthOfYearMax;\n                    }\n                }\n                instant = field.set(instant, value);\n            }\n            if (!skipMonthDayMaxCheck) {\n                monthOfYearMax = iChronology.monthOfYear().getMaximumValue(instant);\n                yearMax = iChronology.year().getMaximumValue(instant);\n            }\n            instant = add(instant, valueToAdd);\n            int year = iChronology.year().get(instant);\n            int monthOfYear = iChronology.monthOfYear().get(instant);\n            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n            if (dayOfMonth > monthOfYearMax) {\n                dayOfMonth = monthOfYearMax;\n            }\n            if (year > yearMax || (year == yearMax && monthOfYear > monthOfYearMax)) {\n                int dayOfYear = iChronology.dayOfYear().get(instant);\n                instant = iChronology.year().set(instant, yearMax);\n                instant = iChronology.monthOfYear().set(instant, monthOfYearMax);\n                int daysInYear = iChronology.dayOfYear().getMaximumValue(instant);\n                if (dayOfYear > daysInYear) {\n                    dayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                }\n                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8cde3a64 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,51 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean skipMonthDayMaxCheck = false;\n+            int monthOfYearMax = 0;\n+            int yearMax = 0;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+                int value = values[i];\n+                if (i == DateTimeFieldType.monthOfYear().getFieldIndex() && DateTimeUtils.isContiguous(partial, DateTimeFieldType.monthOfYear())) {\n+                    value += valueToAdd;\n+                    int monthMax = field.getMaximumValue(instant);\n+                    if (value <= 0 || value > monthMax) {\n+                        long instant2 = instant + valueToAdd * DateUtils.MILLIS_PER_MONTH;\n+                        int[] result = iChronology.get(partial, instant2);\n+                        int year = result[0];\n+                        int monthOfYear = result[1];\n+                        monthOfYearMax = iChronology.dayOfMonth().getMaximumValue(instant2.withField(DateTimeFieldType.year(), year).withField(DateTimeFieldType.monthOfYear(), monthOfYear).getMillis());\n+                        yearMax = (year == result[0]) ? year : year + ((monthOfYear == 1) ? -1 : 0);\n+                        skipMonthDayMaxCheck = true;\n+                        value = monthOfYearMax;\n+                    }\n+                }\n+                instant = field.set(instant, value);\n+            }\n+            if (!skipMonthDayMaxCheck) {\n+                monthOfYearMax = iChronology.monthOfYear().getMaximumValue(instant);\n+                yearMax = iChronology.year().getMaximumValue(instant);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            int year = iChronology.year().get(instant);\n+            int monthOfYear = iChronology.monthOfYear().get(instant);\n+            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n+            if (dayOfMonth > monthOfYearMax) {\n+                dayOfMonth = monthOfYearMax;\n+            }\n+            if (year > yearMax || (year == yearMax && monthOfYear > monthOfYearMax)) {\n+                int dayOfYear = iChronology.dayOfYear().get(instant);\n+                instant = iChronology.year().set(instant, yearMax);\n+                instant = iChronology.monthOfYear().set(instant, monthOfYearMax);\n+                int daysInYear = iChronology.dayOfYear().getMaximumValue(instant);\n+                if (dayOfYear > daysInYear) {\n+                    dayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                }\n+                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}