{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class lhsClass = lhs.getClass();\n    Class rhsClass = rhs.getClass();\n    if (lhsClass.isArray()) {\n        if (rhsClass.isArray()) {\n            compareArrays(lhs, rhs);\n        } else {\n            this.setEquals(false);\n        }\n    } else {\n        isEquals = lhs.equals(rhs);\n    }\n    return this;\n}\n\nprivate void compareArrays(Object lhs, Object rhs) {\n    // Compare array lengths\n    int lhsLength = Array.getLength(lhs);\n    if (lhsLength != Array.getLength(rhs)) {\n        this.setEquals(false);\n        return;\n    }\n\n    // Compare array element-wise\n    for (int i = 0; i < lhsLength; i++) {\n        Object lhsElement = Array.get(lhs, i);\n        Object rhsElement = Array.get(rhs, i);\n        boolean isArray = lhsElement != null &&\n                          lhsElement.getClass().isArray() &&\n                          rhsElement != null &&\n                          rhsElement.getClass().isArray();\n        if (isArray) {\n            new EqualsBuilder().append(lhsElement, rhsElement).isEquals();\n        } else {\n            new EqualsBuilder().append(lhsElement, rhsElement).isEquals();\n        }\n        if (!isEquals) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..4cdd3aea 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,57 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class lhsClass = lhs.getClass();\n+    Class rhsClass = rhs.getClass();\n+    if (lhsClass.isArray()) {\n+        if (rhsClass.isArray()) {\n+            compareArrays(lhs, rhs);\n+        } else {\n             this.setEquals(false);\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+    } else {\n+        isEquals = lhs.equals(rhs);\n+    }\n+    return this;\n+}\n+\n+private void compareArrays(Object lhs, Object rhs) {\n+    // Compare array lengths\n+    int lhsLength = Array.getLength(lhs);\n+    if (lhsLength != Array.getLength(rhs)) {\n+        this.setEquals(false);\n+        return;\n+    }\n+\n+    // Compare array element-wise\n+    for (int i = 0; i < lhsLength; i++) {\n+        Object lhsElement = Array.get(lhs, i);\n+        Object rhsElement = Array.get(rhs, i);\n+        boolean isArray = lhsElement != null &&\n+                          lhsElement.getClass().isArray() &&\n+                          rhsElement != null &&\n+                          rhsElement.getClass().isArray();\n+        if (isArray) {\n+            new EqualsBuilder().append(lhsElement, rhsElement).isEquals();\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            new EqualsBuilder().append(lhsElement, rhsElement).isEquals();\n+        }\n+        if (!isEquals) {\n+            return;\n         }\n-        return this;\n     }\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}