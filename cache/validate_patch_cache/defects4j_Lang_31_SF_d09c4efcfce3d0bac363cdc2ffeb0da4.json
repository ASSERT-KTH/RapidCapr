{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n    \n    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n            return false;\n        }\n        final int length = sequence.length();\n        final int searchLength = searchCharacters.length;\n        if (searchLength == 1) {\n            final char searchChar = searchCharacters[0];\n            for (int i = 0; i < length; i++) {\n                if (sequence.charAt(i) == searchChar) {\n                    return true;\n                }\n            }\n        } else {\n            final int[] searchChars = CharUtils.toCodePoints(searchCharacters);\n            final int[] strChars = new int[length];\n            int strCount = 0;\n            for (int i = 0; i < length; ) {\n                final int ch = Character.codePointAt(sequence, i);\n                strChars[strCount++] = ch;\n                i += Character.charCount(ch);\n            }\n            final int strEnd = strCount;\n            outer:\n            for (int i = 0; i < searchLength; i++) {\n                final int searchChar = searchChars[i];\n                if (Character.isSupplementaryCodePoint(searchChar)) {\n                    for (int j = 0; j < strEnd - 1; j++) {\n                        final int surrogate = strChars[j];\n                        if (surrogate == searchChar) {\n                            return true;\n                        }\n                        final char[] chars = Character.toChars(searchChar);\n                        if (surrogate == chars[0] && j < strEnd - 1 && strChars[j + 1] == chars[1]) {\n                            return true;\n                        }\n                    }\n                } else {\n                    for (int j = 0; j < strEnd; j++) {\n                        if (strChars[j] == searchChar) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    \n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}\n\nclass ArrayUtils {\n    public static boolean isEmpty(Object[] array) {\n        return array == null || array.length == 0;\n    }\n}\n\nclass CharUtils {\n    public static int[] toCodePoints(char[] chars) {\n        if (chars == null) {\n            return null;\n        }\n        if (chars.length == 0) {\n            return new int[0];\n        }\n        String str = new String(chars);\n        return str.codePoints().toArray();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..80d670c0 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,82 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+            return false;\n+        }\n+        final int length = sequence.length();\n+        final int searchLength = searchCharacters.length;\n+        if (searchLength == 1) {\n+            final char searchChar = searchCharacters[0];\n+            for (int i = 0; i < length; i++) {\n+                if (sequence.charAt(i) == searchChar) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            final int[] searchChars = CharUtils.toCodePoints(searchCharacters);\n+            final int[] strChars = new int[length];\n+            int strCount = 0;\n+            for (int i = 0; i < length; ) {\n+                final int ch = Character.codePointAt(sequence, i);\n+                strChars[strCount++] = ch;\n+                i += Character.charCount(ch);\n+            }\n+            final int strEnd = strCount;\n+            outer:\n+            for (int i = 0; i < searchLength; i++) {\n+                final int searchChar = searchChars[i];\n+                if (Character.isSupplementaryCodePoint(searchChar)) {\n+                    for (int j = 0; j < strEnd - 1; j++) {\n+                        final int surrogate = strChars[j];\n+                        if (surrogate == searchChar) {\n+                            return true;\n+                        }\n+                        final char[] chars = Character.toChars(searchChar);\n+                        if (surrogate == chars[0] && j < strEnd - 1 && strChars[j + 1] == chars[1]) {\n+                            return true;\n+                        }\n+                    }\n+                } else {\n+                    for (int j = 0; j < strEnd; j++) {\n+                        if (strChars[j] == searchChar) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n+\n+class ArrayUtils {\n+    public static boolean isEmpty(Object[] array) {\n+        return array == null || array.length == 0;\n+    }\n+}\n+\n+class CharUtils {\n+    public static int[] toCodePoints(char[] chars) {\n+        if (chars == null) {\n+            return null;\n+        }\n+        if (chars.length == 0) {\n+            return new int[0];\n+        }\n+        String str = new String(chars);\n+        return str.codePoints().toArray();\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}