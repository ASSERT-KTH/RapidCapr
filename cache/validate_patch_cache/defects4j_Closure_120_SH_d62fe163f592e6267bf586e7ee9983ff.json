{
    "patch": "        if (ref == getInitializingReference()) {\n          return true;\n        } else if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n          return true;\n        } else if (block.isFunction) {\n          block = block.getParent();\n        } else if (block.isLoop) {\n          return false;\n        } else {\n          // Continue traversing up the chain.\n          block = block.getParent();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..56a5cabf 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref == getInitializingReference()) {\n+          return true;\n+        } else if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+          return true;\n+        } else if (block.isFunction) {\n+          block = block.getParent();\n+        } else if (block.isLoop) {\n+          return false;\n+        } else {\n+          // Continue traversing up the chain.\n+          block = block.getParent();\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}