{
    "patch": "            pType == Token.VAR ||\n            (NodeUtil.isGet(parent) &&\n             (NodeUtil.isName(parent.getFirstChild()) ||\n              NodeUtil.isArrayPattern(parent.getFirstChild()) ||\n              parent.getFirstChild().getType() == Token.OBJECT_PATTERN)))) {\n        return false;\n      }\n\n      Node grandParent = parent.getParent();\n      if (NodeUtil.isPrototypeProperty(grandParent)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..aa2c1072 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+            pType == Token.VAR ||\n+            (NodeUtil.isGet(parent) &&\n+             (NodeUtil.isName(parent.getFirstChild()) ||\n+              NodeUtil.isArrayPattern(parent.getFirstChild()) ||\n+              parent.getFirstChild().getType() == Token.OBJECT_PATTERN)))) {\n+        return false;\n+      }\n+\n+      Node grandParent = parent.getParent();\n+      if (NodeUtil.isPrototypeProperty(grandParent)) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}