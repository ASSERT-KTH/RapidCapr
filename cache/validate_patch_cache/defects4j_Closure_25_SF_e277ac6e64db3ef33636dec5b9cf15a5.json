{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      // Check if the constructor type is a function type.\n      FunctionType ct = constructorType.toMaybeFunctionType();\n\n      // If the constructor type is not a function type, trying to infer the type from the\n      // constructor itself.\n      if (ct == null) {\n        // If the constructor is a variable (as opposed to a function declaration)\n        // or a function expression, we can't infer the instance type.\n        // For example, in: `const f = function() {}; const x = new f()`,\n        // we cannot determine the type of `x`.\n        if (constructor.isName() || constructor.isFunction()) {\n          type = null;\n        } else {\n          // If the constructor is a function declaration or a class declaration,\n          // we can infer the instance type from the return type or the `this` type.\n          // For example, in: `/** @return {!Array<number>} */ function f() {}; const x = new f()`,\n          // the instance type of x will be `Array<number>`.\n\n          // If the constructor is a class declaration, we use the instance type.\n          if (constructor.isClass()) {\n            ClassNodeType classNodeType = (ClassNodeType) constructor.getJSType();\n            if (classNodeType != null && classNodeType.isGeneric()) {\n              type = getNativeType(OBJECT_TYPE);\n            } else {\n              ObjectType instanceType = classNodeType.getClassType().getImplicitPrototype();\n              JSDocInfo classJSDocInfo = NodeUtil.getBestJSDocInfo(constructor);\n              if (classJSDocInfo != null && classJSDocInfo.getThisType() != null) {\n                instanceType =\n                    JSType.join(instanceType, classJSDocInfo.getThisType()).toObjectType();\n              }\n              type = instanceType;\n            }\n          } else {\n            // If the constructor is a function declaration, we check if it has a `@constructor` JSDoc\n            // annotation or a return type that is not unknown or undefined, and if so, we use the instance\n            // type of the constructor.\n            JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(constructor);\n            boolean isConstructor = jsDocInfo != null && jsDocInfo.isConstructor();\n            JSType returnType = NodeUtil.getBestJSType(constructor);\n            // If there is no JSDoc annotation or return type, we cannot infer the type.\n            if (isConstructor || (returnType != null && !returnType.isUnknownType() && !returnType.isNullType())) {\n              type = getReturnType(constructor);\n            }\n          }\n        }\n      } else if (ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n  n.setJSType(type.restrictByNotNullOrUndefined());\n\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..2f788279 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,77 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      // Check if the constructor type is a function type.\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+\n+      // If the constructor type is not a function type, trying to infer the type from the\n+      // constructor itself.\n+      if (ct == null) {\n+        // If the constructor is a variable (as opposed to a function declaration)\n+        // or a function expression, we can't infer the instance type.\n+        // For example, in: `const f = function() {}; const x = new f()`,\n+        // we cannot determine the type of `x`.\n+        if (constructor.isName() || constructor.isFunction()) {\n+          type = null;\n+        } else {\n+          // If the constructor is a function declaration or a class declaration,\n+          // we can infer the instance type from the return type or the `this` type.\n+          // For example, in: `/** @return {!Array<number>} */ function f() {}; const x = new f()`,\n+          // the instance type of x will be `Array<number>`.\n+\n+          // If the constructor is a class declaration, we use the instance type.\n+          if (constructor.isClass()) {\n+            ClassNodeType classNodeType = (ClassNodeType) constructor.getJSType();\n+            if (classNodeType != null && classNodeType.isGeneric()) {\n+              type = getNativeType(OBJECT_TYPE);\n+            } else {\n+              ObjectType instanceType = classNodeType.getClassType().getImplicitPrototype();\n+              JSDocInfo classJSDocInfo = NodeUtil.getBestJSDocInfo(constructor);\n+              if (classJSDocInfo != null && classJSDocInfo.getThisType() != null) {\n+                instanceType =\n+                    JSType.join(instanceType, classJSDocInfo.getThisType()).toObjectType();\n+              }\n+              type = instanceType;\n+            }\n+          } else {\n+            // If the constructor is a function declaration, we check if it has a `@constructor` JSDoc\n+            // annotation or a return type that is not unknown or undefined, and if so, we use the instance\n+            // type of the constructor.\n+            JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(constructor);\n+            boolean isConstructor = jsDocInfo != null && jsDocInfo.isConstructor();\n+            JSType returnType = NodeUtil.getBestJSType(constructor);\n+            // If there is no JSDoc annotation or return type, we cannot infer the type.\n+            if (isConstructor || (returnType != null && !returnType.isUnknownType() && !returnType.isNullType())) {\n+              type = getReturnType(constructor);\n+            }\n+          }\n         }\n+      } else if (ct.isConstructor()) {\n+        type = ct.getInstanceType();\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  if (type == null) {\n+    type = getNativeType(UNKNOWN_TYPE);\n+  }\n+  n.setJSType(type.restrictByNotNullOrUndefined());\n+\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}