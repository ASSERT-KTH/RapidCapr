{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\nif (mock instanceof Factory) {\n    try {\n        ((Factory) mock).getCallbacks();   // This line is added for lazy initialization\n        ((Factory) mock).setCallback(0, newFilter);\n    } catch (IllegalStateException e) {\n        ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n    }\n} else {\n    throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..861f89627 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+if (mock instanceof Factory) {\n+    try {\n+        ((Factory) mock).getCallbacks();   // This line is added for lazy initialization\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } catch (IllegalStateException e) {\n+        ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+    }\n+} else {\n+    throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}