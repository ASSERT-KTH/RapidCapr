{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    Node body = function.getLastChild();\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Remove the unreferenced parameter names and nodes.\n      Set<String> referencedNames = new HashSet<>(referenced.size());\n      for (Var ref : referenced) {\n        referencedNames.add(ref.getName());\n      }\n\n      Node arg = argList.getFirstChild();\n      while (arg != null) {\n        Node next = arg.getNext();\n        if (arg.isDefaultValue()) {\n          removeUnreferencedFunctionArgs(fnScope);\n          return;\n        }\n        String name = arg.getString();\n        if (!referencedNames.contains(name)) {\n          paramRemoved = true;\n          argList.removeChild(arg);\n          body.removeChild(body.getNext());\n          compiler.reportCodeChange();\n        } else {\n          body = arg.getNext();\n        }\n        arg = next;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cc15aabc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    Node body = function.getLastChild();\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Remove the unreferenced parameter names and nodes.\n+      Set<String> referencedNames = new HashSet<>(referenced.size());\n+      for (Var ref : referenced) {\n+        referencedNames.add(ref.getName());\n+      }\n+\n+      Node arg = argList.getFirstChild();\n+      while (arg != null) {\n+        Node next = arg.getNext();\n+        if (arg.isDefaultValue()) {\n+          removeUnreferencedFunctionArgs(fnScope);\n+          return;\n+        }\n+        String name = arg.getString();\n+        if (!referencedNames.contains(name)) {\n+          paramRemoved = true;\n+          argList.removeChild(arg);\n+          body.removeChild(body.getNext());\n+          compiler.reportCodeChange();\n+        } else {\n+          body = arg.getNext();\n+        }\n+        arg = next;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}