{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // find total millis\n    long totalMillis = getMillis()\n            + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n            + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n            + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n            + (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n            + (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // calculate years, months, and days\n    int months = getMonths();\n    int years = getYears();\n    int weeks = getWeeks();\n    int days = getDays();\n    if (type.isSupported(DurationFieldType.years())) {\n        years += months / 12;\n        months %= 12;\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        months += 12 * years;\n        years = 0;\n    }\n    if (type.isSupported(DurationFieldType.weeks())) {\n        weeks += days / 7;\n        days %= 7;\n    }\n\n    // calculate remaining fields according to type\n    days += (int) (totalMillis / DateTimeConstants.MILLIS_PER_DAY);\n    totalMillis %= DateTimeConstants.MILLIS_PER_DAY;\n    if (type.isSupported(DurationFieldType.hours())) {\n        int hours = (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);\n        totalMillis %= DateTimeConstants.MILLIS_PER_HOUR;\n\n        // if remaining millis cause an overflow into hours, adjust\n        if (totalMillis < 0 && hours > 0) {\n            hours--;\n            totalMillis += DateTimeConstants.MILLIS_PER_HOUR;\n        }\n        days += FieldUtils.safeDivide(hours, 24);\n        hours = FieldUtils.safeMod(hours, 24);\n        return new Period(years, months, weeks, days, hours,\n                          getMinutes(), getSeconds(), (int) totalMillis, type);\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        int minutes = (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n        totalMillis %= DateTimeConstants.MILLIS_PER_MINUTE;\n\n        // if remaining millis cause an overflow into minutes, adjust\n        if (totalMillis < 0 && minutes > 0) {\n            minutes--;\n            totalMillis += DateTimeConstants.MILLIS_PER_MINUTE;\n        }\n        int hours = getHours() + FieldUtils.safeDivide(minutes, 60);\n        minutes = FieldUtils.safeMod(minutes, 60);\n        days += FieldUtils.safeDivide(hours, 24);\n        hours = FieldUtils.safeMod(hours, 24);\n        return new Period(years, months, weeks, days, hours,\n                          minutes, getSeconds(), (int) totalMillis, type);\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        int seconds = (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);\n        totalMillis %= DateTimeConstants.MILLIS_PER_SECOND;\n\n        // if remaining millis cause an overflow into seconds, adjust\n        if (totalMillis < 0 && seconds > 0) {\n            seconds--;\n            totalMillis += DateTimeConstants.MILLIS_PER_SECOND;\n        }\n        int minutes = getMinutes() + FieldUtils.safeDivide(seconds, 60);\n        seconds = FieldUtils.safeMod(seconds, 60);\n        int hours = getHours() + FieldUtils.safeDivide(minutes, 60);\n        minutes = FieldUtils.safeMod(minutes, 60);\n        days += FieldUtils.safeDivide(hours, 24);\n        hours = FieldUtils.safeMod(hours, 24);\n        return new Period(years, months, weeks, days, hours,\n                          minutes, seconds, (int) totalMillis, type);\n    }\n    // millis only\n    int hours = getHours() + (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);\n    totalMillis %= DateTimeConstants.MILLIS_PER_HOUR;\n\n    // if remaining millis cause an overflow into hours, adjust\n    if (totalMillis < 0 && hours > 0) {\n        hours--;\n        totalMillis += DateTimeConstants.MILLIS_PER_HOUR;\n    }\n    int minutes = getMinutes() + (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n    totalMillis %= DateTimeConstants.MILLIS_PER_MINUTE;\n\n    // if remaining millis cause an overflow into minutes, adjust\n    if (totalMillis < 0 && minutes > 0) {\n        minutes--;\n        totalMillis += DateTimeConstants.MILLIS_PER_MINUTE;\n    }\n    int seconds = getSeconds() + (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);\n    totalMillis %= DateTimeConstants.MILLIS_PER_SECOND;\n\n    // if remaining millis cause an overflow into seconds, adjust\n    if (totalMillis < 0 && seconds > 0) {\n        seconds--;\n        totalMillis += DateTimeConstants.MILLIS_PER_SECOND;\n    }\n    days += FieldUtils.safeDivide(hours, 24);\n    hours = FieldUtils.safeMod(hours, 24);\n    return new Period(years, months, weeks, days, hours,\n                      minutes, seconds, (int) totalMillis, type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..ca6123d7 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,115 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // find total millis\n+    long totalMillis = getMillis()\n+            + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+            + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+            + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+            + (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+            + (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    // calculate years, months, and days\n+    int months = getMonths();\n+    int years = getYears();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years += months / 12;\n+        months %= 12;\n+    }\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months += 12 * years;\n+        years = 0;\n+    }\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        weeks += days / 7;\n+        days %= 7;\n+    }\n+\n+    // calculate remaining fields according to type\n+    days += (int) (totalMillis / DateTimeConstants.MILLIS_PER_DAY);\n+    totalMillis %= DateTimeConstants.MILLIS_PER_DAY;\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        int hours = (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);\n+        totalMillis %= DateTimeConstants.MILLIS_PER_HOUR;\n+\n+        // if remaining millis cause an overflow into hours, adjust\n+        if (totalMillis < 0 && hours > 0) {\n+            hours--;\n+            totalMillis += DateTimeConstants.MILLIS_PER_HOUR;\n         }\n-        return result;\n-    }\n+        days += FieldUtils.safeDivide(hours, 24);\n+        hours = FieldUtils.safeMod(hours, 24);\n+        return new Period(years, months, weeks, days, hours,\n+                          getMinutes(), getSeconds(), (int) totalMillis, type);\n+    }\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        int minutes = (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n+        totalMillis %= DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+        // if remaining millis cause an overflow into minutes, adjust\n+        if (totalMillis < 0 && minutes > 0) {\n+            minutes--;\n+            totalMillis += DateTimeConstants.MILLIS_PER_MINUTE;\n+        }\n+        int hours = getHours() + FieldUtils.safeDivide(minutes, 60);\n+        minutes = FieldUtils.safeMod(minutes, 60);\n+        days += FieldUtils.safeDivide(hours, 24);\n+        hours = FieldUtils.safeMod(hours, 24);\n+        return new Period(years, months, weeks, days, hours,\n+                          minutes, getSeconds(), (int) totalMillis, type);\n+    }\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        int seconds = (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);\n+        totalMillis %= DateTimeConstants.MILLIS_PER_SECOND;\n+\n+        // if remaining millis cause an overflow into seconds, adjust\n+        if (totalMillis < 0 && seconds > 0) {\n+            seconds--;\n+            totalMillis += DateTimeConstants.MILLIS_PER_SECOND;\n+        }\n+        int minutes = getMinutes() + FieldUtils.safeDivide(seconds, 60);\n+        seconds = FieldUtils.safeMod(seconds, 60);\n+        int hours = getHours() + FieldUtils.safeDivide(minutes, 60);\n+        minutes = FieldUtils.safeMod(minutes, 60);\n+        days += FieldUtils.safeDivide(hours, 24);\n+        hours = FieldUtils.safeMod(hours, 24);\n+        return new Period(years, months, weeks, days, hours,\n+                          minutes, seconds, (int) totalMillis, type);\n+    }\n+    // millis only\n+    int hours = getHours() + (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);\n+    totalMillis %= DateTimeConstants.MILLIS_PER_HOUR;\n+\n+    // if remaining millis cause an overflow into hours, adjust\n+    if (totalMillis < 0 && hours > 0) {\n+        hours--;\n+        totalMillis += DateTimeConstants.MILLIS_PER_HOUR;\n+    }\n+    int minutes = getMinutes() + (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n+    totalMillis %= DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    // if remaining millis cause an overflow into minutes, adjust\n+    if (totalMillis < 0 && minutes > 0) {\n+        minutes--;\n+        totalMillis += DateTimeConstants.MILLIS_PER_MINUTE;\n+    }\n+    int seconds = getSeconds() + (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);\n+    totalMillis %= DateTimeConstants.MILLIS_PER_SECOND;\n+\n+    // if remaining millis cause an overflow into seconds, adjust\n+    if (totalMillis < 0 && seconds > 0) {\n+        seconds--;\n+        totalMillis += DateTimeConstants.MILLIS_PER_SECOND;\n+    }\n+    days += FieldUtils.safeDivide(hours, 24);\n+    hours = FieldUtils.safeMod(hours, 24);\n+    return new Period(years, months, weeks, days, hours,\n+                      minutes, seconds, (int) totalMillis, type);\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}