{
    "patch": "public double getTypedPercent(String json) {\n    ObjectMapper mapper = new ObjectMapper();\n    double typedCount = 0;\n    double totalCount = 0;\n    try {\n        JsonNode root = mapper.readTree(json);\n        Iterator<Entry<String, JsonNode>> fields = root.fields();\n        while (fields.hasNext()) {\n            Entry<String, JsonNode> field = fields.next();\n            JsonNode node = field.getValue();\n            if (node.get(\"type\") != null) {\n                typedCount++;\n            }\n            totalCount++;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return (typedCount/totalCount)*100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e0bb2735 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    ObjectMapper mapper = new ObjectMapper();\n+    double typedCount = 0;\n+    double totalCount = 0;\n+    try {\n+        JsonNode root = mapper.readTree(json);\n+        Iterator<Entry<String, JsonNode>> fields = root.fields();\n+        while (fields.hasNext()) {\n+            Entry<String, JsonNode> field = fields.next();\n+            JsonNode node = field.getValue();\n+            if (node.get(\"type\") != null) {\n+                typedCount++;\n+            }\n+            totalCount++;\n+        }\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    return (typedCount/totalCount)*100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}