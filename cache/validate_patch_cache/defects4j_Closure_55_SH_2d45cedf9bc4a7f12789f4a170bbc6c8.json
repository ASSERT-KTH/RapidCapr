{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (!NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isFunctionExpression(n)) {\n      return false;\n    }\n    Node parent = n.getParent();\n    int parentType = parent.getType();\n    return parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n        parentType == Token.VAR || parentType == Token.BLOCK;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..de99e7dc 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,15 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (!NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isFunctionExpression(n)) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    int parentType = parent.getType();\n+    return parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n+        parentType == Token.VAR || parentType == Token.BLOCK;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}