{
    "patch": "public Map<String, String> parseQuery(String query) {\n    Map<String, String> map = new HashMap<>();\n    if (query != null && query.length() > 0) {\n        for (String param : query.split(\"&\")) {\n            String[] pair = param.split(\"=\");\n            String key = null;\n            String value = null;\n            if (pair.length > 0) {\n                key = pair[0];\n            }\n            if (pair.length > 1) {\n                value = pair[1];\n            }\n            if (key != null || value != null) {\n                key = key == null ? \"\" : URLDecoder.decode(key);\n                value = value == null ? \"\" : URLDecoder.decode(value);\n                map.put(key, value);\n            }\n        }\n    }\n    return map;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..1dd276256 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,28 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Map<String, String> parseQuery(String query) {\n+    Map<String, String> map = new HashMap<>();\n+    if (query != null && query.length() > 0) {\n+        for (String param : query.split(\"&\")) {\n+            String[] pair = param.split(\"=\");\n+            String key = null;\n+            String value = null;\n+            if (pair.length > 0) {\n+                key = pair[0];\n+            }\n+            if (pair.length > 1) {\n+                value = pair[1];\n+            }\n+            if (key != null || value != null) {\n+                key = key == null ? \"\" : URLDecoder.decode(key);\n+                value = value == null ? \"\" : URLDecoder.decode(value);\n+                map.put(key, value);\n+            }\n+        }\n+    }\n+    return map;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}