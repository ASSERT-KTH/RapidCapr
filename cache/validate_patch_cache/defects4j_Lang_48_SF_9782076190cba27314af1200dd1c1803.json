{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (lhs == rhs) {\n        // Short circuit if equal\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        // If either is null, they are not equal\n        this.setEquals(false);\n        return this;\n    }\n    Class<?> lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        // If not an array, use the Object equals method\n        this.setEquals(lhs.equals(rhs));\n    } else if (lhsClass != rhs.getClass()) {\n        // If arrays are different types, they are not equal\n        this.setEquals(false);\n    } else if (lhs instanceof long[]) {\n        // Handle array of primitive longs\n        this.setEquals(Arrays.equals((long[]) lhs, (long[]) rhs));\n    } else if (lhs instanceof int[]) {\n        // Handle array of primitive ints\n        this.setEquals(Arrays.equals((int[]) lhs, (int[]) rhs));\n    } else if (lhs instanceof short[]) {\n        // Handle array of primitive shorts\n        this.setEquals(Arrays.equals((short[]) lhs, (short[]) rhs));\n    } else if (lhs instanceof char[]) {\n        // Handle array of primitive chars\n        this.setEquals(Arrays.equals((char[]) lhs, (char[]) rhs));\n    } else if (lhs instanceof byte[]) {\n        // Handle array of primitive bytes\n        this.setEquals(Arrays.equals((byte[]) lhs, (byte[]) rhs));\n    } else if (lhs instanceof double[]) {\n        // Handle array of primitive doubles\n        this.setEquals(Arrays.equals((double[]) lhs, (double[]) rhs));\n    } else if (lhs instanceof float[]) {\n        // Handle array of primitive floats\n        this.setEquals(Arrays.equals((float[]) lhs, (float[]) rhs));\n    } else if (lhs instanceof boolean[]) {\n        // Handle array of primitive booleans\n        this.setEquals(Arrays.equals((boolean[]) lhs, (boolean[]) rhs));\n    } else {\n        // Handle array of objects\n        Object[] lhsArray = (Object[]) lhs;\n        Object[] rhsArray = (Object[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhsArray.length; i++) {\n            // Recursively append each element of the array\n            this.append(lhsArray[i], rhsArray[i]);\n            if (!this.isEquals()) {\n                return this;\n            }\n        }\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..6e186cee 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,65 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (lhs == rhs) {\n+        // Short circuit if equal\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        // If either is null, they are not equal\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class<?> lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        // If not an array, use the Object equals method\n+        this.setEquals(lhs.equals(rhs));\n+    } else if (lhsClass != rhs.getClass()) {\n+        // If arrays are different types, they are not equal\n+        this.setEquals(false);\n+    } else if (lhs instanceof long[]) {\n+        // Handle array of primitive longs\n+        this.setEquals(Arrays.equals((long[]) lhs, (long[]) rhs));\n+    } else if (lhs instanceof int[]) {\n+        // Handle array of primitive ints\n+        this.setEquals(Arrays.equals((int[]) lhs, (int[]) rhs));\n+    } else if (lhs instanceof short[]) {\n+        // Handle array of primitive shorts\n+        this.setEquals(Arrays.equals((short[]) lhs, (short[]) rhs));\n+    } else if (lhs instanceof char[]) {\n+        // Handle array of primitive chars\n+        this.setEquals(Arrays.equals((char[]) lhs, (char[]) rhs));\n+    } else if (lhs instanceof byte[]) {\n+        // Handle array of primitive bytes\n+        this.setEquals(Arrays.equals((byte[]) lhs, (byte[]) rhs));\n+    } else if (lhs instanceof double[]) {\n+        // Handle array of primitive doubles\n+        this.setEquals(Arrays.equals((double[]) lhs, (double[]) rhs));\n+    } else if (lhs instanceof float[]) {\n+        // Handle array of primitive floats\n+        this.setEquals(Arrays.equals((float[]) lhs, (float[]) rhs));\n+    } else if (lhs instanceof boolean[]) {\n+        // Handle array of primitive booleans\n+        this.setEquals(Arrays.equals((boolean[]) lhs, (boolean[]) rhs));\n+    } else {\n+        // Handle array of objects\n+        Object[] lhsArray = (Object[]) lhs;\n+        Object[] rhsArray = (Object[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+        for (int i = 0; i < lhsArray.length; i++) {\n+            // Recursively append each element of the array\n+            this.append(lhsArray[i], rhsArray[i]);\n+            if (!this.isEquals()) {\n+                return this;\n+            }\n         }\n-        return this;\n     }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}