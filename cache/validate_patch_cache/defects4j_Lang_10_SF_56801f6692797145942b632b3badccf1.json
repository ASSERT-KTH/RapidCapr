{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    StringBuilder eraRegex = null; // for era handling\n    StringBuilder eraSuffix = null; // for era suffix handling\n    StringBuilder eraPrefix = null; // for era prefix handling\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                }\n                break;\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '?':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n                regex.append(c);\n                break;\n            default:\n                regex.append(c);\n                break;\n            case 'G': // handle era indicator\n                if (i + 1 < value.length() && Character.toUpperCase(value.charAt(i + 1)) == 'G') {\n                    int eraStartIndex = i;\n                    i += 2;\n                    while (i < value.length() && value.charAt(i) == 'G') {\n                        i++;\n                    }\n                    int eraLength = i - eraStartIndex; // count the number of \"G\" characters\n                    if (eraLength % 2 == 0) { // Gregorian calendar era\n                        if (eraPrefix == null) {\n                            eraPrefix = new StringBuilder();\n                        }\n                        eraPrefix.append(\"(?<=(\\\\s|^))AD|(?<=(\\\\s|^))\u043f\u0440\\\\. \u043d\\\\. \u0435\\\\.|(?<=(\\\\s|^))\u043d\\\\.\u0435\\\\.\");\n                    } else { // non-Gregorian calendar era\n                        if (eraPrefix == null) {\n                            eraPrefix = new StringBuilder();\n                        }\n                        eraPrefix.append(\"(?<=(\\\\s|^))BC|(?<=(\\\\s|^))\u043d\\\\.\u0432\\\\.\");\n                    }\n                    eraSuffix = new StringBuilder(\"(?<=(\\\\s|^))\"); // Add era suffix to regex\n                    i--;\n                } else {\n                    regex.append(c);\n                }\n                break;\n        }\n    }\n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n    if (eraSuffix != null && eraPrefix != null) {\n        eraSuffix.append(\"\\\\s*\");\n        eraRegex = new StringBuilder(eraPrefix.toString()).append(eraSuffix.toString());\n        regex.insert(0, eraRegex.toString());\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..ab0bc59a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,28 +300,30 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    StringBuilder eraRegex = null; // for era handling\n+    StringBuilder eraSuffix = null; // for era suffix handling\n+    StringBuilder eraPrefix = null; // for era prefix handling\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i == value.length()) {\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n                 break;\n-            case '?':\n             case '[':\n             case ']':\n             case '(':\n@@ -330,17 +332,55 @@ public class FastDateParser implements DateParser, Serializable {\n             case '}':\n             case '\\\\':\n             case '|':\n+            case '?':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                regex.append(c);\n+                break;\n+            default:\n+                regex.append(c);\n+                break;\n+            case 'G': // handle era indicator\n+                if (i + 1 < value.length() && Character.toUpperCase(value.charAt(i + 1)) == 'G') {\n+                    int eraStartIndex = i;\n+                    i += 2;\n+                    while (i < value.length() && value.charAt(i) == 'G') {\n+                        i++;\n+                    }\n+                    int eraLength = i - eraStartIndex; // count the number of \"G\" characters\n+                    if (eraLength % 2 == 0) { // Gregorian calendar era\n+                        if (eraPrefix == null) {\n+                            eraPrefix = new StringBuilder();\n+                        }\n+                        eraPrefix.append(\"(?<=(\\\\s|^))AD|(?<=(\\\\s|^))\u043f\u0440\\\\. \u043d\\\\. \u0435\\\\.|(?<=(\\\\s|^))\u043d\\\\.\u0435\\\\.\");\n+                    } else { // non-Gregorian calendar era\n+                        if (eraPrefix == null) {\n+                            eraPrefix = new StringBuilder();\n+                        }\n+                        eraPrefix.append(\"(?<=(\\\\s|^))BC|(?<=(\\\\s|^))\u043d\\\\.\u0432\\\\.\");\n+                    }\n+                    eraSuffix = new StringBuilder(\"(?<=(\\\\s|^))\"); // Add era suffix to regex\n+                    i--;\n+                } else {\n+                    regex.append(c);\n+                }\n+                break;\n         }\n-        return regex;\n     }\n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n+    }\n+    if (eraSuffix != null && eraPrefix != null) {\n+        eraSuffix.append(\"\\\\s*\");\n+        eraRegex = new StringBuilder(eraPrefix.toString()).append(eraSuffix.toString());\n+        regex.insert(0, eraRegex.toString());\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Locale uk failed with GGGG/yyyy/MMMM/dddd/hhhh/aaaa/EEEE/ZZZZ era BC",
    "test_result": "FAIL"
}