{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition dec = new LUDecomposition(m);\n    final RealMatrix l = dec.getL();\n    final RealMatrix u = dec.getU();\n    final int n = m.getRowDimension();\n    final double[][] sqrt = new double[n][n];\n    \n    for (int j = 0; j < n; j++) {\n        for (int i = 0; i <= j; i++) {\n            double sum = 0;\n            for (int k = 0; k < i; k++) {\n                sum += sqrt[j][k] * sqrt[i][k];\n            }\n            if (i == j) {\n                sqrt[i][i] = FastMath.sqrt(u.getEntry(i, i) - sum);\n            } else {\n                sqrt[j][i] = (1 / sqrt[i][i]) * (u.getEntry(i, j) - sum);\n            }\n        }\n    }\n    \n    return MatrixUtils.createRealMatrix(sqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4f735b15a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition dec = new LUDecomposition(m);\n+    final RealMatrix l = dec.getL();\n+    final RealMatrix u = dec.getU();\n+    final int n = m.getRowDimension();\n+    final double[][] sqrt = new double[n][n];\n+    \n+    for (int j = 0; j < n; j++) {\n+        for (int i = 0; i <= j; i++) {\n+            double sum = 0;\n+            for (int k = 0; k < i; k++) {\n+                sum += sqrt[j][k] * sqrt[i][k];\n+            }\n+            if (i == j) {\n+                sqrt[i][i] = FastMath.sqrt(u.getEntry(i, i) - sum);\n+            } else {\n+                sqrt[j][i] = (1 / sqrt[i][i]) * (u.getEntry(i, j) - sum);\n+            }\n+        }\n     }\n+    \n+    return MatrixUtils.createRealMatrix(sqrt);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}