{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          Node newTargetNode = n.getParent().getTypeI() == Token.AWAIT ? n.getGrandparent() : n.getNext();\n          type = getRegistry().createAnonymousObjectType(ct);\n          ObjectType.inferAllPropertiesDeclaredByFunction(type, newTargetNode);\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..258c97e6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,7 +1033,6 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1045,13 +1044,12 @@ class TypeInference\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n         if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+          Node newTargetNode = n.getParent().getTypeI() == Token.AWAIT ? n.getGrandparent() : n.getNext();\n+          type = getRegistry().createAnonymousObjectType(ct);\n+          ObjectType.inferAllPropertiesDeclaredByFunction(type, newTargetNode);\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}