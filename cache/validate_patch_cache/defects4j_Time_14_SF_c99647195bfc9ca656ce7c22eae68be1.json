{
    "patch": "        \n        int[] normalizedValues = partial.getPartialValues();\n        // Ensure that date is valid before adding months\n        normalizeMonthDay(normalizedValues);\n        \n        int newMonth = normalizedValues[DateTimeFieldType.monthOfYear()] + valueToAdd;\n        int newYear = normalizedValues[DateTimeFieldType.year()].get();\n        int newDayOfMonth = normalizedValues[DateTimeFieldType.dayOfMonth()].getMaximumValue(newYear, newMonth);\n        \n        MutableDateTime dt = new MutableDateTime(newYear, newMonth, newDayOfMonth, 0, 0, 0, 0, iChronology);\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            dt.setPartial(partial, values, i);\n        }\n        dt.add(fieldIndex, valueToAdd);\n        return iChronology.get(partial, dt.getMillis());\n    }\n    \n    private void normalizeMonthDay(int[] values) {\n        DateTimeFieldType monthField = DateTimeFieldType.monthOfYear();\n        DateTimeFieldType dayField = DateTimeFieldType.dayOfMonth();\n        \n        if (values[monthField.getIndex()] == 2 && values[dayField.getIndex()] == 29) {\n            // If the date is February 29th, change it to February 28th\n            values[dayField.getIndex()] = 28;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f8c789ef 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        \n+        int[] normalizedValues = partial.getPartialValues();\n+        // Ensure that date is valid before adding months\n+        normalizeMonthDay(normalizedValues);\n+        \n+        int newMonth = normalizedValues[DateTimeFieldType.monthOfYear()] + valueToAdd;\n+        int newYear = normalizedValues[DateTimeFieldType.year()].get();\n+        int newDayOfMonth = normalizedValues[DateTimeFieldType.dayOfMonth()].getMaximumValue(newYear, newMonth);\n+        \n+        MutableDateTime dt = new MutableDateTime(newYear, newMonth, newDayOfMonth, 0, 0, 0, 0, iChronology);\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            dt.setPartial(partial, values, i);\n         }\n+        dt.add(fieldIndex, valueToAdd);\n+        return iChronology.get(partial, dt.getMillis());\n     }\n+    \n+    private void normalizeMonthDay(int[] values) {\n+        DateTimeFieldType monthField = DateTimeFieldType.monthOfYear();\n+        DateTimeFieldType dayField = DateTimeFieldType.dayOfMonth();\n+        \n+        if (values[monthField.getIndex()] == 2 && values[dayField.getIndex()] == 29) {\n+            // If the date is February 29th, change it to February 28th\n+            values[dayField.getIndex()] = 28;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}