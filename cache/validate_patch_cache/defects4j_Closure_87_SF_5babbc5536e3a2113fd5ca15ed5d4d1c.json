{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    if (NodeUtil.isExpressionNode(maybeExpr)) {\n      // Check whether the result is used by a parent node, such as VAR, RETURN, or EXPR_RESULT.\n      Node parent = n.getParent();\n      if (parent != null) {\n        int parentType = parent.getType();\n        if (parentType == Token.ASSIGN || parentType == Token.VAR || parentType == Token.RETURN ||\n            parentType == Token.CONST || parentType == Token.LET || parentType == Token.EXPR_RESULT) {\n          // Check if the expression has side effects.\n          if (!NodeUtil.mayHaveSideEffects(maybeExpr)) {\n            // Check if the expression is a simple expression or if it is a more complex expression\n            // that is not a function declaration.\n            int exprType = maybeExpr.getType();\n            if (exprType == Token.NAME || exprType == Token.STRING || exprType == Token.NUMBER ||\n                exprType == Token.NULL || exprType == Token.FALSE || exprType == Token.TRUE ||\n                (exprType == Token.FUNCTION && !NodeUtil.isStatementBlock(parent.getParent()))) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1a5003e3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,33 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    if (NodeUtil.isExpressionNode(maybeExpr)) {\n+      // Check whether the result is used by a parent node, such as VAR, RETURN, or EXPR_RESULT.\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        int parentType = parent.getType();\n+        if (parentType == Token.ASSIGN || parentType == Token.VAR || parentType == Token.RETURN ||\n+            parentType == Token.CONST || parentType == Token.LET || parentType == Token.EXPR_RESULT) {\n+          // Check if the expression has side effects.\n+          if (!NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+            // Check if the expression is a simple expression or if it is a more complex expression\n+            // that is not a function declaration.\n+            int exprType = maybeExpr.getType();\n+            if (exprType == Token.NAME || exprType == Token.STRING || exprType == Token.NUMBER ||\n+                exprType == Token.NULL || exprType == Token.FALSE || exprType == Token.TRUE ||\n+                (exprType == Token.FUNCTION && !NodeUtil.isStatementBlock(parent.getParent()))) {\n+              return true;\n+            }\n+          }\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}