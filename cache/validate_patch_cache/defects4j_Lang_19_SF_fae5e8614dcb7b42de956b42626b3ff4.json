{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index + 2 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        // Not an entity\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    // Check for hexadecimal representation\n    if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        start++;\n        isHex = true;\n    }\n\n    int end = start;\n\n    // Look for the semicolon, but also check for any invalid characters\n    while (end < seqEnd && input.charAt(end) != ';') {\n        char c = input.charAt(end);\n        if (isHex && !Character.isDigit(c) && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {\n            // Invalid character in the hexadecimal representation\n            return 0;\n        }\n        if (!isHex && !Character.isDigit(c)) {\n            // Invalid character in the decimal representation\n            return 0;\n        }\n        end++;\n    }\n\n    if (end == seqEnd) {\n        if (isHex && end - start > 0) {\n            // Incomplete hexadecimal entity\n            return 0;\n        } else {\n            // Valid non-hexadecimal entity without semicolon\n            return 1;\n        }\n    }\n\n    String entityStr = input.subSequence(start, end).toString();\n\n    try {\n        int entityValue;\n        if (isHex) {\n            entityValue = Integer.parseInt(entityStr, 16);\n        } else {\n            entityValue = Integer.parseInt(entityStr);\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        return end - index + 1;\n    } catch (NumberFormatException nfe) {\n        if (isHex) {\n            // If entity was hexadecimal, try decoding the codepoint as a decimal\n            try {\n                int entityValue = Integer.parseInt(entityStr);\n                if (entityValue > 0xFFFF) {\n                    char[] chrs = Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write(entityValue);\n                }\n                return end - index + 1;\n            } catch (NumberFormatException nfe2) {\n                // If decoding as decimal also fails, return 0\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..985150d8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,87 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index + 2 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+        // Not an entity\n+        return 0;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    int start = index + 2;\n+    boolean isHex = false;\n \n-                // Check there's more than just an x after the &#\n-            }\n+    // Check for hexadecimal representation\n+    if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+        start++;\n+        isHex = true;\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    int end = start;\n+\n+    // Look for the semicolon, but also check for any invalid characters\n+    while (end < seqEnd && input.charAt(end) != ';') {\n+        char c = input.charAt(end);\n+        if (isHex && !Character.isDigit(c) && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {\n+            // Invalid character in the hexadecimal representation\n+            return 0;\n+        }\n+        if (!isHex && !Character.isDigit(c)) {\n+            // Invalid character in the decimal representation\n+            return 0;\n+        }\n+        end++;\n+    }\n+\n+    if (end == seqEnd) {\n+        if (isHex && end - start > 0) {\n+            // Incomplete hexadecimal entity\n+            return 0;\n+        } else {\n+            // Valid non-hexadecimal entity without semicolon\n+            return 1;\n+        }\n+    }\n \n-            int entityValue;\n+    String entityStr = input.subSequence(start, end).toString();\n+\n+    try {\n+        int entityValue;\n+        if (isHex) {\n+            entityValue = Integer.parseInt(entityStr, 16);\n+        } else {\n+            entityValue = Integer.parseInt(entityStr);\n+        }\n+\n+        if (entityValue > 0xFFFF) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs[0]);\n+            out.write(chrs[1]);\n+        } else {\n+            out.write(entityValue);\n+        }\n+\n+        return end - index + 1;\n+    } catch (NumberFormatException nfe) {\n+        if (isHex) {\n+            // If entity was hexadecimal, try decoding the codepoint as a decimal\n             try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n+                int entityValue = Integer.parseInt(entityStr);\n+                if (entityValue > 0xFFFF) {\n+                    char[] chrs = Character.toChars(entityValue);\n+                    out.write(chrs[0]);\n+                    out.write(chrs[1]);\n                 } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+                    out.write(entityValue);\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+                return end - index + 1;\n+            } catch (NumberFormatException nfe2) {\n+                // If decoding as decimal also fails, return 0\n                 return 0;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        } else {\n+            return 0;\n         }\n-        return 0;\n     }\n }\n+}",
    "result_reason": "junit.framework.ComparisonFailure: Failed to support unfinished entities (i.e. missing semi-colon expected:<Test []0 not test> but was:<Test [&#x3]0 not test>",
    "test_result": "FAIL"
}