{
    "patch": "    Node argList = NodeUtil.getFunctionParameters(function);\n    // gather the arg names so we can avoid removing object literal properties\n    Set<String> argNames = new HashSet<>();\n    for (Node arg : argList.children()) {\n      argNames.add(arg.getString());\n    }\n    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.processCalLsites(fnScope, function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String name = lastArg.getString();\n        if (!referenced.contains(fnScope.getVar(name))) {\n          boolean removeArg = true;\n          if (lastArg.getJSDocInfo() != null && lastArg.getJSDocInfo().isNoInline()) {\n            removeArg = false;\n          }\n          // Don't remove object literal properties\n          if (removeArg && !NodeUtil.referencesArgumentsObject(lastArg)\n              && !NodeUtil.referencesThis(lastArg)\n              && !isNamedParameterOfCaller(lastArg, fnScope)\n              && !NodeUtil.mayHaveSideEffects(lastArg)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          }\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced, argNames);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6774a6b7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+    // gather the arg names so we can avoid removing object literal properties\n+    Set<String> argNames = new HashSet<>();\n+    for (Node arg : argList.children()) {\n+      argNames.add(arg.getString());\n+    }\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.processCalLsites(fnScope, function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String name = lastArg.getString();\n+        if (!referenced.contains(fnScope.getVar(name))) {\n+          boolean removeArg = true;\n+          if (lastArg.getJSDocInfo() != null && lastArg.getJSDocInfo().isNoInline()) {\n+            removeArg = false;\n+          }\n+          // Don't remove object literal properties\n+          if (removeArg && !NodeUtil.referencesArgumentsObject(lastArg)\n+              && !NodeUtil.referencesThis(lastArg)\n+              && !isNamedParameterOfCaller(lastArg, fnScope)\n+              && !NodeUtil.mayHaveSideEffects(lastArg)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced, argNames);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}