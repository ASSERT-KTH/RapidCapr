{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        if (isAliasDeclaration(n, parent)) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else if (parent.isFunction()) {\n          // do nothing, bleeding functions already get BAD_PARAMETERS error\n          // and parameters of the scope function also get BAD_PARAMETERS error\n        } else {\n          // Error: the local variable is not alias and not a function param/decl.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }\n\n    /**\n     * Returns whether a node is an alias declaration.\n     * @param n the node to check\n     * @param parent n's parent node\n     * @return whether n is an alias declaration\n     */\n    private boolean isAliasDeclaration(Node n, Node parent) {\n      return parent.isVar() && n.hasChildren() &&\n             n.getFirstChild().isQualifiedName();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..9ba00296 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -273,29 +273,35 @@ class ScopedAliases implements HotSwapCompilerPass {\n       Scope scope = t.getScope();\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        if (isAliasDeclaration(n, parent)) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n \n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+        } else if (parent.isFunction()) {\n+          // do nothing, bleeding functions already get BAD_PARAMETERS error\n+          // and parameters of the scope function also get BAD_PARAMETERS error\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n+          // Error: the local variable is not alias and not a function param/decl.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-        }\n       }\n     }\n \n+    /**\n+     * Returns whether a node is an alias declaration.\n+     * @param n the node to check\n+     * @param parent n's parent node\n+     * @return whether n is an alias declaration\n+     */\n+    private boolean isAliasDeclaration(Node n, Node parent) {\n+      return parent.isVar() && n.hasChildren() &&\n+             n.getFirstChild().isQualifiedName();\n+    }\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}