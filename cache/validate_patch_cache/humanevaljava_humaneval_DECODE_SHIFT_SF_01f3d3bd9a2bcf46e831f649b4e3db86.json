{
    "patch": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    int alphabetSize = 26;\n    int shift = 5;\n    for (char c : string.toCharArray()) {\n        if (Character.isLetter(c)) {\n            char startChar = Character.isUpperCase(c) ? 'A' : 'a'; // determine the starting character of the alphabet\n            int charIndex = c - startChar; // get the index of the character in the alphabet\n            int shiftedIndex = ((charIndex - shift % alphabetSize) + alphabetSize) % alphabetSize; // shift the index, handle values less than 0 and greater than alphabet size\n            char decodedChar = (char) (shiftedIndex + startChar); // obtain the new character value by adding the shifted index to the starting value of the character\n            sb.append(decodedChar);\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/DECODE_SHIFT.java b/src/main/java/humaneval/buggy/DECODE_SHIFT.java\nindex c8aba74..c1ac7e6 100644\n--- a/src/main/java/humaneval/buggy/DECODE_SHIFT.java\n+++ b/src/main/java/humaneval/buggy/DECODE_SHIFT.java\n@@ -13,12 +13,21 @@ public class DECODE_SHIFT {\n         return sb.toString();\n     }\n \n-    public static String decode_shift(String string) {\n-        StringBuilder sb = new StringBuilder();\n-        for (char c : string.toCharArray()) {\n-            c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n+public static String decode_shift(String string) {\n+    StringBuilder sb = new StringBuilder();\n+    int alphabetSize = 26;\n+    int shift = 5;\n+    for (char c : string.toCharArray()) {\n+        if (Character.isLetter(c)) {\n+            char startChar = Character.isUpperCase(c) ? 'A' : 'a'; // determine the starting character of the alphabet\n+            int charIndex = c - startChar; // get the index of the character in the alphabet\n+            int shiftedIndex = ((charIndex - shift % alphabetSize) + alphabetSize) % alphabetSize; // shift the index, handle values less than 0 and greater than alphabet size\n+            char decodedChar = (char) (shiftedIndex + startChar); // obtain the new character value by adding the shifted index to the starting value of the character\n+            sb.append(decodedChar);\n+        } else {\n             sb.append(c);\n         }\n-        return sb.toString();\n     }\n+    return sb.toString();\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}