{
    "patch": "if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);\n    }\n\n    if (options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n      CheckLevel warningLevel = options.checkGlobalThisLevel.isOn() ? CheckLevel.ERROR : CheckLevel.WARNING;\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, warningLevel);\n    } else {\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = composedGuards;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..015df583 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,36 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n+      options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);\n+    }\n+\n+    if (options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n+      CheckLevel warningLevel = options.checkGlobalThisLevel.isOn() ? CheckLevel.ERROR : CheckLevel.WARNING;\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, warningLevel);\n+    } else {\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.ERROR);\n+    }\n+\n+    // Initialize the warnings guard.\n+    List<WarningsGuard> guards = Lists.newArrayList();\n+    guards.add(\n+        new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n+    guards.add(options.getWarningsGuard());\n+\n+    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n+\n+    // All passes must run the variable check. This synthesizes\n+    // variables later so that the compiler doesn't crash. It also\n+    // checks the externs file for validity. If you don't want to warn\n+    // about missing variable declarations, we shut that specific\n+    // error off.\n+    if (!options.checkSymbols &&\n+        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n+      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+    }\n+\n+    this.warningsGuard = composedGuards;\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}