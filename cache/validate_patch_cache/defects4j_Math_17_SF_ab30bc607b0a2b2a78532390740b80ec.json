{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(this);\n        }\n        if (x == 0) {\n            return getZero();\n        }\n        if (x == 1) {\n            return newInstance(this);\n        }\n\n        final DfpField field = getField();\n\n        if (x < 0) {\n            return negate().multiply(-x);\n        }\n\n        Dfp res = newInstance(this);\n        int factor = x;\n        while (factor != 1) {\n            if ((factor & 1) == 1) {\n                res.selfMultiply(this);\n            }\n            factor >>= 1;\n            selfMultiply(this);\n        }\n        res.selfMultiply(this);\n\n        return res;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..a48342df2 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,34 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(this);\n+        }\n+        if (x == 0) {\n+            return getZero();\n+        }\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+\n+        final DfpField field = getField();\n+\n+        if (x < 0) {\n+            return negate().multiply(-x);\n+        }\n+\n+        Dfp res = newInstance(this);\n+        int factor = x;\n+        while (factor != 1) {\n+            if ((factor & 1) == 1) {\n+                res.selfMultiply(this);\n+            }\n+            factor >>= 1;\n+            selfMultiply(this);\n+        }\n+        res.selfMultiply(this);\n+\n+        return res;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}