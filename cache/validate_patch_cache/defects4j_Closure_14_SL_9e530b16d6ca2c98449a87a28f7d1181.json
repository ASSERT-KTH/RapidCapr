{
    "patch": "if (finallyNode.getNext() != null && !finallyNode.getNext().isFunction()) {\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getNext());\n} else {\n    // Call computeFollowNode for any parent nodes that are not function calls.\n    Node parent = finallyNode.getParent();\n    while (parent != null && parent.isFunction()) {\n      parent = parent.getParent();\n    }\n    if (parent != null) {\n      Node follow = computeFollowNode(fromNode, parent, cfa);\n      if (follow != null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, follow);\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..3a6421b8 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,21 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode.getNext() != null && !finallyNode.getNext().isFunction()) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getNext());\n+} else {\n+    // Call computeFollowNode for any parent nodes that are not function calls.\n+    Node parent = finallyNode.getParent();\n+    while (parent != null && parent.isFunction()) {\n+      parent = parent.getParent();\n+    }\n+    if (parent != null) {\n+      Node follow = computeFollowNode(fromNode, parent, cfa);\n+      if (follow != null) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, follow);\n+      }\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable parent is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}