{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\n\nimport java.util.Iterator;\n\npublic class VisitParameterListFix {\n\n  private Validator validator;\n  private JSTypeRegistry typeRegistry;\n\n  public VisitParameterListFix(JSTypeRegistry typeRegistry) {\n    this.typeRegistry = typeRegistry;\n    this.validator = new Validator(typeRegistry);\n  }\n\n  private JSType getJSType(Node n) {\n    return this.validator.getJSTypeOf(n);\n  }\n\n  private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n                      Object... params) {\n    // implementation not shown\n  }\n\n  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // Skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean hasVarArgs = functionType.hasOptionalParameter();\n    while (arguments.hasNext() && (parameters.hasNext() || hasVarArgs)) {\n        if (!parameters.hasNext() && hasVarArgs) {\n            parameter = functionType.getRestFormal();\n        } else {\n            parameter = parameters.next();\n        }\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                                                  getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n        report(t, call, DiagnosticType.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..c2e0c220 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,64 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+\n+import java.util.Iterator;\n+\n+public class VisitParameterListFix {\n+\n+  private Validator validator;\n+  private JSTypeRegistry typeRegistry;\n+\n+  public VisitParameterListFix(JSTypeRegistry typeRegistry) {\n+    this.typeRegistry = typeRegistry;\n+    this.validator = new Validator(typeRegistry);\n+  }\n+\n+  private JSType getJSType(Node n) {\n+    return this.validator.getJSTypeOf(n);\n+  }\n+\n+  private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n+                      Object... params) {\n+    // implementation not shown\n+  }\n+\n+  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+    arguments.next(); // Skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    boolean hasVarArgs = functionType.hasOptionalParameter();\n+    while (arguments.hasNext() && (parameters.hasNext() || hasVarArgs)) {\n+        if (!parameters.hasNext() && hasVarArgs) {\n+            parameter = functionType.getRestFormal();\n+        } else {\n+            parameter = parameters.next();\n+        }\n+        argument = arguments.next();\n+        ordinal++;\n+\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                                                  getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n     if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        report(t, call, DiagnosticType.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+               String.valueOf(numArgs), String.valueOf(minArgs),\n+               maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}