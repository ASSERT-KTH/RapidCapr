{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    Set<String> paramsToRemove = new HashSet<>();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Gather unreferenced parameter names\n    Node parameter = argList.getFirstChild();\n    while (parameter != null) {\n      Var var = fnScope.getVar(parameter.getString());\n      if (!referenced.contains(var)) {\n        paramsToRemove.add(parameter.getString());\n      }\n      parameter = parameter.getNext();\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String paramName = lastArg.getString();\n        if (paramsToRemove.contains(paramName)) {\n          argList.removeChild(lastArg);\n          paramsToRemove.remove(paramName);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1384e966 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    Set<String> paramsToRemove = new HashSet<>();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Gather unreferenced parameter names\n+    Node parameter = argList.getFirstChild();\n+    while (parameter != null) {\n+      Var var = fnScope.getVar(parameter.getString());\n+      if (!referenced.contains(var)) {\n+        paramsToRemove.add(parameter.getString());\n+      }\n+      parameter = parameter.getNext();\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String paramName = lastArg.getString();\n+        if (paramsToRemove.contains(paramName)) {\n+          argList.removeChild(lastArg);\n+          paramsToRemove.remove(paramName);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}