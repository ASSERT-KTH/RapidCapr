{
    "patch": "public ReturnValue execute(Args args) throws Throwable {\n    try {\n        Method method = getDeclaredMethod(args.object, args.methodName, args.parameterTypes);\n        method.setAccessible(true);\n        Object returnValue = method.invoke(args.object, args.parameters);\n        return new ReturnValue(returnValue, method.getReturnType());\n    } catch (NoSuchMethodException e) {\n        throw new MethodNotFoundException(\"Method \" + args.methodName + \" with parameter types \" +\n                Arrays.toString(args.parameterTypes) + \" not found in object \" + args.object.getClass().getName() + \".\", e);\n    } catch (InvocationTargetException e) {\n        throw e.getCause();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}