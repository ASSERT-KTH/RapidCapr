{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.getType() == Token.CALL || n.getType() == Token.NEW) {\n        return false;\n    }\n    return NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null && NodeUtil.getFunctionBody(n) != null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..9ec7fd2b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,12 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.getType() == Token.CALL || n.getType() == Token.NEW) {\n+        return false;\n+    }\n+    return NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null && NodeUtil.getFunctionBody(n) != null;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}