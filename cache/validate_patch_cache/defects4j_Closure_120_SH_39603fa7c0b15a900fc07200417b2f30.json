{
    "patch": "        } else if (block.isLoop && block.getBackEdgeCount() == 1) {\n          BasicBlock backEdge = block.getBackEdge(0).getDestination();\n          if (ref.getBasicBlock().getIndex() <= backEdge.getIndex()) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..405603aa 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,11 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop && block.getBackEdgeCount() == 1) {\n+          BasicBlock backEdge = block.getBackEdge(0).getDestination();\n+          if (ref.getBasicBlock().getIndex() <= backEdge.getIndex()) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}