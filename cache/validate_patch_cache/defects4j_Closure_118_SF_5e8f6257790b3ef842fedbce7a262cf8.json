{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(\n                JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                    Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()),\n                    n.toString(), \"\"));\n          }\n        }\n      }\n\n      // Check that all properties are actually declared in the object literal\n      for (Map.Entry<String, Property> entry : allProps.entrySet()) {\n        String name = entry.getKey();\n        Property prop = entry.getValue();\n        if (!prop.isDeclared()) {\n          compiler.report(\n              JSError.make(\n                  t.getSourceName(),\n                  n,\n                  DiagCollector.formatMessage(\n                      Warnings.MISSING_OBJECT_LITERAL_DECLARATION, name),\n                  Warnings.INVALIDATION));\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..73b73198 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,24 +492,35 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n         String name = child.getString();\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n         if (!prop.scheduleRenaming(child,\n                                    processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n           if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            compiler.report(\n+                JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                    Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()),\n+                    n.toString(), \"\"));\n           }\n         }\n       }\n+\n+      // Check that all properties are actually declared in the object literal\n+      for (Map.Entry<String, Property> entry : allProps.entrySet()) {\n+        String name = entry.getKey();\n+        Property prop = entry.getValue();\n+        if (!prop.isDeclared()) {\n+          compiler.report(\n+              JSError.make(\n+                  t.getSourceName(),\n+                  n,\n+                  DiagCollector.formatMessage(\n+                      Warnings.MISSING_OBJECT_LITERAL_DECLARATION, name),\n+                  Warnings.INVALIDATION));\n+        }\n+      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}