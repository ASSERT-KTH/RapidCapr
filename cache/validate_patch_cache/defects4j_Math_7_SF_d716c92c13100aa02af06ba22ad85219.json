{
    "patch": "private static class EventsStatesComparator implements Comparator<EventState>, Serializable {\n\n    /**\n     * Simple constructor.\n     * @param orderingSign ordering sign : +1 or -1, +1 corresponding to natural order (increasing event times), -1 to reverse order.\n     */\n    private EventsStatesComparator(final int orderingSign) {\n        this.orderingSign = orderingSign;\n    }\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20110925L;\n\n    /** Ordering criterion. */\n    private final int orderingSign;\n\n    /**\n     * Compare the events time.\n     * @param es0 first state event\n     * @param es1 second state event\n     * @return -1, 0 or +1 according to their order\n     */\n    public int compare(final EventState es0, final EventState es1) {\n        final double t0    = es0.getEventTime();\n        final double t1    = es1.getEventTime();\n        final int    tCmp  = Double.compare(t0, t1);\n        final int    hash0 = System.identityHashCode(es0);\n        final int    hash1 = System.identityHashCode(es1);\n        if (tCmp != 0) {\n            return orderingSign * tCmp;\n        }\n        // t0 == t1\n        if (hash0 < hash1) {\n            return -orderingSign;\n        }\n        if (hash0 > hash1) {\n            return orderingSign;\n        }\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..0e01cce1a 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,47 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+private static class EventsStatesComparator implements Comparator<EventState>, Serializable {\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+    /**\n+     * Simple constructor.\n+     * @param orderingSign ordering sign : +1 or -1, +1 corresponding to natural order (increasing event times), -1 to reverse order.\n+     */\n+    private EventsStatesComparator(final int orderingSign) {\n+        this.orderingSign = orderingSign;\n+    }\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+    /** Serializable UID. */\n+    private static final long serialVersionUID = 20110925L;\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+    /** Ordering criterion. */\n+    private final int orderingSign;\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+    /**\n+     * Compare the events time.\n+     * @param es0 first state event\n+     * @param es1 second state event\n+     * @return -1, 0 or +1 according to their order\n+     */\n+    public int compare(final EventState es0, final EventState es1) {\n+        final double t0    = es0.getEventTime();\n+        final double t1    = es1.getEventTime();\n+        final int    tCmp  = Double.compare(t0, t1);\n+        final int    hash0 = System.identityHashCode(es0);\n+        final int    hash1 = System.identityHashCode(es1);\n+        if (tCmp != 0) {\n+            return orderingSign * tCmp;\n+        }\n+        // t0 == t1\n+        if (hash0 < hash1) {\n+            return -orderingSign;\n+        }\n+        if (hash0 > hash1) {\n+            return orderingSign;\n+        }\n+        return 0;\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}