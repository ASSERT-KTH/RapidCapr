{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(Object.class);\n        return;\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) bound;\n            if (tv.getBounds().length == 0) {\n                // If this is a type variable with no bounds, we register Object as a placeholder\n                registerTypeVariablesOn(Object.class);\n            } else if (typeVariable.getGenericDeclaration().equals(tv.getGenericDeclaration())\n                    && typeVariable.getName().equals(tv.getName())) {\n                // If this is a recursive bound, we register Object as a placeholder\n                registerTypeVariablesOn(Object.class);\n            } else {\n                // If this is not a recursive bound, we continue as usual\n                readTypeVariablesForTypeVariable(tv);\n            }\n        } else {\n            // If this is not a TypeVariable, we register the bound\n            registerTypeVariablesOn(bound);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\n// This method is similar to readTypeVariables, but handles recursive type variables differently\nprivate void readTypeVariablesForTypeVariable(TypeVariable<?> tv) {\n    Type[] bounds = tv.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(Object.class);\n        return;\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> nestedTv = (TypeVariable<?>) bound;\n            if (nestedTv.getBounds().length == 0) {\n                // If this is a type variable with no bounds, we register Object as a placeholder\n                registerTypeVariablesOn(Object.class);\n            } else if (tv.getGenericDeclaration().equals(nestedTv.getGenericDeclaration())\n                    && tv.getName().equals(nestedTv.getName())) {\n                // If this is a recursive bound, we register Object as a placeholder\n                registerTypeVariablesOn(Object.class);\n            } else {\n                // If this is not a recursive bound, we continue as usual\n                readTypeVariablesForTypeVariable(nestedTv);\n            }\n        } else {\n            // If this is not a TypeVariable, we register the bound\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..472d78c05 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,65 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) bound;\n+            if (tv.getBounds().length == 0) {\n+                // If this is a type variable with no bounds, we register Object as a placeholder\n+                registerTypeVariablesOn(Object.class);\n+            } else if (typeVariable.getGenericDeclaration().equals(tv.getGenericDeclaration())\n+                    && typeVariable.getName().equals(tv.getName())) {\n+                // If this is a recursive bound, we register Object as a placeholder\n+                registerTypeVariablesOn(Object.class);\n+            } else {\n+                // If this is not a recursive bound, we continue as usual\n+                readTypeVariablesForTypeVariable(tv);\n+            }\n+        } else {\n+            // If this is not a TypeVariable, we register the bound\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+// This method is similar to readTypeVariables, but handles recursive type variables differently\n+private void readTypeVariablesForTypeVariable(TypeVariable<?> tv) {\n+    Type[] bounds = tv.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> nestedTv = (TypeVariable<?>) bound;\n+            if (nestedTv.getBounds().length == 0) {\n+                // If this is a type variable with no bounds, we register Object as a placeholder\n+                registerTypeVariablesOn(Object.class);\n+            } else if (tv.getGenericDeclaration().equals(nestedTv.getGenericDeclaration())\n+                    && tv.getName().equals(nestedTv.getName())) {\n+                // If this is a recursive bound, we register Object as a placeholder\n+                registerTypeVariablesOn(Object.class);\n+            } else {\n+                // If this is not a recursive bound, we continue as usual\n+                readTypeVariablesForTypeVariable(nestedTv);\n+            }\n+        } else {\n+            // If this is not a TypeVariable, we register the bound\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}