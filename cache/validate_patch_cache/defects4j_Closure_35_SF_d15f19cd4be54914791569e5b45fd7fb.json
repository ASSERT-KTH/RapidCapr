{
    "patch": "  private void inferPropertiesFromSoyType(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType existingType = objType.hasProperty(prop) ? objType.getPropertyType(prop) : null;\n            if (existingType == null || existingType.isBottom()) {\n              objType.defineInferredProperty(prop, propType, null);\n            } else {\n              JSType typeToInfer = computeGreatestSubtype(existingType, propType);\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  private JSType computeGreatestSubtype(JSType type1, JSType type2) {\n    FunctionType functionType = type1.getFunTypeIfSingletonObj();\n    if (functionType != null) {\n      return JSType.join(getNativeType(OBJECT_TYPE), type2);\n    }\n    ObjectType obj1 = ObjectType.cast(type1.restrictByNotNullOrUndefined());\n    ObjectType obj2 = ObjectType.cast(type2.restrictByNotNullOrUndefined());\n    if (obj1 != null && obj2 != null) {\n      if (!obj1.isStructurallySubtypeOf(obj2)) {\n        return getNativeType(OBJECT_TYPE);\n      } else if (obj1.isEquivalentTo(obj2)) {\n        return obj1;\n      } else {\n        FunctionType ctor2 = obj2.getConstructor();\n        if (ctor2 != null && obj1.isSubtypeOf(ctor2.getTypeOfThis())) {\n          // Generally we don't want to substitute the instance type for the constructor's type. But\n          // in this case the constructor parameter's types are maybe generic, so defining the\n          // inferred property with type2 may not be safe (usually it is either safe, or we should\n          // not be doing this computeGreatestSubtype merge).\n          // TODO(b/111671398): Currently, this logic is used in postProperties for closure class\n          // declarations, but there the warnings are emitted for types that are not exactly matches.\n          // We should try to avoid emitting warnings for class declarations where the types match\n          // exactly.\n          return ctor2.getTypeOfThis();\n        }\n        ObjectType joinedObj = new ObjectType(joinNominalTypes(obj1.getNominalType(), obj2.getNominalType()));\n        Preconditions.checkState(joinedObj.getNominalType() != null);\n        ImmutableList<String> props = ImmutableList.copyOf(\n            Sets.union(obj1.getOwnPropertyNames(), obj2.getOwnPropertyNames()));\n        boolean isDict = obj1.isDict() || obj2.isDict();\n        for (String propName : props) {\n          JSType prop1 = obj1.hasProperty(propName) ? obj1.getPropertyType(propName) : null;\n          JSType prop2 = obj2.hasProperty(propName) ? obj2.getPropertyType(propName) : null;\n          JSType propType =\n              prop1 == null ? prop2 : (prop2 == null ? prop1 : computeGreatestSubtype(prop1, prop2));\n          joinedObj.defineInferredProperty(\n              propName, propType, null, isDict);\n        }\n        return joinedObj;\n      }\n    }\n    return getNativeType(OBJECT_TYPE);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..24861cbf 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,7 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+  private void inferPropertiesFromSoyType(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1124,30 +1125,63 @@ class TypeInference\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            JSType existingType = objType.hasProperty(prop) ? objType.getPropertyType(prop) : null;\n+            if (existingType == null || existingType.isBottom()) {\n+              objType.defineInferredProperty(prop, propType, null);\n+            } else {\n+              JSType typeToInfer = computeGreatestSubtype(existingType, propType);\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n   }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+  \n+  private JSType computeGreatestSubtype(JSType type1, JSType type2) {\n+    FunctionType functionType = type1.getFunTypeIfSingletonObj();\n+    if (functionType != null) {\n+      return JSType.join(getNativeType(OBJECT_TYPE), type2);\n+    }\n+    ObjectType obj1 = ObjectType.cast(type1.restrictByNotNullOrUndefined());\n+    ObjectType obj2 = ObjectType.cast(type2.restrictByNotNullOrUndefined());\n+    if (obj1 != null && obj2 != null) {\n+      if (!obj1.isStructurallySubtypeOf(obj2)) {\n+        return getNativeType(OBJECT_TYPE);\n+      } else if (obj1.isEquivalentTo(obj2)) {\n+        return obj1;\n+      } else {\n+        FunctionType ctor2 = obj2.getConstructor();\n+        if (ctor2 != null && obj1.isSubtypeOf(ctor2.getTypeOfThis())) {\n+          // Generally we don't want to substitute the instance type for the constructor's type. But\n+          // in this case the constructor parameter's types are maybe generic, so defining the\n+          // inferred property with type2 may not be safe (usually it is either safe, or we should\n+          // not be doing this computeGreatestSubtype merge).\n+          // TODO(b/111671398): Currently, this logic is used in postProperties for closure class\n+          // declarations, but there the warnings are emitted for types that are not exactly matches.\n+          // We should try to avoid emitting warnings for class declarations where the types match\n+          // exactly.\n+          return ctor2.getTypeOfThis();\n+        }\n+        ObjectType joinedObj = new ObjectType(joinNominalTypes(obj1.getNominalType(), obj2.getNominalType()));\n+        Preconditions.checkState(joinedObj.getNominalType() != null);\n+        ImmutableList<String> props = ImmutableList.copyOf(\n+            Sets.union(obj1.getOwnPropertyNames(), obj2.getOwnPropertyNames()));\n+        boolean isDict = obj1.isDict() || obj2.isDict();\n+        for (String propName : props) {\n+          JSType prop1 = obj1.hasProperty(propName) ? obj1.getPropertyType(propName) : null;\n+          JSType prop2 = obj2.hasProperty(propName) ? obj2.getPropertyType(propName) : null;\n+          JSType propType =\n+              prop1 == null ? prop2 : (prop2 == null ? prop1 : computeGreatestSubtype(prop1, prop2));\n+          joinedObj.defineInferredProperty(\n+              propName, propType, null, isDict);\n+        }\n+        return joinedObj;\n       }\n     }\n+    return getNativeType(OBJECT_TYPE);\n+  }\n+    }\n     return scope;\n   }\n ",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}