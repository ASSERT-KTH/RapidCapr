{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - initialOffset;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    \n    if (initialOffset != offsetAdjusted) {\n        // calculate the next transition time for both the local time and the adjusted time\n        final long nextTransitionLocal = nextTransition(instantLocal);\n        final long nextTransitionAdjusted = nextTransition(instantAdjusted);\n        \n        // if the next transition time is the same for both times,\n        // return the adjusted offset, as it is valid for the input time\n        if (nextTransitionLocal == nextTransitionAdjusted) {\n            return offsetAdjusted;\n        }\n        \n        // calculate the offset for the next transition time for the input time\n        final int nextTransitionOffset = getOffset(nextTransitionLocal);\n        \n        // if the initial offset is less than both the adjusted offset and the offset for\n        // the next transition time, it means we are in a gap, and should return the initial offset\n        if (initialOffset < offsetAdjusted && initialOffset < nextTransitionOffset) {\n            return initialOffset;\n        }\n        \n        // if the initial offset is greater than or equal to the adjusted offset and\n        // the initial offset is greater than or equal to the offset for the next transition time,\n        // it means we are in an overlap, and should check whether the input time is on the correct side of it\n        if (initialOffset >= offsetAdjusted && initialOffset >= nextTransitionOffset) {\n            final long nextNextTransitionLocal = nextTransition(nextTransitionLocal);\n            final long nextNextTransitionAdjusted = nextTransition(nextTransitionAdjusted);\n            \n            // if the input time is after the next next transition time for the adjusted time,\n            // it means we are on the correct side of the overlap, and should return the adjusted offset\n            if (instantLocal >= nextNextTransitionAdjusted) {\n                return offsetAdjusted;\n            }\n        }\n    }\n    \n    // return the adjusted offset\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e8666666 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,49 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - initialOffset;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    \n+    if (initialOffset != offsetAdjusted) {\n+        // calculate the next transition time for both the local time and the adjusted time\n+        final long nextTransitionLocal = nextTransition(instantLocal);\n+        final long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+        \n+        // if the next transition time is the same for both times,\n+        // return the adjusted offset, as it is valid for the input time\n+        if (nextTransitionLocal == nextTransitionAdjusted) {\n+            return offsetAdjusted;\n+        }\n+        \n+        // calculate the offset for the next transition time for the input time\n+        final int nextTransitionOffset = getOffset(nextTransitionLocal);\n+        \n+        // if the initial offset is less than both the adjusted offset and the offset for\n+        // the next transition time, it means we are in a gap, and should return the initial offset\n+        if (initialOffset < offsetAdjusted && initialOffset < nextTransitionOffset) {\n+            return initialOffset;\n+        }\n+        \n+        // if the initial offset is greater than or equal to the adjusted offset and\n+        // the initial offset is greater than or equal to the offset for the next transition time,\n+        // it means we are in an overlap, and should check whether the input time is on the correct side of it\n+        if (initialOffset >= offsetAdjusted && initialOffset >= nextTransitionOffset) {\n+            final long nextNextTransitionLocal = nextTransition(nextTransitionLocal);\n+            final long nextNextTransitionAdjusted = nextTransition(nextTransitionAdjusted);\n+            \n+            // if the input time is after the next next transition time for the adjusted time,\n+            // it means we are on the correct side of the overlap, and should return the adjusted offset\n+            if (instantLocal >= nextNextTransitionAdjusted) {\n+                return offsetAdjusted;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    \n+    // return the adjusted offset\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}