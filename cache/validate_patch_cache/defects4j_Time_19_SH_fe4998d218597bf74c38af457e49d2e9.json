{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            // implemented fix hunk\n            if (offsetLocal >= 0 || nextTransition(nextAdjusted) != nextLocal) {\n                return offsetLocal;\n            }\n        }\n    }\n        \n    long prev = previousTransition(instantAdjusted);\n    if (prev < instantAdjusted) {\n        int offsetPrev = getOffset(prev);\n        int diff = offsetPrev - offsetLocal;\n        if (instantAdjusted - prev <= diff) {\n            return offsetPrev;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..4591da39 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            // implemented fix hunk\n+            if (offsetLocal >= 0 || nextTransition(nextAdjusted) != nextLocal) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+        \n+    long prev = previousTransition(instantAdjusted);\n+    if (prev < instantAdjusted) {\n+        int offsetPrev = getOffset(prev);\n+        int diff = offsetPrev - offsetLocal;\n+        if (instantAdjusted - prev <= diff) {\n+            return offsetPrev;\n+        }\n+    }\n+}\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}