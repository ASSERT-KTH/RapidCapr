{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n        while (numIterations < maxIterations) {\n            numIterations++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // the expanded simplex is worse than the reflected one\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = computeNewSimplex(original, expanded, comparator);\n                }\n            } else {\n                final boolean contraction = comparator.compare(reflected, original[n]) >= 0;\n                final RealPointValuePair contracted = contraction ?\n                        evaluateNewSimplex(original, rho, comparator) :\n                        evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = computeNewSimplex(original, contracted, comparator);\n                } else {\n                    simplex = computeNewSimplex(original, shrink(original, comparator), comparator);\n                }\n            }\n\n            incrementIterationsCounter();\n            if (getConvergenceChecker().converged(getIterations(), best, simplex[0])) {\n                return;\n            }\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..163bf4d71 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,11 +59,11 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n+        while (numIterations < maxIterations) {\n+            numIterations++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -72,30 +72,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // the expanded simplex is worse than the reflected one\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = computeNewSimplex(original, expanded, comparator);\n+                }\n+            } else {\n+                final boolean contraction = comparator.compare(reflected, original[n]) >= 0;\n+                final RealPointValuePair contracted = contraction ?\n+                        evaluateNewSimplex(original, rho, comparator) :\n+                        evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = computeNewSimplex(original, contracted, comparator);\n+                } else {\n+                    simplex = computeNewSimplex(original, shrink(original, comparator), comparator);\n                 }\n-\n-                return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            incrementIterationsCounter();\n+            if (getConvergenceChecker().converged(getIterations(), best, simplex[0])) {\n                 return;\n             }\n-\n         }\n \n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}