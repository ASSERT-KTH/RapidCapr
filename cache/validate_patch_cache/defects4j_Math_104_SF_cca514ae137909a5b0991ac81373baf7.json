{
    "patch": "public static double regularizedGammaP(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        double d = 1.0 / (a + 1e-15);\n        double sum = d;\n        double n = 1.0;\n        double t = x / (a + 1e-15);\n\n        while (Math.abs(d) > 1e-15 * Math.abs(sum)) {\n            d *= t / (a + n);\n            sum += d;\n            n += 1.0;\n        }\n\n        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bf61eb7d0 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        double d = 1.0 / (a + 1e-15);\n+        double sum = d;\n+        double n = 1.0;\n+        double t = x / (a + 1e-15);\n+\n+        while (Math.abs(d) > 1e-15 * Math.abs(sum)) {\n+            d *= t / (a + n);\n+            sum += d;\n+            n += 1.0;\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}