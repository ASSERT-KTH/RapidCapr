{
    "patch": "            // check that millis is within the valid range\n            if (millis < iChrono.getDateTimeMillis(MIN_YEAR, 1, 1, 0, 0, 0, 0)) {\n                throw new IllegalFieldValueException(DateTimeFieldType.year(), MIN_YEAR - 1, null, null);\n            }\n            if (millis >= iChrono.getDateTimeMillis(MAX_YEAR, 1, 1, 0, 0, 0, 0)) {\n                throw new IllegalFieldValueException(DateTimeFieldType.year(), MAX_YEAR, null, null);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e2b91c8f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,12 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // check that millis is within the valid range\n+            if (millis < iChrono.getDateTimeMillis(MIN_YEAR, 1, 1, 0, 0, 0, 0)) {\n+                throw new IllegalFieldValueException(DateTimeFieldType.year(), MIN_YEAR - 1, null, null);\n+            }\n+            if (millis >= iChrono.getDateTimeMillis(MAX_YEAR, 1, 1, 0, 0, 0, 0)) {\n+                throw new IllegalFieldValueException(DateTimeFieldType.year(), MAX_YEAR, null, null);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}