{
    "patch": "                Field field = savedFields[i].iField;\n                DurationField durationField = field.getDurationField();\n                if (durationField == null || durationField.getType() != DurationFieldType.weekyears()) {            \n                    millis = savedFields[i].set(millis, resetFields);\n                    continue;\n                }\n                int year = savedFields[i].iValue;\n                if (chrono.range(ChronoField.YEAR).isValidValue(year)) {\n                    millis = savedFields[i].set(millis, resetFields);\n                    continue;\n                }\n                if (i == 0) {\n                    throw new IllegalArgumentException();\n                }\n                DurationField prevDurationField = savedFields[i - 1].iField.getDurationField();\n                if (prevDurationField == null || prevDurationField.getType() != DurationFieldType.years()) {\n                    throw new IllegalArgumentException();\n                }\n                int prevValue = savedFields[i - 1].iValue;\n                Calendar calendar = Calendar.getInstance();\n                calendar.clear();\n                calendar.set(prevValue, 0, 1);\n                long timeInMillis = calendar.getTimeInMillis();\n                timeInMillis += (year - calendar.get(Calendar.YEAR)) * 7L * DateTimeConstants.MILLIS_PER_DAY;\n                millis = field.set(millis, (int) (timeInMillis - millis), chrono);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4ed3a807 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                Field field = savedFields[i].iField;\n+                DurationField durationField = field.getDurationField();\n+                if (durationField == null || durationField.getType() != DurationFieldType.weekyears()) {            \n+                    millis = savedFields[i].set(millis, resetFields);\n+                    continue;\n+                }\n+                int year = savedFields[i].iValue;\n+                if (chrono.range(ChronoField.YEAR).isValidValue(year)) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                    continue;\n+                }\n+                if (i == 0) {\n+                    throw new IllegalArgumentException();\n+                }\n+                DurationField prevDurationField = savedFields[i - 1].iField.getDurationField();\n+                if (prevDurationField == null || prevDurationField.getType() != DurationFieldType.years()) {\n+                    throw new IllegalArgumentException();\n+                }\n+                int prevValue = savedFields[i - 1].iValue;\n+                Calendar calendar = Calendar.getInstance();\n+                calendar.clear();\n+                calendar.set(prevValue, 0, 1);\n+                long timeInMillis = calendar.getTimeInMillis();\n+                timeInMillis += (year - calendar.get(Calendar.YEAR)) * 7L * DateTimeConstants.MILLIS_PER_DAY;\n+                millis = field.set(millis, (int) (timeInMillis - millis), chrono);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}