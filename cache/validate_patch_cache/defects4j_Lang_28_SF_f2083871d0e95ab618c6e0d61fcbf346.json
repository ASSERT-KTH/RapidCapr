{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int OFFSET = 2;\n    final char AMPERSAND = '&';\n    final char SEMICOLON = ';';\n\n    // Check if input is long enough to have a potential entity\n    if (input.length() < OFFSET + 1) {\n        return 0;\n    }\n\n    // Check for entity beginning\n    if (input.charAt(index) == AMPERSAND && input.charAt(index + 1) == '#') {\n        int start = index + OFFSET;\n        boolean isHex = false;\n\n        // Check for hex or decimal format\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        // Find end of entity\n        int end = start;\n        for (; end < input.length(); end++) {\n            char c = input.charAt(end);\n            if (c == SEMICOLON) {\n                break;\n            }\n            if (!Character.isDigit(c) && !(isHex && Character.toLowerCase(c) >= 'a' && Character.toLowerCase(c) <= 'f')) {\n                // Invalid entity format\n                return 0;\n            }\n        }\n\n        // Parse entity value\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n        } catch (NumberFormatException e) {\n            // Invalid entity format\n            return 0;\n        }\n\n        // Write entity value to output\n        if (Character.isBmpCodePoint(entityValue)) {\n            out.write(entityValue);\n        } else if (Character.isValidCodePoint(entityValue)) {\n            out.write(Character.highSurrogate(entityValue));\n            out.write(Character.lowSurrogate(entityValue));\n        } else {\n            // Invalid code point\n            return 0;\n        }\n\n        return end - index + 1;\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..dacbda25 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,63 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int OFFSET = 2;\n+    final char AMPERSAND = '&';\n+    final char SEMICOLON = ';';\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+    // Check if input is long enough to have a potential entity\n+    if (input.length() < OFFSET + 1) {\n+        return 0;\n+    }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+    // Check for entity beginning\n+    if (input.charAt(index) == AMPERSAND && input.charAt(index + 1) == '#') {\n+        int start = index + OFFSET;\n+        boolean isHex = false;\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n+        // Check for hex or decimal format\n+        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n+\n+        // Find end of entity\n+        int end = start;\n+        for (; end < input.length(); end++) {\n+            char c = input.charAt(end);\n+            if (c == SEMICOLON) {\n+                break;\n+            }\n+            if (!Character.isDigit(c) && !(isHex && Character.toLowerCase(c) >= 'a' && Character.toLowerCase(c) <= 'f')) {\n+                // Invalid entity format\n                 return 0;\n             }\n+        }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        // Parse entity value\n+        int entityValue;\n+        try {\n+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n+        } catch (NumberFormatException e) {\n+            // Invalid entity format\n+            return 0;\n         }\n-        return 0;\n+\n+        // Write entity value to output\n+        if (Character.isBmpCodePoint(entityValue)) {\n+            out.write(entityValue);\n+        } else if (Character.isValidCodePoint(entityValue)) {\n+            out.write(Character.highSurrogate(entityValue));\n+            out.write(Character.lowSurrogate(entityValue));\n+        } else {\n+            // Invalid code point\n+            return 0;\n+        }\n+\n+        return end - index + 1;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}