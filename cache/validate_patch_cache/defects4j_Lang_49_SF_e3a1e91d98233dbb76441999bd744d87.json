{
    "patch": "        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        int newNumerator = numerator / gcd;\n        int newDenominator = denominator / gcd;\n        if (gcd == 1 || newDenominator == 1) {\n            return getFraction(newNumerator, newDenominator);\n        }\n        return getFraction(newNumerator, newDenominator).reduce();",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..b44a259e 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,13 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+        int newNumerator = numerator / gcd;\n+        int newDenominator = denominator / gcd;\n+        if (gcd == 1 || newDenominator == 1) {\n+            return getFraction(newNumerator, newDenominator);\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n-    }\n+        return getFraction(newNumerator, newDenominator).reduce();\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}