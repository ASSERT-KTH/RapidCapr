{
    "patch": "// Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n      if (functionType.getTypeOfThis() != null && (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n        JSType expectedThisType = getJSType(n.getParent().getFirstChild()).restrictByNotNullOrUndefined();\n        if (!functionType.getTypeOfThis().equals(expectedThisType)) {\n          report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n        }\n      } else if (functionType.getTypeOfThis() != null) {\n        report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..93bf31e9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+// Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+      if (functionType.getTypeOfThis() != null && (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n+        JSType expectedThisType = getJSType(n.getParent().getFirstChild()).restrictByNotNullOrUndefined();\n+        if (!functionType.getTypeOfThis().equals(expectedThisType)) {\n+          report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+        }\n+      } else if (functionType.getTypeOfThis() != null) {\n+        report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}