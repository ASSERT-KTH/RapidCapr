{
    "patch": "    boolean removableArgsFound = false;\n    int removableArgCount = 0;\n\n    // Find removable unused args\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        removableArgsFound = true;\n        removableArgCount++;\n      } else {\n        if (removableArgsFound) {\n          compiler.reportCodeChange();\n          // Remove the found removable unused args\n          for (int i = 0; i < removableArgCount; i++) {\n            Node removableArg = arg.getPrevious();\n            argList.removeChild(removableArg);\n          }\n          // Reset variables and counters\n          removableArgsFound = false;\n          removableArgCount = 0;\n        }\n      }\n    }\n    // Remove trailing args if removable\n    for (int i = 0; i < removableArgCount; i++) {\n      Node removableArg = argList.getLastChild();\n      argList.removeChild(removableArg);\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2537460a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean removableArgsFound = false;\n+    int removableArgCount = 0;\n+\n+    // Find removable unused args\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        removableArgsFound = true;\n+        removableArgCount++;\n+      } else {\n+        if (removableArgsFound) {\n+          compiler.reportCodeChange();\n+          // Remove the found removable unused args\n+          for (int i = 0; i < removableArgCount; i++) {\n+            Node removableArg = arg.getPrevious();\n+            argList.removeChild(removableArg);\n+          }\n+          // Reset variables and counters\n+          removableArgsFound = false;\n+          removableArgCount = 0;\n+        }\n+      }\n+    }\n+    // Remove trailing args if removable\n+    for (int i = 0; i < removableArgCount; i++) {\n+      Node removableArg = argList.getLastChild();\n+      argList.removeChild(removableArg);\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}