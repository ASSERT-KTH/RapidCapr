{
    "patch": "import java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintStream;\n\nimport junit.framework.TestCase;\n\npublic class MyTest extends TestCase {\n    \n    public void testGetprop4() {\n        System.setProperty(\"myprop\", \"42\");\n        try {\n            String value = System.getProperty(\"myprop\", \"default\");\n            assertEquals(\"42\", value);\n            \n            System.clearProperty(\"myprop\");\n            value = System.getProperty(\"myprop\", \"default\");\n            assertEquals(\"default\", value);\n            \n            // This code should trigger a warning\n            System.setProperty(\"user.dir\", \"C:/<malicious-path>\");\n            String[] warnings = getSystemErrWarnings();\n            assertTrue(\"expected a warning\", warnings.length > 0);\n            \n        } finally {\n            System.clearProperty(\"myprop\");\n            System.setProperty(\"user.dir\", \".\");\n        }\n    }\n    \n    private String[] getSystemErrWarnings() {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(byteArrayOutputStream, true);\n        PrintStream oldErr = System.err;\n        System.setErr(ps);\n        try {\n            File.createTempFile(\"foo\", \"bar\", new File(\"\\\\usr\"));\n            System.err.flush();\n            String[] warnings = byteArrayOutputStream.toString().split(\"\\\\R\");\n            return warnings;\n        } catch (IOException ex) {\n            return new String[0];\n        } finally {\n            System.setErr(oldErr);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..af79c396 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,53 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+\n+import junit.framework.TestCase;\n+\n+public class MyTest extends TestCase {\n+    \n+    public void testGetprop4() {\n+        System.setProperty(\"myprop\", \"42\");\n+        try {\n+            String value = System.getProperty(\"myprop\", \"default\");\n+            assertEquals(\"42\", value);\n+            \n+            System.clearProperty(\"myprop\");\n+            value = System.getProperty(\"myprop\", \"default\");\n+            assertEquals(\"default\", value);\n+            \n+            // This code should trigger a warning\n+            System.setProperty(\"user.dir\", \"C:/<malicious-path>\");\n+            String[] warnings = getSystemErrWarnings();\n+            assertTrue(\"expected a warning\", warnings.length > 0);\n+            \n+        } finally {\n+            System.clearProperty(\"myprop\");\n+            System.setProperty(\"user.dir\", \".\");\n+        }\n+    }\n+    \n+    private String[] getSystemErrWarnings() {\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        PrintStream ps = new PrintStream(byteArrayOutputStream, true);\n+        PrintStream oldErr = System.err;\n+        System.setErr(ps);\n+        try {\n+            File.createTempFile(\"foo\", \"bar\", new File(\"\\\\usr\"));\n+            System.err.flush();\n+            String[] warnings = byteArrayOutputStream.toString().split(\"\\\\R\");\n+            return warnings;\n+        } catch (IOException ex) {\n+            return new String[0];\n+        } finally {\n+            System.setErr(oldErr);\n+        }\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}