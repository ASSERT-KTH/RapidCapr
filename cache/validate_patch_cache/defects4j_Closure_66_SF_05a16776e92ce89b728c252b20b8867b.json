{
    "patch": "public double getTypedPercent(String json) {\n  Gson gson = new Gson();\n  Type type = new TypeToken<Map<String, Object>>(){}.getType();\n  Map<String, Object> map = gson.fromJson(json, type);\n  int typed = 0;\n  int all = 0;\n  for (Map.Entry<String, Object> entry : map.entrySet()) {\n    all++;\n    if (entry.getValue() instanceof String) {\n      typed++;\n    }\n  }\n  if (all == 0) {\n    return 0.0;\n  }\n  return ((double) typed / all) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3fede8e9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+  Gson gson = new Gson();\n+  Type type = new TypeToken<Map<String, Object>>(){}.getType();\n+  Map<String, Object> map = gson.fromJson(json, type);\n+  int typed = 0;\n+  int all = 0;\n+  for (Map.Entry<String, Object> entry : map.entrySet()) {\n+    all++;\n+    if (entry.getValue() instanceof String) {\n+      typed++;\n+    }\n+  }\n+  if (all == 0) {\n+    return 0.0;\n+  }\n+  return ((double) typed / all) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}