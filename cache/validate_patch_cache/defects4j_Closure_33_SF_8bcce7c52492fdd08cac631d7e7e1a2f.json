{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                if (!hasProperty(prop)) {\n                    throw JSError.make(\n                            MISMATCH_IN_RECORD_LITERAL,\n                            // The property does not exist in the object literal\n                            errorMsgJuxtaposition(\n                                    \"Missing property \", prop,\n                                    \" in object literal\"));\n                }\n                JSType fieldType = getPropertyType(prop);\n                if (!fieldType.equals(propType)\n                        && !getNativeType(JSTypeNative.UNKNOWN_TYPE).equals(propType)) {\n                    warnInvalidRecordType(propType, fieldType, prop);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..6f8730f4 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,8 +552,8 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match constraints on anonymous types.\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -562,20 +562,27 @@ class PrototypeObjectType extends ObjectType {\n     // f({});\n     //\n     // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n+    // taking each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (!isPropertyTypeDeclared(prop)) {\n+                if (!hasProperty(prop)) {\n+                    throw JSError.make(\n+                            MISMATCH_IN_RECORD_LITERAL,\n+                            // The property does not exist in the object literal\n+                            errorMsgJuxtaposition(\n+                                    \"Missing property \", prop,\n+                                    \" in object literal\"));\n+                }\n+                JSType fieldType = getPropertyType(prop);\n+                if (!fieldType.equals(propType)\n+                        && !getNativeType(JSTypeNative.UNKNOWN_TYPE).equals(propType)) {\n+                    warnInvalidRecordType(propType, fieldType, prop);\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}