{
    "patch": "if (functionType.isConstructor()) {\n    if (!functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType() ||\n         !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n    ensureTyped(t, n);\n    return;\n  }\n\n  if (functionType.getTypeOfThis() != null &&\n      !(NodeUtil.isGet(child.getParent()) ||\n        (child.isGetProp() && NodeUtil.isName(child.getLastChild())) ||\n        NodeUtil.isFunctionExpression(child))) {\n    report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  visitParameterList(t, n, functionType);\n  ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2cfb35ec 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.isConstructor()) {\n+    if (!functionType.isNativeObjectType() &&\n+        (functionType.getReturnType().isUnknownType() ||\n+         functionType.getReturnType().isVoidType() ||\n+         !isExtern)) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    }\n+    ensureTyped(t, n);\n+    return;\n+  }\n+\n+  if (functionType.getTypeOfThis() != null &&\n+      !(NodeUtil.isGet(child.getParent()) ||\n+        (child.isGetProp() && NodeUtil.isName(child.getLastChild())) ||\n+        NodeUtil.isFunctionExpression(child))) {\n+    report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n+\n+  visitParameterList(t, n, functionType);\n+  ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}