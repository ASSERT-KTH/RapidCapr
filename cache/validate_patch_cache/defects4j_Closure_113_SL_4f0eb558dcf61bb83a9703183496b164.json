{
    "patch": "    if (provided == null || !provided.isExplicitlyProvided()) {\n      if (provided == null || provided.explicitModule == null ||\n          (moduleGraph != null && module != provided.explicitModule &&\n          !moduleGraph.dependsOn(module, provided.explicitModule))) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      }\n    } else if (moduleGraph != null &&\n               module != provided.explicitModule &&\n               !moduleGraph.dependsOn(module, provided.explicitModule)) {\n      compiler.report(\n          t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n              provided.explicitModule.getName(),\n              module.getName()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..27bea99f 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,20 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    if (provided == null || !provided.isExplicitlyProvided()) {\n+      if (provided == null || provided.explicitModule == null ||\n+          (moduleGraph != null && module != provided.explicitModule &&\n+          !moduleGraph.dependsOn(module, provided.explicitModule))) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      }\n+    } else if (moduleGraph != null &&\n+               module != provided.explicitModule &&\n+               !moduleGraph.dependsOn(module, provided.explicitModule)) {\n+      compiler.report(\n+          t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+              provided.explicitModule.getName(),\n+              module.getName()));\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}