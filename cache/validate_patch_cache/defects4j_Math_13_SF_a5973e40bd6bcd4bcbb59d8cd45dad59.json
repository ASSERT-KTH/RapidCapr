{
    "patch": "        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix d = dec.getD();\n        final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n        for (int i = 0; i < sqrtD.getRowDimension(); i++) {\n            sqrtD.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        }\n        final RealMatrix v = dec.getV();\n        return (v.multiply(sqrtD)).multiply(v.transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..10c73f6b3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix d = dec.getD();\n+        final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+        for (int i = 0; i < sqrtD.getRowDimension(); i++) {\n+            sqrtD.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        }\n+        final RealMatrix v = dec.getV();\n+        return (v.multiply(sqrtD)).multiply(v.transpose());\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}