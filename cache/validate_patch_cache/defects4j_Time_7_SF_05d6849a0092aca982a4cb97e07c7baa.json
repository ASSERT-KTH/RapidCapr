{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis, chrono, iLocale, iPivotYear);\n    \n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        long resolvedInstant = bucket.computeMillis(false, text);\n        if (bucket.getOffsetInteger() != null) {\n            int offset = bucket.getOffsetInteger().intValue();\n            resolvedInstant -= offset;\n            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(offset));\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        } else {\n            chrono = chrono.withZone(DateTimeZone.getDefault());\n        }\n        instant.setMillis(resolvedInstant);\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..dd0e5879 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,38 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n+    chrono = selectChronology(chrono);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis, chrono, iLocale, iPivotYear);\n+    \n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        long resolvedInstant = bucket.computeMillis(false, text);\n+        if (bucket.getOffsetInteger() != null) {\n+            int offset = bucket.getOffsetInteger().intValue();\n+            resolvedInstant -= offset;\n+            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(offset));\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n+        } else {\n+            chrono = chrono.withZone(DateTimeZone.getDefault());\n         }\n+        instant.setMillis(resolvedInstant);\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}