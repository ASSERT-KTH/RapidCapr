{
    "patch": "        this(duration, PeriodType.standard());\n    }\n\n    protected BasePeriod(long duration, PeriodType type) {\n        super();\n        iType = type;\n        setPeriod(duration);\n    }\n\n    protected void setPeriod(long duration) {\n        iValues = new int[8];\n        iValues[INDEX_YEARS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_YEAR);\n        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_YEAR);\n        iValues[INDEX_MONTHS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_MONTH);\n        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_MONTH);\n        iValues[INDEX_WEEKS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_WEEK);\n        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_WEEK);\n        iValues[INDEX_DAYS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_DAY);\n        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_DAY);\n        iValues[INDEX_HOURS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_HOUR);\n        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_HOUR);\n        iValues[INDEX_MINUTES] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_MINUTE);\n        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_MINUTE);\n        iValues[INDEX_SECONDS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_SECOND);\n        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_SECOND);\n        iValues[INDEX_MILLIS] = FieldUtils.safeToInt(duration);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..3b6c931b 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,11 +218,33 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        this(duration, PeriodType.standard());\n     }\n \n+    protected BasePeriod(long duration, PeriodType type) {\n+        super();\n+        iType = type;\n+        setPeriod(duration);\n+    }\n+\n+    protected void setPeriod(long duration) {\n+        iValues = new int[8];\n+        iValues[INDEX_YEARS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_YEAR);\n+        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_YEAR);\n+        iValues[INDEX_MONTHS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_MONTH);\n+        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_MONTH);\n+        iValues[INDEX_WEEKS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_WEEK);\n+        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_WEEK);\n+        iValues[INDEX_DAYS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_DAY);\n+        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_DAY);\n+        iValues[INDEX_HOURS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_HOUR);\n+        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_HOUR);\n+        iValues[INDEX_MINUTES] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_MINUTE);\n+        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_MINUTE);\n+        iValues[INDEX_SECONDS] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_SECOND);\n+        duration = FieldUtils.mod(duration, DateTimeConstants.MILLIS_PER_SECOND);\n+        iValues[INDEX_MILLIS] = FieldUtils.safeToInt(duration);\n+\n     /**\n      * Creates a period from the given millisecond duration, which is only really\n      * suitable for durations less than one day.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}