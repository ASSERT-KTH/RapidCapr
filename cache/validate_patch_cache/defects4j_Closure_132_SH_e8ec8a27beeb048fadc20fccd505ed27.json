{
    "patch": "              boolean lhsHasSideEffects = NodeUtil.mayHaveSideEffects(lhs);\n              boolean elseExprHasSideEffects =\n                  NodeUtil.mayHaveSideEffects(elseOp.getLastChild());\n              if (!lhsHasSideEffects && !elseExprHasSideEffects) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..d0a4fba5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,10 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              boolean lhsHasSideEffects = NodeUtil.mayHaveSideEffects(lhs);\n+              boolean elseExprHasSideEffects =\n+                  NodeUtil.mayHaveSideEffects(elseOp.getLastChild());\n+              if (!lhsHasSideEffects && !elseExprHasSideEffects) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}