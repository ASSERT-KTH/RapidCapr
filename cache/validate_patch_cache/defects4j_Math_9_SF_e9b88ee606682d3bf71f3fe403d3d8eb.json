{
    "patch": "@Test\npublic void testRevert() {\n    final Line line = new Line(new Vector3D(0.02345, 0.012345, -1), new Vector3D(1, 2, 3));\n    final Line reverted = line.revert();\n    Assert.assertEquals(\"Revert X\", -1.0, reverted.getDirection().getX(), EPS);\n    Assert.assertEquals(\"Revert Y\", -2.0, reverted.getDirection().getY(), EPS);\n    Assert.assertEquals(\"Revert Z\", -3.0, reverted.getDirection().getZ(), EPS);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..f8bcd09fd 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,14 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+@Test\n+public void testRevert() {\n+    final Line line = new Line(new Vector3D(0.02345, 0.012345, -1), new Vector3D(1, 2, 3));\n+    final Line reverted = line.revert();\n+    Assert.assertEquals(\"Revert X\", -1.0, reverted.getDirection().getX(), EPS);\n+    Assert.assertEquals(\"Revert Y\", -2.0, reverted.getDirection().getY(), EPS);\n+    Assert.assertEquals(\"Revert Z\", -3.0, reverted.getDirection().getZ(), EPS);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}