{
    "patch": "Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n    registerTypeVariablesOn(actualTypeArgument);\n} else {\n    boolean hasInterfaceTypeBound = false;\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof Class && ((Class<?>) type).isInterface()) {\n            hasInterfaceTypeBound = true;\n            break;\n        }\n    }\n    if (hasInterfaceTypeBound) {\n        for (Type type : typeVariable.getBounds()) {\n            if (type instanceof Class && ((Class<?>) type).isInterface()) {\n                registerTypeVariablesOn(type);\n            }\n        }\n    } else {\n        registerTypeVariablesOn(typeVariable.getBounds()[0]);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c69434d3d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,32 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n+    registerTypeVariablesOn(actualTypeArgument);\n+} else {\n+    boolean hasInterfaceTypeBound = false;\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof Class && ((Class<?>) type).isInterface()) {\n+            hasInterfaceTypeBound = true;\n+            break;\n+        }\n+    }\n+    if (hasInterfaceTypeBound) {\n+        for (Type type : typeVariable.getBounds()) {\n+            if (type instanceof Class && ((Class<?>) type).isInterface()) {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    } else {\n+        registerTypeVariablesOn(typeVariable.getBounds()[0]);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}