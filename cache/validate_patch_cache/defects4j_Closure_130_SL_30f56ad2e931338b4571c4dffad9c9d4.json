{
    "patch": "          name.aliasingGets > 0 && !name.isExported()) {\n        // {@code name} meets condition (b).\n        // Find one of its local aliases to inline.\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            // Found an alias to inline. Inline it.\n            inlineAlias(ref, name);\n            // We modified the AST, so restart processing.\n            workList.clear();\n            workList.addAll(namespace.getNameForest());\n            break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..2ebb445c 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,18 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets > 0 && !name.isExported()) {\n+        // {@code name} meets condition (b).\n+        // Find one of its local aliases to inline.\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            // {@code name} meets condition (c).\n+            // Found an alias to inline. Inline it.\n+            inlineAlias(ref, name);\n+            // We modified the AST, so restart processing.\n+            workList.clear();\n+            workList.addAll(namespace.getNameForest());\n+            break;\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}