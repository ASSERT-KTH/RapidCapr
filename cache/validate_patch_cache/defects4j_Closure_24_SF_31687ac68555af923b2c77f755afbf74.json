{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null || (!n.isName() && !n.isStringKey())) {\n      continue;\n    }\n\n    Node parent = n.getParent();\n    if (parent == null || (!parent.isVar() && !parent.isFunction())) {\n      continue;\n    }\n\n    Node grandparent = parent.getParent();\n    if (grandparent == null \n            || (!grandparent.isScript() && !grandparent.isCall()\n                    && !grandparent.isBlock())) {\n      continue;\n    }\n    if (!grandparent.isScript()) {\n      Node greatGrandparent = grandparent.getParent();\n      if (greatGrandparent == null || !greatGrandparent.isCall()\n              || !grandparent.isFunction()) {\n        continue;\n      }\n    }\n\n    Node targetNode;\n    if (n.isName() && n.hasChildren()) {\n      targetNode = n.getFirstChild();\n    } else {\n      targetNode = n;\n    }\n\n    if (targetNode.isQualifiedName()) {\n      String name = targetNode.getQualifiedName();\n\n      // Check if this variable is a nested alias definition\n      if (isNestedAlias(name)) {\n        continue;\n      }\n\n      // Check if this variable is a duplicate alias definition\n      if (aliases.containsKey(name)) {\n        continue;\n      }\n\n      // Check if this variable is an alias definition\n      Var aliasVar = scope.getVar(name);\n      if (aliasVar == null) {\n        continue;\n      }\n      Node value = aliasVar.getInitialValue();\n      if (value == null) {\n        continue;\n      }\n\n      String qualifiedName = value.getQualifiedName();\n      if (qualifiedName == null) {\n        continue;\n      }\n\n      // Store the alias in the map and in the transformation\n      aliases.put(name, aliasVar);\n      transformation.addAlias(name, qualifiedName);\n    } else {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, targetNode.getString());\n    }\n  }\n}\n\nprivate boolean isNestedAlias(String name) {\n  for (String alias : aliases.keySet()) {\n    if (name.startsWith(alias + \".\")) {\n      return true;\n    } else if (alias.startsWith(name + \".\")) {\n      // This variable is an alias of a nested variable\n      String nestedAliasName = alias.substring(name.length()+1);\n      if (isNestedAlias(nestedAliasName)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..d008afd2 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,91 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null || (!n.isName() && !n.isStringKey())) {\n+      continue;\n+    }\n+\n+    Node parent = n.getParent();\n+    if (parent == null || (!parent.isVar() && !parent.isFunction())) {\n+      continue;\n+    }\n+\n+    Node grandparent = parent.getParent();\n+    if (grandparent == null \n+            || (!grandparent.isScript() && !grandparent.isCall()\n+                    && !grandparent.isBlock())) {\n+      continue;\n+    }\n+    if (!grandparent.isScript()) {\n+      Node greatGrandparent = grandparent.getParent();\n+      if (greatGrandparent == null || !greatGrandparent.isCall()\n+              || !grandparent.isFunction()) {\n+        continue;\n+      }\n+    }\n+\n+    Node targetNode;\n+    if (n.isName() && n.hasChildren()) {\n+      targetNode = n.getFirstChild();\n+    } else {\n+      targetNode = n;\n+    }\n+\n+    if (targetNode.isQualifiedName()) {\n+      String name = targetNode.getQualifiedName();\n+\n+      // Check if this variable is a nested alias definition\n+      if (isNestedAlias(name)) {\n+        continue;\n+      }\n+\n+      // Check if this variable is a duplicate alias definition\n+      if (aliases.containsKey(name)) {\n+        continue;\n+      }\n+\n+      // Check if this variable is an alias definition\n+      Var aliasVar = scope.getVar(name);\n+      if (aliasVar == null) {\n+        continue;\n+      }\n+      Node value = aliasVar.getInitialValue();\n+      if (value == null) {\n+        continue;\n       }\n+\n+      String qualifiedName = value.getQualifiedName();\n+      if (qualifiedName == null) {\n+        continue;\n+      }\n+\n+      // Store the alias in the map and in the transformation\n+      aliases.put(name, aliasVar);\n+      transformation.addAlias(name, qualifiedName);\n+    } else {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, targetNode.getString());\n     }\n+  }\n+}\n+\n+private boolean isNestedAlias(String name) {\n+  for (String alias : aliases.keySet()) {\n+    if (name.startsWith(alias + \".\")) {\n+      return true;\n+    } else if (alias.startsWith(name + \".\")) {\n+      // This variable is an alias of a nested variable\n+      String nestedAliasName = alias.substring(name.length()+1);\n+      if (isNestedAlias(nestedAliasName)) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}