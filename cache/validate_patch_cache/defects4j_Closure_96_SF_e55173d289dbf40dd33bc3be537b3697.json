{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter;\n  Node argument;\n  boolean hasVarArgs = false;\n  boolean skipReportingNonexistingParameters = false;\n  while (parameters.hasNext() && (skipReportingNonexistingParameters || arguments.hasNext())) {\n    parameter = parameters.next();\n    if (!parameter.isVarArgs()) {\n      if (!arguments.hasNext()) {\n        int minArguments = functionType.getMinArguments();\n        int maxArguments = functionType.getMaxArguments();\n        if ((ordinal < minArguments) || (maxArguments != -1 && ordinal > maxArguments)) {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n              \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n              \"\");\n        }\n        return;\n      }\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    } else {\n      hasVarArgs = true;\n      break;\n    }\n  }\n\n  if (hasVarArgs) {\n    List<Node> varArgs = new ArrayList<>();\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      varArgs.add(argument);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), functionType.getReturnType(), call, ordinal++);\n    }\n  } else {\n    int minArguments = functionType.getMinArguments();\n    int maxArguments = functionType.getMaxArguments();\n    if (arguments.hasNext()) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n          \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n          \"\");\n    } else if (parameters.hasNext()) {\n      parameter = parameters.next();\n      if (parameter.isOptionalArg()) {\n        skipReportingNonexistingParameters = true;\n        while (parameters.hasNext()) {\n          parameter = parameters.next();\n          if (!parameter.isOptionalArg()) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n                \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n                \"\");\n            return;\n          }\n        }\n      } else {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n            \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n            \"\");\n        return;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..b9b4e723 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,79 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter;\n+  Node argument;\n+  boolean hasVarArgs = false;\n+  boolean skipReportingNonexistingParameters = false;\n+  while (parameters.hasNext() && (skipReportingNonexistingParameters || arguments.hasNext())) {\n+    parameter = parameters.next();\n+    if (!parameter.isVarArgs()) {\n+      if (!arguments.hasNext()) {\n+        int minArguments = functionType.getMinArguments();\n+        int maxArguments = functionType.getMaxArguments();\n+        if ((ordinal < minArguments) || (maxArguments != -1 && ordinal > maxArguments)) {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n+              \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n+              \"\");\n+        }\n+        return;\n+      }\n       argument = arguments.next();\n       ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+    } else {\n+      hasVarArgs = true;\n+      break;\n     }\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+  if (hasVarArgs) {\n+    List<Node> varArgs = new ArrayList<>();\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      varArgs.add(argument);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), functionType.getReturnType(), call, ordinal++);\n+    }\n+  } else {\n+    int minArguments = functionType.getMinArguments();\n+    int maxArguments = functionType.getMaxArguments();\n+    if (arguments.hasNext()) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n+          \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n+          \"\");\n+    } else if (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (parameter.isOptionalArg()) {\n+        skipReportingNonexistingParameters = true;\n+        while (parameters.hasNext()) {\n+          parameter = parameters.next();\n+          if (!parameter.isOptionalArg()) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n+                \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n+                \"\");\n+            return;\n+          }\n+        }\n+      } else {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(ordinal),\n+            \"Function takes between \" + minArguments + \" and \" + (maxArguments == Integer.MAX_VALUE ? \"any number of\" : maxArguments) + \" argument(s)\",\n+            \"\");\n+        return;\n+      }\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}