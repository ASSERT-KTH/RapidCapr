{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    JSONArray fields = jsonObject.getJSONArray(\"fields\");\n    int numFields = fields.length();\n    if (numFields == 0) {\n        return 0.0;\n    }\n    int numTyped = 0;\n    for (int i = 0; i < numFields; i++) {\n        JSONObject field = fields.getJSONObject(i);\n        if (field.has(\"typed\")) {\n            String typed = field.getString(\"typed\");\n            if (!typed.isEmpty()) {\n                numTyped++;\n            }\n        }\n    }\n    return (double) numTyped / numFields * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8cee675b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    JSONArray fields = jsonObject.getJSONArray(\"fields\");\n+    int numFields = fields.length();\n+    if (numFields == 0) {\n+        return 0.0;\n+    }\n+    int numTyped = 0;\n+    for (int i = 0; i < numFields; i++) {\n+        JSONObject field = fields.getJSONObject(i);\n+        if (field.has(\"typed\")) {\n+            String typed = field.getString(\"typed\");\n+            if (!typed.isEmpty()) {\n+                numTyped++;\n+            }\n+        }\n+    }\n+    return (double) numTyped / numFields * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}