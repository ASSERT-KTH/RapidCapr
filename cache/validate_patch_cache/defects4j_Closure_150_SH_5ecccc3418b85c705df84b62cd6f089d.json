{
    "patch": "      attachLiteralTypes(n);\n      if (n.getType() == Token.FUNCTION) {\n        if (NodeUtil.isFunctionExpression(n)) {\n            // Handle the case \"var x = function(){};\"\n            defineDeclaredFunction(n, parent);\n        } else {\n            // Handle the case \"function x(){};\"\n            if (parent.getType() == Token.EXPR_RESULT) {\n              defineDeclaredFunction(n, parent);\n            } else if (NodeUtil.isClassStatement(n)) {\n              defineClass(n, parent);\n            }\n        }\n        return;\n      }\n      switch (n.getType()) {\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..864c0879 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,19 +1449,29 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n+      if (n.getType() == Token.FUNCTION) {\n+        if (NodeUtil.isFunctionExpression(n)) {\n+            // Handle the case \"var x = function(){};\"\n+            defineDeclaredFunction(n, parent);\n+        } else {\n+            // Handle the case \"function x(){};\"\n+            if (parent.getType() == Token.EXPR_RESULT) {\n+              defineDeclaredFunction(n, parent);\n+            } else if (NodeUtil.isClassStatement(n)) {\n+              defineClass(n, parent);\n+            }\n+        }\n+        return;\n+      }\n       switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}