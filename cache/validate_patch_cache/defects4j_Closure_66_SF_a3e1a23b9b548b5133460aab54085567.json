{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Map<String, Object> map = gson.fromJson(jsonStr, new TypeToken<Map<String, Object>>() {}.getType());\n    int total = 0;\n    int typed = 0;\n    for (Object obj : map.values()) {\n        total++;\n        if (obj instanceof Map) {\n            Map<String, Object> typedMap = (Map<String, Object>) obj;\n            if (typedMap.containsKey(\"type\")) {\n                typed++;\n            }\n        }\n    }\n    return (double) typed / total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ffd64a0e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Map<String, Object> map = gson.fromJson(jsonStr, new TypeToken<Map<String, Object>>() {}.getType());\n+    int total = 0;\n+    int typed = 0;\n+    for (Object obj : map.values()) {\n+        total++;\n+        if (obj instanceof Map) {\n+            Map<String, Object> typedMap = (Map<String, Object>) obj;\n+            if (typedMap.containsKey(\"type\")) {\n+                typed++;\n+            }\n+        }\n+    }\n+    return (double) typed / total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}