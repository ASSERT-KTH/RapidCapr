{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            \n            if (comparator.compare(reflected, expanded) < 0) {\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n            } else {\n                // reflected point was better\n                simplex[0] = reflected;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : contracted.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], contracted} : new RealPointValuePair[] {best, contracted, original[1], original[0]};\n            } else {\n                // check convergence\n                final RealPointValuePair secondWorst = original[original.length - 2];\n                final double center = 0.5 * (best.getValue() + secondWorst.getValue());\n                final double range = Math.abs(best.getValue() - secondWorst.getValue());\n                if (range < getRelativeThreshold() * (Math.abs(best.getValue()) + getRelativeThreshold())) {\n                    return;\n                }\n\n                // perform a contraction\n                final RealPointValuePair contractedSimplex[] = new RealPointValuePair[original.length];\n                contractedSimplex[0] = best;\n                for (int i = 1; i < original.length; i++) {\n                    contractedSimplex[i] = new RealPointValuePair(\n                            original[i].getPoint().add(original[0].getPoint().subtract(original[i].getPoint()).mapMultiply(0.5)),\n                            Double.NaN);\n                }\n                for (int i = 0; i < original.length; i++) {\n                    if (contractedSimplex[i].getValue() == Double.NaN) {\n                        contractedSimplex[i] = new RealPointValuePair(function.value(contractedSimplex[i].getPoint()), contractedSimplex[i].getPoint());\n                    }\n                }\n                comparator.compare(contractedSimplex[0], contractedSimplex[1]);\n                comparator.compare(contractedSimplex[0], contractedSimplex[2]);\n\n                if (comparator.compare(contractedSimplex[0], contractedSimplex[1]) <= 0\n                        && comparator.compare(contractedSimplex[0], contractedSimplex[2]) <= 0) {\n                    simplex = contractedSimplex;\n                } else {\n                    // shrink the simplex\n                    for (int i = 1; i < simplex.length; i++) {\n                        simplex[i] = new RealPointValuePair(\n                                simplex[0].getPoint().add(simplex[i].getPoint().subtract(simplex[0].getPoint()).mapMultiply(sigma)),\n                                Double.NaN);\n                    }\n\n                    for (int i = 0; i < simplex.length; i++) {\n                        if (simplex[i].getValue() == Double.NaN) {\n                            simplex[i] = new RealPointValuePair(function.value(simplex[i].getPoint()), simplex[i].getPoint());\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..9eafc6649 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,88 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            \n+            if (comparator.compare(reflected, expanded) < 0) {\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // reflected point was better\n+                simplex[0] = reflected;\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : contracted.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], contracted} : new RealPointValuePair[] {best, contracted, original[1], original[0]};\n+            } else {\n+                // check convergence\n+                final RealPointValuePair secondWorst = original[original.length - 2];\n+                final double center = 0.5 * (best.getValue() + secondWorst.getValue());\n+                final double range = Math.abs(best.getValue() - secondWorst.getValue());\n+                if (range < getRelativeThreshold() * (Math.abs(best.getValue()) + getRelativeThreshold())) {\n+                    return;\n+                }\n \n-            // check convergence\n-                return;\n+                // perform a contraction\n+                final RealPointValuePair contractedSimplex[] = new RealPointValuePair[original.length];\n+                contractedSimplex[0] = best;\n+                for (int i = 1; i < original.length; i++) {\n+                    contractedSimplex[i] = new RealPointValuePair(\n+                            original[i].getPoint().add(original[0].getPoint().subtract(original[i].getPoint()).mapMultiply(0.5)),\n+                            Double.NaN);\n+                }\n+                for (int i = 0; i < original.length; i++) {\n+                    if (contractedSimplex[i].getValue() == Double.NaN) {\n+                        contractedSimplex[i] = new RealPointValuePair(function.value(contractedSimplex[i].getPoint()), contractedSimplex[i].getPoint());\n+                    }\n+                }\n+                comparator.compare(contractedSimplex[0], contractedSimplex[1]);\n+                comparator.compare(contractedSimplex[0], contractedSimplex[2]);\n+\n+                if (comparator.compare(contractedSimplex[0], contractedSimplex[1]) <= 0\n+                        && comparator.compare(contractedSimplex[0], contractedSimplex[2]) <= 0) {\n+                    simplex = contractedSimplex;\n+                } else {\n+                    // shrink the simplex\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        simplex[i] = new RealPointValuePair(\n+                                simplex[0].getPoint().add(simplex[i].getPoint().subtract(simplex[0].getPoint()).mapMultiply(sigma)),\n+                                Double.NaN);\n+                    }\n+\n+                    for (int i = 0; i < simplex.length; i++) {\n+                        if (simplex[i].getValue() == Double.NaN) {\n+                            simplex[i] = new RealPointValuePair(function.value(simplex[i].getPoint()), simplex[i].getPoint());\n+                        }\n+                    }\n+                }\n             }\n-\n         }\n \n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}