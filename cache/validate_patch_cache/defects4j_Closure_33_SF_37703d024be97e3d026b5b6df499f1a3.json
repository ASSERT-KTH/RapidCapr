{
    "patch": "// We only want to match constraints on anonymous types.\nif (!isNominalConstructor()) {\n    return;\n}\n\n// Handle the case where the constraint object is a record type.\nif (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = null;\n            \n            if (hasProperty(prop)) {\n                typeToInfer = getPropertyType(prop).getLeastSupertype(propType);\n            } else {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n            }\n            \n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..f7385b2f 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,27 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n+// We only want to match constraints on anonymous types.\n+if (!isNominalConstructor()) {\n+    return;\n+}\n+\n+// Handle the case where the constraint object is a record type.\n+if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+            JSType typeToInfer = null;\n+            \n+            if (hasProperty(prop)) {\n+                typeToInfer = getPropertyType(prop).getLeastSupertype(propType);\n+            } else {\n+                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+            }\n+            \n+            defineInferredProperty(prop, typeToInfer, null);\n         }\n-      }\n     }\n-  }\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}