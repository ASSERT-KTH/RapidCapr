{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a\n    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n    // are skipped. \n    // Either an empty statement or a block with exactly one child,\n    // will not qualify as a FUNCTION or DO.\n    return (n.getType() == Token.FUNCTION || (n.getType() == Token.DO && NodeUtil.getFunctionNode(n) == null))\n        && (n.getFirstChild() == null || n.getFirstChild() == n.getLastChild());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..2677b84a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,13 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+    // For labels with block children, we need to ensure that a\n+    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n+    // are skipped. \n+    // Either an empty statement or a block with exactly one child,\n+    // will not qualify as a FUNCTION or DO.\n+    return (n.getType() == Token.FUNCTION || (n.getType() == Token.DO && NodeUtil.getFunctionNode(n) == null))\n+        && (n.getFirstChild() == null || n.getFirstChild() == n.getLastChild());\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}