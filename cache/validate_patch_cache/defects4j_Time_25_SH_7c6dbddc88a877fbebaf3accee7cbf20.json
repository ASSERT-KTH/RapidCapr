{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // if we are in a gap, we need to move the time forward\n                    // by the size of the gap.\n                    return getOffset(nextLocal);\n                }\n                // otherwise, we are in an overlap, and we need to move back\n                // by the size of the overlap.\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevAdjusted == prevLocal) {\n                    return offsetAdjusted;\n                }\n                final int offsetBefore = getOffset(prevAdjusted);\n                final int offsetAfter = getOffset(prevLocal);\n                assert offsetAfter > offsetBefore;\n                final long diff = prevLocal - prevAdjusted;\n                final long midPoint = prevAdjusted + diff / 2;\n                return getOffset(midPoint);\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d3fd9edc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,30 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // if we are in a gap, we need to move the time forward\n+                    // by the size of the gap.\n+                    return getOffset(nextLocal);\n+                }\n+                // otherwise, we are in an overlap, and we need to move back\n+                // by the size of the overlap.\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevAdjusted == prevLocal) {\n+                    return offsetAdjusted;\n+                }\n+                final int offsetBefore = getOffset(prevAdjusted);\n+                final int offsetAfter = getOffset(prevLocal);\n+                assert offsetAfter > offsetBefore;\n+                final long diff = prevLocal - prevAdjusted;\n+                final long midPoint = prevAdjusted + diff / 2;\n+                return getOffset(midPoint);\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}