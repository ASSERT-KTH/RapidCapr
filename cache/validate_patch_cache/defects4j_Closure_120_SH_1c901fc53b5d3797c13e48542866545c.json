{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoopHeader() && !block.getSuccessors().isEmpty()) {\n          BasicBlock successor = block.getSuccessors().get(0);\n          boolean isAssignedInLoop = false;\n          for (Reference use : references) {\n            if (use.definition != null && use.definition.getBasicBlock() == successor) {\n              isAssignedInLoop = true;\n              break;\n            }\n          }\n          return !isAssignedInLoop;\n        } else if (block.isLoop) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e50dbecc 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoopHeader() && !block.getSuccessors().isEmpty()) {\n+          BasicBlock successor = block.getSuccessors().get(0);\n+          boolean isAssignedInLoop = false;\n+          for (Reference use : references) {\n+            if (use.definition != null && use.definition.getBasicBlock() == successor) {\n+              isAssignedInLoop = true;\n+              break;\n+            }\n+          }\n+          return !isAssignedInLoop;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}