{
    "patch": "public static double digamma(double x) {\n    double result = 0;\n    for (int i = 1; i < 100000; i++) {\n        result -= 1 / (i + x - 1);\n    }\n    return result + log(x - 1) - (1 / (2 * x - 1));\n}\n\npublic static double regularizedGamma(double a, double x) {\n    double eps = 10e-15;\n    double gln = lgamma(a);\n    if (x < 0.0) {\n        System.out.println(\"Error: x less than 0.0\");\n        return 0.0;\n    } else if (x == 0.0) {\n        return 0.0;\n    } else {\n        double ax = (a * log(x)) - x - gln;\n        if (ax < -709.78271289338399) {\n            System.out.println(\"Underflow\");\n            return Double.POSITIVE_INFINITY;\n        } else {\n            double a1 = a;\n            double b1 = x + 1 - a;\n            double term = 1.0 / b1;\n            double fp = term;\n            double sum = fp;\n            double n = 1.0;\n            while (abs(fp / sum) > eps) {\n                ++n;\n                double a2 = a1 + n - 1;\n                double b2 = b1 + 2 * n - 1;\n                term *= (a1 - n + 1) * n / (b1 + n - 1) / b1;\n                fp = term * (a2 - x) / b2;\n                sum += fp;\n            }\n            return exp(ax) * sum;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..fe1c95738 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,46 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double digamma(double x) {\n+    double result = 0;\n+    for (int i = 1; i < 100000; i++) {\n+        result -= 1 / (i + x - 1);\n+    }\n+    return result + log(x - 1) - (1 / (2 * x - 1));\n+}\n+\n+public static double regularizedGamma(double a, double x) {\n+    double eps = 10e-15;\n+    double gln = lgamma(a);\n+    if (x < 0.0) {\n+        System.out.println(\"Error: x less than 0.0\");\n+        return 0.0;\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else {\n+        double ax = (a * log(x)) - x - gln;\n+        if (ax < -709.78271289338399) {\n+            System.out.println(\"Underflow\");\n+            return Double.POSITIVE_INFINITY;\n+        } else {\n+            double a1 = a;\n+            double b1 = x + 1 - a;\n+            double term = 1.0 / b1;\n+            double fp = term;\n+            double sum = fp;\n+            double n = 1.0;\n+            while (abs(fp / sum) > eps) {\n+                ++n;\n+                double a2 = a1 + n - 1;\n+                double b2 = b1 + 2 * n - 1;\n+                term *= (a1 - n + 1) * n / (b1 + n - 1) / b1;\n+                fp = term * (a2 - x) / b2;\n+                sum += fp;\n+            }\n+            return exp(ax) * sum;\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}