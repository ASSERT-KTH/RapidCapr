{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    double yp = Math.abs(y[yOffset]);\n    double xp = Math.abs(x[xOffset]);\n    if (xp + yp == xp) {\n        if (y[yOffset] >= 0d) {\n            result[resultOffset] =  FastMath.PI / 2;\n        } else {\n            result[resultOffset] = -FastMath.PI / 2;\n        }\n    } else if (yp + xp == yp) {\n        if (x[xOffset] >= 0d) {\n            result[resultOffset] = 0d;\n        } else {\n            result[resultOffset] = FastMath.PI;\n        }\n    } else {\n        result[resultOffset] = Double.NaN;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..de0e3d5ca 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,25 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    double yp = Math.abs(y[yOffset]);\n+    double xp = Math.abs(x[xOffset]);\n+    if (xp + yp == xp) {\n+        if (y[yOffset] >= 0d) {\n+            result[resultOffset] =  FastMath.PI / 2;\n+        } else {\n+            result[resultOffset] = -FastMath.PI / 2;\n+        }\n+    } else if (yp + xp == yp) {\n+        if (x[xOffset] >= 0d) {\n+            result[resultOffset] = 0d;\n+        } else {\n+            result[resultOffset] = FastMath.PI;\n+        }\n+    } else {\n+        result[resultOffset] = Double.NaN;\n+    }\n+}\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<1.5707963267948966>",
    "test_result": "FAIL"
}