{
    "patch": "if (!constraintObj.isNominalConstructor() || constraintObj.hasReferenceName()) {\n      return;\n    }\n\n    // We only want to match contraints on anonymous types (e.g. `function({x: string}) {}`).\n    if (constraintObj.isConstructor() && !constraintObj.isInterface()) {\n      ObjectType instance = constraintObj.getPrototypeObject();\n      if (!instance.isOrHasTemplatedType()\n          || (instance.getTemplatedTypes().size() == 1\n              && instance.getConstructor().getTemplateTypes().size() == 1)) {\n        return;\n      }\n    }\n\n    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..c6205cc9 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,18 +552,21 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+if (!constraintObj.isNominalConstructor() || constraintObj.hasReferenceName()) {\n+      return;\n+    }\n+\n+    // We only want to match contraints on anonymous types (e.g. `function({x: string}) {}`).\n+    if (constraintObj.isConstructor() && !constraintObj.isInterface()) {\n+      ObjectType instance = constraintObj.getPrototypeObject();\n+      if (!instance.isOrHasTemplatedType()\n+          || (instance.getTemplatedTypes().size() == 1\n+              && instance.getConstructor().getTemplateTypes().size() == 1)) {\n+        return;\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n@@ -577,5 +580,4 @@ class PrototypeObjectType extends ObjectType {\n         }\n       }\n     }\n-  }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}