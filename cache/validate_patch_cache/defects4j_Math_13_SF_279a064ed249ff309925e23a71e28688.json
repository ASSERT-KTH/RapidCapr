{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n\n    // Calculate the square root of the diagonal matrix\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue >= 0) {\n            sqrtD.setEntry(i, i, Math.sqrt(eigenvalue));\n        } else {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n    }\n    \n    // If the eigenvalue decomposition failed to converge, use a specialized algorithm\n    if (!dec.getSolver().isSymmetric()) {\n        return specializedSquareRoot(m);\n    }\n\n    // Compute the square root of the matrix\n    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}\n\nprivate RealMatrix specializedSquareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double epsilon = 1e-14;\n\n    RealMatrix d = MatrixUtils.createRealMatrix(n, n);\n    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n\n    // initialize diagonal and super-diagonal matrices\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == j) {\n                d.setEntry(i, j, m.getEntry(i, j));\n                s.setEntry(i, j, 0);\n            } else {\n                s.setEntry(i, j, m.getEntry(i, j));\n            }\n        }\n    }\n\n    // compute square root of diagonal matrix\n    for (int i = 0; i < n; i++) {\n        double dd = d.getEntry(i, i);\n        if (dd < -epsilon) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        } else if (dd < epsilon) {\n            d.setEntry(i, i, epsilon);\n        }\n        double sqrtVal = 0.0;\n        if (dd >= 0) {\n            sqrtVal = Math.sqrt(dd);\n        }\n        sqrtM.setEntry(i, i, sqrtVal);\n    }\n\n    // compute square root of matrix\n    for (int k = 0; k < n; k++) {\n        sqrtM.setEntry(k, k, 1.0/sqrtM.getEntry(k, k));\n        for (int j = k+1; j < n; j++) {\n            sqrtM.setEntry(k, j, 0.0);\n        }\n        for (int j = k + 1; j < n; j++) {\n            double factor = s.getEntry(j, k) * sqrtM.getEntry(k, k) / sqrtM.getEntry(j, j);\n            sqrtM.setEntry(j, j, sqrtM.getEntry(j, j) * Math.sqrt(1 + factor*factor));\n            sqrtM.setEntry(k, j, factor / sqrtM.getEntry(j, j));\n        }\n    }\n\n    // compute final square root\n    sqrtM = sqrtM.multiply(sqrtM.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..89f099bc3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,83 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+\n+    // Calculate the square root of the diagonal matrix\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue >= 0) {\n+            sqrtD.setEntry(i, i, Math.sqrt(eigenvalue));\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n+    }\n+    \n+    // If the eigenvalue decomposition failed to converge, use a specialized algorithm\n+    if (!dec.getSolver().isSymmetric()) {\n+        return specializedSquareRoot(m);\n+    }\n+\n+    // Compute the square root of the matrix\n+    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n+\n+private RealMatrix specializedSquareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double epsilon = 1e-14;\n+\n+    RealMatrix d = MatrixUtils.createRealMatrix(n, n);\n+    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+\n+    // initialize diagonal and super-diagonal matrices\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            if (i == j) {\n+                d.setEntry(i, j, m.getEntry(i, j));\n+                s.setEntry(i, j, 0);\n+            } else {\n+                s.setEntry(i, j, m.getEntry(i, j));\n+            }\n+        }\n+    }\n+\n+    // compute square root of diagonal matrix\n+    for (int i = 0; i < n; i++) {\n+        double dd = d.getEntry(i, i);\n+        if (dd < -epsilon) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        } else if (dd < epsilon) {\n+            d.setEntry(i, i, epsilon);\n+        }\n+        double sqrtVal = 0.0;\n+        if (dd >= 0) {\n+            sqrtVal = Math.sqrt(dd);\n+        }\n+        sqrtM.setEntry(i, i, sqrtVal);\n     }\n+\n+    // compute square root of matrix\n+    for (int k = 0; k < n; k++) {\n+        sqrtM.setEntry(k, k, 1.0/sqrtM.getEntry(k, k));\n+        for (int j = k+1; j < n; j++) {\n+            sqrtM.setEntry(k, j, 0.0);\n+        }\n+        for (int j = k + 1; j < n; j++) {\n+            double factor = s.getEntry(j, k) * sqrtM.getEntry(k, k) / sqrtM.getEntry(j, j);\n+            sqrtM.setEntry(j, j, sqrtM.getEntry(j, j) * Math.sqrt(1 + factor*factor));\n+            sqrtM.setEntry(k, j, factor / sqrtM.getEntry(j, j));\n+        }\n+    }\n+\n+    // compute final square root\n+    sqrtM = sqrtM.multiply(sqrtM.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}