{
    "patch": "    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isUnknownType()) {\n      return this;\n    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {\n      String message = \"Expected object type but found {0}\";\n      t.report(JSError.make(this.getSourceFileName(), this.getNode(), RhinoErrorReporter.TYPE_PARSE_ERROR, message,\n                            resolvedTypeOfThis.toString()));\n      return this;\n    } else {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..0a5484a2 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,16 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (resolvedTypeOfThis.isUnknownType()) {\n+      return this;\n+    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {\n+      String message = \"Expected object type but found {0}\";\n+      t.report(JSError.make(this.getSourceFileName(), this.getNode(), RhinoErrorReporter.TYPE_PARSE_ERROR, message,\n+                            resolvedTypeOfThis.toString()));\n+      return this;\n+    } else {\n+      typeOfThis = (ObjectType) resolvedTypeOfThis;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}