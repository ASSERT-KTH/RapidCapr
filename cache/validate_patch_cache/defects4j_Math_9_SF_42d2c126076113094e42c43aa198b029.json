{
    "patch": "public Line revert() {\n    Vector normalizedDirection = direction.normalize(); // normalize direction\n    double[] startPoint = {Math.round(zero.getPoint()[0] * 1e12) / 1e12, Math.round(zero.getPoint()[1] * 1e12) / 1e12}; // round start point to 12 decimal places\n    double[] endPoint = {Math.round((zero.add(normalizedDirection)).getPoint()[0] * 1e12) / 1e12, Math.round((zero.add(normalizedDirection)).getPoint()[1] * 1e12) / 1e12}; // round end point to 12 decimal places\n    final Line reverted = new Line(new Point(startPoint), new Point(endPoint));\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..b0ada7b8e 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,13 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    Vector normalizedDirection = direction.normalize(); // normalize direction\n+    double[] startPoint = {Math.round(zero.getPoint()[0] * 1e12) / 1e12, Math.round(zero.getPoint()[1] * 1e12) / 1e12}; // round start point to 12 decimal places\n+    double[] endPoint = {Math.round((zero.add(normalizedDirection)).getPoint()[0] * 1e12) / 1e12, Math.round((zero.add(normalizedDirection)).getPoint()[1] * 1e12) / 1e12}; // round end point to 12 decimal places\n+    final Line reverted = new Line(new Point(startPoint), new Point(endPoint));\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}