{
    "patch": "public static String unescape(final String input) {\n    final StringWriter output = new StringWriter(input.length());\n    int i = 0;\n    while (i < input.length()) {\n        char ch = input.charAt(i++);\n        if (ch == '\\\\') {\n            if (i < input.length()) {\n                ch = input.charAt(i++);\n                if (ch == 'n') {\n                    ch = '\\n';\n                } else if (ch == 'r') {\n                    ch = '\\r';\n                } else if (ch == 't') {\n                    ch = '\\t';\n                } else if (ch == 'f') {\n                    ch = '\\f';\n                } else if (ch == 'b') {\n                    ch = '\\b';\n                } else if (ch == '\\\"' || ch == '\\'' || ch == '\\\\') {\n                    // This concatenation is the fix for the previous issue\n                    // where the escape character was being omitted\n                    ch = ch;\n                } else if (ch >= '0' && ch <= '7') {\n                    int octal = Character.digit(ch, 8);\n                    if (i < input.length() && input.charAt(i) >= '0'\n                            && input.charAt(i) <= '7') {\n                        octal = octal * 8 + Character.digit(input.charAt(i++), 8);\n                    }\n                    if (i < input.length() && input.charAt(i) >= '0'\n                            && input.charAt(i) <= '7') {\n                        octal = octal * 8 + Character.digit(input.charAt(i++), 8);\n                    }\n                    ch = (char) octal;\n                } else if (ch == 'u' && i < input.length() && input.charAt(i) == '{') {\n                    int start = ++i;\n                    while (i < input.length() && input.charAt(i) != '}') {\n                        ++i;\n                    }\n                    if (i < input.length()) {\n                        final String digits = input.substring(start, i++);\n                        try {\n                            final int codepoint = Integer.parseInt(digits, 16);\n                            ch = Character.toChars(codepoint)[0];\n                        }\n                        catch (NumberFormatException nfe) {\n                            throw new IllegalArgumentException(\"Unable to parse unicode value: \" + digits, nfe);\n                        }\n                    }\n                    else {\n                        throw new IllegalArgumentException(\"Incomplete unicode escape sequence at end of input: \" + input.substring(start-2));\n                    }\n                }\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + input.substring(i - 1));\n            }\n        }\n        output.write(ch);\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1fa3c222 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,66 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(final String input) {\n+    final StringWriter output = new StringWriter(input.length());\n+    int i = 0;\n+    while (i < input.length()) {\n+        char ch = input.charAt(i++);\n+        if (ch == '\\\\') {\n+            if (i < input.length()) {\n+                ch = input.charAt(i++);\n+                if (ch == 'n') {\n+                    ch = '\\n';\n+                } else if (ch == 'r') {\n+                    ch = '\\r';\n+                } else if (ch == 't') {\n+                    ch = '\\t';\n+                } else if (ch == 'f') {\n+                    ch = '\\f';\n+                } else if (ch == 'b') {\n+                    ch = '\\b';\n+                } else if (ch == '\\\"' || ch == '\\'' || ch == '\\\\') {\n+                    // This concatenation is the fix for the previous issue\n+                    // where the escape character was being omitted\n+                    ch = ch;\n+                } else if (ch >= '0' && ch <= '7') {\n+                    int octal = Character.digit(ch, 8);\n+                    if (i < input.length() && input.charAt(i) >= '0'\n+                            && input.charAt(i) <= '7') {\n+                        octal = octal * 8 + Character.digit(input.charAt(i++), 8);\n+                    }\n+                    if (i < input.length() && input.charAt(i) >= '0'\n+                            && input.charAt(i) <= '7') {\n+                        octal = octal * 8 + Character.digit(input.charAt(i++), 8);\n+                    }\n+                    ch = (char) octal;\n+                } else if (ch == 'u' && i < input.length() && input.charAt(i) == '{') {\n+                    int start = ++i;\n+                    while (i < input.length() && input.charAt(i) != '}') {\n+                        ++i;\n+                    }\n+                    if (i < input.length()) {\n+                        final String digits = input.substring(start, i++);\n+                        try {\n+                            final int codepoint = Integer.parseInt(digits, 16);\n+                            ch = Character.toChars(codepoint)[0];\n+                        }\n+                        catch (NumberFormatException nfe) {\n+                            throw new IllegalArgumentException(\"Unable to parse unicode value: \" + digits, nfe);\n+                        }\n+                    }\n+                    else {\n+                        throw new IllegalArgumentException(\"Incomplete unicode escape sequence at end of input: \" + input.substring(start-2));\n+                    }\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + input.substring(i - 1));\n+            }\n+        }\n+        output.write(ch);\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}