{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    long instantBefore = instantLocal - offsetLocal;\n    long instantAfter = instantLocal - offsetAdjusted;\n\n    // Try both transitions\n    long next = nextTransition(instantAdjusted);\n    long prev = previousTransition(instantAdjusted);\n\n    if (offsetLocal > offsetAdjusted) {\n        // If we are moving from later (summer) to earlier (winter) time, use next transition\n        if (next <= instantAfter) {\n            return offsetLocal;\n        } else if (prev <= instantBefore) {\n            return offsetAdjusted;\n        } else {\n            return offsetLocal;\n        }\n    } else {\n        // If we are moving from earlier (winter) to later (summer) time, use previous transition\n        if (prev <= instantBefore) {\n            return offsetAdjusted;\n        } else if (next <= instantAfter) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..006033af 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    long instantBefore = instantLocal - offsetLocal;\n+    long instantAfter = instantLocal - offsetAdjusted;\n+\n+    // Try both transitions\n+    long next = nextTransition(instantAdjusted);\n+    long prev = previousTransition(instantAdjusted);\n+\n+    if (offsetLocal > offsetAdjusted) {\n+        // If we are moving from later (summer) to earlier (winter) time, use next transition\n+        if (next <= instantAfter) {\n+            return offsetLocal;\n+        } else if (prev <= instantBefore) {\n+            return offsetAdjusted;\n+        } else {\n+            return offsetLocal;\n+        }\n+    } else {\n+        // If we are moving from earlier (winter) to later (summer) time, use previous transition\n+        if (prev <= instantBefore) {\n+            return offsetAdjusted;\n+        } else if (next <= instantAfter) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}