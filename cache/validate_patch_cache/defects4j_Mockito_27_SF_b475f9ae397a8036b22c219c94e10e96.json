{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    List<Callback> callbacks = new ArrayList<>();\n    callbacks.add(newFilter);\n    if (mock instanceof Factory) {\n        Callback[] originalCallbacks = ((Factory) mock).getCallbacks();\n        for (int i = 0; i < originalCallbacks.length; i++) {\n            if (originalCallbacks[i] instanceof SerializableMock) {\n                callbacks.add(1, originalCallbacks[i]);\n            } else {\n                callbacks.add(originalCallbacks[i]);\n            }\n        }\n        ((Factory) mock).setCallbacks(callbacks.toArray(new Callback[callbacks.size()]));\n    } else if (mock instanceof SerializableMock) {\n        Callback[] originalCallbacks = ((SerializableMock) mock).getCallbacks();\n        for (int i = 0; i < originalCallbacks.length; i++) {\n            callbacks.add(originalCallbacks[i]);\n        }\n        ((SerializableMock) mock).setCallbacks(callbacks.toArray(new Callback[callbacks.size()]));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..1c0f805b0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    List<Callback> callbacks = new ArrayList<>();\n+    callbacks.add(newFilter);\n+    if (mock instanceof Factory) {\n+        Callback[] originalCallbacks = ((Factory) mock).getCallbacks();\n+        for (int i = 0; i < originalCallbacks.length; i++) {\n+            if (originalCallbacks[i] instanceof SerializableMock) {\n+                callbacks.add(1, originalCallbacks[i]);\n+            } else {\n+                callbacks.add(originalCallbacks[i]);\n+            }\n+        }\n+        ((Factory) mock).setCallbacks(callbacks.toArray(new Callback[callbacks.size()]));\n+    } else if (mock instanceof SerializableMock) {\n+        Callback[] originalCallbacks = ((SerializableMock) mock).getCallbacks();\n+        for (int i = 0; i < originalCallbacks.length; i++) {\n+            callbacks.add(originalCallbacks[i]);\n+        }\n+        ((SerializableMock) mock).setCallbacks(callbacks.toArray(new Callback[callbacks.size()]));\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}