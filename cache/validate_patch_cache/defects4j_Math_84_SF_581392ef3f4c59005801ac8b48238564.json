{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    int numIterations = 0;\n    final int maxIterations = getMaxIterations();\n    double[] xSmallest = simplex[0].getPoint();\n    double[] xTrial;\n    double[] xHighest;\n    double ySmallest = simplex[0].getValue();\n    double yAttempt;\n    while (numIterations < maxIterations) {\n        yHighest = ySmallest;\n        ySmallest = Double.POSITIVE_INFINITY;\n        int highest = 0;\n        for (int i = 1; i <= simplex.length; i++) {\n            if (simplex[i].getValue() < ySmallest) {\n                ySmallest = simplex[i].getValue();\n                xSmallest = simplex[i].getPoint();\n            } else if (simplex[i].getValue() > yHighest) {\n                yHighest = simplex[i].getValue();\n                highest = i;\n            }\n        }\n\n        boolean toThrowOutside = true;\n        if (Math.abs(yHighest - ySmallest) < getRelativeThreshold() * (Math.abs(yHighest) + Math.abs(ySmallest)) + getAbsoluteThreshold()) {\n            setResult(new RealPointValuePair(xSmallest, ySmallest));\n            return;\n        }\n        incrementIterationsCounter();\n\n        // Try reflection\n        final RealPointValuePair reflected = evaluateNewSimplex(original, -1.0, comparator);\n        if (comparator.compare(reflected, simplex[highest]) < 0) {\n            xTrial = reflected.getPoint();\n            final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n            newSimplex[0] = simplex[0];\n            for (int i = 1; i < simplex.length; i++) {\n                if (i == highest) {\n                    newSimplex[i] = reflected;\n                } else {\n                    newSimplex[i] = simplex[i].add(reflected).subtract(simplex[highest]).scalarMultiply(0.5);\n                }\n            }\n            simplex = newSimplex;\n            toThrowOutside = false;\n        } else if (comparator.compare(reflected, simplex[highest]) >= 0 && comparator.compare(reflected, simplex[simplex.length - 1]) < 0) {\n            xTrial = reflected.getPoint();\n            simplex[simplex.length - 1] = reflected;\n            toThrowOutside = false;\n        } else {\n            if (comparator.compare(reflected, simplex[simplex.length - 1]) >= 0) {\n                xTrial = simplex[highest].add(simplex[highest].subtract(simplex[0]).scalarMultiply(0.5)).getPoint();\n            } else {\n                xTrial = reflected.getPoint();\n            }\n        }\n\n        if (toThrowOutside) {\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(contracted, simplex[highest]) < 0) {\n                xTrial = contracted.getPoint();\n                final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n                newSimplex[0] = simplex[0];\n                for (int i = 1; i < simplex.length; i++) {\n                    newSimplex[i] = simplex[i].add(simplex[highest]).scalarMultiply(0.5);\n                }\n                simplex = newSimplex;\n                toThrowOutside = false;\n            } else {\n                for (int i = 0; i < simplex.length; i++) {\n                    if (i != 0) {\n                        simplex[i] = simplex[0].add(simplex[i].subtract(simplex[0]).scalarMultiply(sigma));\n                    }\n                }\n            }\n        }\n        if (toThrowOutside) {\n            for (int i = 0; i < simplex.length; i++) {\n                if (i != 0) {\n                    simplex[i] = simplex[0].add(simplex[i].subtract(simplex[0]).scalarMultiply(sigma));\n                }\n            }\n        }\n\n        final RealPointValuePair trial = new RealPointValuePair(xTrial, computeObjectiveValue(xTrial));\n        if (comparator.compare(trial, simplex[0]) < 0) {\n            // Accept trial point\n            simplex[simplex.length - 1] = trial;\n        } else {\n            // Shrink\n            for (int i = 1; i < simplex.length; i++) {\n                // a small delta prevents two equal points (after subtraction) from becoming identical\n                simplex[i] = simplex[0].add(simplex[i].subtract(simplex[0])).scalarMultiply(0.5 * delta).add(simplex[i].scalarMultiply(1 - 0.5 * delta));\n            }\n        }\n    }\n\n    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6845e6e9f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,107 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    int numIterations = 0;\n+    final int maxIterations = getMaxIterations();\n+    double[] xSmallest = simplex[0].getPoint();\n+    double[] xTrial;\n+    double[] xHighest;\n+    double ySmallest = simplex[0].getValue();\n+    double yAttempt;\n+    while (numIterations < maxIterations) {\n+        yHighest = ySmallest;\n+        ySmallest = Double.POSITIVE_INFINITY;\n+        int highest = 0;\n+        for (int i = 1; i <= simplex.length; i++) {\n+            if (simplex[i].getValue() < ySmallest) {\n+                ySmallest = simplex[i].getValue();\n+                xSmallest = simplex[i].getPoint();\n+            } else if (simplex[i].getValue() > yHighest) {\n+                yHighest = simplex[i].getValue();\n+                highest = i;\n+            }\n+        }\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+        boolean toThrowOutside = true;\n+        if (Math.abs(yHighest - ySmallest) < getRelativeThreshold() * (Math.abs(yHighest) + Math.abs(ySmallest)) + getAbsoluteThreshold()) {\n+            setResult(new RealPointValuePair(xSmallest, ySmallest));\n+            return;\n+        }\n+        incrementIterationsCounter();\n+\n+        // Try reflection\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, -1.0, comparator);\n+        if (comparator.compare(reflected, simplex[highest]) < 0) {\n+            xTrial = reflected.getPoint();\n+            final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n+            newSimplex[0] = simplex[0];\n+            for (int i = 1; i < simplex.length; i++) {\n+                if (i == highest) {\n+                    newSimplex[i] = reflected;\n+                } else {\n+                    newSimplex[i] = simplex[i].add(reflected).subtract(simplex[highest]).scalarMultiply(0.5);\n                 }\n-\n-                return;\n-\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            simplex = newSimplex;\n+            toThrowOutside = false;\n+        } else if (comparator.compare(reflected, simplex[highest]) >= 0 && comparator.compare(reflected, simplex[simplex.length - 1]) < 0) {\n+            xTrial = reflected.getPoint();\n+            simplex[simplex.length - 1] = reflected;\n+            toThrowOutside = false;\n+        } else {\n+            if (comparator.compare(reflected, simplex[simplex.length - 1]) >= 0) {\n+                xTrial = simplex[highest].add(simplex[highest].subtract(simplex[0]).scalarMultiply(0.5)).getPoint();\n+            } else {\n+                xTrial = reflected.getPoint();\n             }\n+        }\n \n+        if (toThrowOutside) {\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(contracted, simplex[highest]) < 0) {\n+                xTrial = contracted.getPoint();\n+                final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n+                newSimplex[0] = simplex[0];\n+                for (int i = 1; i < simplex.length; i++) {\n+                    newSimplex[i] = simplex[i].add(simplex[highest]).scalarMultiply(0.5);\n+                }\n+                simplex = newSimplex;\n+                toThrowOutside = false;\n+            } else {\n+                for (int i = 0; i < simplex.length; i++) {\n+                    if (i != 0) {\n+                        simplex[i] = simplex[0].add(simplex[i].subtract(simplex[0]).scalarMultiply(sigma));\n+                    }\n+                }\n+            }\n+        }\n+        if (toThrowOutside) {\n+            for (int i = 0; i < simplex.length; i++) {\n+                if (i != 0) {\n+                    simplex[i] = simplex[0].add(simplex[i].subtract(simplex[0]).scalarMultiply(sigma));\n+                }\n+            }\n         }\n \n+        final RealPointValuePair trial = new RealPointValuePair(xTrial, computeObjectiveValue(xTrial));\n+        if (comparator.compare(trial, simplex[0]) < 0) {\n+            // Accept trial point\n+            simplex[simplex.length - 1] = trial;\n+        } else {\n+            // Shrink\n+            for (int i = 1; i < simplex.length; i++) {\n+                // a small delta prevents two equal points (after subtraction) from becoming identical\n+                simplex[i] = simplex[0].add(simplex[i].subtract(simplex[0])).scalarMultiply(0.5 * delta).add(simplex[i].scalarMultiply(1 - 0.5 * delta));\n+            }\n+        }\n     }\n \n+    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}