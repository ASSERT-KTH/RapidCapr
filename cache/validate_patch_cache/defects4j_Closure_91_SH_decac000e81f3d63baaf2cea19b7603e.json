{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.IN) {\n          // e.g. for \"goog.inherits(Sub, Super);\", we don't want to traverse Super\n          return false;\n        }\n        Node getter = NodeUtil.getGetterDefIfGetter(parent);\n        if (getter != null && getter.getParent().getType() == Token.OBJECTLIT) {\n          // e.g. don't traverse the getter in \"var obj = {get a() {}};\"\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..390d1c4a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,19 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.IN) {\n+          // e.g. for \"goog.inherits(Sub, Super);\", we don't want to traverse Super\n+          return false;\n+        }\n+        Node getter = NodeUtil.getGetterDefIfGetter(parent);\n+        if (getter != null && getter.getParent().getType() == Token.OBJECTLIT) {\n+          // e.g. don't traverse the getter in \"var obj = {get a() {}};\"\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}