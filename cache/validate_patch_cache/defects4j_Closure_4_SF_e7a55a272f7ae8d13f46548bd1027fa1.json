{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  if (isResolved()) {\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  boolean cycleDetected = detectImplicitPrototypeCycle();\n\n  if (cycleDetected) {\n    handleTypeCycle(t);\n    resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  }\n\n  if (resolvedViaRegistry) {\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n  }\n\n  resolveViaProperties(t, enclosing);\n  resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n  if (!resolvedViaRegistry && !cycleDetected) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return this;\n  }\n\n  if (isResolved()) {\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ?\n          getReferencedType() : this;\n  } else {\n      return null;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..c67d9819 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,45 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  if (isResolved()) {\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  boolean cycleDetected = detectImplicitPrototypeCycle();\n+\n+  if (cycleDetected) {\n+    handleTypeCycle(t);\n+    resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+  if (resolvedViaRegistry) {\n+    super.resolveInternal(t, enclosing);\n+    if (isResolved()) {\n       finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  resolveViaProperties(t, enclosing);\n+  resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n \n+  if (!resolvedViaRegistry && !cycleDetected) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n+    finishPropertyContinuations();\n+    return this;\n+  }\n+\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n     return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+          getReferencedType() : this;\n+  } else {\n+      return null;\n   }\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ong;",
    "test_result": "FAIL"
}