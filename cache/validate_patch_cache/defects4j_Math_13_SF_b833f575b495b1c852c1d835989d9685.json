{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = m.getRowDimension();\n\n    // Compute the square root of diagonal matrix D\n    for (int i = 0; i < n; i++) {\n        final double x = d.getEntry(i, i);\n        if (x < 0) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n        if (x == 0) {\n            d.setEntry(i, i, 0);\n        } else {\n            d.setEntry(i, i, Math.sqrt(x));\n        }\n    }\n\n    // Compute the square root of matrix M using V*D*V^T\n    final RealMatrix sqrtV = v.scalarMultiply(1/Math.sqrt(2));\n    return sqrtV.multiply(d).multiply(sqrtV.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..96f59b20e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getRowDimension();\n+\n+    // Compute the square root of diagonal matrix D\n+    for (int i = 0; i < n; i++) {\n+        final double x = d.getEntry(i, i);\n+        if (x < 0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n+        if (x == 0) {\n+            d.setEntry(i, i, 0);\n+        } else {\n+            d.setEntry(i, i, Math.sqrt(x));\n+        }\n     }\n+\n+    // Compute the square root of matrix M using V*D*V^T\n+    final RealMatrix sqrtV = v.scalarMultiply(1/Math.sqrt(2));\n+    return sqrtV.multiply(d).multiply(sqrtV.transpose());\n+}\n }",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}