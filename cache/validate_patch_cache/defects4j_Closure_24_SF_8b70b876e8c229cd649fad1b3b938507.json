{
    "patch": "    private void findAliases(NodeTraversal t) {\n        Scope scope = t.getScope();\n        for (Var v : scope.getVarIterable()) {\n            Node n = v.getNode();\n            Node grandparent = n.getParent().getParent();\n            if (grandparent != null && grandparent.isCall()) {\n                String name = n.getString();\n                Var aliasVar = scope.getVar(name);\n                aliases.put(name, aliasVar);\n\n                String qualifiedName =\n                        aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..d143aee7 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -270,30 +270,22 @@ class ScopedAliases implements HotSwapCompilerPass {\n     }\n \n     private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+        Scope scope = t.getScope();\n+        for (Var v : scope.getVarIterable()) {\n+            Node n = v.getNode();\n+            Node grandparent = n.getParent().getParent();\n+            if (grandparent != null && grandparent.isCall()) {\n+                String name = n.getString();\n+                Var aliasVar = scope.getVar(name);\n+                aliases.put(name, aliasVar);\n+\n+                String qualifiedName =\n+                        aliasVar.getInitialValue().getQualifiedName();\n+                transformation.addAlias(name, qualifiedName);\n+            } else {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n         }\n-      }\n     }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable x is in a goog.scope and is not an alias. at testcode line 1 : 27 expected:<0> but was:<1>",
    "test_result": "FAIL"
}