{
    "patch": "Type[] typeArguments = ((ParameterizedType)typeVariable.getGenericDeclaration()).getActualTypeArguments();\nfor (Type typeArgument : typeArguments) {\n    if (typeArgument instanceof TypeVariable) {\n        registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable)typeArgument));\n    } else if (typeArgument instanceof ParameterizedType) {\n        registerTypeVariablesOn(typeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a3bf863de 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,19 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] typeArguments = ((ParameterizedType)typeVariable.getGenericDeclaration()).getActualTypeArguments();\n+for (Type typeArgument : typeArguments) {\n+    if (typeArgument instanceof TypeVariable) {\n+        registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable)typeArgument));\n+    } else if (typeArgument instanceof ParameterizedType) {\n+        registerTypeVariablesOn(typeArgument);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType",
    "test_result": "FAIL"
}