{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final int threshold = 1000; // set a threshold to divide large matrices\n\n    if (n > threshold) {\n        // divide the matrix into smaller sub-matrices\n        final EigenDecomposition[] decomposition = new EigenDecomposition[n / threshold + 1];\n        for (int i = 0; i < n; i += threshold) {\n            final int size = Math.min(threshold, n - i); // get size of sub-matrix\n            final RealMatrix subMatrix = m.getSubMatrix(i, i + size - 1, i, i + size - 1);\n            decomposition[i / threshold] = new EigenDecomposition(subMatrix);\n        }\n\n        RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i += threshold) {\n            final int size = Math.min(threshold, n - i); // get size of sub-matrix\n            final RealMatrix subMatrix = MatrixUtils.createRealMatrix(size, size);\n\n            for (int j = 0; j < size; j++) {\n                for (int k = 0; k < size; k++) {\n                    double sum = 0.0;\n                    for (int l = 0; l < size; l++) {\n                        sum += decomposition[i / threshold].getV().getEntry(k, l) *\n                            Math.sqrt(decomposition[i / threshold].getD().getEntry(l, l)) *\n                            decomposition[i / threshold].getV().getEntry(j, l);\n                    }\n                    subMatrix.setEntry(k, j, sum);\n                }\n            }\n            result.setSubMatrix(subMatrix.getData(), i, i);\n        }\n\n        return result;\n    } else {\n        // perform eigenvalue decomposition directly\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9303bd423 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,43 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final int threshold = 1000; // set a threshold to divide large matrices\n+\n+    if (n > threshold) {\n+        // divide the matrix into smaller sub-matrices\n+        final EigenDecomposition[] decomposition = new EigenDecomposition[n / threshold + 1];\n+        for (int i = 0; i < n; i += threshold) {\n+            final int size = Math.min(threshold, n - i); // get size of sub-matrix\n+            final RealMatrix subMatrix = m.getSubMatrix(i, i + size - 1, i, i + size - 1);\n+            decomposition[i / threshold] = new EigenDecomposition(subMatrix);\n+        }\n+\n+        RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i += threshold) {\n+            final int size = Math.min(threshold, n - i); // get size of sub-matrix\n+            final RealMatrix subMatrix = MatrixUtils.createRealMatrix(size, size);\n+\n+            for (int j = 0; j < size; j++) {\n+                for (int k = 0; k < size; k++) {\n+                    double sum = 0.0;\n+                    for (int l = 0; l < size; l++) {\n+                        sum += decomposition[i / threshold].getV().getEntry(k, l) *\n+                            Math.sqrt(decomposition[i / threshold].getD().getEntry(l, l)) *\n+                            decomposition[i / threshold].getV().getEntry(j, l);\n+                    }\n+                    subMatrix.setEntry(k, j, sum);\n+                }\n+            }\n+            result.setSubMatrix(subMatrix.getData(), i, i);\n+        }\n+\n+        return result;\n+    } else {\n+        // perform eigenvalue decomposition directly\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}