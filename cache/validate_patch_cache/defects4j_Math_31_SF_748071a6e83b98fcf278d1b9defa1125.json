{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        if (Double.isNaN(cN) || Double.isNaN(q2) || Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            if (b * dPrev >= a * q1 || a * q1 >= b * dPrev) {\n                break;\n            }\n            if (FastMath.abs(cN) < FastMath.abs(hN) * small) {\n                break;\n            }\n            if ((cN < 0 && hN > 0) || (cN > 0 && hN < 0)) {\n                break;\n            }\n            if (FastMath.abs(q2) < small) {\n                break;\n            }\n        }\n\n        final double deltaN = cN / q2 / cPrev;\n\n        if (Double.isNaN(deltaN) || Double.isInfinite(deltaN)) {\n            // Too big or small value\n            return evaluateLogarithmic(x, epsilon, maxIterations);\n        }\n\n        hN = cPrev * deltaN;\n\n        if (Double.isNaN(hN) || Double.isInfinite(hN)) {\n            // Too big or small value\n            return evaluateLogarithmic(x, epsilon, maxIterations);\n        } else if (FastMath.abs(deltaN - 1.0) < epsilon && n > 3) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n\n        ++n;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n    return hN;\n}\n\nprivate double evaluateLogarithmic(double x, double epsilon, int maxIterations) {\n    double d = 0.0;\n    double f = getA(-1, x);\n    int big = 1;\n    int bigPrev = 1;\n    double pd = 1.0;\n    double pPrev = f;\n    double qd = x - f;\n    double qPrev = 1.0;\n    double a = x;\n\n    for (int i = 0; i < maxIterations; ++i) {\n        int aInt = (int)a;\n\n        double fract = a - aInt;\n        double ibig = Double.MAX_VALUE * fract;\n        int iBig = (int)ibig;\n\n        double a0 = 0.0;\n        double a1 = 1.0;\n        double b0 = 1.0;\n        double b1 = aInt;\n\n        double convergent = aInt;\n        boolean cIsMod2 = true;\n\n        for (int j = 1; j < 53; ++j) {\n            double a2, b2;\n\n            double xDen = a - (b1 + a0) * (a1 / b1);\n\n            if (xDen != 0.0) {\n                double m = (a - a0) / xDen;\n                double cfDen = b1 * m - a1;\n                if (cfDen != 0.0) {\n                    a2 = b1 * b0 * m * m - b0 * a1 * m - a1 * fract;\n                    b2 = cfDen * b1 * m;\n                    if (FastMath.abs(a2) > OneSidedNormalDistribution.inverseCumulativeProbability(0.5 * 1e-16) * b2) {\n                        bigPrev = big;\n                        big *= 10;\n                        pd /= bigPrev;\n                        f *= pd;\n                        pPrev *= pd;\n                        qPrev *= pd;\n                        qd *= pd;\n                    } else {\n                        ++big;\n                        double xDen2 = qd + a2 / qd;\n                        pd = xDen / xDen2;\n                        d += convergent * pd;\n                        convergent = a2 / xDen2;\n                        cIsMod2 = !cIsMod2;\n                        a0 = a1;\n                        a1 = a2;\n                        b0 = b1;\n                        b1 = b2;\n                    }\n                }\n            }\n\n            if (Double.isNaN(convergent) || Double.isInfinite(convergent)) {\n                break;\n            } else if (FastMath.abs(convergent - aInt) < epsilon) {\n                break;\n            }\n        }\n\n        if (Double.isNaN(convergent) || Double.isInfinite(convergent)) {\n            break;\n        } else if (FastMath.abs(convergent - aInt) < epsilon) {\n            break;\n        }\n        a += 1.0;\n        double saveD = d;\n        d = qd;\n        qd = a - f;\n\n        if ((i != 0) && cIsMod2) {\n            break;\n        }\n\n        if (Double.isInfinite(qd) || Double.isInfinite(pPrev)) {\n            if (f == 0.0) {\n                convergent = 0.0;\n            } else {\n                convergent = aInt + d / f;\n            }\n            break;\n        }\n\n        pPrev = pPrev * a + qPrev * pPrev;\n        qPrev *= a - f;\n        f = fmod2(x, a + 1.0);\n    }\n\n    if (Double.isNaN(d) || Double.isNaN(f)) {\n        throw new MathInternalError(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n    } else if (Double.isInfinite(d) || Double.isInfinite(f)) {\n        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n    }\n\n    return d / f;\n}\n\nprivate double getA(int n, double x) {\n    if (n == -1) {\n        return 0;\n    }\n    return 2 * (n + x);\n}\n\nprivate double getB(int n, double x) {\n    if (n == -1) {\n        return 1;\n    }\n    return ((n + 1.0) * (n + 1.0) - x * x) / getA(n, x);\n}\n\nprivate double fmod2(double y, double divisor) {\n    double q = FastMath.floor(y / divisor);\n    double r = y - q * divisor;\n\n    double r2 = FastMath.floor(r / divisor);\n    r -= r2 * divisor;\n\n    return r;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..136b8f9b9 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,201 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n-            }\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n \n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n \n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n+        if (Double.isNaN(cN) || Double.isNaN(q2) || Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+            if (b * dPrev >= a * q1 || a * q1 >= b * dPrev) {\n+                break;\n+            }\n+            if (FastMath.abs(cN) < FastMath.abs(hN) * small) {\n+                break;\n             }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+            if ((cN < 0 && hN > 0) || (cN > 0 && hN < 0)) {\n+                break;\n             }\n+            if (FastMath.abs(q2) < small) {\n+                break;\n+            }\n+        }\n+\n+        final double deltaN = cN / q2 / cPrev;\n+\n+        if (Double.isNaN(deltaN) || Double.isInfinite(deltaN)) {\n+            // Too big or small value\n+            return evaluateLogarithmic(x, epsilon, maxIterations);\n+        }\n+\n+        hN = cPrev * deltaN;\n+\n+        if (Double.isNaN(hN) || Double.isInfinite(hN)) {\n+            // Too big or small value\n+            return evaluateLogarithmic(x, epsilon, maxIterations);\n+        } else if (FastMath.abs(deltaN - 1.0) < epsilon && n > 3) {\n+            break;\n+        }\n+\n+        dPrev = q1;\n+        cPrev = cN / q2;\n+        p0 = hPrev;\n+        hPrev = cN;\n+        q1 = q2;\n+\n+        ++n;\n+    }\n+\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                                            maxIterations, x);\n+    }\n+    return hN;\n+}\n+\n+private double evaluateLogarithmic(double x, double epsilon, int maxIterations) {\n+    double d = 0.0;\n+    double f = getA(-1, x);\n+    int big = 1;\n+    int bigPrev = 1;\n+    double pd = 1.0;\n+    double pPrev = f;\n+    double qd = x - f;\n+    double qPrev = 1.0;\n+    double a = x;\n+\n+    for (int i = 0; i < maxIterations; ++i) {\n+        int aInt = (int)a;\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+        double fract = a - aInt;\n+        double ibig = Double.MAX_VALUE * fract;\n+        int iBig = (int)ibig;\n+\n+        double a0 = 0.0;\n+        double a1 = 1.0;\n+        double b0 = 1.0;\n+        double b1 = aInt;\n+\n+        double convergent = aInt;\n+        boolean cIsMod2 = true;\n+\n+        for (int j = 1; j < 53; ++j) {\n+            double a2, b2;\n+\n+            double xDen = a - (b1 + a0) * (a1 / b1);\n+\n+            if (xDen != 0.0) {\n+                double m = (a - a0) / xDen;\n+                double cfDen = b1 * m - a1;\n+                if (cfDen != 0.0) {\n+                    a2 = b1 * b0 * m * m - b0 * a1 * m - a1 * fract;\n+                    b2 = cfDen * b1 * m;\n+                    if (FastMath.abs(a2) > OneSidedNormalDistribution.inverseCumulativeProbability(0.5 * 1e-16) * b2) {\n+                        bigPrev = big;\n+                        big *= 10;\n+                        pd /= bigPrev;\n+                        f *= pd;\n+                        pPrev *= pd;\n+                        qPrev *= pd;\n+                        qd *= pd;\n+                    } else {\n+                        ++big;\n+                        double xDen2 = qd + a2 / qd;\n+                        pd = xDen / xDen2;\n+                        d += convergent * pd;\n+                        convergent = a2 / xDen2;\n+                        cIsMod2 = !cIsMod2;\n+                        a0 = a1;\n+                        a1 = a2;\n+                        b0 = b1;\n+                        b1 = b2;\n+                    }\n+                }\n+            }\n+\n+            if (Double.isNaN(convergent) || Double.isInfinite(convergent)) {\n+                break;\n+            } else if (FastMath.abs(convergent - aInt) < epsilon) {\n                 break;\n             }\n+        }\n \n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n+        if (Double.isNaN(convergent) || Double.isInfinite(convergent)) {\n+            break;\n+        } else if (FastMath.abs(convergent - aInt) < epsilon) {\n+            break;\n         }\n+        a += 1.0;\n+        double saveD = d;\n+        d = qd;\n+        qd = a - f;\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+        if ((i != 0) && cIsMod2) {\n+            break;\n+        }\n+\n+        if (Double.isInfinite(qd) || Double.isInfinite(pPrev)) {\n+            if (f == 0.0) {\n+                convergent = 0.0;\n+            } else {\n+                convergent = aInt + d / f;\n+            }\n+            break;\n         }\n \n-        return hN;\n+        pPrev = pPrev * a + qPrev * pPrev;\n+        qPrev *= a - f;\n+        f = fmod2(x, a + 1.0);\n     }\n \n+    if (Double.isNaN(d) || Double.isNaN(f)) {\n+        throw new MathInternalError(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+    } else if (Double.isInfinite(d) || Double.isInfinite(f)) {\n+        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+    }\n+\n+    return d / f;\n+}\n+\n+private double getA(int n, double x) {\n+    if (n == -1) {\n+        return 0;\n+    }\n+    return 2 * (n + x);\n+}\n+\n+private double getB(int n, double x) {\n+    if (n == -1) {\n+        return 1;\n+    }\n+    return ((n + 1.0) * (n + 1.0) - x * x) / getA(n, x);\n+}\n+\n+private double fmod2(double y, double divisor) {\n+    double q = FastMath.floor(y / divisor);\n+    double r = y - q * divisor;\n+\n+    double r2 = FastMath.floor(r / divisor);\n+    r -= r2 * divisor;\n+\n+    return r;\n+}\n+\n }",
    "result_reason": "error: method getA(int,double) is already defined in class ContinuedFraction",
    "test_result": "ERROR"
}