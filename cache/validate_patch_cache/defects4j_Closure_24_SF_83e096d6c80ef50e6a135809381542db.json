{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node root = t.getScopeRoot();\n    if (root.isCall() && root.getFirstChild().matchesQualifiedName(\"goog.scope\")\n        && root.getSecondChild().isFunction()) {\n        Node paramList = root.getSecondChild().getSecondChild();\n        if (paramList.getChildCount() != 0) {\n            report(t, paramList, GOOG_SCOPE_PARAMS, \"goog.scope must take no parameters\");\n        }\n        Node functionBlock = root.getSecondChild().getLastChild();\n        for (Node child : functionBlock.children()) {\n            if (child.isFunction()) {\n                handleFunctionDeclaration(t, child);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..b27a84eb 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,23 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node root = t.getScopeRoot();\n+    if (root.isCall() && root.getFirstChild().matchesQualifiedName(\"goog.scope\")\n+        && root.getSecondChild().isFunction()) {\n+        Node paramList = root.getSecondChild().getSecondChild();\n+        if (paramList.getChildCount() != 0) {\n+            report(t, paramList, GOOG_SCOPE_PARAMS, \"goog.scope must take no parameters\");\n         }\n+        Node functionBlock = root.getSecondChild().getLastChild();\n+        for (Node child : functionBlock.children()) {\n+            if (child.isFunction()) {\n+                handleFunctionDeclaration(t, child);\n+            }\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}