{
    "patch": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class JSONUtils {\n    public static double getTypedPercent(JSONArray arr) {\n        int total = arr.length();\n        int count = 0;\n        for (int i = 0; i < total; i++) {\n            try {\n                JSONObject obj = arr.getJSONObject(i);\n                if (obj.get(\"type\").equals(\"typed\")) {\n                    count++;\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n        return (double) count / total * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a196ab7f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class JSONUtils {\n+    public static double getTypedPercent(JSONArray arr) {\n+        int total = arr.length();\n+        int count = 0;\n+        for (int i = 0; i < total; i++) {\n+            try {\n+                JSONObject obj = arr.getJSONObject(i);\n+                if (obj.get(\"type\").equals(\"typed\")) {\n+                    count++;\n+                }\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        return (double) count / total * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}