{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n\n  // see if we can get any information about the function that's being invoked\n  JSType constructorType = constructor.getJSType();\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n\n    // if we don't know anything, call the constructor with unknown arguments\n    JSType type = getNativeType(UNKNOWN_TYPE);\n\n    // if constructor type is a function, use its return type as the type of the new object\n    FunctionType ft = constructorType.toMaybeFunctionType();\n    if (ft != null && ft.isConstructor()) {\n      JSType returnType = ft.getReturnType();\n      if (returnType.isObjectType()) {\n        type = returnType;\n      }\n    }\n\n    n.setJSType(type);\n\n    // now that we know the type, we can propagate it to the arguments\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n  }\n\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..29d271d5 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,37 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+\n+  // see if we can get any information about the function that's being invoked\n+  JSType constructorType = constructor.getJSType();\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+\n+    // if we don't know anything, call the constructor with unknown arguments\n+    JSType type = getNativeType(UNKNOWN_TYPE);\n+\n+    // if constructor type is a function, use its return type as the type of the new object\n+    FunctionType ft = constructorType.toMaybeFunctionType();\n+    if (ft != null && ft.isConstructor()) {\n+      JSType returnType = ft.getReturnType();\n+      if (returnType.isObjectType()) {\n+        type = returnType;\n       }\n     }\n+\n     n.setJSType(type);\n+\n+    // now that we know the type, we can propagate it to the arguments\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n-    return scope;\n   }\n \n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}