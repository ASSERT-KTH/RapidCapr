{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double vx1 = v1.getX();\n    final double vy1 = v1.getY();\n    final double vz1 = v1.getZ();\n    final double vx2 = v2.getX();\n    final double vy2 = v2.getY();\n    final double vz2 = v2.getZ();\n    final double ax = Math.max(Math.abs(vx1), Math.max(Math.abs(vy1), Math.abs(vz1)));\n    final double ay = Math.max(Math.abs(vx2), Math.max(Math.abs(vy2), Math.abs(vz2)));\n    final double invAx = 1.0 / ax;\n    final double invAy = 1.0 / ay;\n    final double v3x = vx1 * invAy - vx2 * invAx * (vy1 * invAy);\n    final double v3y = vy1 * invAy - vy2 * invAx * (vy1 * invAy);\n    final double v3z = vz1 * invAx - vz2 * invAy * (vx1 * invAx);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3y * vz2 - v3z * vy2, v3z * vx2 - v3x * vz2, v3x * vy2 - v3y * vx2);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..94b7899d3 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,28 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double vx1 = v1.getX();\n+    final double vy1 = v1.getY();\n+    final double vz1 = v1.getZ();\n+    final double vx2 = v2.getX();\n+    final double vy2 = v2.getY();\n+    final double vz2 = v2.getZ();\n+    final double ax = Math.max(Math.abs(vx1), Math.max(Math.abs(vy1), Math.abs(vz1)));\n+    final double ay = Math.max(Math.abs(vx2), Math.max(Math.abs(vy2), Math.abs(vz2)));\n+    final double invAx = 1.0 / ax;\n+    final double invAy = 1.0 / ay;\n+    final double v3x = vx1 * invAy - vx2 * invAx * (vy1 * invAy);\n+    final double v3y = vy1 * invAy - vy2 * invAx * (vy1 * invAy);\n+    final double v3z = vz1 * invAx - vz2 * invAy * (vx1 * invAx);\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3y * vz2 - v3z * vy2, v3z * vx2 - v3x * vz2, v3x * vy2 - v3y * vx2);\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.18878460970471067>",
    "test_result": "FAIL"
}