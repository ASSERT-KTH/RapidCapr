{
    "patch": "            int argCount = invocation.getRawArguments().length;\n            Object[] vararg = invocation.getRawArguments()[indexOfVararg] instanceof Object[] ? \n                                (Object[]) invocation.getRawArguments()[indexOfVararg] \n                              : (Object[]) Array.get(invocation.getRawArguments()[indexOfVararg], 0);\n\n            for (int i = 0; i < argCount - 1; i++) {\n                Matcher m = matchers.get(i);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n                }\n            }\n            for (int i = 0; i < vararg.length; i++) {\n                for (int j = indexOfVararg; j < argCount - 1; j++) {\n                    Matcher m = matchers.get(j);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(vararg[i]);\n                    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..8fbfa87a7 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,23 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            int argCount = invocation.getRawArguments().length;\n+            Object[] vararg = invocation.getRawArguments()[indexOfVararg] instanceof Object[] ? \n+                                (Object[]) invocation.getRawArguments()[indexOfVararg] \n+                              : (Object[]) Array.get(invocation.getRawArguments()[indexOfVararg], 0);\n+\n+            for (int i = 0; i < argCount - 1; i++) {\n+                Matcher m = matchers.get(i);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n+                }\n+            }\n+            for (int i = 0; i < vararg.length; i++) {\n+                for (int j = indexOfVararg; j < argCount - 1; j++) {\n+                    Matcher m = matchers.get(j);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(vararg[i]);\n+                    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}