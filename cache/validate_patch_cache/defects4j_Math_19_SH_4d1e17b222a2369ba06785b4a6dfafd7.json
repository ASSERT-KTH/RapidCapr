{
    "patch": "                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                final double n = FastMath.min(init.length, getMaxEvaluations());\n                final double sum = (n + 1) * (2 * n + 1) / 6;\n                final double sumSquares = (n + 1) * n * (2 * n + 1) * (3 * n * n + 3 * n - 1) / 30;\n                if (sum > FastMath.sqrt(Double.MAX_VALUE) ||\n                    sumSquares > FastMath.sqrt(Double.MAX_VALUE)) {\n                    throw new MathIllegalStateException();\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..bb9a93e6f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,14 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                final double n = FastMath.min(init.length, getMaxEvaluations());\n+                final double sum = (n + 1) * (2 * n + 1) / 6;\n+                final double sumSquares = (n + 1) * n * (2 * n + 1) * (3 * n * n + 3 * n - 1) / 30;\n+                if (sum > FastMath.sqrt(Double.MAX_VALUE) ||\n+                    sumSquares > FastMath.sqrt(Double.MAX_VALUE)) {\n+                    throw new MathIllegalStateException();\n+                }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}