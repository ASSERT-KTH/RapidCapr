{
    "patch": "    public Period getPeriod(ReadablePartial start, ReadablePartial end) {\n        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {\n            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());\n            long startMillis = ((BaseLocal) start).getLocalMillis();\n            long endMillis = ((BaseLocal) end).getLocalMillis();\n            if (chrono == null) {\n                chrono = ((BaseLocal) start).getChronology();\n            }\n            return new Period(startMillis, endMillis, null, chrono).normalizedStandard();\n        }\n        int[] values = getPeriodType().getIndexedValues(this, start);\n        Chronology chrono = DateTimeUtils.getChronology(start.getChronology());\n        return new Period(values, getPeriodType(), chrono).normalizedStandard();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..ebe5fd49 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,19 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+    public Period getPeriod(ReadablePartial start, ReadablePartial end) {\n+        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {\n+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());\n+            long startMillis = ((BaseLocal) start).getLocalMillis();\n+            long endMillis = ((BaseLocal) end).getLocalMillis();\n+            if (chrono == null) {\n+                chrono = ((BaseLocal) start).getChronology();\n+            }\n+            return new Period(startMillis, endMillis, null, chrono).normalizedStandard();\n+        }\n+        int[] values = getPeriodType().getIndexedValues(this, start);\n+        Chronology chrono = DateTimeUtils.getChronology(start.getChronology());\n+        return new Period(values, getPeriodType(), chrono).normalizedStandard();\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}