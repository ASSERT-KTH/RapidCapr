{
    "patch": "            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n        int normalizedWeeks = getWeeks() + (int) (millis / DateTimeConstants.MILLIS_PER_WEEK);\n        long normalizedMillis = millis % DateTimeConstants.MILLIS_PER_WEEK;\n        if (normalizedWeeks != 0) {\n            result = result.withWeeks(normalizedWeeks);\n        }\n        if (normalizedMillis != 0) {\n            result = result.withMillis((int) normalizedMillis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..455afe65 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,18 +1613,6 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n             years = FieldUtils.safeAdd(years, months / 12);\n             months = months % 12;\n             if (years != 0) {\n@@ -1634,7 +1622,12 @@ public final class Period\n                 result = result.withMonths(months);\n             }\n         }\n-        return result;\n-    }\n+        int normalizedWeeks = getWeeks() + (int) (millis / DateTimeConstants.MILLIS_PER_WEEK);\n+        long normalizedMillis = millis % DateTimeConstants.MILLIS_PER_WEEK;\n+        if (normalizedWeeks != 0) {\n+            result = result.withWeeks(normalizedWeeks);\n+        }\n+        if (normalizedMillis != 0) {\n+            result = result.withMillis((int) normalizedMillis);\n \n }",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}