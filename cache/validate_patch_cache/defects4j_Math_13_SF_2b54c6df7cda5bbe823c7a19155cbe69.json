{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int numRows = m.getRowDimension();\n    final int numCols = m.getColumnDimension();\n    final double[][] sqrt = new double[numRows][numCols];\n\n    final EigenDecomposition dec;\n    try {\n        dec = new EigenDecomposition(m);\n    } catch (ArithmeticException e) {\n        // Log the error message and return input matrix\n        System.err.println(\"EigenDecomposition failed: \" + e.getMessage());\n        return m;\n    }\n\n    final RealMatrix rmV = dec.getV();\n    final double[][] v = rmV.getData();\n\n    final RealMatrix rmD = dec.getD();\n    final double[][] d = rmD.getData();\n\n    for (int i = 0; i < numRows; i++) {\n        for (int j = 0; j < numCols; j++) {\n            double val = 0.0;\n            for (int k = 0; k < numCols; k++) {\n                final double a = d[k][k];\n                final double b = v[i][k];\n                final double c = v[j][k];\n                val += a * b * c;\n            }\n            sqrt[i][j] = val;\n        }\n    }\n    return MatrixUtils.createRealMatrix(sqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f82b53061 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int numRows = m.getRowDimension();\n+    final int numCols = m.getColumnDimension();\n+    final double[][] sqrt = new double[numRows][numCols];\n+\n+    final EigenDecomposition dec;\n+    try {\n+        dec = new EigenDecomposition(m);\n+    } catch (ArithmeticException e) {\n+        // Log the error message and return input matrix\n+        System.err.println(\"EigenDecomposition failed: \" + e.getMessage());\n+        return m;\n     }\n+\n+    final RealMatrix rmV = dec.getV();\n+    final double[][] v = rmV.getData();\n+\n+    final RealMatrix rmD = dec.getD();\n+    final double[][] d = rmD.getData();\n+\n+    for (int i = 0; i < numRows; i++) {\n+        for (int j = 0; j < numCols; j++) {\n+            double val = 0.0;\n+            for (int k = 0; k < numCols; k++) {\n+                final double a = d[k][k];\n+                final double b = v[i][k];\n+                final double c = v[j][k];\n+                val += a * b * c;\n+            }\n+            sqrt[i][j] = val;\n+        }\n+    }\n+    return MatrixUtils.createRealMatrix(sqrt);\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}