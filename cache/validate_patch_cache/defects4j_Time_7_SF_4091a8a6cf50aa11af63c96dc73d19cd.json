{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    chrono = selectChronology(chrono);\n\n    // create a bucket with the input time zone, but don't set the time zone or offsets yet\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis, chrono.withZone(iZone), iLocale, iPivotYear, 2000);\n    \n    // Parse into the bucket\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        // If parsing was successful, update the ReadWritableInstant\n        if (bucket.getOffsetInteger() != null) {\n            // if an offset was parsed, set the chrono with that offset\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n            instant.setChronology(chrono.withZone(parsedZone));\n        } else if (bucket.getZone() != null) {\n            // set the chrono with the parsed zone\n            instant.setChronology(chrono.withZone(bucket.getZone()));\n        } else {\n            // set the chrono back to the original\n            instant.setChronology(chrono);\n        }\n\n        long localMillis = bucket.computeMillis(false, text);\n        // check that the parsed date is valid in the selected chrono\n        if (instant.getChronology().isValidDateTime(bucket.getPivotYear(), bucket.getDateTime().getMillis())) {\n            // set the instant to the local millisecond time\n            instant.setMillis(localMillis);\n        } else {\n            throw new IllegalFieldValueException(\n                DateTimeFieldType.year(), bucket.getPivotYear(),\n                \"Invalid year for given month and day of month: \" +\n                bucket.getDateTime().getMonthOfYear() + \" \" + bucket.getDateTime().getDayOfMonth());\n        }\n    }\n    return newPos;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..1c6a66dd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,50 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    chrono = selectChronology(chrono);\n+\n+    // create a bucket with the input time zone, but don't set the time zone or offsets yet\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis, chrono.withZone(iZone), iLocale, iPivotYear, 2000);\n+    \n+    // Parse into the bucket\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        // If parsing was successful, update the ReadWritableInstant\n+        if (bucket.getOffsetInteger() != null) {\n+            // if an offset was parsed, set the chrono with that offset\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+            instant.setChronology(chrono.withZone(parsedZone));\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            // set the chrono with the parsed zone\n+            instant.setChronology(chrono.withZone(bucket.getZone()));\n+        } else {\n+            // set the chrono back to the original\n+            instant.setChronology(chrono);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        long localMillis = bucket.computeMillis(false, text);\n+        // check that the parsed date is valid in the selected chrono\n+        if (instant.getChronology().isValidDateTime(bucket.getPivotYear(), bucket.getDateTime().getMillis())) {\n+            // set the instant to the local millisecond time\n+            instant.setMillis(localMillis);\n+        } else {\n+            throw new IllegalFieldValueException(\n+                DateTimeFieldType.year(), bucket.getPivotYear(),\n+                \"Invalid year for given month and day of month: \" +\n+                bucket.getDateTime().getMonthOfYear() + \" \" + bucket.getDateTime().getDayOfMonth());\n         }\n-        return newPos;\n     }\n+    return newPos;\n+\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}