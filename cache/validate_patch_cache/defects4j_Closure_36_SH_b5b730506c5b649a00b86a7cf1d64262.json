{
    "patch": "          if (value.isQualifiedName()) {\n            String name = value.getQualifiedName();\n            String suffixName = null;\n            String className = null;\n            int p = name.lastIndexOf('.');\n            if (p != -1) {\n              suffixName = name.substring(p + 1);\n              className = name.substring(0, p);\n            }\n            if (suffixName != null && className != null &&\n                suffixName.length() > 0 && className.length() > 0 &&\n                compiler.getCodingConvention().isSingletonGetterPrefix(suffixName)) {\n              JSDocInfo info = NodeUtil.getBestJSDocInfo(initialization);\n              if (info != null) {\n                return info.isConstructor();\n              }\n              return true;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..626c3ca9 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,24 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          if (value.isQualifiedName()) {\n+            String name = value.getQualifiedName();\n+            String suffixName = null;\n+            String className = null;\n+            int p = name.lastIndexOf('.');\n+            if (p != -1) {\n+              suffixName = name.substring(p + 1);\n+              className = name.substring(0, p);\n+            }\n+            if (suffixName != null && className != null &&\n+                suffixName.length() > 0 && className.length() > 0 &&\n+                compiler.getCodingConvention().isSingletonGetterPrefix(suffixName)) {\n+              JSDocInfo info = NodeUtil.getBestJSDocInfo(initialization);\n+              if (info != null) {\n+                return info.isConstructor();\n+              }\n+              return true;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}