{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean monthChanged = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex && partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                int oldMonth = iChronology.monthOfYear().get(instant);\n                instant = iChronology.monthOfYear().add(instant, valueToAdd);\n                monthChanged = iChronology.monthOfYear().get(instant) != oldMonth;\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        if (monthChanged) {\n            // Calculate the last day of the new month\n            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            instant = iChronology.dayOfMonth().set(instant, lastDay);\n        } else {\n            try {\n                // update dayOfMonth might cause exception\n                instant = iChronology.dayOfMonth().add(instant, 0);\n            } catch (RuntimeException e) {\n                throw new org.joda.time.IllegalFieldValueException\n                    (DateTimeFieldType.monthOfYear(), null, null,\n                            \"Value \" + iChronology.monthOfYear().get(instant)\n                                    + \" cannot be changed to a different month with the value \" + valueToAdd);\n            }\n            // Calculate the last day of the current month\n            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            // Ensure the day of month is within the valid range\n            if (values[iChronology.dayOfMonth().getFieldIndex()] > lastDay) {\n                instant = iChronology.dayOfMonth().set(instant, lastDay);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..43378747 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,51 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean monthChanged = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex && partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                int oldMonth = iChronology.monthOfYear().get(instant);\n+                instant = iChronology.monthOfYear().add(instant, valueToAdd);\n+                monthChanged = iChronology.monthOfYear().get(instant) != oldMonth;\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        }\n+        if (monthChanged) {\n+            // Calculate the last day of the new month\n+            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+            instant = iChronology.dayOfMonth().set(instant, lastDay);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            try {\n+                // update dayOfMonth might cause exception\n+                instant = iChronology.dayOfMonth().add(instant, 0);\n+            } catch (RuntimeException e) {\n+                throw new org.joda.time.IllegalFieldValueException\n+                    (DateTimeFieldType.monthOfYear(), null, null,\n+                            \"Value \" + iChronology.monthOfYear().get(instant)\n+                                    + \" cannot be changed to a different month with the value \" + valueToAdd);\n+            }\n+            // Calculate the last day of the current month\n+            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+            // Ensure the day of month is within the valid range\n+            if (values[iChronology.dayOfMonth().getFieldIndex()] > lastDay) {\n+                instant = iChronology.dayOfMonth().set(instant, lastDay);\n+            }\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(DateTimeFieldType,<null>,<null>,String)",
    "test_result": "ERROR"
}