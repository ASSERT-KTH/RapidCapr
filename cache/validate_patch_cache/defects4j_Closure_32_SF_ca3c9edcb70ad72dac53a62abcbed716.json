{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    int endCharno = startCharno + line.length();\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            endCharno++;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append('*');\n            endCharno++;\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          // All tokens must be separated by a space.\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are ok.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString().trim();\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n            int endLineno = stream.getLineno();\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (token != JsDocToken.OR) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n              endCharno++;\n            }\n\n            String tokenString = toString(token);\n            if (tokenString != null) {\n                builder.append(tokenString);\n                endCharno += tokenString.length();\n            }\n          }\n\n          line = stream.getRemainingJSDocLine();\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n          builder.append(line);\n          endCharno += line.length();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..3c7af2d8 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,7 +1326,7 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n@@ -1351,23 +1351,24 @@ public final class JsDocInfoParser {\n     token = next();\n \n     boolean ignoreStar = false;\n+    int endCharno = startCharno + line.length();\n \n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-\n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n+            endCharno++;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n+            endCharno++;\n           }\n \n           token = next();\n@@ -1377,7 +1378,6 @@ public final class JsDocInfoParser {\n           if (option != WhitespaceOption.SINGLE_LINE) {\n             builder.append(\"\\n\");\n           }\n-\n           ignoreStar = true;\n           token = next();\n           continue;\n@@ -1386,47 +1386,44 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n+          // All tokens must be separated by a space.\n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n               // When we're capturing a license block, annotations\n               // in the block are ok.\n               (token == JsDocToken.ANNOTATION &&\n                option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n+            String multilineText = builder.toString().trim();\n             if (option != WhitespaceOption.PRESERVE) {\n               multilineText = multilineText.trim();\n             }\n-\n             int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n             if (multilineText.length() > 0) {\n               jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                   endLineno, endCharno);\n             }\n-\n             return new ExtractionInfo(multilineText, token);\n           }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n+          if (token != JsDocToken.OR) {\n+            if (builder.length() > 0) {\n+              builder.append(' ');\n+              endCharno++;\n+            }\n+\n+            String tokenString = toString(token);\n+            if (tokenString != null) {\n+                builder.append(tokenString);\n+                endCharno += tokenString.length();\n+            }\n           }\n-          builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n-\n           if (option != WhitespaceOption.PRESERVE) {\n             line = trimEnd(line);\n           }\n-\n           builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+          endCharno += line.length();\n \n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}