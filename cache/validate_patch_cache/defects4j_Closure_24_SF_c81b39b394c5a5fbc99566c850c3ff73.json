{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    boolean foundAlias = false;\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n        if (parent.isCatch()) {\n            continue;\n        }\n        if (type == Token.LP && !v.isBleedingFunction()) {\n            // This is an argument to the goog.scope function.\n            if (foundAlias) {\n                report(t, n, GOOG_SCOPE_TOO_MANY_ARGUMENTS);\n            } else {\n                foundAlias = true;\n            }\n        } else if (parent.isVar()) {\n            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                String name = n.getString();\n                Var aliasVar = scope.getVar(name);\n                aliases.put(name, aliasVar);\n\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        } else {\n            report(t, n, GOOG_SCOPE_REFERENCE_ERROR);\n        }\n    }\n    if (!foundAlias) {\n        report(t, t.getScopeRoot(), GOOG_SCOPE_NO_ALIAS_FOUND);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..2c325ee6 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,42 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    boolean foundAlias = false;\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent.isCatch()) {\n+            continue;\n         }\n+        if (type == Token.LP && !v.isBleedingFunction()) {\n+            // This is an argument to the goog.scope function.\n+            if (foundAlias) {\n+                report(t, n, GOOG_SCOPE_TOO_MANY_ARGUMENTS);\n+            } else {\n+                foundAlias = true;\n+            }\n+        } else if (parent.isVar()) {\n+            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                String name = n.getString();\n+                Var aliasVar = scope.getVar(name);\n+                aliases.put(name, aliasVar);\n+\n+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                transformation.addAlias(name, qualifiedName);\n+            } else {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n+        } else {\n+            report(t, n, GOOG_SCOPE_REFERENCE_ERROR);\n         }\n-      }\n     }\n+    if (!foundAlias) {\n+        report(t, t.getScopeRoot(), GOOG_SCOPE_NO_ALIAS_FOUND);\n+    }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}