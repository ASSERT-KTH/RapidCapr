{
    "patch": "public static String unescape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<s.length(); i++) {\n        char ch = s.charAt(i);\n        if (ch == '\\\\') {\n            if ((i+4)<s.length() && s.charAt(i+1)=='U') {\n                sb.append((char)Integer.parseInt(s.substring(i+2,i+6),16));\n                i += 5;\n            } else if ((i+2)<s.length()) {\n                char ch1=s.charAt(i+1);\n                switch (ch1) {\n                    case 'n': sb.append('\\n'); break;\n                    case 'r': sb.append('\\r'); break;\n                    case 't': sb.append('\\t'); break;\n                    case 'f': sb.append('\\f'); break;\n                    case 'b': sb.append('\\b'); break;\n                    case '\\\"': sb.append('\"'); break;\n                    case '\\'': sb.append('\\''); break;\n                    case '\\\\': sb.append('\\\\'); break;\n                    default: sb.append(ch1);\n                }\n                i++;\n            } else {\n                sb.append(ch);\n            }\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..33b3b66f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,37 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s) {\n+    StringBuffer sb = new StringBuffer();\n+    for (int i=0; i<s.length(); i++) {\n+        char ch = s.charAt(i);\n+        if (ch == '\\\\') {\n+            if ((i+4)<s.length() && s.charAt(i+1)=='U') {\n+                sb.append((char)Integer.parseInt(s.substring(i+2,i+6),16));\n+                i += 5;\n+            } else if ((i+2)<s.length()) {\n+                char ch1=s.charAt(i+1);\n+                switch (ch1) {\n+                    case 'n': sb.append('\\n'); break;\n+                    case 'r': sb.append('\\r'); break;\n+                    case 't': sb.append('\\t'); break;\n+                    case 'f': sb.append('\\f'); break;\n+                    case 'b': sb.append('\\b'); break;\n+                    case '\\\"': sb.append('\"'); break;\n+                    case '\\'': sb.append('\\''); break;\n+                    case '\\\\': sb.append('\\\\'); break;\n+                    default: sb.append(ch1);\n+                }\n+                i++;\n+            } else {\n+                sb.append(ch);\n+            }\n+        } else {\n+            sb.append(ch);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}