{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    boolean yearsIncluded = type.isSupported(DurationFieldType.years());\n    boolean monthsIncluded = type.isSupported(DurationFieldType.months());\n    boolean weeksIncluded = type.isSupported(DurationFieldType.weeks());\n    boolean daysIncluded = type.isSupported(DurationFieldType.days());\n\n    int totalMonths = (getYears() * 12) + getMonths();\n    int totalWeeks = getWeeks();\n    int totalDays = getDays();\n\n    if (weeksIncluded) {\n        int daysInWeek = totalDays % 7;\n        totalDays = totalWeeks * 7 + daysInWeek;\n    }\n\n    // Calculate the total number of milliseconds in the period\n    long millis = getMillis()\n            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n            + (totalDays * DateTimeConstants.MILLIS_PER_DAY)\n            + (totalMonths * DateTimeConstants.MILLIS_PER_MONTH);\n\n    // Construct the normalized period\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    if (yearsIncluded || monthsIncluded) {\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths - (normalizedYears * 12);\n\n        if (monthsIncluded && normalizedMonths != 0) {\n            result = result.withMonths(normalizedMonths);\n        }\n        if (yearsIncluded && normalizedYears != 0) {\n            result = result.withYears(normalizedYears);\n        }\n    }\n\n    if (weeksIncluded || daysIncluded) {\n        int normalizedWeeks = totalDays / 7;\n        int normalizedDays = totalDays - (normalizedWeeks * 7);\n\n        if (weeksIncluded && normalizedWeeks != 0) {\n            result = result.withWeeks(normalizedWeeks);\n        }\n        if (daysIncluded && normalizedDays != 0) {\n            result = result.withDays(normalizedDays);\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..0e6059c1 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,59 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    boolean yearsIncluded = type.isSupported(DurationFieldType.years());\n+    boolean monthsIncluded = type.isSupported(DurationFieldType.months());\n+    boolean weeksIncluded = type.isSupported(DurationFieldType.weeks());\n+    boolean daysIncluded = type.isSupported(DurationFieldType.days());\n+\n+    int totalMonths = (getYears() * 12) + getMonths();\n+    int totalWeeks = getWeeks();\n+    int totalDays = getDays();\n+\n+    if (weeksIncluded) {\n+        int daysInWeek = totalDays % 7;\n+        totalDays = totalWeeks * 7 + daysInWeek;\n+    }\n+\n+    // Calculate the total number of milliseconds in the period\n+    long millis = getMillis()\n+            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (totalDays * DateTimeConstants.MILLIS_PER_DAY)\n+            + (totalMonths * DateTimeConstants.MILLIS_PER_MONTH);\n+\n+    // Construct the normalized period\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    if (yearsIncluded || monthsIncluded) {\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths - (normalizedYears * 12);\n+\n+        if (monthsIncluded && normalizedMonths != 0) {\n+            result = result.withMonths(normalizedMonths);\n+        }\n+        if (yearsIncluded && normalizedYears != 0) {\n+            result = result.withYears(normalizedYears);\n+        }\n+    }\n+\n+    if (weeksIncluded || daysIncluded) {\n+        int normalizedWeeks = totalDays / 7;\n+        int normalizedDays = totalDays - (normalizedWeeks * 7);\n+\n+        if (weeksIncluded && normalizedWeeks != 0) {\n+            result = result.withWeeks(normalizedWeeks);\n+        }\n+        if (daysIncluded && normalizedDays != 0) {\n+            result = result.withDays(normalizedDays);\n         }\n-        return result;\n     }\n \n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}