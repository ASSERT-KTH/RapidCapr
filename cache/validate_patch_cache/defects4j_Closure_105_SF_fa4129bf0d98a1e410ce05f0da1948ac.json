{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      Node stringNode = Node.newString(NodeUtil.getStringValue(elem));\n      // Add string node even if empty, since we need to keep correct number of commas\n      arrayFoldedChildren.add(stringNode);\n      // +2 for the quotes\n      foldedSize += stringNode.getLength();\n    } else {\n      arrayFoldedChildren.add(elem);\n      foldedSize += InlineCostEstimator.getCost(elem);\n    }\n    if (arrayFoldedChildren.size() > 1) {\n      foldedSize += joinString.length();\n    }\n    elem = elem.getNext();\n  }\n\n  Joiner joiner = Joiner.on(joinString).skipNulls();\n  String foldedValue = joiner.join(NodeUtil.getStringValuesSafely(arrayFoldedChildren.iterator()));\n\n  Node foldedNode = getNodeForString(foldedValue, parent);\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  int foldedSizeWithJoin = foldedValue.length() + kJoinOverhead;\n  if (foldedSizeWithJoin > originalSize) {\n    return;\n  }\n\n  parent.replaceChild(n, foldedNode);\n  t.getCompiler().reportCodeChange();\n}\n\nprivate static final int kJoinOverhead = \"[].join()\".length();\n\nprivate static Node getNodeForString(String value, Node parent) {\n  // Determine whether the string is a number, and thus needs to be created with `number`.\n  if (NodeUtil.isDouble(value)) {\n    Node numberNode = Node.newNumber(Double.parseDouble(value));\n    // If there is a number formatting issue (e.g. NaN), return string representation instead\n    if (numberNode.getDouble() == 0 && !value.equals(\"0\")) {\n      return Node.newString(value);\n    }\n    return numberNode;\n  }\n  return Node.newString(value);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..fde8ba0d 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,70 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+  String joinString = NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  // Merges adjacent String nodes.\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      Node stringNode = Node.newString(NodeUtil.getStringValue(elem));\n+      // Add string node even if empty, since we need to keep correct number of commas\n+      arrayFoldedChildren.add(stringNode);\n+      // +2 for the quotes\n+      foldedSize += stringNode.getLength();\n+    } else {\n+      arrayFoldedChildren.add(elem);\n+      foldedSize += InlineCostEstimator.getCost(elem);\n     }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+    if (arrayFoldedChildren.size() > 1) {\n+      foldedSize += joinString.length();\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+    elem = elem.getNext();\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  Joiner joiner = Joiner.on(joinString).skipNulls();\n+  String foldedValue = joiner.join(NodeUtil.getStringValuesSafely(arrayFoldedChildren.iterator()));\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  Node foldedNode = getNodeForString(foldedValue, parent);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  int foldedSizeWithJoin = foldedValue.length() + kJoinOverhead;\n+  if (foldedSizeWithJoin > originalSize) {\n+    return;\n+  }\n+\n+  parent.replaceChild(n, foldedNode);\n+  t.getCompiler().reportCodeChange();\n+}\n+\n+private static final int kJoinOverhead = \"[].join()\".length();\n+\n+private static Node getNodeForString(String value, Node parent) {\n+  // Determine whether the string is a number, and thus needs to be created with `number`.\n+  if (NodeUtil.isDouble(value)) {\n+    Node numberNode = Node.newNumber(Double.parseDouble(value));\n+    // If there is a number formatting issue (e.g. NaN), return string representation instead\n+    if (numberNode.getDouble() == 0 && !value.equals(\"0\")) {\n+      return Node.newString(value);\n     }\n-    t.getCompiler().reportCodeChange();\n+    return numberNode;\n   }\n+  return Node.newString(value);\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}