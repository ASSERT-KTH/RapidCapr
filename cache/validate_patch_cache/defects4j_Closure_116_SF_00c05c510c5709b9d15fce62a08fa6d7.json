{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = NodeUtil.getFunctionBody(fnNode);\n\n  Node callee = callNode.getFirstChild();\n  // Only support call/apply with named function or function expression.\n  if (!callee.isName() && !callee.isFunction()) {\n    return CanInlineResult.NO;\n  }\n\n  Node argument = callee.getNext();\n  int functionArity = getFunctionArity(fnNode);\n\n  // If the function object is called with a `this` object, skip it.\n  int argumentCountOffset = 0;\n  if (!callee.isName()) {\n    argumentCountOffset = 1;\n    argument = argument.getNext();\n  }\n\n  int argumentCount = countArguments(argument, argumentCountOffset);\n\n  if (functionArity != argumentCount) {\n    return CanInlineResult.NO;\n  }\n\n  Node parameter = fnNode.getFirstChild().getNext();\n  while (parameter != null) {\n    String parameterName = parameter.getString();\n\n    // Check if the parameter is assigned to more than once.\n    if (NodeUtil.getNameReferenceCount(block, parameterName) > 1) {\n      return CanInlineResult.NO;\n    }\n\n    Node argNode = argument;\n    for (int i = 0; i < argumentCountOffset + functionArity - argumentCount; i++) {\n      argNode = argNode.getNext();\n    }\n    if (!NodeUtil.isImmutableValue(argNode)) {\n      // Check if the argument has side effects.\n      if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      // Check if the argument is assigned to more than once.\n      if (NodeUtil.getNameReferenceCount(block, argNode.toStringTree()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    parameter = parameter.getNext();\n    argument = argument.getNext();\n  }\n\n  return CanInlineResult.YES;\n}\n\nprivate int getFunctionArity(Node functionNode) {\n  Node parameterList = NodeUtil.getFunctionParameters(functionNode);\n  if (!parameterList.hasChildren()) {\n    return 0;\n  }\n\n  int functionArity = 1;\n  Node parameter = parameterList.getFirstChild();\n  while (parameter.getNext() != null) {\n    functionArity += 1;\n    parameter = parameter.getNext();\n  }\n\n  return functionArity;\n}\n\nprivate int countArguments(Node argument, int offset) {\n  int count = offset;\n\n  Node currentArg = argument;\n  while (currentArg != null) {\n    if (currentArg.isSpread()) {\n      // If the argument is spread, all following arguments count towards the arity.\n      count += argument.getChildCount() - offset;\n      break;\n    } else if (!NodeUtil.isImmutableValue(currentArg)) {\n      count += 1;\n    }\n    currentArg = currentArg.getNext();\n  }\n\n  return count;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..d4f5339c 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,101 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = NodeUtil.getFunctionBody(fnNode);\n \n+  Node callee = callNode.getFirstChild();\n+  // Only support call/apply with named function or function expression.\n+  if (!callee.isName() && !callee.isFunction()) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  Node argument = callee.getNext();\n+  int functionArity = getFunctionArity(fnNode);\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  // If the function object is called with a `this` object, skip it.\n+  int argumentCountOffset = 0;\n+  if (!callee.isName()) {\n+    argumentCountOffset = 1;\n+    argument = argument.getNext();\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  int argumentCount = countArguments(argument, argumentCountOffset);\n+\n+  if (functionArity != argumentCount) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node parameter = fnNode.getFirstChild().getNext();\n+  while (parameter != null) {\n+    String parameterName = parameter.getString();\n+\n+    // Check if the parameter is assigned to more than once.\n+    if (NodeUtil.getNameReferenceCount(block, parameterName) > 1) {\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    Node argNode = argument;\n+    for (int i = 0; i < argumentCountOffset + functionArity - argumentCount; i++) {\n+      argNode = argNode.getNext();\n+    }\n+    if (!NodeUtil.isImmutableValue(argNode)) {\n+      // Check if the argument has side effects.\n+      if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      // Check if the argument is assigned to more than once.\n+      if (NodeUtil.getNameReferenceCount(block, argNode.toStringTree()) > 1) {\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    parameter = parameter.getNext();\n+    argument = argument.getNext();\n+  }\n+\n+  return CanInlineResult.YES;\n+}\n+\n+private int getFunctionArity(Node functionNode) {\n+  Node parameterList = NodeUtil.getFunctionParameters(functionNode);\n+  if (!parameterList.hasChildren()) {\n+    return 0;\n   }\n \n+  int functionArity = 1;\n+  Node parameter = parameterList.getFirstChild();\n+  while (parameter.getNext() != null) {\n+    functionArity += 1;\n+    parameter = parameter.getNext();\n+  }\n+\n+  return functionArity;\n+}\n+\n+private int countArguments(Node argument, int offset) {\n+  int count = offset;\n+\n+  Node currentArg = argument;\n+  while (currentArg != null) {\n+    if (currentArg.isSpread()) {\n+      // If the argument is spread, all following arguments count towards the arity.\n+      count += argument.getChildCount() - offset;\n+      break;\n+    } else if (!NodeUtil.isImmutableValue(currentArg)) {\n+      count += 1;\n+    }\n+    currentArg = currentArg.getNext();\n+  }\n+\n+  return count;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}