{
    "patch": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int totalMinutes = hoursOffset * 60 + minutesOffset;\n    if (totalMinutes == 0) {\n        return DateTimeZone.UTC;\n    } else if (totalMinutes % 15 == 0) {\n        long millis = ((long) totalMinutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n        if (millis > 86400000 || millis < -86400000) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis((int) millis);\n    } else {\n        // Find the nearest matching offset that aligns on a 15 minute boundary\n        int remainder = totalMinutes % 15;\n        int nearestMinutes = (remainder < 8 ? totalMinutes - remainder : totalMinutes + (15 - remainder));\n        long millis = ((long) nearestMinutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n        if (millis > 86400000 || millis < -86400000) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis((int) millis);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..b865d0ef 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -269,30 +269,33 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n-        if (hoursOffset == 0 && minutesOffset == 0) {\n-            return DateTimeZone.UTC;\n-        }\n-        if (hoursOffset < -23 || hoursOffset > 23) {\n-            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n-        }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n+public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n+    if (hoursOffset < -23 || hoursOffset > 23) {\n+        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n+    }\n+    if (minutesOffset < -59 || minutesOffset > 59) {\n+        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n+    }\n+    int totalMinutes = hoursOffset * 60 + minutesOffset;\n+    if (totalMinutes == 0) {\n+        return DateTimeZone.UTC;\n+    } else if (totalMinutes % 15 == 0) {\n+        long millis = ((long) totalMinutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n+        if (millis > 86400000 || millis < -86400000) {\n+            throw new IllegalArgumentException(\"Offset is too large\");\n         }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n-            }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n+        return forOffsetMillis((int) millis);\n+    } else {\n+        // Find the nearest matching offset that aligns on a 15 minute boundary\n+        int remainder = totalMinutes % 15;\n+        int nearestMinutes = (remainder < 8 ? totalMinutes - remainder : totalMinutes + (15 - remainder));\n+        long millis = ((long) nearestMinutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n+        if (millis > 86400000 || millis < -86400000) {\n             throw new IllegalArgumentException(\"Offset is too large\");\n         }\n-        return forOffsetMillis(offset);\n+        return forOffsetMillis((int) millis);\n     }\n+}\n \n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.",
    "result_reason": "java.lang.IllegalArgumentException: Millis out of range: 86400000",
    "test_result": "FAIL"
}