{
    "patch": "            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                if (e.getIllegalFieldName() != null && (e.getIllegalValue() == null || e.getIllegalValue() == e.getLowerBound() || e.getIllegalValue() == e.getUpperBound())) {\n                    DurationField field = e.getDurationFieldType().getField(iChrono);\n                    if (field.getType() == DurationFieldType.weekyears()) {\n                        if (iDefaultYear == null || iDefaultYear == iChrono.weekyear().get(DateTimeUtils.currentTimeMillis())) {\n                            saveField(DateTimeFieldType.weekyear(), (e.getIllegalValue() == null ? e.getUpperBound() : e.getIllegalValue()));\n                            sort(savedFields, count);\n                            return computeMillis(resetFields, text);\n                        }\n                    } else if (field.getType() == DurationFieldType.weeks()) {\n                        int weekyear = iChrono.weekyear().get(millis);\n                        Partial partial = new Partial(\n                            new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() },\n                            new int[] { weekyear, savedFields[0].getNumericValue() }\n                        );\n                        millis = partial.toDateTime((Chronology)iChrono.withUTC()).getMillis();\n                        saveField(DateTimeFieldType.weekyear(), weekyear);\n                        sort(savedFields, count);\n                        return computeMillis(resetFields, text);\n                    }\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..47c93891 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                if (e.getIllegalFieldName() != null && (e.getIllegalValue() == null || e.getIllegalValue() == e.getLowerBound() || e.getIllegalValue() == e.getUpperBound())) {\n+                    DurationField field = e.getDurationFieldType().getField(iChrono);\n+                    if (field.getType() == DurationFieldType.weekyears()) {\n+                        if (iDefaultYear == null || iDefaultYear == iChrono.weekyear().get(DateTimeUtils.currentTimeMillis())) {\n+                            saveField(DateTimeFieldType.weekyear(), (e.getIllegalValue() == null ? e.getUpperBound() : e.getIllegalValue()));\n+                            sort(savedFields, count);\n+                            return computeMillis(resetFields, text);\n+                        }\n+                    } else if (field.getType() == DurationFieldType.weeks()) {\n+                        int weekyear = iChrono.weekyear().get(millis);\n+                        Partial partial = new Partial(\n+                            new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() },\n+                            new int[] { weekyear, savedFields[0].getNumericValue() }\n+                        );\n+                        millis = partial.toDateTime((Chronology)iChrono.withUTC()).getMillis();\n+                        saveField(DateTimeFieldType.weekyear(), weekyear);\n+                        sort(savedFields, count);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}