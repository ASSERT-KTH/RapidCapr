{
    "patch": "public String getprop(String name) {\n   String val;\n   try {\n       val = System.getProperty(name);\n   } catch (SecurityException e) {\n       // we are not allowed to look at this property\n       return null;\n   }\n   if (val == null || val.trim().length() == 0) {\n       // we have nothing to return\n       return null;\n   }\n   // check for illegal characters\n   for (char c: val.toCharArray()) {\n       if ((int)c < 32 || (int)c > 127) {\n           return null;\n       }\n   }\n   return val;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..92b03225 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String name) {\n+   String val;\n+   try {\n+       val = System.getProperty(name);\n+   } catch (SecurityException e) {\n+       // we are not allowed to look at this property\n+       return null;\n+   }\n+   if (val == null || val.trim().length() == 0) {\n+       // we have nothing to return\n+       return null;\n+   }\n+   // check for illegal characters\n+   for (char c: val.toCharArray()) {\n+       if ((int)c < 32 || (int)c > 127) {\n+           return null;\n+       }\n+   }\n+   return val;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}