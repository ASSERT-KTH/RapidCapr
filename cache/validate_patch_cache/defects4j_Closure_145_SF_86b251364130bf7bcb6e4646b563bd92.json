{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n        n = n.getLastChild();\n        //check if the label has a non-empty statement or more than one child.\n        //In that case, return false.\n        if (!n.hasChildren() || n.getFirstChild().getType() != Token.BLOCK\n                || n.getFirstChild().getNext() != null) {\n            return false;\n        }\n        n = n.getFirstChild();\n    }\n    if (n.getType() == Token.BLOCK) {\n        //check if the block has only one child node which is either a FUNCTION or DO node.\n        return n.hasChildren() && n.getFirstChild().getNext() == null\n                && (n.getFirstChild().getType() == Token.FUNCTION\n                || n.getFirstChild().getType() == Token.DO);\n    }\n    // for non-block nodes, simply check if it is a FUNCTION or DO node\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..49424476 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,26 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.LABEL) {\n+        n = n.getLastChild();\n+        //check if the label has a non-empty statement or more than one child.\n+        //In that case, return false.\n+        if (!n.hasChildren() || n.getFirstChild().getType() != Token.BLOCK\n+                || n.getFirstChild().getNext() != null) {\n+            return false;\n+        }\n+        n = n.getFirstChild();\n+    }\n+    if (n.getType() == Token.BLOCK) {\n+        //check if the block has only one child node which is either a FUNCTION or DO node.\n+        return n.hasChildren() && n.getFirstChild().getNext() == null\n+                && (n.getFirstChild().getType() == Token.FUNCTION\n+                || n.getFirstChild().getType() == Token.DO);\n+    }\n+    // for non-block nodes, simply check if it is a FUNCTION or DO node\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}