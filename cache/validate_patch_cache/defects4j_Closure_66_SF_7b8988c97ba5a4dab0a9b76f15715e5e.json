{
    "patch": "public double getTypedPercent(String inputString){\n    double percent = 0;\n    int count = 0, total = 0;\n\n    String[] typeList = {\"word\", \"number\", \"character\", \"sentence\"};\n\n    for(String type:typeList) {\n        Pattern pattern = Pattern.compile(type);\n        Matcher matcher = pattern.matcher(inputString);\n\n        while(matcher.find()) {\n            if(type.equals(\"word\")) {\n                count++;\n            }\n            else if(type.equals(\"number\")) {\n                count++;\n            }\n            else if(type.equals(\"character\")) {\n                count += matcher.group().length();\n            }\n            else if(type.equals(\"sentence\")) {\n                count++;\n            }\n        }\n        total+=count;\n        count=0;\n    }\n    percent = (double)total/inputString.length()*100;\n\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..27828d1d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String inputString){\n+    double percent = 0;\n+    int count = 0, total = 0;\n+\n+    String[] typeList = {\"word\", \"number\", \"character\", \"sentence\"};\n+\n+    for(String type:typeList) {\n+        Pattern pattern = Pattern.compile(type);\n+        Matcher matcher = pattern.matcher(inputString);\n+\n+        while(matcher.find()) {\n+            if(type.equals(\"word\")) {\n+                count++;\n+            }\n+            else if(type.equals(\"number\")) {\n+                count++;\n+            }\n+            else if(type.equals(\"character\")) {\n+                count += matcher.group().length();\n+            }\n+            else if(type.equals(\"sentence\")) {\n+                count++;\n+            }\n+        }\n+        total+=count;\n+        count=0;\n+    }\n+    percent = (double)total/inputString.length()*100;\n+\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}