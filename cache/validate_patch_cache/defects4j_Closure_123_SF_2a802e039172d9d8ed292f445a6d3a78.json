{
    "patch": "public static String fixCode(String code) {\n    String pattern1 = \"for\\\\(([^=;]*;[^;]*;[^;]*)\\\\)\";\n    Matcher m1 = Pattern.compile(pattern1).matcher(code);\n    while (m1.find()) {\n        String forLoop = m1.group();\n        String[] parts = forLoop.split(\";\");\n        if (!parts[1].contains(\"in\")) {\n            String newForLoop = \"for(\" + parts[0] + \";\" + parts[1] + \" in \" + parts[2] + \";\" + parts[3] + \")\";\n            code = code.replace(forLoop, newForLoop);\n        }\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..d73f3697 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,19 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String pattern1 = \"for\\\\(([^=;]*;[^;]*;[^;]*)\\\\)\";\n+    Matcher m1 = Pattern.compile(pattern1).matcher(code);\n+    while (m1.find()) {\n+        String forLoop = m1.group();\n+        String[] parts = forLoop.split(\";\");\n+        if (!parts[1].contains(\"in\")) {\n+            String newForLoop = \"for(\" + parts[0] + \";\" + parts[1] + \" in \" + parts[2] + \";\" + parts[3] + \")\";\n+            code = code.replace(forLoop, newForLoop);\n+        }\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}