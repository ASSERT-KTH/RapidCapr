{
    "patch": "        if (val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n        if (val.startsWith(\"-\")) {\n            if (val.length() == 1) {\n                throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n            }\n            return createNumber(val.substring(1)).negate();\n        }\n        if (val.startsWith(\"0b\")) {\n            return createInteger(val.substring(2), 2);\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        if (val.startsWith(\"0\")) {\n            return createInteger(val, 8);\n        }\n        if (val.contains(\".\")) {\n            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n                return createFloat(val);\n            }\n            if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n                return createDouble(val);\n            }\n            return createBigDecimal(val);\n        }\n        if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n            return createFloat(val.substring(0, val.length() - 1));\n        }\n        if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n            return createDouble(val.substring(0, val.length() - 1));\n        }\n        try {\n            return createInteger(val);\n        } catch (NumberFormatException e) {\n            try {\n                return createLong(val);\n            } catch (NumberFormatException f) {\n                return createBigInteger(val);\n            }\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..b5a584c0 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,48 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n+        if (val.startsWith(\"-\")) {\n+            if (val.length() == 1) {\n+                throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n+            }\n+            return createNumber(val.substring(1)).negate();\n+        }\n+        if (val.startsWith(\"0b\")) {\n+            return createInteger(val.substring(2), 2);\n+        }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+        if (val.startsWith(\"0\")) {\n+            return createInteger(val, 8);\n+        }\n+        if (val.contains(\".\")) {\n+            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n+                return createFloat(val);\n+            }\n+            if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n+                return createDouble(val);\n+            }\n+            return createBigDecimal(val);\n+        }\n+        if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n+            return createFloat(val.substring(0, val.length() - 1));\n+        }\n+        if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n+            return createDouble(val.substring(0, val.length() - 1));\n+        }\n+        try {\n+            return createInteger(val);\n+        } catch (NumberFormatException e) {\n+            try {\n+                return createLong(val);\n+            } catch (NumberFormatException f) {\n+                return createBigInteger(val);\n+            }\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}