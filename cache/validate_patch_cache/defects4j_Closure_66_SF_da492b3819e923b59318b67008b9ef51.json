{
    "patch": "public static double getTypedPercent(String json) {\n    double typedCount = 0;\n    double totalCount = 0;\n\n    try {\n        JsonNode node = new ObjectMapper().readTree(json);\n        Iterator<JsonNode> iterator = node.elements();\n\n        while (iterator.hasNext()) {\n            JsonNode item = iterator.next();\n\n            if (item.get(\"type\").asText().equals(\"typed\")) {\n                typedCount++;\n            }\n\n            totalCount++;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return (typedCount / totalCount) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..24b9b43b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    double typedCount = 0;\n+    double totalCount = 0;\n+\n+    try {\n+        JsonNode node = new ObjectMapper().readTree(json);\n+        Iterator<JsonNode> iterator = node.elements();\n+\n+        while (iterator.hasNext()) {\n+            JsonNode item = iterator.next();\n+\n+            if (item.get(\"type\").asText().equals(\"typed\")) {\n+                typedCount++;\n+            }\n+\n+            totalCount++;\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    return (typedCount / totalCount) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}