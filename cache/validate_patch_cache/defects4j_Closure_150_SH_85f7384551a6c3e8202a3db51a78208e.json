{
    "patch": "attachLiteralTypes(n);\nNode grandparent = parent.getParent();\nif (grandparent == null) {\n  return;\n}\nswitch (n.getType()) {\n  case Token.FUNCTION:\n    if (grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK \n        || NodeUtil.isClassExpression(parent) || NodeUtil.isFunctionExpression(parent)) {\n      defineDeclaredFunction(n, parent);\n    } else if (parent.getType() == Token.NAME) {\n      return;\n    } else if (NodeUtil.isObjectLitKey(parent)) {\n      Node gGrandparent = grandparent.getParent();\n      if (gGrandparent == null || gGrandparent.isScript()) {\n        defineDeclaredFunction(n, parent);\n      }\n    } else if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n      Node lValue = parent.getFirstChild();\n      if (lValue.isName() || lValue.isGetProp() || lValue.isGetElem()) {\n        defineFunctionExpression(n, parent);\n      }\n    }\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.LP:\n    if (NodeUtil.isFunctionExpression(parent) && (grandparent.getType() == Token.SCRIPT \n        || grandparent.getType() == Token.BLOCK)) {\n      defineDeclaredFunction(parent, grandparent);\n    } else if (parent == scope.getRootNode()) {\n      handleFunctionInputs(parent);\n    }\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..65020e4f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,45 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+Node grandparent = parent.getParent();\n+if (grandparent == null) {\n+  return;\n+}\n+switch (n.getType()) {\n+  case Token.FUNCTION:\n+    if (grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK \n+        || NodeUtil.isClassExpression(parent) || NodeUtil.isFunctionExpression(parent)) {\n+      defineDeclaredFunction(n, parent);\n+    } else if (parent.getType() == Token.NAME) {\n+      return;\n+    } else if (NodeUtil.isObjectLitKey(parent)) {\n+      Node gGrandparent = grandparent.getParent();\n+      if (gGrandparent == null || gGrandparent.isScript()) {\n+        defineDeclaredFunction(n, parent);\n       }\n+    } else if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n+      Node lValue = parent.getFirstChild();\n+      if (lValue.isName() || lValue.isGetProp() || lValue.isGetElem()) {\n+        defineFunctionExpression(n, parent);\n+      }\n+    }\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.LP:\n+    if (NodeUtil.isFunctionExpression(parent) && (grandparent.getType() == Token.SCRIPT \n+        || grandparent.getType() == Token.BLOCK)) {\n+      defineDeclaredFunction(parent, grandparent);\n+    } else if (parent == scope.getRootNode()) {\n+      handleFunctionInputs(parent);\n+    }\n+    break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}