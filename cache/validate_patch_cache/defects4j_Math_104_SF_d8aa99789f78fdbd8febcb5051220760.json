{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments for regularizedGamma function.\");\n    }\n\n    double eps = 1e-15; // Adjust this value as needed\n    int maxIterations = 1000; // Adjust this value as needed\n\n    double sum = 0.0;\n    double term = 1.0 / a;\n    int n = 0;\n\n    while (n < maxIterations && Math.abs(term) > eps) {\n        sum += term;\n        term *= x / (a + n + 1);\n        n++;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - Math.log(gamma(a))) * sum;\n}\n\npublic static double gamma(double z) {\n    double gamma = 1.0;\n    while (z <= -1) {\n        gamma *= -z;\n        z++;\n    }\n    if (z < 1) {\n        z = 1 - z;\n    }\n    double[] P = {\n            -1.716185138865495,\n             24.76565080557592,\n            -379.80425647094563,\n            629.3311553128184,\n           -106.75224591795568,\n             17.462018323559404,\n             -2.651961356835233,\n              0.242554527330138e-3,\n             -0.17239848169585398e-4,\n              0.8448748225533157e-6,\n             -0.26190838401581408e-7,\n              0.36899182659531623e-9\n          };\n    double sum = 0.9999999999998099;\n    for (int i = P.length - 1; i >= 0; i--) {\n        sum += P[i] / (z + i + 1);\n    }\n    double sqrt2Pi = 2.5066282746310002;\n    return Math.sqrt(2 * Math.PI) * Math.pow(z + 4.5, z - 0.5) * Math.exp(-(z + 4.5)) * sum / sqrt2Pi / gamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..cba19dfa1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,57 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for regularizedGamma function.\");\n+    }\n+\n+    double eps = 1e-15; // Adjust this value as needed\n+    int maxIterations = 1000; // Adjust this value as needed\n+\n+    double sum = 0.0;\n+    double term = 1.0 / a;\n+    int n = 0;\n+\n+    while (n < maxIterations && Math.abs(term) > eps) {\n+        sum += term;\n+        term *= x / (a + n + 1);\n+        n++;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - Math.log(gamma(a))) * sum;\n+}\n+\n+public static double gamma(double z) {\n+    double gamma = 1.0;\n+    while (z <= -1) {\n+        gamma *= -z;\n+        z++;\n+    }\n+    if (z < 1) {\n+        z = 1 - z;\n+    }\n+    double[] P = {\n+            -1.716185138865495,\n+             24.76565080557592,\n+            -379.80425647094563,\n+            629.3311553128184,\n+           -106.75224591795568,\n+             17.462018323559404,\n+             -2.651961356835233,\n+              0.242554527330138e-3,\n+             -0.17239848169585398e-4,\n+              0.8448748225533157e-6,\n+             -0.26190838401581408e-7,\n+              0.36899182659531623e-9\n+          };\n+    double sum = 0.9999999999998099;\n+    for (int i = P.length - 1; i >= 0; i--) {\n+        sum += P[i] / (z + i + 1);\n+    }\n+    double sqrt2Pi = 2.5066282746310002;\n+    return Math.sqrt(2 * Math.PI) * Math.pow(z + 4.5, z - 0.5) * Math.exp(-(z + 4.5)) * sum / sqrt2Pi / gamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}