{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    StringBuilder builder = new StringBuilder();\n\n    if (token.isStar() || token == JsDocToken.EOL) {\n        token = JsDocToken.TEXT;\n    } else if (token == JsDocToken.EOF || token == JsDocToken.EOC) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    do {\n        switch (token) {\n            case TEXT:\n                String line = stream.getRemainingJSDocLine();\n                if (option != WhitespaceOption.PRESERVE) {\n                    line = line.trim();\n                }\n\n                if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n                    builder.append(' ');\n                }\n\n                builder.append(line);\n\n                token = next();\n                break;\n\n            case STAR:\n                String trimmedLine = stream.getRemainingJSDocLine().trim();\n\n                if (trimmedLine.startsWith(\"*/\")) {\n                    builder.append(trimmedLine.substring(0, 2));\n                    token = JsDocToken.EOC;\n                } else {\n                    token = JsDocToken.TEXT;\n                }\n\n                break;\n\n            case EOL:\n                if (option == WhitespaceOption.PRESERVE || option == WhitespaceOption.ALL_LINE) {\n                    builder.append('\\n');\n                }\n                token = JsDocToken.TEXT;\n                break;\n\n            case EOF:\n            case EOC:\n                token = JsDocToken.EOC;\n                break;\n        }\n    } while (token != JsDocToken.EOC && parserUtils.isMultilineToken(token));\n\n    // Trim the trailing white space.\n    String multilineText = builder.toString().trim();\n\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n\n    if (!multilineText.isEmpty()) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n\n    return new ExtractionInfo(multilineText, token);\n}\n\nprivate JsDocToken next() {\n    stream.next();\n    return stream.getType();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..465abab2 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,79 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+    StringBuilder builder = new StringBuilder();\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+    if (token.isStar() || token == JsDocToken.EOL) {\n+        token = JsDocToken.TEXT;\n+    } else if (token == JsDocToken.EOF || token == JsDocToken.EOC) {\n+        return new ExtractionInfo(\"\", token);\n     }\n \n     stream.update();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n     do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+        switch (token) {\n+            case TEXT:\n+                String line = stream.getRemainingJSDocLine();\n+                if (option != WhitespaceOption.PRESERVE) {\n+                    line = line.trim();\n+                }\n+\n+                if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n+                    builder.append(' ');\n+                }\n+\n+                builder.append(line);\n+\n+                token = next();\n+                break;\n+\n+            case STAR:\n+                String trimmedLine = stream.getRemainingJSDocLine().trim();\n+\n+                if (trimmedLine.startsWith(\"*/\")) {\n+                    builder.append(trimmedLine.substring(0, 2));\n+                    token = JsDocToken.EOC;\n+                } else {\n+                    token = JsDocToken.TEXT;\n+                }\n+\n+                break;\n+\n+            case EOL:\n+                if (option == WhitespaceOption.PRESERVE || option == WhitespaceOption.ALL_LINE) {\n+                    builder.append('\\n');\n+                }\n+                token = JsDocToken.TEXT;\n+                break;\n+\n+            case EOF:\n+            case EOC:\n+                token = JsDocToken.EOC;\n+                break;\n+        }\n+    } while (token != JsDocToken.EOC && parserUtils.isMultilineToken(token));\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+    // Trim the trailing white space.\n+    String multilineText = builder.toString().trim();\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+    int endLineno = stream.getLineno();\n+    int endCharno = stream.getCharno();\n \n-          line = stream.getRemainingJSDocLine();\n+    if (!multilineText.isEmpty()) {\n+        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+    }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+    return new ExtractionInfo(multilineText, token);\n+}\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+private JsDocToken next() {\n+    stream.next();\n+    return stream.getType();\n+}\n \n \n   /**",
    "result_reason": "error: method next() is already defined in class JsDocInfoParser",
    "test_result": "ERROR"
}