{
    "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MockitoSessionBuilder<T> mockitoSessionBuilder = Mockito.mockitoSession()\n            .initMocks(mock)\n            .mockitoSessionBuilder();\n\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) mockitoSessionBuilder.getMockSettings());\n\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    } else if (mock.getClass().getInterfaces().length > 0) {\n        mock = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n                mock.getClass().getInterfaces(), newFilter);\n        setMockHandler(mock, newMockHandler);\n    } else {\n        throw new IllegalArgumentException(\"Invalid mock object.\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..064b786d8 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MockitoSessionBuilder<T> mockitoSessionBuilder = Mockito.mockitoSession()\n+            .initMocks(mock)\n+            .mockitoSessionBuilder();\n+\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) mockitoSessionBuilder.getMockSettings());\n+\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else if (mock.getClass().getInterfaces().length > 0) {\n+        mock = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n+                mock.getClass().getInterfaces(), newFilter);\n+        setMockHandler(mock, newMockHandler);\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid mock object.\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}