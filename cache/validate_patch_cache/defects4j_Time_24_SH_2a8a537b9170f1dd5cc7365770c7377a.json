{
    "patch": "                if (savedFields[0].getValue() == 0) {\n                    // If the first field is a month or day and the value is 0, set the year to iDefaultYear and avoid infinite recursion\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                } else {\n                    // Otherwise, set the value of the field to the max value and call the same method\n                    savedFields[0].set(savedFields[0].getField().getMaximumValue(), false);\n                    return computeMillis(resetFields, text);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..050c8de8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (savedFields[0].getValue() == 0) {\n+                    // If the first field is a month or day and the value is 0, set the year to iDefaultYear and avoid infinite recursion\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                } else {\n+                    // Otherwise, set the value of the field to the max value and call the same method\n+                    savedFields[0].set(savedFields[0].getField().getMaximumValue(), false);\n+                    return computeMillis(resetFields, text);\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}