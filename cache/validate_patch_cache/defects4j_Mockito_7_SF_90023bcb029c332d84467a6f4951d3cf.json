{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n    for (Type type : bounds) {\n        if (type instanceof Class) {\n            registerTypeVariablesOn(type);\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            registerTypeVariablesOn(parameterizedType.getRawType());\n            for (Type actualTypeArgumentOfParameterizedType : parameterizedType.getActualTypeArguments()) {\n                if (actualTypeArgumentOfParameterizedType instanceof TypeVariable) {\n                    readTypeVariables((TypeVariable<?>) actualTypeArgumentOfParameterizedType);\n                }\n            }\n        } else if (type instanceof TypeVariable) {\n            readTypeVariables((TypeVariable<?>) type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..8e36b3278 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,29 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof Class) {\n+            registerTypeVariablesOn(type);\n+        } else if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            registerTypeVariablesOn(parameterizedType.getRawType());\n+            for (Type actualTypeArgumentOfParameterizedType : parameterizedType.getActualTypeArguments()) {\n+                if (actualTypeArgumentOfParameterizedType instanceof TypeVariable) {\n+                    readTypeVariables((TypeVariable<?>) actualTypeArgumentOfParameterizedType);\n+                }\n+            }\n+        } else if (type instanceof TypeVariable) {\n+            readTypeVariables((TypeVariable<?>) type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}