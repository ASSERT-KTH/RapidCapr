{
    "patch": "    protected final double doSolve() {\n        // Get initial solution\n        double a = getMin();\n        double b = getMax();\n        double fa = computeObjectiveValue(a);\n        double fb = computeObjectiveValue(b);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (fa == 0.0) {\n            return a;\n        }\n        if (fb == 0.0) {\n            return b;\n        }\n\n        // Verify bracketing and derive the golden ratio.\n        verifyBracketing(a, b);\n        final double phi = 0.5 * (3 - FastMath.sqrt(5));\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the new interval to search.\n            final double tol = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            final double d = phi * (b - a);\n            double e = a + d;\n            double c = b - d;\n            if (FastMath.abs(d) < tol) {\n                // Interval small enough.\n                break;\n            }\n\n            // Calculate the function values at the new points.\n            final double fc = computeObjectiveValue(c);\n            final double fe = computeObjectiveValue(e);\n\n            // Update the bounds with the new intervals.\n            if (fc < fe) {\n                b = e;\n                fb = fe;\n            } else {\n                a = c;\n                fa = fc;\n            }\n        }\n\n        // Return the midpoint of the final interval.\n        return 0.5 * (a + b);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..03f840cc3 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -127,123 +127,53 @@ public abstract class BaseSecantSolver\n     /** {@inheritDoc} */\n     protected final double doSolve() {\n         // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+        double a = getMin();\n+        double b = getMax();\n+        double fa = computeObjectiveValue(a);\n+        double fb = computeObjectiveValue(b);\n \n         // If one of the bounds is the exact root, return it. Since these are\n         // not under-approximations or over-approximations, we can return them\n         // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n+        if (fa == 0.0) {\n+            return a;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+        if (fb == 0.0) {\n+            return b;\n         }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n-\n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n-\n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+        // Verify bracketing and derive the golden ratio.\n+        verifyBracketing(a, b);\n+        final double phi = 0.5 * (3 - FastMath.sqrt(5));\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            // Calculate the new interval to search.\n+            final double tol = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+            final double d = phi * (b - a);\n+            double e = a + d;\n+            double c = b - d;\n+            if (FastMath.abs(d) < tol) {\n+                // Interval small enough.\n+                break;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n-            }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+            // Calculate the function values at the new points.\n+            final double fc = computeObjectiveValue(c);\n+            final double fe = computeObjectiveValue(e);\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            // Update the bounds with the new intervals.\n+            if (fc < fe) {\n+                b = e;\n+                fb = fe;\n+            } else {\n+                a = c;\n+                fa = fc;\n             }\n         }\n+\n+        // Return the midpoint of the final interval.\n+        return 0.5 * (a + b);\n     }\n \n     /** <em>Secant</em>-based root-finding methods. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}