{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n            Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n            if (actualTypeArg != null) {\n                registerTypeVariablesOn(actualTypeArg);\n            } else {\n                readTypeVariable(typeVar);\n            }\n        } else if (!(type instanceof WildcardType) || !(type instanceof Class)) {\n            registerTypeVariablesOn(type);\n        }\n    }\n}\n\nprivate void readTypeVariable(TypeVariable<?> tv) {\n    Type[] bounds = tv.getBounds();\n    if (bounds.length == 0) {\n        registerTypeVariablesOn(tv);\n    } else {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable) {\n                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n                if (actualTypeArg != null) {\n                    registerTypeVariablesOn(actualTypeArg);\n                } else {\n                    readTypeVariable(typeVar);\n                }\n            } else if (!(bound instanceof WildcardType) || !(bound instanceof Class)) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..94baaf58f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,43 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+            Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n+            if (actualTypeArg != null) {\n+                registerTypeVariablesOn(actualTypeArg);\n+            } else {\n+                readTypeVariable(typeVar);\n+            }\n+        } else if (!(type instanceof WildcardType) || !(type instanceof Class)) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n+\n+private void readTypeVariable(TypeVariable<?> tv) {\n+    Type[] bounds = tv.getBounds();\n+    if (bounds.length == 0) {\n+        registerTypeVariablesOn(tv);\n+    } else {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable) {\n+                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n+                if (actualTypeArg != null) {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                } else {\n+                    readTypeVariable(typeVar);\n+                }\n+            } else if (!(bound instanceof WildcardType) || !(bound instanceof Class)) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}