{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // use first field to compute base date\n        long baseMillis = iMillis;\n        try {\n            DurationField firstField = savedFields[0].iField.getDurationField();\n            if (firstField instanceof DurationFieldWithUnits) {\n                DurationField unitField = ((DurationFieldWithUnits) firstField).getRangeDurationField();\n                if (unitField != null && unitField.getType().equals(DurationFieldType.weekyears())) {\n                    // base year is set to nearest leap year\n                    int baseYear = iChrono.year().get(baseMillis);\n                    int leapYear = baseYear + (4 - baseYear % 4) % 4;\n                    baseMillis = iChrono.year().set(baseMillis, leapYear);\n                }\n            }\n        } catch (RuntimeException e) {\n            // ignore, keep baseMillis unchanged\n        }\n        for (int i = 0; i < count; i++) {\n            baseMillis = savedFields[i].set(baseMillis, resetFields);\n        }\n        if (iZone == null) {\n            baseMillis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(baseMillis);\n            baseMillis -= offset;\n            if (offset != iZone.getOffset(baseMillis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        return baseMillis;\n    }\n    if (iZone == null) {\n        return iMillis - iOffset;\n    }\n    return iZone.convertLocalToUTC(iMillis, false, iOffset);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f7eebdca 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,43 +328,40 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n-\n-        long millis = iMillis;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // use first field to compute base date\n+        long baseMillis = iMillis;\n         try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            DurationField firstField = savedFields[0].iField.getDurationField();\n+            if (firstField instanceof DurationFieldWithUnits) {\n+                DurationField unitField = ((DurationFieldWithUnits) firstField).getRangeDurationField();\n+                if (unitField != null && unitField.getType().equals(DurationFieldType.weekyears())) {\n+                    // base year is set to nearest leap year\n+                    int baseYear = iChrono.year().get(baseMillis);\n+                    int leapYear = baseYear + (4 - baseYear % 4) % 4;\n+                    baseMillis = iChrono.year().set(baseMillis, leapYear);\n+                }\n             }\n-            throw e;\n+        } catch (RuntimeException e) {\n+            // ignore, keep baseMillis unchanged\n+        }\n+        for (int i = 0; i < count; i++) {\n+            baseMillis = savedFields[i].set(baseMillis, resetFields);\n         }\n-        \n         if (iZone == null) {\n-            millis -= iOffset;\n+            baseMillis -= iOffset;\n         } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n+            int offset = iZone.getOffsetFromLocal(baseMillis);\n+            baseMillis -= offset;\n+            if (offset != iZone.getOffset(baseMillis)) {\n                 String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n@@ -373,9 +370,13 @@ public class DateTimeParserBucket {\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n-        return millis;\n+        return baseMillis;\n+    }\n+    if (iZone == null) {\n+        return iMillis - iOffset;\n     }\n+    return iZone.convertLocalToUTC(iMillis, false, iOffset);\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}