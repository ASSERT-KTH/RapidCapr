{
    "patch": "      final double v1x = v1.getX();\n      final double v1y = v1.getY();\n      final double v1z = v1.getZ();\n      final double v2x = v2.getX();\n      final double v2y = v2.getY();\n      final double v2z = v2.getZ();\n      \n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      \n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n      \n      final double factor = v1.getNorm() * v2.getNorm();\n      final double vr1 = v1y * v2z;\n      final double vr2 = v1z * v2y;\n      final double v3x = SafeNorm.safeNorm(vr1, vr2);\n      final double vr3 = v1z * v2x;\n      final double vr4 = v1x * v2z;\n      final double v3y = SafeNorm.safeNorm(vr3, vr4);\n      final double vr5 = v1x * v2y;\n      final double vr6 = v1y * v2x;\n      final double v3z = SafeNorm.safeNorm(vr5, vr6);\n      final Vector3D v3 = new Vector3D(v3x, v3y, v3z);\n      double rho = v1.dotProduct(v2) / factor;\n      \n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double absRho = FastMath.abs(rho);\n      if (absRho < 0x1.0p-23 || absRho > 0x1.0p+23) {\n          rho = FastMath.rint(rho);\n      } else {\n          final double rho3 = 8 * rho;\n          final double rho34 = FastMath.rint(rho3);\n          if (FastMath.abs(rho3 - rho34) == 0.5) {\n              rho = 0.5 * rho34;\n          } else {\n              rho = rho34;\n          }\n      }\n      \n      v3.scaleAdd(-rho, v2, v1);\n      \n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double x = v3.y * v2.z - v3.z * v2.y;\n      final double y = v3.z * v2.x - v3.x * v2.z;\n      final double z = v3.x * v2.y - v3.y * v2.x;\n      return new Vector3D(x, y, z);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..d5f30b0f9 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,56 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n+      final double v1x = v1.getX();\n+      final double v1y = v1.getY();\n+      final double v1z = v1.getZ();\n+      final double v2x = v2.getX();\n+      final double v2y = v2.getY();\n+      final double v2z = v2.getZ();\n+      \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n-\n+      \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n       // v3 without loss of precision. See Kahan lecture\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n+      \n+      final double factor = v1.getNorm() * v2.getNorm();\n+      final double vr1 = v1y * v2z;\n+      final double vr2 = v1z * v2y;\n+      final double v3x = SafeNorm.safeNorm(vr1, vr2);\n+      final double vr3 = v1z * v2x;\n+      final double vr4 = v1x * v2z;\n+      final double v3y = SafeNorm.safeNorm(vr3, vr4);\n+      final double vr5 = v1x * v2y;\n+      final double vr6 = v1y * v2x;\n+      final double v3z = SafeNorm.safeNorm(vr5, vr6);\n+      final Vector3D v3 = new Vector3D(v3x, v3y, v3z);\n+      double rho = v1.dotProduct(v2) / factor;\n+      \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n+      final double absRho = FastMath.abs(rho);\n+      if (absRho < 0x1.0p-23 || absRho > 0x1.0p+23) {\n+          rho = FastMath.rint(rho);\n+      } else {\n+          final double rho3 = 8 * rho;\n+          final double rho34 = FastMath.rint(rho3);\n+          if (FastMath.abs(rho3 - rho34) == 0.5) {\n+              rho = 0.5 * rho34;\n+          } else {\n+              rho = rho34;\n+          }\n+      }\n+      \n+      v3.scaleAdd(-rho, v2, v1);\n+      \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+      final double x = v3.y * v2.z - v3.z * v2.y;\n+      final double y = v3.z * v2.x - v3.x * v2.z;\n+      final double z = v3.x * v2.y - v3.y * v2.x;\n+      return new Vector3D(x, y, z);\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}