{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\nif (delta >= 0) {\n  final long nextTransition = nextTransition(instantAdjusted);\n  final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n  if (adjNext != nextTransition) {\n    final int nextOffset = getOffset(nextTransition);\n    if (nextOffset > offsetAdjusted) {\n      return offsetAdjusted;\n    }\n    if (nextOffset < offsetAdjusted) {\n      return offsetLocal;\n    }\n    if (getOffset(nextTransition - 1) >= nextOffset) {\n      return nextOffset + delta;\n    }\n    return offsetLocal;\n  } else {\n    return offsetAdjusted;\n  }\n} else {\n  final long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n  final long lastAdj = previousTransition(instantAdjusted);\n  final int lastOffset = getOffset(lastTransition);\n  if (lastOffset < offsetAdjusted) {\n    if (lastOffset < offsetLocal) {\n      return offsetLocal;\n    }\n    final long prevTransition = previousTransition(lastAdj);\n    final int prevOffset = getOffset(prevTransition);\n    if (prevOffset >= offsetAdjusted) {\n      return offsetLast;\n    }\n    if (prevOffset < offsetLocal) {\n      return prevOffset;\n    }\n    final int deltaMax = Math.max(delta, 0);\n    return offsetLocal + deltaMax;\n  } else if (lastOffset > offsetAdjusted) {\n    final long prevTransition = previousTransition(lastAdj);\n    final int prevOffset = getOffset(prevTransition);\n    if (prevOffset < offsetAdjusted) {\n      return offsetAdjusted;\n    }\n    if (prevOffset > offsetAdjusted) {\n      return offsetLast;\n    }\n    final int deltaMin = Math.min(delta, 0);\n    return offsetLocal + deltaMin;\n  } else {\n    return offsetAdjusted;\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3027e7b4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,58 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+if (delta >= 0) {\n+  final long nextTransition = nextTransition(instantAdjusted);\n+  final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+  if (adjNext != nextTransition) {\n+    final int nextOffset = getOffset(nextTransition);\n+    if (nextOffset > offsetAdjusted) {\n+      return offsetAdjusted;\n+    }\n+    if (nextOffset < offsetAdjusted) {\n+      return offsetLocal;\n+    }\n+    if (getOffset(nextTransition - 1) >= nextOffset) {\n+      return nextOffset + delta;\n+    }\n+    return offsetLocal;\n+  } else {\n+    return offsetAdjusted;\n+  }\n+} else {\n+  final long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n+  final long lastAdj = previousTransition(instantAdjusted);\n+  final int lastOffset = getOffset(lastTransition);\n+  if (lastOffset < offsetAdjusted) {\n+    if (lastOffset < offsetLocal) {\n+      return offsetLocal;\n+    }\n+    final long prevTransition = previousTransition(lastAdj);\n+    final int prevOffset = getOffset(prevTransition);\n+    if (prevOffset >= offsetAdjusted) {\n+      return offsetLast;\n+    }\n+    if (prevOffset < offsetLocal) {\n+      return prevOffset;\n+    }\n+    final int deltaMax = Math.max(delta, 0);\n+    return offsetLocal + deltaMax;\n+  } else if (lastOffset > offsetAdjusted) {\n+    final long prevTransition = previousTransition(lastAdj);\n+    final int prevOffset = getOffset(prevTransition);\n+    if (prevOffset < offsetAdjusted) {\n+      return offsetAdjusted;\n+    }\n+    if (prevOffset > offsetAdjusted) {\n+      return offsetLast;\n+    }\n+    final int deltaMin = Math.min(delta, 0);\n+    return offsetLocal + deltaMin;\n+  } else {\n+    return offsetAdjusted;\n+  }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}