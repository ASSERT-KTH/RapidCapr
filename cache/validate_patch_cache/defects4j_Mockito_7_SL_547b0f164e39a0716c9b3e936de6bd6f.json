{
    "patch": "        TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n\n        if (actualTypeArgument != null) {\n            for (Type type : actualTypeArgument instanceof ParameterizedType ?\n                    ((ParameterizedType) actualTypeArgument).getActualTypeArguments() : new Type[]{actualTypeArgument}) {\n                registerTypeVariablesOn(type);\n            }\n        } else {\n            Type[] bounds = typeVariable.getBounds();\n            if (bounds.length == 0) {\n                bounds = new Type[]{Object.class};\n            }\n            for (Type type : bounds) {",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..ecfc4dabe 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+\n+        if (actualTypeArgument != null) {\n+            for (Type type : actualTypeArgument instanceof ParameterizedType ?\n+                    ((ParameterizedType) actualTypeArgument).getActualTypeArguments() : new Type[]{actualTypeArgument}) {\n+                registerTypeVariablesOn(type);\n+            }\n+        } else {\n+            Type[] bounds = typeVariable.getBounds();\n+            if (bounds.length == 0) {\n+                bounds = new Type[]{Object.class};\n+            }\n+            for (Type type : bounds) {\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}