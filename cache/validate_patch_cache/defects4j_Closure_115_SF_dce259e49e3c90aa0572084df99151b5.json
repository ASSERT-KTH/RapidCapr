{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  boolean foundVarargsParam = false;\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (fnParam.isVarArgs()) {\n        foundVarargsParam = true;\n      } else if (cArg != null) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (NodeUtil.getFunctionBody(fnNode)\n                    .getFirstChild() instanceof NodeUtil.DynamicTypeCheckGuard) {\n            Node guard = NodeUtil.getFunctionBody(fnNode).getFirstChild();\n            Node guardExpression = guard.getOnlyChild();\n            if (guardExpression.getType() == Token.INSTANCEOF &&\n                cArg.getLastChild().matchesQualifiedName(\n                    guardExpression.getFirstChild())) {\n              // Skip this case.\n            } else {\n              return CanInlineResult.NO;\n            }\n          } else if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      } else {\n        break;\n      }\n    }\n\n    // For every call argument check for side-effects, even if there\n    // isn't a named parameter to match.\n    if (cArg != null) {\n      if (foundVarargsParam) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n        // The varargs parameter will pick up any remaining arguments, so we can exit.\n        break;\n      }\n\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  // If there are no arguments, but just a varargs parameter, then it can be\n  // inlined.\n  if (fnParam == null && cArg == null && foundVarargsParam) {\n    return CanInlineResult.YES;\n  }\n\n  // If there are more arguments than parameters, don't inline.\n  if (cArg != null || fnParam != null) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..e6d82ac1 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,91 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+  boolean hasSideEffects = false;\n+  if (block.hasChildren()) {\n+    Preconditions.checkState(block.hasOneChild());\n+    Node stmt = block.getFirstChild();\n+    if (stmt.isReturn()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+  }\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n+\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  boolean foundVarargsParam = false;\n+  while (cArg != null || fnParam != null) {\n+    if (fnParam != null) {\n+      if (fnParam.isVarArgs()) {\n+        foundVarargsParam = true;\n+      } else if (cArg != null) {\n+        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+          if (NodeUtil.getFunctionBody(fnNode)\n+                    .getFirstChild() instanceof NodeUtil.DynamicTypeCheckGuard) {\n+            Node guard = NodeUtil.getFunctionBody(fnNode).getFirstChild();\n+            Node guardExpression = guard.getOnlyChild();\n+            if (guardExpression.getType() == Token.INSTANCEOF &&\n+                cArg.getLastChild().matchesQualifiedName(\n+                    guardExpression.getFirstChild())) {\n+              // Skip this case.\n+            } else {\n+              return CanInlineResult.NO;\n+            }\n+          } else if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n         }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n+      } else {\n+        break;\n       }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+    // For every call argument check for side-effects, even if there\n+    // isn't a named parameter to match.\n+    if (cArg != null) {\n+      if (foundVarargsParam) {\n+        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        // The varargs parameter will pick up any remaining arguments, so we can exit.\n+        break;\n       }\n+\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+      cArg = cArg.getNext();\n     }\n+  }\n \n+  // If there are no arguments, but just a varargs parameter, then it can be\n+  // inlined.\n+  if (fnParam == null && cArg == null && foundVarargsParam) {\n     return CanInlineResult.YES;\n   }\n \n+  // If there are more arguments than parameters, don't inline.\n+  if (cArg != null || fnParam != null) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}