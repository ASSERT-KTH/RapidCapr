{
    "patch": "        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            } catch (RuntimeException e) {\n                // If a leap second occurred in the local timeline, we simply\n                // skip it and move to the next valid second. Note that we only\n                // adjust the local milliseconds accordingly. We do not take into\n                // account any discrepancy between the UTC and local timeline\n                // during a leap second, since a leap second can be represented as\n                // either two consecutive seconds or a single second that lasts\n                // two SI seconds.\n                if (text != null && e.getMessage().contains(\"Leap\")) {\n                    continue;\n                }\n                if (text != null) {\n                    throw new IllegalArgumentException\n                            (\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());\n                }\n                throw new IllegalArgumentException(e.getMessage());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..06b3db92 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            } catch (RuntimeException e) {\n+                // If a leap second occurred in the local timeline, we simply\n+                // skip it and move to the next valid second. Note that we only\n+                // adjust the local milliseconds accordingly. We do not take into\n+                // account any discrepancy between the UTC and local timeline\n+                // during a leap second, since a leap second can be represented as\n+                // either two consecutive seconds or a single second that lasts\n+                // two SI seconds.\n+                if (text != null && e.getMessage().contains(\"Leap\")) {\n+                    continue;\n+                }\n+                if (text != null) {\n+                    throw new IllegalArgumentException\n+                            (\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());\n+                }\n+                throw new IllegalArgumentException(e.getMessage());\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}