{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = selectChronology(instant.getChronology());\n    long instantMillis = instant.getMillis();\n    int defaultYear = chrono.year().get(instantMillis);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0 && bucket.getOffsetInteger() == null) {\n        try {\n            // Attempt to set the instant's current millisecond value to the computed value\n            instant.setMillis(bucket.computeMillis(false, text));\n        } catch (IllegalArgumentException e) {\n            // Adjust the instant's millisecond value using the computed offset and chrono\n            int parsedOffset = bucket.getOffsetInteger(defaultYear);\n            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n            instant.setChronology(chrono);\n            instant.setMillis(bucket.computeMillis(false, text));\n        }\n\n        // Set the instant's chronology, if different from the current chronology\n        if (instant.getChronology() != chrono) {\n            instant.setChronology(chrono);\n        }\n        // Set the instant's time zone, if one has been provided\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    } else {\n        // If an offset has been parsed, adjust the chronology according to the offset\n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger(defaultYear);\n            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n        } else if (bucket.getZone() != null) {\n            // Otherwise, use the bucket's zone to adjust the chronology\n            chrono = chrono.withZone(bucket.getZone());\n        }\n\n        try {\n            // Attempt to set the instant's current millisecond value to the computed value\n            instant.setMillis(bucket.computeMillis(false));\n        } catch (IllegalArgumentException e) {\n            // If an offset or zone has been parsed, adjust the instant's millisecond value\n            if (bucket.getOffsetInteger() != null || bucket.getZone() != null) {\n                instant.setChronology(chrono);\n                instant.setMillis(bucket.computeMillis(false, text));\n            } else {\n                throw e;\n            }\n        }\n\n        // Set the instant's chronology, if different from the current chronology\n        if (instant.getChronology() != chrono) {\n            instant.setChronology(chrono);\n        }\n        // Set the instant's time zone, if one has been provided\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..3c5f78cc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,74 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = selectChronology(instant.getChronology());\n+    long instantMillis = instant.getMillis();\n+    int defaultYear = chrono.year().get(instantMillis);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0 && bucket.getOffsetInteger() == null) {\n+        try {\n+            // Attempt to set the instant's current millisecond value to the computed value\n+            instant.setMillis(bucket.computeMillis(false, text));\n+        } catch (IllegalArgumentException e) {\n+            // Adjust the instant's millisecond value using the computed offset and chrono\n+            int parsedOffset = bucket.getOffsetInteger(defaultYear);\n+            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+            instant.setChronology(chrono);\n+            instant.setMillis(bucket.computeMillis(false, text));\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+\n+        // Set the instant's chronology, if different from the current chronology\n+        if (instant.getChronology() != chrono) {\n+            instant.setChronology(chrono);\n+        }\n+        // Set the instant's time zone, if one has been provided\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+    } else {\n+        // If an offset has been parsed, adjust the chronology according to the offset\n+        if (bucket.getOffsetInteger() != null) {\n+            int parsedOffset = bucket.getOffsetInteger(defaultYear);\n+            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n         } else if (bucket.getZone() != null) {\n+            // Otherwise, use the bucket's zone to adjust the chronology\n             chrono = chrono.withZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n+\n+        try {\n+            // Attempt to set the instant's current millisecond value to the computed value\n+            instant.setMillis(bucket.computeMillis(false));\n+        } catch (IllegalArgumentException e) {\n+            // If an offset or zone has been parsed, adjust the instant's millisecond value\n+            if (bucket.getOffsetInteger() != null || bucket.getZone() != null) {\n+                instant.setChronology(chrono);\n+                instant.setMillis(bucket.computeMillis(false, text));\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        // Set the instant's chronology, if different from the current chronology\n+        if (instant.getChronology() != chrono) {\n+            instant.setChronology(chrono);\n+        }\n+        // Set the instant's time zone, if one has been provided\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: method getOffsetInteger in class DateTimeParserBucket cannot be applied to given types;",
    "test_result": "ERROR"
}