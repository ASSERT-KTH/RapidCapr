{
    "patch": "        try {\n            int hexDigits = 0;\n            boolean isHexadecimal = false;\n            char[] charArray = val.toCharArray();\n            int i = ((charArray[0] == '-') ? 1 : 0);\n            if (charArray[i] == '0' && charArray.length > i + 1) {\n                isHexadecimal = (charArray[i + 1] == 'x' || charArray[i + 1] == 'X');\n                hexDigits = (isHexadecimal ? 1 : 0);\n            }\n            for (; i < charArray.length; i++) {\n                char c = charArray[i];\n                if (Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {\n                    if (hexDigits > 0 || c != '0') { // non-zero leading digit in a shift-extracted hex value\n                        hexDigits++;\n                    }\n                    if (isHexadecimal && hexDigits > 8) { // integer type overflow can occur here\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                } else if ((i == (charArray.length - 1) && (c == 'd' || c == 'D' || c == 'f' || c == 'F'))\n                        || (c == '.' || c == 'e' || c == 'E' || c == '+'\n                                || (c == '-' && i > 0 && (charArray[i - 1] == 'e' || charArray[i - 1] == 'E')))) {\n                    break;\n                } else {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n            }\n            if (i >= charArray.length) {\n                // All characters parsed.\n                if (isHexadecimal) {\n                    return createInteger(val);\n                }\n                if (hexDigits < 10) { // must be all decimal digits, and doesn't start with 0x/0X\n                    return createInteger(val);\n                }\n                if (hexDigits < 19) { // must be long if shift-extracted hex value has 11-18 digits\n                    return createLong(val);\n                }\n                // else BigInteger already overflows\n            }\n        } catch (NumberFormatException nfe) {\n            // empty catch\n        }\n        return createBigDecimal(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..be202106 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,49 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        try {\n+            int hexDigits = 0;\n+            boolean isHexadecimal = false;\n+            char[] charArray = val.toCharArray();\n+            int i = ((charArray[0] == '-') ? 1 : 0);\n+            if (charArray[i] == '0' && charArray.length > i + 1) {\n+                isHexadecimal = (charArray[i + 1] == 'x' || charArray[i + 1] == 'X');\n+                hexDigits = (isHexadecimal ? 1 : 0);\n+            }\n+            for (; i < charArray.length; i++) {\n+                char c = charArray[i];\n+                if (Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {\n+                    if (hexDigits > 0 || c != '0') { // non-zero leading digit in a shift-extracted hex value\n+                        hexDigits++;\n+                    }\n+                    if (isHexadecimal && hexDigits > 8) { // integer type overflow can occur here\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n+                    }\n+                } else if ((i == (charArray.length - 1) && (c == 'd' || c == 'D' || c == 'f' || c == 'F'))\n+                        || (c == '.' || c == 'e' || c == 'E' || c == '+'\n+                                || (c == '-' && i > 0 && (charArray[i - 1] == 'e' || charArray[i - 1] == 'E')))) {\n+                    break;\n+                } else {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+            }\n+            if (i >= charArray.length) {\n+                // All characters parsed.\n+                if (isHexadecimal) {\n+                    return createInteger(val);\n+                }\n+                if (hexDigits < 10) { // must be all decimal digits, and doesn't start with 0x/0X\n+                    return createInteger(val);\n+                }\n+                if (hexDigits < 19) { // must be long if shift-extracted hex value has 11-18 digits\n+                    return createLong(val);\n+                }\n+                // else BigInteger already overflows\n+            }\n+        } catch (NumberFormatException nfe) {\n+            // empty catch\n+        }\n+        return createBigDecimal(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}