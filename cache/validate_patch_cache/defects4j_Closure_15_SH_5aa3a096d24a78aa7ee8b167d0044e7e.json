{
    "patch": "if (n.isDispatch()) {\n  switch (n.getToken()) {\n    case EXPRESSION:\n    case RETURN:\n      return apply(n.getFirstChild());\n    case IF:\n    case WHILE:\n    case DO:\n    case FOR:\n    case FOR_IN:\n    case SWITCH:\n    case CASE:\n    case DEFAULT:\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n          return true;\n        }\n      }\n      return false;\n    case HOOK:\n      return apply(n.getSecondChild()) || apply(n.getLastChild());\n    default:\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..2500c848 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,31 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isDispatch()) {\n+  switch (n.getToken()) {\n+    case EXPRESSION:\n+    case RETURN:\n+      return apply(n.getFirstChild());\n+    case IF:\n+    case WHILE:\n+    case DO:\n+    case FOR:\n+    case FOR_IN:\n+    case SWITCH:\n+    case CASE:\n+    case DEFAULT:\n+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    case HOOK:\n+      return apply(n.getSecondChild()) || apply(n.getLastChild());\n+    default:\n+      break;\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}