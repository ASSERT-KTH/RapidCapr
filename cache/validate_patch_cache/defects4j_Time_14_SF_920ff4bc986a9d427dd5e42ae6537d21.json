{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int year = iChronology.year().get(instant);\n        int month = iChronology.monthOfYear().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        boolean isLeapYear = iChronology.isLeapYear(year);\n        while (valueToAdd != 0) {\n            int monthsToAdd = valueToAdd > 0 ? 1 : -1;\n            int newYear = year;\n            int newMonth = month + monthsToAdd;\n            if (newMonth < 1 || newMonth > 12) {\n                newYear += newMonth / 12;\n                newMonth = ((newMonth % 12) + 12) % 12;\n            }\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n            int newDay = Math.min(day, maxDayOfMonth);\n            if (isLeapYear && newMonth == 2 && newDay == 29) {\n                // If year is a leap year and day of month would be February 29th, adjust to February 28th\n                newDay = 28;\n            }\n            instant = iChronology.monthOfYear().set(iChronology.dayOfMonth().set(iChronology.year().set(instant, newYear), newMonth), newDay);\n            valueToAdd += valueToAdd > 0 ? -1 : 1;\n            year = newYear;\n            month = newMonth;\n            day = newDay;\n            isLeapYear = iChronology.isLeapYear(year);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..61e998c1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int year = iChronology.year().get(instant);\n+        int month = iChronology.monthOfYear().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        boolean isLeapYear = iChronology.isLeapYear(year);\n+        while (valueToAdd != 0) {\n+            int monthsToAdd = valueToAdd > 0 ? 1 : -1;\n+            int newYear = year;\n+            int newMonth = month + monthsToAdd;\n+            if (newMonth < 1 || newMonth > 12) {\n+                newYear += newMonth / 12;\n+                newMonth = ((newMonth % 12) + 12) % 12;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n+            int newDay = Math.min(day, maxDayOfMonth);\n+            if (isLeapYear && newMonth == 2 && newDay == 29) {\n+                // If year is a leap year and day of month would be February 29th, adjust to February 28th\n+                newDay = 28;\n+            }\n+            instant = iChronology.monthOfYear().set(iChronology.dayOfMonth().set(iChronology.year().set(instant, newYear), newMonth), newDay);\n+            valueToAdd += valueToAdd > 0 ? -1 : 1;\n+            year = newYear;\n+            month = newMonth;\n+            day = newDay;\n+            isLeapYear = iChronology.isLeapYear(year);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for getMaximumValue(int,int)",
    "test_result": "ERROR"
}