{
    "patch": "        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        if (oldMockHandler == null)\n            throw new IllegalArgumentException(\"Object \" + mock + \" is not a mock.\");\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        ((MockingProgress) ReflectionTestUtils.getField(org.mockito.internal.util.MockUtil.getMockitoMethodProxy(mock), \"mockHandler\")).setMockHandler(newMockHandler);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..15df199f8 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,14 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        if (oldMockHandler == null)\n+            throw new IllegalArgumentException(\"Object \" + mock + \" is not a mock.\");\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        ((MockingProgress) ReflectionTestUtils.getField(org.mockito.internal.util.MockUtil.getMockitoMethodProxy(mock), \"mockHandler\")).setMockHandler(newMockHandler);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: variable oldMockHandler is already defined in method <T>resetMock(T)",
    "test_result": "ERROR"
}