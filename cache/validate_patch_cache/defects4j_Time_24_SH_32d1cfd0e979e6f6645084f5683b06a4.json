{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        DurationField durationField = savedField.iField.getDurationField();\n        long currentValue = savedField.iField.get(millis);\n        int newValue = savedField.iValue;\n        while (newValue < durationField.getMinimumValue() || newValue > durationField.getMaximumValue()) {\n            boolean isLenient = savedField.iField.isLenient();\n            if (!isLenient && text != null) {\n                String fieldName = savedField.iField.getType().getName();\n                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text\n                        + \"\\\": Value \" + newValue + \" for \" + fieldName\n                        + \" field is not supported\");\n            }\n            if (newValue < durationField.getMinimumValue()) {\n                newValue = durationField.getMaximumValue();\n                if (isLenient) {\n                    savedFields[i].iValue = newValue;\n                } else {\n                    continue;\n                }\n            } else if (newValue > durationField.getMaximumValue()) {\n                newValue = durationField.getMinimumValue();\n                if (isLenient) {\n                    savedFields[i].iValue = newValue;\n                } else {\n                    continue;\n                }\n            }\n            int delta = newValue - savedField.iField.get(millis);\n            long newMillis = savedField.iField.add(millis, delta);\n            if ((millis < 0 && newMillis > 0) || (millis > 0 && newMillis < 0)) {\n                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n            }\n            millis = newMillis;\n            savedFields = iSavedFields;\n        }\n        if (newValue != currentValue) {\n            long newMillis = savedField.iField.set(millis, newValue);\n            if ((millis < 0 && newMillis > 0) || (millis > 0 && newMillis < 0)) {\n                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n            }\n            millis = newMillis;\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5309ba93 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,57 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        DurationField durationField = savedField.iField.getDurationField();\n+        long currentValue = savedField.iField.get(millis);\n+        int newValue = savedField.iValue;\n+        while (newValue < durationField.getMinimumValue() || newValue > durationField.getMaximumValue()) {\n+            boolean isLenient = savedField.iField.isLenient();\n+            if (!isLenient && text != null) {\n+                String fieldName = savedField.iField.getType().getName();\n+                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text\n+                        + \"\\\": Value \" + newValue + \" for \" + fieldName\n+                        + \" field is not supported\");\n+            }\n+            if (newValue < durationField.getMinimumValue()) {\n+                newValue = durationField.getMaximumValue();\n+                if (isLenient) {\n+                    savedFields[i].iValue = newValue;\n+                } else {\n+                    continue;\n+                }\n+            } else if (newValue > durationField.getMaximumValue()) {\n+                newValue = durationField.getMinimumValue();\n+                if (isLenient) {\n+                    savedFields[i].iValue = newValue;\n+                } else {\n+                    continue;\n+                }\n+            }\n+            int delta = newValue - savedField.iField.get(millis);\n+            long newMillis = savedField.iField.add(millis, delta);\n+            if ((millis < 0 && newMillis > 0) || (millis > 0 && newMillis < 0)) {\n+                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+            }\n+            millis = newMillis;\n+            savedFields = iSavedFields;\n+        }\n+        if (newValue != currentValue) {\n+            long newMillis = savedField.iField.set(millis, newValue);\n+            if ((millis < 0 && newMillis > 0) || (millis > 0 && newMillis < 0)) {\n+                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+            }\n+            millis = newMillis;\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}