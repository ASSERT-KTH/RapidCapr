{
    "patch": "                if (offsetLocal > offsetAdjusted) {\n                    // we need to ensure that time is always after the DST gap\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                } else if (offsetLocal < offsetAdjusted) {\n                    // we need to ensure that time is always after the DST overlap\n                    long nextLocal = previousTransition(instantAdjusted);\n                    long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal == instantAdjusted) {\n                        nextLocal = previousTransition(nextLocal - 1);\n                    }\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3147c189 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetLocal > offsetAdjusted) {\n+                    // we need to ensure that time is always after the DST gap\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                } else if (offsetLocal < offsetAdjusted) {\n+                    // we need to ensure that time is always after the DST overlap\n+                    long nextLocal = previousTransition(instantAdjusted);\n+                    long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal == instantAdjusted) {\n+                        nextLocal = previousTransition(nextLocal - 1);\n+                    }\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}