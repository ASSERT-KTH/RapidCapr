{
    "patch": "public class Example {\n    public static <T> ReturnValue<T> invoke(Method method, Object instance, Object[] args) throws Throwable {\n        ReturnValue<T> returnValue = new ReturnValue<>();\n\n        try {\n            if (instance == null) {\n                instance = method.getDeclaringClass();\n            }\n\n            Object result = method.invoke(instance, args);\n            returnValue.setValue((T) result);\n        } catch (InvocationTargetException e) {\n            returnValue.setException(e.getCause());\n        } catch (Throwable t) {\n            returnValue.setException(t);\n        }\n\n        return returnValue;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..97467ed11 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,26 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class Example {\n+    public static <T> ReturnValue<T> invoke(Method method, Object instance, Object[] args) throws Throwable {\n+        ReturnValue<T> returnValue = new ReturnValue<>();\n+\n+        try {\n+            if (instance == null) {\n+                instance = method.getDeclaringClass();\n+            }\n+\n+            Object result = method.invoke(instance, args);\n+            returnValue.setValue((T) result);\n+        } catch (InvocationTargetException e) {\n+            returnValue.setException(e.getCause());\n+        } catch (Throwable t) {\n+            returnValue.setException(t);\n+        }\n+\n+        return returnValue;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}