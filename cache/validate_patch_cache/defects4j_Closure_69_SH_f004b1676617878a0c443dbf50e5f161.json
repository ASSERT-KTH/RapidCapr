{
    "patch": "      String methodName = null;\n      if (child.isGetProp()) {\n        methodName = child.getLastChild().getString();\n      } else if (child.isName()) {\n        methodName = child.getString();\n      }\n\n      if (methodName != null && functionType.getTypeOfThis() != null) {\n        // Validate that Object.prototype methods are not called with the wrong\n        // type of 'this'.\n        ObjectType typeOfThis = ObjectType.cast(functionType.getTypeOfThis());\n        if (typeOfThis.getOwnPropertyJSType(methodName) != null) {\n          JSType thisJSType = getJSType(child.getFirstChild()).restrictByNotNullOrUndefined();\n          if (!typeOfThis.isInstanceTypeOf(thisJSType)) {\n            report(t, child, CALLBACK_APPLIED_WRONG_THIS_TYPE, methodName);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..53e22c58 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      String methodName = null;\n+      if (child.isGetProp()) {\n+        methodName = child.getLastChild().getString();\n+      } else if (child.isName()) {\n+        methodName = child.getString();\n+      }\n+\n+      if (methodName != null && functionType.getTypeOfThis() != null) {\n+        // Validate that Object.prototype methods are not called with the wrong\n+        // type of 'this'.\n+        ObjectType typeOfThis = ObjectType.cast(functionType.getTypeOfThis());\n+        if (typeOfThis.getOwnPropertyJSType(methodName) != null) {\n+          JSType thisJSType = getJSType(child.getFirstChild()).restrictByNotNullOrUndefined();\n+          if (!typeOfThis.isInstanceTypeOf(thisJSType)) {\n+            report(t, child, CALLBACK_APPLIED_WRONG_THIS_TYPE, methodName);\n+          }\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}