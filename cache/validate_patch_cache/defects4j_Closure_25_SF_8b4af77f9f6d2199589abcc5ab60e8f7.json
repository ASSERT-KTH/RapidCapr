{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else if (constructorType.isConstructor()) {\n        type = constructorType.toMaybeFunctionType().getInstanceType();\n        if (type.hasNonScalar()) {\n          // If we are creating a non-scalar object, we need to add it to the type registry\n          ObjectType instanceType = ObjectType.cast(type);\n          // Get a dummy name for the type\n          String typeName = \"type\" + typeRegistry_.size();\n          instanceTypeRegistry_.put(typeName, instanceType);\n          typeRegistry_.put(typeName, instanceType.getConstructor());\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..37ea46c8 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,8 +1032,7 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1042,16 +1041,15 @@ class TypeInference\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+      } else if (constructorType.isConstructor()) {\n+        type = constructorType.toMaybeFunctionType().getInstanceType();\n+        if (type.hasNonScalar()) {\n+          // If we are creating a non-scalar object, we need to add it to the type registry\n+          ObjectType instanceType = ObjectType.cast(type);\n+          // Get a dummy name for the type\n+          String typeName = \"type\" + typeRegistry_.size();\n+          instanceTypeRegistry_.put(typeName, instanceType);\n+          typeRegistry_.put(typeName, instanceType.getConstructor());\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}