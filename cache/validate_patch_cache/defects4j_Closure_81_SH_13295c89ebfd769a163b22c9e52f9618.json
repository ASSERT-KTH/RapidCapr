{
    "patch": "if (name == null) {\n  name = new Name(functionNode.getLineno(), \"\");\n}\nNode node = newNode(Token.FUNCTION);\nNode newName = transform(name);\nif (newName.getType() == Token.EMPTY) {\n  newName = new Node(Token.NAME);\n  newName.setString(\"\");\n  newName.setLineno(functionNode.getLineno());\n  newName.setCharno(functionNode.getRelativeFunctionIndex());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..6df9be9b 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,17 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+if (name == null) {\n+  name = new Name(functionNode.getLineno(), \"\");\n+}\n+Node node = newNode(Token.FUNCTION);\n+Node newName = transform(name);\n+if (newName.getType() == Token.EMPTY) {\n+  newName = new Node(Token.NAME);\n+  newName.setString(\"\");\n+  newName.setLineno(functionNode.getLineno());\n+  newName.setCharno(functionNode.getRelativeFunctionIndex());\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}