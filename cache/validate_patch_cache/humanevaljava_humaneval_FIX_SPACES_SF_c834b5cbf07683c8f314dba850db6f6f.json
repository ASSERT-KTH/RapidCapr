{
    "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int start = 0;\n    int end = 0;\n    boolean in_word = false;\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        if (c == ' ' && in_word) {\n            end++;\n        } else if (c != ' ' && !in_word) {\n            in_word = true;\n            start = i;\n            end = i+1;\n        } else if (c != ' ' && in_word) {\n            end++;\n        }\n        if (i == text.length()-1 && in_word) {\n            String word = text.substring(start, end);\n            if (word.length() > 2) {\n                new_text += \"-\" + word;\n            } else {\n                for (int j = start; j < end; j++) {\n                    new_text += (text.charAt(j) == ' ') ? \"_\" : text.charAt(j);\n                }\n            }\n        } else if (c == ' ' && in_word) {\n            String word = text.substring(start, end);\n            if (word.length() > 2) {\n                new_text += \"-\" + word;\n            } else {\n                for (int j = start; j < end; j++) {\n                    new_text += (text.charAt(j) == ' ') ? \"_\" : text.charAt(j);\n                }\n            }\n            new_text += \" \";\n            in_word = false;\n        }\n    }\n    return new_text;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIX_SPACES.java b/src/main/java/humaneval/buggy/FIX_SPACES.java\nindex 2f27898..3e85a05 100644\n--- a/src/main/java/humaneval/buggy/FIX_SPACES.java\n+++ b/src/main/java/humaneval/buggy/FIX_SPACES.java\n@@ -10,29 +10,44 @@ fix_spaces(\" Example 2\") == \"_Example_2\"\n fix_spaces(\" Example   3\") == \"_Example-3\" */\n \n public class FIX_SPACES {\n-    public static String fix_spaces(String text) {\n-        String new_text = \"\";\n-        int i = 0;\n-        int start = 0;\n-        int end = 0;\n-        while (i < text.length()) {\n-            if (text.charAt(i) == ' ') end += 1;\n-            else {\n-                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n-                else if (end - start > 0) {\n-                    for (int j = start; j < end; j += 1) {\n-                        new_text += \"_\";\n-                    }\n-                    new_text += text.substring(i, i + 1);\n-                } else {\n-                    new_text += text.substring(i, i + 1);\n+public static String fix_spaces(String text) {\n+    String new_text = \"\";\n+    int start = 0;\n+    int end = 0;\n+    boolean in_word = false;\n+    for (int i = 0; i < text.length(); i++) {\n+        char c = text.charAt(i);\n+        if (c == ' ' && in_word) {\n+            end++;\n+        } else if (c != ' ' && !in_word) {\n+            in_word = true;\n+            start = i;\n+            end = i+1;\n+        } else if (c != ' ' && in_word) {\n+            end++;\n+        }\n+        if (i == text.length()-1 && in_word) {\n+            String word = text.substring(start, end);\n+            if (word.length() > 2) {\n+                new_text += \"-\" + word;\n+            } else {\n+                for (int j = start; j < end; j++) {\n+                    new_text += (text.charAt(j) == ' ') ? \"_\" : text.charAt(j);\n+                }\n+            }\n+        } else if (c == ' ' && in_word) {\n+            String word = text.substring(start, end);\n+            if (word.length() > 2) {\n+                new_text += \"-\" + word;\n+            } else {\n+                for (int j = start; j < end; j++) {\n+                    new_text += (text.charAt(j) == ' ') ? \"_\" : text.charAt(j);\n                 }\n-                start = i + 1;\n-                end = i + 1;\n             }\n-            i += 1;\n+            new_text += \" \";\n+            in_word = false;\n         }\n-\n-        return new_text;\n     }\n+    return new_text;\n+}\n }",
    "result_reason": "   TEST_FIX_SPACES.test_0:9 expected:<[-]Example> but was:<[]Example>",
    "test_result": "FAIL"
}