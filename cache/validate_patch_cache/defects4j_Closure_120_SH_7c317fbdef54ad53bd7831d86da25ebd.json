{
    "patch": "        if (block.isFunction) {\n          // look for reassignments to the variable in the function\n          int index = references.indexOf(ref);\n          for (int i = index + 1; i < references.size(); i++) {\n            Reference maybeReassign = references.get(i);\n            if (maybeReassign.isAssignmentToName(ref.getSymbol())) {\n              return false;\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7bbf9426 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // look for reassignments to the variable in the function\n+          int index = references.indexOf(ref);\n+          for (int i = index + 1; i < references.size(); i++) {\n+            Reference maybeReassign = references.get(i);\n+            if (maybeReassign.isAssignmentToName(ref.getSymbol())) {\n+              return false;\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}