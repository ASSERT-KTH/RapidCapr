{
    "patch": "        boolean needUpdateMillis = false;\n        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException ifve) {\n                if (text != null) {\n                    ifve.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                throw ifve;\n            } catch (RuntimeException ex) {\n                if (text != null) {\n                    StringBuilder sb = new StringBuilder();\n                    sb.append(\"Cannot parse \\\"\");\n                    sb.append(text);\n                    sb.append(\"\\\": \");\n                    sb.append(ex.getMessage());\n                    throw new IllegalArgumentException(sb.toString(), ex);\n                }\n                throw ex;\n            }\n            if (millis != savedFields[i].getMillis()) {\n                // If any of the fields set the millis, we need to preserve it\n                needUpdateMillis = true;\n            }\n        }\n        // Only perform offset adjustment or time zone transition check if the millis value was not updated by any of the fields\n        if (!needUpdateMillis) {\n            if (iZone == null) {\n                millis -= iOffset;\n            } else {\n                int offset = iZone.getOffsetFromLocal(millis);\n                millis -= offset;\n                if (offset != iZone.getOffset(millis)) {\n                    String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                    if (text != null) {\n                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                    }\n                    throw new IllegalArgumentException(message);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1dd4094f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean needUpdateMillis = false;\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException ifve) {\n+                if (text != null) {\n+                    ifve.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                throw ifve;\n+            } catch (RuntimeException ex) {\n+                if (text != null) {\n+                    StringBuilder sb = new StringBuilder();\n+                    sb.append(\"Cannot parse \\\"\");\n+                    sb.append(text);\n+                    sb.append(\"\\\": \");\n+                    sb.append(ex.getMessage());\n+                    throw new IllegalArgumentException(sb.toString(), ex);\n+                }\n+                throw ex;\n+            }\n+            if (millis != savedFields[i].getMillis()) {\n+                // If any of the fields set the millis, we need to preserve it\n+                needUpdateMillis = true;\n+            }\n+        }\n+        // Only perform offset adjustment or time zone transition check if the millis value was not updated by any of the fields\n+        if (!needUpdateMillis) {\n+            if (iZone == null) {\n+                millis -= iOffset;\n+            } else {\n+                int offset = iZone.getOffsetFromLocal(millis);\n+                millis -= offset;\n+                if (offset != iZone.getOffset(millis)) {\n+                    String message =\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                    if (text != null) {\n+                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                    }\n+                    throw new IllegalArgumentException(message);\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}