{
    "patch": "if (name.props != null && name.globalSets == 1 && name.localSets == 0) {\n    // {@code name} meets condition (b).\n    if (name.aliasingGets > 0) {\n      // {@code name} also meets condition (c).\n      // Attempt to inline all local aliases of {@code name}.\n      List<Ref> refs = new ArrayList<>(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n    if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n      workList.addAll(name.props);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..8df70d92 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,31 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.props != null && name.globalSets == 1 && name.localSets == 0) {\n+    // {@code name} meets condition (b).\n+    if (name.aliasingGets > 0) {\n+      // {@code name} also meets condition (c).\n+      // Attempt to inline all local aliases of {@code name}.\n+      List<Ref> refs = new ArrayList<>(name.getRefs());\n+      for (Ref ref : refs) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n+          }\n+        }\n+      }\n+    }\n+\n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n+    if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n+      workList.addAll(name.props);\n+    }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}