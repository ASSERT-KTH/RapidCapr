{
    "patch": "I apologize for providing an incorrect fix. Please replace the infill location with the following hunk:\n```\nNode function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction(), function.toStringTree());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  LinkedHashSet<String> referencedParams = new LinkedHashSet<>();\n  Node child = function.getLastChild();\n  // Start from the last child, either a block node, or the last parameter,\n  // and work backwards. Remove any params that are unreferenced, and add\n  // any referenced params to the set.\n  while (true) {\n    if (child.isParamList()) {\n      for (Node param = child.getFirstChild();\n          param != null;\n          param = param.getNext()) {\n        referencedParams.add(param.getString());\n      }\n      break;\n    } else if (child.isBlock()) {\n      for (Node stmt = child.getFirstChild();\n          stmt != null;\n          stmt = stmt.getNext()) {\n        if (!stmt.isExprResult()) {\n          break;\n        }\n        Node expr = stmt.getFirstChild();\n        if (!expr.isAssign()) {\n          break;\n        }\n        Node lhs = expr.getFirstChild();\n        if (lhs.matchesQualifiedName(\"$jscomp.scope\")) {\n          Node objLiteral = expr.getLastChild().getLastChild();\n          for (Node key = objLiteral.getFirstChild(); key != null; key = key.getNext()) {\n            if (key.isStringKey()) {\n              referencedParams.add(key.getString());\n            } else {\n              break;\n            }\n          }\n          break;\n        }\n      }\n      break;\n    } else {\n      // If this is not a block or param list, then it must be function body\n      // code that should be skipped.\n      child = child.getLastChild();\n    }\n  }\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    String argName = lastArg.getString();\n    if (!referencedParams.contains(argName)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1e90d494 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,77 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+I apologize for providing an incorrect fix. Please replace the infill location with the following hunk:\n+```\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction(), function.toStringTree());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  LinkedHashSet<String> referencedParams = new LinkedHashSet<>();\n+  Node child = function.getLastChild();\n+  // Start from the last child, either a block node, or the last parameter,\n+  // and work backwards. Remove any params that are unreferenced, and add\n+  // any referenced params to the set.\n+  while (true) {\n+    if (child.isParamList()) {\n+      for (Node param = child.getFirstChild();\n+          param != null;\n+          param = param.getNext()) {\n+        referencedParams.add(param.getString());\n+      }\n+      break;\n+    } else if (child.isBlock()) {\n+      for (Node stmt = child.getFirstChild();\n+          stmt != null;\n+          stmt = stmt.getNext()) {\n+        if (!stmt.isExprResult()) {\n+          break;\n+        }\n+        Node expr = stmt.getFirstChild();\n+        if (!expr.isAssign()) {\n+          break;\n+        }\n+        Node lhs = expr.getFirstChild();\n+        if (lhs.matchesQualifiedName(\"$jscomp.scope\")) {\n+          Node objLiteral = expr.getLastChild().getLastChild();\n+          for (Node key = objLiteral.getFirstChild(); key != null; key = key.getNext()) {\n+            if (key.isStringKey()) {\n+              referencedParams.add(key.getString());\n+            } else {\n+              break;\n+            }\n+          }\n+          break;\n+        }\n+      }\n+      break;\n+    } else {\n+      // If this is not a block or param list, then it must be function body\n+      // code that should be skipped.\n+      child = child.getLastChild();\n+    }\n+  }\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    String argName = lastArg.getString();\n+    if (!referencedParams.contains(argName)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n+```\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}