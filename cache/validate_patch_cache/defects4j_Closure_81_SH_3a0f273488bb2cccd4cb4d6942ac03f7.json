{
    "patch": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      if (nType != Token.EXPR_RESULT && nType != Token.EXPR_VOID) {\n        return false;\n      }\n\n      Node firstChild = n.getFirstChild();\n      return firstChild != null && firstChild.getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(firstChild.getString());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..f90227ae 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,18 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    private boolean isDirective(Node n) {\n+      if (n == null) return false;\n+\n+      int nType = n.getType();\n+      if (nType != Token.EXPR_RESULT && nType != Token.EXPR_VOID) {\n+        return false;\n+      }\n+\n+      Node firstChild = n.getFirstChild();\n+      return firstChild != null && firstChild.getType() == Token.STRING &&\n+          ALLOWED_DIRECTIVES.contains(firstChild.getString());\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}