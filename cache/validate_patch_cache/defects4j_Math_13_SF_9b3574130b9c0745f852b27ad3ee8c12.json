{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    for (double eigenvalue : realEigenvalues) {\n        if (eigenvalue <= 0.0) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n    }\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8c1fb035b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    for (double eigenvalue : realEigenvalues) {\n+        if (eigenvalue <= 0.0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n     }\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}