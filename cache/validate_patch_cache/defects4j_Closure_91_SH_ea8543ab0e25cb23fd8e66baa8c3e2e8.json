{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      Node grandParent = parent.getParent();\n      if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n        Node target = grandParent.getFirstChild();\n        if (NodeUtil.isGet(target) &&\n            target.getLastChild().getString().equals(\"prototype\")) {\n          Node grandParentExpr = grandParent.getParent();\n          int grandParentType = grandParentExpr.getType();\n          if (grandParentExpr != null &&\n              (grandParentType == Token.ASSIGN ||\n               grandParentType == Token.VAR)) {\n            Node lhs = grandParentExpr.getFirstChild();\n            boolean lhsIsNameOrThis = NodeUtil.isName(lhs) ||\n                                      lhs.getType() == Token.THIS;\n            if (NodeUtil.isGet(lhs) && lhsIsNameOrThis) {\n              String baseName = lhs.getFirstChild().getQualifiedName();\n              if (baseName.equals(\"Object\") || baseName.equals(\"Function\")) {\n                return false;\n              }\n            } else if (lhsIsNameOrThis &&\n                       !grandParentExpr.hasChildren()) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..6ec1b43f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,32 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node grandParent = parent.getParent();\n+      if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+        Node target = grandParent.getFirstChild();\n+        if (NodeUtil.isGet(target) &&\n+            target.getLastChild().getString().equals(\"prototype\")) {\n+          Node grandParentExpr = grandParent.getParent();\n+          int grandParentType = grandParentExpr.getType();\n+          if (grandParentExpr != null &&\n+              (grandParentType == Token.ASSIGN ||\n+               grandParentType == Token.VAR)) {\n+            Node lhs = grandParentExpr.getFirstChild();\n+            boolean lhsIsNameOrThis = NodeUtil.isName(lhs) ||\n+                                      lhs.getType() == Token.THIS;\n+            if (NodeUtil.isGet(lhs) && lhsIsNameOrThis) {\n+              String baseName = lhs.getFirstChild().getQualifiedName();\n+              if (baseName.equals(\"Object\") || baseName.equals(\"Function\")) {\n+                return false;\n+              }\n+            } else if (lhsIsNameOrThis &&\n+                       !grandParentExpr.hasChildren()) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}