{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n    long[] A = new long[maxIterations + 1];\n    double[] r = new double[maxIterations + 1];\n    long[] p = new long[maxIterations + 1];\n    long[] q = new long[maxIterations + 1];\n\n    int n = 0;\n    boolean found = false;\n\n    while (n < maxIterations && !found) {\n        double floorValue = FastMath.floor(value);\n        if (floorValue > Integer.MAX_VALUE) {\n            throw new FractionConversionException(value, floorValue, 1);\n        }\n\n        long a0 = (long) floorValue;\n        r[n] = value - a0;\n        p[n] = a0;\n        q[n] = 1;\n        A[n] = a0;\n\n        for (int i = 1; i <= n; i++) {\n            double denom = r[i - 1];\n            if (FastMath.abs(denom) < 1e-10) {\n                throw new FractionConversionException(value, p[i - 1], q[i - 1]);\n            }\n            r[i] = 1 / denom;\n            long a = (long) FastMath.floor(r[i]);\n            A[i] = a;\n            p[i] = a * p[i - 1] + p[i - 2];\n            q[i] = a * q[i - 1] + q[i - 2];\n\n            double approx = (double) p[i] / (double) q[i];\n            if (FastMath.abs(approx - value) < epsilon && q[i] <= maxDenominator) {\n                this.numerator = (int) p[i];\n                this.denominator = (int) q[i];\n                found = true;\n                break;\n            }\n        }\n        n++;\n    }\n\n    if (!found) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..2f4e7717d 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,70 +172,53 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n+    long[] A = new long[maxIterations + 1];\n+    double[] r = new double[maxIterations + 1];\n+    long[] p = new long[maxIterations + 1];\n+    long[] q = new long[maxIterations + 1];\n+\n+    int n = 0;\n+    boolean found = false;\n+\n+    while (n < maxIterations && !found) {\n+        double floorValue = FastMath.floor(value);\n+        if (floorValue > Integer.MAX_VALUE) {\n+            throw new FractionConversionException(value, floorValue, 1);\n         }\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n-        }\n+        long a0 = (long) floorValue;\n+        r[n] = value - a0;\n+        p[n] = a0;\n+        q[n] = 1;\n+        A[n] = a0;\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+        for (int i = 1; i <= n; i++) {\n+            double denom = r[i - 1];\n+            if (FastMath.abs(denom) < 1e-10) {\n+                throw new FractionConversionException(value, p[i - 1], q[i - 1]);\n             }\n-\n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n+            r[i] = 1 / denom;\n+            long a = (long) FastMath.floor(r[i]);\n+            A[i] = a;\n+            p[i] = a * p[i - 1] + p[i - 2];\n+            q[i] = a * q[i - 1] + q[i - 2];\n+\n+            double approx = (double) p[i] / (double) q[i];\n+            if (FastMath.abs(approx - value) < epsilon && q[i] <= maxDenominator) {\n+                this.numerator = (int) p[i];\n+                this.denominator = (int) q[i];\n+                found = true;\n+                break;\n             }\n-        } while (!stop);\n-\n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n         }\n+        n++;\n+    }\n \n+    if (!found) {\n+        throw new FractionConversionException(value, maxIterations);\n     }\n+}\n \n     /**\n      * Create a fraction from an int.",
    "result_reason": "error: no suitable constructor found for FractionConversionException(double,double,int)",
    "test_result": "ERROR"
}