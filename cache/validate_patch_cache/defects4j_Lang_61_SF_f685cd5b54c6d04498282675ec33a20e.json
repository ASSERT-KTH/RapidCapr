{
    "patch": "public int indexOf(String str, int startIndex) {\n    if (str == null) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen > size || startIndex < 0) {\n        return -1;\n    }\n    startIndex = Math.min(startIndex, size - strLen);\n    if (strLen == 0) {\n        return startIndex;\n    }\n    char[] thisBuf = buffer;\n    int maxIndex = size - strLen;\n\n    outer:\n    for (int i = startIndex; i <= maxIndex; i++) {\n        if (thisBuf[i] != str.charAt(0)) {\n            continue;\n        }\n\n        for (int j = 1; j < strLen; j++) {\n            if (thisBuf[i + j] != str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n\n    return -1;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 0e889892..9740b091 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1757,35 +1757,38 @@ public class StrBuilder implements Cloneable {\n      * @param startIndex  the index to start at, invalid index rounded to edge\n      * @return the first index of the string, or -1 if not found\n      */\n-    public int indexOf(String str, int startIndex) {\n-        startIndex = (startIndex < 0 ? 0 : startIndex);\n-        if (str == null || startIndex >= size) {\n-            return -1;\n-        }\n-        int strLen = str.length();\n-        if (strLen == 1) {\n-            return indexOf(str.charAt(0), startIndex);\n-        }\n-        if (strLen == 0) {\n-            return startIndex;\n-        }\n-        if (strLen > size) {\n-            return -1;\n+public int indexOf(String str, int startIndex) {\n+    if (str == null) {\n+        return -1;\n+    }\n+    int strLen = str.length();\n+    if (strLen > size || startIndex < 0) {\n+        return -1;\n+    }\n+    startIndex = Math.min(startIndex, size - strLen);\n+    if (strLen == 0) {\n+        return startIndex;\n+    }\n+    char[] thisBuf = buffer;\n+    int maxIndex = size - strLen;\n+\n+    outer:\n+    for (int i = startIndex; i <= maxIndex; i++) {\n+        if (thisBuf[i] != str.charAt(0)) {\n+            continue;\n         }\n-        char[] thisBuf = buffer;\n-        int len = thisBuf.length - strLen;\n-        outer:\n-        for (int i = startIndex; i < len; i++) {\n-            for (int j = 0; j < strLen; j++) {\n-                if (str.charAt(j) != thisBuf[i + j]) {\n-                    continue outer;\n-                }\n+\n+        for (int j = 1; j < strLen; j++) {\n+            if (thisBuf[i + j] != str.charAt(j)) {\n+                continue outer;\n             }\n-            return i;\n         }\n-        return -1;\n+        return i;\n     }\n \n+    return -1;\n+}\n+\n     /**\n      * Searches the string builder using the matcher to find the first match.\n      * <p>",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<-1>",
    "test_result": "FAIL"
}