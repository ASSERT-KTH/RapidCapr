{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularMatrixException;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvalues = dec.getRealEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n\n    // Compute the Schur decomposition of the eigenvalues matrix\n    final DecompositionSolver solver = new EigenDecomposition(MatrixUtils.createRealMatrix(eigenvalues.getData()));\n    final RealMatrix t = solver.getT();\n\n    // Compute the matrix square root\n    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n    for (int i = 0; i < t.getRowDimension(); i++) {\n        double sqrtValue = Math.sqrt(FastMath.abs(t.getEntry(i, i)));\n        if (t.getEntry(i, i) < 0) {\n            sqrtValue = -sqrtValue;\n        }\n        sqrtEigenvalues.setEntry(i, i, sqrtValue);\n    }\n    final RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8bf82544d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,33 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.DecompositionSolver;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SingularMatrixException;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+\n+    // Compute the Schur decomposition of the eigenvalues matrix\n+    final DecompositionSolver solver = new EigenDecomposition(MatrixUtils.createRealMatrix(eigenvalues.getData()));\n+    final RealMatrix t = solver.getT();\n+\n+    // Compute the matrix square root\n+    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n+    for (int i = 0; i < t.getRowDimension(); i++) {\n+        double sqrtValue = Math.sqrt(FastMath.abs(t.getEntry(i, i)));\n+        if (t.getEntry(i, i) < 0) {\n+            sqrtValue = -sqrtValue;\n+        }\n+        sqrtEigenvalues.setEntry(i, i, sqrtValue);\n     }\n+    final RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+\n+    return sqrt;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}