{
    "patch": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n    if (hoursOffset < DateTimeConstants.MINUTES_PER_HOUR && hoursOffset > -DateTimeConstants.MINUTES_PER_HOUR\n            && minutesOffset < DateTimeConstants.MINUTES_PER_HOUR && minutesOffset > -DateTimeConstants.MINUTES_PER_HOUR) {\n        int offsetMillis = (hoursOffset * DateTimeConstants.MILLIS_PER_HOUR) + (minutesOffset * DateTimeConstants.MILLIS_PER_MINUTE);\n        if (DateTimeZone.getAvailableIDs(offsetMillis).size() > 0) {\n            return forOffsetMillis(offsetMillis);\n        }\n    }\n    throw new IllegalArgumentException(\"Invalid offset: \" + hoursOffset + \":\" + minutesOffset);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..88a5615e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -269,30 +269,16 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n-        if (hoursOffset == 0 && minutesOffset == 0) {\n-            return DateTimeZone.UTC;\n-        }\n-        if (hoursOffset < -23 || hoursOffset > 23) {\n-            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n-        }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n-        }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n-            }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n-            throw new IllegalArgumentException(\"Offset is too large\");\n+public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n+    if (hoursOffset < DateTimeConstants.MINUTES_PER_HOUR && hoursOffset > -DateTimeConstants.MINUTES_PER_HOUR\n+            && minutesOffset < DateTimeConstants.MINUTES_PER_HOUR && minutesOffset > -DateTimeConstants.MINUTES_PER_HOUR) {\n+        int offsetMillis = (hoursOffset * DateTimeConstants.MILLIS_PER_HOUR) + (minutesOffset * DateTimeConstants.MILLIS_PER_MINUTE);\n+        if (DateTimeZone.getAvailableIDs(offsetMillis).size() > 0) {\n+            return forOffsetMillis(offsetMillis);\n         }\n-        return forOffsetMillis(offset);\n     }\n+    throw new IllegalArgumentException(\"Invalid offset: \" + hoursOffset + \":\" + minutesOffset);\n+}\n \n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.",
    "result_reason": "error: method getAvailableIDs in class DateTimeZone cannot be applied to given types;",
    "test_result": "ERROR"
}