{
    "patch": "  private void findCalledFunctions(Node node, Set<String> changed) {\n    if (changed == null) {\n        throw new IllegalArgumentException(\"Set of changed functions cannot be null\");\n    }\n    if (node == null) {\n          return;\n    }\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n        Node child = node.getFirstChild();\n        if (child == null) {\n          return;\n        }\n        if (child.getType() == Token.NAME) {\n          changed.add(child.getString());\n        }\n        while ((child = child.getNext()) != null) {\n            findCalledFunctions(child, changed);\n        }\n    } else {\n        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n            findCalledFunctions(c, changed);\n        }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..c966f162 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,19 +770,29 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n+  private void findCalledFunctions(Node node, Set<String> changed) {\n+    if (changed == null) {\n+        throw new IllegalArgumentException(\"Set of changed functions cannot be null\");\n+    }\n+    if (node == null) {\n+          return;\n+    }\n     // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n-    }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+        Node child = node.getFirstChild();\n+        if (child == null) {\n+          return;\n+        }\n+        if (child.getType() == Token.NAME) {\n+          changed.add(child.getString());\n+        }\n+        while ((child = child.getNext()) != null) {\n+            findCalledFunctions(child, changed);\n+        }\n+    } else {\n+        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+            findCalledFunctions(c, changed);\n+        }\n     }\n   }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}