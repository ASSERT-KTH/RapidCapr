{
    "patch": "      if (block.isFunction) {\n        // if it's assigned in a function different from the one where it's declared, it's not safe\n        // to assume it's only assigned once because we can't check if it's assigned again in that\n        // other function.\n        if (ref.getSymbol().getEnclosingScope() != block.getScope()) {\n          return false;\n        }\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..891abad7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // if it's assigned in a function different from the one where it's declared, it's not safe\n+        // to assume it's only assigned once because we can't check if it's assigned again in that\n+        // other function.\n+        if (ref.getSymbol().getEnclosingScope() != block.getScope()) {\n+          return false;\n+        }\n+        break;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}