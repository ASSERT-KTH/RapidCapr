{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // Check the initial parameter\n    if (str == null || lower >= str.length()) {\n        return str;\n    }\n\n    // Check if the upper value is -1 or greater than the length of the string\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n\n    // If the upper limit is less than the lower limit, set the upper limit to the lower limit\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // Initialize a StringBuilder to store the abbreviated string\n    StringBuilder sb = new StringBuilder();\n\n    // Find the index of the first space after the lower limit\n    int index = StringUtils.indexOf(str, \" \", lower);\n\n    // If no space is found after the lower limit, append the abbreviated string to the StringBuilder\n    if (index == -1 || index >= upper) {\n        sb.append(str, 0, Math.min(upper, str.length()));\n        if (sb.length() < str.length() && appendToEnd != null) { // If the abbreviated string is shorter than the input string and appendToEnd is not null, append it to the StringBuilder\n            sb.append(appendToEnd);\n        }\n    } else { // If the first space is within the limits, append the abbreviated string to the StringBuilder\n        sb.append(str, 0, index);\n        if (appendToEnd != null) { // If appendToEnd is not null, append it to the StringBuilder\n            sb.append(appendToEnd);\n        }\n    }\n\n    // Return the abbreviated string\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..58b9e114 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,43 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    // Check the initial parameter\n+    if (str == null || lower >= str.length()) {\n+        return str;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    // Check if the upper value is -1 or greater than the length of the string\n+    if (upper == -1 || upper > str.length()) {\n+        upper = str.length();\n+    }\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+    // If the upper limit is less than the lower limit, set the upper limit to the lower limit\n+    if (upper < lower) {\n+        upper = lower;\n+    }\n+\n+    // Initialize a StringBuilder to store the abbreviated string\n+    StringBuilder sb = new StringBuilder();\n+\n+    // Find the index of the first space after the lower limit\n+    int index = StringUtils.indexOf(str, \" \", lower);\n+\n+    // If no space is found after the lower limit, append the abbreviated string to the StringBuilder\n+    if (index == -1 || index >= upper) {\n+        sb.append(str, 0, Math.min(upper, str.length()));\n+        if (sb.length() < str.length() && appendToEnd != null) { // If the abbreviated string is shorter than the input string and appendToEnd is not null, append it to the StringBuilder\n+            sb.append(appendToEnd);\n+        }\n+    } else { // If the first space is within the limits, append the abbreviated string to the StringBuilder\n+        sb.append(str, 0, index);\n+        if (appendToEnd != null) { // If appendToEnd is not null, append it to the StringBuilder\n+            sb.append(appendToEnd);\n         }\n-        return result.toString();\n     }\n \n+    // Return the abbreviated string\n+    return sb.toString();\n+}\n+\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}