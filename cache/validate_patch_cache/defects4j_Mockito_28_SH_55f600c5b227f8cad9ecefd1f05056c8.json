{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n\nif (candidate != null) {\n    try {\n        Class<?> targetType = field.getType();\n        while (targetType != null) {\n            if (targetType.isInstance(candidate)) {\n                field.setAccessible(true);\n                field.set(fieldInstance, candidate);\n                if (targetType != candidate.getClass()) {\n                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n                }\n                return;\n            }\n            targetType = targetType.getSuperclass();\n        }\n        injectMockCandidate(field.getType(), mocks, fieldInstance);\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Could not set field value\", e);\n    }\n} else {\n    injectMockCandidate(field.getType(), mocks, fieldInstance);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0b0552525 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,32 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+\n+if (candidate != null) {\n+    try {\n+        Class<?> targetType = field.getType();\n+        while (targetType != null) {\n+            if (targetType.isInstance(candidate)) {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, candidate);\n+                if (targetType != candidate.getClass()) {\n+                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n+                }\n+                return;\n+            }\n+            targetType = targetType.getSuperclass();\n+        }\n+        injectMockCandidate(field.getType(), mocks, fieldInstance);\n+    } catch (IllegalAccessException e) {\n+        throw new IllegalStateException(\"Could not set field value\", e);\n+    }\n+} else {\n+    injectMockCandidate(field.getType(), mocks, fieldInstance);\n+}\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Can not set org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest$Dependency field org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest$Tested.dependency to org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1",
    "test_result": "FAIL"
}