{
    "patch": "      boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n\n        // find the position of the left parenthesis, using the last parameter\n        int lparenCharno = 0;\n        List<AstNode> params = functionNode.getParams();\n        if (!params.isEmpty()) {\n          AstNode lastParam = params.get(params.size() - 1);\n          lparenCharno = lastParam.getPosition() + lastParam.getLength();\n        } else {\n          lparenCharno =\n              functionNode.getAbsolutePosition() + functionNode.getBody().getLp();\n        }\n        newName.setCharno(position2charno(lparenCharno));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      lp.setLineno(newName.getLineno());\n      int lparenCharno = functionNode.getLp() + functionNode.getBody().getPosition();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..dcbaaa17 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,41 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        newName.setLineno(functionNode.getLineno());\n+\n+        // find the position of the left parenthesis, using the last parameter\n+        int lparenCharno = 0;\n+        List<AstNode> params = functionNode.getParams();\n+        if (!params.isEmpty()) {\n+          AstNode lastParam = params.get(params.size() - 1);\n+          lparenCharno = lastParam.getPosition() + lastParam.getLength();\n+        } else {\n+          lparenCharno =\n+              functionNode.getAbsolutePosition() + functionNode.getBody().getLp();\n+        }\n+        newName.setCharno(position2charno(lparenCharno));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      // The left paren's complicated because it's not represented by an\n+      // AstNode, so there's nothing that has the actual line number that it\n+      // appeared on.  We know the paren has to appear on the same line as the\n+      // function name (or else a semicolon will be inserted.)  If there's no\n+      // function name, assume the paren was on the same line as the function.\n+      lp.setLineno(newName.getLineno());\n+      int lparenCharno = functionNode.getLp() + functionNode.getBody().getPosition();\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable isUnnamedFunction is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}