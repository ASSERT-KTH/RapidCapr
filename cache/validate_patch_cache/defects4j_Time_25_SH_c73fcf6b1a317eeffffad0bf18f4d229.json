{
    "patch": "            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                int diff = offsetAdjusted - offsetLocal;\n                if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n                        (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR)\n                {\n                    return offsetLocal;\n                }\n            } else {\n                int offsetNext;\n                int diff;\n                if (offsetLocal > offsetAdjusted) {\n                    offsetNext = getOffset(nextAdjusted - 1);\n                    if (offsetLocal <= offsetNext) {\n                        return offsetLocal;\n                    }\n                    diff = offsetAdjusted - offsetNext;\n                } else {\n                    offsetNext = getOffset(nextLocal);\n                    if (offsetNext < offsetAdjusted) {\n                        return offsetLocal;\n                    }\n                    diff = offsetNext - offsetLocal;\n                }\n                if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetLocal;\n                }\n                if ((nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetNext;\n                }\n                if (offsetLocal > offsetAdjusted) {\n                    return offsetNext;\n                } else {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b67c7298 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,40 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                int diff = offsetAdjusted - offsetLocal;\n+                if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n+                        (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR)\n+                {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                int offsetNext;\n+                int diff;\n+                if (offsetLocal > offsetAdjusted) {\n+                    offsetNext = getOffset(nextAdjusted - 1);\n+                    if (offsetLocal <= offsetNext) {\n+                        return offsetLocal;\n+                    }\n+                    diff = offsetAdjusted - offsetNext;\n+                } else {\n+                    offsetNext = getOffset(nextLocal);\n+                    if (offsetNext < offsetAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    diff = offsetNext - offsetLocal;\n+                }\n+                if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetLocal;\n+                }\n+                if ((nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetNext;\n+                }\n+                if (offsetLocal > offsetAdjusted) {\n+                    return offsetNext;\n+                } else {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}