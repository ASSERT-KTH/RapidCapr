{
    "patch": "        int i = 0;\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        x1 = min;\n        x2 = initial;\n        x3 = max;\n        y1 = f.value(x1);\n        y2 = f.value(x2);\n        y3 = f.value(x3);\n        while (++i <= maximalIterationCount) {\n            if (sign(y1) == sign(y2)) {\n                x0 = x1;\n                y0 = y1;\n                x1 = x2;\n                y1 = y2;\n                x2 = x3;\n                y2 = y3;\n                x3 = x0;\n                y3 = y0;\n            }\n            if (sign(y2) == sign(y3)) {\n                x0 = x1;\n                y0 = y1;\n                x1 = x3;\n                y1 = y3;\n                x3 = x2;\n                y3 = y2;\n                x2 = x0;\n                y2 = y0;\n            }\n            double delta = (x2 - x1) * y1 / (y1 - y2);\n            double x = x2 - delta;\n            double y = f.value(x);\n            if (Math.abs(y) <= functionValueAccuracy) {\n                setResult(x, i);\n                return result;\n            }\n            if (y * y2 < 0) {\n                x1 = x2;\n                y1 = y2;\n                x2 = x;\n                y2 = y;\n            } else {\n                x3 = x2;\n                y3 = y2;\n                x2 = x;\n                y2 = y;\n            }\n            if (Math.abs(x3 - x1) <= absoluteAccuracy || Math.abs(y) <= functionValueAccuracy) {\n                setResult(x, i);\n                return result;\n            }\n        }\n\n        throw new MaxIterationsExceededException(maximalIterationCount);\n    }\n    \n    private int sign(final double v) {\n        return v < 0 ? -1 : 1;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..74c4290f2 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,65 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        int i = 0;\n+        double x0, y0, x1, y1, x2, y2, x3, y3;\n+        x1 = min;\n+        x2 = initial;\n+        x3 = max;\n+        y1 = f.value(x1);\n+        y2 = f.value(x2);\n+        y3 = f.value(x3);\n+        while (++i <= maximalIterationCount) {\n+            if (sign(y1) == sign(y2)) {\n+                x0 = x1;\n+                y0 = y1;\n+                x1 = x2;\n+                y1 = y2;\n+                x2 = x3;\n+                y2 = y3;\n+                x3 = x0;\n+                y3 = y0;\n+            }\n+            if (sign(y2) == sign(y3)) {\n+                x0 = x1;\n+                y0 = y1;\n+                x1 = x3;\n+                y1 = y3;\n+                x3 = x2;\n+                y3 = y2;\n+                x2 = x0;\n+                y2 = y0;\n+            }\n+            double delta = (x2 - x1) * y1 / (y1 - y2);\n+            double x = x2 - delta;\n+            double y = f.value(x);\n+            if (Math.abs(y) <= functionValueAccuracy) {\n+                setResult(x, i);\n+                return result;\n+            }\n+            if (y * y2 < 0) {\n+                x1 = x2;\n+                y1 = y2;\n+                x2 = x;\n+                y2 = y;\n+            } else {\n+                x3 = x2;\n+                y3 = y2;\n+                x2 = x;\n+                y2 = y;\n+            }\n+            if (Math.abs(x3 - x1) <= absoluteAccuracy || Math.abs(y) <= functionValueAccuracy) {\n+                setResult(x, i);\n+                return result;\n+            }\n+        }\n+\n+        throw new MaxIterationsExceededException(maximalIterationCount);\n+    }\n+    \n+    private int sign(final double v) {\n+        return v < 0 ? -1 : 1;\n+    }\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}