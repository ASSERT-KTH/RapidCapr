{
    "patch": "public static double getTypedPercent(String js) {\n    int len = js.length();\n    int total = 0;\n    int typed = 0;\n    boolean inQuote = false;\n    for (int i = 0; i < len; i++) {\n        char c = js.charAt(i);\n        if (c == '\\'') {\n            inQuote = !inQuote;\n        } else if (!inQuote && c != ' ') {\n            total++;\n            if (c != '?') {\n                typed++;\n            }\n        }\n    }\n    if (total == 0) {\n        return 100.0;\n    }\n    return (double) typed / total * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..4eaf1272 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int len = js.length();\n+    int total = 0;\n+    int typed = 0;\n+    boolean inQuote = false;\n+    for (int i = 0; i < len; i++) {\n+        char c = js.charAt(i);\n+        if (c == '\\'') {\n+            inQuote = !inQuote;\n+        } else if (!inQuote && c != ' ') {\n+            total++;\n+            if (c != '?') {\n+                typed++;\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 100.0;\n+    }\n+    return (double) typed / total * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}