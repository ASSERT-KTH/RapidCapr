{
    "patch": "boolean isOverride = parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == getprop;\nif (isOverride && !t.inGlobalScope()) {\n  // Check whether the property actually exists on the prototype chain.\n  ObjectType parentType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  if (parentType != null) {\n    String propertyName = getprop.getLastChild().getString();\n    FunctionType ctor = parentType.getConstructor();\n    if (ctor != null) {\n      JSType instanceType = ctor.getThisType().restrictByNotNullOrUndefined();\n      ObjectType instanceObject = ObjectType.cast(instanceType);\n      if (instanceObject != null &&\n          instanceObject.getImplicitPrototype().\n              hasOwnProperty(propertyName)) {\n        isOverride = false;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..c368b914 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,26 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = parent.getType() == Token.ASSIGN &&\n+                     parent.getFirstChild() == getprop;\n+if (isOverride && !t.inGlobalScope()) {\n+  // Check whether the property actually exists on the prototype chain.\n+  ObjectType parentType =\n+      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+  if (parentType != null) {\n+    String propertyName = getprop.getLastChild().getString();\n+    FunctionType ctor = parentType.getConstructor();\n+    if (ctor != null) {\n+      JSType instanceType = ctor.getThisType().restrictByNotNullOrUndefined();\n+      ObjectType instanceObject = ObjectType.cast(instanceType);\n+      if (instanceObject != null &&\n+          instanceObject.getImplicitPrototype().\n+              hasOwnProperty(propertyName)) {\n+        isOverride = false;\n+      }\n+    }\n+  }\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}