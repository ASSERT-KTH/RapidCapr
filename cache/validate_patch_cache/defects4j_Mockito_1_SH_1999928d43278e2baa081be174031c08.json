{
    "patch": "            // If varargs length is 0, we can't capture anything\n            if (indexOfVararg < 0) {\n                return;\n            }\n            Object varargs = invocation.getArgumentAt(indexOfVararg, Object[].class);\n            for (int i = 0; i < ((Object[]) varargs).length; i++) {\n                if (i < matchers.size()) {\n                    Matcher m = matchers.get(i);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[i]);\n                    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..9c65e7c8b 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,17 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            // If varargs length is 0, we can't capture anything\n+            if (indexOfVararg < 0) {\n+                return;\n+            }\n+            Object varargs = invocation.getArgumentAt(indexOfVararg, Object[].class);\n+            for (int i = 0; i < ((Object[]) varargs).length; i++) {\n+                if (i < matchers.size()) {\n+                    Matcher m = matchers.get(i);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[i]);\n+                    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}