{
    "patch": "    private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n        Node assignedValue = ref.getAssignedValue();\n        if (assignedValue == null || assignedValue.getType() != Token.OBJECTLIT) {\n            return;\n        }\n\n        blacklistVarReferencesInTree(assignedValue, v.scope);\n\n        List<Node> assignments = new ArrayList<>();\n        Set<String> allVars = new LinkedHashSet<>(varmap.keySet());\n\n        for (Node key = assignedValue.getFirstChild(); key != null; key = key.getNext()) {\n            String var = key.getString();\n            Node value = key.removeFirstChild();\n            assignments.add(\n                new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value));\n            allVars.remove(var);\n        }\n\n        for (String var : allVars) {\n            assignments.add(\n                new Node(\n                    Token.ASSIGN,\n                    Node.newString(Token.NAME, varmap.get(var)),\n                    NodeUtil.newUndefinedNode(null)));\n        }\n\n        Node comma = new Node(Token.COMMA);\n        Node replacement = null;\n        for (int i = assignments.size() - 1; i >= 0; i--) {\n            Node assign = assignments.get(i);\n            if (replacement == null) {\n                replacement = new Node(Token.EXPR_RESULT, assign);\n            } else {\n                replacement = new Node(Token.COMMA, assign, replacement);\n            }\n        }\n        // include a final true value to ensure that the resulting expression evaluates to true if used in an expression statement\n        replacement = new Node(Token.COMMA, replacement, Node.TRUE);\n\n        Node parent = ref.getParent();\n        if (parent.getType() == Token.VAR) {\n            parent.getParent().replaceChild(parent, NodeUtil.newExpr(replacement));\n        } else {\n            parent.getParent().replaceChild(parent, replacement);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..67012df1 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,64 +300,51 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n+    private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n+        Node assignedValue = ref.getAssignedValue();\n+        if (assignedValue == null || assignedValue.getType() != Token.OBJECTLIT) {\n+            return;\n+        }\n \n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n+        blacklistVarReferencesInTree(assignedValue, v.scope);\n \n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n+        List<Node> assignments = new ArrayList<>();\n+        Set<String> allVars = new LinkedHashSet<>(varmap.keySet());\n+\n+        for (Node key = assignedValue.getFirstChild(); key != null; key = key.getNext()) {\n+            String var = key.getString();\n+            Node value = key.removeFirstChild();\n+            assignments.add(\n+                new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value));\n+            allVars.remove(var);\n         }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n \n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n+        for (String var : allVars) {\n+            assignments.add(\n+                new Node(\n+                    Token.ASSIGN,\n+                    Node.newString(Token.NAME, varmap.get(var)),\n+                    NodeUtil.newUndefinedNode(null)));\n+        }\n \n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n-    }\n+        Node comma = new Node(Token.COMMA);\n+        Node replacement = null;\n+        for (int i = assignments.size() - 1; i >= 0; i--) {\n+            Node assign = assignments.get(i);\n+            if (replacement == null) {\n+                replacement = new Node(Token.EXPR_RESULT, assign);\n+            } else {\n+                replacement = new Node(Token.COMMA, assign, replacement);\n+            }\n+        }\n+        // include a final true value to ensure that the resulting expression evaluates to true if used in an expression statement\n+        replacement = new Node(Token.COMMA, replacement, Node.TRUE);\n+\n+        Node parent = ref.getParent();\n+        if (parent.getType() == Token.VAR) {\n+            parent.getParent().replaceChild(parent, NodeUtil.newExpr(replacement));\n+        } else {\n+            parent.getParent().replaceChild(parent, replacement);\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}