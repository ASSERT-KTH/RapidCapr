{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double eps = 1.0e-12;\n\n    double v1x = v1.getX();\n    double v1y = v1.getY();\n    double v1z = v1.getZ();\n\n    double v2x = v2.getX();\n    double v2y = v2.getY();\n    double v2z = v2.getZ();\n\n    double v1SqNorm = v1x * v1x + v1y * v1y + v1z * v1z;\n    double v2SqNorm = v2x * v2x + v2y * v2y + v2z * v2z;\n\n    if (v1SqNorm == 0.0 || v2SqNorm == 0.0) {\n        return Vector3D.ZERO;\n    }\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double s1 = FastMath.sqrt(v1SqNorm);\n    double invs1 = 1.0 / s1;\n    v1x *= invs1;\n    v1y *= invs1;\n    v1z *= invs1;\n\n    double s2 = FastMath.sqrt(v2SqNorm);\n    double invs2 = 1.0 / s2;\n    v2x *= invs2;\n    v2y *= invs2;\n    v2z *= invs2;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n\n    double dotProduct = v1x * v2x + v1y * v2y + v1z * v2z;\n\n    double acb = s2 / (s1 + s2);\n    double v3x = (v1x - dotProduct * v2x) / (1 - dotProduct * acb);\n    double v3y = (v1y - dotProduct * v2y) / (1 - dotProduct * acb);\n    double v3z = (v1z - dotProduct * v2z) / (1 - dotProduct * acb);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    double crossx = v3y * v2z - v3z * v2y;\n    double crossy = v3z * v2x - v3x * v2z;\n    double crossz = v3x * v2y - v3y * v2x;\n\n    double norm = FastMath.sqrt(crossx * crossx + crossy * crossy + crossz * crossz);\n\n    if (norm == 0.0) {\n        return Vector3D.ZERO;\n    }\n\n    if (s1 < eps) {\n        return new Vector3D(crossx, crossy, crossz).scalarMultiply(s1);\n    } else if (s2 < eps) {\n        return new Vector3D(crossx, crossy, crossz).scalarMultiply(s2);\n    } else {\n        return new Vector3D(crossx, crossy, crossz);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..385ad4737 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,73 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    double eps = 1.0e-12;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    double v1x = v1.getX();\n+    double v1y = v1.getY();\n+    double v1z = v1.getZ();\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    double v2x = v2.getX();\n+    double v2y = v2.getY();\n+    double v2z = v2.getZ();\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double v1SqNorm = v1x * v1x + v1y * v1y + v1z * v1z;\n+    double v2SqNorm = v2x * v2x + v2y * v2y + v2z * v2z;\n \n+    if (v1SqNorm == 0.0 || v2SqNorm == 0.0) {\n+        return Vector3D.ZERO;\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double s1 = FastMath.sqrt(v1SqNorm);\n+    double invs1 = 1.0 / s1;\n+    v1x *= invs1;\n+    v1y *= invs1;\n+    v1z *= invs1;\n \n-  }\n+    double s2 = FastMath.sqrt(v2SqNorm);\n+    double invs2 = 1.0 / s2;\n+    v2x *= invs2;\n+    v2y *= invs2;\n+    v2z *= invs2;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+\n+    double dotProduct = v1x * v2x + v1y * v2y + v1z * v2z;\n+\n+    double acb = s2 / (s1 + s2);\n+    double v3x = (v1x - dotProduct * v2x) / (1 - dotProduct * acb);\n+    double v3y = (v1y - dotProduct * v2y) / (1 - dotProduct * acb);\n+    double v3z = (v1z - dotProduct * v2z) / (1 - dotProduct * acb);\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    double crossx = v3y * v2z - v3z * v2y;\n+    double crossy = v3z * v2x - v3x * v2z;\n+    double crossz = v3x * v2y - v3y * v2x;\n+\n+    double norm = FastMath.sqrt(crossx * crossx + crossy * crossy + crossz * crossz);\n+\n+    if (norm == 0.0) {\n+        return Vector3D.ZERO;\n+    }\n+\n+    if (s1 < eps) {\n+        return new Vector3D(crossx, crossy, crossz).scalarMultiply(s1);\n+    } else if (s2 < eps) {\n+        return new Vector3D(crossx, crossy, crossz).scalarMultiply(s2);\n+    } else {\n+        return new Vector3D(crossx, crossy, crossz);\n+    }\n+\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.28355034868890494>",
    "test_result": "FAIL"
}