{
    "patch": "        int millis = getMillis();  // convert any seconds and larger units to millis\n        int seconds = getSeconds();\n        int minutes = getMinutes();\n        int hours = getHours();\n        int daysAsMillis = getDays() * DateTimeConstants.MILLIS_PER_DAY;\n        int weeksAsMillis = getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n        int totalMillis = FieldUtils.safeAdd(millis, seconds * DateTimeConstants.MILLIS_PER_SECOND);\n        totalMillis = FieldUtils.safeAdd(totalMillis, minutes * DateTimeConstants.MILLIS_PER_MINUTE);\n        totalMillis = FieldUtils.safeAdd(totalMillis, hours * DateTimeConstants.MILLIS_PER_HOUR);\n        totalMillis = FieldUtils.safeAdd(totalMillis, daysAsMillis);\n        totalMillis = FieldUtils.safeAdd(totalMillis, weeksAsMillis);\n        ISOChronology chrono = ISOChronology.getInstanceUTC();\n        long normalizedDuration = chrono.getDurationField().getDuration(totalMillis);\n        MutablePeriod mutPeriod = new MutablePeriod(normalizedDuration, type);\n        mutPeriod.add(totalMillis - normalizedDuration);\n        mutPeriod.setYears(getYears())\n                .setMonths(getMonths());\n        return mutPeriod.toPeriod();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..1bb2842d 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,23 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+        int millis = getMillis();  // convert any seconds and larger units to millis\n+        int seconds = getSeconds();\n+        int minutes = getMinutes();\n+        int hours = getHours();\n+        int daysAsMillis = getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+        int weeksAsMillis = getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+        int totalMillis = FieldUtils.safeAdd(millis, seconds * DateTimeConstants.MILLIS_PER_SECOND);\n+        totalMillis = FieldUtils.safeAdd(totalMillis, minutes * DateTimeConstants.MILLIS_PER_MINUTE);\n+        totalMillis = FieldUtils.safeAdd(totalMillis, hours * DateTimeConstants.MILLIS_PER_HOUR);\n+        totalMillis = FieldUtils.safeAdd(totalMillis, daysAsMillis);\n+        totalMillis = FieldUtils.safeAdd(totalMillis, weeksAsMillis);\n+        ISOChronology chrono = ISOChronology.getInstanceUTC();\n+        long normalizedDuration = chrono.getDurationField().getDuration(totalMillis);\n+        MutablePeriod mutPeriod = new MutablePeriod(normalizedDuration, type);\n+        mutPeriod.add(totalMillis - normalizedDuration);\n+        mutPeriod.setYears(getYears())\n+                .setMonths(getMonths());\n+        return mutPeriod.toPeriod();\n \n }",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}