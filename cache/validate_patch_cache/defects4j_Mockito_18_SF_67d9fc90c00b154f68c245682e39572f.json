{
    "patch": "public static Map<Class<?>, Object> getAllReturnValues(Object target, Method... methods) {\n    Map<Class<?>, Object> returnValues = new HashMap<>();\n    for (Method method : methods) {\n        try {\n            Object returnValue = method.invoke(target);\n            returnValues.put(method.getReturnType(), returnValue);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            // ignore and continue\n        }\n    }\n    return returnValues;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e93728600 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Class<?>, Object> getAllReturnValues(Object target, Method... methods) {\n+    Map<Class<?>, Object> returnValues = new HashMap<>();\n+    for (Method method : methods) {\n+        try {\n+            Object returnValue = method.invoke(target);\n+            returnValues.put(method.getReturnType(), returnValue);\n+        } catch (IllegalAccessException | InvocationTargetException e) {\n+            // ignore and continue\n+        }\n+    }\n+    return returnValues;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}