{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long totalMillis = getMillis();\n    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    int totalMonths = result.getYears() * 12 + result.getMonths();\n\n    if (totalMonths != 0) {\n        // extract years and months from totalMonths\n        int years = totalMonths / 12;\n        int months = totalMonths % 12;\n\n        // create new period with extracted years and months\n        result = result.withYears(years).withMonths(months);\n\n        // normalize the period until no change, but limit to 20 iterations in case it doesn't converge\n        for (int i = 0; i < 20; i++) {\n            Period oldResult = result;\n            result = result.normalizedStandard();\n            if (result.getYears() == oldResult.getYears() && result.getMonths() == oldResult.getMonths()) {\n                break;\n            }\n        }\n    } else {\n        result = result.normalizedStandard();\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..bcd36306 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,40 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long totalMillis = getMillis();\n+    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n+\n+    int totalMonths = result.getYears() * 12 + result.getMonths();\n+\n+    if (totalMonths != 0) {\n+        // extract years and months from totalMonths\n+        int years = totalMonths / 12;\n+        int months = totalMonths % 12;\n+\n+        // create new period with extracted years and months\n+        result = result.withYears(years).withMonths(months);\n+\n+        // normalize the period until no change, but limit to 20 iterations in case it doesn't converge\n+        for (int i = 0; i < 20; i++) {\n+            Period oldResult = result;\n+            result = result.normalizedStandard();\n+            if (result.getYears() == oldResult.getYears() && result.getMonths() == oldResult.getMonths()) {\n+                break;\n             }\n         }\n-        return result;\n+    } else {\n+        result = result.normalizedStandard();\n     }\n \n+    return result;\n+}\n+\n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}