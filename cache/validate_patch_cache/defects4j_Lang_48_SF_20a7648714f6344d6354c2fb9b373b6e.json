{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        // The simple case, not an array, just test the element\n        isEquals = lhs.equals(rhs);\n    } else if (lhs.getClass() != rhs.getClass()) {\n        // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n        this.setEquals(false);\n    } else if (lhs instanceof long[]) {\n        // ... same as before\n    } else if (lhs instanceof int[]) {\n        // ... same as before\n    } else if (lhs instanceof short[]) {\n        // ... same as before\n    } else if (lhs instanceof char[]) {\n        // ... same as before\n    } else if (lhs instanceof byte[]) {\n        // ... same as before\n    } else if (lhs instanceof double[]) {\n        // ... same as before\n    } else if (lhs instanceof float[]) {\n        // ... same as before\n    } else if (lhs instanceof boolean[]) {\n        // ... same as before\n    } else {\n        // Not an array of primitives\n        // Check for circular reference\n        if (lhs == rhs) {\n            return this;\n        }\n        alreadyCompared.put(lhs, rhs);\n        alreadyCompared.put(rhs, lhs);\n        try {\n            Method equalsMethod = lhs.getClass().getMethod(\"equals\", Object.class);\n            isEquals = (Boolean) equalsMethod.invoke(lhs, rhs);\n        } catch (Exception e) {\n            isEquals = lhs.equals(rhs);\n        }\n        alreadyCompared.remove(lhs);\n        alreadyCompared.remove(rhs);\n    }\n    return this;\n}\n\nprivate Map<Object, Object> alreadyCompared = new IdentityHashMap<>();\n\npublic EqualsBuilder append(Object[] lhs, Object[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        this.setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; ++i) {\n        Object lhsElement = lhs[i];\n        Object rhsElement = rhs[i];\n        if (lhsElement == rhsElement) {\n            continue;\n        }\n        if (lhsElement == null || rhsElement == null) {\n            isEquals = false;\n            break;\n        }\n        // Check if the objects have been compared before\n        Object lhsPair = alreadyCompared.get(lhsElement);\n        if (lhsPair != null && lhsPair != rhsElement) {\n            isEquals = false;\n            break;\n        }\n        Object rhsPair = alreadyCompared.get(rhsElement);\n        if (rhsPair != null && rhsPair != lhsElement) {\n            isEquals = false;\n            break;\n        }\n        // Recursive call to append(Object, Object)\n        append(lhsElement, rhsElement);\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..d53e5065 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,104 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        // The simple case, not an array, just test the element\n+        isEquals = lhs.equals(rhs);\n+    } else if (lhs.getClass() != rhs.getClass()) {\n+        // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+        this.setEquals(false);\n+    } else if (lhs instanceof long[]) {\n+        // ... same as before\n+    } else if (lhs instanceof int[]) {\n+        // ... same as before\n+    } else if (lhs instanceof short[]) {\n+        // ... same as before\n+    } else if (lhs instanceof char[]) {\n+        // ... same as before\n+    } else if (lhs instanceof byte[]) {\n+        // ... same as before\n+    } else if (lhs instanceof double[]) {\n+        // ... same as before\n+    } else if (lhs instanceof float[]) {\n+        // ... same as before\n+    } else if (lhs instanceof boolean[]) {\n+        // ... same as before\n+    } else {\n+        // Not an array of primitives\n+        // Check for circular reference\n         if (lhs == rhs) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+        alreadyCompared.put(lhs, rhs);\n+        alreadyCompared.put(rhs, lhs);\n+        try {\n+            Method equalsMethod = lhs.getClass().getMethod(\"equals\", Object.class);\n+            isEquals = (Boolean) equalsMethod.invoke(lhs, rhs);\n+        } catch (Exception e) {\n+            isEquals = lhs.equals(rhs);\n         }\n+        alreadyCompared.remove(lhs);\n+        alreadyCompared.remove(rhs);\n+    }\n+    return this;\n+}\n+\n+private Map<Object, Object> alreadyCompared = new IdentityHashMap<>();\n+\n+public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n+    if (isEquals == false) {\n         return this;\n     }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; ++i) {\n+        Object lhsElement = lhs[i];\n+        Object rhsElement = rhs[i];\n+        if (lhsElement == rhsElement) {\n+            continue;\n+        }\n+        if (lhsElement == null || rhsElement == null) {\n+            isEquals = false;\n+            break;\n+        }\n+        // Check if the objects have been compared before\n+        Object lhsPair = alreadyCompared.get(lhsElement);\n+        if (lhsPair != null && lhsPair != rhsElement) {\n+            isEquals = false;\n+            break;\n+        }\n+        Object rhsPair = alreadyCompared.get(rhsElement);\n+        if (rhsPair != null && rhsPair != lhsElement) {\n+            isEquals = false;\n+            break;\n+        }\n+        // Recursive call to append(Object, Object)\n+        append(lhsElement, rhsElement);\n+    }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}