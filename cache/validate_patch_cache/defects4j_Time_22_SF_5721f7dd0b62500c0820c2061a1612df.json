{
    "patch": "    protected BasePeriod(long duration) {\n        super();\n        this.iDuration = duration;\n        // Convert duration to weeks\n        long remainder = setPeriod(DurationFieldType.weeks(), 0, duration);\n        // Convert remainder to days\n        remainder = setPeriod(DurationFieldType.days(), remainder, DateTimeConstants.MILLIS_PER_WEEK);\n        // Convert remainder to hours\n        remainder = setPeriod(DurationFieldType.hours(), remainder, DateTimeConstants.MILLIS_PER_DAY);\n        // Convert remainder to minutes\n        remainder = setPeriod(DurationFieldType.minutes(), remainder, DateTimeConstants.MILLIS_PER_HOUR);\n        // Convert remainder to seconds\n        remainder = setPeriod(DurationFieldType.seconds(), remainder, DateTimeConstants.MILLIS_PER_MINUTE);\n        // Convert remainder to millis\n        setPeriod(DurationFieldType.millis(), remainder, DateTimeConstants.MILLIS_PER_SECOND);\n    }\n    \n    private long setPeriod(DurationFieldType type, long duration, long divisor) {\n        if (duration >= divisor || duration <= -divisor) {\n            long value = duration / divisor;  // this will drop the remainder\n            value = value << 32 >> 32;  // convert to 32-bit signed int\n            iValues = ArrayUtils.add(iValues, new DurationField(type, value));\n            return duration - (value * divisor);\n        }\n        return duration;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..7a9065b5 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,8 +219,30 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        super();\n+        this.iDuration = duration;\n+        // Convert duration to weeks\n+        long remainder = setPeriod(DurationFieldType.weeks(), 0, duration);\n+        // Convert remainder to days\n+        remainder = setPeriod(DurationFieldType.days(), remainder, DateTimeConstants.MILLIS_PER_WEEK);\n+        // Convert remainder to hours\n+        remainder = setPeriod(DurationFieldType.hours(), remainder, DateTimeConstants.MILLIS_PER_DAY);\n+        // Convert remainder to minutes\n+        remainder = setPeriod(DurationFieldType.minutes(), remainder, DateTimeConstants.MILLIS_PER_HOUR);\n+        // Convert remainder to seconds\n+        remainder = setPeriod(DurationFieldType.seconds(), remainder, DateTimeConstants.MILLIS_PER_MINUTE);\n+        // Convert remainder to millis\n+        setPeriod(DurationFieldType.millis(), remainder, DateTimeConstants.MILLIS_PER_SECOND);\n+    }\n+    \n+    private long setPeriod(DurationFieldType type, long duration, long divisor) {\n+        if (duration >= divisor || duration <= -divisor) {\n+            long value = duration / divisor;  // this will drop the remainder\n+            value = value << 32 >> 32;  // convert to 32-bit signed int\n+            iValues = ArrayUtils.add(iValues, new DurationField(type, value));\n+            return duration - (value * divisor);\n+        }\n+        return duration;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}