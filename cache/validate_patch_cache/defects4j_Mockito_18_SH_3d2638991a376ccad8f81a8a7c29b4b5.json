{
    "patch": "public ReturnValue apply(Object mock, RecordedInvocation invocation, Object[] args) throws Throwable {\n    ReturnValue values = new ReturnValue();\n    \n    // Find method return value\n    for (RecordedCall call : invocation.getCalls()) {\n        if (call.getMethod().getReturnType() != void.class) {\n            values.returnValueFor(call.getMethod().getReturnType(), call.getResult());\n            break;\n        }\n    }\n    \n    // Find exceptions to throw\n    for (RecordedException exception : invocation.getExceptions()) {\n        if (exception.shouldThrowFor(args)) {\n            values.addException(exception.getExceptionInstance());\n        }\n    }\n    \n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}