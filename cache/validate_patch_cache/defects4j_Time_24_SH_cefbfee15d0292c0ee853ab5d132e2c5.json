{
    "patch": "} catch (IllegalFieldValueException e) {\n            if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DATE_OVERFLOW) {\n                throw e;\n            }\n\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n\n            if (e.getIllegalInstantException() == null ||\n                    (resetFields && e.getIllegalInstantException().getDateTime() != null &&\n                            compareLocal(fieldIndex(savedFields, e.getIllegalInstantException().getDateTime().getFieldType()), savedFields, count) == 0)) {\n                throw e;\n            }\n\n            DateTimeField field = e.getDateTimeFieldType().getField(iChrono);\n\n            if (compareReverse(field.getDurationField(), DurationFieldType.years().getField(iChrono)) >= 0) {\n                e.printStackTrace();\n                throw new IllegalFieldValueException(field, \"Value \" + e.getIllegalFieldValue() +\n                        \" for \" + field.getName() + \" is not supported: \" +\n                        \"it exceeds the maximum \" + field.getMaximumText(null, iLocale) + \" \" + field.getName(), e);\n            }\n            // convert the value to something in range\n            LocalDateTime dt = safeLocalDateTime(e.getDateTime(), millis);\n\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n\n            return computeMillis(resetFields, dt.toString());\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c7a78762 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+} catch (IllegalFieldValueException e) {\n+            if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DATE_OVERFLOW) {\n+                throw e;\n+            }\n+\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+\n+            if (e.getIllegalInstantException() == null ||\n+                    (resetFields && e.getIllegalInstantException().getDateTime() != null &&\n+                            compareLocal(fieldIndex(savedFields, e.getIllegalInstantException().getDateTime().getFieldType()), savedFields, count) == 0)) {\n+                throw e;\n+            }\n+\n+            DateTimeField field = e.getDateTimeFieldType().getField(iChrono);\n+\n+            if (compareReverse(field.getDurationField(), DurationFieldType.years().getField(iChrono)) >= 0) {\n+                e.printStackTrace();\n+                throw new IllegalFieldValueException(field, \"Value \" + e.getIllegalFieldValue() +\n+                        \" for \" + field.getName() + \" is not supported: \" +\n+                        \"it exceeds the maximum \" + field.getMaximumText(null, iLocale) + \" \" + field.getName(), e);\n+            }\n+            // convert the value to something in range\n+            LocalDateTime dt = safeLocalDateTime(e.getDateTime(), millis);\n+\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+\n+            return computeMillis(resetFields, dt.toString());\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}