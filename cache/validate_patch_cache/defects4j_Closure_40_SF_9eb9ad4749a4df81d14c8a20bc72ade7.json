{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  try {\n    // Record global variable and function declarations\n    if (t.inGlobalScope()) {\n      if (NodeUtil.isVarDeclaration(n)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        if (ns != null) {\n          recordSet(ns.name, n);\n        }\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          JsName nameInfo = getName(nameNode.getString(), true);\n          if (nameInfo != null) {\n            recordSet(nameInfo.name, nameNode);\n          } else {\n            System.out.println(\"JsName is null for function name: \" + nameNode.getString());\n          }\n        }\n      } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        if (ns != null) {\n          recordSet(ns.name, n);\n        }\n      } else {\n        System.out.println(\"Unknown node type in global scope: \" + n);\n      }\n    } else {\n      System.out.println(\"Not in global scope: \" + t.getScope());\n    }\n\n    // Record assignments and call sites\n    if (n.isAssign()) {\n      Node nameNode = n.getFirstChild();\n\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        if (ns.isPrototype) {\n          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n        } else {\n          JsName nameInfo = getName(ns.name, false);\n          if (nameInfo != null) {\n            recordSet(nameInfo.name, nameNode);\n          } else {\n            System.out.println(\"JsName is null for assignment to variable: \" + ns.name);\n          }\n        }\n      } else {\n        System.out.println(\"No name information for assignment: \" + n);\n      }\n    } else if (n.isCall()) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null && ns.onlyAffectsClassDef) {\n        JsName name = getName(ns.name, false);\n        if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n        } else {\n          System.out.println(\"JsName is null for call to function name: \" + ns.name);\n        }\n      } else {\n        System.out.println(\"No name information for call: \" + n);\n      }\n    } else {\n      System.out.println(\"Unknown node type: \" + n);\n    }\n  } catch (Exception e) {\n    System.out.println(\"Exception caught in visit(): \" + e.getMessage());\n    e.printStackTrace();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..db9da846 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,79 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  try {\n+    // Record global variable and function declarations\n+    if (t.inGlobalScope()) {\n+      if (NodeUtil.isVarDeclaration(n)) {\n+        NameInformation ns = createNameInformation(t, n, parent);\n+        if (ns != null) {\n           recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n+        }\n+      } else if (NodeUtil.isFunctionDeclaration(n)) {\n+        Node nameNode = n.getFirstChild();\n+        NameInformation ns = createNameInformation(t, nameNode, n);\n+        if (ns != null) {\n+          JsName nameInfo = getName(nameNode.getString(), true);\n+          if (nameInfo != null) {\n             recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n+          } else {\n+            System.out.println(\"JsName is null for function name: \" + nameNode.getString());\n           }\n         }\n+      } else if (NodeUtil.isObjectLitKey(n, parent)) {\n+        NameInformation ns = createNameInformation(t, n, parent);\n+        if (ns != null) {\n+          recordSet(ns.name, n);\n+        }\n+      } else {\n+        System.out.println(\"Unknown node type in global scope: \" + n);\n       }\n+    } else {\n+      System.out.println(\"Not in global scope: \" + t.getScope());\n+    }\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+    // Record assignments and call sites\n+    if (n.isAssign()) {\n+      Node nameNode = n.getFirstChild();\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        if (ns.isPrototype) {\n+          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+        } else {\n+          JsName nameInfo = getName(ns.name, false);\n+          if (nameInfo != null) {\n+            recordSet(nameInfo.name, nameNode);\n           } else {\n-            recordSet(ns.name, nameNode);\n+            System.out.println(\"JsName is null for assignment to variable: \" + ns.name);\n           }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n+      } else {\n+        System.out.println(\"No name information for assignment: \" + n);\n+      }\n+    } else if (n.isCall()) {\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null && ns.onlyAffectsClassDef) {\n+        JsName name = getName(ns.name, false);\n+        if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n-          }\n+        } else {\n+          System.out.println(\"JsName is null for call to function name: \" + ns.name);\n         }\n+      } else {\n+        System.out.println(\"No name information for call: \" + n);\n       }\n+    } else {\n+      System.out.println(\"Unknown node type: \" + n);\n     }\n+  } catch (Exception e) {\n+    System.out.println(\"Exception caught in visit(): \" + e.getMessage());\n+    e.printStackTrace();\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}