{
    "patch": "public class PropertyLoader {\n  private Properties properties = new Properties();\n  \n  public PropertyLoader(InputStream inputstream) throws IOException {\n    properties.load(inputstream);\n  }\n  \n  public String getProp(String name) {\n    String value = properties.getProperty(name);\n    if(value == null) {\n      System.err.println(\"property \" + name + \" not found\");\n    }\n    return value;\n  }\n  \n  public void checkProperty(String name) {\n    String value = properties.getProperty(name);\n    if(value == null) {\n      System.err.println(\"property \" + name + \" not found\");\n    }\n  }\n  \n  public void checkProperty(String name, String expected) {\n    String value = properties.getProperty(name);\n    if(value == null) {\n      System.err.println(\"property \" + name + \" not found\");\n    }\n    else if(!value.equals(expected)) {\n      System.err.println(\"value for property \" + name + \n                         \" is not as expected: expected \" + expected +\n                         \" but got \" + value);\n    }\n  } \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a4e3e270 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,40 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class PropertyLoader {\n+  private Properties properties = new Properties();\n+  \n+  public PropertyLoader(InputStream inputstream) throws IOException {\n+    properties.load(inputstream);\n+  }\n+  \n+  public String getProp(String name) {\n+    String value = properties.getProperty(name);\n+    if(value == null) {\n+      System.err.println(\"property \" + name + \" not found\");\n+    }\n+    return value;\n+  }\n+  \n+  public void checkProperty(String name) {\n+    String value = properties.getProperty(name);\n+    if(value == null) {\n+      System.err.println(\"property \" + name + \" not found\");\n+    }\n+  }\n+  \n+  public void checkProperty(String name, String expected) {\n+    String value = properties.getProperty(name);\n+    if(value == null) {\n+      System.err.println(\"property \" + name + \" not found\");\n+    }\n+    else if(!value.equals(expected)) {\n+      System.err.println(\"value for property \" + name + \n+                         \" is not as expected: expected \" + expected +\n+                         \" but got \" + value);\n+    }\n+  } \n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}