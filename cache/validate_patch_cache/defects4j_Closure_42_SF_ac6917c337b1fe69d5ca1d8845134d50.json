{
    "patch": "@Override\nNode processForInLoop(ForInLoop loopNode) {\n    AstNode left = loopNode.getIterator();\n    AstNode right = loopNode.getIteratedObject();\n\n    Node decl = null;\n    if (left.getType() == Token.VAR) {\n        varForPatternVars = new ArrayList<>();\n        decl = transform(left);\n        Node name = decl.getFirstChild();\n        while (name != null) {\n            name.setType(Token.NAME);\n            varForPatternVars.add(name.getString());\n            name = name.getNext();\n        }\n    }\n\n    if (!(right instanceof ArrayLiteral) && !(right instanceof ObjectLiteral) &&\n            !(right instanceof Name) && !(right instanceof PropertyGet) &&\n            !(right instanceof FunctionCall)) {\n        errorReporter.warning(\n                \"For-each statement is not supported. Use the for-in statement instead\",\n                sourceName,\n                loopNode.getLineno(),\n                loopNode.getLength());\n        return decl;\n    }\n\n    Node body = transform(loopNode.getBody());\n\n    Node newForNode = new Node(Token.FOR, loopNode.getLineno());\n    Node init = null;\n    Node cond = null;\n    Node incr = null;\n\n    if (decl == null) {\n        // Don't add anything.\n        if (right instanceof PropertyGet) {\n            init = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n            init.addChildToBack(transform(right));\n        } else {\n            init = transform(right);\n        }\n\n        if (init.getType() == Token.NAME) {\n            init.setType(Token.VAR);\n        } else if (init.getFirstChild() != null\n                && init.getFirstChild().getType() == Token.NAME) {\n            init.getFirstChild().setType(Token.VAR);\n        }\n\n        cond = new Node(Token.LT, loopNode.getLineno());\n        cond.addChildToBack(transform(left));\n        Node length = new Node(Token.GETPROP, loopNode.getLineno());\n        length.addChildToBack(transform(init));\n        length.addChildToBack(new Node(Token.STRING, \"length\", loopNode.getLineno()));\n        cond.addChildToBack(length);\n\n        Node name = new Node(Token.NAME, loopNode.getLineno());\n        Node array = new Node(Token.ARRAYLIT, loopNode.getLineno());\n        Node brack = new Node(Token.GETELEM, loopNode.getLineno());\n        brack.addChildToBack(transform(init));\n        brack.addChildToBack(transform(new Node(Token.NAME, \"i\", loopNode.getLineno())));\n        array.addChildToBack(brack);\n        Node var = new Node(Token.VAR, loopNode.getLineno());\n        name.setString(\"i\");\n        var.addChildToBack(name);\n        var.addChildToBack(array);\n        incr = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n        incr.addChildToBack(new Node.Token(Token.INC));\n        incr.setJSDocInfo(loopNode.getJsDoc());\n        Node increment = new Node(Token.INC, loopNode.getLineno());\n        increment.addChildToBack(transform(left));\n        incr.addChildToBack(increment);\n    } else {\n        if (right instanceof FunctionCall) {\n            Node array = new Node(Token.ARRAYLIT, loopNode.getLineno());\n            Node call = transform(right);\n            Node callTarget = call.getFirstChild();\n            Node args = callTarget.getNext();\n            int i = 0;\n            while (args != null) {\n                Node index = new Node(Token.NUMBER, Integer.toString(i), loopNode.getLineno());\n                Node getelem = new Node(Token.GETELEM, loopNode.getLineno());\n                getelem.addChildToBack(transform(callTarget));\n                getelem.addChildToBack(index);\n                varForPatternVars.add(decl.getChildAtIndex(i).getString());\n                Node id = new Node(Token.NAME, decl.getChildAtIndex(i).getString(), loopNode.getLineno());\n                array.addChildToBack(id);\n                incr = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n                incr.addChildToBack(new Node(Token.TEMPORARY_RETURN));\n                incr.setJSDocInfo(loopNode.getJsDoc());\n                init = array;\n                cond = new Node(Token.NE, loopNode.getLineno());\n                Node length = new Node(Token.GETPROP, loopNode.getLineno());\n                length.addChildToBack(transform(init));\n                length.addChildToBack(new Node(Token.STRING, \"length\", loopNode.getLineno()));\n                cond.addChildToBack(transform(left));\n                cond.addChildToBack(length);\n                i++;\n                args = args.getNext();\n            }\n            body = new Node(Token.BLOCK, body, incr);\n        } else {\n            varForPatternVars.add(decl.getFirstChild().getString());\n            init = new Node(Token.FOR_OF, loopNode.getLineno());\n            init.addChildToBack(transform(left));\n            init.addChildToBack(transform(right));\n            cond = new Node(Token.LT, loopNode.getLineno());\n            cond.addChildToBack(transform(left));\n            Node length = new Node(Token.GETPROP, loopNode.getLineno());\n            length.addChildToBack(transform(right));\n            length.addChildToBack(new Node(Token.STRING, \"length\", loopNode.getLineno()));\n            cond.addChildToBack(length);\n            incr = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n            incr.addChildToBack(new Node(Token.TEMPORARY_RETURN));\n        }\n    }\n\n    newForNode.addChildToBack(init);\n    newForNode.addChildToBack(cond);\n    newForNode.addChildToBack(incr);\n    newForNode.addChildToBack(body);\n    newForNode.setLineno(loopNode.getLineno());\n    newForNode.setCharno(loopNode.getCharno());\n    return newForNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..8ef6fa5b 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,133 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+@Override\n+Node processForInLoop(ForInLoop loopNode) {\n+    AstNode left = loopNode.getIterator();\n+    AstNode right = loopNode.getIteratedObject();\n+\n+    Node decl = null;\n+    if (left.getType() == Token.VAR) {\n+        varForPatternVars = new ArrayList<>();\n+        decl = transform(left);\n+        Node name = decl.getFirstChild();\n+        while (name != null) {\n+            name.setType(Token.NAME);\n+            varForPatternVars.add(name.getString());\n+            name = name.getNext();\n+        }\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    if (!(right instanceof ArrayLiteral) && !(right instanceof ObjectLiteral) &&\n+            !(right instanceof Name) && !(right instanceof PropertyGet) &&\n+            !(right instanceof FunctionCall)) {\n+        errorReporter.warning(\n+                \"For-each statement is not supported. Use the for-in statement instead\",\n+                sourceName,\n+                loopNode.getLineno(),\n+                loopNode.getLength());\n+        return decl;\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+    Node body = transform(loopNode.getBody());\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+    Node newForNode = new Node(Token.FOR, loopNode.getLineno());\n+    Node init = null;\n+    Node cond = null;\n+    Node incr = null;\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+    if (decl == null) {\n+        // Don't add anything.\n+        if (right instanceof PropertyGet) {\n+            init = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n+            init.addChildToBack(transform(right));\n+        } else {\n+            init = transform(right);\n+        }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+        if (init.getType() == Token.NAME) {\n+            init.setType(Token.VAR);\n+        } else if (init.getFirstChild() != null\n+                && init.getFirstChild().getType() == Token.NAME) {\n+            init.getFirstChild().setType(Token.VAR);\n+        }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+        cond = new Node(Token.LT, loopNode.getLineno());\n+        cond.addChildToBack(transform(left));\n+        Node length = new Node(Token.GETPROP, loopNode.getLineno());\n+        length.addChildToBack(transform(init));\n+        length.addChildToBack(new Node(Token.STRING, \"length\", loopNode.getLineno()));\n+        cond.addChildToBack(length);\n+\n+        Node name = new Node(Token.NAME, loopNode.getLineno());\n+        Node array = new Node(Token.ARRAYLIT, loopNode.getLineno());\n+        Node brack = new Node(Token.GETELEM, loopNode.getLineno());\n+        brack.addChildToBack(transform(init));\n+        brack.addChildToBack(transform(new Node(Token.NAME, \"i\", loopNode.getLineno())));\n+        array.addChildToBack(brack);\n+        Node var = new Node(Token.VAR, loopNode.getLineno());\n+        name.setString(\"i\");\n+        var.addChildToBack(name);\n+        var.addChildToBack(array);\n+        incr = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n+        incr.addChildToBack(new Node.Token(Token.INC));\n+        incr.setJSDocInfo(loopNode.getJsDoc());\n+        Node increment = new Node(Token.INC, loopNode.getLineno());\n+        increment.addChildToBack(transform(left));\n+        incr.addChildToBack(increment);\n+    } else {\n+        if (right instanceof FunctionCall) {\n+            Node array = new Node(Token.ARRAYLIT, loopNode.getLineno());\n+            Node call = transform(right);\n+            Node callTarget = call.getFirstChild();\n+            Node args = callTarget.getNext();\n+            int i = 0;\n+            while (args != null) {\n+                Node index = new Node(Token.NUMBER, Integer.toString(i), loopNode.getLineno());\n+                Node getelem = new Node(Token.GETELEM, loopNode.getLineno());\n+                getelem.addChildToBack(transform(callTarget));\n+                getelem.addChildToBack(index);\n+                varForPatternVars.add(decl.getChildAtIndex(i).getString());\n+                Node id = new Node(Token.NAME, decl.getChildAtIndex(i).getString(), loopNode.getLineno());\n+                array.addChildToBack(id);\n+                incr = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n+                incr.addChildToBack(new Node(Token.TEMPORARY_RETURN));\n+                incr.setJSDocInfo(loopNode.getJsDoc());\n+                init = array;\n+                cond = new Node(Token.NE, loopNode.getLineno());\n+                Node length = new Node(Token.GETPROP, loopNode.getLineno());\n+                length.addChildToBack(transform(init));\n+                length.addChildToBack(new Node(Token.STRING, \"length\", loopNode.getLineno()));\n+                cond.addChildToBack(transform(left));\n+                cond.addChildToBack(length);\n+                i++;\n+                args = args.getNext();\n+            }\n+            body = new Node(Token.BLOCK, body, incr);\n+        } else {\n+            varForPatternVars.add(decl.getFirstChild().getString());\n+            init = new Node(Token.FOR_OF, loopNode.getLineno());\n+            init.addChildToBack(transform(left));\n+            init.addChildToBack(transform(right));\n+            cond = new Node(Token.LT, loopNode.getLineno());\n+            cond.addChildToBack(transform(left));\n+            Node length = new Node(Token.GETPROP, loopNode.getLineno());\n+            length.addChildToBack(transform(right));\n+            length.addChildToBack(new Node(Token.STRING, \"length\", loopNode.getLineno()));\n+            cond.addChildToBack(length);\n+            incr = new Node(Token.EXPR_RESULT, loopNode.getLineno());\n+            incr.addChildToBack(new Node(Token.TEMPORARY_RETURN));\n+        }\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+    newForNode.addChildToBack(init);\n+    newForNode.addChildToBack(cond);\n+    newForNode.addChildToBack(incr);\n+    newForNode.addChildToBack(body);\n+    newForNode.setLineno(loopNode.getLineno());\n+    newForNode.setCharno(loopNode.getCharno());\n+    return newForNode;\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}