{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double s1 = v1.getNorm();\n    double s2 = v2.getNorm();\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n    final double[][] c = new double[3][3];\n    for (int i = 0; i < 3; ++i) {\n        c[2][i] = v1.getEntry(i) / s1;\n        c[1][i] = v2.getEntry(i) / s2;\n        c[0][i] = c[2][i] * c[1][(i + 1) % 3] - c[2][(i + 1) % 3] * c[1][i];\n    }\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(s1 * s2 * c[0][0], s1 * s2 * c[0][1], s1 * s2 * c[0][2]);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..66bf39e87 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,23 +454,27 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double s1 = v1.getNorm();\n+    double s2 = v2.getNorm();\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double[][] c = new double[3][3];\n+    for (int i = 0; i < 3; ++i) {\n+        c[2][i] = v1.getEntry(i) / s1;\n+        c[1][i] = v2.getEntry(i) / s2;\n+        c[0][i] = c[2][i] * c[1][(i + 1) % 3] - c[2][(i + 1) % 3] * c[1][i];\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(s1 * s2 * c[0][0], s1 * s2 * c[0][1], s1 * s2 * c[0][2]);\n \n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}