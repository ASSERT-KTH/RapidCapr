{
    "patch": "      if (block.isFunction) {\n        // If the function contains only this one assignment, it's fine.\n        boolean foundAssignment = false;\n        for (NodeTraversal t = new NodeTraversal(compiler,\n            new Node(Token.BLOCK, block.getHandler(), block.getStatements()));\n            t.hasMoreThanOneChild();) {\n          Node n = t.getNextChild();\n          if (n.isExprResult() && n.getFirstChild().isAssign() &&\n              n.getFirstChild().getFirstChild().matchesQualifiedName(ref.getName())) {\n            if (foundAssignment) {\n              return false;\n            }\n            foundAssignment = true;\n          }\n        }\n        return foundAssignment;\n      } else if (block.isLoop) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..91e192f3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // If the function contains only this one assignment, it's fine.\n+        boolean foundAssignment = false;\n+        for (NodeTraversal t = new NodeTraversal(compiler,\n+            new Node(Token.BLOCK, block.getHandler(), block.getStatements()));\n+            t.hasMoreThanOneChild();) {\n+          Node n = t.getNextChild();\n+          if (n.isExprResult() && n.getFirstChild().isAssign() &&\n+              n.getFirstChild().getFirstChild().matchesQualifiedName(ref.getName())) {\n+            if (foundAssignment) {\n+              return false;\n+            }\n+            foundAssignment = true;\n+          }\n+        }\n+        return foundAssignment;\n+      } else if (block.isLoop) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}