{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n\n  // Get the function parameter names and set up an iterator\n  List<String> fnParamNames = NodeUtil.getFunctionParameters(fnNode).getDeclaredNames();\n  Iterator<String> fnParamNameIter = fnParamNames.iterator();\n\n  // Start with the first argument of the call node\n  Node currArg = callNode.getFirstChild().getNext();\n\n  // Iterate through all the function parameters and call arguments\n  while (fnParamNameIter.hasNext() || currArg != null) {\n    // Check if there is a named function parameter\n    if (fnParamNameIter.hasNext()) {\n      String fnParamName = fnParamNameIter.next();\n      \n      // Skip over non-name nodes (such as rest parameters)\n      while (currArg != null && !currArg.isName()) {\n        currArg = currArg.getNext();\n      }\n\n      // Check if the argument has side effects\n      if (currArg != null && hasSideEffects && NodeUtil.canBeSideEffected(currArg)) {\n        return CanInlineResult.NO;\n      }\n\n      // Check if the argument affects mutable state\n      if (currArg != null\n          && NodeUtil.mayEffectMutableState(currArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParamName) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    // Check if there is a positional argument that doesn't correspond to a named parameter\n    if (currArg != null && !fnParamNameIter.hasNext()) {\n      // Skip over non-name nodes (such as spread operators)\n      while (currArg != null && !currArg.isName()) {\n        currArg = currArg.getNext();\n      }\n\n      // Check if the argument has side effects\n      if (currArg != null && NodeUtil.mayHaveSideEffects(currArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    // Move to the next argument\n    if (currArg != null) {\n      currArg = currArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..01ca0dc6 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,74 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+  boolean hasSideEffects = false;\n+  if (block.hasChildren()) {\n+    Preconditions.checkState(block.hasOneChild());\n+    Node stmt = block.getFirstChild();\n+    if (stmt.isReturn()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n     }\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // Get the function parameter names and set up an iterator\n+  List<String> fnParamNames = NodeUtil.getFunctionParameters(fnNode).getDeclaredNames();\n+  Iterator<String> fnParamNameIter = fnParamNames.iterator();\n+\n+  // Start with the first argument of the call node\n+  Node currArg = callNode.getFirstChild().getNext();\n+\n+  // Iterate through all the function parameters and call arguments\n+  while (fnParamNameIter.hasNext() || currArg != null) {\n+    // Check if there is a named function parameter\n+    if (fnParamNameIter.hasNext()) {\n+      String fnParamName = fnParamNameIter.next();\n+      \n+      // Skip over non-name nodes (such as rest parameters)\n+      while (currArg != null && !currArg.isName()) {\n+        currArg = currArg.getNext();\n+      }\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+      // Check if the argument has side effects\n+      if (currArg != null && hasSideEffects && NodeUtil.canBeSideEffected(currArg)) {\n+        return CanInlineResult.NO;\n       }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      // Check if the argument affects mutable state\n+      if (currArg != null\n+          && NodeUtil.mayEffectMutableState(currArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, fnParamName) > 1) {\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    // Check if there is a positional argument that doesn't correspond to a named parameter\n+    if (currArg != null && !fnParamNameIter.hasNext()) {\n+      // Skip over non-name nodes (such as spread operators)\n+      while (currArg != null && !currArg.isName()) {\n+        currArg = currArg.getNext();\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      // Check if the argument has side effects\n+      if (currArg != null && NodeUtil.mayHaveSideEffects(currArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    // Move to the next argument\n+    if (currArg != null) {\n+      currArg = currArg.getNext();\n+    }\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}