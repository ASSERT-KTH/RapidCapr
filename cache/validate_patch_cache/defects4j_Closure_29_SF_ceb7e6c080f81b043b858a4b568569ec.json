{
    "patch": "          // A call target may be using the object as a 'this' value.\n          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n          continue;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          continue;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n            child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          if (!child.hasChildren()) {\n            continue;\n          }\n\n          Node childVal = child.getFirstChild();\n\n          while (childVal != null) {\n            for (Reference t : refs) {\n              Node refNode = t.getParent();\n              boolean validLocation = NodeUtil.isAncestor(parent, refNode)\n                  || NodeUtil.isAncestor(name, refNode)\n                  || NodeUtil.isAncestor(childVal, refNode);\n              if (validLocation) {\n                break;\n              }\n\n              if (refNode.getParent() != null && refNode.getParent().isCall()\n                  && NodeUtil.getFunctionName(refNode.getParent().getFirstChild()).equals(refNode)) {\n                // This is a call to an object literal function.\n                validLocation |= NodeUtil.isAncestor(child.getSecondChild(), refNode);\n              }\n            }\n            if (childVal == name) {\n              // There's a self-referential assignment.\n              return false;\n            }\n            childVal = childVal.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..5ac5f1cf 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,21 +152,8 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n+          // A call target may be using the object as a 'this' value.\n+          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n             return false;\n           }\n \n@@ -183,7 +170,7 @@ class InlineObjectLiterals implements CompilerPass {\n \n         // Only rewrite VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+          continue;\n         }\n \n         Node val = ref.getAssignedValue();\n@@ -194,10 +181,10 @@ class InlineObjectLiterals implements CompilerPass {\n \n         // We're looking for object literal assignments only.\n         if (!val.isObjectLit()) {\n-          return false;\n+          continue;\n         }\n \n-        // Make sure that the value is not self-refential. IOW,\n+        // Make sure that the value is not self-referential. IOW,\n         // disallow things like x = {b: x.a}.\n         //\n         // TODO: Only exclude unorderable self-referential\n@@ -206,38 +193,39 @@ class InlineObjectLiterals implements CompilerPass {\n         //\n         // Also, ES5 getters/setters aren't handled by this pass.\n         for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n+            child = child.getNext()) {\n+          if (child.isGetterDef() || child.isSetterDef()) {\n             // ES5 get/set not supported.\n             return false;\n           }\n \n+          if (!child.hasChildren()) {\n+            continue;\n+          }\n \n           Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n \n+          while (childVal != null) {\n+            for (Reference t : refs) {\n+              Node refNode = t.getParent();\n+              boolean validLocation = NodeUtil.isAncestor(parent, refNode)\n+                  || NodeUtil.isAncestor(name, refNode)\n+                  || NodeUtil.isAncestor(childVal, refNode);\n+              if (validLocation) {\n+                break;\n+              }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n-    }\n+              if (refNode.getParent() != null && refNode.getParent().isCall()\n+                  && NodeUtil.getFunctionName(refNode.getParent().getFirstChild()).equals(refNode)) {\n+                // This is a call to an object literal function.\n+                validLocation |= NodeUtil.isAncestor(child.getSecondChild(), refNode);\n+              }\n+            }\n+            if (childVal == name) {\n+              // There's a self-referential assignment.\n+              return false;\n+            }\n+            childVal = childVal.getNext();\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}