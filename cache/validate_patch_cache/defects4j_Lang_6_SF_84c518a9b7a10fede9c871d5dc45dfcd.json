{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n      // check if the current character is a high surrogate\n      char high = input.charAt(pos);\n      if (Character.isHighSurrogate(high) && pos + 1 < len) {\n        char low = input.charAt(pos + 1);\n        if (Character.isLowSurrogate(low)) {\n          // we have a surrogate pair\n          int codePoint = Character.toCodePoint(high, low);\n          int consumed = translate(String.valueOf(Character.toChars(codePoint)), 0, out); // translate as a single code point\n          pos += consumed; // increment by the number of chars consumed\n          continue; // go to next character\n        }\n      }\n      // not a surrogate pair, just translate normally\n      int consumed = translate(input, pos, out);\n      pos += consumed; // increment by the number of chars consumed\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..9fdd4008 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,33 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+      // check if the current character is a high surrogate\n+      char high = input.charAt(pos);\n+      if (Character.isHighSurrogate(high) && pos + 1 < len) {\n+        char low = input.charAt(pos + 1);\n+        if (Character.isLowSurrogate(low)) {\n+          // we have a surrogate pair\n+          int codePoint = Character.toCodePoint(high, low);\n+          int consumed = translate(String.valueOf(Character.toChars(codePoint)), 0, out); // translate as a single code point\n+          pos += consumed; // increment by the number of chars consumed\n+          continue; // go to next character\n         }\n+      }\n+      // not a surrogate pair, just translate normally\n+      int consumed = translate(input, pos, out);\n+      pos += consumed; // increment by the number of chars consumed\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}