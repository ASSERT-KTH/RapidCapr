{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n\n    long nextLocal = offsetLocal < offsetAdjusted ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    long nextAdjusted = offsetLocal < offsetAdjusted ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n    \n    if (nextLocal != nextAdjusted) {\n        // we are in a DST gap\n        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n    }\n    // we are near a DST boundary\n    return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d33b9245 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+\n+    long nextLocal = offsetLocal < offsetAdjusted ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    long nextAdjusted = offsetLocal < offsetAdjusted ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n+    \n+    if (nextLocal != nextAdjusted) {\n+        // we are in a DST gap\n+        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n+    }\n+    // we are near a DST boundary\n+    return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}