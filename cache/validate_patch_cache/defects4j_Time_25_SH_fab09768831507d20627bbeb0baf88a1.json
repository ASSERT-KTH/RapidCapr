{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                int diff = TransitionUtils.getStandardOffset(nextLocal, getWallOffset(nextLocal));\n                diff -= offsetLocal;\n                if (diff >= 0) {\n                    diff = 1 - diff;\n                }\n                long next = nextTransition(nextAdjusted - (diff * (DateTimeConstants.MILLIS_PER_HOUR / 2)));\n                if (next == nextAdjusted) {\n                    return offsetLocal;\n                }\n                return getOffset(next - (diff * (DateTimeConstants.MILLIS_PER_HOUR / 2)));\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cb859c4d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                int diff = TransitionUtils.getStandardOffset(nextLocal, getWallOffset(nextLocal));\n+                diff -= offsetLocal;\n+                if (diff >= 0) {\n+                    diff = 1 - diff;\n+                }\n+                long next = nextTransition(nextAdjusted - (diff * (DateTimeConstants.MILLIS_PER_HOUR / 2)));\n+                if (next == nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                return getOffset(next - (diff * (DateTimeConstants.MILLIS_PER_HOUR / 2)));\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}