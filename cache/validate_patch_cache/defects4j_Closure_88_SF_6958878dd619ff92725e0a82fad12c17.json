{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (NodeUtil.isLhs(n, n.getParent())) {\n            // The variable is being assigned, so it is not being read before being killed.\n            return VariableLiveness.KILL;\n        } else {\n            // The variable is being read, so it is not being killed before being read.\n            return VariableLiveness.READ;\n        }\n    }\n\n    boolean isPotentiallyLive = false;\n    Node child = n.getFirstChild();\n    while (child != null) {\n        if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n            // Entering a new function complicates control flow.\n            // The variable is potentially live.\n            isPotentiallyLive = true;\n        } else {\n            VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n            if (childState == VariableLiveness.KILL) {\n                // If the variable is written in a different branch, it is no longer live.\n                return VariableLiveness.KILL;\n            } else if (childState == VariableLiveness.READ) {\n                // If any child subtree reads the variable, the variable is not dead.\n                return VariableLiveness.READ;\n            } else {\n                // The child state is MAYBE_LIVE.\n                isPotentiallyLive = true;\n            }\n        }\n        child = child.getNext();\n    }\n    return isPotentiallyLive ? VariableLiveness.MAYBE_LIVE : VariableLiveness.KILL;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..8f798b02 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,39 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n+        if (NodeUtil.isLhs(n, n.getParent())) {\n+            // The variable is being assigned, so it is not being read before being killed.\n+            return VariableLiveness.KILL;\n+        } else {\n+            // The variable is being read, so it is not being killed before being read.\n+            return VariableLiveness.READ;\n+        }\n     }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+    boolean isPotentiallyLive = false;\n+    Node child = n.getFirstChild();\n+    while (child != null) {\n+        if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+            // Entering a new function complicates control flow.\n+            // The variable is potentially live.\n+            isPotentiallyLive = true;\n+        } else {\n+            VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n+            if (childState == VariableLiveness.KILL) {\n+                // If the variable is written in a different branch, it is no longer live.\n+                return VariableLiveness.KILL;\n+            } else if (childState == VariableLiveness.READ) {\n+                // If any child subtree reads the variable, the variable is not dead.\n+                return VariableLiveness.READ;\n+            } else {\n+                // The child state is MAYBE_LIVE.\n+                isPotentiallyLive = true;\n+            }\n         }\n-      }\n+        child = child.getNext();\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n-  }\n+    return isPotentiallyLive ? VariableLiveness.MAYBE_LIVE : VariableLiveness.KILL;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}