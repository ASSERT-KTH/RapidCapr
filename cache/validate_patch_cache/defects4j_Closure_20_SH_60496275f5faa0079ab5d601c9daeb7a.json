{
    "patch": "        callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      // Check if the only arg is an immutable string or number.\n      // (We don't fold string concatenation, since the string\n      // constructor is different from the + operator in that it returns\n      // '' for null/undefined)\n      if (value != null && NodeUtil.isImmutableValue(value)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..2f628630 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,13 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+        callTarget.getString().equals(\"String\")) {\n+      Node value = callTarget.getNext();\n+      // Check if the only arg is an immutable string or number.\n+      // (We don't fold string concatenation, since the string\n+      // constructor is different from the + operator in that it returns\n+      // '' for null/undefined)\n+      if (value != null && NodeUtil.isImmutableValue(value)) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}