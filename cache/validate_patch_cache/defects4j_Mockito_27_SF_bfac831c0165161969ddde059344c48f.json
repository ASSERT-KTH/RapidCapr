{
    "patch": "public <T> void resetMock(T mock) {\n    Class<?> mockClass = mock.getClass();\n    if (mockClass.getName().contains(\"EnhancerByMockitoWithCGLIB\")) { // check if mock uses CGLIB\n        Field field = null;\n        try {\n            field = mockClass.getSuperclass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n            field.setAccessible(true);\n            CallbackFilter filter = (CallbackFilter) field.get(mock);\n            MethodInterceptor oldInterceptor = (MethodInterceptor) ((Factory) mock).getCallback(filter.accept(0)); // get the old interceptor\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldInterceptor);\n            MethodInterceptor newInterceptor = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(RETURNS_DEFAULTS));\n            ((Factory) mock).setCallback(filter.accept(0), newInterceptor); // set the new interceptor\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new MockitoException(\"Could not reset mock using CGLIB\", e);\n        }\n    } else { // Fallback to the default behavior\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..5492b1b60 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    Class<?> mockClass = mock.getClass();\n+    if (mockClass.getName().contains(\"EnhancerByMockitoWithCGLIB\")) { // check if mock uses CGLIB\n+        Field field = null;\n+        try {\n+            field = mockClass.getSuperclass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+            field.setAccessible(true);\n+            CallbackFilter filter = (CallbackFilter) field.get(mock);\n+            MethodInterceptor oldInterceptor = (MethodInterceptor) ((Factory) mock).getCallback(filter.accept(0)); // get the old interceptor\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldInterceptor);\n+            MethodInterceptor newInterceptor = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+            ((Factory) mock).setCallback(filter.accept(0), newInterceptor); // set the new interceptor\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new MockitoException(\"Could not reset mock using CGLIB\", e);\n+        }\n+    } else { // Fallback to the default behavior\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}