{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            boolean dayOfMonthUpdated = false;\n            int monthOfYearIndex = 0;\n            boolean dayOfMonthOverflowed = false;\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n                    monthOfYearIndex = i;\n                    int month = (values[i] + valueToAdd - 1) % 12 + 1;\n                    instant = fieldType.getField(iChronology).set(instant, month);\n                } else if (fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n                    int dayOfMonth = values[i];\n                    try {\n                        instant = fieldType.getField(iChronology).set(instant, dayOfMonth);\n                    } catch (IllegalFieldValueException e) {\n                        if (e.getIllegalFieldValue() == 29 && !dayOfMonthUpdated &&\n                            (valueToAdd > 0 && isFebruary(partial, i) || valueToAdd < 0 && isMarch(partial, i))) {\n                            // Fix day of month overflow resulting from date shifting.\n                            int monthOfYear = iChronology.monthOfYear().get(instant);\n                            instant = fieldType.getField(iChronology).set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n                            instant = iChronology.monthOfYear().add(instant, 1);\n                            dayOfMonthOverflowed = !isExpectedDayOfMonth(iChronology.monthOfYear().get(instant), monthOfYear);\n                        } else {\n                            throw e;\n                        }\n                    }\n                    dayOfMonthUpdated = true;\n                } else {\n                    instant = fieldType.getField(iChronology).set(instant, values[i]);\n                }\n            }\n            int[] result = iChronology.get(partial, instant);\n\n            if (dayOfMonthOverflowed) {\n                result = iChronology.dayOfMonth().add(result, -1);\n            } else if (!dayOfMonthUpdated) {\n                // Compute the day of month if not set before\n                result = iChronology.dayOfMonth().setCopy(result, iChronology.getDayOfMonth(instant));\n            }\n\n            if (valueToAdd > 0 && isFebruary(partial, monthOfYearIndex) && result[monthOfYearIndex] != 2) {\n                throw new org.joda.time.IllegalFieldValueException\n                    (DateTimeFieldType.monthOfYear(), Integer.valueOf(result[monthOfYearIndex]), null, null);\n            }\n\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n\n    private boolean isFebruary(ReadablePartial partial, int monthOfYearIndex) {\n        return partial.getFieldType(monthOfYearIndex).equals(DateTimeFieldType.monthOfYear()) &&\n            partial.getField(monthOfYearIndex).get(iChronology) == 2;\n    }\n\n    private boolean isMarch(ReadablePartial partial, int monthOfYearIndex) {\n        return partial.getFieldType(monthOfYearIndex).equals(DateTimeFieldType.monthOfYear()) &&\n            partial.getField(monthOfYearIndex).get(iChronology) == 3;\n    }\n\n    private boolean isExpectedDayOfMonth(int monthOfYear, int expectedMonthOfYear) {\n        if (monthOfYear == 2) {\n            return expectedMonthOfYear == 1 || expectedMonthOfYear == 3;\n        }\n        if (monthOfYear == 1 || monthOfYear == 3 || monthOfYear == 5 ||\n                monthOfYear == 7 || monthOfYear == 8 || monthOfYear == 10 || monthOfYear == 12) {\n            return expectedMonthOfYear == monthOfYear - 1 || expectedMonthOfYear == monthOfYear;\n        }\n        return expectedMonthOfYear == monthOfYear || expectedMonthOfYear == monthOfYear + 1;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1b5a52d0 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,19 +206,80 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            boolean dayOfMonthUpdated = false;\n+            int monthOfYearIndex = 0;\n+            boolean dayOfMonthOverflowed = false;\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeFieldType fieldType = partial.getFieldType(i);\n+                if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n+                    monthOfYearIndex = i;\n+                    int month = (values[i] + valueToAdd - 1) % 12 + 1;\n+                    instant = fieldType.getField(iChronology).set(instant, month);\n+                } else if (fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n+                    int dayOfMonth = values[i];\n+                    try {\n+                        instant = fieldType.getField(iChronology).set(instant, dayOfMonth);\n+                    } catch (IllegalFieldValueException e) {\n+                        if (e.getIllegalFieldValue() == 29 && !dayOfMonthUpdated &&\n+                            (valueToAdd > 0 && isFebruary(partial, i) || valueToAdd < 0 && isMarch(partial, i))) {\n+                            // Fix day of month overflow resulting from date shifting.\n+                            int monthOfYear = iChronology.monthOfYear().get(instant);\n+                            instant = fieldType.getField(iChronology).set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n+                            instant = iChronology.monthOfYear().add(instant, 1);\n+                            dayOfMonthOverflowed = !isExpectedDayOfMonth(iChronology.monthOfYear().get(instant), monthOfYear);\n+                        } else {\n+                            throw e;\n+                        }\n+                    }\n+                    dayOfMonthUpdated = true;\n+                } else {\n+                    instant = fieldType.getField(iChronology).set(instant, values[i]);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] result = iChronology.get(partial, instant);\n+\n+            if (dayOfMonthOverflowed) {\n+                result = iChronology.dayOfMonth().add(result, -1);\n+            } else if (!dayOfMonthUpdated) {\n+                // Compute the day of month if not set before\n+                result = iChronology.dayOfMonth().setCopy(result, iChronology.getDayOfMonth(instant));\n+            }\n+\n+            if (valueToAdd > 0 && isFebruary(partial, monthOfYearIndex) && result[monthOfYearIndex] != 2) {\n+                throw new org.joda.time.IllegalFieldValueException\n+                    (DateTimeFieldType.monthOfYear(), Integer.valueOf(result[monthOfYearIndex]), null, null);\n+            }\n+\n+            return result;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n \n+    private boolean isFebruary(ReadablePartial partial, int monthOfYearIndex) {\n+        return partial.getFieldType(monthOfYearIndex).equals(DateTimeFieldType.monthOfYear()) &&\n+            partial.getField(monthOfYearIndex).get(iChronology) == 2;\n+    }\n+\n+    private boolean isMarch(ReadablePartial partial, int monthOfYearIndex) {\n+        return partial.getFieldType(monthOfYearIndex).equals(DateTimeFieldType.monthOfYear()) &&\n+            partial.getField(monthOfYearIndex).get(iChronology) == 3;\n+    }\n+\n+    private boolean isExpectedDayOfMonth(int monthOfYear, int expectedMonthOfYear) {\n+        if (monthOfYear == 2) {\n+            return expectedMonthOfYear == 1 || expectedMonthOfYear == 3;\n+        }\n+        if (monthOfYear == 1 || monthOfYear == 3 || monthOfYear == 5 ||\n+                monthOfYear == 7 || monthOfYear == 8 || monthOfYear == 10 || monthOfYear == 12) {\n+            return expectedMonthOfYear == monthOfYear - 1 || expectedMonthOfYear == monthOfYear;\n+        }\n+        return expectedMonthOfYear == monthOfYear || expectedMonthOfYear == monthOfYear + 1;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}