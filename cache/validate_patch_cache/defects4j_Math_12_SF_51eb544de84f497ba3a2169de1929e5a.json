{
    "patch": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class Solution {\n\n    /**\n     * Compute the probability distribution after cloning a sequence of DNA molecules n times.\n     *\n     * @param p the initial probability distribution\n     * @param n the number of times to clone the sequence\n     * @return the probability distribution after cloning the sequence n times\n     */\n    public static double[] distributionClone(double[] p, int n) {\n        BigDecimal[] probabilities = new BigDecimal[p.length];\n        for (int i = 0; i < p.length; i++) {\n            probabilities[i] = BigDecimal.valueOf(p[i]);\n        }\n        BigDecimal[][] dp = new BigDecimal[2][n + 1];\n        double[] result = new double[n];\n\n        // Initialize the base case\n        dp[0][0] = BigDecimal.ONE;\n\n        // Calculate the probabilities using DP\n        for (int i = 1; i <= p.length; i++) {\n            BigDecimal prob = probabilities[i - 1];\n            int cur = i % 2;\n            int prev = (i - 1) % 2;\n            dp[cur][0] = dp[prev][0].multiply(BigDecimal.ONE.subtract(prob));\n            for (int j = 1; j <= n; j++) {\n                dp[cur][j] = dp[prev][j - 1].multiply(prob).add(dp[prev][j].multiply(BigDecimal.ONE.subtract(prob)));\n            }\n        }\n\n        // Calculate the results from the probabilities\n        for (int i = 0; i < n; i++) {\n            int cur = p.length % 2;\n            BigDecimal sum = BigDecimal.ZERO;\n            for (int j = i + 1; j <= n; j++) {\n                sum = sum.add(dp[cur][j]);\n            }\n            result[i] = sum.setScale(10, RoundingMode.HALF_UP).doubleValue();\n        }\n\n        return result;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}