{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n            !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (joinString.isEmpty() && sb.length() > 0) {\n                // If join string is empty, no need to add separator\n                foldedSize += sb.length();\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb = new StringBuilder();\n            }\n            if (!joinString.isEmpty() && sb.length() > 0) {\n                // If join string is not empty, concatenate separator and string\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                foldedSize += sb.length();\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb = new StringBuilder();\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        // Add last string element to the list\n        foldedSize += sb.length();\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    // Compute code size savings from folding\n    int originalSize = InlineCostEstimator.getCost(n);\n    int foldedSizeAfterJoinCall = foldedSize + (arrayFoldedChildren.size() - 1) * joinString.length() + \"[].join()\".length() + InlineCostEstimator.getCost(right);\n\n    if (arrayFoldedChildren.size() == 1) {\n        // If folding was performed and join separator is not empty, verify that the code size improves\n        if (!joinString.isEmpty() && foldedSize > originalSize) {\n            return;\n        }\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedStringNode.getType() != Token.STRING) {\n            Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n            foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n    } else if (!arrayFoldedChildren.isEmpty()) {\n        // Update array nodes with the folded children\n        if (foldedSizeAfterJoinCall > originalSize) {\n            return;\n        }\n        arrayNode.detachChildren();\n        arrayFoldedChildren.forEach(arrayNode::addChildToBack);\n        arrayNode.putBooleanProp(Node.IMMUTABLE_PROP, true);\n        Node joinCallNode = IR.call(IR.getprop(IR.arraylit(), \"join\"), arrayNode, Node.newString(joinString));\n        joinCallNode.putBooleanProp(Node.IMMUTABLE_PROP, true);\n        parent.replaceChild(n, joinCallNode);\n    } else {\n        // Empty array becomes empty string\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..4c1d1c35 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,18 +1458,18 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n     if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+            !functionName.getString().equals(\"join\")) {\n+        return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n@@ -1477,76 +1477,71 @@ class FoldConstants extends AbstractPostOrderCallback\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        if (NodeUtil.isImmutableValue(elem)) {\n+            if (joinString.isEmpty() && sb.length() > 0) {\n+                // If join string is empty, no need to add separator\n+                foldedSize += sb.length();\n+                arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                sb = new StringBuilder();\n+            }\n+            if (!joinString.isEmpty() && sb.length() > 0) {\n+                // If join string is not empty, concatenate separator and string\n+                sb.append(joinString);\n+            }\n+            sb.append(NodeUtil.getStringValue(elem));\n+        } else {\n+            if (sb.length() > 0) {\n+                foldedSize += sb.length();\n+                arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                sb = new StringBuilder();\n+            }\n+            foldedSize += InlineCostEstimator.getCost(elem);\n+            arrayFoldedChildren.add(elem);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+        elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        // Add last string element to the list\n+        foldedSize += sb.length();\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n+    // Compute code size savings from folding\n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+    int foldedSizeAfterJoinCall = foldedSize + (arrayFoldedChildren.size() - 1) * joinString.length() + \"[].join()\".length() + InlineCostEstimator.getCost(right);\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n+    if (arrayFoldedChildren.size() == 1) {\n+        // If folding was performed and join separator is not empty, verify that the code size improves\n+        if (!joinString.isEmpty() && foldedSize > originalSize) {\n+            return;\n         }\n-        arrayNode.detachChildren();\n+        Node foldedStringNode = arrayFoldedChildren.remove(0);\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n+            Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n+            foldedStringNode = replacement;\n         }\n         parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n+    } else if (!arrayFoldedChildren.isEmpty()) {\n+        // Update array nodes with the folded children\n+        if (foldedSizeAfterJoinCall > originalSize) {\n+            return;\n         }\n         arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+        arrayFoldedChildren.forEach(arrayNode::addChildToBack);\n+        arrayNode.putBooleanProp(Node.IMMUTABLE_PROP, true);\n+        Node joinCallNode = IR.call(IR.getprop(IR.arraylit(), \"join\"), arrayNode, Node.newString(joinString));\n+        joinCallNode.putBooleanProp(Node.IMMUTABLE_PROP, true);\n+        parent.replaceChild(n, joinCallNode);\n+    } else {\n+        // Empty array becomes empty string\n+        Node emptyStringNode = Node.newString(\"\");\n+        parent.replaceChild(n, emptyStringNode);\n     }\n     t.getCompiler().reportCodeChange();\n-  }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}