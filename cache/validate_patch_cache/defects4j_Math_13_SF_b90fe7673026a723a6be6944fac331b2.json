{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (!isSymmetricPositiveDefinite(m)) {\n        throw new IllegalArgumentException(\"Matrix is not symmetric positive definite\");\n    }\n    \n    final EigenDecomposition eig = new EigenDecomposition(m);\n    final RealMatrix d = eig.getD();\n    final RealMatrix v = eig.getV();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        sqrtD.setEntry(i, i, Math.sqrt(Math.abs(d.getEntry(i, i))));\n    }\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}\n\nprivate boolean isSymmetricPositiveDefinite(RealMatrix m) {\n    if (!isSymmetric(m)) {\n        return false;\n    }\n\n    final CholeskyDecomposition chol = new CholeskyDecomposition(m);\n    final RealMatrix l = chol.getL();\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        if (l.getEntry(i, i) <= 0.0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean isSymmetric(RealMatrix m) {\n    return m.transpose().equals(m);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..91575eb5d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (!isSymmetricPositiveDefinite(m)) {\n+        throw new IllegalArgumentException(\"Matrix is not symmetric positive definite\");\n     }\n+    \n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    final RealMatrix d = eig.getD();\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        sqrtD.setEntry(i, i, Math.sqrt(Math.abs(d.getEntry(i, i))));\n+    }\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n+\n+private boolean isSymmetricPositiveDefinite(RealMatrix m) {\n+    if (!isSymmetric(m)) {\n+        return false;\n+    }\n+\n+    final CholeskyDecomposition chol = new CholeskyDecomposition(m);\n+    final RealMatrix l = chol.getL();\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        if (l.getEntry(i, i) <= 0.0) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private boolean isSymmetric(RealMatrix m) {\n+    return m.transpose().equals(m);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}