{
    "patch": "    if (argList.hasChildren()) {\n      Node arg = argList.getFirstChild();\n      Node lastArg = argList.getLastChild();\n      while (arg != lastArg) {\n        if (!arg.hasMoreThanOneChild() && !arg.getBooleanProp(Node.IS_DUMMY)) {\n          Var var = fnScope.getVar(arg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n            continue;\n          }\n        }\n        arg = arg.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b05eeaff 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (argList.hasChildren()) {\n+      Node arg = argList.getFirstChild();\n+      Node lastArg = argList.getLastChild();\n+      while (arg != lastArg) {\n+        if (!arg.hasMoreThanOneChild() && !arg.getBooleanProp(Node.IS_DUMMY)) {\n+          Var var = fnScope.getVar(arg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+            continue;\n+          }\n+        }\n+        arg = arg.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}