{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = false;\n  if (name == null) {\n    isUnnamedFunction = true;\n    name = new Name();\n    name.setIdentifier(\"\");\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n  node.addChildToBack(newName);\n\n  Node lpNode = newNode(Token.LP);\n  lpNode.setLineno(functionNode.getLineno());\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lpNode.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lpNode.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lpNode);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..d536b890 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,38 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+  Name name = functionNode.getFunctionName();\n+  boolean isUnnamedFunction = false;\n+  if (name == null) {\n+    isUnnamedFunction = true;\n+    name = new Name();\n+    name.setIdentifier(\"\");\n+  }\n+  Node node = newNode(Token.FUNCTION);\n+  Node newName = transform(name);\n+  if (isUnnamedFunction) {\n+    newName.setLineno(functionNode.getLineno());\n+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+    newName.setCharno(position2charno(lpColumn));\n+  }\n+  node.addChildToBack(newName);\n+\n+  Node lpNode = newNode(Token.LP);\n+  lpNode.setLineno(functionNode.getLineno());\n+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+  lpNode.setCharno(position2charno(lparenCharno));\n+  for (AstNode param : functionNode.getParams()) {\n+    lpNode.addChildToBack(transform(param));\n+  }\n+  node.addChildToBack(lpNode);\n+\n+  Node bodyNode = transform(functionNode.getBody());\n+  parseDirectives(bodyNode);\n+  node.addChildToBack(bodyNode);\n+  return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}