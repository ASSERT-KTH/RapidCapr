{
    "patch": "        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n            try {\n                return Integer.parseInt(val.substring(2), 2);\n            } catch (NumberFormatException notBinary) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        }   ",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..992b653a 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -149,6 +149,23 @@ public final class NumberUtils {\n             // a wrong value.\n             return null;\n         }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n+            try {\n+                return Integer.parseInt(val.substring(2), 2);\n+            } catch (NumberFormatException notBinary) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+        }   \n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            return null;\n+        }\n         if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n             return createInteger(val);\n         }   ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}