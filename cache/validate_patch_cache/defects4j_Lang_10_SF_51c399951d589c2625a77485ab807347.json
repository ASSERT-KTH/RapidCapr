{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    boolean inLiteral= false;\n    boolean inYear= false;\n    boolean escapedYear= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n        if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                wasWhite= true;\n                if(!inLiteral) {\n                    regex.append(\"\\\\s*+\");\n                }\n            }\n            continue;\n        }\n        wasWhite= false;\n        switch(c) {\n            case '\\'':\n                if (inLiteral) {\n                    // end of literal\n                    inLiteral= false;\n                } else if (unquote) {\n                    // start of literal\n                    inLiteral= true;\n                }\n                escapedYear= false;\n                break;\n            case 'G':\n            case 'y':\n            case 'M':\n            case 'd':\n            case 'h':\n            case 'a':\n            case 'H':\n            case 'm':\n            case 's':\n            case 'S':\n            case 'z':\n            case 'Z':\n                if (!inLiteral && !escapedYear) {\n                    if(!inYear) {\n                        regex.append(\"(?:\");\n                    }\n                    inYear= true;\n                }\n                escapedYear= false;\n                break;\n            case '\\\\':\n            case '|':\n            case '?':\n            case '*':\n            case '+':\n            case '.':\n            case '^':\n            case '$':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n                if (!inLiteral && !escapedYear) {\n                    if(inYear) {\n                        regex.append(\")\");\n                        inYear= false;\n                    }\n                    regex.append(\"\\\\\");\n                }\n                escapedYear= false;\n                break;\n            case '-':\n                if(!inLiteral && !escapedYear && inYear) {\n                    regex.append(\"-\");\n                } else if(!inLiteral && !escapedYear) {\n                    if(inYear) {\n                        regex.append(\")\");\n                        inYear = false;\n                    }\n                    regex.append(\"-\");\n                } else {\n                    regex.append(c);\n                }\n                escapedYear = false;\n                break;\n            default:\n                escapedYear= false;\n                if(!Character.isLetterOrDigit(c) && !Character.isWhitespace(c)) {\n                    if(inYear) {\n                        regex.append(\")\");\n                        inYear= false;\n                    }\n                    regex.append(\"\\\\\");\n                }\n                break;\n        }\n        regex.append(c);\n    }\n    if(inYear) {\n        regex.append(\")\");\n        inYear = false;\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..411c078c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,108 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite= false;\n+    boolean inLiteral= false;\n+    boolean inYear= false;\n+    boolean escapedYear= false;\n+    for(int i= 0; i<value.length(); ++i) {\n+        char c= value.charAt(i);\n+        if(Character.isWhitespace(c)) {\n+            if(!wasWhite) {\n+                wasWhite= true;\n+                if(!inLiteral) {\n                     regex.append(\"\\\\s*+\");\n                 }\n-                continue;\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite= false;\n+        switch(c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (inLiteral) {\n+                    // end of literal\n+                    inLiteral= false;\n+                } else if (unquote) {\n+                    // start of literal\n+                    inLiteral= true;\n+                }\n+                escapedYear= false;\n+                break;\n+            case 'G':\n+            case 'y':\n+            case 'M':\n+            case 'd':\n+            case 'h':\n+            case 'a':\n+            case 'H':\n+            case 'm':\n+            case 's':\n+            case 'S':\n+            case 'z':\n+            case 'Z':\n+                if (!inLiteral && !escapedYear) {\n+                    if(!inYear) {\n+                        regex.append(\"(?:\");\n                     }\n-                    c= value.charAt(i);\n+                    inYear= true;\n                 }\n+                escapedYear= false;\n                 break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n             case '\\\\':\n             case '|':\n+            case '?':\n             case '*':\n             case '+':\n+            case '.':\n             case '^':\n             case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+            case '(':\n+            case ')':\n+            case '{':\n+            case '}':\n+                if (!inLiteral && !escapedYear) {\n+                    if(inYear) {\n+                        regex.append(\")\");\n+                        inYear= false;\n+                    }\n+                    regex.append(\"\\\\\");\n+                }\n+                escapedYear= false;\n+                break;\n+            case '-':\n+                if(!inLiteral && !escapedYear && inYear) {\n+                    regex.append(\"-\");\n+                } else if(!inLiteral && !escapedYear) {\n+                    if(inYear) {\n+                        regex.append(\")\");\n+                        inYear = false;\n+                    }\n+                    regex.append(\"-\");\n+                } else {\n+                    regex.append(c);\n+                }\n+                escapedYear = false;\n+                break;\n+            default:\n+                escapedYear= false;\n+                if(!Character.isLetterOrDigit(c) && !Character.isWhitespace(c)) {\n+                    if(inYear) {\n+                        regex.append(\")\");\n+                        inYear= false;\n+                    }\n+                    regex.append(\"\\\\\");\n+                }\n+                break;\n         }\n-        return regex;\n+        regex.append(c);\n+    }\n+    if(inYear) {\n+        regex.append(\")\");\n+        inYear = false;\n     }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}