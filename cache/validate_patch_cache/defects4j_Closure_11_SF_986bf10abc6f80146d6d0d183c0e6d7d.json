{
    "patch": "public static void getPropertyWarnings(Properties props) {\n    Enumeration<?> propNames = props.propertyNames();\n    while (propNames.hasMoreElements()) {\n        String propName = (String) propNames.nextElement();\n        if (propName.startsWith(\"warn.\")) {\n            String warning = props.getProperty(propName);\n            System.out.println(\"Warning: \" + warning);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b36cdfcd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static void getPropertyWarnings(Properties props) {\n+    Enumeration<?> propNames = props.propertyNames();\n+    while (propNames.hasMoreElements()) {\n+        String propName = (String) propNames.nextElement();\n+        if (propName.startsWith(\"warn.\")) {\n+            String warning = props.getProperty(propName);\n+            System.out.println(\"Warning: \" + warning);\n+        }\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}