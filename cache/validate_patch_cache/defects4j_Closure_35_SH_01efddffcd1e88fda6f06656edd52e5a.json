{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!objType.hasProperty(prop)) {\n                    typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                }\n                String inferredDescription = null;\n                if (propType.hasInferredTypeMarker()) {\n                    inferredDescription = \"inferred type: \" + propType.getResolvedInferredType();\n                }\n                JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n                objType.defineInferredProperty(prop, inferred, inferredDescription);\n            }\n        }\n    }\n}``",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..ec1bef31 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,26 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (!objType.isPropertyTypeDeclared(prop)) {\n+                JSType typeToInfer = propType;\n+                if (!objType.hasProperty(prop)) {\n+                    typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+                }\n+                String inferredDescription = null;\n+                if (propType.hasInferredTypeMarker()) {\n+                    inferredDescription = \"inferred type: \" + propType.getResolvedInferredType();\n+                }\n+                JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n+                objType.defineInferredProperty(prop, inferred, inferredDescription);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n         }\n-      }\n+    }\n+}``\n     }\n   }\n ",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}