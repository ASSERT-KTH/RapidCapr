{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    ControlFlowGraph<Node> cfg = getCfg();\n    List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n      if (outEdge.getValue() == Branch.ON_EX || outEdge.getValue() == Branch.ON_EX_GEN) {\n        return true;\n      }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..ddae902d 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,16 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    ControlFlowGraph<Node> cfg = getCfg();\n+    List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+      if (outEdge.getValue() == Branch.ON_EX || outEdge.getValue() == Branch.ON_EX_GEN) {\n+        return true;\n+      }\n+    }\n+    return false;\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}