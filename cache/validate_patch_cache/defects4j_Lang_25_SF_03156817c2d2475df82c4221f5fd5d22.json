{
    "patch": "import java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class StringUtil {\n    public static String unescape(String input) {\n        StringBuilder result = new StringBuilder();\n        Charset charset = StandardCharsets.ISO_8859_1;\n        for (int i = 0; i < input.length(); i++) {\n            char ch = input.charAt(i);\n            if (ch == '\\\\') {\n                if (i + 5 < input.length() && input.charAt(i + 1) == 'u') {\n                    try {\n                        int code = Integer.parseInt(input.substring(i + 2, i + 6), 16);\n                        result.append((char) code);\n                        i += 5;\n                    } catch (NumberFormatException e) {\n                        result.append(ch);\n                    }\n                } else {\n                    if (i + 1 < input.length()) {\n                        ch = input.charAt(++i);\n                    }\n                    if (ch == 't') {\n                        result.append('\\t');\n                    } else if (ch == 'r') {\n                        result.append('\\r');\n                    } else if (ch == 'n') {\n                        result.append('\\n');\n                    } else if (ch == 'f') {\n                        result.append('\\f');\n                    } else if (ch == 'b') {\n                        result.append('\\b');\n                    } else {\n                        result.append(ch);\n                    }\n                }\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..0849ee67 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,49 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+public class StringUtil {\n+    public static String unescape(String input) {\n+        StringBuilder result = new StringBuilder();\n+        Charset charset = StandardCharsets.ISO_8859_1;\n+        for (int i = 0; i < input.length(); i++) {\n+            char ch = input.charAt(i);\n+            if (ch == '\\\\') {\n+                if (i + 5 < input.length() && input.charAt(i + 1) == 'u') {\n+                    try {\n+                        int code = Integer.parseInt(input.substring(i + 2, i + 6), 16);\n+                        result.append((char) code);\n+                        i += 5;\n+                    } catch (NumberFormatException e) {\n+                        result.append(ch);\n+                    }\n+                } else {\n+                    if (i + 1 < input.length()) {\n+                        ch = input.charAt(++i);\n+                    }\n+                    if (ch == 't') {\n+                        result.append('\\t');\n+                    } else if (ch == 'r') {\n+                        result.append('\\r');\n+                    } else if (ch == 'n') {\n+                        result.append('\\n');\n+                    } else if (ch == 'f') {\n+                        result.append('\\f');\n+                    } else if (ch == 'b') {\n+                        result.append('\\b');\n+                    } else {\n+                        result.append(ch);\n+                    }\n+                }\n+            } else {\n+                result.append(ch);\n+            }\n+        }\n+        return result.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}