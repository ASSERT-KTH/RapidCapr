{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n\n    weeks += days / 7;\n    days %= 7;\n\n    months += weeks / 4;\n    weeks %= 4;\n\n    years += months / 12;\n    months %= 12;\n\n    int totalMonths = years * 12 + months;\n    if (totalMonths != 0) {\n        result = result.withMonths(totalMonths);\n    }\n    if (weeks != 0) {\n        result = result.withWeeks(weeks);\n    }\n    if (days != 0) {\n        result = result.withDays(days);\n    }\n\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..c81583e2 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,41 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n+            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+\n+    weeks += days / 7;\n+    days %= 7;\n+\n+    months += weeks / 4;\n+    weeks %= 4;\n+\n+    years += months / 12;\n+    months %= 12;\n+\n+    int totalMonths = years * 12 + months;\n+    if (totalMonths != 0) {\n+        result = result.withMonths(totalMonths);\n     }\n+    if (weeks != 0) {\n+        result = result.withWeeks(weeks);\n+    }\n+    if (days != 0) {\n+        result = result.withDays(days);\n+    }\n+\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}