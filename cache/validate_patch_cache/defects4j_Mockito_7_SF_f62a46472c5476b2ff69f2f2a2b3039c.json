{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n    if (declaringClass.isLocalClass() || declaringClass.isAnonymousClass()) {\n        // try to find the enclosing class\n        Class<?> enclosingClass = declaringClass.getEnclosingClass();\n        if (enclosingClass != null) {\n            TypeVariable<?>[] enclosingTypeVariables = enclosingClass.getTypeParameters();\n            for (int i = 0; i < enclosingTypeVariables.length; i++) {\n                if (enclosingTypeVariables[i].getName().equals(typeVariable.getName())) {\n                    // recursively search the enclosing class for the type argument\n                    Type enclosingType = getClassGenericType(enclosingClass, i);\n                    if (enclosingType instanceof TypeVariable) {\n                        enclosingType = getActualTypeArgumentFor((TypeVariable<?>) enclosingType);\n                    }\n                    return enclosingType;\n                }\n            }\n        }\n    } else {\n        if (typeVariable.getName().equals(\"T\") && declaringClass instanceof Class) {\n            int index = Arrays.asList(((Class<?>) declaringClass).getTypeParameters()).indexOf(typeVariable);\n            if (index >= 0) {\n                Type type = getClassGenericType(getClass(), index);\n                if (type != null) {\n                    return type;\n                }\n            }\n        } else if (declaringClass instanceof ParameterizedType) {\n            int index = Arrays.asList(((ParameterizedType) declaringClass).getActualTypeArguments()).indexOf(typeVariable);\n            if (index >= 0) {\n                Type type = getClassGenericType(getClass(), index);\n                if (type != null) {\n                    return type;\n                }\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..e7f486c27 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,46 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n+    if (declaringClass.isLocalClass() || declaringClass.isAnonymousClass()) {\n+        // try to find the enclosing class\n+        Class<?> enclosingClass = declaringClass.getEnclosingClass();\n+        if (enclosingClass != null) {\n+            TypeVariable<?>[] enclosingTypeVariables = enclosingClass.getTypeParameters();\n+            for (int i = 0; i < enclosingTypeVariables.length; i++) {\n+                if (enclosingTypeVariables[i].getName().equals(typeVariable.getName())) {\n+                    // recursively search the enclosing class for the type argument\n+                    Type enclosingType = getClassGenericType(enclosingClass, i);\n+                    if (enclosingType instanceof TypeVariable) {\n+                        enclosingType = getActualTypeArgumentFor((TypeVariable<?>) enclosingType);\n+                    }\n+                    return enclosingType;\n+                }\n+            }\n+        }\n+    } else {\n+        if (typeVariable.getName().equals(\"T\") && declaringClass instanceof Class) {\n+            int index = Arrays.asList(((Class<?>) declaringClass).getTypeParameters()).indexOf(typeVariable);\n+            if (index >= 0) {\n+                Type type = getClassGenericType(getClass(), index);\n+                if (type != null) {\n+                    return type;\n+                }\n+            }\n+        } else if (declaringClass instanceof ParameterizedType) {\n+            int index = Arrays.asList(((ParameterizedType) declaringClass).getActualTypeArguments()).indexOf(typeVariable);\n+            if (index >= 0) {\n+                Type type = getClassGenericType(getClass(), index);\n+                if (type != null) {\n+                    return type;\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}