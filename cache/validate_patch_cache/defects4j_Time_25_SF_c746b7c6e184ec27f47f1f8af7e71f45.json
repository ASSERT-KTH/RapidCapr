{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the current offset at the local time\n    int offsetBefore = getOffset(instantLocal - 1);\n    int offsetLocal = getOffset(instantLocal);\n\n    // if there is no transition, return the current offset\n    if (offsetBefore == offsetLocal) {\n        return offsetLocal;\n    }\n\n    // get the next and previous transition times\n    long nextTransition = nextTransition(instantLocal);\n    long prevTransition = previousTransition(instantLocal);\n\n    // adjust the transitions using the current offset\n    long nextTransitionAdjusted = nextTransition - offsetLocal;\n    long prevTransitionAdjusted = prevTransition - offsetBefore;\n\n    // if the local time is in a transition interval\n    if (nextTransitionAdjusted <= instantLocal || instantLocal < prevTransitionAdjusted) {\n        // determine if the current offset is valid for the interval\n        if (offsetLocal < getOffset(prevTransitionAdjusted)) {\n            // if the current offset is invalid for the interval, use the previous offset\n            return offsetBefore;\n        } else if (offsetLocal > getOffset(nextTransitionAdjusted)) {\n            // if the current offset is invalid for the interval, use the next offset\n            return getOffset(nextTransitionAdjusted);\n        }\n    }\n\n    // return the current offset\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..dee06ea2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,40 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the current offset at the local time\n+    int offsetBefore = getOffset(instantLocal - 1);\n+    int offsetLocal = getOffset(instantLocal);\n+\n+    // if there is no transition, return the current offset\n+    if (offsetBefore == offsetLocal) {\n+        return offsetLocal;\n+    }\n+\n+    // get the next and previous transition times\n+    long nextTransition = nextTransition(instantLocal);\n+    long prevTransition = previousTransition(instantLocal);\n+\n+    // adjust the transitions using the current offset\n+    long nextTransitionAdjusted = nextTransition - offsetLocal;\n+    long prevTransitionAdjusted = prevTransition - offsetBefore;\n+\n+    // if the local time is in a transition interval\n+    if (nextTransitionAdjusted <= instantLocal || instantLocal < prevTransitionAdjusted) {\n+        // determine if the current offset is valid for the interval\n+        if (offsetLocal < getOffset(prevTransitionAdjusted)) {\n+            // if the current offset is invalid for the interval, use the previous offset\n+            return offsetBefore;\n+        } else if (offsetLocal > getOffset(nextTransitionAdjusted)) {\n+            // if the current offset is invalid for the interval, use the next offset\n+            return getOffset(nextTransitionAdjusted);\n         }\n-        return offsetAdjusted;\n     }\n \n+    // return the current offset\n+    return offsetLocal;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}