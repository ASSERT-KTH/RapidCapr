{
    "patch": "public String getProp(String propName) throws Exception {\n    Properties props = new Properties();\n    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n    props.load(inputStream);\n    String propValue = props.getProperty(propName);\n    if (propValue == null || propValue.isEmpty()) {\n        throw new IllegalArgumentException(\"Property value cannot be null or empty!\");\n    }\n    return propValue;\n}\n\npublic void testGetprop4() {\n    try {\n        String[] warnings = { getProp(\"warning1\"), getProp(\"warning2\") };\n        assertTrue(\"expected a warning\", warnings.length > 0);\n    } catch (Exception e) {\n        fail(\"unexpected exception: \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..e9429189 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String propName) throws Exception {\n+    Properties props = new Properties();\n+    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n+    props.load(inputStream);\n+    String propValue = props.getProperty(propName);\n+    if (propValue == null || propValue.isEmpty()) {\n+        throw new IllegalArgumentException(\"Property value cannot be null or empty!\");\n+    }\n+    return propValue;\n+}\n+\n+public void testGetprop4() {\n+    try {\n+        String[] warnings = { getProp(\"warning1\"), getProp(\"warning2\") };\n+        assertTrue(\"expected a warning\", warnings.length > 0);\n+    } catch (Exception e) {\n+        fail(\"unexpected exception: \" + e.getMessage());\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}