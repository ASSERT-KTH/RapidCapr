{
    "patch": "  private boolean isDirective(Node n) {\n    if (n == null || n.getType() != Token.EXPR_RESULT || !n.hasChildren()) {\n      return false;\n    }\n\n    Node firstChild = n.getFirstChild();\n    return firstChild.isString() && ALLOWED_DIRECTIVES.contains(firstChild.getString());\n  }\n\n  @Override\n  Node processBlock(Block blockNode) throws RuntimeException {\n    return processGenericChildren(blockNode);\n  }\n\n  @Override\n  Node processBreakStatement(BreakStatement statementNode) throws RuntimeException {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getBreakLabel() != null) {\n      Node labelName = transform(statementNode.getBreakLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processCatchClause(CatchClause clauseNode) throws RuntimeException {\n    AstNode catchVar = clauseNode.getVarName();\n    Node node = newNode(Token.CATCH, transform(catchVar));\n    if (clauseNode.getCatchCondition() != null) {\n      errorReporter.error(\n          \"Catch clauses are not supported\",\n          sourceName,\n          clauseNode.getCatchCondition().getLineno(),\n          \"\",\n          0);\n    }\n    node.addChildToBack(transformBlock(clauseNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processConditionalExpression(ConditionalExpression exprNode) throws RuntimeException {\n    return newNode(\n        Token.HOOK,\n        transform(exprNode.getTestExpression()),\n        transform(exprNode.getTrueExpression()),\n        transform(exprNode.getFalseExpression()));\n  }\n\n  @Override\n  Node processContinueStatement(ContinueStatement statementNode) throws RuntimeException {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n      Node labelName = transform(statementNode.getLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processDoLoop(DoLoop loopNode) throws RuntimeException {\n    return newNode(Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));\n  }\n\n  @Override\n  Node processElementGet(ElementGet getNode) throws RuntimeException {\n    return newNode(Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));\n  }\n\n  @Override\n  Node processEmptyExpression(EmptyExpression exprNode) throws RuntimeException {\n    return newNode(Token.EMPTY);\n  }\n\n  @Override\n  Node processExpressionStatement(ExpressionStatement statementNode) throws RuntimeException {\n    Node node = newNode(transformTokenType(statementNode.getType()));\n    node.addChildToBack(transform(statementNode.getExpression()));\n    return node;\n  }\n\n  @Override\n  Node processForInLoop(ForInLoop loopNode) throws RuntimeException {\n    Node varNode = null;\n    AstNode iterNode = loopNode.getIterator();\n    if (iterNode instanceof VariableDeclaration) {\n      if (((VariableDeclaration)iterNode).getType() == Token.VAR) {\n        // Swap out var with let\n        ((VariableDeclaration)iterNode).setType(Token.LET);\n      }\n      varNode = transform(iterNode);\n    } else {\n      varNode = newNode(Token.EMPTY);\n    }\n    return newNode(\n        Token.FOR,\n        varNode,\n        transform(loopNode.getIteratedObject()),\n        transformBlock(loopNode.getBody()));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..f3c92de0 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,110 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  private boolean isDirective(Node n) {\n+    if (n == null || n.getType() != Token.EXPR_RESULT || !n.hasChildren()) {\n+      return false;\n     }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+    Node firstChild = n.getFirstChild();\n+    return firstChild.isString() && ALLOWED_DIRECTIVES.contains(firstChild.getString());\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  Node processBlock(Block blockNode) throws RuntimeException {\n+    return processGenericChildren(blockNode);\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+  @Override\n+  Node processBreakStatement(BreakStatement statementNode) throws RuntimeException {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getBreakLabel() != null) {\n+      Node labelName = transform(statementNode.getBreakLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  @Override\n+  Node processCatchClause(CatchClause clauseNode) throws RuntimeException {\n+    AstNode catchVar = clauseNode.getVarName();\n+    Node node = newNode(Token.CATCH, transform(catchVar));\n+    if (clauseNode.getCatchCondition() != null) {\n+      errorReporter.error(\n+          \"Catch clauses are not supported\",\n+          sourceName,\n+          clauseNode.getCatchCondition().getLineno(),\n+          \"\",\n+          0);\n     }\n+    node.addChildToBack(transformBlock(clauseNode.getBody()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  Node processConditionalExpression(ConditionalExpression exprNode) throws RuntimeException {\n+    return newNode(\n+        Token.HOOK,\n+        transform(exprNode.getTestExpression()),\n+        transform(exprNode.getTrueExpression()),\n+        transform(exprNode.getFalseExpression()));\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  @Override\n+  Node processContinueStatement(ContinueStatement statementNode) throws RuntimeException {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+      Node labelName = transform(statementNode.getLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  @Override\n+  Node processDoLoop(DoLoop loopNode) throws RuntimeException {\n+    return newNode(Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  Node processElementGet(ElementGet getNode) throws RuntimeException {\n+    return newNode(Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  @Override\n+  Node processEmptyExpression(EmptyExpression exprNode) throws RuntimeException {\n+    return newNode(Token.EMPTY);\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  @Override\n+  Node processExpressionStatement(ExpressionStatement statementNode) throws RuntimeException {\n+    Node node = newNode(transformTokenType(statementNode.getType()));\n+    node.addChildToBack(transform(statementNode.getExpression()));\n+    return node;\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+  @Override\n+  Node processForInLoop(ForInLoop loopNode) throws RuntimeException {\n+    Node varNode = null;\n+    AstNode iterNode = loopNode.getIterator();\n+    if (iterNode instanceof VariableDeclaration) {\n+      if (((VariableDeclaration)iterNode).getType() == Token.VAR) {\n+        // Swap out var with let\n+        ((VariableDeclaration)iterNode).setType(Token.LET);\n+      }\n+      varNode = transform(iterNode);\n+    } else {\n+      varNode = newNode(Token.EMPTY);\n     }\n+    return newNode(\n+        Token.FOR,\n+        varNode,\n+        transform(loopNode.getIteratedObject()),\n+        transformBlock(loopNode.getBody()));\n+  }\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}