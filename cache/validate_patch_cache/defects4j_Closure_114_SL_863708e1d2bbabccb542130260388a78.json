{
    "patch": "        } else if (parent.isCall() && NodeUtil.isExpressionResultUsed(parent) && parent.getFirstChild() == n) {\n            // Caller is used as part of a larger expression - mark dependencies on the actual args.\n            for (Node arg = n.getNext(); arg != null; arg = arg.getNext()) {\n              if (arg.isSpread()) {\n                recordDepScope(arg.getFirstChild(), ns);\n              } else {\n                recordDepScope(arg, ns);\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..35c7b88e 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,15 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        } else if (parent.isCall() && NodeUtil.isExpressionResultUsed(parent) && parent.getFirstChild() == n) {\n+            // Caller is used as part of a larger expression - mark dependencies on the actual args.\n+            for (Node arg = n.getNext(); arg != null; arg = arg.getNext()) {\n+              if (arg.isSpread()) {\n+                recordDepScope(arg.getFirstChild(), ns);\n+              } else {\n+                recordDepScope(arg, ns);\n+              }\n+            }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}