{
    "patch": "TypeVariable<?>[] typeArguments = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\nfor (int i = 0; i < typeArguments.length; i++) {\n    if (typeVariable.equals(typeArguments[i])) {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null && actualTypeArgument instanceof Class)\n            break;\n        if (actualTypeArgument instanceof ParameterizedType)\n            registerTypeVariablesOn(actualTypeArgument);\n        else\n            registerTypeVariablesOn(typeVariable.getBounds()[0]);\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..71d578df4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+TypeVariable<?>[] typeArguments = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n+for (int i = 0; i < typeArguments.length; i++) {\n+    if (typeVariable.equals(typeArguments[i])) {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null && actualTypeArgument instanceof Class)\n+            break;\n+        if (actualTypeArgument instanceof ParameterizedType)\n+            registerTypeVariablesOn(actualTypeArgument);\n+        else\n+            registerTypeVariablesOn(typeVariable.getBounds()[0]);\n+        break;\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.ClassCastException: java.lang.reflect.Method cannot be cast to java.lang.Class",
    "test_result": "FAIL"
}