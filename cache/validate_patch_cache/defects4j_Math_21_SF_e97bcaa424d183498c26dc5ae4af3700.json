{
    "patch": "public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n\n    int[] pivot = new int[order];\n    for (int i = 0; i < order; ++i) {\n        pivot[i] = i;\n    }\n\n    int r = 0;\n    for (int i = 0; i < order; ++i) {\n\n        // find maximal diagonal element\n        int maxIndex = i;\n        double maxDiag = c[pivot[i]][pivot[i]];\n        for (int j = i + 1; j < order; j++) {\n            final int candidatInt = pivot[j];\n            final double candidatDiag = c[candidatInt][candidatInt];\n            if (candidatDiag > maxDiag) {\n                maxIndex = j;\n                maxDiag = candidatDiag;\n            }\n        }\n\n        // swap elements\n        final int tmp = pivot[i];\n        pivot[i] = pivot[maxIndex];\n        pivot[maxIndex] = tmp;\n\n        // check diagonal element\n        final double diag = c[pivot[i]][pivot[i]];\n        if (diag < small) {\n\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(diag, i, small);\n            }\n\n            // check remaining diagonal elements\n            for (int k = i; k < order; ++k) {\n                final double remainingDiag = c[pivot[k]][pivot[k]];\n                if (remainingDiag < -small) {\n                    // there is at least one sufficiently negative diagonal element,\n                    // the symmetric positive semidefinite matrix is wrong\n                    throw new NonPositiveDefiniteMatrixException(remainingDiag, k, small);\n                }\n            }\n\n            // all remaining diagonal elements are close to zero, we consider we have\n            // found the rank of the symmetric positive semidefinite matrix\n            break;\n        }\n\n        // transform the matrix\n        final double sqrt = FastMath.sqrt(diag);\n        b[pivot[i]][r] = sqrt;\n        final double inverse = 1.0 / sqrt;\n        for (int j = i + 1; j < order; ++j) {\n            final int rowJ = pivot[j];\n            final double entrJi = (c[rowJ][pivot[i]] - computeEntries(b, c, pivot, rowJ, r)) * inverse;\n            b[rowJ][r] = entrJi;\n\n            c[rowJ][rowJ] = c[rowJ][rowJ] - entrJi * entrJi;\n            for (int k = r + 1; k < j; ++k) {\n                final int rowK = pivot[k];\n                final double f = c[rowJ][rowK] - entrJi * b[rowK][r];\n                c[rowJ][rowK] = f;\n                c[rowK][rowJ] = f;\n            }\n        }\n        r++;\n    }\n\n    // build the root matrix\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < r; ++j) {\n            root.setEntry(pivot[i], j, b[i][j]);\n        }\n    }\n}\n\nprivate static double computeEntries(double[][] W, double[][] C, int[] p, int row, int r) {\n    double value = 0;\n    for (int k = 0; k < r; ++k) {\n        value += W[p[row]][k] * W[p[k]][k] * C[p[row]][p[k]];\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\nindex 04488e593..616620b20 100644\n--- a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n@@ -59,96 +59,98 @@ public class RectangularCholeskyDecomposition {\n      * @exception NonPositiveDefiniteMatrixException if the matrix is not\n      * positive semidefinite.\n      */\n-    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n+public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n         throws NonPositiveDefiniteMatrixException {\n \n-        final int order = matrix.getRowDimension();\n-        final double[][] c = matrix.getData();\n-        final double[][] b = new double[order][order];\n+    final int order = matrix.getRowDimension();\n+    final double[][] c = matrix.getData();\n+    final double[][] b = new double[order][order];\n \n-        int[] swap  = new int[order];\n-        int[] index = new int[order];\n-        for (int i = 0; i < order; ++i) {\n-            index[i] = i;\n-        }\n-\n-        int r = 0;\n-        for (boolean loop = true; loop;) {\n+    int[] pivot = new int[order];\n+    for (int i = 0; i < order; ++i) {\n+        pivot[i] = i;\n+    }\n \n-            // find maximal diagonal element\n-            swap[r] = r;\n-            for (int i = r + 1; i < order; ++i) {\n-                int ii  = index[i];\n-                int isi = index[swap[i]];\n-                if (c[ii][ii] > c[isi][isi]) {\n-                    swap[r] = i;\n-                }\n+    int r = 0;\n+    for (int i = 0; i < order; ++i) {\n+\n+        // find maximal diagonal element\n+        int maxIndex = i;\n+        double maxDiag = c[pivot[i]][pivot[i]];\n+        for (int j = i + 1; j < order; j++) {\n+            final int candidatInt = pivot[j];\n+            final double candidatDiag = c[candidatInt][candidatInt];\n+            if (candidatDiag > maxDiag) {\n+                maxIndex = j;\n+                maxDiag = candidatDiag;\n             }\n+        }\n \n+        // swap elements\n+        final int tmp = pivot[i];\n+        pivot[i] = pivot[maxIndex];\n+        pivot[maxIndex] = tmp;\n \n-            // swap elements\n-            if (swap[r] != r) {\n-                int tmp = index[r];\n-                index[r] = index[swap[r]];\n-                index[swap[r]] = tmp;\n-            }\n-\n-            // check diagonal element\n-            int ir = index[r];\n-            if (c[ir][ir] < small) {\n+        // check diagonal element\n+        final double diag = c[pivot[i]][pivot[i]];\n+        if (diag < small) {\n \n-                if (r == 0) {\n-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n-                }\n+            if (r == 0) {\n+                throw new NonPositiveDefiniteMatrixException(diag, i, small);\n+            }\n \n-                // check remaining diagonal elements\n-                for (int i = r; i < order; ++i) {\n-                    if (c[index[i]][index[i]] < -small) {\n-                        // there is at least one sufficiently negative diagonal element,\n-                        // the symmetric positive semidefinite matrix is wrong\n-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n-                    }\n+            // check remaining diagonal elements\n+            for (int k = i; k < order; ++k) {\n+                final double remainingDiag = c[pivot[k]][pivot[k]];\n+                if (remainingDiag < -small) {\n+                    // there is at least one sufficiently negative diagonal element,\n+                    // the symmetric positive semidefinite matrix is wrong\n+                    throw new NonPositiveDefiniteMatrixException(remainingDiag, k, small);\n                 }\n+            }\n \n-                // all remaining diagonal elements are close to zero, we consider we have\n-                // found the rank of the symmetric positive semidefinite matrix\n-                ++r;\n-                loop = false;\n-\n-            } else {\n-\n-                // transform the matrix\n-                final double sqrt = FastMath.sqrt(c[ir][ir]);\n-                b[r][r] = sqrt;\n-                final double inverse  = 1 / sqrt;\n-                for (int i = r + 1; i < order; ++i) {\n-                    final int ii = index[i];\n-                    final double e = inverse * c[ii][ir];\n-                    b[i][r] = e;\n-                    c[ii][ii] -= e * e;\n-                    for (int j = r + 1; j < i; ++j) {\n-                        final int ij = index[j];\n-                        final double f = c[ii][ij] - e * b[j][r];\n-                        c[ii][ij] = f;\n-                        c[ij][ii] = f;\n-                    }\n-                }\n+            // all remaining diagonal elements are close to zero, we consider we have\n+            // found the rank of the symmetric positive semidefinite matrix\n+            break;\n+        }\n \n-                // prepare next iteration\n-                loop = ++r < order;\n+        // transform the matrix\n+        final double sqrt = FastMath.sqrt(diag);\n+        b[pivot[i]][r] = sqrt;\n+        final double inverse = 1.0 / sqrt;\n+        for (int j = i + 1; j < order; ++j) {\n+            final int rowJ = pivot[j];\n+            final double entrJi = (c[rowJ][pivot[i]] - computeEntries(b, c, pivot, rowJ, r)) * inverse;\n+            b[rowJ][r] = entrJi;\n+\n+            c[rowJ][rowJ] = c[rowJ][rowJ] - entrJi * entrJi;\n+            for (int k = r + 1; k < j; ++k) {\n+                final int rowK = pivot[k];\n+                final double f = c[rowJ][rowK] - entrJi * b[rowK][r];\n+                c[rowJ][rowK] = f;\n+                c[rowK][rowJ] = f;\n             }\n         }\n+        r++;\n+    }\n \n-        // build the root matrix\n-        rank = r;\n-        root = MatrixUtils.createRealMatrix(order, r);\n-        for (int i = 0; i < order; ++i) {\n-            for (int j = 0; j < r; ++j) {\n-                root.setEntry(index[i], j, b[i][j]);\n-            }\n+    // build the root matrix\n+    rank = r;\n+    root = MatrixUtils.createRealMatrix(order, r);\n+    for (int i = 0; i < order; ++i) {\n+        for (int j = 0; j < r; ++j) {\n+            root.setEntry(pivot[i], j, b[i][j]);\n         }\n+    }\n+}\n \n+private static double computeEntries(double[][] W, double[][] C, int[] p, int row, int r) {\n+    double value = 0;\n+    for (int k = 0; k < r; ++k) {\n+        value += W[p[row]][k] * W[p[k]][k] * C[p[row]][p[k]];\n     }\n+    return value;\n+}\n \n     /** Get the root of the covariance matrix.\n      * The root is the rectangular matrix <code>B</code> such that",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.013564210759542911>",
    "test_result": "FAIL"
}