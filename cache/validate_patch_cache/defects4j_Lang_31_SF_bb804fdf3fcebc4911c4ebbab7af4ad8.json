{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int sequenceLength = sequence.length();\n    final int searchLength = searchChars.length;\n    final int[] searchCodePoints = IntStream.range(0, searchLength)\n            .map(i -> searchChars[i])\n            .collect(() -> new int[searchLength], (arr, codePoint) -> {\n                if (Character.isBmpCodePoint(codePoint)) {\n                    arr[0]++;\n                } else {\n                    arr[1]++;\n                }\n            }, (left, right) -> {\n            });\n    if (searchCodePoints[1] % 2 != 0) {\n        return false;\n    }\n    final int[] strCodePoints = sequence.codePoints().toArray();\n    final int strLength = strCodePoints.length;\n    final int[] matchingCodePoints = IntStream.range(0, strLength)\n            .filter(i -> {\n                final int codePoint = strCodePoints[i];\n                return IntStream.of(searchChars)\n                        .anyMatch(searchChar -> {\n                            return Character.isBmpCodePoint(codePoint) ? searchChar == codePoint : Character.toChars(codePoint)[0] == searchChar && Character.toChars(codePoint)[1] == searchChars[i + 1];\n                        });\n            })\n            .toArray();\n    if (matchingCodePoints.length == 0) {\n        return false;\n    }\n    final int[] matchingCodePointsFromFirstSearchChar = IntStream.range(0, matchingCodePoints.length)\n            .filter(i -> {\n                final int firstMatchingCodePoint = matchingCodePoints[i];\n                return IntStream.range(0, searchLength)\n                        .filter(j -> j < searchLength - 1 || searchCodePoints[1] == 0)\n                        .allMatch(j -> {\n                            final int searchCodePoint = searchChars[j];\n                            if (Character.isBmpCodePoint(searchCodePoint)) {\n                                return strCodePoints[firstMatchingCodePoint] == searchCodePoint;\n                            } else {\n                                return strCodePoints[firstMatchingCodePoint] == searchCodePoint && strCodePoints[firstMatchingCodePoint + 1] == searchChars[j + 1];\n                            }\n                        });\n            })\n            .toArray();\n    if (matchingCodePointsFromFirstSearchChar.length == 0) {\n        return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..1a0f1d0d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,59 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int sequenceLength = sequence.length();\n+    final int searchLength = searchChars.length;\n+    final int[] searchCodePoints = IntStream.range(0, searchLength)\n+            .map(i -> searchChars[i])\n+            .collect(() -> new int[searchLength], (arr, codePoint) -> {\n+                if (Character.isBmpCodePoint(codePoint)) {\n+                    arr[0]++;\n+                } else {\n+                    arr[1]++;\n+                }\n+            }, (left, right) -> {\n+            });\n+    if (searchCodePoints[1] % 2 != 0) {\n+        return false;\n+    }\n+    final int[] strCodePoints = sequence.codePoints().toArray();\n+    final int strLength = strCodePoints.length;\n+    final int[] matchingCodePoints = IntStream.range(0, strLength)\n+            .filter(i -> {\n+                final int codePoint = strCodePoints[i];\n+                return IntStream.of(searchChars)\n+                        .anyMatch(searchChar -> {\n+                            return Character.isBmpCodePoint(codePoint) ? searchChar == codePoint : Character.toChars(codePoint)[0] == searchChar && Character.toChars(codePoint)[1] == searchChars[i + 1];\n+                        });\n+            })\n+            .toArray();\n+    if (matchingCodePoints.length == 0) {\n+        return false;\n+    }\n+    final int[] matchingCodePointsFromFirstSearchChar = IntStream.range(0, matchingCodePoints.length)\n+            .filter(i -> {\n+                final int firstMatchingCodePoint = matchingCodePoints[i];\n+                return IntStream.range(0, searchLength)\n+                        .filter(j -> j < searchLength - 1 || searchCodePoints[1] == 0)\n+                        .allMatch(j -> {\n+                            final int searchCodePoint = searchChars[j];\n+                            if (Character.isBmpCodePoint(searchCodePoint)) {\n+                                return strCodePoints[firstMatchingCodePoint] == searchCodePoint;\n+                            } else {\n+                                return strCodePoints[firstMatchingCodePoint] == searchCodePoint && strCodePoints[firstMatchingCodePoint + 1] == searchChars[j + 1];\n+                            }\n+                        });\n+            })\n+            .toArray();\n+    if (matchingCodePointsFromFirstSearchChar.length == 0) {\n+        return false;\n+    }\n+    return true;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}