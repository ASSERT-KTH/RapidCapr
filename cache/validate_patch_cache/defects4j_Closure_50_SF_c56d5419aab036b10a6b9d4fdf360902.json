{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n    List<Node> arrayFoldedChildren = new ArrayList<Node>();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    for (Node elem : arrayNode.children()) {\n      if (NodeUtil.isEmpty(elem)) {\n        continue;\n      }\n\n      int cost = InlineCostEstimator.getCost(elem);\n      if (NodeUtil.isImmutableValue(elem)) {\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb.length() != 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()).srcref(elem));\n          sb = new StringBuilder();\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      foldedSize += cost;\n      if (elem != arrayNode.getLastChild()) {\n        foldedSize += joinString.length();\n      }\n    }\n\n    if (sb.length() != 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()).srcref(arrayNode));\n    }\n\n    // If joinString is whitespace-only, try folding to a space instead.\n    if (allWhitespace(joinString)) {\n      joinString = \" \";\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (arrayFoldedChildren.size() == 0) {\n      Node strNode = Node.newString(\"\").srcref(n);\n      n.getParent().replaceChild(n, strNode);\n      reportCodeChange();\n      return strNode;\n    }\n\n    if (arrayFoldedChildren.size() == 1 && !NodeUtil.isImmutableValue(arrayFoldedChildren.get(0))) {\n      return n;\n    }\n\n    if (arrayFoldedChildren.size() < arrayNode.getChildCount() && !allWhitespace(joinString)) {\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(Node.newString(joinString));\n    }\n\n    if (foldedSize <= originalSize) {\n      if (arrayFoldedChildren.size() == 1 && NodeUtil.isImmutableValue(arrayFoldedChildren.get(0))) {\n        Node strNode = arrayFoldedChildren.get(0).cloneTree();\n        strNode.srcref(n);\n        NodeUtil.markFunctionsDeleted(strNode, compiler);\n        n.getParent().replaceChild(n, strNode);\n        reportCodeChange();\n        return strNode;\n      }\n\n      Node opNode = NodeUtil.newStringJoinNode(compiler, joinString, arrayFoldedChildren);\n      if (n.getParent().isExprResult()) {\n        Node stmtNode = IR.exprResult(opNode).srcref(n);\n        n.getParent().replaceChild(n, stmtNode);\n        reportCodeChange();\n        return stmtNode;\n      } else {\n        n.getParent().replaceChild(n, opNode);\n        reportCodeChange();\n        return opNode;\n      }\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..41bf8f66 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -381,95 +381,83 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n+\n+    List<Node> arrayFoldedChildren = new ArrayList<Node>();\n+    StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n+    for (Node elem : arrayNode.children()) {\n+      if (NodeUtil.isEmpty(elem)) {\n+        continue;\n+      }\n+\n+      int cost = InlineCostEstimator.getCost(elem);\n+      if (NodeUtil.isImmutableValue(elem)) {\n         sb.append(NodeUtil.getArrayElementStringValue(elem));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (sb.length() != 0) {\n+          arrayFoldedChildren.add(Node.newString(sb.toString()).srcref(elem));\n+          sb = new StringBuilder();\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n+      foldedSize += cost;\n+      if (elem != arrayNode.getLastChild()) {\n+        foldedSize += joinString.length();\n+      }\n+    }\n+\n+    if (sb.length() != 0) {\n+      arrayFoldedChildren.add(Node.newString(sb.toString()).srcref(arrayNode));\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    // If joinString is whitespace-only, try folding to a space instead.\n+    if (allWhitespace(joinString)) {\n+      joinString = \" \";\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n+    if (arrayFoldedChildren.size() == 0) {\n+      Node strNode = Node.newString(\"\").srcref(n);\n+      n.getParent().replaceChild(n, strNode);\n+      reportCodeChange();\n+      return strNode;\n+    }\n+\n+    if (arrayFoldedChildren.size() == 1 && !NodeUtil.isImmutableValue(arrayFoldedChildren.get(0))) {\n+      return n;\n+    }\n+\n+    if (arrayFoldedChildren.size() < arrayNode.getChildCount() && !allWhitespace(joinString)) {\n+      foldedSize += kJoinOverhead;\n+      foldedSize += InlineCostEstimator.getCost(Node.newString(joinString));\n+    }\n+\n+    if (foldedSize <= originalSize) {\n+      if (arrayFoldedChildren.size() == 1 && NodeUtil.isImmutableValue(arrayFoldedChildren.get(0))) {\n+        Node strNode = arrayFoldedChildren.get(0).cloneTree();\n+        strNode.srcref(n);\n+        NodeUtil.markFunctionsDeleted(strNode, compiler);\n+        n.getParent().replaceChild(n, strNode);\n         reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n+        return strNode;\n+      }\n+\n+      Node opNode = NodeUtil.newStringJoinNode(compiler, joinString, arrayFoldedChildren);\n+      if (n.getParent().isExprResult()) {\n+        Node stmtNode = IR.exprResult(opNode).srcref(n);\n+        n.getParent().replaceChild(n, stmtNode);\n         reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n+        return stmtNode;\n+      } else {\n+        n.getParent().replaceChild(n, opNode);\n         reportCodeChange();\n-        break;\n+        return opNode;\n+      }\n     }\n \n     return n;\n@@ -642,4 +630,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}