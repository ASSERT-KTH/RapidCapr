{
    "patch": "public static double getTypedPercent(JsonObject js) {\n    double count = 0.0;\n    double total = 0.0;\n    for (Map.Entry<String, JsonElement> entry : js.entrySet()) {\n        String key = entry.getKey();\n        if (key.startsWith(\"typed_\")) {\n            count += entry.getValue().getAsDouble();\n        }\n        if (key.startsWith(\"total_\")) {\n            total += entry.getValue().getAsDouble();\n        }\n    }\n    return total > 0 ? (count*100.0)/total : 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..dca883df 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject js) {\n+    double count = 0.0;\n+    double total = 0.0;\n+    for (Map.Entry<String, JsonElement> entry : js.entrySet()) {\n+        String key = entry.getKey();\n+        if (key.startsWith(\"typed_\")) {\n+            count += entry.getValue().getAsDouble();\n+        }\n+        if (key.startsWith(\"total_\")) {\n+            total += entry.getValue().getAsDouble();\n+        }\n+    }\n+    return total > 0 ? (count*100.0)/total : 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}