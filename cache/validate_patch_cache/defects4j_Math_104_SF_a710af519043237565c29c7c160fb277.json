{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid input argument values. a must be positive and x cannot be negative.\");\n    }\n\n    double gammaValue = Gamma.gamma(a, x);\n\n    double incompleteGamma = Gamma.incompleteGamma(a, x);\n    double regularizedGamma = incompleteGamma / Gamma.gamma(a);\n\n    if (Double.isInfinite(regularizedGamma)) {\n        if (regularizedGamma < 0) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n\n    return regularizedGamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c62c14016 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,26 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid input argument values. a must be positive and x cannot be negative.\");\n+    }\n+\n+    double gammaValue = Gamma.gamma(a, x);\n+\n+    double incompleteGamma = Gamma.incompleteGamma(a, x);\n+    double regularizedGamma = incompleteGamma / Gamma.gamma(a);\n+\n+    if (Double.isInfinite(regularizedGamma)) {\n+        if (regularizedGamma < 0) {\n+            return 0.0;\n+        } else {\n+            return 1.0;\n+        }\n+    }\n+\n+    return regularizedGamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}