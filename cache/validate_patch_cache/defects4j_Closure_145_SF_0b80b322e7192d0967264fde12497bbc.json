{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    switch (n.getType()) {\n        case Token.FUNCTION:\n        case Token.DO:\n            return true;\n        case Token.BLOCK:\n            if (n.getFirstChild() == n.getLastChild() && n.getFirstChild() != null) {\n                return isOneExactlyFunctionOrDo(n.getFirstChild());\n            }\n            break;\n        case Token.LABEL:\n            Node child = n.getFirstChild();\n            if (child.getType() == Token.EMPTY && child.getNext() != null) {\n                child = child.getNext();\n            }\n            if (child.getType() == Token.BLOCK && child.getFirstChild() == child.getLastChild() && child.getFirstChild() != null) {\n                return isOneExactlyFunctionOrDo(child.getFirstChild());\n            }\n            break;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..0cf191e1 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,28 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    switch (n.getType()) {\n+        case Token.FUNCTION:\n+        case Token.DO:\n+            return true;\n+        case Token.BLOCK:\n+            if (n.getFirstChild() == n.getLastChild() && n.getFirstChild() != null) {\n+                return isOneExactlyFunctionOrDo(n.getFirstChild());\n+            }\n+            break;\n+        case Token.LABEL:\n+            Node child = n.getFirstChild();\n+            if (child.getType() == Token.EMPTY && child.getNext() != null) {\n+                child = child.getNext();\n+            }\n+            if (child.getType() == Token.BLOCK && child.getFirstChild() == child.getLastChild() && child.getFirstChild() != null) {\n+                return isOneExactlyFunctionOrDo(child.getFirstChild());\n+            }\n+            break;\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}