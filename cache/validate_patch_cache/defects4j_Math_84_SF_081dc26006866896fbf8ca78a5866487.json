{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                simplex = shrink(original, comparator);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = contractedSimplex;\n        } else {\n            simplex = shrink(original, comparator);\n        }\n\n        // check convergence\n        if (checker != null && simplex[0].getValue() != previous[0].getValue()) {\n            if (checker.converged(getIterations(), previous, simplex)) {\n                return;\n            }\n            copy(simplex, previous);\n        }\n    }\n}\n\nprivate RealPointValuePair[] shrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n    RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    RealPointValuePair best = original[0];\n    contractedSimplex[0] = best;\n    for (int i=1; i<contractedSimplex.length; i++) {\n        RealPointValuePair p = original[i];\n        double[] coordinates = new double[p.getPoint().length];\n        for (int j=0; j<p.getPoint().length; j++) {\n            coordinates[j] = best.getPoint()[j] + sigma * (p.getPoint()[j] - best.getPoint()[j]);\n        }\n        RealPointValuePair contractedP = new RealPointValuePair(coordinates,\n                Double.NaN/* uninitialized */, false);\n        contractedSimplex[i] = contractedP;\n    }\n    return evaluateSimplex(contractedSimplex, comparator);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..1787255df 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,70 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = shrink(original, comparator);\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = contractedSimplex;\n+        } else {\n+            simplex = shrink(original, comparator);\n+        }\n \n-            // check convergence\n+        // check convergence\n+        if (checker != null && simplex[0].getValue() != previous[0].getValue()) {\n+            if (checker.converged(getIterations(), previous, simplex)) {\n                 return;\n             }\n-\n+            copy(simplex, previous);\n         }\n+    }\n+}\n \n+private RealPointValuePair[] shrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+    RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    RealPointValuePair best = original[0];\n+    contractedSimplex[0] = best;\n+    for (int i=1; i<contractedSimplex.length; i++) {\n+        RealPointValuePair p = original[i];\n+        double[] coordinates = new double[p.getPoint().length];\n+        for (int j=0; j<p.getPoint().length; j++) {\n+            coordinates[j] = best.getPoint()[j] + sigma * (p.getPoint()[j] - best.getPoint()[j]);\n+        }\n+        RealPointValuePair contractedP = new RealPointValuePair(coordinates,\n+                Double.NaN/* uninitialized */, false);\n+        contractedSimplex[i] = contractedP;\n     }\n+    return evaluateSimplex(contractedSimplex, comparator);\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}