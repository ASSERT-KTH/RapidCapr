{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          if (!NodeUtil.isStatement(n.getParent())) {\n            defineVar(n, scope.getClosestHoistScope());\n          } else {\n            defineVar(n, parent);\n          }\n          break;\n      }\n      \n      if (n.getType() == Token.LP && NodeUtil.isExprAssign(parent.getParent())) {\n        handleFunctionInputs(parent.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6ace9639 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1454,15 +1454,24 @@ final class TypedScopeCreator implements ScopeCreator {\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n-          defineVar(n, parent);\n+          if (!NodeUtil.isStatement(n.getParent())) {\n+            defineVar(n, scope.getClosestHoistScope());\n+          } else {\n+            defineVar(n, parent);\n+          }\n           break;\n       }\n+      \n+      if (n.getType() == Token.LP && NodeUtil.isExprAssign(parent.getParent())) {\n+        handleFunctionInputs(parent.getParent());\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}