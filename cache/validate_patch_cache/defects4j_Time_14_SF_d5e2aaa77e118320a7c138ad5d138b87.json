{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (partial.size() > 0 &&\n                DateTimeUtils.isContiguous(partial) &&\n                partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n            int year = (values[0] * MONTHS_IN_YEAR + values[1] - 1) / MONTHS_IN_YEAR;\n            int month = (values[0] * MONTHS_IN_YEAR + values[1] - 1) % MONTHS_IN_YEAR + 1;\n            int day = Math.min(values[2], DateUtils.getDaysInMonth(month, year));\n            long instant = iChronology.getDateTimeMillis(year, month, day, 0L);\n            instant = add(instant, valueToAdd);\n            int[] workValues = iChronology.get(partial, instant);\n            iChronology.validate(partial, workValues);\n            return workValues;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..386b475b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,18 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n+        // month is largest field and being added to, such as month-day\n+        if (partial.size() > 0 &&\n+                DateTimeUtils.isContiguous(partial) &&\n+                partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n+            int year = (values[0] * MONTHS_IN_YEAR + values[1] - 1) / MONTHS_IN_YEAR;\n+            int month = (values[0] * MONTHS_IN_YEAR + values[1] - 1) % MONTHS_IN_YEAR + 1;\n+            int day = Math.min(values[2], DateUtils.getDaysInMonth(month, year));\n+            long instant = iChronology.getDateTimeMillis(year, month, day, 0L);\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            int[] workValues = iChronology.get(partial, instant);\n+            iChronology.validate(partial, workValues);\n+            return workValues;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}