{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n\n      if (NodeUtil.isGet(parent)) {\n        Var var = varNameDeclaredByGet(parent);\n        if (var != null) {\n          String propName = NodeUtil.getObjectLitKeyName(n);\n          if (propName != null) {\n            ObjectType objectType = getObjectType(var.type);\n            if (objectType != null) {\n              if (objectType.getOwnPropertyNames().contains(propName)) {\n                t.report(n, CLASS_PROTOTYPE_REDEFINITION);\n              }\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b1b3c00a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,14 +1440,6 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n@@ -1463,7 +1455,21 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n-    }\n+\n+      if (NodeUtil.isGet(parent)) {\n+        Var var = varNameDeclaredByGet(parent);\n+        if (var != null) {\n+          String propName = NodeUtil.getObjectLitKeyName(n);\n+          if (propName != null) {\n+            ObjectType objectType = getObjectType(var.type);\n+            if (objectType != null) {\n+              if (objectType.getOwnPropertyNames().contains(propName)) {\n+                t.report(n, CLASS_PROTOTYPE_REDEFINITION);\n+              }\n+            }\n+          }\n+        }\n+      }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}