{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    int firstUnderscore = str.indexOf('_');\n    int secondUnderscore = str.indexOf('_', firstUnderscore + 1);\n    if (firstUnderscore == -1 || (secondUnderscore == -1 && len > firstUnderscore + 1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, firstUnderscore);\n    String country = \"\";\n    String variant = \"\";\n    if (secondUnderscore == -1) {\n        country = str.substring(firstUnderscore + 1);\n    } else {\n        country = str.substring(firstUnderscore + 1, secondUnderscore);\n        variant = str.substring(secondUnderscore + 1);\n    }\n    if (!isValidCode(language) || !isValidCode(country) || !isValidCode(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(String code) {\n    int length = code.length();\n    if (length == 0) {\n        return true;\n    }\n    if (length != 2 && length != 3 && length != 4) {\n        return false;\n    }\n    for (int i = 0; i < length; i++) {\n        char c = code.charAt(i);\n        if (!Character.isLetterOrDigit(c)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..d14e5d78 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,50 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    int firstUnderscore = str.indexOf('_');\n+    int secondUnderscore = str.indexOf('_', firstUnderscore + 1);\n+    if (firstUnderscore == -1 || (secondUnderscore == -1 && len > firstUnderscore + 1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String language = str.substring(0, firstUnderscore);\n+    String country = \"\";\n+    String variant = \"\";\n+    if (secondUnderscore == -1) {\n+        country = str.substring(firstUnderscore + 1);\n+    } else {\n+        country = str.substring(firstUnderscore + 1, secondUnderscore);\n+        variant = str.substring(secondUnderscore + 1);\n+    }\n+    if (!isValidCode(language) || !isValidCode(country) || !isValidCode(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(String code) {\n+    int length = code.length();\n+    if (length == 0) {\n+        return true;\n+    }\n+    if (length != 2 && length != 3 && length != 4) {\n+        return false;\n+    }\n+    for (int i = 0; i < length; i++) {\n+        char c = code.charAt(i);\n+        if (!Character.isLetterOrDigit(c)) {\n+            return false;\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n+    return true;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}