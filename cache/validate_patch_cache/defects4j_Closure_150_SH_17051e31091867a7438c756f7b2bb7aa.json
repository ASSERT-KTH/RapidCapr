{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n            if (n.getFirstChild().getType() != Token.CALL) {\n              break;\n            }\n            Node call = n.getFirstChild();\n            String name = getAssignedName(call.getFirstChild());\n            if (name == null) {\n              break;\n            }\n            Var var = scope.getVar(name);\n            if (var == null || var.isExtern()) {\n              break;\n            }\n            if (var.isLocal()) {\n              markAssignLocal(var);\n              if (name.equals(\"$jscomp\") && call.getSecondChild().getString().equals(\"define\")) {\n                defineModule(call);\n              }\n            }\n            break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4622ce65 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,7 +1462,26 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        case Token.EXPR_RESULT:\n+            if (n.getFirstChild().getType() != Token.CALL) {\n+              break;\n+            }\n+            Node call = n.getFirstChild();\n+            String name = getAssignedName(call.getFirstChild());\n+            if (name == null) {\n+              break;\n+            }\n+            Var var = scope.getVar(name);\n+            if (var == null || var.isExtern()) {\n+              break;\n+            }\n+            if (var.isLocal()) {\n+              markAssignLocal(var);\n+              if (name.equals(\"$jscomp\") && call.getSecondChild().getString().equals(\"define\")) {\n+                defineModule(call);\n+              }\n+            }\n+            break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}