{
    "patch": "    Node grandparent = parent.getParent();\n    if (provided == null || !provided.isExplicitlyProvided()) {\n        if (grandparent != null && NodeUtil.isStatement(parent)) {\n            grandparent.removeChild(parent);\n        } else {\n            parent.detachFromParent();\n        }\n        compiler.reportCodeChange();\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n        JSModule providedModule = provided.explicitModule;\n\n        if (providedModule != null) {\n            JSModule module = t.getModule();\n            if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n                compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n            }\n\n            maybeAddToSymbolTable(left);\n            maybeAddStringNodeToSymbolTable(arg);\n\n            if (grandparent != null && NodeUtil.isStatement(parent)) {\n                grandparent.removeChild(parent);\n            } else {\n                parent.detachFromParent();\n            }\n            compiler.reportCodeChange();\n        } else {\n            throw new IllegalStateException(\"Provided module cannot be null!\");\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..3edee024 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,38 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    Node grandparent = parent.getParent();\n+    if (provided == null || !provided.isExplicitlyProvided()) {\n+        if (grandparent != null && NodeUtil.isStatement(parent)) {\n+            grandparent.removeChild(parent);\n+        } else {\n+            parent.detachFromParent();\n+        }\n+        compiler.reportCodeChange();\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+    } else {\n+        JSModule providedModule = provided.explicitModule;\n+\n+        if (providedModule != null) {\n+            JSModule module = t.getModule();\n+            if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n+                compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n+            }\n+\n+            maybeAddToSymbolTable(left);\n+            maybeAddStringNodeToSymbolTable(arg);\n+\n+            if (grandparent != null && NodeUtil.isStatement(parent)) {\n+                grandparent.removeChild(parent);\n+            } else {\n+                parent.detachFromParent();\n+            }\n+            compiler.reportCodeChange();\n+        } else {\n+            throw new IllegalStateException(\"Provided module cannot be null!\");\n+        }\n+    }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}