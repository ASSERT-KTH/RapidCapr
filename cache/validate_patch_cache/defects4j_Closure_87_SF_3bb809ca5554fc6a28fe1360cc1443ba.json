{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n          Node parent = n.getParent();\n          if (parent != null &&\n              parent.getType() == Token.EXPR_RESULT &&\n              !NodeUtil.isFunctionExpression(parent.getFirstChild())) {\n            return false;\n          }\n          return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2f40cc59 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -529,7 +529,12 @@ public class PeepholeSubstituteAlternateSyntax\n \n             // We only have to worry about methods with an implicit 'this'\n             // param, or this doesn't happen.\n-\n+          Node parent = n.getParent();\n+          if (parent != null &&\n+              parent.getType() == Token.EXPR_RESULT &&\n+              !NodeUtil.isFunctionExpression(parent.getFirstChild())) {\n+            return false;\n+          }\n           return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}