{
    "patch": "final Line reverted;\nif (direction.getNorm() == 0) {\n    reverted = new Line(zero, zero);\n} else {\n    final Vector3D reversedDirection = direction.negate();\n    final Vector3D newOrigin = reversedDirection.normalize().scalarMultiply(reversedDirection.getNorm());\n    reverted = new Line(newOrigin, reversedDirection);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..3f4200284 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,14 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final Line reverted;\n+if (direction.getNorm() == 0) {\n+    reverted = new Line(zero, zero);\n+} else {\n+    final Vector3D reversedDirection = direction.negate();\n+    final Vector3D newOrigin = reversedDirection.normalize().scalarMultiply(reversedDirection.getNorm());\n+    reverted = new Line(newOrigin, reversedDirection);\n+}\n         return reverted;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<-0.030993786368687184>",
    "test_result": "FAIL"
}