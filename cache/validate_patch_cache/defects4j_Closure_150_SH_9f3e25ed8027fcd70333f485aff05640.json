{
    "patch": "private static boolean isArgumentList(Node n) {\n  return NodeUtil.isParenthesizedExpression(n) && n.getParent().getType() == Token.CALL;\n}\n\nprivate static boolean isFunctionScope(Node n) {\n  return n != null && (n.isScript() || n.isFunction());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2ae2c542 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,13 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+private static boolean isArgumentList(Node n) {\n+  return NodeUtil.isParenthesizedExpression(n) && n.getParent().getType() == Token.CALL;\n+}\n+\n+private static boolean isFunctionScope(Node n) {\n+  return n != null && (n.isScript() || n.isFunction());\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}