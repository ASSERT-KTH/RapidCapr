{
    "patch": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n    Node child = node.getFirstChild();\n    if (child.isName()\n        && isNameAssignedTo(child.getString(), replacement)) {\n      return false;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..b9bdad76 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -209,13 +209,11 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n       return true;\n     }\n     Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+    Node child = node.getFirstChild();\n+    if (child.isName()\n+        && isNameAssignedTo(child.getString(), replacement)) {\n       return false;\n     }\n-\n     return true;\n   }\n \n@@ -241,4 +239,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}