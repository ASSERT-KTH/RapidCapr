{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis;\n        Chronology chrono = instant.getChronology();\n        DateTimeZone zone = chrono.getZone();\n        if (iOffsetParsed) {\n            int offset = zone.getOffset(instant);\n            instantMillis = instant.getMillis() + offset;\n            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        } else {\n            instantMillis = instant.getMillis();\n        }\n\n        chrono = selectChronology(chrono);\n        int savedDefaultYear = 0;\n        int newPos;\n        boolean retry = false;\n        \n        do {\n            DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, savedDefaultYear);\n            bucket.setZone(zone);\n            newPos = parser.parseInto(bucket, text, position);\n            if (newPos < 0) {\n                newPos = ~newPos;\n                if (newPos == position) {\n                    throw new IllegalArgumentException(\"Parsing failed\");\n                }\n                retry = true;\n            } else {\n                instant.setMillis(bucket.computeMillis());\n                if (iOffsetParsed) {\n                    chrono = chrono.withZone(zone);\n                } else if (bucket.getZone() != null) {\n                    chrono = chrono.withZone(bucket.getZone());\n                } else {\n                    chrono = chrono.withZone(zone);\n                }\n                instant.setChronology(chrono);\n                retry = false;\n            }\n            savedDefaultYear = bucket.getPivotYear();\n        } while (retry);\n        \n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..a467af32 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,25 +702,48 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n+        long instantMillis;\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+        DateTimeZone zone = chrono.getZone();\n+        if (iOffsetParsed) {\n+            int offset = zone.getOffset(instant);\n+            instantMillis = instant.getMillis() + offset;\n+            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+        } else {\n+            instantMillis = instant.getMillis();\n+        }\n+\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        int savedDefaultYear = 0;\n+        int newPos;\n+        boolean retry = false;\n+        \n+        do {\n+            DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, savedDefaultYear);\n+            bucket.setZone(zone);\n+            newPos = parser.parseInto(bucket, text, position);\n+            if (newPos < 0) {\n+                newPos = ~newPos;\n+                if (newPos == position) {\n+                    throw new IllegalArgumentException(\"Parsing failed\");\n+                }\n+                retry = true;\n+            } else {\n+                instant.setMillis(bucket.computeMillis());\n+                if (iOffsetParsed) {\n+                    chrono = chrono.withZone(zone);\n+                } else if (bucket.getZone() != null) {\n+                    chrono = chrono.withZone(bucket.getZone());\n+                } else {\n+                    chrono = chrono.withZone(zone);\n+                }\n+                instant.setChronology(chrono);\n+                retry = false;\n+            }\n+            savedDefaultYear = bucket.getPivotYear();\n+        } while (retry);\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}