{
    "patch": "if (functionType.isConstructor() || functionType.hasThisType()) {\n  Node parent = n.getParent();\n  if (!parent.isGetProp() && !parent.isGetElem()) {\n    report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n}\n\nvisitParameterList(t, n, functionType);\n\nJSType returnType = functionType.getReturnType();\n\n// For async functions, the inferred return type may be \"Promise<SomeType>\".\n// In such cases, set the inferred return type to \"SomeType\". This is important\n// to avoid potentially misleading \"return type mismatch\" errors later.\nif (returnType.isPromiseType()) {\n  returnType = returnType.toMaybeObjectType().getTemplateTypeMap()\n      .getResolvedTemplateType(JSType.MAP_KEY_TYPE);\n  if (returnType == null) {\n    // If the promise type has been resolved to a type that itself has\n    // template types, we cannot safely determine the return type, so\n    // we fall back to \"unknown\".\n    returnType = JSType.UNKNOWN;\n  }\n}\n\nensureTyped(t, n, returnType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..4dfd4b0c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.isConstructor() || functionType.hasThisType()) {\n+  Node parent = n.getParent();\n+  if (!parent.isGetProp() && !parent.isGetElem()) {\n+    report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n+}\n+\n+visitParameterList(t, n, functionType);\n+\n+JSType returnType = functionType.getReturnType();\n+\n+// For async functions, the inferred return type may be \"Promise<SomeType>\".\n+// In such cases, set the inferred return type to \"SomeType\". This is important\n+// to avoid potentially misleading \"return type mismatch\" errors later.\n+if (returnType.isPromiseType()) {\n+  returnType = returnType.toMaybeObjectType().getTemplateTypeMap()\n+      .getResolvedTemplateType(JSType.MAP_KEY_TYPE);\n+  if (returnType == null) {\n+    // If the promise type has been resolved to a type that itself has\n+    // template types, we cannot safely determine the return type, so\n+    // we fall back to \"unknown\".\n+    returnType = JSType.UNKNOWN;\n+  }\n+}\n+\n+ensureTyped(t, n, returnType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}