{
    "patch": "import java.util.Arrays;\n\npublic class BugFixer {\n\n    public String fixCode(String code) {\n        String fixedCode = code;\n        \n        if (code.contains(\"for(\") && code.contains(\"in\")) {\n            int startIndex = code.indexOf(\"for(\");\n            int endIndex = code.indexOf(\"{\", startIndex);\n\n            String forLoop = code.substring(startIndex, endIndex);\n            String[] loopComponents = forLoop.split(\";\");\n\n            String newLoop = \"for (\";\n            for (String component : loopComponents) {\n                if (component.contains(\"in\")) {\n                    String[] inComponents = component.trim().split(\" \");\n                    if (inComponents.length == 3 && inComponents[1].equals(\"in\")) {\n                        newLoop += getVarType(inComponents[2]) + \" \";\n                        newLoop += inComponents[0] + \" : \";\n                        newLoop += \"Arrays.asList(\" + inComponents[2] + \").toArray(new \" + getVarType(inComponents[2]) + \"[0]))\";\n                    } else {\n                        newLoop += component + \";\";\n                    }\n                } else {\n                    newLoop += component + \";\";\n                }\n            }\n\n            fixedCode = code.substring(0, startIndex) + newLoop + code.substring(endIndex);\n        }\n        \n        return fixedCode;\n    }\n\n    private String getVarType(String variable) {\n        if (variable.endsWith(\"[]\")) {\n            return variable.substring(0, variable.length() - 2);\n        } else {\n            return variable;\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..de3e53b2 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,51 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+import java.util.Arrays;\n+\n+public class BugFixer {\n+\n+    public String fixCode(String code) {\n+        String fixedCode = code;\n+        \n+        if (code.contains(\"for(\") && code.contains(\"in\")) {\n+            int startIndex = code.indexOf(\"for(\");\n+            int endIndex = code.indexOf(\"{\", startIndex);\n+\n+            String forLoop = code.substring(startIndex, endIndex);\n+            String[] loopComponents = forLoop.split(\";\");\n+\n+            String newLoop = \"for (\";\n+            for (String component : loopComponents) {\n+                if (component.contains(\"in\")) {\n+                    String[] inComponents = component.trim().split(\" \");\n+                    if (inComponents.length == 3 && inComponents[1].equals(\"in\")) {\n+                        newLoop += getVarType(inComponents[2]) + \" \";\n+                        newLoop += inComponents[0] + \" : \";\n+                        newLoop += \"Arrays.asList(\" + inComponents[2] + \").toArray(new \" + getVarType(inComponents[2]) + \"[0]))\";\n+                    } else {\n+                        newLoop += component + \";\";\n+                    }\n+                } else {\n+                    newLoop += component + \";\";\n+                }\n+            }\n+\n+            fixedCode = code.substring(0, startIndex) + newLoop + code.substring(endIndex);\n+        }\n+        \n+        return fixedCode;\n+    }\n+\n+    private String getVarType(String variable) {\n+        if (variable.endsWith(\"[]\")) {\n+            return variable.substring(0, variable.length() - 2);\n+        } else {\n+            return variable;\n+        }\n+    }\n+\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}