{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                        Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      String stringValue = NodeUtil.getStringValue(elem);\n      if (stringValue.isEmpty() && sb == null) {\n        // If we encounter an empty string element and have not\n        // yet started buffering a non-empty string, add the join\n        // string to the folded size and skip the element.\n        foldedSize += joinString.length();\n        elem = elem.getNext();\n        continue;\n      }\n      if (sb == null) {\n        sb = new StringBuilder(stringValue);\n      } else {\n        sb.append(joinString).append(stringValue);\n      }\n    } else {\n      if (sb != null) {\n        if (arrayFoldedChildren.isEmpty()) {\n          // We haven't added any elements yet, so we need to add\n          // a string node for the buffered string value.\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n        } else {\n          // There are already some elements in the array, so we\n          // can just add the buffered string value to the previous\n          // element in the array.\n          Node lastNode = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n          if (lastNode.getType() != Token.STRING) {\n            return;\n          }\n          String lastValue = NodeUtil.getStringValue(lastNode);\n          arrayFoldedChildren.set(arrayFoldedChildren.size() - 1,\n                                  Node.newString(lastValue + sb.toString()));\n        }\n        sb = null;\n      }\n      arrayFoldedChildren.add(elem);\n      foldedSize += InlineCostEstimator.getCost(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb != null) {\n    // If we still have a buffered string, add it to the end\n    // of the array.\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n\n  if (arrayFoldedChildren.isEmpty()) {\n    // If there are no elements in the array, replace the\n    // entire expression with an empty string.\n    parent.replaceChild(n, Node.newString(\"\"));\n    t.getCompiler().reportCodeChange();\n    return;\n  }\n\n  // Update the folded size to include the size of the join string\n  // and commas between elements.\n  foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n  foldedSize += (arrayFoldedChildren.size() - 1);\n\n  if (foldedSize > InlineCostEstimator.getCost(n)) {\n    // If the folded size is greater than the original size,\n    // skip folding.\n    return;\n  }\n\n  if (arrayFoldedChildren.size() == 1) {\n    // If there is only one element in the array, replace the\n    // entire expression with that element.\n    parent.replaceChild(n, arrayFoldedChildren.get(0));\n  } else {\n    // Otherwise, replace the entire expression with a new\n    // call to join() with the folded array.\n    Node newArrayNode = new Node(Token.ARRAYLIT);\n    for (Node node : arrayFoldedChildren) {\n      newArrayNode.addChildToBack(node);\n    }\n    newArrayNode.setIsSyntheticBlock(true);  // to force semi-colon insertion\n    Node newArguments =\n        new Node(Token.STRING, Node.newString(joinString));\n    Node newCall = new Node(Token.CALL,\n                            new Node(Token.GETPROP, newArrayNode.cloneTree(),\n                                     Node.newString(\"join\")),\n                            newArguments);\n    n.replaceWith(newCall);\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..b92e6229 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,115 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+                        Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n+  String joinString = NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = null;\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  // Merges adjacent String nodes.\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      String stringValue = NodeUtil.getStringValue(elem);\n+      if (stringValue.isEmpty() && sb == null) {\n+        // If we encounter an empty string element and have not\n+        // yet started buffering a non-empty string, add the join\n+        // string to the folded size and skip the element.\n+        foldedSize += joinString.length();\n+        elem = elem.getNext();\n+        continue;\n+      }\n+      if (sb == null) {\n+        sb = new StringBuilder(stringValue);\n       } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n+        sb.append(joinString).append(stringValue);\n+      }\n+    } else {\n+      if (sb != null) {\n+        if (arrayFoldedChildren.isEmpty()) {\n+          // We haven't added any elements yet, so we need to add\n+          // a string node for the buffered string value.\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        } else {\n+          // There are already some elements in the array, so we\n+          // can just add the buffered string value to the previous\n+          // element in the array.\n+          Node lastNode = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n+          if (lastNode.getType() != Token.STRING) {\n+            return;\n+          }\n+          String lastValue = NodeUtil.getStringValue(lastNode);\n+          arrayFoldedChildren.set(arrayFoldedChildren.size() - 1,\n+                                  Node.newString(lastValue + sb.toString()));\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        sb = null;\n       }\n-      elem = elem.getNext();\n+      arrayFoldedChildren.add(elem);\n+      foldedSize += InlineCostEstimator.getCost(elem);\n     }\n+    elem = elem.getNext();\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  if (sb != null) {\n+    // If we still have a buffered string, add it to the end\n+    // of the array.\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if (arrayFoldedChildren.isEmpty()) {\n+    // If there are no elements in the array, replace the\n+    // entire expression with an empty string.\n+    parent.replaceChild(n, Node.newString(\"\"));\n+    t.getCompiler().reportCodeChange();\n+    return;\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  // Update the folded size to include the size of the join string\n+  // and commas between elements.\n+  foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n+  foldedSize += (arrayFoldedChildren.size() - 1);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n+  if (foldedSize > InlineCostEstimator.getCost(n)) {\n+    // If the folded size is greater than the original size,\n+    // skip folding.\n+    return;\n+  }\n+\n+  if (arrayFoldedChildren.size() == 1) {\n+    // If there is only one element in the array, replace the\n+    // entire expression with that element.\n+    parent.replaceChild(n, arrayFoldedChildren.get(0));\n+  } else {\n+    // Otherwise, replace the entire expression with a new\n+    // call to join() with the folded array.\n+    Node newArrayNode = new Node(Token.ARRAYLIT);\n+    for (Node node : arrayFoldedChildren) {\n+      newArrayNode.addChildToBack(node);\n+    }\n+    newArrayNode.setIsSyntheticBlock(true);  // to force semi-colon insertion\n+    Node newArguments =\n+        new Node(Token.STRING, Node.newString(joinString));\n+    Node newCall = new Node(Token.CALL,\n+                            new Node(Token.GETPROP, newArrayNode.cloneTree(),\n+                                     Node.newString(\"join\")),\n+                            newArguments);\n+    n.replaceWith(newCall);\n   }\n+  t.getCompiler().reportCodeChange();\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}