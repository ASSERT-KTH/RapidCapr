{
    "patch": "// Removes unreferenced parameters from functions. This is always safe\n// in advanced mode because function parameter counts cannot change due\n// to aliasing.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction(), function);\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  int startIndex = 0;\n  while (startIndex < argList.getChildCount()) {\n    Node varNode = argList.getChildAtIndex(startIndex);\n\n    Var var = fnScope.getVar(varNode.getString());\n    if (var == null) {\n      // This 'var' is actually an object key.\n      startIndex++;\n      continue;\n    }\n\n    if (!referenced.contains(var)) {\n      argList.removeChild(varNode);\n      compiler.reportCodeChange();\n    } else {\n      startIndex++;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0ed585f9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Removes unreferenced parameters from functions. This is always safe\n+// in advanced mode because function parameter counts cannot change due\n+// to aliasing.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction(), function);\n+\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  int startIndex = 0;\n+  while (startIndex < argList.getChildCount()) {\n+    Node varNode = argList.getChildAtIndex(startIndex);\n+\n+    Var var = fnScope.getVar(varNode.getString());\n+    if (var == null) {\n+      // This 'var' is actually an object key.\n+      startIndex++;\n+      continue;\n+    }\n+\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(varNode);\n+      compiler.reportCodeChange();\n+    } else {\n+      startIndex++;\n+    }\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}