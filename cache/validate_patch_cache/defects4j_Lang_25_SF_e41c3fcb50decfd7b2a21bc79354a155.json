{
    "patch": "public static String unescape(String str) {\n    StringBuilder out = new StringBuilder();\n    int i = 0;\n    while (i < str.length()) {\n        char c = str.charAt(i);\n        if (c == '\\\\' && i < str.length() - 1) {\n            char nextChar = str.charAt(i + 1);\n            switch (nextChar) {\n                case 'r':\n                    out.append('\\r');\n                    i += 2;\n                    break;\n                case 'n':\n                    out.append('\\n');\n                    i += 2;\n                    break;\n                case 't':\n                    out.append('\\t');\n                    i += 2;\n                    break;\n                case 'f':\n                    out.append('\\f');\n                    i += 2;\n                    break;\n                case 'b':\n                    out.append('\\b');\n                    i += 2;\n                    break;\n                case '\\'':\n                    out.append('\\'');\n                    i += 2;\n                    break;\n                case '\\\"':\n                    out.append('\\\"');\n                    i += 2;\n                    break;\n                case '\\\\':\n                    out.append('\\\\');\n                    i += 2;\n                    break;\n                default:\n                    if (nextChar >= '0' && nextChar <= '7') {\n                        char[] octalChars = new char[3];\n                        octalChars[0] = nextChar;\n                        if (i + 1 < str.length() - 1) {\n                            char nextnextChar = str.charAt(i + 2);\n                            if (nextnextChar >= '0' && nextnextChar <= '7') {\n                                octalChars[1] = nextnextChar;\n                                i++;\n                                if (i + 1 < str.length() - 1) {\n                                    char nextnext2Char = str.charAt(i + 2);\n                                    if (nextnext2Char >= '0' && nextnext2Char <= '7') {\n                                        octalChars[2] = nextnext2Char;\n                                        i++;\n                                    }\n                                }\n                            }\n                        }\n                        int code = Integer.parseInt(new String(octalChars).replaceAll(\"\\0\", \"\"), 8);\n                        out.append((char) code);\n                        i++;\n                    } else {\n                        out.append(nextChar);\n                        i++;\n                    }\n                    break;\n            }\n        } else {\n            out.append(c);\n            i++;\n        }\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..677ee2df 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,80 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    StringBuilder out = new StringBuilder();\n+    int i = 0;\n+    while (i < str.length()) {\n+        char c = str.charAt(i);\n+        if (c == '\\\\' && i < str.length() - 1) {\n+            char nextChar = str.charAt(i + 1);\n+            switch (nextChar) {\n+                case 'r':\n+                    out.append('\\r');\n+                    i += 2;\n+                    break;\n+                case 'n':\n+                    out.append('\\n');\n+                    i += 2;\n+                    break;\n+                case 't':\n+                    out.append('\\t');\n+                    i += 2;\n+                    break;\n+                case 'f':\n+                    out.append('\\f');\n+                    i += 2;\n+                    break;\n+                case 'b':\n+                    out.append('\\b');\n+                    i += 2;\n+                    break;\n+                case '\\'':\n+                    out.append('\\'');\n+                    i += 2;\n+                    break;\n+                case '\\\"':\n+                    out.append('\\\"');\n+                    i += 2;\n+                    break;\n+                case '\\\\':\n+                    out.append('\\\\');\n+                    i += 2;\n+                    break;\n+                default:\n+                    if (nextChar >= '0' && nextChar <= '7') {\n+                        char[] octalChars = new char[3];\n+                        octalChars[0] = nextChar;\n+                        if (i + 1 < str.length() - 1) {\n+                            char nextnextChar = str.charAt(i + 2);\n+                            if (nextnextChar >= '0' && nextnextChar <= '7') {\n+                                octalChars[1] = nextnextChar;\n+                                i++;\n+                                if (i + 1 < str.length() - 1) {\n+                                    char nextnext2Char = str.charAt(i + 2);\n+                                    if (nextnext2Char >= '0' && nextnext2Char <= '7') {\n+                                        octalChars[2] = nextnext2Char;\n+                                        i++;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        int code = Integer.parseInt(new String(octalChars).replaceAll(\"\\0\", \"\"), 8);\n+                        out.append((char) code);\n+                        i++;\n+                    } else {\n+                        out.append(nextChar);\n+                        i++;\n+                    }\n+                    break;\n+            }\n+        } else {\n+            out.append(c);\n+            i++;\n+        }\n+    }\n+    return out.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}