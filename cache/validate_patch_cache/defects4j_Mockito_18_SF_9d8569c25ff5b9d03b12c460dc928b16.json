{
    "patch": "public static boolean isPalindrome(ListNode head) {\n    if (head == null) {\n        return true;\n    }\n    ListNode slow = head, fast = head;\n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    slow = reverse(slow);\n    fast = head;\n    while (slow != null) {\n        if (slow.val != fast.val) {\n            return false;\n        }\n        slow = slow.next;\n        fast = fast.next;\n    }\n    return true;\n}\n\nprivate static ListNode reverse(ListNode head) {\n    ListNode prev = null, curr = head, next;\n    while (curr != null) {\n        next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a552bbca3 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,37 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static boolean isPalindrome(ListNode head) {\n+    if (head == null) {\n+        return true;\n+    }\n+    ListNode slow = head, fast = head;\n+    while (fast != null && fast.next != null) {\n+        slow = slow.next;\n+        fast = fast.next.next;\n+    }\n+    slow = reverse(slow);\n+    fast = head;\n+    while (slow != null) {\n+        if (slow.val != fast.val) {\n+            return false;\n+        }\n+        slow = slow.next;\n+        fast = fast.next;\n+    }\n+    return true;\n+}\n+\n+private static ListNode reverse(ListNode head) {\n+    ListNode prev = null, curr = head, next;\n+    while (curr != null) {\n+        next = curr.next;\n+        curr.next = prev;\n+        prev = curr;\n+        curr = next;\n+    }\n+    return prev;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}