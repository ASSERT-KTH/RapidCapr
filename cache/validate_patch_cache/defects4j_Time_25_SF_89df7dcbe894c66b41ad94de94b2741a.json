{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal); // get initial offset at the local time\n    long nextTransition = nextTransition(instantLocal); // get the next transition time after the local time\n    long adjustedNextTransition = nextTransition - offsetLocal; // adjust the next transition time using the local offset\n    long prevTransition = previousTransition(instantLocal); // get the previous transition time from the local time\n    long adjustedPrevTransition = prevTransition - offsetLocal; // adjust the previous transition time using the local offset\n    if (adjustedNextTransition == adjustedPrevTransition) { // check if there is no transition\n        return offsetLocal;\n    }\n    if (adjustedNextTransition > instantLocal || instantLocal >= adjustedPrevTransition) { // check if local time is within the transition interval\n        if (offsetLocal >= getOffset(adjustedPrevTransition)) { // check if the local time is after the transition for positive offsets\n            return offsetLocal;\n        }\n        return getOffset(adjustedPrevTransition - 1); // else return the previous offset\n    }\n    return getOffset(instantLocal); // return current offset if local time is not in the transition interval.\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c0d02c38 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,23 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal); // get initial offset at the local time\n+    long nextTransition = nextTransition(instantLocal); // get the next transition time after the local time\n+    long adjustedNextTransition = nextTransition - offsetLocal; // adjust the next transition time using the local offset\n+    long prevTransition = previousTransition(instantLocal); // get the previous transition time from the local time\n+    long adjustedPrevTransition = prevTransition - offsetLocal; // adjust the previous transition time using the local offset\n+    if (adjustedNextTransition == adjustedPrevTransition) { // check if there is no transition\n+        return offsetLocal;\n+    }\n+    if (adjustedNextTransition > instantLocal || instantLocal >= adjustedPrevTransition) { // check if local time is within the transition interval\n+        if (offsetLocal >= getOffset(adjustedPrevTransition)) { // check if the local time is after the transition for positive offsets\n+            return offsetLocal;\n         }\n-        return offsetAdjusted;\n+        return getOffset(adjustedPrevTransition - 1); // else return the previous offset\n     }\n+    return getOffset(instantLocal); // return current offset if local time is not in the transition interval.\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2010-01-01T23:00:00.000",
    "test_result": "FAIL"
}