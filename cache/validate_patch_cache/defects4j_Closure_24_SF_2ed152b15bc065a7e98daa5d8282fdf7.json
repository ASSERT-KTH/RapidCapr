{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  Node root = scope.getRootNode();\n  NodeTraversal.traverseEs6(compiler, root, new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n      // Traverse immediately nested goog.scope blocks before looking at aliases\n      return (!n.isBlock() || parent.isFunction()) &&\n          (!parent.isCall() || !parent.getFirstChild().matchesQualifiedName(\"goog.scope\"));\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var var = t.getScope().getVar(name);\n        if (var != null && isAlias(var)) {\n          Node value = var.getInitialValue().cloneNode();\n          if (value.isQualifiedName()) {\n            String qualifiedName = value.getQualifiedName();\n            Var aliasVar = t.getScope().getVar(qualifiedName);\n            aliases.put(name, aliasVar);\n            transformation.addAlias(name, qualifiedName);\n          } else {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          }\n        }\n      }\n    }\n  });\n}\nprivate boolean isAlias(Var v) {\n  // Filter out private and parameter vars\n  if (v == null || !v.isGlobal()) {\n    return false;\n  }\n  // Look for top-level vars declared with an assignment\n  Node n = v.getNode();\n  if (n == null || !n.isName() || n.getParent() == null) {\n    return false;\n  }\n  Node parent = n.getParent();\n  if (parent.isExprResult() && parent.getParent().isScript()) {\n    Node expr = parent.getFirstChild().detach();\n    Node value = expr.getFirstChild();\n    if (value == null || (!value.isAdd() && !value.isAssign())) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..551b1baf 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,58 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  Node root = scope.getRootNode();\n+  NodeTraversal.traverseEs6(compiler, root, new NodeTraversal.Callback() {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+      // Traverse immediately nested goog.scope blocks before looking at aliases\n+      return (!n.isBlock() || parent.isFunction()) &&\n+          (!parent.isCall() || !parent.getFirstChild().matchesQualifiedName(\"goog.scope\"));\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.isName() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        String name = n.getString();\n+        Var var = t.getScope().getVar(name);\n+        if (var != null && isAlias(var)) {\n+          Node value = var.getInitialValue().cloneNode();\n+          if (value.isQualifiedName()) {\n+            String qualifiedName = value.getQualifiedName();\n+            Var aliasVar = t.getScope().getVar(qualifiedName);\n+            aliases.put(name, aliasVar);\n+            transformation.addAlias(name, qualifiedName);\n+          } else {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          }\n         }\n       }\n     }\n+  });\n+}\n+private boolean isAlias(Var v) {\n+  // Filter out private and parameter vars\n+  if (v == null || !v.isGlobal()) {\n+    return false;\n+  }\n+  // Look for top-level vars declared with an assignment\n+  Node n = v.getNode();\n+  if (n == null || !n.isName() || n.getParent() == null) {\n+    return false;\n+  }\n+  Node parent = n.getParent();\n+  if (parent.isExprResult() && parent.getParent().isScript()) {\n+    Node expr = parent.getFirstChild().detach();\n+    Node value = expr.getFirstChild();\n+    if (value == null || (!value.isAdd() && !value.isAssign())) {\n+      return false;\n+    }\n+    return true;\n+  }\n+  return false;\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}