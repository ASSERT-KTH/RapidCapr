{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            final int newOffsetAdjusted = getOffset(nextAdjusted);\n            if (offsetLocal != newOffsetAdjusted) {\n                 return offsetLocal;\n            }\n            // check if nextAdjusted is at the minimum allowed value and no more transitions to come\n            if (nextAdjusted == Long.MIN_VALUE && isCutoverInstant(instantAdjusted)) {\n                return offsetAdjusted;\n            }\n            // check if instantAdjusted is at the maximum allowed value and nextTransition fails\n            if (instantAdjusted == Long.MAX_VALUE && nextLocal == Long.MAX_VALUE) {\n                return offsetAdjusted;\n            }\n            instantLocal = nextAdjusted + (nextAdjusted == Long.MAX_VALUE ? 0 : 1);\n            return getOffset(instantLocal);\n        }\n    } else {\n        if (instantLocal == Long.MAX_VALUE && offsetAdjusted == offsetLocal) {\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..aea5fe7b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            final int newOffsetAdjusted = getOffset(nextAdjusted);\n+            if (offsetLocal != newOffsetAdjusted) {\n+                 return offsetLocal;\n+            }\n+            // check if nextAdjusted is at the minimum allowed value and no more transitions to come\n+            if (nextAdjusted == Long.MIN_VALUE && isCutoverInstant(instantAdjusted)) {\n+                return offsetAdjusted;\n+            }\n+            // check if instantAdjusted is at the maximum allowed value and nextTransition fails\n+            if (instantAdjusted == Long.MAX_VALUE && nextLocal == Long.MAX_VALUE) {\n+                return offsetAdjusted;\n+            }\n+            instantLocal = nextAdjusted + (nextAdjusted == Long.MAX_VALUE ? 0 : 1);\n+            return getOffset(instantLocal);\n+        }\n+    } else {\n+        if (instantLocal == Long.MAX_VALUE && offsetAdjusted == offsetLocal) {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}