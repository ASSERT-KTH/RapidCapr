{
    "patch": "int initialCount = iSavedFieldsCount;\nfor (int i = 0; i < initialCount; i++) {\n    try {\n        millis = iSavedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}\n\nif (initialCount > 0) {\n    SavedField[] sortedFields = iSavedFields;\n    if (initialCount != iSavedFields.length) {\n        sortedFields = new SavedField[initialCount];\n        System.arraycopy(iSavedFields, 0, sortedFields, 0, initialCount);\n    }\n    sort(sortedFields, initialCount);\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n    DurationField first = sortedFields[0].iField.getDurationField();\n    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n        for (int i = 0; i < initialCount; i++) {\n            if (iSavedFields[i] != sortedFields[i]) {\n                saveField(iSavedFields[i].getType(), iSavedFields[i].getValue());\n            }\n        }\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fa410d84 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+int initialCount = iSavedFieldsCount;\n+for (int i = 0; i < initialCount; i++) {\n+    try {\n+        millis = iSavedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+}\n+\n+if (initialCount > 0) {\n+    SavedField[] sortedFields = iSavedFields;\n+    if (initialCount != iSavedFields.length) {\n+        sortedFields = new SavedField[initialCount];\n+        System.arraycopy(iSavedFields, 0, sortedFields, 0, initialCount);\n+    }\n+    sort(sortedFields, initialCount);\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+    DurationField first = sortedFields[0].iField.getDurationField();\n+    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+        for (int i = 0; i < initialCount; i++) {\n+            if (iSavedFields[i] != sortedFields[i]) {\n+                saveField(iSavedFields[i].getType(), iSavedFields[i].getValue());\n+            }\n+        }\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}