{
    "patch": "        SavedField last = null;\n        for (int i = count - 1; i >= 0; i--) {\n            SavedField saveField = savedFields[i];\n            Chronology chrono = saveField.iChronology;\n            DateTimeField field = saveField.iField;\n            int value = saveField.iValue;\n            if (resetFields || field.isSupported(chrono)) {\n                int min = field.getMinimumValue();\n                int max = field.getMaximumValue();\n                value = FieldUtils.getWrappedValue(value, min, max);\n                try {\n                    last = saveField;\n                    millis = field.set(millis, value);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n            }\n        }\n        if (last != null && last.iField.getType() == DateTimeFieldType.timezone()) {\n            // Work around time zone bug in JDK 1.3.1\n            DateTimeZone zone = DateTimeZone.forID(last.iStringValue);\n            if (zone != iZone) {\n                iZone = zone;\n                millis = iZone.getMillisKeepLocal(DateTimeZone.UTC, millis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..96bd3fa1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField last = null;\n+        for (int i = count - 1; i >= 0; i--) {\n+            SavedField saveField = savedFields[i];\n+            Chronology chrono = saveField.iChronology;\n+            DateTimeField field = saveField.iField;\n+            int value = saveField.iValue;\n+            if (resetFields || field.isSupported(chrono)) {\n+                int min = field.getMinimumValue();\n+                int max = field.getMaximumValue();\n+                value = FieldUtils.getWrappedValue(value, min, max);\n+                try {\n+                    last = saveField;\n+                    millis = field.set(millis, value);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+            }\n+        }\n+        if (last != null && last.iField.getType() == DateTimeFieldType.timezone()) {\n+            // Work around time zone bug in JDK 1.3.1\n+            DateTimeZone zone = DateTimeZone.forID(last.iStringValue);\n+            if (zone != iZone) {\n+                iZone = zone;\n+                millis = iZone.getMillisKeepLocal(DateTimeZone.UTC, millis);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}