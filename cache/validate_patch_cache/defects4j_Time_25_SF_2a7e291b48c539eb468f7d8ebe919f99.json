{
    "patch": "   \n    public int getOffsetFromLocal(long instantLocal) {\n        // adjust the instant to UTC\n        final long instantUTC = getMillisSinceEpoch(instantLocal);\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets are the same, we have the correct offset\n        if (offsetLocal == offsetAdjusted) {\n            return offsetLocal;\n        }\n        // adjust the instant to UTC again with the new offset\n        final long instantUTC2 = instantUTC - (offsetAdjusted * MILLIS_PER_SECOND);\n        // get the offset at the new UTC instant\n        final int offsetAdjusted2 = getOffset(instantUTC2);\n        // check if we have the correct offset and return it\n        return (offsetAdjusted == offsetAdjusted2) ? offsetAdjusted : offsetLocal;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3adb48ae 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,28 +876,25 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n+   \n     public int getOffsetFromLocal(long instantLocal) {\n+        // adjust the instant to UTC\n+        final long instantUTC = getMillisSinceEpoch(instantLocal);\n         // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+        // if the offsets are the same, we have the correct offset\n+        if (offsetLocal == offsetAdjusted) {\n+            return offsetLocal;\n         }\n-        return offsetAdjusted;\n+        // adjust the instant to UTC again with the new offset\n+        final long instantUTC2 = instantUTC - (offsetAdjusted * MILLIS_PER_SECOND);\n+        // get the offset at the new UTC instant\n+        final int offsetAdjusted2 = getOffset(instantUTC2);\n+        // check if we have the correct offset and return it\n+        return (offsetAdjusted == offsetAdjusted2) ? offsetAdjusted : offsetLocal;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}