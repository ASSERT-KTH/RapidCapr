{
    "patch": "    // Build a list of references to the function's arguments.\n    final Set<AstChange> paramReferences = Sets.newHashSet();\n    NodeTraversal.traverseEs6(\n        compiler,\n        function,\n        new NodeTraversal.AbstractShallowCallback() {\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            // Find all references to function parameters.\n            if (n.isName() && n.getParent().isParamList()) {\n              AstChange pc = new AstChange();\n              pc.param = FunctionParam.fromName(n.getString());\n              paramReferences.add(pc);\n            }\n          }\n        });\n\n    // Build a list of all function parameters.\n    ArrayList<FunctionParam> functionParams = new ArrayList<>();\n    for (Node n : getFunctionArgList(function).children()) {\n      functionParams.add(FunctionParam.fromName(n.getString()));\n    }\n\n    if (!modifyCallSites) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (int i = functionParams.size() - 1; i >= 0; i--) {\n        FunctionParam param = functionParams.get(i);\n        if (!referenced.contains(param)) {\n          removeArgFromDeclaration(param, function);\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced, functionParams, paramReferences);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..af6d84a7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Build a list of references to the function's arguments.\n+    final Set<AstChange> paramReferences = Sets.newHashSet();\n+    NodeTraversal.traverseEs6(\n+        compiler,\n+        function,\n+        new NodeTraversal.AbstractShallowCallback() {\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            // Find all references to function parameters.\n+            if (n.isName() && n.getParent().isParamList()) {\n+              AstChange pc = new AstChange();\n+              pc.param = FunctionParam.fromName(n.getString());\n+              paramReferences.add(pc);\n+            }\n+          }\n+        });\n+\n+    // Build a list of all function parameters.\n+    ArrayList<FunctionParam> functionParams = new ArrayList<>();\n+    for (Node n : getFunctionArgList(function).children()) {\n+      functionParams.add(FunctionParam.fromName(n.getString()));\n+    }\n+\n+    if (!modifyCallSites) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (int i = functionParams.size() - 1; i >= 0; i--) {\n+        FunctionParam param = functionParams.get(i);\n+        if (!referenced.contains(param)) {\n+          removeArgFromDeclaration(param, function);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced, functionParams, paramReferences);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}