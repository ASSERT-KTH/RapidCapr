{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // build list of used and no default params\n    boolean allParamsAreUsed = true;\n    List<Node> newList = new LinkedList<>();\n    Node cursor = argList.getFirstChild();\n    while (cursor != null) {\n      if (cursor.isDefaultValue()) {\n        if (NodeUtil.referencesDefaultValue(cursor.getLastChild())) {\n          newList.add(cursor.detach());\n        } else {\n          allParamsAreUsed = false;\n        }\n      } else if (referencedAsNonOptional.contains(cursor.getString())) {\n        newList.add(cursor.detach());\n      } else {\n        allParamsAreUsed = false;\n      }\n      cursor = cursor.getNext();\n    }\n\n    if (!newList.isEmpty() || !allParamsAreUsed) {\n      // Strip unreferenced or defaulted args\n      argList.removeChildren();\n      for (Node param : newList) {\n        argList.addChildToBack(param);\n      }\n      NodeUtil.markFunctionsDeleted(newList, compiler);\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c9d237a6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // build list of used and no default params\n+    boolean allParamsAreUsed = true;\n+    List<Node> newList = new LinkedList<>();\n+    Node cursor = argList.getFirstChild();\n+    while (cursor != null) {\n+      if (cursor.isDefaultValue()) {\n+        if (NodeUtil.referencesDefaultValue(cursor.getLastChild())) {\n+          newList.add(cursor.detach());\n+        } else {\n+          allParamsAreUsed = false;\n+        }\n+      } else if (referencedAsNonOptional.contains(cursor.getString())) {\n+        newList.add(cursor.detach());\n+      } else {\n+        allParamsAreUsed = false;\n+      }\n+      cursor = cursor.getNext();\n+    }\n+\n+    if (!newList.isEmpty() || !allParamsAreUsed) {\n+      // Strip unreferenced or defaulted args\n+      argList.removeChildren();\n+      for (Node param : newList) {\n+        argList.addChildToBack(param);\n+      }\n+      NodeUtil.markFunctionsDeleted(newList, compiler);\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}