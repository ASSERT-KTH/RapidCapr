{
    "patch": "    boolean removeArgs = compiler.getOptions().getRemoveUnusedArguments();\n    if (!modifyCallers && removeArgs) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node arg = argList.getFirstChild();\n      while (arg != null && arg.getNext() != null) {\n        if (!NodeUtil.isNameReferenced(arg.getNext(), fnScope)) {\n          argList.removeChild(arg.getNext());\n          compiler.reportCodeChange();\n        }\n        arg = arg.getNext();\n      }\n    } else if (!modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5a99883d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean removeArgs = compiler.getOptions().getRemoveUnusedArguments();\n+    if (!modifyCallers && removeArgs) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node arg = argList.getFirstChild();\n+      while (arg != null && arg.getNext() != null) {\n+        if (!NodeUtil.isNameReferenced(arg.getNext(), fnScope)) {\n+          argList.removeChild(arg.getNext());\n+          compiler.reportCodeChange();\n+        }\n+        arg = arg.getNext();\n+      }\n+    } else if (!modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}