{
    "patch": "      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          if (ref.getName().startsWith(\"__forIn\")) {\n            // for..in loops will read and write to the variable multiple times.\n            return false;\n          } else if (ref.getName().startsWith(\"__for\")) {\n            // Using a var in a normal loop means it will be assigned multiple times.\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2f40987b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          if (ref.getName().startsWith(\"__forIn\")) {\n+            // for..in loops will read and write to the variable multiple times.\n+            return false;\n+          } else if (ref.getName().startsWith(\"__for\")) {\n+            // Using a var in a normal loop means it will be assigned multiple times.\n+            return false;\n+          }\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}