{
    "patch": "public static String fixCode(String code) {\n    String subStr = \"(0 in \";\n    int idx = code.indexOf(subStr);\n    if (idx != -1) {\n        int startIdx = code.lastIndexOf('(', idx);\n        int endIdx = code.indexOf(')', idx) + 1;\n        String subcode = code.substring(startIdx, endIdx);\n        subcode = subcode.replace(\"0 in \", \"\");\n        subcode = \"[\" + subcode + \"]\";\n        code = code.substring(0, startIdx) + subcode + code.substring(endIdx);\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..fd97e440 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,19 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String subStr = \"(0 in \";\n+    int idx = code.indexOf(subStr);\n+    if (idx != -1) {\n+        int startIdx = code.lastIndexOf('(', idx);\n+        int endIdx = code.indexOf(')', idx) + 1;\n+        String subcode = code.substring(startIdx, endIdx);\n+        subcode = subcode.replace(\"0 in \", \"\");\n+        subcode = \"[\" + subcode + \"]\";\n+        code = code.substring(0, startIdx) + subcode + code.substring(endIdx);\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}