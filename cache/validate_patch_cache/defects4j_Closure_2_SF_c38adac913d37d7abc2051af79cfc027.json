{
    "patch": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    if (implicitProto == null) {\n        // This can be the case if interfaceType is proxy to a non-existent\n        // object (which is a bad type annotation, but shouldn't crash).\n        // Therefore, we don't need to do anything here, just return.\n        return;\n    }\n    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n    if (currentPropertyNames == null) {\n        // In rare cases, implicitProto.getOwnPropertyNames() can return null.\n        // This happens if the external type source is not available in the currently running compilation.\n        // Therefore, we don't need to do anything here, just return.\n        return;\n    }\n    for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        if (oType != null) {\n            JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n            if (interfaceTypePropertyType == null) {\n                // This can happen if the property is not defined in interfaceType.\n                // Therefore, we don't need to do anything here, just continue the loop.\n                continue;\n            }\n            if (!interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {\n                compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name,\n                        oType.toString(), interfaceType.toString()));\n            }\n        }\n        currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n                currentProperties, iType);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..5f1f2a94 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,33 +1563,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n       String functionName, HashMap<String, ObjectType> properties,\n       HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    if (implicitProto == null) {\n+        // This can be the case if interfaceType is proxy to a non-existent\n+        // object (which is a bad type annotation, but shouldn't crash).\n+        // Therefore, we don't need to do anything here, just return.\n+        return;\n+    }\n+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    if (currentPropertyNames == null) {\n+        // In rare cases, implicitProto.getOwnPropertyNames() can return null.\n+        // This happens if the external type source is not available in the currently running compilation.\n+        // Therefore, we don't need to do anything here, just return.\n+        return;\n+    }\n     for (String name : currentPropertyNames) {\n-      ObjectType oType = properties.get(name);\n-      if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n-          compiler.report(\n-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n+        ObjectType oType = properties.get(name);\n+        if (oType != null) {\n+            JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n+            if (interfaceTypePropertyType == null) {\n+                // This can happen if the property is not defined in interfaceType.\n+                // Therefore, we don't need to do anything here, just continue the loop.\n+                continue;\n+            }\n+            if (!interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {\n+                compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name,\n+                        oType.toString(), interfaceType.toString()));\n+            }\n         }\n-      }\n-      currentProperties.put(name, interfaceType);\n+        currentProperties.put(name, interfaceType);\n     }\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n-      checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n+        checkInterfaceConflictProperties(t, n, functionName, properties,\n+                currentProperties, iType);\n     }\n-  }\n+}\n \n   /**\n    * Visits a {@link Token#FUNCTION} node.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}