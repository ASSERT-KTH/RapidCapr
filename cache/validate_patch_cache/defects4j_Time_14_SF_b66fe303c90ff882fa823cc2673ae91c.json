{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n        }\n    }\n    int year = 0, month = 0, day = 0;\n    int yearIndex = DateTimeFieldType.year().getFieldIndex();\n    int monthIndex = DateTimeFieldType.monthOfYear().getFieldIndex();\n    int dayIndex = DateTimeFieldType.dayOfMonth().getFieldIndex();\n\n    // Calculate new values for year, month, and day fields\n    if (fieldIndex == yearIndex) {\n        year = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n        if (monthIndex < values.length) {\n            month = values[monthIndex];\n        }\n        if (dayIndex < values.length) {\n            day = values[dayIndex];\n        }\n    } else if (fieldIndex == monthIndex) {\n        year = values[yearIndex];\n        month = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n        if (dayIndex < values.length) {\n            day = values[dayIndex];\n        }\n        if (month <= 0 || month > 12) {\n            int yearDelta = month / 12;\n            month = ((month % 12) + 12) % 12;\n            if (month == 0) {\n                month = 12;\n            }\n            year = iChronology.years().add(year, yearDelta);\n        }\n    } else if (fieldIndex == dayIndex) {\n        year = values[yearIndex];\n        month = values[monthIndex];\n        day = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n        if (day <= 0 || day > iChronology.dayOfMonth().getMaximumValue(year, month)) {\n            // Date is outside of valid range, so we need to calculate the correct date\n            LocalDate date = new LocalDate(year, month, 1);\n            LocalDate newDate = date.plusDays(day - 1);\n            year = newDate.getYear();\n            month = newDate.getMonthOfYear();\n            day = newDate.getDayOfMonth();\n        }\n    }\n\n    int[] newValues = Arrays.copyOf(values, values.length);\n    newValues[yearIndex] = year;\n    if (monthIndex < values.length) {\n        newValues[monthIndex] = month;\n    }\n    if (dayIndex < values.length) {\n        newValues[dayIndex] = day;\n    }\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..fd07005e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,77 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+        try {\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n+        }\n+    }\n+    int year = 0, month = 0, day = 0;\n+    int yearIndex = DateTimeFieldType.year().getFieldIndex();\n+    int monthIndex = DateTimeFieldType.monthOfYear().getFieldIndex();\n+    int dayIndex = DateTimeFieldType.dayOfMonth().getFieldIndex();\n+\n+    // Calculate new values for year, month, and day fields\n+    if (fieldIndex == yearIndex) {\n+        year = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n+        if (monthIndex < values.length) {\n+            month = values[monthIndex];\n+        }\n+        if (dayIndex < values.length) {\n+            day = values[dayIndex];\n+        }\n+    } else if (fieldIndex == monthIndex) {\n+        year = values[yearIndex];\n+        month = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n+        if (dayIndex < values.length) {\n+            day = values[dayIndex];\n+        }\n+        if (month <= 0 || month > 12) {\n+            int yearDelta = month / 12;\n+            month = ((month % 12) + 12) % 12;\n+            if (month == 0) {\n+                month = 12;\n+            }\n+            year = iChronology.years().add(year, yearDelta);\n+        }\n+    } else if (fieldIndex == dayIndex) {\n+        year = values[yearIndex];\n+        month = values[monthIndex];\n+        day = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n+        if (day <= 0 || day > iChronology.dayOfMonth().getMaximumValue(year, month)) {\n+            // Date is outside of valid range, so we need to calculate the correct date\n+            LocalDate date = new LocalDate(year, month, 1);\n+            LocalDate newDate = date.plusDays(day - 1);\n+            year = newDate.getYear();\n+            month = newDate.getMonthOfYear();\n+            day = newDate.getDayOfMonth();\n         }\n     }\n \n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    newValues[yearIndex] = year;\n+    if (monthIndex < values.length) {\n+        newValues[monthIndex] = month;\n+    }\n+    if (dayIndex < values.length) {\n+        newValues[dayIndex] = day;\n+    }\n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}