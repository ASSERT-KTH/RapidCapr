{
    "patch": "            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                DateTimeField field = savedField.iField;\n                int value = savedField.iValue;\n                try {\n                    millis = field.set(millis, value);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    // if we are about to reset the fields, it's more useful to\n                    // throw an exception that relates to the original input year\n                    if (resetFields) {\n                        throw e;\n                    }\n                    // let's see which field is at fault here\n                    DateTimeFieldType fieldType = field.getType();\n                    int minVal = field.getMinimumValue();\n                    int maxVal = field.getMaximumValue();\n                    if (value < minVal || value > maxVal) {\n                        throw e;\n                    }\n                    if (fieldType == DateTimeFieldType.year()) {\n                        long yearMillis = iChrono.setYear(millis, value);\n                        for (int j = 0; j < count; j++) {\n                            if (savedFields[j].iField.getType() == DateTimeFieldType.year()) {\n                                savedFields[j].set(yearMillis, false);\n                            }\n                        }\n                        millis = yearMillis;\n                    } else if (fieldType == DateTimeFieldType.weekyear()) {\n                        long yearMillis = iChrono.setWeekyear(millis, value);\n                        for (int j = 0; j < count; j++) {\n                            if (savedFields[j].iField.getType() == DateTimeFieldType.weekyear()) {\n                                savedFields[j].set(yearMillis, false);\n                            }\n                        }\n                        millis = yearMillis;\n                    } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n                        long monthMillis = iChrono.setMonthOfYear(millis, value);\n                        if (iChrono.getMonthOfYear(monthMillis) != value) {\n                            throw e;\n                        }\n                        for (int j = 0; j < count; j++) {\n                            if (savedFields[j].iField.getType() == DateTimeFieldType.monthOfYear()) {\n                                savedFields[j].set(monthMillis, false);\n                            }\n                        }\n                        millis = monthMillis;\n                    } else {\n                        throw e;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..deba2c3a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,60 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            for (int i = 0; i < count; i++) {\n+                SavedField savedField = savedFields[i];\n+                DateTimeField field = savedField.iField;\n+                int value = savedField.iValue;\n+                try {\n+                    millis = field.set(millis, value);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    // if we are about to reset the fields, it's more useful to\n+                    // throw an exception that relates to the original input year\n+                    if (resetFields) {\n+                        throw e;\n+                    }\n+                    // let's see which field is at fault here\n+                    DateTimeFieldType fieldType = field.getType();\n+                    int minVal = field.getMinimumValue();\n+                    int maxVal = field.getMaximumValue();\n+                    if (value < minVal || value > maxVal) {\n+                        throw e;\n+                    }\n+                    if (fieldType == DateTimeFieldType.year()) {\n+                        long yearMillis = iChrono.setYear(millis, value);\n+                        for (int j = 0; j < count; j++) {\n+                            if (savedFields[j].iField.getType() == DateTimeFieldType.year()) {\n+                                savedFields[j].set(yearMillis, false);\n+                            }\n+                        }\n+                        millis = yearMillis;\n+                    } else if (fieldType == DateTimeFieldType.weekyear()) {\n+                        long yearMillis = iChrono.setWeekyear(millis, value);\n+                        for (int j = 0; j < count; j++) {\n+                            if (savedFields[j].iField.getType() == DateTimeFieldType.weekyear()) {\n+                                savedFields[j].set(yearMillis, false);\n+                            }\n+                        }\n+                        millis = yearMillis;\n+                    } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                        long monthMillis = iChrono.setMonthOfYear(millis, value);\n+                        if (iChrono.getMonthOfYear(monthMillis) != value) {\n+                            throw e;\n+                        }\n+                        for (int j = 0; j < count; j++) {\n+                            if (savedFields[j].iField.getType() == DateTimeFieldType.monthOfYear()) {\n+                                savedFields[j].set(monthMillis, false);\n+                            }\n+                        }\n+                        millis = monthMillis;\n+                    } else {\n+                        throw e;\n+                    }\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}