{
    "patch": "        if (block.isFunction) {\n            // check that the variable is not captured by a closure\n            Symbol symbol = getSymbol();\n            if (symbol instanceof ScopedSymbol) {\n                if (((ScopedSymbol) symbol).getScope().getClosestHoistScope() != block) {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } else if (block.isLoop) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..764d3d99 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+            // check that the variable is not captured by a closure\n+            Symbol symbol = getSymbol();\n+            if (symbol instanceof ScopedSymbol) {\n+                if (((ScopedSymbol) symbol).getScope().getClosestHoistScope() != block) {\n+                    break;\n+                }\n+            } else {\n+                break;\n+            }\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}