{
    "patch": "public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n        js = getCode();\n    } catch (IOException e) {\n        return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n        pos = lastOffset;\n        startLine = lastLine;\n    }\n\n    String line = null;\n    int lineNum = startLine;\n    int nextpos = js.indexOf('\\n', pos);\n    while (nextpos != -1) {\n        if (lineNum == lineNumber) {\n            line = js.substring(pos, nextpos);\n            break;\n        }\n        pos = nextpos + 1;\n        lineNum++;\n        nextpos = js.indexOf('\\n', pos);\n    }\n\n    // If the line number is larger than the number of lines in the file,\n    // or there are no more lines after lineNumber.\n    if (line == null && lineNum == lineNumber) {\n        line = js.substring(pos);\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNum;\n\n    return line;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex fc0cf3fc..fb83ff2c 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -202,15 +202,12 @@ public class SourceFile implements StaticSourceFile, Serializable {\n    *     of the file. Returns {@code null} if it does not exist,\n    *     or if there was an IO exception.\n    */\n-  public String getLine(int lineNumber) {\n+public String getLine(int lineNumber) {\n     String js = \"\";\n     try {\n-      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n-      // This is probably the right trade-off, but will be slow if there\n-      // are lots of warnings in one file.\n-      js = getCode();\n+        js = getCode();\n     } catch (IOException e) {\n-      return null;\n+        return null;\n     }\n \n     int pos = 0;\n@@ -219,31 +216,35 @@ public class SourceFile implements StaticSourceFile, Serializable {\n     // If we've saved a previous offset and it's for a line less than the\n     // one we're searching for, then start at that point.\n     if (lineNumber >= lastLine) {\n-      pos = lastOffset;\n-      startLine = lastLine;\n+        pos = lastOffset;\n+        startLine = lastLine;\n     }\n \n-    for (int n = startLine; n < lineNumber; n++) {\n-      int nextpos = js.indexOf('\\n', pos);\n-      if (nextpos == -1) {\n-        return null;\n-      }\n-      pos = nextpos + 1;\n+    String line = null;\n+    int lineNum = startLine;\n+    int nextpos = js.indexOf('\\n', pos);\n+    while (nextpos != -1) {\n+        if (lineNum == lineNumber) {\n+            line = js.substring(pos, nextpos);\n+            break;\n+        }\n+        pos = nextpos + 1;\n+        lineNum++;\n+        nextpos = js.indexOf('\\n', pos);\n+    }\n+\n+    // If the line number is larger than the number of lines in the file,\n+    // or there are no more lines after lineNumber.\n+    if (line == null && lineNum == lineNumber) {\n+        line = js.substring(pos);\n     }\n \n     // Remember this offset for the next search we do.\n     lastOffset = pos;\n-    lastLine = lineNumber;\n+    lastLine = lineNum;\n \n-    if (js.indexOf('\\n', pos) == -1) {\n-      // If next new line cannot be found, there are two cases\n-      // 1. pos already reaches the end of file, then null should be returned\n-      // 2. otherwise, return the contents between pos and the end of file.\n-        return null;\n-    } else {\n-      return js.substring(pos, js.indexOf('\\n', pos));\n-    }\n-  }\n+    return line;\n+}\n \n   /**\n    * Get a region around the indicated line number. The exact definition of a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<null> but was:<>",
    "test_result": "FAIL"
}