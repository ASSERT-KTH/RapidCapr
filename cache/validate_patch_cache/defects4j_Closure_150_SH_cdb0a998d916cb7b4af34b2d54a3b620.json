{
    "patch": "      if (n.getType() == Token.LP && NodeUtil.getFunctionInParameterMode(n) && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      if (n.getType() == Token.LP && !NodeUtil.getFunctionInParameterMode(n) && !NodeUtil.isClassMethod(parent)) {\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          if (NodeUtil.isGetOrSetKey(parent)) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..35f28a92 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,12 +1448,24 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+      if (n.getType() == Token.LP && NodeUtil.getFunctionInParameterMode(n) && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.LP && !NodeUtil.getFunctionInParameterMode(n) && !NodeUtil.isClassMethod(parent)) {\n+        return;\n+      }\n+\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n+          if (NodeUtil.isGetOrSetKey(parent)) {\n+            return;\n+          }\n           defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n@@ -1462,7 +1474,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        default:\n+          break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}