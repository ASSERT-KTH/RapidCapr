{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = NodeUtil.getFunctionBody(fnNode);\n\n  // Ensure that the first child is a reference to a function.\n  Node callee = callNode.getFirstChild();\n  if (!callee.isName() && !callee.isGetProp()) {\n    return CanInlineResult.NO;\n  }\n  \n  // Ensure that the callee is a reference to the given function.\n  if (!NodeUtil.isFunctionObjectCall(callee)) {\n    // This is not a `call` on a function object, so skip check.\n  } else if (callee.getFirstChild().matchesQualifiedName(fnNode.getFirstChild().getQualifiedName())) {\n    // This is a direct call to the same function.\n  } else {\n    return CanInlineResult.NO;\n  }\n\n  Node cArg = callee.getNext();\n  boolean isApply = NodeUtil.isFunctionObjectApply(callee);\n  boolean isFirstParamThis = false;\n  if (!callee.isName() && isApply && cArg != null && cArg.isThis()) {\n    isFirstParamThis = true;\n    cArg = cArg.getNext();\n  }\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  while (cArg != null && fnParam != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n        NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n\n    cArg = cArg.getNext();\n    fnParam = fnParam.getNext();\n  }\n\n  if (fnParam != null || cArg != null) {\n    // The number of passed arguments doesn't match the number of parameters.\n    return CanInlineResult.NO;\n  }\n\n  // A direct function call is not allowed to use \"this\".\n  if (isFirstParamThis) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..1c1733ef 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,64 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = NodeUtil.getFunctionBody(fnNode);\n \n+  // Ensure that the first child is a reference to a function.\n+  Node callee = callNode.getFirstChild();\n+  if (!callee.isName() && !callee.isGetProp()) {\n+    return CanInlineResult.NO;\n+  }\n+  \n+  // Ensure that the callee is a reference to the given function.\n+  if (!NodeUtil.isFunctionObjectCall(callee)) {\n+    // This is not a `call` on a function object, so skip check.\n+  } else if (callee.getFirstChild().matchesQualifiedName(fnNode.getFirstChild().getQualifiedName())) {\n+    // This is a direct call to the same function.\n+  } else {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  Node cArg = callee.getNext();\n+  boolean isApply = NodeUtil.isFunctionObjectApply(callee);\n+  boolean isFirstParamThis = false;\n+  if (!callee.isName() && isApply && cArg != null && cArg.isThis()) {\n+    isFirstParamThis = true;\n+    cArg = cArg.getNext();\n+  }\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  while (cArg != null && fnParam != null) {\n+    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n+        NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    cArg = cArg.getNext();\n+    fnParam = fnParam.getNext();\n+  }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n+  if (fnParam != null || cArg != null) {\n+    // The number of passed arguments doesn't match the number of parameters.\n+    return CanInlineResult.NO;\n+  }\n \n-    return CanInlineResult.YES;\n+  // A direct function call is not allowed to use \"this\".\n+  if (isFirstParamThis) {\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}