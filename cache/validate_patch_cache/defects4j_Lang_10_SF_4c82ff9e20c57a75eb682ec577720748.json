{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean backslashEscaped = false;\n    regex.ensureCapacity(value.length() * 2);\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        switch (c) {\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                if (backslashEscaped) {\n                    regex.setLength(regex.length() - 1);\n                    backslashEscaped = false;\n                }\n                regex.append('\\\\');\n                regex.append(c);\n                wasWhite = false;\n                break;\n            case ' ':\n            case '\\t':\n            case '\\r':\n            case '\\n':\n                if (!wasWhite) {\n                    regex.append(\"\\\\s*+\");\n                    wasWhite = true;\n                }\n                break;\n            case '\\\\':\n                if (i + 1 < value.length() && value.charAt(i + 1) == 's') {\n                    if (!wasWhite || backslashEscaped) {\n                        regex.append(\"(?:\\\\\\\\s*+|\\\\\\\\\\\\\\\\s*+)\");\n                        wasWhite = true;\n                        backslashEscaped = false;\n                    } else {\n                        regex.append(\"\\\\\\\\s*+\");\n                        backslashEscaped = true;\n                    }\n                    i++;\n                } else {\n                    regex.append('\\\\');\n                    backslashEscaped = true;\n                    wasWhite = false;\n                }\n                break;\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                    regex.append(c);\n                } else {\n                    regex.append(c);\n                }\n                wasWhite = false;\n                backslashEscaped = false;\n                break;\n            default:\n                regex.append(c);\n                wasWhite = false;\n                backslashEscaped = false;\n                break;\n        }\n    }\n    if (unquote && wasWhite) {\n        regex.append(\"\\\\s*+\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..ad8149e8 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,27 +300,13 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean backslashEscaped = false;\n+    regex.ensureCapacity(value.length() * 2);\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        switch (c) {\n             case '?':\n             case '[':\n             case ']':\n@@ -328,19 +314,71 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n+                if (backslashEscaped) {\n+                    regex.setLength(regex.length() - 1);\n+                    backslashEscaped = false;\n+                }\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                regex.append(c);\n+                wasWhite = false;\n+                break;\n+            case ' ':\n+            case '\\t':\n+            case '\\r':\n+            case '\\n':\n+                if (!wasWhite) {\n+                    regex.append(\"\\\\s*+\");\n+                    wasWhite = true;\n+                }\n+                break;\n+            case '\\\\':\n+                if (i + 1 < value.length() && value.charAt(i + 1) == 's') {\n+                    if (!wasWhite || backslashEscaped) {\n+                        regex.append(\"(?:\\\\\\\\s*+|\\\\\\\\\\\\\\\\s*+)\");\n+                        wasWhite = true;\n+                        backslashEscaped = false;\n+                    } else {\n+                        regex.append(\"\\\\\\\\s*+\");\n+                        backslashEscaped = true;\n+                    }\n+                    i++;\n+                } else {\n+                    regex.append('\\\\');\n+                    backslashEscaped = true;\n+                    wasWhite = false;\n+                }\n+                break;\n+            case '\\'':\n+                if (unquote) {\n+                    if (++i == value.length()) {\n+                        return regex;\n+                    }\n+                    c = value.charAt(i);\n+                    regex.append(c);\n+                } else {\n+                    regex.append(c);\n+                }\n+                wasWhite = false;\n+                backslashEscaped = false;\n+                break;\n+            default:\n+                regex.append(c);\n+                wasWhite = false;\n+                backslashEscaped = false;\n+                break;\n         }\n-        return regex;\n     }\n+    if (unquote && wasWhite) {\n+        regex.append(\"\\\\s*+\");\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}