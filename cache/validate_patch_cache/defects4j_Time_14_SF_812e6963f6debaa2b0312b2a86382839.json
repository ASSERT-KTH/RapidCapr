{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isEndOfMonth = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int currentValue = values[i];\n                int newValue = iChronology.getField(i).add(currentValue, valueToAdd);\n                if (newValue != currentValue) {\n                    // If the dayOfMonth is out of range, adjust it to the last day of the month\n                    int maxDayOfMonth = iChronology.getDaysInYearMonth(values[0], values[1]); // this year, month\n                    if (values[2] > maxDayOfMonth) {\n                        values[2] = maxDayOfMonth;\n                        isEndOfMonth = true; // remember to make further adjustment later\n                    }\n                    instant = iChronology.getDateTimeMillis(\n                            newValue >= 0 ? values[0] : values[0] - 1,\n                            newValue >= 0 ? newValue : 12 + newValue,\n                            values[2],\n                            values[3]);\n                }\n                else {\n                \tinstant = partial.getFieldType(i).getField(iChronology).set(instant, currentValue);\n                }\n            }\n            else {\n            \tinstant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        if (isEndOfMonth) { // further adjustment needed\n            int maxDayOfMonth = iChronology.getDaysInYearMonth(result[0], result[1]);\n            if (result[2] > maxDayOfMonth) {\n                result[2] = maxDayOfMonth;\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f1cbe7d7 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,53 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isEndOfMonth = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int currentValue = values[i];\n+                int newValue = iChronology.getField(i).add(currentValue, valueToAdd);\n+                if (newValue != currentValue) {\n+                    // If the dayOfMonth is out of range, adjust it to the last day of the month\n+                    int maxDayOfMonth = iChronology.getDaysInYearMonth(values[0], values[1]); // this year, month\n+                    if (values[2] > maxDayOfMonth) {\n+                        values[2] = maxDayOfMonth;\n+                        isEndOfMonth = true; // remember to make further adjustment later\n+                    }\n+                    instant = iChronology.getDateTimeMillis(\n+                            newValue >= 0 ? values[0] : values[0] - 1,\n+                            newValue >= 0 ? newValue : 12 + newValue,\n+                            values[2],\n+                            values[3]);\n+                }\n+                else {\n+                \tinstant = partial.getFieldType(i).getField(iChronology).set(instant, currentValue);\n+                }\n+            }\n+            else {\n+            \tinstant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        instant = add(instant, valueToAdd);\n+        int[] result = iChronology.get(partial, instant);\n+        if (isEndOfMonth) { // further adjustment needed\n+            int maxDayOfMonth = iChronology.getDaysInYearMonth(result[0], result[1]);\n+            if (result[2] > maxDayOfMonth) {\n+                result[2] = maxDayOfMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}