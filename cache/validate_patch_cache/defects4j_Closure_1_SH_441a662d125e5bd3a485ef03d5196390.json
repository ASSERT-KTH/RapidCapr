{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\n\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg = argList.getLastChild();\n  ArrayList<Node> toRemove = new ArrayList<>();\n  while (lastArg != null\n          && !NodeUtil.isNameDeclaration(lastArg.getParent())) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      toRemove.add(lastArg);\n    } else {\n      break;\n    }\n    lastArg = lastArg.getPrevious();\n  }\n\n  if (!toRemove.isEmpty()) {\n    List<Node> childrenToRemove = new ArrayList<>(toRemove);\n    for (Node arg : childrenToRemove) {\n      argList.removeChild(arg);\n      compiler.reportCodeChange();\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bf8114e3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg = argList.getLastChild();\n+  ArrayList<Node> toRemove = new ArrayList<>();\n+  while (lastArg != null\n+          && !NodeUtil.isNameDeclaration(lastArg.getParent())) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      toRemove.add(lastArg);\n+    } else {\n+      break;\n+    }\n+    lastArg = lastArg.getPrevious();\n+  }\n+\n+  if (!toRemove.isEmpty()) {\n+    List<Node> childrenToRemove = new ArrayList<>(toRemove);\n+    for (Node arg : childrenToRemove) {\n+      argList.removeChild(arg);\n+      compiler.reportCodeChange();\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}