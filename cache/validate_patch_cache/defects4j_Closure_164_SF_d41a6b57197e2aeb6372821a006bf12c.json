{
    "patch": "    public boolean isSubtype(JSType other) {\n        if (!(other instanceof ArrowType)) {\n            return false;\n        }\n\n        ArrowType that = (ArrowType) other;\n        // Covariant on return types.\n        if (!that.returnType.isSubtype(this.returnType)) {\n            return false;\n        }\n\n        Node thisParam = parameters.getFirstChild();\n        Node thatParam = that.parameters.getFirstChild();\n\n        // Contravariant on parameter types. Parameter types must be\n        // assignable in both directions (even for optional parameters).\n        while (thisParam != null && thatParam != null) {\n            JSType thisParamType = thisParam.getJSType();\n            JSType thatParamType = thatParam.getJSType();\n\n            // Allow undefined to match optional types.\n            if (thisParamType == null) {\n                if (thatParamType == null || thatParamType.isUnknownType()\n                    || !thatParamType.isTemplateType()) {\n                    return false;\n                }\n            } else if (thatParamType == null) {\n                if (!thisParamType.isTemplateType()) {\n                    return false;\n                }\n            } else if (!thisParamType.isSubtype(thatParamType)\n                    && !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n\n            thisParam = thisParam.getNext();\n            thatParam = thatParam.getNext();\n        }\n\n        // Ensure that the number of parameters is the same, while ignoring\n        // trailing optional parameters. If the functions have variable\n        // arguments, then they are compatible only if the last parameter in\n        // each is the same.\n        boolean partitionTypeOfThat = false;\n        boolean partitionTypeOfThis = false;\n        boolean thisIsVarArgs = true;\n        boolean thatIsVarArgs = true;\n\n        while (thisParam != null) {\n            if (!thisParam.getJSType().isUnknownType()) {\n                partitionTypeOfThis = true;\n                break;\n            }\n\n            thisIsVarArgs = thisParam.isVarArgs();\n            thisParam = thisParam.getNext();\n        }\n        while (thatParam != null) {\n            if (!thatParam.getJSType().isUnknownType()) {\n                partitionTypeOfThat = true;\n                break;\n            }\n\n            thatIsVarArgs = thatParam.isVarArgs();\n            thatParam = thatParam.getNext();\n        }\n\n        return partitionTypeOfThat == partitionTypeOfThis &&\n                (!thatIsVarArgs || !thisIsVarArgs &&\n                      thisParam == null &&\n                      this.type == JSType.UNDEFINED ||\n                      this.type.isSubtype(thisParam.getJSType())) &&\n                (thisIsVarArgs == thatIsVarArgs || !thisIsVarArgs && !thatIsVarArgs);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..a810065d 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,79 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+    public boolean isSubtype(JSType other) {\n+        if (!(other instanceof ArrowType)) {\n+            return false;\n+        }\n \n-    ArrowType that = (ArrowType) other;\n+        ArrowType that = (ArrowType) other;\n+        // Covariant on return types.\n+        if (!that.returnType.isSubtype(this.returnType)) {\n+            return false;\n+        }\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+        Node thisParam = parameters.getFirstChild();\n+        Node thatParam = that.parameters.getFirstChild();\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+        // Contravariant on parameter types. Parameter types must be\n+        // assignable in both directions (even for optional parameters).\n+        while (thisParam != null && thatParam != null) {\n+            JSType thisParamType = thisParam.getJSType();\n+            JSType thatParamType = thatParam.getJSType();\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+            // Allow undefined to match optional types.\n+            if (thisParamType == null) {\n+                if (thatParamType == null || thatParamType.isUnknownType()\n+                    || !thatParamType.isTemplateType()) {\n+                    return false;\n+                }\n+            } else if (thatParamType == null) {\n+                if (!thisParamType.isTemplateType()) {\n+                    return false;\n+                }\n+            } else if (!thisParamType.isSubtype(thatParamType)\n+                    && !thatParamType.isSubtype(thisParamType)) {\n+                return false;\n+            }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+            thisParam = thisParam.getNext();\n+            thatParam = thatParam.getNext();\n+        }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        // Ensure that the number of parameters is the same, while ignoring\n+        // trailing optional parameters. If the functions have variable\n+        // arguments, then they are compatible only if the last parameter in\n+        // each is the same.\n+        boolean partitionTypeOfThat = false;\n+        boolean partitionTypeOfThis = false;\n+        boolean thisIsVarArgs = true;\n+        boolean thatIsVarArgs = true;\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+        while (thisParam != null) {\n+            if (!thisParam.getJSType().isUnknownType()) {\n+                partitionTypeOfThis = true;\n+                break;\n+            }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n-    }\n+            thisIsVarArgs = thisParam.isVarArgs();\n+            thisParam = thisParam.getNext();\n+        }\n+        while (thatParam != null) {\n+            if (!thatParam.getJSType().isUnknownType()) {\n+                partitionTypeOfThat = true;\n+                break;\n+            }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+            thatIsVarArgs = thatParam.isVarArgs();\n+            thatParam = thatParam.getNext();\n+        }\n \n-    return true;\n-  }\n+        return partitionTypeOfThat == partitionTypeOfThis &&\n+                (!thatIsVarArgs || !thisIsVarArgs &&\n+                      thisParam == null &&\n+                      this.type == JSType.UNDEFINED ||\n+                      this.type.isSubtype(thisParam.getJSType())) &&\n+                (thisIsVarArgs == thatIsVarArgs || !thisIsVarArgs && !thatIsVarArgs);\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}