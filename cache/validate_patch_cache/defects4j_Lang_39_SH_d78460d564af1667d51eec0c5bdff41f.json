{
    "patch": "// have upper-bound at 20% increase, then let Java take over\nincrease = Math.min(increase, text.length() / 5);\n\nStringBuilder buf = new StringBuilder(text.length() + increase);\n\nwhile (textIndex != -1) {\n\n    for (int i = start; i < textIndex; i++) {\n        buf.append(text.charAt(i));\n    }\n    \n    if (replacementList[replaceIndex]!=null) {\n        buf.append(replacementList[replaceIndex]);\n    }\n    \n    start = textIndex + searchList[replaceIndex].length();\n\n    textIndex = -1;\n    replaceIndex = -1;\n    tempIndex = -1;\n    // find the next earliest match\n    // NOTE: logic mostly duplicated above START\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i], start);\n\n        // see if we need to keep searching for this\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    // NOTE: logic duplicated above END\n\n}\nint textLength = text.length();\nfor (int i = start; i < textLength; i++) {\n    buf.append(text.charAt(i));\n}\nString result = buf.toString();\nif (!repeat) {\n    return result;\n}\n\nreturn replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/StringUtils.java b/src/java/org/apache/commons/lang3/StringUtils.java\nindex 14563aa6..dbf5bff4 100644\n--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n@@ -3673,6 +3673,59 @@ public class StringUtils {\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n+// have upper-bound at 20% increase, then let Java take over\n+increase = Math.min(increase, text.length() / 5);\n+\n+StringBuilder buf = new StringBuilder(text.length() + increase);\n+\n+while (textIndex != -1) {\n+\n+    for (int i = start; i < textIndex; i++) {\n+        buf.append(text.charAt(i));\n+    }\n+    \n+    if (replacementList[replaceIndex]!=null) {\n+        buf.append(replacementList[replaceIndex]);\n+    }\n+    \n+    start = textIndex + searchList[replaceIndex].length();\n+\n+    textIndex = -1;\n+    replaceIndex = -1;\n+    tempIndex = -1;\n+    // find the next earliest match\n+    // NOTE: logic mostly duplicated above START\n+    for (int i = 0; i < searchLength; i++) {\n+        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n+            searchList[i].length() == 0 || replacementList[i] == null) \n+        {\n+            continue;\n+        }\n+        tempIndex = text.indexOf(searchList[i], start);\n+\n+        // see if we need to keep searching for this\n+        if (tempIndex == -1) {\n+            noMoreMatchesForReplIndex[i] = true;\n+        } else {\n+            if (textIndex == -1 || tempIndex < textIndex) {\n+                textIndex = tempIndex;\n+                replaceIndex = i;\n+            }\n+        }\n+    }\n+    // NOTE: logic duplicated above END\n+\n+}\n+int textLength = text.length();\n+for (int i = start; i < textLength; i++) {\n+    buf.append(text.charAt(i));\n+}\n+String result = buf.toString();\n+if (!repeat) {\n+    return result;\n+}\n+\n+return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches",
    "result_reason": "error: variable i is already defined in method replaceEach(String,String[],String[],boolean,int)",
    "test_result": "ERROR"
}