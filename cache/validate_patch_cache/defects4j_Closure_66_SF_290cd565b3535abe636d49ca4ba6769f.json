{
    "patch": "public double getTypedPercent(JSONObject jsonObject) {\n    double total = jsonObject.keySet().size();\n    double typedCount = 0.0;\n\n    for (String key : jsonObject.keySet()) {\n        Object value = jsonObject.get(key);\n        if (value instanceof JSONObject) {\n            typedCount += getTypedPercent((JSONObject) value);\n        } else if (value instanceof JSONArray) {\n            JSONArray jsonArray = (JSONArray) value;\n            for (int i = 0; i < jsonArray.length(); i++) {\n                if (jsonArray.get(i) instanceof JSONObject) {\n                    typedCount += getTypedPercent((JSONObject) jsonArray.get(i));\n                }\n            }\n        } else {\n            typedCount++;\n        }\n    }\n    return (typedCount / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b0172446 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject jsonObject) {\n+    double total = jsonObject.keySet().size();\n+    double typedCount = 0.0;\n+\n+    for (String key : jsonObject.keySet()) {\n+        Object value = jsonObject.get(key);\n+        if (value instanceof JSONObject) {\n+            typedCount += getTypedPercent((JSONObject) value);\n+        } else if (value instanceof JSONArray) {\n+            JSONArray jsonArray = (JSONArray) value;\n+            for (int i = 0; i < jsonArray.length(); i++) {\n+                if (jsonArray.get(i) instanceof JSONObject) {\n+                    typedCount += getTypedPercent((JSONObject) jsonArray.get(i));\n+                }\n+            }\n+        } else {\n+            typedCount++;\n+        }\n+    }\n+    return (typedCount / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}