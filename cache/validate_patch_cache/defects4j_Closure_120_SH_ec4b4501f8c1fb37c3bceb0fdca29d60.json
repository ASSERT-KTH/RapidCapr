{
    "patch": "        } else if (!block.getLeavingEdge().getValue().isConditional()) {\n          // If the block is not a function, a loop or a conditional, it should only have one successor.\n          List<DiGraphEdge<BasicBlock, Branch>> outEdges = block.getOutEdges();\n          if (outEdges.size() == 1) {\n            block = outEdges.get(0).getDestination();\n          } else {\n            return false;\n          }\n        } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ca00144c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (!block.getLeavingEdge().getValue().isConditional()) {\n+          // If the block is not a function, a loop or a conditional, it should only have one successor.\n+          List<DiGraphEdge<BasicBlock, Branch>> outEdges = block.getOutEdges();\n+          if (outEdges.size() == 1) {\n+            block = outEdges.get(0).getDestination();\n+          } else {\n+            return false;\n+          }\n+        } else {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}