{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null && parent.getType() == Token.GETPROP &&\n    parent.getLastChild().getString().equals(\"prototype\")) {\n  return false;\n}\n\n// Don't traverse functions being assigned to a prototype property.\nif (NodeUtil.isGet(parent) &&\n    parent.getParent().getType() == Token.ASSIGN &&\n    parent.getParent().getLastChild() == parent &&\n    parent.getParent().getFirstChild().getType() == Token.GETPROP &&\n    parent.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n  return false;\n}\n\n// Don't traverse functions being used as arguments to a `mixin` call.\nif (parent != null && parent.getType() == Token.CALL &&\n    parent.getFirstChild().getType() == Token.NAME &&\n    parent.getFirstChild().getString().equals(\"mixin\") &&\n    parent.getLastChild().isSpread()) {\n  return false;\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5e2bcddd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,30 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.GETPROP &&\n+    parent.getLastChild().getString().equals(\"prototype\")) {\n+  return false;\n+}\n+\n+// Don't traverse functions being assigned to a prototype property.\n+if (NodeUtil.isGet(parent) &&\n+    parent.getParent().getType() == Token.ASSIGN &&\n+    parent.getParent().getLastChild() == parent &&\n+    parent.getParent().getFirstChild().getType() == Token.GETPROP &&\n+    parent.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+  return false;\n+}\n+\n+// Don't traverse functions being used as arguments to a `mixin` call.\n+if (parent != null && parent.getType() == Token.CALL &&\n+    parent.getFirstChild().getType() == Token.NAME &&\n+    parent.getFirstChild().getString().equals(\"mixin\") &&\n+    parent.getLastChild().isSpread()) {\n+  return false;\n+}\n+\n+return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}