{
    "patch": "      boolean isOverride = parent != null &&\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild().isGetProp() &&\n        parent.getFirstChild().getJSDocInfo() != null &&\n        parent.getFirstChild().getJSDocInfo().containsDeclaration() &&\n        getprop.getString().equals(\n            parent.getFirstChild().getLastChild().getString()) &&\n        getprop.getFirstChild().isQualifiedName() &&\n        getprop.getFirstChild().getQualifiedName().equals(\n            parent.getFirstChild().getFirstChild().getQualifiedName()) &&\n        t.getClosestHoistScope().getVar(\n            parent.getFirstChild().getFirstChild().getQualifiedName()) != null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..4efcdcdc 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,18 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = parent != null &&\n+        parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild().isGetProp() &&\n+        parent.getFirstChild().getJSDocInfo() != null &&\n+        parent.getFirstChild().getJSDocInfo().containsDeclaration() &&\n+        getprop.getString().equals(\n+            parent.getFirstChild().getLastChild().getString()) &&\n+        getprop.getFirstChild().isQualifiedName() &&\n+        getprop.getFirstChild().getQualifiedName().equals(\n+            parent.getFirstChild().getFirstChild().getQualifiedName()) &&\n+        t.getClosestHoistScope().getVar(\n+            parent.getFirstChild().getFirstChild().getQualifiedName()) != null;\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}