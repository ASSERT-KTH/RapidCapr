{
    "patch": "      // Don't traverse functions that are getting lent to a prototype if\n      // they don't receive \"this\" explicitly.\n      if (n.isFromExterns() || mayHaveAnyNominalTypeInfo(n)) {\n        return true;\n      }\n      if (parent != null && parent.getType() == Token.GETPROP) {\n        Node getPropChild = parent.getFirstChild();\n        if (getPropChild.getType() == Token.NAME &&\n            getPropChild.getString().equals(\"prototype\")) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..33351eb4 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype if\n+      // they don't receive \"this\" explicitly.\n+      if (n.isFromExterns() || mayHaveAnyNominalTypeInfo(n)) {\n+        return true;\n+      }\n+      if (parent != null && parent.getType() == Token.GETPROP) {\n+        Node getPropChild = parent.getFirstChild();\n+        if (getPropChild.getType() == Token.NAME &&\n+            getPropChild.getString().equals(\"prototype\")) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}