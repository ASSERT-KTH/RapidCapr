{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        if (type == null) {\n            continue;\n        }\n        if (type instanceof TypeVariable && !type.equals(typeVariable)) {\n            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n        } else if (type instanceof WildcardType) {\n            readTypeVariablesOnWildcardType((WildcardType) type);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n        if (actualTypeArgument instanceof TypeVariable && !isRecursiveTypeVariable((TypeVariable<?>) actualTypeArgument)) {\n            readTypeVariablesOnTypeVariable((TypeVariable<?>) actualTypeArgument);\n        } else if (actualTypeArgument instanceof WildcardType) {\n            readTypeVariablesOnWildcardType((WildcardType) actualTypeArgument);\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate boolean isRecursiveTypeVariable(TypeVariable<?> typeVariable) {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable && ((TypeVariable<?>) type).getName().equals(typeVariable.getName())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate void readTypeVariablesOnTypeVariable(TypeVariable<?> typeVariable) {\n    for (Type type : typeVariable.getBounds()) {\n        if (type == null) {\n            continue;\n        }\n        if (type instanceof TypeVariable && !isRecursiveTypeVariable((TypeVariable<?>) type)) {\n            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n        } else if (type instanceof WildcardType) {\n            readTypeVariablesOnWildcardType((WildcardType) type);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}\n\nprivate void readTypeVariablesOnWildcardType(WildcardType wildcardType) {\n    for (Type type : wildcardType.getUpperBounds()) {\n        if (type == null) {\n            continue;\n        }\n        if (type instanceof TypeVariable) {\n            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..331135d89 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,71 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type == null) {\n+            continue;\n+        }\n+        if (type instanceof TypeVariable && !type.equals(typeVariable)) {\n+            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n+        } else if (type instanceof WildcardType) {\n+            readTypeVariablesOnWildcardType((WildcardType) type);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n+        if (actualTypeArgument instanceof TypeVariable && !isRecursiveTypeVariable((TypeVariable<?>) actualTypeArgument)) {\n+            readTypeVariablesOnTypeVariable((TypeVariable<?>) actualTypeArgument);\n+        } else if (actualTypeArgument instanceof WildcardType) {\n+            readTypeVariablesOnWildcardType((WildcardType) actualTypeArgument);\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private boolean isRecursiveTypeVariable(TypeVariable<?> typeVariable) {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable && ((TypeVariable<?>) type).getName().equals(typeVariable.getName())) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private void readTypeVariablesOnTypeVariable(TypeVariable<?> typeVariable) {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type == null) {\n+            continue;\n+        }\n+        if (type instanceof TypeVariable && !isRecursiveTypeVariable((TypeVariable<?>) type)) {\n+            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n+        } else if (type instanceof WildcardType) {\n+            readTypeVariablesOnWildcardType((WildcardType) type);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOnWildcardType(WildcardType wildcardType) {\n+    for (Type type : wildcardType.getUpperBounds()) {\n+        if (type == null) {\n+            continue;\n+        }\n+        if (type instanceof TypeVariable) {\n+            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}