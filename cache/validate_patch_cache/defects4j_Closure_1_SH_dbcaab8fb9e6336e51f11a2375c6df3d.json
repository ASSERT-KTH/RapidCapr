{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !argIsReferenced(lastArg, fnScope)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        lastArg = argList.getLastChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n\n  private boolean argIsReferenced(Node arg, Scope fnScope) {\n    return fnScope.getVar(arg.getString()).isReferenced();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..911ae2ee 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !argIsReferenced(lastArg, fnScope)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        lastArg = argList.getLastChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n+\n+  private boolean argIsReferenced(Node arg, Scope fnScope) {\n+    return fnScope.getVar(arg.getString()).isReferenced();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}