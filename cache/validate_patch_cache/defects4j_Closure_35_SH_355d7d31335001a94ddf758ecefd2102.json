{
    "patch": "      // If the property is not defined but is present in the constraint then we infer its type\n      if ((objType.getImplicitPrototype().hasProperty(prop) || objType.getOwnPropertyNames().contains(prop)) &&\n          !objType.isProperyTypeDeclared(prop)) {\n        JSType typeToInfer = constraintObj.getPropertyType(prop);\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..21c573c6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,20 +1118,11 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+      // If the property is not defined but is present in the constraint then we infer its type\n+      if ((objType.getImplicitPrototype().hasProperty(prop) || objType.getOwnPropertyNames().contains(prop)) &&\n+          !objType.isProperyTypeDeclared(prop)) {\n+        JSType typeToInfer = constraintObj.getPropertyType(prop);\n+        objType.defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}