{
    "patch": "else if (maybeDecl.isLetOrConstDeclaration()) {\n  // let and const declarations are initialized to undefined\n  // unless they have an inline initializer.\n  if (index + 1 < references.size() && references.get(index + 1).isInitializingDeclaration()) {\n    return references.get(index + 1);\n  }\n  return maybeDecl;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e7634ace 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+else if (maybeDecl.isLetOrConstDeclaration()) {\n+  // let and const declarations are initialized to undefined\n+  // unless they have an inline initializer.\n+  if (index + 1 < references.size() && references.get(index + 1).isInitializingDeclaration()) {\n+    return references.get(index + 1);\n+  }\n+  return maybeDecl;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}