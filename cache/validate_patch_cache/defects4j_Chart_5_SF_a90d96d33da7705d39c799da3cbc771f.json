{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem item = new XYDataItem(x, y);\n    int index = Collections.binarySearch(this.data, item);\n\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        // If duplicate X values are not allowed and an existing item was found,\n        // replace its Y value with the new one.\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        XYDataItem overwritten = new XYDataItem(existing.getX(), existing.getY());\n        existing.setY(y);\n        fireSeriesChanged();\n        return overwritten;\n    } else if (this.autoSort) {\n        // If auto-sort is enabled, add the new item at the correct position while\n        // maintaining sorted order.\n        int insertionIndex = -index - 1;\n        this.data.add(insertionIndex, item);\n        if (this.getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n        fireSeriesChanged();\n        return null;\n    } else {\n        // If auto-sort is disabled, simply add the new item to the end of the series,\n        // regardless of whether or not its X value already exists in the series.\n        this.data.add(item);\n        if (!this.allowDuplicateXValues && this.getItemCount() > this.maximumItemCount) {\n            XYDataItem removed = (XYDataItem) this.data.remove(0);\n            return new XYDataItem(removed.getX(), removed.getY());\n        } else {\n            fireSeriesChanged();\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..0dc082a 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,45 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+\n+    XYDataItem item = new XYDataItem(x, y);\n+    int index = Collections.binarySearch(this.data, item);\n+\n+    if (index >= 0 && !this.allowDuplicateXValues) {\n+        // If duplicate X values are not allowed and an existing item was found,\n+        // replace its Y value with the new one.\n+        XYDataItem existing = (XYDataItem) this.data.get(index);\n+        XYDataItem overwritten = new XYDataItem(existing.getX(), existing.getY());\n+        existing.setY(y);\n+        fireSeriesChanged();\n+        return overwritten;\n+    } else if (this.autoSort) {\n+        // If auto-sort is enabled, add the new item at the correct position while\n+        // maintaining sorted order.\n+        int insertionIndex = -index - 1;\n+        this.data.add(insertionIndex, item);\n+        if (this.getItemCount() > this.maximumItemCount) {\n+            this.data.remove(0);\n+        }\n+        fireSeriesChanged();\n+        return null;\n+    } else {\n+        // If auto-sort is disabled, simply add the new item to the end of the series,\n+        // regardless of whether or not its X value already exists in the series.\n+        this.data.add(item);\n+        if (!this.allowDuplicateXValues && this.getItemCount() > this.maximumItemCount) {\n+            XYDataItem removed = (XYDataItem) this.data.remove(0);\n+            return new XYDataItem(removed.getX(), removed.getY());\n+        } else {\n+            fireSeriesChanged();\n+            return null;\n+        }\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "junit.framework.AssertionFailedError: expected:<22.2> but was:<2.2>",
    "test_result": "FAIL"
}