{
    "patch": "if (functionType.getParameterNames().contains(\"this\")) {\n  Node parent = n.getParent();\n  if (parent != null && parent.isGetProp()) {\n    visitGetProp(t, parent);\n    return;\n  } else if (parent != null && parent.isGetElem()) {\n    visitGetElem(t, parent);\n    return;\n  } else {\n    report(t, n, INVALID_THIS_TYPE);\n    return;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..1661036a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getParameterNames().contains(\"this\")) {\n+  Node parent = n.getParent();\n+  if (parent != null && parent.isGetProp()) {\n+    visitGetProp(t, parent);\n+    return;\n+  } else if (parent != null && parent.isGetElem()) {\n+    visitGetElem(t, parent);\n+    return;\n+  } else {\n+    report(t, n, INVALID_THIS_TYPE);\n+    return;\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}