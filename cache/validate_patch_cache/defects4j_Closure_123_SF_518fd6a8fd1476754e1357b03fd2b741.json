{
    "patch": "public static String fixCode(String code) {\n    String pattern = \"for\\\\s*\\\\((.*)\\\\)\\\\s*(.*)\";\n    Pattern r = Pattern.compile(pattern);\n    Matcher m = r.matcher(code);\n\n    String fixedCode = code;\n    if (m.find()) {\n        String condition = m.group(1);\n        String statement = m.group(2);\n\n        // check if the condition contains \"in\" keyword\n        if (condition.contains(\"in\")) {\n            String variable = condition.split(\" \")[0];\n            String array = condition.split(\" \")[2];\n\n            // check if the array is enclosed in brackets or not\n            if (array.startsWith(\"[\") && array.endsWith(\"]\")) {\n                fixedCode = code.replace(condition,\n                        String.format(\"%s %s=%s?0:%s.length;\", array, variable, variable, variable));\n            } else {\n                fixedCode = code.replace(condition,\n                        String.format(\"[].%s?0:%s.length;\", array, variable.toUpperCase(), variable.toUpperCase()));\n                fixedCode = fixedCode.replace(\"(\", String.format(\"(%s %s=\", fixedCode.substring(fixedCode.indexOf(\"for(\") + 4, fixedCode.indexOf(\":]\"))));\n            }\n            fixedCode = fixedCode.replace(\")\", \");\");\n        }\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..74424cb0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,35 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String pattern = \"for\\\\s*\\\\((.*)\\\\)\\\\s*(.*)\";\n+    Pattern r = Pattern.compile(pattern);\n+    Matcher m = r.matcher(code);\n+\n+    String fixedCode = code;\n+    if (m.find()) {\n+        String condition = m.group(1);\n+        String statement = m.group(2);\n+\n+        // check if the condition contains \"in\" keyword\n+        if (condition.contains(\"in\")) {\n+            String variable = condition.split(\" \")[0];\n+            String array = condition.split(\" \")[2];\n+\n+            // check if the array is enclosed in brackets or not\n+            if (array.startsWith(\"[\") && array.endsWith(\"]\")) {\n+                fixedCode = code.replace(condition,\n+                        String.format(\"%s %s=%s?0:%s.length;\", array, variable, variable, variable));\n+            } else {\n+                fixedCode = code.replace(condition,\n+                        String.format(\"[].%s?0:%s.length;\", array, variable.toUpperCase(), variable.toUpperCase()));\n+                fixedCode = fixedCode.replace(\"(\", String.format(\"(%s %s=\", fixedCode.substring(fixedCode.indexOf(\"for(\") + 4, fixedCode.indexOf(\":]\"))));\n+            }\n+            fixedCode = fixedCode.replace(\")\", \");\");\n+        }\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}