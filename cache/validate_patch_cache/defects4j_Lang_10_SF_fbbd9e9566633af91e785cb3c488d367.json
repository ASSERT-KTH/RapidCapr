{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    StringBuilder result = regex == null ? new StringBuilder() : regex;\n    result.setLength(0);\n    result.append(\"\\\\s*\");\n\n    for(int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n        switch(c) {\n            case '\\'':\n                if(unquote) {\n                    continue;\n                }\n                break;\n            case ' ': case '\\t': case '\\n': case '\\r': case '\\f':\n                result.append(\"\\\\s*\");\n                continue;\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                result.append('\\\\');\n                break;\n            default:\n                break;\n        }\n        result.append(c);\n    }\n    result.append(\"\\\\s*\");\n\n    if(unquote) {\n        String unquotedValue = value.replaceAll(\"^'+\", \"\").replaceAll(\"'+$\", \"\");\n        if(unquotedValue.length() != value.length()) {\n            result.setLength(0);\n            result.append(\"\\\\s*\");\n            for(int i = 0; i < unquotedValue.length(); i++) {\n                char c = unquotedValue.charAt(i);\n                if(c == ' ' || c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f') {\n                    result.append(\"\\\\s*\");\n                    continue;\n                }\n                switch(c) {\n                    case '[':\n                    case ']':\n                    case '(':\n                    case ')':\n                    case '{':\n                    case '}':\n                    case '\\\\':\n                    case '|':\n                    case '*':\n                    case '+':\n                    case '^':\n                    case '$':\n                    case '.':\n                        result.append('\\\\');\n                        break;\n                    default:\n                        break;\n                }\n                result.append(c);\n            }\n            result.append(\"\\\\s*\");\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..94b26237 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,28 +300,22 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    StringBuilder result = regex == null ? new StringBuilder() : regex;\n+    result.setLength(0);\n+    result.append(\"\\\\s*\");\n+\n+    for(int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+        switch(c) {\n             case '\\'':\n                 if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+                    continue;\n                 }\n                 break;\n-            case '?':\n+            case ' ': case '\\t': case '\\n': case '\\r': case '\\f':\n+                result.append(\"\\\\s*\");\n+                continue;\n             case '[':\n             case ']':\n             case '(':\n@@ -335,13 +329,54 @@ public class FastDateParser implements DateParser, Serializable {\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n+                result.append('\\\\');\n+                break;\n+            default:\n+                break;\n+        }\n+        result.append(c);\n+    }\n+    result.append(\"\\\\s*\");\n+\n+    if(unquote) {\n+        String unquotedValue = value.replaceAll(\"^'+\", \"\").replaceAll(\"'+$\", \"\");\n+        if(unquotedValue.length() != value.length()) {\n+            result.setLength(0);\n+            result.append(\"\\\\s*\");\n+            for(int i = 0; i < unquotedValue.length(); i++) {\n+                char c = unquotedValue.charAt(i);\n+                if(c == ' ' || c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f') {\n+                    result.append(\"\\\\s*\");\n+                    continue;\n+                }\n+                switch(c) {\n+                    case '[':\n+                    case ']':\n+                    case '(':\n+                    case ')':\n+                    case '{':\n+                    case '}':\n+                    case '\\\\':\n+                    case '|':\n+                    case '*':\n+                    case '+':\n+                    case '^':\n+                    case '$':\n+                    case '.':\n+                        result.append('\\\\');\n+                        break;\n+                    default:\n+                        break;\n+                }\n+                result.append(c);\n             }\n-            regex.append(c);\n+            result.append(\"\\\\s*\");\n         }\n-        return regex;\n     }\n \n+    return result;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}