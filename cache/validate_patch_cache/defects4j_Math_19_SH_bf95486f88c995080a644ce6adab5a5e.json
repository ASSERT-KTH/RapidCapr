{
    "patch": "                throw new NumberIsTooLargeException();\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                for (int i = 0; i < init.length; i++) {\n                    double-bound = FastMath.min(init[i] - lB[i], uB[i] - init[i]);\n                    if (double-bound <= 0 ||\n                        Double.isInfinite(double-bound) ||\n                        Double.isNaN(double-bound)) {\n                        throw new NumberIsTooLargeException(init[i], lB[i], uB[i], true);\n                    }\n                    if (Double.isInfinite(init[i]) &&\n                        Double.isInfinite(double-bound)) {\n                        // this will fail later on in \"encode\"\n                        throw new NumberIsTooLargeException(init[i], lB[i], uB[i], false);\n                    }\n                    inputSigma[i] /= double-bound;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..e3f54aadf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,27 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                throw new NumberIsTooLargeException();\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                for (int i = 0; i < init.length; i++) {\n+                    double-bound = FastMath.min(init[i] - lB[i], uB[i] - init[i]);\n+                    if (double-bound <= 0 ||\n+                        Double.isInfinite(double-bound) ||\n+                        Double.isNaN(double-bound)) {\n+                        throw new NumberIsTooLargeException(init[i], lB[i], uB[i], true);\n+                    }\n+                    if (Double.isInfinite(init[i]) &&\n+                        Double.isInfinite(double-bound)) {\n+                        // this will fail later on in \"encode\"\n+                        throw new NumberIsTooLargeException(init[i], lB[i], uB[i], false);\n+                    }\n+                    inputSigma[i] /= double-bound;\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}