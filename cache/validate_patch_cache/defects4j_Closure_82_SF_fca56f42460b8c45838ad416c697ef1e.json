{
    "patch": "public final boolean isEmptyType() {\n    boolean isEmpty = isNoType() || isNoObjectType() || isNoResolvedType();\n    if (!isEmpty && isUnionType()) {\n        JSTypeRegistry registry = getRegistry();\n        List<? extends JSType> alternatives = ((UnionType) this).getAlternates();\n        if (alternatives.stream().allMatch(JSType::isEmptyType)) {\n            isEmpty = true;\n        } else if (alternatives.stream().anyMatch(t -> t.isUnknownType() || t.isAllType())) {\n            boolean allEmptyOrUnknown = alternatives.stream()\n                .filter(t -> !t.isUnknownType() && !t.isAllType())\n                .allMatch(JSType::isEmptyType);\n            if (allEmptyOrUnknown) {\n                isEmpty = true;\n            }\n        } else if (alternatives.stream().allMatch(JSType::isLoose)) {\n            isEmpty = registry.getNativeType(UNKNOWN_TYPE).isEmptyType();\n        }\n    }\n    if (isEmpty) {\n        System.err.println(\"Warning: isEmptyType() called with no type.\");\n    }\n    return isEmpty;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..cffce860 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -159,9 +159,29 @@ public abstract class JSType implements Serializable {\n     return false;\n   }\n \n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+public final boolean isEmptyType() {\n+    boolean isEmpty = isNoType() || isNoObjectType() || isNoResolvedType();\n+    if (!isEmpty && isUnionType()) {\n+        JSTypeRegistry registry = getRegistry();\n+        List<? extends JSType> alternatives = ((UnionType) this).getAlternates();\n+        if (alternatives.stream().allMatch(JSType::isEmptyType)) {\n+            isEmpty = true;\n+        } else if (alternatives.stream().anyMatch(t -> t.isUnknownType() || t.isAllType())) {\n+            boolean allEmptyOrUnknown = alternatives.stream()\n+                .filter(t -> !t.isUnknownType() && !t.isAllType())\n+                .allMatch(JSType::isEmptyType);\n+            if (allEmptyOrUnknown) {\n+                isEmpty = true;\n+            }\n+        } else if (alternatives.stream().allMatch(JSType::isLoose)) {\n+            isEmpty = registry.getNativeType(UNKNOWN_TYPE).isEmptyType();\n+        }\n+    }\n+    if (isEmpty) {\n+        System.err.println(\"Warning: isEmptyType() called with no type.\");\n+    }\n+    return isEmpty;\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}