{
    "patch": "public Line revert() {\n    final Vector3D zero = Vector3D.ZERO;\n    final Vector3D revertedDirection = direction.negate();\n    final Line reverted = new Line(zero, revertedDirection);\n    final double eps = 1e-12;\n    if (Math.abs(reverted.getDirection().getX() - direction.getX()) < eps\n            && Math.abs(reverted.getDirection().getY() - direction.getY()) < eps\n            && Math.abs(reverted.getDirection().getZ() - direction.getZ()) < eps)\n        return reverted;\n    else\n        return null; // or throw an exception\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..1eb561a3d 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,18 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+public Line revert() {\n+    final Vector3D zero = Vector3D.ZERO;\n+    final Vector3D revertedDirection = direction.negate();\n+    final Line reverted = new Line(zero, revertedDirection);\n+    final double eps = 1e-12;\n+    if (Math.abs(reverted.getDirection().getX() - direction.getX()) < eps\n+            && Math.abs(reverted.getDirection().getY() - direction.getY()) < eps\n+            && Math.abs(reverted.getDirection().getZ() - direction.getZ()) < eps)\n         return reverted;\n-    }\n+    else\n+        return null; // or throw an exception\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}