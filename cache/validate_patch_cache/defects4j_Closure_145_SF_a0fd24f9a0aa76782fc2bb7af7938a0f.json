{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n        // The node itself is a FUNCTION or DO.\n        return true;\n    } else if (n.getType() == Token.LABEL) {\n        // Check if the label's last child is a FUNCTION or DO,\n        // ignoring any empty statements that might precede it.\n        n = n.getLastChild();\n        while (n.getType() == Token.EMPTY) {\n            n = n.getPrevious();\n        }\n        return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n    } else if (n.getType() == Token.BLOCK) {\n        // Check if the block has exactly one child node, and recursively examine the child.\n        Node firstChild = n.getFirstChild();\n        Node lastChild = n.getLastChild();\n        if (firstChild != null && firstChild == lastChild &&\n                isOneExactlyFunctionOrDo(firstChild)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..9d6da91a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,29 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n+        // The node itself is a FUNCTION or DO.\n+        return true;\n+    } else if (n.getType() == Token.LABEL) {\n+        // Check if the label's last child is a FUNCTION or DO,\n+        // ignoring any empty statements that might precede it.\n+        n = n.getLastChild();\n+        while (n.getType() == Token.EMPTY) {\n+            n = n.getPrevious();\n+        }\n+        return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+    } else if (n.getType() == Token.BLOCK) {\n+        // Check if the block has exactly one child node, and recursively examine the child.\n+        Node firstChild = n.getFirstChild();\n+        Node lastChild = n.getLastChild();\n+        if (firstChild != null && firstChild == lastChild &&\n+                isOneExactlyFunctionOrDo(firstChild)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}