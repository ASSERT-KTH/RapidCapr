{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean usingMonthDay = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == DateTimeFieldType.monthOfYear().getOrdinal() ||\n                        i == DateTimeFieldType.monthOfYear().getOrdinal()+1) {\n                    usingMonthDay = true;\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n            if (usingMonthDay) {\n                int dayOfMonthField = DateTimeFieldType.dayOfMonth().getField(iChronology).getOrdinal();\n                int maxDay = iChronology.getDaysInMonth(result[0], result[1]);\n                if (result[dayOfMonthField] > maxDay) {\n                    result[dayOfMonthField] = maxDay;\n                }\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..00fba407 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,27 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean usingMonthDay = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (i == DateTimeFieldType.monthOfYear().getOrdinal() ||\n+                        i == DateTimeFieldType.monthOfYear().getOrdinal()+1) {\n+                    usingMonthDay = true;\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] result = iChronology.get(partial, instant);\n+            if (usingMonthDay) {\n+                int dayOfMonthField = DateTimeFieldType.dayOfMonth().getField(iChronology).getOrdinal();\n+                int maxDay = iChronology.getDaysInMonth(result[0], result[1]);\n+                if (result[dayOfMonthField] > maxDay) {\n+                    result[dayOfMonthField] = maxDay;\n+                }\n+            }\n+            return result;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}