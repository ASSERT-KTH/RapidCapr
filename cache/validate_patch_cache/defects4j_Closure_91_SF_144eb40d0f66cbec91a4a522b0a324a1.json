{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          ((jsDoc.isConstructor() && !jsDoc.isInterface()) ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.HOOK ||\n            pType == Token.VAR ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      if (isFunctionGettingLentToPrototype(n, parent)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private static boolean isFunctionGettingLentToPrototype(Node functionNode, Node parent) {\n    // A function is getting lent to a prototype if it's being assigned to a property of\n    // something that is a prototype property of something else.\n    if (parent == null) {\n      return false;\n    }\n    Node currentNode = parent.getParent();\n    while (currentNode != null) {\n      if (currentNode.getType() == Token.EXPR_RESULT) {\n        Node lhs = currentNode.getFirstChild();\n        Node rhs = lhs.getNext();\n        currentNode = currentNode.getParent();\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\") &&\n            rhs == parent) {\n          Node objectNode = lhs.getFirstChild();\n          while (objectNode != null) {\n            if (NodeUtil.isGet(objectNode)) {\n              if (objectNode.getType() == Token.GETPROP &&\n                  objectNode.getLastChild().getString().equals(\"prototype\")) {\n                return true;\n              }\n              objectNode = objectNode.getFirstChild();\n              if (objectNode.getType() == Token.GETPROP &&\n                  objectNode.getLastChild().getString().equals(\"prototype\")) {\n                return true;\n              }\n            }\n            if (objectNode == functionNode.getParent()) {\n              return false;\n            }\n            objectNode = objectNode.getParent();\n          }\n        }\n      }\n      currentNode = currentNode.getParent();\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f05da9c7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,15 +79,14 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n+          ((jsDoc.isConstructor() && !jsDoc.isInterface()) ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n@@ -100,10 +99,13 @@ final class CheckGlobalThis implements Callback {\n       // a.x = function() {}; // or\n       // var a = {x: function() {}};\n       int pType = parent.getType();\n+\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n+            pType == Token.HOOK ||\n+            pType == Token.VAR ||\n \n             // object literal keys\n             pType == Token.STRING ||\n@@ -111,7 +113,9 @@ final class CheckGlobalThis implements Callback {\n         return false;\n       }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+      if (isFunctionGettingLentToPrototype(n, parent)) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -145,6 +149,46 @@ final class CheckGlobalThis implements Callback {\n     return true;\n   }\n \n+  private static boolean isFunctionGettingLentToPrototype(Node functionNode, Node parent) {\n+    // A function is getting lent to a prototype if it's being assigned to a property of\n+    // something that is a prototype property of something else.\n+    if (parent == null) {\n+      return false;\n+    }\n+    Node currentNode = parent.getParent();\n+    while (currentNode != null) {\n+      if (currentNode.getType() == Token.EXPR_RESULT) {\n+        Node lhs = currentNode.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        currentNode = currentNode.getParent();\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\") &&\n+            rhs == parent) {\n+          Node objectNode = lhs.getFirstChild();\n+          while (objectNode != null) {\n+            if (NodeUtil.isGet(objectNode)) {\n+              if (objectNode.getType() == Token.GETPROP &&\n+                  objectNode.getLastChild().getString().equals(\"prototype\")) {\n+                return true;\n+              }\n+              objectNode = objectNode.getFirstChild();\n+              if (objectNode.getType() == Token.GETPROP &&\n+                  objectNode.getLastChild().getString().equals(\"prototype\")) {\n+                return true;\n+              }\n+            }\n+            if (objectNode == functionNode.getParent()) {\n+              return false;\n+            }\n+            objectNode = objectNode.getParent();\n+          }\n+        }\n+      }\n+      currentNode = currentNode.getParent();\n+    }\n+    return false;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}