{
    "patch": "        SavedField lastRepeated = null;\n        for (int i = count - 1; i >= 0; i--) {\n            SavedField savedField = savedFields[i];\n            if (savedField.isSaved()) {\n                lastRepeated = savedField;\n                continue;\n            }\n            millis = savedField.set(millis, resetFields);\n            DateTimeField lastUsedField = savedField.getField();\n            for (int j = i - 1; j >= 0; j--) {\n                SavedField prevField = savedFields[j];\n                if (prevField.isSaved()) {\n                    continue;\n                }\n                DateTimeField prevUsedField = prevField.getField();\n                if (prevUsedField.equals(lastUsedField)) {\n                    if (resetFields) {\n                        throw new IllegalFieldValueException(\n                            prevUsedField.getType(),\n                            \"Cannot have two adjacent repeated fields\"\n                        );\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (lastRepeated != null\n                    && lastUsedField.getDurationField().getType() == DurationFieldType.weeks()\n                    && compareReverse(savedField.getField().getRangeDurationField(), DurationFieldType.years().getField(iChrono)) < 0) {\n                int weekyear = lastRepeated.getValue() / 100;\n                millis = setWeekyear(millis, weekyear);\n                break;\n            }\n            lastRepeated = null;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..43bb4cb6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,41 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastRepeated = null;\n+        for (int i = count - 1; i >= 0; i--) {\n+            SavedField savedField = savedFields[i];\n+            if (savedField.isSaved()) {\n+                lastRepeated = savedField;\n+                continue;\n+            }\n+            millis = savedField.set(millis, resetFields);\n+            DateTimeField lastUsedField = savedField.getField();\n+            for (int j = i - 1; j >= 0; j--) {\n+                SavedField prevField = savedFields[j];\n+                if (prevField.isSaved()) {\n+                    continue;\n+                }\n+                DateTimeField prevUsedField = prevField.getField();\n+                if (prevUsedField.equals(lastUsedField)) {\n+                    if (resetFields) {\n+                        throw new IllegalFieldValueException(\n+                            prevUsedField.getType(),\n+                            \"Cannot have two adjacent repeated fields\"\n+                        );\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+            if (lastRepeated != null\n+                    && lastUsedField.getDurationField().getType() == DurationFieldType.weeks()\n+                    && compareReverse(savedField.getField().getRangeDurationField(), DurationFieldType.years().getField(iChrono)) < 0) {\n+                int weekyear = lastRepeated.getValue() / 100;\n+                millis = setWeekyear(millis, weekyear);\n+                break;\n+            }\n+            lastRepeated = null;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}