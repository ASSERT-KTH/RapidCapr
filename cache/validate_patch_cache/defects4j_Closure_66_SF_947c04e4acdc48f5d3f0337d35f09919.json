{
    "patch": "public static double getTypedPercent(JSONObject obj) {\n    int totalFields = obj.length();\n    int typedFields = 0;\n    for (String key : obj.keySet()) {\n        try {\n            obj.getInt(key);\n            typedFields++;\n        } catch (JSONException e) {\n            // Ignore non-integer fields\n        }\n    }\n    return ((double)typedFields / totalFields) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a112bbed 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject obj) {\n+    int totalFields = obj.length();\n+    int typedFields = 0;\n+    for (String key : obj.keySet()) {\n+        try {\n+            obj.getInt(key);\n+            typedFields++;\n+        } catch (JSONException e) {\n+            // Ignore non-integer fields\n+        }\n+    }\n+    return ((double)typedFields / totalFields) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}