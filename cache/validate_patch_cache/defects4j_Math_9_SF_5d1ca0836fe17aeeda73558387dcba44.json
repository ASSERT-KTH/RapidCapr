{
    "patch": "public Line revert() {\n    final double[] dirArr = direction.normalize().toArray();\n    for (int i = 0; i < dirArr.length; i++) {\n        if (Math.abs(dirArr[i] - 0.0) < 1e-10) {\n            dirArr[i] = 0.0;\n        }\n    }\n    return new Line(Vector3D.ZERO, new Vector3D(dirArr).negate());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..8b0df9049 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,15 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() {\n+    final double[] dirArr = direction.normalize().toArray();\n+    for (int i = 0; i < dirArr.length; i++) {\n+        if (Math.abs(dirArr[i] - 0.0) < 1e-10) {\n+            dirArr[i] = 0.0;\n+        }\n     }\n+    return new Line(Vector3D.ZERO, new Vector3D(dirArr).negate());\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028581782127907653>",
    "test_result": "FAIL"
}