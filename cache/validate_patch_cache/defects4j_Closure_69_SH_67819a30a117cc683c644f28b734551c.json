{
    "patch": "      JSType objectType = getJSType(n.getFirstChild().getNext().getFirstChild());\n      if (objectType.isUnknownType() ||\n          objectType.isAllType() ||\n          objectType.isNullType() ||\n          objectType.isVoidType() ||\n          !(objectType.isUnionType() ||\n            objectType.isRecordType() ||\n            objectType.isEnumType())) {\n        report(t, n, INVALID_THIS_TYPE, objectType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..5fd0c6f7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType objectType = getJSType(n.getFirstChild().getNext().getFirstChild());\n+      if (objectType.isUnknownType() ||\n+          objectType.isAllType() ||\n+          objectType.isNullType() ||\n+          objectType.isVoidType() ||\n+          !(objectType.isUnionType() ||\n+            objectType.isRecordType() ||\n+            objectType.isEnumType())) {\n+        report(t, n, INVALID_THIS_TYPE, objectType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}