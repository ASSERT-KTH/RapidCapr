{
    "patch": "    public boolean hasSameMethod(Invocation candidate) {\n        return invocation.getMethod().getName().equals(candidate.getMethod().getName())\n                && Arrays.equals(invocation.getMethod().getParameterTypes(), candidate.getMethod().getParameterTypes());",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..a72612c04 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,15 +89,9 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n-    }\n+    public boolean hasSameMethod(Invocation candidate) {\n+        return invocation.getMethod().getName().equals(candidate.getMethod().getName())\n+                && Arrays.equals(invocation.getMethod().getParameterTypes(), candidate.getMethod().getParameterTypes());\n     \n     public Location getLocation() {\n         return invocation.getLocation();\n@@ -126,4 +120,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}