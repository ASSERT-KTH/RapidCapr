{
    "patch": "          && n.getParent().getType() != Token.ASSIGN_ADD &&\n          n.getParent().getType() != Token.ASSIGN_BITOR &&\n          n.getParent().getType() != Token.ASSIGN_BITXOR &&\n          n.getParent().getType() != Token.ASSIGN_BITAND &&\n          n.getParent().getType() != Token.ASSIGN_LSH &&\n          n.getParent().getType() != Token.ASSIGN_RSH &&\n          n.getParent().getType() != Token.ASSIGN_URSH &&\n          n.getParent().getType() != Token.ASSIGN_DIV &&\n          n.getParent().getType() != Token.ASSIGN_MOD &&\n          n.getParent().getType() != Token.ASSIGN_MUL &&\n          n.getParent().getType() != Token.ASSIGN_SUB &&\n          n.getParent().getType() != Token.ASSIGN &&\n          n.getParent().getType() != Token.COLON &&\n          n.getParent().getType() != Token.COMMA &&\n          n.getParent().getType() != Token.HOOK &&\n          n.getParent().getType() != Token.PARAM_LIST &&\n          n.getParent().getType() != Token.REGEXP &&\n          n.getParent().getType() != Token.REST &&\n          n.getParent().getType() != Token.YIELD) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..1a760304 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,25 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && n.getParent().getType() != Token.ASSIGN_ADD &&\n+          n.getParent().getType() != Token.ASSIGN_BITOR &&\n+          n.getParent().getType() != Token.ASSIGN_BITXOR &&\n+          n.getParent().getType() != Token.ASSIGN_BITAND &&\n+          n.getParent().getType() != Token.ASSIGN_LSH &&\n+          n.getParent().getType() != Token.ASSIGN_RSH &&\n+          n.getParent().getType() != Token.ASSIGN_URSH &&\n+          n.getParent().getType() != Token.ASSIGN_DIV &&\n+          n.getParent().getType() != Token.ASSIGN_MOD &&\n+          n.getParent().getType() != Token.ASSIGN_MUL &&\n+          n.getParent().getType() != Token.ASSIGN_SUB &&\n+          n.getParent().getType() != Token.ASSIGN &&\n+          n.getParent().getType() != Token.COLON &&\n+          n.getParent().getType() != Token.COMMA &&\n+          n.getParent().getType() != Token.HOOK &&\n+          n.getParent().getType() != Token.PARAM_LIST &&\n+          n.getParent().getType() != Token.REGEXP &&\n+          n.getParent().getType() != Token.REST &&\n+          n.getParent().getType() != Token.YIELD) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}