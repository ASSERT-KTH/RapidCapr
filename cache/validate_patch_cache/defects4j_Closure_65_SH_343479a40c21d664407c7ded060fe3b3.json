{
    "patch": "private static final Pattern NULL_PATTERN = Pattern.compile(\"\\0\");\n  \nstatic String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n\n    Matcher matcher = NULL_PATTERN.matcher(s);\n    int currentIndex = 0;\n    while (matcher.find()) {\n      sb.append(s, currentIndex, matcher.start());\n      sb.append(\"\\\\x00\");\n      currentIndex = matcher.end();\n    }\n\n    sb.append(s, currentIndex, s.length());\n    sb.append(quote);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 6117a89b..a76f0c5f 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1012,7 +1012,28 @@ class CodeGenerator {\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n-        case '\\0': sb.append(\"\\\\0\"); break;\n+private static final Pattern NULL_PATTERN = Pattern.compile(\"\\0\");\n+  \n+static String strEscape(String s, char quote,\n+                          String doublequoteEscape,\n+                          String singlequoteEscape,\n+                          String backslashEscape,\n+                          CharsetEncoder outputCharsetEncoder) {\n+    StringBuilder sb = new StringBuilder(s.length() + 2);\n+    sb.append(quote);\n+\n+    Matcher matcher = NULL_PATTERN.matcher(s);\n+    int currentIndex = 0;\n+    while (matcher.find()) {\n+      sb.append(s, currentIndex, matcher.start());\n+      sb.append(\"\\\\x00\");\n+      currentIndex = matcher.end();\n+    }\n+\n+    sb.append(s, currentIndex, s.length());\n+    sb.append(quote);\n+    return sb.toString();\n+}\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;",
    "result_reason": "error: case, default, or '}' expected",
    "test_result": "ERROR"
}