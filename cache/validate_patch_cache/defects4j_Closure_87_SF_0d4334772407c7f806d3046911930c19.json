{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK) {\n    return false;\n  }\n  \n  List<Node> toTraverse = new ArrayList<>();\n  toTraverse.add(n);\n\n  while (!toTraverse.isEmpty()) {\n    Node node = toTraverse.remove(0);\n\n    if (node.getParent() != null && (node.getParent().getType() == Token.FOR ||\n              node.getParent().getType() == Token.WHILE ||\n              node.getParent().getType() == Token.DO)) {\n      // Ignore EXPR_RESULT blocks that are child of a FOR, WHILE or DO loop.\n      continue;\n    } else if (node.getType() == Token.EXPR_RESULT &&\n               node.getFirstChild() != null &&\n               node.getFirstChild().getType() == Token.CALL &&\n               node.getFirstChild().getLastChild() != null &&\n               node.getFirstChild().getLastChild().getType() == Token.NAME &&\n               node.getFirstChild().getLastChild().getString().endsWith(\"_\")) {\n      // Ignore EXPR_RESULT blocks that are return values of event handlers.\n      // IE has a bug where event handlers behave differently when their return value is used\n      // vs. when their return value is in an EXPR_RESULT.\n      // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n      continue;\n    } else if (node.getType() == Token.VAR) {\n      // If the child is a VAR statement, check if it has multiple children.\n      Node nextNode = node.getNext();\n      while (nextNode != null) {\n        if (nextNode.getType() != Token.EMPTY) {\n          return false;\n        }\n        nextNode = nextNode.getNext();\n      }\n    } else if (!NodeUtil.isExpressionNode(node)) {\n      return false;\n    }\n\n    Node child = node.getFirstChild();\n    while (child != null) {\n      toTraverse.add(child);\n      child = child.getNext();\n    }\n  }\n\n  // This is a foldable block if the block's child is an expression or a VAR statement.\n  return n.getFirstChild() != null &&\n         (NodeUtil.isExpressionNode(n.getFirstChild()) || n.getFirstChild().getType() == Token.VAR);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..7db8de54 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,58 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK) {\n+    return false;\n+  }\n+  \n+  List<Node> toTraverse = new ArrayList<>();\n+  toTraverse.add(n);\n+\n+  while (!toTraverse.isEmpty()) {\n+    Node node = toTraverse.remove(0);\n+\n+    if (node.getParent() != null && (node.getParent().getType() == Token.FOR ||\n+              node.getParent().getType() == Token.WHILE ||\n+              node.getParent().getType() == Token.DO)) {\n+      // Ignore EXPR_RESULT blocks that are child of a FOR, WHILE or DO loop.\n+      continue;\n+    } else if (node.getType() == Token.EXPR_RESULT &&\n+               node.getFirstChild() != null &&\n+               node.getFirstChild().getType() == Token.CALL &&\n+               node.getFirstChild().getLastChild() != null &&\n+               node.getFirstChild().getLastChild().getType() == Token.NAME &&\n+               node.getFirstChild().getLastChild().getString().endsWith(\"_\")) {\n+      // Ignore EXPR_RESULT blocks that are return values of event handlers.\n+      // IE has a bug where event handlers behave differently when their return value is used\n+      // vs. when their return value is in an EXPR_RESULT.\n+      // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      continue;\n+    } else if (node.getType() == Token.VAR) {\n+      // If the child is a VAR statement, check if it has multiple children.\n+      Node nextNode = node.getNext();\n+      while (nextNode != null) {\n+        if (nextNode.getType() != Token.EMPTY) {\n+          return false;\n+        }\n+        nextNode = nextNode.getNext();\n       }\n+    } else if (!NodeUtil.isExpressionNode(node)) {\n+      return false;\n     }\n \n-    return false;\n+    Node child = node.getFirstChild();\n+    while (child != null) {\n+      toTraverse.add(child);\n+      child = child.getNext();\n+    }\n   }\n \n+  // This is a foldable block if the block's child is an expression or a VAR statement.\n+  return n.getFirstChild() != null &&\n+         (NodeUtil.isExpressionNode(n.getFirstChild()) || n.getFirstChild().getType() == Token.VAR);\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}