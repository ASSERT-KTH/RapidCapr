{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required, then that.paramType[i] is required.\n  // If that.paramType[i] is optional, then this.paramType[i] is optional.\n  // If that.paramType[i] is variadic, then this.paramType[i] should be variadic too.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null && thatParam != null) {\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    if (thisIsVarArgs && !thatIsVarArgs) {\n      // If this type has a variable-length list of arguments, but other's does not,\n      // then they are not subtypes.\n      return false;\n    }\n\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParamType != null) {\n      boolean thisIsOptional = thisParam.isOptionalArg();\n      boolean thatIsOptional = thatParam.isOptionalArg();\n\n      if (!thatIsOptional && thisIsOptional) {\n        // If this type's argument is optional, but the other type's is not,\n        // then they are not subtypes.\n        return false;\n      }\n\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    } else if (thatParamType != null) {\n      // If the other type has a parameter, but this type does not,\n      // then they are not subtypes.\n      return false;\n    }\n\n    // don't advance if we have variable arguments\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // \"that\" can't be a supertype, because it's missing a required arguement.\n  return parameters.getChildCountThatAreTyped() <= that.parameters.getChildCountThatAreTyped();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..7d593a7a 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,80 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  ArrowType that = (ArrowType) other;\n+\n+  // This is described in Draft 2 of the ES4 spec,\n+  // Section 3.4.7: Subtyping Function Types.\n+\n+  // this.returnType <: that.returnType (covariant)\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  // that.paramType[i] <: this.paramType[i] (contravariant)\n+  //\n+  // If this.paramType[i] is required, then that.paramType[i] is required.\n+  // If that.paramType[i] is optional, then this.paramType[i] is optional.\n+  // If that.paramType[i] is variadic, then this.paramType[i] should be variadic too.\n+  Node thisParam = parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n+  while (thisParam != null && thatParam != null) {\n+    boolean thisIsVarArgs = thisParam.isVarArgs();\n+    boolean thatIsVarArgs = thatParam.isVarArgs();\n+\n+    if (thisIsVarArgs && !thatIsVarArgs) {\n+      // If this type has a variable-length list of arguments, but other's does not,\n+      // then they are not subtypes.\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n-\n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = thatParam.getJSType();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+    if (thisParamType != null) {\n+      boolean thisIsOptional = thisParam.isOptionalArg();\n+      boolean thatIsOptional = thatParam.isOptionalArg();\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+      if (!thatIsOptional && thisIsOptional) {\n+        // If this type's argument is optional, but the other type's is not,\n+        // then they are not subtypes.\n+        return false;\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n+        return false;\n       }\n+    } else if (thatParamType != null) {\n+      // If the other type has a parameter, but this type does not,\n+      // then they are not subtypes.\n+      return false;\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // don't advance if we have variable arguments\n+    if (!thisIsVarArgs) {\n+      thisParam = thisParam.getNext();\n+    }\n+    if (!thatIsVarArgs) {\n+      thatParam = thatParam.getNext();\n+    }\n \n-    return true;\n+    // both var_args indicates the end\n+    if (thisIsVarArgs && thatIsVarArgs) {\n+      thisParam = null;\n+      thatParam = null;\n+    }\n   }\n \n+  // \"that\" can't be a supertype, because it's missing a required arguement.\n+  return parameters.getChildCountThatAreTyped() <= that.parameters.getChildCountThatAreTyped();\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}