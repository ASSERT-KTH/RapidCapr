{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // A variable is being written, so it is not being read before being killed.\n        return VariableLiveness.KILL;\n      } else {\n        // The variable is being read, so it is not being killed before being read.\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n        if (childState == VariableLiveness.READ) {\n          // If any child subtree reads the variable, the variable is not dead.\n          return VariableLiveness.READ;\n        } else if (childState == VariableLiveness.KILL && NodeUtil.isStatement(child)) {\n          // If the variable is written in a statement, it is no longer live, unless it's part\n          // of a larger expression.\n          if (NodeUtil.isExpression(child)) {\n            state = VariableLiveness.MAYBE_LIVE;\n          } else {\n            return VariableLiveness.KILL;\n          }\n        } else if (childState == VariableLiveness.MAYBE_LIVE) {\n          state = VariableLiveness.MAYBE_LIVE;\n        }\n      } else {\n        // Entering a new function complicates control flow. The variable is potentially live.\n        state = VariableLiveness.MAYBE_LIVE;\n      }\n    }\n    return state;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..928f3388 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,42 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n+private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n+        // A variable is being written, so it is not being read before being killed.\n         return VariableLiveness.KILL;\n       } else {\n+        // The variable is being read, so it is not being killed before being read.\n         return VariableLiveness.READ;\n       }\n     }\n \n     // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n+    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n+        if (childState == VariableLiveness.READ) {\n+          // If any child subtree reads the variable, the variable is not dead.\n+          return VariableLiveness.READ;\n+        } else if (childState == VariableLiveness.KILL && NodeUtil.isStatement(child)) {\n+          // If the variable is written in a statement, it is no longer live, unless it's part\n+          // of a larger expression.\n+          if (NodeUtil.isExpression(child)) {\n+            state = VariableLiveness.MAYBE_LIVE;\n+          } else {\n+            return VariableLiveness.KILL;\n+          }\n+        } else if (childState == VariableLiveness.MAYBE_LIVE) {\n+          state = VariableLiveness.MAYBE_LIVE;\n         }\n+      } else {\n+        // Entering a new function complicates control flow. The variable is potentially live.\n+        state = VariableLiveness.MAYBE_LIVE;\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+    return state;\n   }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}