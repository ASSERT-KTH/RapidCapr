{
    "patch": "for(int j = 0; j < encodedValueChars.length; j++) {\n       char ch = encodedValueChars[j];\n-      if(ch == escapeChar) {\n-        if(j > 0) {\n-          bufferedUnescapedValue.append(encodedValueChars, i, j - i);\n+        if(ch == escapeChar) {\n+          if(j > 0) {\n+            bufferedUnescapedValue.append(encodedValueChars, i, j - i);\n+          }\n+          if(j + 6 < encodedValueChars.length && isISOControlSequence(encodedValueChars, j)) {\n+            char decodedChar = decodeISOControlSequence(encodedValueChars, j);\n+            if(decodedChar != 0) {\n+              bufferedUnescapedValue.append(decodedChar);\n+              j += 6;\n+              i = j + 1;\n+              continue;\n+            }\n+          }\n+          if(j + 3 < encodedValueChars.length && isUnicodeEscapeSequence(encodedValueChars, j)) {\n+            char decodedChar = decodeUnicodeEscapeSequence(encodedValueChars, j);\n+            if(decodedChar != 0) {\n+              bufferedUnescapedValue.append(decodedChar);\n+              j += 3;\n+              i = j + 1;\n+              continue;\n+            }\n+          }\n+          if(j + 1 < encodedValueChars.length) {\n+            char nextChar = encodedValueChars[j + 1];\n+            if(nextChar == 'u') {\n+              char decodedChar = decodeUnicodeEscapeSyntax(encodedValueChars, j + 1);\n+              if(decodedChar != 0) {\n+                bufferedUnescapedValue.append(decodedChar);\n+                j += 5;\n+                i = j + 1;\n+                continue;\n+              }\n+            } else {\n+              // character is not escaped; just copy it\n+              bufferedUnescapedValue.append(escapeChar);\n+              i = j;\n             }\n-        if(j + 6 < encodedValueChars.length && isISOControlSequence(encodedValueChars, j)) {\n-          char decodedChar = decodeISOControlSequence(encodedValueChars, j);\n-          if(decodedChar != 0) {\n-            bufferedUnescapedValue.append(decodedChar);\n-            j += 6;\n-            i = j + 1;\n-            continue;\n           }\n-        }\n-        if(j + 3 < encodedValueChars.length && isUnicodeEscapeSequence(encodedValueChars, j)) {\n-          char decodedChar = decodeUnicodeEscapeSequence(encodedValueChars, j);\n-          if(decodedChar != 0) {\n-            bufferedUnescapedValue.append(decodedChar);\n-            j += 3;\n-            i = j + 1;\n-            continue;\n-          }\n-        }\n-        if(j + 1 < encodedValueChars.length) {\n-          char nextChar = encodedValueChars[j + 1];\n-          if(nextChar == 'u') {\n-            char decodedChar = decodeUnicodeEscapeSyntax(encodedValueChars, j + 1);\n-            if(decodedChar != 0) {\n-              bufferedUnescapedValue.append(decodedChar);\n-              j += 5;\n-              i = j + 1;\n-              continue;\n-            }\n-          } else {\n-            // character is not escaped; just copy it\n-            bufferedUnescapedValue.append(escapeChar);\n-            i = j;\n-          }\n-        } else {\n-          // character is not escaped; just copy it\n-          bufferedUnescapedValue.append(escapeChar);\n-          i = j;\n       }\n+    } else {\n+      bufferedUnescapedValue.append(ch);\n     }\n   }``",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}