{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    int validCount = 0;\n    long millisTemp = millis;\n    for (int i = 0; i < count; i++) {\n        try {\n            millisTemp = savedFields[i].set(millis, resetFields);\n            if (validCount == 0 || millisTemp != millis) {\n                savedFields[validCount++] = savedFields[i];    \n            }\n        } catch (IllegalFieldValueException ignored) {\n        }\n    }\n    if (validCount == 0) {\n        throw e;\n    }\n    sort(savedFields, validCount);\n    if (validCount > 0) {\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n\n        DurationField first = savedFields[0].iField.getDurationField();\n\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n    count = validCount;\n    try {\n        millis = savedFields[0].set(millis, resetFields);\n        for (int i = 1; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException ex) {\n        if (text != null) {\n            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw ex;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..262c18dc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,50 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    int validCount = 0;\n+    long millisTemp = millis;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millisTemp = savedFields[i].set(millis, resetFields);\n+            if (validCount == 0 || millisTemp != millis) {\n+                savedFields[validCount++] = savedFields[i];    \n+            }\n+        } catch (IllegalFieldValueException ignored) {\n+        }\n+    }\n+    if (validCount == 0) {\n+        throw e;\n+    }\n+    sort(savedFields, validCount);\n+    if (validCount > 0) {\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+\n+        DurationField first = savedFields[0].iField.getDurationField();\n+\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n+        }\n+    }\n+    count = validCount;\n+    try {\n+        millis = savedFields[0].set(millis, resetFields);\n+        for (int i = 1; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException ex) {\n+        if (text != null) {\n+            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw ex;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}