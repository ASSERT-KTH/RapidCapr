{
    "patch": "if (Character.isHighSurrogate(input.charAt(pos))) {\n    boolean handled = false;\n    if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1)))) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            out.write(input.charAt(pos));\n            out.write(input.charAt(pos + 1));\n            handled = true;\n        } else {\n            handled = true;\n        }\n    }\n    if (!handled) {\n        // We are missing the low surrogate char, write as-is and move on\n        out.write(input.charAt(pos));\n    }\n    pos++;\n} else {\n    int consumed = translate(input, pos, out);\n    if (consumed == 0) {\n        out.write(input.charAt(pos));\n    } else {\n        pos += consumed;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..dbcb6150 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,31 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+if (Character.isHighSurrogate(input.charAt(pos))) {\n+    boolean handled = false;\n+    if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1)))) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            out.write(input.charAt(pos));\n+            out.write(input.charAt(pos + 1));\n+            handled = true;\n+        } else {\n+            handled = true;\n+        }\n+    }\n+    if (!handled) {\n+        // We are missing the low surrogate char, write as-is and move on\n+        out.write(input.charAt(pos));\n+    }\n+    pos++;\n+} else {\n+    int consumed = translate(input, pos, out);\n+    if (consumed == 0) {\n+        out.write(input.charAt(pos));\n+    } else {\n+        pos += consumed;\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}