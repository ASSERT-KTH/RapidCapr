{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double factor1 = v1.getNorm();\n      final double factor2 = v2.getNorm();\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n      final double a = v1.getX() / factor1;\n      final double b = v1.getY() / factor1;\n      final double c = v1.getZ() / factor1;\n      final double d = v2.getX() / factor2;\n      final double e = v2.getY() / factor2;\n      final double f = v2.getZ() / factor2;\n      final double rho = (d * a + e * b + f * c) / (d * d + e * e + f * f);\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double v3x = a - rho * d;\n      final double v3y = b - rho * e;\n      final double v3z = c - rho * f;\n\n      return new Vector3D(v3y * f - v3z * e, v3z * d - v3x * f, v3x * e - v3y * d);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..c0b377bd1 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -459,18 +459,28 @@ public class Vector3D implements Serializable {\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double factor1 = v1.getNorm();\n+      final double factor2 = v2.getNorm();\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n       // v3 without loss of precision. See Kahan lecture\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double a = v1.getX() / factor1;\n+      final double b = v1.getY() / factor1;\n+      final double c = v1.getZ() / factor1;\n+      final double d = v2.getX() / factor2;\n+      final double e = v2.getY() / factor2;\n+      final double f = v2.getZ() / factor2;\n+      final double rho = (d * a + e * b + f * c) / (d * d + e * e + f * f);\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double v3x = a - rho * d;\n+      final double v3y = b - rho * e;\n+      final double v3z = c - rho * f;\n+\n+      return new Vector3D(v3y * f - v3z * e, v3z * d - v3x * f, v3x * e - v3y * d);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.1973855084879307>",
    "test_result": "FAIL"
}