{
    "patch": "  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n        Node lhs = val.getFirstChild();\n        Node rhs = val.getLastChild();\n        return isValidDefineValue(lhs,defines) && isValidDefineValue(rhs, defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n        Node child = val.getFirstChild();\n        return isValidDefineValue(child, defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          String qualifiedName = val.getQualifiedName();\n          if (defines.contains(qualifiedName)) {\n            return true;\n          } else {\n            return isValidDefineValue(val.getFirstChild(),defines);\n          }\n        } else {\n          return false;\n        }\n      default:\n        return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..22a8838c 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -330,20 +330,46 @@ public final class NodeUtil {\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n+      case Token.ADD:\n+      case Token.SUB:\n+      case Token.MUL:\n+      case Token.DIV:\n+      case Token.MOD:\n+      case Token.LSH:\n+      case Token.RSH:\n+      case Token.URSH:\n+      case Token.LT:\n+      case Token.LE:\n+      case Token.GT:\n+      case Token.GE:\n+      case Token.EQ:\n+      case Token.NE:\n+        Node lhs = val.getFirstChild();\n+        Node rhs = val.getLastChild();\n+        return isValidDefineValue(lhs,defines) && isValidDefineValue(rhs, defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n+        Node child = val.getFirstChild();\n+        return isValidDefineValue(child, defines);\n \n       // Names are valid if and only if they are defines themselves.\n       case Token.NAME:\n       case Token.GETPROP:\n         if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+          String qualifiedName = val.getQualifiedName();\n+          if (defines.contains(qualifiedName)) {\n+            return true;\n+          } else {\n+            return isValidDefineValue(val.getFirstChild(),defines);\n+          }\n+        } else {\n+          return false;\n         }\n+      default:\n+        return false;\n     }\n-    return false;\n   }\n \n   /**",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}