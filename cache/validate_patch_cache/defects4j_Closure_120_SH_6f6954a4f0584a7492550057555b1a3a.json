{
    "patch": "        Reference initRef = getInitializingReference();\n        if (initRef != null && initRef.isSimpleAssignmentToName()) {\n          // Look for other assignments in the same scope.\n          boolean foundAssignment = false;\n          for (Reference ref : references) {\n            // Stop at the first use.\n            if (ref == firstUse) {\n              break;\n            }\n            if (ref == initRef) {\n              continue;\n            }\n\n            if (ref.isVariableAssignment() && ref.getNameNode() == initRef.getNameNode()) {\n              foundAssignment = true;\n              break;\n            }\n          }\n          // There was no other assignment.\n          if (!foundAssignment) {\n            return initRef;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c861d2c7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        Reference initRef = getInitializingReference();\n+        if (initRef != null && initRef.isSimpleAssignmentToName()) {\n+          // Look for other assignments in the same scope.\n+          boolean foundAssignment = false;\n+          for (Reference ref : references) {\n+            // Stop at the first use.\n+            if (ref == firstUse) {\n+              break;\n+            }\n+            if (ref == initRef) {\n+              continue;\n+            }\n+\n+            if (ref.isVariableAssignment() && ref.getNameNode() == initRef.getNameNode()) {\n+              foundAssignment = true;\n+              break;\n+            }\n+          }\n+          // There was no other assignment.\n+          if (!foundAssignment) {\n+            return initRef;\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}