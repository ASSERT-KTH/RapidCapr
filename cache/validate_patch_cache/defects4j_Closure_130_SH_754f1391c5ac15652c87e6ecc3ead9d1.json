{
    "patch": "      if (name.aliasingGets == 0 && name.globalSets == 1 && name.localSets == 0 &&\n          !name.isBleedingExpression() && name.getDeclaration() != null &&\n          !name.getDeclaration().getJSDocInfo().isNoInline() &&\n          name.getDeclaration().getParentNode() != null &&\n          !NodeUtil.isControlStructure(name.getDeclaration().getParentNode()) &&\n          !isLoopCondition(name.getDeclaration(), name.getDeclaration().getParentNode()) &&\n          !referencesThis(name) && !referencesArguments(name)) {\n        // {@code name} meets condition (a).\n        inlineVariableIfPossible(name, namespace);\n      } else if (name.aliasingGets > 0 &&\n                 countMatchingRefs(name, Predicates.IS_GETTER_ALIASING_GET_REF) == 0 &&\n                 countMatchingRefs(name, Predicates.IS_SETTER_ALIASING_GET_REF) == 0) {\n        // {@code name} meets condition (b).\n        inlineAliasingGetsIfPossible(name, namespace);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..57fa9282 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,21 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if (name.aliasingGets == 0 && name.globalSets == 1 && name.localSets == 0 &&\n+          !name.isBleedingExpression() && name.getDeclaration() != null &&\n+          !name.getDeclaration().getJSDocInfo().isNoInline() &&\n+          name.getDeclaration().getParentNode() != null &&\n+          !NodeUtil.isControlStructure(name.getDeclaration().getParentNode()) &&\n+          !isLoopCondition(name.getDeclaration(), name.getDeclaration().getParentNode()) &&\n+          !referencesThis(name) && !referencesArguments(name)) {\n+        // {@code name} meets condition (a).\n+        inlineVariableIfPossible(name, namespace);\n+      } else if (name.aliasingGets > 0 &&\n+                 countMatchingRefs(name, Predicates.IS_GETTER_ALIASING_GET_REF) == 0 &&\n+                 countMatchingRefs(name, Predicates.IS_SETTER_ALIASING_GET_REF) == 0) {\n+        // {@code name} meets condition (b).\n+        inlineAliasingGetsIfPossible(name, namespace);\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}