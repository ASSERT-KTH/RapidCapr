{
    "patch": "      boolean foundAssignment = false;\n      for (int i = 0; i < size; i++) {\n        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n          if (foundAssignment) {\n            return false;\n          }\n          foundAssignment = true;\n          Reference initRef = references.get(i);\n          // Make sure the initialization is not inside a loop.\n          for (BasicBlock block = initRef.getBasicBlock();\n              block != null; block = block.getParent()) {\n            if (block.isFunction) {\n              break;\n            } else if (block.isLoop) {\n              return false;\n            }\n          }\n        }\n      }\n      return foundAssignment;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..af69a6b9 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      boolean foundAssignment = false;\n+      for (int i = 0; i < size; i++) {\n+        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+          if (foundAssignment) {\n+            return false;\n+          }\n+          foundAssignment = true;\n+          Reference initRef = references.get(i);\n+          // Make sure the initialization is not inside a loop.\n+          for (BasicBlock block = initRef.getBasicBlock();\n+              block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+              break;\n+            } else if (block.isLoop) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+      return foundAssignment;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}