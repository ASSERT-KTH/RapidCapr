{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if either endpoint is a root\n    if (yMin == 0.0) {\n        setResult(min, 0);\n        ret = min;\n    } else if (yMax == 0.0) {\n        setResult(max, 0);\n        ret = max;\n    } else {\n        // Verify bracketing or convergence\n        double sign = yMin * yMax;\n        if (sign > 0.0) {\n            throw new IllegalArgumentException(\n                    \"Function values at endpoints do not have different signs.  Endpoints: [\" + min + \",\" + max + \"]\" +\n                            \", Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else if (Math.abs(yMin) < Math.abs(yMax)) {\n            double temp = min;\n            min = max;\n            max = temp;\n            temp = yMin;\n            yMin = yMax;\n            yMax = temp;\n        }\n\n        // Start iteration\n        double mid = (max + min) * 0.5;\n        double yMid = f.value(mid);\n        int i = 0;\n        while (i < maximalIterationCount) {\n            if (!(Math.abs(yMid) > functionValueAccuracy)) {\n                setResult(mid, yMid);\n                return mid;\n            }\n            if (yMid * yMin < 0.0) {\n                max = mid;\n                yMax = yMid;\n            } else {\n                min = mid;\n                yMin = yMid;\n            }\n            mid = (max + min) * 0.5;\n            yMid = f.value(mid);\n            i++;\n        }\n\n        // Throw exception if iteration count exceeded\n        throw new MaxIterationsExceededException(maximalIterationCount);        \n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..05083f612 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,67 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Check if either endpoint is a root\n+    if (yMin == 0.0) {\n+        setResult(min, 0);\n+        ret = min;\n+    } else if (yMax == 0.0) {\n+        setResult(max, 0);\n+        ret = max;\n+    } else {\n+        // Verify bracketing or convergence\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+        if (sign > 0.0) {\n+            throw new IllegalArgumentException(\n+                    \"Function values at endpoints do not have different signs.  Endpoints: [\" + min + \",\" + max + \"]\" +\n+                            \", Values: [\" + yMin + \",\" + yMax + \"]\");\n+        } else if (Math.abs(yMin) < Math.abs(yMax)) {\n+            double temp = min;\n+            min = max;\n+            max = temp;\n+            temp = yMin;\n+            yMin = yMax;\n+            yMax = temp;\n         }\n \n-        return ret;\n+        // Start iteration\n+        double mid = (max + min) * 0.5;\n+        double yMid = f.value(mid);\n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            if (!(Math.abs(yMid) > functionValueAccuracy)) {\n+                setResult(mid, yMid);\n+                return mid;\n+            }\n+            if (yMid * yMin < 0.0) {\n+                max = mid;\n+                yMax = yMid;\n+            } else {\n+                min = mid;\n+                yMin = yMid;\n+            }\n+            mid = (max + min) * 0.5;\n+            yMid = f.value(mid);\n+            i++;\n+        }\n+\n+        // Throw exception if iteration count exceeded\n+        throw new MaxIterationsExceededException(maximalIterationCount);        \n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: method setResult in class UnivariateRealSolverImpl cannot be applied to given types;",
    "test_result": "ERROR"
}