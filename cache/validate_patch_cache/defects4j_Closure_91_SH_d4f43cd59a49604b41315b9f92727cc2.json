{
    "patch": "      if (NodeUtil.isObjectLitKey(parent, n)) {\n        Node objLit = parent.getParent();\n        if (objLit != null && NodeUtil.isAssignment(objLit.getParent())) {\n          Node assign = objLit.getParent();\n          Node target = assign.getFirstChild();\n          Node rhs = target.getNext();\n          if (NodeUtil.isGet(target) &&\n              target.getLastChild().getString().equals(\"prototype\") &&\n              rhs != null &&\n              (rhs.isFunction() ||\n               (rhs.isQualifiedName() &&\n                rhs.getLastChild().getString().equals(\"prototype\")))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a267fb31 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,18 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isObjectLitKey(parent, n)) {\n+        Node objLit = parent.getParent();\n+        if (objLit != null && NodeUtil.isAssignment(objLit.getParent())) {\n+          Node assign = objLit.getParent();\n+          Node target = assign.getFirstChild();\n+          Node rhs = target.getNext();\n+          if (NodeUtil.isGet(target) &&\n+              target.getLastChild().getString().equals(\"prototype\") &&\n+              rhs != null &&\n+              (rhs.isFunction() ||\n+               (rhs.isQualifiedName() &&\n+                rhs.getLastChild().getString().equals(\"prototype\")))) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}