{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n    \n    public static double regularizedGammaP(double a, double x) {\n        final double epsilon = 10e-15;\n        final int maxIterations = 1000;\n        \n        if (a <= 0.0 || x < 0.0) {\n            throw new IllegalArgumentException();\n        }\n        \n        double p = Gamma.gamma(a, x) / Gamma.gamma(a);\n        double sum = p;\n        double term = p;\n        \n        for (int i = 1; i < maxIterations && Math.abs(term) > epsilon; i++) {\n            term *= x / (a + i);\n            sum += term;\n        }\n        \n        return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..074568a47 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,30 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+    \n+    public static double regularizedGammaP(double a, double x) {\n+        final double epsilon = 10e-15;\n+        final int maxIterations = 1000;\n+        \n+        if (a <= 0.0 || x < 0.0) {\n+            throw new IllegalArgumentException();\n+        }\n+        \n+        double p = Gamma.gamma(a, x) / Gamma.gamma(a);\n+        double sum = p;\n+        double term = p;\n+        \n+        for (int i = 1; i < maxIterations && Math.abs(term) > epsilon; i++) {\n+            term *= x / (a + i);\n+            sum += term;\n+        }\n+        \n+        return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}