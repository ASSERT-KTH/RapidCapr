{
    "patch": "    Node grandparent = parent.getParent();\n    if (n.getType() == Token.LP &&\n        (parent == scope.getRootNode() || (parent.getType() == Token.EXPR_RESULT &&\n        grandparent != null && grandparent.getType() == Token.SCRIPT))) {\n      handleFunctionInputs(parent);\n      return;\n    }\n\n    attachLiteralTypes(n);\n    \n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // in the case of a function expression, we only want to define it if it's part\n        // of an assign or a var statement\n        if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.NAME:\n        // in the case of a named function expression, we want to define it regardless of parent type\n        if (NodeUtil.isFunctionExpression(n)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      default:\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f675756c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,38 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    Node grandparent = parent.getParent();\n+    if (n.getType() == Token.LP &&\n+        (parent == scope.getRootNode() || (parent.getType() == Token.EXPR_RESULT &&\n+        grandparent != null && grandparent.getType() == Token.SCRIPT))) {\n+      handleFunctionInputs(parent);\n+      return;\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    attachLiteralTypes(n);\n+    \n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        // in the case of a function expression, we only want to define it if it's part\n+        // of an assign or a var statement\n+        if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.NAME:\n+        // in the case of a named function expression, we want to define it regardless of parent type\n+        if (NodeUtil.isFunctionExpression(n)) {\n+          defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      default:\n+        break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}