{
    "patch": "private void visitInvalidThis(NodeTraversal t, Node n, JSType thisType) {\n  // Print out the type string nicely.\n  String typeString;\n  if (thisType.isFunctionType() && thisType.toMaybeFunctionType().hasInstanceType()) {\n    typeString = thisType.toMaybeFunctionType().getInstanceType().toString();\n  } else {\n    typeString = thisType.toString();\n  }\n  report(t, n, INVALID_THIS_TYPE, typeString);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8806af3a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+private void visitInvalidThis(NodeTraversal t, Node n, JSType thisType) {\n+  // Print out the type string nicely.\n+  String typeString;\n+  if (thisType.isFunctionType() && thisType.toMaybeFunctionType().hasInstanceType()) {\n+    typeString = thisType.toMaybeFunctionType().getInstanceType().toString();\n+  } else {\n+    typeString = thisType.toString();\n+  }\n+  report(t, n, INVALID_THIS_TYPE, typeString);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}