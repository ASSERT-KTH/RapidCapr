{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          // The variable is assigned in a loop; we can't prove it's assigned once.\n          if (ref.isDeclaration() && ref.isVar()) {\n            Var var = ref.asVar();\n            Node declarationNode = ref.getNode();\n            cfg.getOutEdges(declarationNode).forEach(edge -> {\n              Node successor = edge.target();\n              if (successor.isLoop) {\n                var.setAssignedInLoop(successor);\n              }\n            });\n          }\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..9108d825 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          // The variable is assigned in a loop; we can't prove it's assigned once.\n+          if (ref.isDeclaration() && ref.isVar()) {\n+            Var var = ref.asVar();\n+            Node declarationNode = ref.getNode();\n+            cfg.getOutEdges(declarationNode).forEach(edge -> {\n+              Node successor = edge.target();\n+              if (successor.isLoop) {\n+                var.setAssignedInLoop(successor);\n+              }\n+            });\n+          }\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}