{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode lastArg = argList.getLastChild();\nwhile (lastArg != null) {\n  Var var = fnScope.getVar(lastArg.getString());\n  if (lastArg.getBooleanProp(Node.IS_REST) || referenced.contains(var)) {\n    break;\n  }\n  argList.removeChild(lastArg);\n  compiler.reportCodeChange();\n  numArgsRemoved++;\n  lastArg = argList.getLastChild();\n}\n\nif (NodeUtil.isVanillaFunction(function)) {\n  // We should never remove parameters from some kinds of functions,\n  // such as arrow functions, that don't support default args, etc.\n  if (numArgsRemoved > 0) {\n    // Remove the now-unused function body.\n    Node functionBody = NodeUtil.getFunctionBody(function);\n    if (functionBody != null) {\n      functionBody.detach();\n      compiler.reportCodeChange();\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e1d7d893 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg = argList.getLastChild();\n+while (lastArg != null) {\n+  Var var = fnScope.getVar(lastArg.getString());\n+  if (lastArg.getBooleanProp(Node.IS_REST) || referenced.contains(var)) {\n+    break;\n+  }\n+  argList.removeChild(lastArg);\n+  compiler.reportCodeChange();\n+  numArgsRemoved++;\n+  lastArg = argList.getLastChild();\n+}\n+\n+if (NodeUtil.isVanillaFunction(function)) {\n+  // We should never remove parameters from some kinds of functions,\n+  // such as arrow functions, that don't support default args, etc.\n+  if (numArgsRemoved > 0) {\n+    // Remove the now-unused function body.\n+    Node functionBody = NodeUtil.getFunctionBody(function);\n+    if (functionBody != null) {\n+      functionBody.detach();\n+      compiler.reportCodeChange();\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}