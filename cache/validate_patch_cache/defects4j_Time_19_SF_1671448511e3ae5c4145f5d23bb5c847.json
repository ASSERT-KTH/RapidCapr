{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        long instantAdjusted = instantLocal - offsetLocal;\n\n        // Fix bug: accumulates time instead of offset in the if clause\n        if (instantAdjusted < 0 && instantLocal >= 0) {\n            // If the offset of instant is greater than the offset of\n            // instant+1hour then instant lies in the overlap and we have to\n            // adjust down\n            int offsetBefore = getOffset(instantAdjusted - 1);\n            int offsetAfter = getOffset(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n\n            if (offsetBefore < offsetLocal && offsetLocal <= offsetAfter) {\n                instantAdjusted -= DateTimeConstants.MILLIS_PER_HOUR;\n            }\n        }\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        if (offsetLocal != offsetAdjusted) {\n            // Not inside the overlap, so should have been adjusted to match\n            // the offset.\n            final long nextAdjusted = nextTransition(instantAdjusted);\n            final long nextLocal = nextTransition(instantLocal - offsetLocal);\n            if (nextAdjusted != nextLocal) {\n                return offsetLocal;\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..df590c5b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,33 +878,29 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n+        long instantAdjusted = instantLocal - offsetLocal;\n+\n+        // Fix bug: accumulates time instead of offset in the if clause\n+        if (instantAdjusted < 0 && instantLocal >= 0) {\n+            // If the offset of instant is greater than the offset of\n+            // instant+1hour then instant lies in the overlap and we have to\n+            // adjust down\n+            int offsetBefore = getOffset(instantAdjusted - 1);\n+            int offsetAfter = getOffset(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n+\n+            if (offsetBefore < offsetLocal && offsetLocal <= offsetAfter) {\n+                instantAdjusted -= DateTimeConstants.MILLIS_PER_HOUR;\n+            }\n+        }\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+            // Not inside the overlap, so should have been adjusted to match\n+            // the offset.\n+            final long nextAdjusted = nextTransition(instantAdjusted);\n+            final long nextLocal = nextTransition(instantLocal - offsetLocal);\n+            if (nextAdjusted != nextLocal) {\n+                return offsetLocal;\n             }\n         }\n         return offsetAdjusted;",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}