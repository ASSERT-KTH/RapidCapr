{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char c = input.charAt(pos);\n            if (Character.isHighSurrogate(c)) {\n                if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                    // Write the surrogate pair to the output\n                    out.write(c);\n                    out.write(input.charAt(pos + 1));\n                    pos += 2;\n                    continue;\n                }\n            }\n            // No surrogate pair found, write the character to the output\n            out.write(c);\n            pos++;\n            continue;\n        }\n        pos = handleBackspace(input, pos, out, len);\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n\nprivate int handleBackspace(CharSequence input, int pos, Writer out, int len) throws IOException {\n    // Explicitly handle backspace character in the input string\n    if (input.charAt(pos) == '\\b') {\n        if (pos == 0) {\n            // If the backspace character is the first character, ignore it.\n            pos++;\n        } else {\n            // Move the writer position one back and write space character\n            pos--;\n            out.write(' ');\n        }\n    } else if (Character.isLowSurrogate(input.charAt(pos)) && pos > 0 && Character.isHighSurrogate(input.charAt(pos - 1))) {\n        // If the current position contains a low surrogate and the previous position contains a high surrogate, move back one position to form a surrogate pair.\n        pos--;\n    }\n    return pos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..cbfa9450 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,57 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            char c = input.charAt(pos);\n+            if (Character.isHighSurrogate(c)) {\n+                if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                    // Write the surrogate pair to the output\n+                    out.write(c);\n+                    out.write(input.charAt(pos + 1));\n+                    pos += 2;\n+                    continue;\n+                }\n+            }\n+            // No surrogate pair found, write the character to the output\n+            out.write(c);\n+            pos++;\n+            continue;\n         }\n-        if (input == null) {\n-            return;\n+        pos = handleBackspace(input, pos, out, len);\n+        for (int pt = 0; pt < consumed; pt++) {\n+            pos += Character.charCount(Character.codePointAt(input, pos));\n         }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n+    }\n+}\n+\n+private int handleBackspace(CharSequence input, int pos, Writer out, int len) throws IOException {\n+    // Explicitly handle backspace character in the input string\n+    if (input.charAt(pos) == '\\b') {\n+        if (pos == 0) {\n+            // If the backspace character is the first character, ignore it.\n+            pos++;\n+        } else {\n+            // Move the writer position one back and write space character\n+            pos--;\n+            out.write(' ');\n         }\n+    } else if (Character.isLowSurrogate(input.charAt(pos)) && pos > 0 && Character.isHighSurrogate(input.charAt(pos - 1))) {\n+        // If the current position contains a low surrogate and the previous position contains a high surrogate, move back one position to form a surrogate pair.\n+        pos--;\n     }\n+    return pos;\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "java.lang.OutOfMemoryError: Requested array size exceeds VM limit",
    "test_result": "FAIL"
}