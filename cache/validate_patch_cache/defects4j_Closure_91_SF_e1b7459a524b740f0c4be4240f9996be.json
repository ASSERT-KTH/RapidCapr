{
    "patch": " public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            // JSX element or child function\n            pType == Token.CALL ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      Node nextNode = n.getNext();\n      if (nextNode != null && !NodeUtil.isStatementBlock(nextNode)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      Node value = parent.getLastChild();\n      if (NodeUtil.isGet(parent) && NodeUtil.isGet(value)) {\n        Node valueName = value.getLastChild();\n        if (valueName != null && \"prototype\".equals(valueName.getString())) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8225a72a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,7 +79,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n@@ -88,7 +88,6 @@ final class CheckGlobalThis implements Callback {\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n       }\n@@ -104,14 +103,27 @@ final class CheckGlobalThis implements Callback {\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n-\n+            // JSX element or child function\n+            pType == Token.CALL ||\n             // object literal keys\n             pType == Token.STRING ||\n             pType == Token.NUMBER)) {\n         return false;\n       }\n \n+      Node nextNode = n.getNext();\n+      if (nextNode != null && !NodeUtil.isStatementBlock(nextNode)) {\n+        return false;\n+      }\n+\n       // Don't traverse functions that are getting lent to a prototype.\n+      Node value = parent.getLastChild();\n+      if (NodeUtil.isGet(parent) && NodeUtil.isGet(value)) {\n+        Node valueName = value.getLastChild();\n+        if (valueName != null && \"prototype\".equals(valueName.getString())) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 36 expected:<0> but was:<1>",
    "test_result": "FAIL"
}