{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class MyMath {\n    \n    public static double regularizedGamma(double a, double x) {\n        final double epsilon = 10e-15; // small value added to avoid 0/0\n        if (x < 0 || a <= 0) {\n            return Double.NaN;\n        }\n        if (x == 0) {\n            return 0.0;\n        }\n        if (x >= a + 1) {\n            // use regularized gamma function identity with a' = a + n\n            double n = FastMath.floor(x - a - 1);\n            double ap = a + n;\n            double t = regularizedGamma(ap, x);\n            while (n > 0) {\n                t *= (x + n - 1) / (ap - 1);\n                n -= 1;\n                ap -= 1;\n            }\n            return t;\n        }\n        // series representation of the regularized gamma function\n        double sum = 1 / a;\n        double denom = a;\n        double term = 1 / a;\n        int i = 1;\n        while (FastMath.abs(term / sum) > epsilon) {\n            denom += 1;\n            term *= x / denom;\n            sum += term;\n            i += 1;\n            if (i > 1000) {\n                // maximum number of iterations exceeded\n                return Double.NaN;\n            }\n        }\n        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c27d2e40d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,49 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class MyMath {\n+    \n+    public static double regularizedGamma(double a, double x) {\n+        final double epsilon = 10e-15; // small value added to avoid 0/0\n+        if (x < 0 || a <= 0) {\n+            return Double.NaN;\n+        }\n+        if (x == 0) {\n+            return 0.0;\n+        }\n+        if (x >= a + 1) {\n+            // use regularized gamma function identity with a' = a + n\n+            double n = FastMath.floor(x - a - 1);\n+            double ap = a + n;\n+            double t = regularizedGamma(ap, x);\n+            while (n > 0) {\n+                t *= (x + n - 1) / (ap - 1);\n+                n -= 1;\n+                ap -= 1;\n+            }\n+            return t;\n+        }\n+        // series representation of the regularized gamma function\n+        double sum = 1 / a;\n+        double denom = a;\n+        double term = 1 / a;\n+        int i = 1;\n+        while (FastMath.abs(term / sum) > epsilon) {\n+            denom += 1;\n+            term *= x / denom;\n+            sum += term;\n+            i += 1;\n+            if (i > 1000) {\n+                // maximum number of iterations exceeded\n+                return Double.NaN;\n+            }\n+        }\n+        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}