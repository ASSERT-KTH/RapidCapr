{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n\n        Chronology chrono;\n        // Store the original zone in case it needs restoring\n        DateTimeZone originalZone = DateTimeZone.getDefault();\n        try {\n            chrono = instant.getChronology().withZone(DateTimeZone.getDefault());\n            DateTimeZone.setDefault(chrono.getZone());\n        } catch (IllegalArgumentException ex) {\n            // Use original instant chronology\n            chrono = instant.getChronology();\n        }\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..423b39c1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,15 +702,25 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n+\n+        Chronology chrono;\n+        // Store the original zone in case it needs restoring\n+        DateTimeZone originalZone = DateTimeZone.getDefault();\n+        try {\n+            chrono = instant.getChronology().withZone(DateTimeZone.getDefault());\n+            DateTimeZone.setDefault(chrono.getZone());\n+        } catch (IllegalArgumentException ex) {\n+            // Use original instant chronology\n+            chrono = instant.getChronology();\n+        }\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n+\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2004-05-01T03:20:30.000+01:00>",
    "test_result": "FAIL"
}