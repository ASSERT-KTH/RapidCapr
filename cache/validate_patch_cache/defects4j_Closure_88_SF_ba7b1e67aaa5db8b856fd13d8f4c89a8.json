{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    // Stop recursing down the AST once the kill point is reached\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    } else if (n.isFunction()) {\n      // Stop recursing if the variable is a parameter of the function\n      Node paramList = n.getFirstChild().getSecondChild();\n      for (Node param = paramList.getFirstChild();\n          param != null; param = param.getNext()) {\n        if (variable.equals(param.getString())) {\n          return VariableLiveness.MAYBE_LIVE;\n        }\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      // Stop recursing down the AST once the kill point is reached\n      if (isKillNode(child)) {\n        return VariableLiveness.MAYBE_LIVE;\n      }\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  private static boolean isKillNode(Node child) {\n    // Stop recursing down the AST once a kill node is reached\n    return child.isFunction() || NodeUtil.isBlockScopedDeclaration(child);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..6d69cb4f 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -322,6 +322,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n+    // Stop recursing down the AST once the kill point is reached\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n         // The expression to which the assignment is made is evaluated before\n@@ -331,18 +332,34 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       } else {\n         return VariableLiveness.READ;\n       }\n+    } else if (n.isFunction()) {\n+      // Stop recursing if the variable is a parameter of the function\n+      Node paramList = n.getFirstChild().getSecondChild();\n+      for (Node param = paramList.getFirstChild();\n+          param != null; param = param.getNext()) {\n+        if (variable.equals(param.getString())) {\n+          return VariableLiveness.MAYBE_LIVE;\n+        }\n+      }\n     }\n \n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n+      // Stop recursing down the AST once the kill point is reached\n+      if (isKillNode(child)) {\n+        return VariableLiveness.MAYBE_LIVE;\n+      }\n+      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+      if (state != VariableLiveness.MAYBE_LIVE) {\n+        return state;\n       }\n     }\n     return VariableLiveness.MAYBE_LIVE;\n   }\n+\n+  private static boolean isKillNode(Node child) {\n+    // Stop recursing down the AST once a kill node is reached\n+    return child.isFunction() || NodeUtil.isBlockScopedDeclaration(child);\n+  }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}