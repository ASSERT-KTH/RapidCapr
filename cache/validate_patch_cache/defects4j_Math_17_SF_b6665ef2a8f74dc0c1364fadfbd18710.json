{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(getField(), qnan);\n            }\n\n            if (x == 0) {\n                return newInstance(getField(), getZero());\n            }\n\n            // Multiplication by +/- infinity and NaN is documented elsewhere\n            int intsign = (x < 0) ? -1 : 1;\n\n            int[] result = new int[1 + man",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..0e023d06b 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,8 +1600,18 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n-    }\n+            if (isNaN()) {\n+                return newInstance(getField(), qnan);\n+            }\n+\n+            if (x == 0) {\n+                return newInstance(getField(), getZero());\n+            }\n+\n+            // Multiplication by +/- infinity and NaN is documented elsewhere\n+            int intsign = (x < 0) ? -1 : 1;\n+\n+            int[] result = new int[1 + man\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: ']' expected",
    "test_result": "ERROR"
}