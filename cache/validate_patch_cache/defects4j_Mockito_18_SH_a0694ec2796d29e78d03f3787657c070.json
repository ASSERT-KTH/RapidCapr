{
    "patch": "public ReturnValue execute(ExecutionEvent event) throws ExecutionException {\n    try {\n        ISelection selection = HandlerUtil.getCurrentSelection(event);\n        if(selection instanceof IStructuredSelection) {\n            IStructuredSelection strSelection = (IStructuredSelection)selection;\n            List<String> selectedFiles = new ArrayList<>();\n            for(Object obj : strSelection.toArray()) {\n                if(obj instanceof IFile) {\n                    String fileName = ((IFile) obj).getName();\n                    selectedFiles.add(fileName);\n                }       \n            }\n            if(!selectedFiles.isEmpty()) {\n                return new ReturnValue(selectedFiles);\n            }\n        }\n        return new ReturnValue(Collections.emptyList());\n    } catch (Exception e) {\n        return new ReturnValue(Collections.emptyList());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}