{
    "patch": "        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          if (gramps.isGetProp() && parent == gramps.getFirstChild()) {\n            // if it is a property assignment x.y = z, it should be invalidated\n            return false;\n          }\n          // A call target may be using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // Deleting a property has different semantics from deleting\n          // a variable, so deleted properties should not be inlined.\n          if (parent.isDelProp()) {\n            return false;\n          }\n          \n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          String propName = parent.getLastChild().getString();\n          if (!validProperties.contains(propName)) {\n            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              validProperties.add(propName);\n            } else {\n              return false;\n            }\n          }\n          \n          // If a property is assigned in another property assignment on the same object\n          // we cannot inline the object.\n          for (Node def = NodeUtil.getDefinitionNode(name); def != null; def = def.getNext()) {\n            if (NodeUtil.isObjectLitKey(def) && def.getParent() != parent) {\n              if (Objects.equals(NodeUtil.getBestJSDocInfo(def.getParent()),\n                      NodeUtil.getBestJSDocInfo(parent))\n                  && NodeUtil.isObjectAssignment(def.getParent())\n                  && def.isEquivalentTo(parent.getLastChild())) {\n                return false;\n              }\n            }\n          }\n          continue;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..1a526808 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,55 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+        if (parent.isGetProp()) {\n+          Preconditions.checkState(parent.getFirstChild() == name);\n+          if (gramps.isGetProp() && parent == gramps.getFirstChild()) {\n+            // if it is a property assignment x.y = z, it should be invalidated\n+            return false;\n+          }\n+          // A call target may be using the object as a 'this' value.\n+          if (gramps.isCall()\n+              && gramps.getFirstChild() == parent) {\n+            return false;\n+          }\n+\n+          // Deleting a property has different semantics from deleting\n+          // a variable, so deleted properties should not be inlined.\n+          if (parent.isDelProp()) {\n+            return false;\n+          }\n+          \n+          // NOTE(nicksantos): This pass's object-splitting algorithm has\n+          // a blind spot. It assumes that if a property isn't defined on an\n+          // object, then the value is undefined. This is not true, because\n+          // Object.prototype can have arbitrary properties on it.\n+          //\n+          // We short-circuit this problem by bailing out if we see a reference\n+          // to a property that isn't defined on the object literal. This\n+          // isn't a perfect algorithm, but it should catch most cases.\n+          String propName = parent.getLastChild().getString();\n+          if (!validProperties.contains(propName)) {\n+            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+              validProperties.add(propName);\n+            } else {\n+              return false;\n+            }\n+          }\n+          \n+          // If a property is assigned in another property assignment on the same object\n+          // we cannot inline the object.\n+          for (Node def = NodeUtil.getDefinitionNode(name); def != null; def = def.getNext()) {\n+            if (NodeUtil.isObjectLitKey(def) && def.getParent() != parent) {\n+              if (Objects.equals(NodeUtil.getBestJSDocInfo(def.getParent()),\n+                      NodeUtil.getBestJSDocInfo(parent))\n+                  && NodeUtil.isObjectAssignment(def.getParent())\n+                  && def.isEquivalentTo(parent.getLastChild())) {\n+                return false;\n+              }\n+            }\n+          }\n+          continue;\n+        }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}