{
    "patch": "public static double getTypedPercent(JsonObject jo) {\n    int total = 0;\n    int typed = 0;\n\n    for (String key : jo.keySet()) {\n        JsonValue value = jo.get(key);\n        if (value.getValueType().equals(JsonValue.ValueType.OBJECT)) {\n            typed++;\n            JsonObject nested = (JsonObject)value;\n            total += getTypedPercent(nested);\n        } else {\n            if (value.getValueType().equals(JsonValue.ValueType.STRING) ||\n                value.getValueType().equals(JsonValue.ValueType.NUMBER) ||\n                value.getValueType().equals(JsonValue.ValueType.TRUE) ||\n                value.getValueType().equals(JsonValue.ValueType.FALSE) ||\n                value.equals(JsonValue.NULL)) {\n                typed++;\n            }\n        }\n        total++;\n    }\n\n    if (total == 0) {\n        return 0.0;\n    }\n    return ((double)typed / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3872f6f2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject jo) {\n+    int total = 0;\n+    int typed = 0;\n+\n+    for (String key : jo.keySet()) {\n+        JsonValue value = jo.get(key);\n+        if (value.getValueType().equals(JsonValue.ValueType.OBJECT)) {\n+            typed++;\n+            JsonObject nested = (JsonObject)value;\n+            total += getTypedPercent(nested);\n+        } else {\n+            if (value.getValueType().equals(JsonValue.ValueType.STRING) ||\n+                value.getValueType().equals(JsonValue.ValueType.NUMBER) ||\n+                value.getValueType().equals(JsonValue.ValueType.TRUE) ||\n+                value.getValueType().equals(JsonValue.ValueType.FALSE) ||\n+                value.equals(JsonValue.NULL)) {\n+                typed++;\n+            }\n+        }\n+        total++;\n+    }\n+\n+    if (total == 0) {\n+        return 0.0;\n+    }\n+    return ((double)typed / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}