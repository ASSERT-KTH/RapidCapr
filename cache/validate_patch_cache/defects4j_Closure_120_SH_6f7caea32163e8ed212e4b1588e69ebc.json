{
    "patch": "      \n      // make sure there are no other assignments to this variable\n      for (Reference ref2 : references) {\n        if (ref2.isAssignmentTo(getName()) && !ref2.equals(ref)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..54744438 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,10 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      \n+      // make sure there are no other assignments to this variable\n+      for (Reference ref2 : references) {\n+        if (ref2.isAssignmentTo(getName()) && !ref2.equals(ref)) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}