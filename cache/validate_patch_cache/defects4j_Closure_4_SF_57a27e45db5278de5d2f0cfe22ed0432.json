{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = false;\n    boolean warned = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (!resolved) {\n      resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      if (!isResolved()) {\n        // If the type is still not resolved, do a second attempt at resolution\n        // via registry to prevent false negatives in type-inference, and issue\n        // a warning if the type is still not resolved after trying both methods.\n        resolved = resolveViaRegistry(t, enclosing);\n        warned = true;\n      }\n    }\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    if (registry.isLastGeneration()) {\n      return getReferencedType();\n    } else {\n      if (!isResolved() && !warned) {\n        t.warning(getName() + \" could not be resolved\", getPropName() == null ? getSourceFile() : getPropName().getSourceFile(), getNameNode().getLineno());\n      }\n      return this;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..365283a6 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,40 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolved = false;\n+    boolean warned = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n+    resolved = resolveViaRegistry(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    if (!resolved) {\n+      resolveViaProperties(t, enclosing);\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      if (!isResolved()) {\n+        // If the type is still not resolved, do a second attempt at resolution\n+        // via registry to prevent false negatives in type-inference, and issue\n+        // a warning if the type is still not resolved after trying both methods.\n+        resolved = resolveViaRegistry(t, enclosing);\n+        warned = true;\n+      }\n+    }\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    if (registry.isLastGeneration()) {\n+      return getReferencedType();\n+    } else {\n+      if (!isResolved() && !warned) {\n+        t.warning(getName() + \" could not be resolved\", getPropName() == null ? getSourceFile() : getPropName().getSourceFile(), getNameNode().getLineno());\n+      }\n+      return this;\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}