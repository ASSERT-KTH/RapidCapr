{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrt = dec.getSquareRoot();\n    final RealMatrix transpose = sqrt.transpose();\n    final Array2DRowRealMatrix inverseTranspose = new Array2DRowRealMatrix(transpose.getData());\n    final DecompositionSolver solver = (new LUDecomposition(inverseTranspose)).getSolver();\n    final RealMatrix inverseSqrt = solver.getInverse();\n    final RealMatrix result = sqrt.multiply(inverseSqrt);\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b460e07f6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrt = dec.getSquareRoot();\n+    final RealMatrix transpose = sqrt.transpose();\n+    final Array2DRowRealMatrix inverseTranspose = new Array2DRowRealMatrix(transpose.getData());\n+    final DecompositionSolver solver = (new LUDecomposition(inverseTranspose)).getSolver();\n+    final RealMatrix inverseSqrt = solver.getInverse();\n+    final RealMatrix result = sqrt.multiply(inverseSqrt);\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}