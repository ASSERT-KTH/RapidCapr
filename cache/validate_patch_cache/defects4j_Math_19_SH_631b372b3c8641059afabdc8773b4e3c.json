{
    "patch": "if (boundaries != null) {\n    double boundaryRange = boundaries[1][0] - boundaries[0][0];\n    if (Double.isInfinite(boundaryRange)) {\n        throw new NumberIsTooLargeException(boundaryRange, 0, true);\n    } else if (Double.isNaN(boundaryRange)) {\n        throw new NotANumberException();\n    }\n}\n\nif (hasFiniteBounds) {\n    boolean anyInfiniteBound = false;\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            anyInfiniteBound = true;\n            break;\n        }\n    }\n\n    if (anyInfiniteBound) {\n        // If all bounds are infinite, the normalize method will not work.\n        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n    }\n\n    // Ensures none of the finite bounds is NaN\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isNaN(lB[i]) || Double.isNaN(uB[i])) {\n            throw new NotANumberException();\n        }\n    }\n\n    // Convert API to internal handling of boundaries.\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n\n    // Abort early if the normalization will overflow (cf. \"encode\" method).\n    double range = boundaries[1][0] - boundaries[0][0];\n    if (Double.isInfinite(range)) {\n        throw new NumberIsTooLargeException(range, 0, true);\n    } else if (Double.isNaN(range)) {\n        throw new NotANumberException();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..d6da3ed73 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,49 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (boundaries != null) {\n+    double boundaryRange = boundaries[1][0] - boundaries[0][0];\n+    if (Double.isInfinite(boundaryRange)) {\n+        throw new NumberIsTooLargeException(boundaryRange, 0, true);\n+    } else if (Double.isNaN(boundaryRange)) {\n+        throw new NotANumberException();\n+    }\n+}\n+\n+if (hasFiniteBounds) {\n+    boolean anyInfiniteBound = false;\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+            anyInfiniteBound = true;\n+            break;\n+        }\n+    }\n+\n+    if (anyInfiniteBound) {\n+        // If all bounds are infinite, the normalize method will not work.\n+        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n+    }\n+\n+    // Ensures none of the finite bounds is NaN\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isNaN(lB[i]) || Double.isNaN(uB[i])) {\n+            throw new NotANumberException();\n+        }\n+    }\n+\n+    // Convert API to internal handling of boundaries.\n+    boundaries = new double[2][];\n+    boundaries[0] = lB;\n+    boundaries[1] = uB;\n+\n+    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+    double range = boundaries[1][0] - boundaries[0][0];\n+    if (Double.isInfinite(range)) {\n+        throw new NumberIsTooLargeException(range, 0, true);\n+    } else if (Double.isNaN(range)) {\n+        throw new NotANumberException();\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}