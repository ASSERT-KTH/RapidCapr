{
    "patch": "public static double getTypedPercent(String js) {\n    int numTyped = 0;\n    int numChars = 0;\n    boolean inString = false;\n    for (int i = 0; i < js.length(); i++) {\n        char c = js.charAt(i);\n        if (inString) {\n            if (c == '\\\\') {\n                i++; // skip next character\n            } else if (c == '\\'') {\n                inString = false;\n            }\n        } else {\n            if (c == '\\'') {\n                inString = true;\n            }\n            if (c != ' ' && c != '\\n' && c != '\\t') {\n                numChars++;\n                if (c != ';') {\n                    numTyped++;\n                }\n            }\n        }\n    }\n    return ((double) numTyped) / numChars * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5d0ee5db 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int numTyped = 0;\n+    int numChars = 0;\n+    boolean inString = false;\n+    for (int i = 0; i < js.length(); i++) {\n+        char c = js.charAt(i);\n+        if (inString) {\n+            if (c == '\\\\') {\n+                i++; // skip next character\n+            } else if (c == '\\'') {\n+                inString = false;\n+            }\n+        } else {\n+            if (c == '\\'') {\n+                inString = true;\n+            }\n+            if (c != ' ' && c != '\\n' && c != '\\t') {\n+                numChars++;\n+                if (c != ';') {\n+                    numTyped++;\n+                }\n+            }\n+        }\n+    }\n+    return ((double) numTyped) / numChars * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}