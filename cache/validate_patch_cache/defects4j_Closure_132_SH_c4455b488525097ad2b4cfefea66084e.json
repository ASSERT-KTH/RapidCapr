{
    "patch": "        // if(x)  y=1; else y=2; -> var y=x?1:2;\n        if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n            getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n\n          Node var = getBlockVar(thenBranch);\n          Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n          Node name1 = var.getFirstChild();\n          Node maybeName2 = elseAssign.getFirstChild();\n\n          if (name1.hasChildren() && maybeName2.isName()\n              && name1.getString().equals(maybeName2.getString())) {\n            Node thenExpr = name1.removeChildren();\n            Node elseExpr = elseAssign.getLastChild().detachFromParent();\n            cond.detachFromParent();\n            Node hookNode =\n                IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            var.detachFromParent();\n            name1.addChildrenToBack(hookNode);\n            Node varParent = var.getParent();\n            varParent.replaceChild(var, IR.var(var.getFirstChild()));\n            parent.replaceChild(n, varParent);\n            reportCodeChange();\n            return varParent;\n          }\n\n        // if(x)  y=1; else y=2; -> var y=x?1:2;\n        } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n                   getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n          Node var = getBlockVar(elseBranch);\n          Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n          Node maybeName1 = thenAssign.getFirstChild();\n          Node name2 = var.getFirstChild();\n\n          if (name2.hasChildren() && maybeName1.isName()\n              && maybeName1.getString().equals(name2.getString())) {\n            Node thenExpr = thenAssign.getLastChild().detachFromParent();\n            Node elseExpr = name2.removeChildren();\n            cond.detachFromParent();\n            Node hookNode =\n                IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            var.detachFromParent();\n            name2.addChildrenToBack(hookNode);\n            Node varParent = var.getParent();\n            varParent.replaceChild(var, IR.var(var.getFirstChild()));\n            parent.replaceChild(n, varParent);\n            reportCodeChange();\n\n            return varParent;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..6e23bb28 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,55 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+        // if(x)  y=1; else y=2; -> var y=x?1:2;\n+        if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n+            getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n+\n+          Node var = getBlockVar(thenBranch);\n+          Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n+          Node name1 = var.getFirstChild();\n+          Node maybeName2 = elseAssign.getFirstChild();\n+\n+          if (name1.hasChildren() && maybeName2.isName()\n+              && name1.getString().equals(maybeName2.getString())) {\n+            Node thenExpr = name1.removeChildren();\n+            Node elseExpr = elseAssign.getLastChild().detachFromParent();\n+            cond.detachFromParent();\n+            Node hookNode =\n+                IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+            var.detachFromParent();\n+            name1.addChildrenToBack(hookNode);\n+            Node varParent = var.getParent();\n+            varParent.replaceChild(var, IR.var(var.getFirstChild()));\n+            parent.replaceChild(n, varParent);\n+            reportCodeChange();\n+            return varParent;\n+          }\n+\n+        // if(x)  y=1; else y=2; -> var y=x?1:2;\n+        } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n+                   getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n+          Node var = getBlockVar(elseBranch);\n+          Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n+          Node maybeName1 = thenAssign.getFirstChild();\n+          Node name2 = var.getFirstChild();\n+\n+          if (name2.hasChildren() && maybeName1.isName()\n+              && maybeName1.getString().equals(name2.getString())) {\n+            Node thenExpr = thenAssign.getLastChild().detachFromParent();\n+            Node elseExpr = name2.removeChildren();\n+            cond.detachFromParent();\n+            Node hookNode =\n+                IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+            var.detachFromParent();\n+            name2.addChildrenToBack(hookNode);\n+            Node varParent = var.getParent();\n+            varParent.replaceChild(var, IR.var(var.getFirstChild()));\n+            parent.replaceChild(n, varParent);\n+            reportCodeChange();\n+\n+            return varParent;\n+          }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}