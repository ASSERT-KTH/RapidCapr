{
    "patch": "Node functionNode = fnScope.getRootNode();\n\nPreconditions.checkState(functionNode.isFunction());\n\nNode parameterList = functionNode.getSecondChild();\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(functionNode);\n\nif (!modifyCallers) {\n    Node currentParameter = parameterList.getFirstChild();\n    while (currentParameter != null && !referenced.contains(fnScope.getVar(currentParameter.getString()))) {\n        parameterList.removeChild(currentParameter);\n        compiler.reportCodeChange();\n        currentParameter = parameterList.getFirstChild();\n    }\n} else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d397f7a7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node functionNode = fnScope.getRootNode();\n+\n+Preconditions.checkState(functionNode.isFunction());\n+\n+Node parameterList = functionNode.getSecondChild();\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(functionNode);\n+\n+if (!modifyCallers) {\n+    Node currentParameter = parameterList.getFirstChild();\n+    while (currentParameter != null && !referenced.contains(fnScope.getVar(currentParameter.getString()))) {\n+        parameterList.removeChild(currentParameter);\n+        compiler.reportCodeChange();\n+        currentParameter = parameterList.getFirstChild();\n+    }\n+} else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}