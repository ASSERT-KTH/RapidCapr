{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    if (meanImpl.getClass().equals(Mean.class)) {\n        // Use an initial guess for the mean, which will be updated when evaluated\n        if (n == 0) {\n            ((Mean) meanImpl).increment(value);\n            try {\n                ((Mean) meanImpl).evaluate(new double[]{value}, 0, 1);\n            } catch (NullArgumentException ex) {\n                // input array is null, reset the meanImpl to use default Mean class\n                meanImpl = new Mean();\n                meanImpl.increment(value);\n            }\n        } else {\n            meanImpl.increment(value);\n            ((Mean) meanImpl).evaluate();\n        }\n    } else if (meanImpl instanceof AbstractStorelessUnivariateStatistic) {\n        ((AbstractStorelessUnivariateStatistic)meanImpl).increment(value);\n    }\n    \n    if (varianceImpl.getClass().equals(Variance.class)) {\n        // Use an initial guess for the variance, which will be updated when evaluated\n        if (n == 0) {\n            ((Variance) varianceImpl).increment(value);\n            try {\n                ((Variance) varianceImpl).evaluate(new double[]{value}, 0, 1);\n            } catch (NullArgumentException ex) {\n                // input array is null, reset the varianceImpl to use default Variance class\n                varianceImpl = new Variance();\n                varianceImpl.increment(value);\n            }\n        } else {\n            varianceImpl.increment(value);\n            ((Variance) varianceImpl).evaluate();\n        }\n    } else if (varianceImpl instanceof AbstractStorelessUnivariateStatistic) {\n        ((AbstractStorelessUnivariateStatistic)varianceImpl).increment(value);\n    }\n    \n    if (geoMeanImpl.getClass().equals(GeometricMean.class)) {\n        // Use an initial guess for the geometric mean, which will be updated when evaluated\n        if (n == 0) {\n            ((GeometricMean) geoMeanImpl).increment(value);\n            try {\n                ((GeometricMean) geoMeanImpl).evaluate(new double[]{value}, 0, 1);\n            } catch (NullArgumentException ex) {\n                // input array is null, reset the geoMeanImpl to use default GeometricMean class\n                geoMeanImpl = new GeometricMean();\n                geoMeanImpl.increment(value);\n            }\n        } else {\n            geoMeanImpl.increment(value);\n            ((GeometricMean) geoMeanImpl).evaluate();\n        }\n    } else if (geoMeanImpl instanceof AbstractStorelessUnivariateStatistic) {\n        ((AbstractStorelessUnivariateStatistic)geoMeanImpl).increment(value);\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..57b2897d3 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,74 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    if (meanImpl.getClass().equals(Mean.class)) {\n+        // Use an initial guess for the mean, which will be updated when evaluated\n+        if (n == 0) {\n+            ((Mean) meanImpl).increment(value);\n+            try {\n+                ((Mean) meanImpl).evaluate(new double[]{value}, 0, 1);\n+            } catch (NullArgumentException ex) {\n+                // input array is null, reset the meanImpl to use default Mean class\n+                meanImpl = new Mean();\n+                meanImpl.increment(value);\n+            }\n+        } else {\n             meanImpl.increment(value);\n+            ((Mean) meanImpl).evaluate();\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+    } else if (meanImpl instanceof AbstractStorelessUnivariateStatistic) {\n+        ((AbstractStorelessUnivariateStatistic)meanImpl).increment(value);\n+    }\n+    \n+    if (varianceImpl.getClass().equals(Variance.class)) {\n+        // Use an initial guess for the variance, which will be updated when evaluated\n+        if (n == 0) {\n+            ((Variance) varianceImpl).increment(value);\n+            try {\n+                ((Variance) varianceImpl).evaluate(new double[]{value}, 0, 1);\n+            } catch (NullArgumentException ex) {\n+                // input array is null, reset the varianceImpl to use default Variance class\n+                varianceImpl = new Variance();\n+                varianceImpl.increment(value);\n+            }\n+        } else {\n             varianceImpl.increment(value);\n+            ((Variance) varianceImpl).evaluate();\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    } else if (varianceImpl instanceof AbstractStorelessUnivariateStatistic) {\n+        ((AbstractStorelessUnivariateStatistic)varianceImpl).increment(value);\n+    }\n+    \n+    if (geoMeanImpl.getClass().equals(GeometricMean.class)) {\n+        // Use an initial guess for the geometric mean, which will be updated when evaluated\n+        if (n == 0) {\n+            ((GeometricMean) geoMeanImpl).increment(value);\n+            try {\n+                ((GeometricMean) geoMeanImpl).evaluate(new double[]{value}, 0, 1);\n+            } catch (NullArgumentException ex) {\n+                // input array is null, reset the geoMeanImpl to use default GeometricMean class\n+                geoMeanImpl = new GeometricMean();\n+                geoMeanImpl.increment(value);\n+            }\n+        } else {\n             geoMeanImpl.increment(value);\n+            ((GeometricMean) geoMeanImpl).evaluate();\n         }\n-        n++;\n+    } else if (geoMeanImpl instanceof AbstractStorelessUnivariateStatistic) {\n+        ((AbstractStorelessUnivariateStatistic)geoMeanImpl).increment(value);\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "org.apache.commons.math.exception.NullArgumentException: input array",
    "test_result": "FAIL"
}