{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long prevTransition, nextTransition;\n    // check whether we need to look for a previous or next transition\n    if (offsetLocal < offsetAdjusted) {\n        prevTransition = previousTransition(instantAdjusted);\n        nextTransition = nextTransition(prevTransition);\n    } else {\n        nextTransition = nextTransition(instantAdjusted);\n        prevTransition = previousTransition(nextTransition);\n    }\n    // if we're at a transition point, return the correct offset\n    if (instantAdjusted == prevTransition) {\n        return getOffset(prevTransition);\n    } else if (instantAdjusted == nextTransition) {\n        return getOffset(nextTransition);\n    }\n    // check whether we're in an overlap or gap\n    int prevOffset = getOffset(prevTransition);\n    int nextOffset = getOffset(nextTransition);\n    if (prevOffset < nextOffset) { // overlap\n        if (offsetLocal < prevOffset) {\n            // we're in a gap, return previous offset\n            return prevOffset;\n        } else if (offsetLocal >= nextOffset) {\n            // we're in an overlap, return next offset\n            return nextOffset;\n        }\n    } else if (prevOffset > nextOffset) { // gap\n        if (offsetLocal >= prevOffset) {\n            // we're in an overlap, return previous offset\n            return prevOffset;\n        } else if (offsetLocal < nextOffset) {\n            // we're in a gap, return next offset\n            return nextOffset;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5410e624 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,44 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long prevTransition, nextTransition;\n+    // check whether we need to look for a previous or next transition\n+    if (offsetLocal < offsetAdjusted) {\n+        prevTransition = previousTransition(instantAdjusted);\n+        nextTransition = nextTransition(prevTransition);\n+    } else {\n+        nextTransition = nextTransition(instantAdjusted);\n+        prevTransition = previousTransition(nextTransition);\n+    }\n+    // if we're at a transition point, return the correct offset\n+    if (instantAdjusted == prevTransition) {\n+        return getOffset(prevTransition);\n+    } else if (instantAdjusted == nextTransition) {\n+        return getOffset(nextTransition);\n+    }\n+    // check whether we're in an overlap or gap\n+    int prevOffset = getOffset(prevTransition);\n+    int nextOffset = getOffset(nextTransition);\n+    if (prevOffset < nextOffset) { // overlap\n+        if (offsetLocal < prevOffset) {\n+            // we're in a gap, return previous offset\n+            return prevOffset;\n+        } else if (offsetLocal >= nextOffset) {\n+            // we're in an overlap, return next offset\n+            return nextOffset;\n+        }\n+    } else if (prevOffset > nextOffset) { // gap\n+        if (offsetLocal >= prevOffset) {\n+            // we're in an overlap, return previous offset\n+            return prevOffset;\n+        } else if (offsetLocal < nextOffset) {\n+            // we're in a gap, return next offset\n+            return nextOffset;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}