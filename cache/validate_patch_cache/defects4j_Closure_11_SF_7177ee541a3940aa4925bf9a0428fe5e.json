{
    "patch": "public String getprop(String key) {\n    String result = \"\";\n    try {\n        Process process = Runtime.getRuntime().exec(\"getprop \" + key);\n        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            result += line;\n        }\n        bufferedReader.close();\n        inputStreamReader.close();\n\n    } catch (IOException e) {\n        Log.e(TAG, \"Error getting property '\" + key + \"'\", e);\n    }\n\n    if (result.length() > 0) {\n        // Remove any trailing newline characters.\n        if (result.charAt(result.length() - 1) == '\\n') {\n            result = result.substring(0, result.length() - 1);\n        }\n    }\n\n    String[] errors = getErrors();\n    if (errors.length > 0) {\n        StringBuilder message = new StringBuilder(\"Errors encountered:\\n\");\n        for (String error : errors) {\n            message.append(error).append(\"\\n\");\n        }\n        Log.w(TAG, message.toString());\n    }\n\n    String[] warnings = getWarnings();\n    if (warnings.length > 0) {\n        StringBuilder message = new StringBuilder(\"Warnings encountered:\\n\");\n        for (String warning : warnings) {\n            message.append(warning).append(\"\\n\");\n        }\n        Log.w(TAG, message.toString());\n        return result;\n    }\n\n    return result;\n}\n\nprivate String[] getErrors() {\n    String result = \"\";\n    try {\n        Process process = Runtime.getRuntime().exec(\"logcat -b all -d *:e\");\n        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            result += line + \"\\n\";\n        }\n        bufferedReader.close();\n        inputStreamReader.close();\n\n    } catch (IOException e) {\n        Log.e(TAG, \"Error getting errors\", e);\n    }\n\n    return result.split(\"\\n\");\n}\n\nprivate String[] getWarnings() {\n    String result = \"\";\n    try {\n        Process process = Runtime.getRuntime().exec(\"logcat -b all -d *:w\");\n        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            result += line + \"\\n\";\n        }\n        bufferedReader.close();\n        inputStreamReader.close();\n\n    } catch (IOException e) {\n        Log.e(TAG, \"Error getting warnings\", e);\n    }\n\n    return result.split(\"\\n\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..9a80b7ee 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,94 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key) {\n+    String result = \"\";\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + key);\n+        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n+        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+\n+        String line;\n+        while ((line = bufferedReader.readLine()) != null) {\n+            result += line;\n+        }\n+        bufferedReader.close();\n+        inputStreamReader.close();\n+\n+    } catch (IOException e) {\n+        Log.e(TAG, \"Error getting property '\" + key + \"'\", e);\n+    }\n+\n+    if (result.length() > 0) {\n+        // Remove any trailing newline characters.\n+        if (result.charAt(result.length() - 1) == '\\n') {\n+            result = result.substring(0, result.length() - 1);\n+        }\n+    }\n+\n+    String[] errors = getErrors();\n+    if (errors.length > 0) {\n+        StringBuilder message = new StringBuilder(\"Errors encountered:\\n\");\n+        for (String error : errors) {\n+            message.append(error).append(\"\\n\");\n+        }\n+        Log.w(TAG, message.toString());\n+    }\n+\n+    String[] warnings = getWarnings();\n+    if (warnings.length > 0) {\n+        StringBuilder message = new StringBuilder(\"Warnings encountered:\\n\");\n+        for (String warning : warnings) {\n+            message.append(warning).append(\"\\n\");\n+        }\n+        Log.w(TAG, message.toString());\n+        return result;\n+    }\n+\n+    return result;\n+}\n+\n+private String[] getErrors() {\n+    String result = \"\";\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"logcat -b all -d *:e\");\n+        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n+        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+\n+        String line;\n+        while ((line = bufferedReader.readLine()) != null) {\n+            result += line + \"\\n\";\n+        }\n+        bufferedReader.close();\n+        inputStreamReader.close();\n+\n+    } catch (IOException e) {\n+        Log.e(TAG, \"Error getting errors\", e);\n+    }\n+\n+    return result.split(\"\\n\");\n+}\n+\n+private String[] getWarnings() {\n+    String result = \"\";\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"logcat -b all -d *:w\");\n+        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n+        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+\n+        String line;\n+        while ((line = bufferedReader.readLine()) != null) {\n+            result += line + \"\\n\";\n+        }\n+        bufferedReader.close();\n+        inputStreamReader.close();\n+\n+    } catch (IOException e) {\n+        Log.e(TAG, \"Error getting warnings\", e);\n+    }\n+\n+    return result.split(\"\\n\");\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}