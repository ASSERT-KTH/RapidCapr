{
    "patch": "public double getTypedPercent(JSONObject obj) {\n    double count = 0.0;\n    double typedCount = 0.0;\n    JSONArray arr = obj.getJSONArray(\"data\");\n    for (int i = 0; i < arr.length(); i++) {\n        JSONObject dataObj = arr.getJSONObject(i);\n        int value = dataObj.getInt(\"value\");\n        String type = dataObj.getString(\"type\");\n        if (type.equals(\"typed\")) {\n            typedCount += value;\n        }\n        count += value;\n    }\n    if (count == 0) {\n        return 0;\n    } else {\n        return (typedCount / count) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8ef84fd9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject obj) {\n+    double count = 0.0;\n+    double typedCount = 0.0;\n+    JSONArray arr = obj.getJSONArray(\"data\");\n+    for (int i = 0; i < arr.length(); i++) {\n+        JSONObject dataObj = arr.getJSONObject(i);\n+        int value = dataObj.getInt(\"value\");\n+        String type = dataObj.getString(\"type\");\n+        if (type.equals(\"typed\")) {\n+            typedCount += value;\n+        }\n+        count += value;\n+    }\n+    if (count == 0) {\n+        return 0;\n+    } else {\n+        return (typedCount / count) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}