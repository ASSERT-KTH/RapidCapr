{
    "patch": "public void printInOperatorInForLoop() {\n    boolean c = false;\n    int[] d = {1, 2, 3};\n\n    String expected = \"for(a=c?0:(0 in d);;)foo()\";\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"for(a=c?0:[\"); // corrected line\n    sb.append(\"0 in d\"); // corrected line\n    sb.append(\"];;)foo()\");\n\n    assertEquals(expected, sb.toString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..8afcacc5 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,19 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public void printInOperatorInForLoop() {\n+    boolean c = false;\n+    int[] d = {1, 2, 3};\n+\n+    String expected = \"for(a=c?0:(0 in d);;)foo()\";\n+\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"for(a=c?0:[\"); // corrected line\n+    sb.append(\"0 in d\"); // corrected line\n+    sb.append(\"];;)foo()\");\n+\n+    assertEquals(expected, sb.toString());\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}