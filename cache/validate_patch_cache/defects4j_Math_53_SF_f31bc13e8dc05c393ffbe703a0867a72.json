{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double r = real + rhs.getReal();\n    double i = imaginary + rhs.getImaginary();\n    if (Double.isFinite(r) && Double.isFinite(i)) {\n        return createComplex(r, i);\n    }\n    if (Double.isNaN(r) || Double.isNaN(i)) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    if (Double.isInfinite(r) && Double.isInfinite(i)) {\n        double newReal = Math.copySign(Double.POSITIVE_INFINITY, r);\n        double newImaginary = Math.copySign(Double.POSITIVE_INFINITY, i);\n        return createComplex(newReal, newImaginary);\n    }\n    if (Double.isInfinite(r)) {\n        double newImaginary = i - imaginary + i;\n        return createComplex(r, newImaginary);\n    }\n    double newReal = r - real + r;\n    return createComplex(newReal, i);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..e2dccc449 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,28 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double r = real + rhs.getReal();\n+    double i = imaginary + rhs.getImaginary();\n+    if (Double.isFinite(r) && Double.isFinite(i)) {\n+        return createComplex(r, i);\n+    }\n+    if (Double.isNaN(r) || Double.isNaN(i)) {\n+        return createComplex(Double.NaN, Double.NaN);\n     }\n+    if (Double.isInfinite(r) && Double.isInfinite(i)) {\n+        double newReal = Math.copySign(Double.POSITIVE_INFINITY, r);\n+        double newImaginary = Math.copySign(Double.POSITIVE_INFINITY, i);\n+        return createComplex(newReal, newImaginary);\n+    }\n+    if (Double.isInfinite(r)) {\n+        double newImaginary = i - imaginary + i;\n+        return createComplex(r, newImaginary);\n+    }\n+    double newReal = r - real + r;\n+    return createComplex(newReal, i);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}