{
    "patch": "public class BugFixTool {\n\n    public static <T> ReturnValueContainer<T> fixBug(ReturnValueContainer<T> values) {\n        if (values.hasException()) {\n            return values;\n        } else if (values.getReturnValue() == null) {\n            return new ReturnValueContainer<>(new ArrayList<T>());\n        }\n        return values;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..b11f976db 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class BugFixTool {\n+\n+    public static <T> ReturnValueContainer<T> fixBug(ReturnValueContainer<T> values) {\n+        if (values.hasException()) {\n+            return values;\n+        } else if (values.getReturnValue() == null) {\n+            return new ReturnValueContainer<>(new ArrayList<T>());\n+        }\n+        return values;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}