{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    boolean hasImmutableChild = false;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                // + 2 for the quotes.\n                foldedSize += sb.length() + 2;\n                Node foldedStringNode = Node.newString(sb.toString());\n                arrayNode.replaceChild(elem, foldedStringNode);\n                elem = foldedStringNode;\n                sb = new StringBuilder();\n            }\n\n            // If any of the children is not immutable,\n            // append the string expression to foldedString by calling printer\n            String childString = null;\n            try {\n                CodePrinter.Builder builder = new CodePrinter.Builder(new StringBuilder());\n                CodePrinter codePrinter = builder.prettyPrint(false).build();\n                codePrinter.setOutputCharset(\"UTF-8\");\n                codePrinter.setQuoteChar('\"');\n                codePrinter.setIndent(\"\");\n                codePrinter.setLineBreak(\"\");\n                codePrinter.setPreferSingleQuotes(false);\n                codePrinter.output(elem);\n                childString = codePrinter.toString();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n            if (childString != null) {\n                String singleQuotedChildString = childString.replace(\"\\\"\", \"'\");\n                Node coercedStringNode = NodeUtil.newString(\n                        sb.toString() + joinString + singleQuotedChildString);\n                arrayNode.replaceChild(elem, coercedStringNode);\n                elem = coercedStringNode;\n                sb = new StringBuilder();\n            } else {\n                hasImmutableChild = true;\n            }\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        foldedSize += sb.length() + 2;\n        Node foldedStringNode = Node.newString(sb.toString());\n        arrayNode.replaceChild(arrayNode.getLastChild(), foldedStringNode);\n    } else if (!hasImmutableChild) {\n        // Empty array with no immutable child cannot be folded.\n        return;\n    }\n\n    // Compute the total size of the folded expression.\n    foldedSize += InlineCostEstimator.getCost(left);\n\n    if (foldedSize < InlineCostEstimator.getCost(n)) {\n        Node joinCallNode = NodeUtil.newQName(t.getCompiler(), \"'\");\n        joinCallNode.getFirstChild().setString(\"join\");\n        joinCallNode.putBooleanProp(Node.FREE_CALL, true);\n        joinCallNode.putBooleanProp(Node.MAY_HAVE_SIDE_EFFECTS, false);\n        joinCallNode.addChildToBack(arrayNode);\n        parent.replaceChild(n, joinCallNode);\n        t.getCompiler().reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..087b9c61 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,93 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+        return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n+    boolean hasImmutableChild = false;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        if (NodeUtil.isImmutableValue(elem)) {\n+            if (sb.length() > 0) {\n+                sb.append(joinString);\n+            }\n+            sb.append(NodeUtil.getStringValue(elem));\n+        } else {\n+            if (sb.length() > 0) {\n+                // + 2 for the quotes.\n+                foldedSize += sb.length() + 2;\n+                Node foldedStringNode = Node.newString(sb.toString());\n+                arrayNode.replaceChild(elem, foldedStringNode);\n+                elem = foldedStringNode;\n+                sb = new StringBuilder();\n+            }\n+\n+            // If any of the children is not immutable,\n+            // append the string expression to foldedString by calling printer\n+            String childString = null;\n+            try {\n+                CodePrinter.Builder builder = new CodePrinter.Builder(new StringBuilder());\n+                CodePrinter codePrinter = builder.prettyPrint(false).build();\n+                codePrinter.setOutputCharset(\"UTF-8\");\n+                codePrinter.setQuoteChar('\"');\n+                codePrinter.setIndent(\"\");\n+                codePrinter.setLineBreak(\"\");\n+                codePrinter.setPreferSingleQuotes(false);\n+                codePrinter.output(elem);\n+                childString = codePrinter.toString();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+\n+            if (childString != null) {\n+                String singleQuotedChildString = childString.replace(\"\\\"\", \"'\");\n+                Node coercedStringNode = NodeUtil.newString(\n+                        sb.toString() + joinString + singleQuotedChildString);\n+                arrayNode.replaceChild(elem, coercedStringNode);\n+                elem = coercedStringNode;\n+                sb = new StringBuilder();\n+            } else {\n+                hasImmutableChild = true;\n+            }\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+        elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+        foldedSize += sb.length() + 2;\n+        Node foldedStringNode = Node.newString(sb.toString());\n+        arrayNode.replaceChild(arrayNode.getLastChild(), foldedStringNode);\n+    } else if (!hasImmutableChild) {\n+        // Empty array with no immutable child cannot be folded.\n+        return;\n+    }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+    // Compute the total size of the folded expression.\n+    foldedSize += InlineCostEstimator.getCost(left);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+    if (foldedSize < InlineCostEstimator.getCost(n)) {\n+        Node joinCallNode = NodeUtil.newQName(t.getCompiler(), \"'\");\n+        joinCallNode.getFirstChild().setString(\"join\");\n+        joinCallNode.putBooleanProp(Node.FREE_CALL, true);\n+        joinCallNode.putBooleanProp(Node.MAY_HAVE_SIDE_EFFECTS, false);\n+        joinCallNode.addChildToBack(arrayNode);\n+        parent.replaceChild(n, joinCallNode);\n+        t.getCompiler().reportCodeChange();\n     }\n-    t.getCompiler().reportCodeChange();\n-  }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: constructor Builder in class Builder cannot be applied to given types;",
    "test_result": "ERROR"
}