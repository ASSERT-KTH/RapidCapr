{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n    if (!left.isArrayLit() && !left.isObjectLit() && !left.isString() || !right.isNumber()) {\n      return n;\n    }\n    int index = (int) right.getDouble();\n    boolean invalidIndex = false;\n    boolean isString = left.isString();\n    if (isString) {\n      int stringLength = left.getString().length();\n      invalidIndex = !(0 <= index && index < stringLength);\n    } else {\n      int childCount = left.getChildCount();\n      invalidIndex = !(0 <= index && index < childCount);\n    }\n    if (invalidIndex) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    Node elem;\n    if (isString) {\n      elem = Node.newString(left.getString().charAt(index) + \"\");\n    } else {\n      elem = left.getFirstChild();\n      for (int i = 0; i < index; i++) {\n        elem = elem.getNext();\n      }\n    }\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..c9bce3fa 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,53 +1419,41 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     if (isAssignmentTarget(n)) {\n       return n;\n     }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n+    if (!left.isArrayLit() && !left.isObjectLit() && !left.isString() || !right.isNumber()) {\n       return n;\n     }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+    int index = (int) right.getDouble();\n+    boolean invalidIndex = false;\n+    boolean isString = left.isString();\n+    if (isString) {\n+      int stringLength = left.getString().length();\n+      invalidIndex = !(0 <= index && index < stringLength);\n+    } else {\n+      int childCount = left.getChildCount();\n+      invalidIndex = !(0 <= index && index < childCount);\n     }\n-\n-    if (intIndex < 0) {\n+    if (invalidIndex) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    Node elem;\n+    if (isString) {\n+      elem = Node.newString(left.getString().charAt(index) + \"\");\n+    } else {\n+      elem = left.getFirstChild();\n+      for (int i = 0; i < index; i++) {\n+        elem = elem.getNext();\n+      }\n     }\n-\n     if (elem.isEmpty()) {\n       elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n       left.removeChild(elem);\n     }\n-\n-    // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}