{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n\n    public static boolean containsAny(CharSequence sequence, char... searchChars) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int strLength = sequence.length();\n        final int searchLength = searchChars.length;\n        for (int i = 0; i < strLength; i++) {\n            final char ch = sequence.charAt(i);\n            if (Character.isHighSurrogate(ch) && (i < strLength - 1)) {\n                final char ch2 = sequence.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    final int codePoint = Character.toCodePoint(ch, ch2);\n                    if (contains(searchChars, codePoint)) {\n                        return true;\n                    }\n                }\n                i++;\n            } else {\n                if (contains(searchChars, ch)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean contains(char[] array, final int ch) {\n        return Arrays.binarySearch(array, (char) ch) >= 0;\n    }\n\n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n\n    public static boolean containsOnly(CharSequence cs, char... valid) {\n        if (valid == null || cs == null) {\n            return false;\n        }\n        if (cs.length() == 0) {\n            return true;\n        }\n        if (valid.length == 0) {\n            return false;\n        }\n        return indexOfAnyBut(cs, valid) == -1;\n    }\n\n    public static int indexOfAnyBut(CharSequence str, char... searchChars) {\n        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n            return -1;\n        }\n        outer:\n        for (int i = 0; i < str.length(); i++) {\n            final char ch = str.charAt(i);\n            for (char searchChar : searchChars) {\n                if (searchChar == ch) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..7a6cf378 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,75 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(CharSequence sequence, char... searchChars) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int strLength = sequence.length();\n+        final int searchLength = searchChars.length;\n+        for (int i = 0; i < strLength; i++) {\n+            final char ch = sequence.charAt(i);\n+            if (Character.isHighSurrogate(ch) && (i < strLength - 1)) {\n+                final char ch2 = sequence.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    final int codePoint = Character.toCodePoint(ch, ch2);\n+                    if (contains(searchChars, codePoint)) {\n+                        return true;\n+                    }\n+                }\n+                i++;\n+            } else {\n+                if (contains(searchChars, ch)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean contains(char[] array, final int ch) {\n+        return Arrays.binarySearch(array, (char) ch) >= 0;\n+    }\n+\n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+\n+    public static boolean containsOnly(CharSequence cs, char... valid) {\n+        if (valid == null || cs == null) {\n+            return false;\n+        }\n+        if (cs.length() == 0) {\n+            return true;\n+        }\n+        if (valid.length == 0) {\n+            return false;\n+        }\n+        return indexOfAnyBut(cs, valid) == -1;\n+    }\n+\n+    public static int indexOfAnyBut(CharSequence str, char... searchChars) {\n+        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+            return -1;\n+        }\n+        outer:\n+        for (int i = 0; i < str.length(); i++) {\n+            final char ch = str.charAt(i);\n+            for (char searchChar : searchChars) {\n+                if (searchChar == ch) {\n+                    continue outer;\n+                }\n+            }\n+            return i;\n+        }\n+        return -1;\n+    }\n+\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}