{
    "patch": "Node lhsFirstChild = lhs.getFirstChild();\nif (!lhsFirstChild.isGetElem() && !lhsFirstChild.isGetProp()\n    && !NodeUtil.mayEffectMutableState(lhsFirstChild)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..0707e046 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,9 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+Node lhsFirstChild = lhs.getFirstChild();\n+if (!lhsFirstChild.isGetElem() && !lhsFirstChild.isGetProp()\n+    && !NodeUtil.mayEffectMutableState(lhsFirstChild)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}