{
    "patch": "public static Object returnValueFor(Method method) throws Throwable {\n    if (method.getReturnType() == void.class) {\n        return null;\n    }\n    Class<?> returnType = method.getReturnType();\n    if (returnType.isPrimitive()) {\n        if (returnType == boolean.class) {\n            return false;\n        } else if (returnType == char.class) {\n            return '\\u0000';\n        } else {\n            return ((Number) 0).intValue();\n        }\n    } else if (returnType.isArray()) {\n        return Array.newInstance(returnType.getComponentType(), 0);\n    } else if (Iterable.class.isAssignableFrom(returnType)) {\n        return Collections.emptyList();\n    } else {\n        return returnType.newInstance();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..bdd3173f2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Object returnValueFor(Method method) throws Throwable {\n+    if (method.getReturnType() == void.class) {\n+        return null;\n+    }\n+    Class<?> returnType = method.getReturnType();\n+    if (returnType.isPrimitive()) {\n+        if (returnType == boolean.class) {\n+            return false;\n+        } else if (returnType == char.class) {\n+            return '\\u0000';\n+        } else {\n+            return ((Number) 0).intValue();\n+        }\n+    } else if (returnType.isArray()) {\n+        return Array.newInstance(returnType.getComponentType(), 0);\n+    } else if (Iterable.class.isAssignableFrom(returnType)) {\n+        return Collections.emptyList();\n+    } else {\n+        return returnType.newInstance();\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}