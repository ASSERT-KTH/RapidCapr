{
    "patch": "          if (ref == getInitializingReference()) {\n            return true;\n          } else {\n            return false;\n          }\n        } else if (block.isLoop) {\n          return false;\n        }\n        // do not break here to check outer-loop/var usage of this reference if required",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c59a8cf8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          if (ref == getInitializingReference()) {\n+            return true;\n+          } else {\n+            return false;\n+          }\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+        // do not break here to check outer-loop/var usage of this reference if required\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}