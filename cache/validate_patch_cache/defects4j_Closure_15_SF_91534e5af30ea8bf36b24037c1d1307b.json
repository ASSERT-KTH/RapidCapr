{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n      if (outEdge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n      Node node = getCfg().getNode(outEdge.getDestination().getValue());\n      if (node != null && (node.isTry() || node.isFunction() || node.isBlock())) {\n        if (hasExceptionHandler(node)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..c603d2f7 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,21 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n-\n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n-\n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+      if (outEdge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+      Node node = getCfg().getNode(outEdge.getDestination().getValue());\n+      if (node != null && (node.isTry() || node.isFunction() || node.isBlock())) {\n+        if (hasExceptionHandler(node)) {\n           return true;\n         }\n-\n-\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n-          }\n-        }\n-        return false;\n       }\n+    }\n+    return false;\n+  }\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: <anonymous com.google.javascript.jscomp.FlowSensitiveInlineVariables$1> is not abstract and does not override abstract method apply(Node) in Predicate",
    "test_result": "ERROR"
}