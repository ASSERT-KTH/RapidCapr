{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        // Check if the constructor type is a function type.\n        FunctionType ct = constructorType.toMaybeFunctionType();\n\n        // Try to use the constructor as-is if it is not a valid function type.\n        if (ct == null || !ct.isConstructor()) {\n          type = constructorType;\n        } else {\n          // Use the instance type of the constructor function.\n          type = ct.getInstanceType();\n        }\n      }\n    }\n\n    if (type == null) {\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n\n    n.setJSType(type.restrictByNotNullOrUndefined());\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..234f05d2 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,40 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n+\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n+\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n+        // Check if the constructor type is a function type.\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n+\n+        // Try to use the constructor as-is if it is not a valid function type.\n+        if (ct == null || !ct.isConstructor()) {\n+          type = constructorType;\n+        } else {\n+          // Use the instance type of the constructor function.\n           type = ct.getInstanceType();\n         }\n       }\n     }\n-    n.setJSType(type);\n+\n+    if (type == null) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    }\n+\n+    n.setJSType(type.restrictByNotNullOrUndefined());\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}