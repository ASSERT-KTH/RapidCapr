{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  switch (n.getToken()) {\n    case FUNCTION:\n      if (!NodeUtil.isFunctionDeclaration(n) && !isAssignedToVariable(parent)) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case VAR:\n      defineVar(n, parent);\n      break;\n    case CATCH:\n      defineCatch(n, parent);\n      break;\n    case LP:\n      if (parent.getToken() == FUNCTION && n.getNext().getToken() == Token.BLOCK) {\n        handleFunctionInputs(n.getNext().getFirstChild());\n      }\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}\n\nprivate boolean isAssignedToVariable(Node parent) {\n  if (parent == null) {\n    return false;\n  }\n  Node grandparent = parent.getParent();\n  if (grandparent == null) {\n    return false;\n  }\n  switch (grandparent.getToken()) {\n    case VAR:\n    case ASSIGN:\n      return true;\n    case NAME:\n      if (grandparent.getFirstChild() != parent) {\n        // Not the left-hand side of the assignment.\n        return false;\n      }\n      Node greatGrandparent = grandparent.getParent();\n      if (greatGrandparent.getToken() == VAR || greatGrandparent.getToken() == LET) {\n        // Assigned to a var or let.\n        return true;\n      } else if (greatGrandparent.getToken() == ASSIGN && greatGrandparent.getFirstChild() == grandparent) {\n        // Assigned to a property of an object.\n        return true;\n      }\n      break;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5f3c22c8 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,62 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n+\n+  switch (n.getToken()) {\n+    case FUNCTION:\n+      if (!NodeUtil.isFunctionDeclaration(n) && !isAssignedToVariable(parent)) {\n+        defineDeclaredFunction(n, parent);\n       }\n-\n+      break;\n+    case VAR:\n+      defineVar(n, parent);\n+      break;\n+    case CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case LP:\n+      if (parent.getToken() == FUNCTION && n.getNext().getToken() == Token.BLOCK) {\n+        handleFunctionInputs(n.getNext().getFirstChild());\n+      }\n+      break;\n+    default:\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      break;\n+  }\n+}\n+\n+private boolean isAssignedToVariable(Node parent) {\n+  if (parent == null) {\n+    return false;\n+  }\n+  Node grandparent = parent.getParent();\n+  if (grandparent == null) {\n+    return false;\n+  }\n+  switch (grandparent.getToken()) {\n+    case VAR:\n+    case ASSIGN:\n+      return true;\n+    case NAME:\n+      if (grandparent.getFirstChild() != parent) {\n+        // Not the left-hand side of the assignment.\n+        return false;\n       }\n-    }\n+      Node greatGrandparent = grandparent.getParent();\n+      if (greatGrandparent.getToken() == VAR || greatGrandparent.getToken() == LET) {\n+        // Assigned to a var or let.\n+        return true;\n+      } else if (greatGrandparent.getToken() == ASSIGN && greatGrandparent.getFirstChild() == grandparent) {\n+        // Assigned to a property of an object.\n+        return true;\n+      }\n+      break;\n+  }\n+  return false;\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}