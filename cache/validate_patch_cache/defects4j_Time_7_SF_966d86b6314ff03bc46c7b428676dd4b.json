{
    "patch": "\n        Chronology chrono = instant.getChronology();\n        DateTimeZone zone = chrono.getZone();\n        long instantLocal = instant.getMillis() + zone.getOffset(instant.getMillis());\n        chrono = selectChronology(chrono);\n\n        int defaultYear = chrono.year().get(instantLocal);\n        long fixedInstantLocal = -1;\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        boolean dayOverflow = bucket.restoreState(fixedInstantLocal).getOverflow() == null;\n\n        // If dayOverflow, it means there's a chance of converting feb 29 to mar 1, fallback to previous year to avoid it.\n        if (dayOverflow) {\n            defaultYear = chrono.year().get(instantLocal - 86400000L * 365L); // Assuming 365 days a year to avoid DST issues.\n            bucket = new DateTimeParserBucket(\n                    instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n            newPos = parser.parseInto(bucket, text, position);\n        }\n\n        if (!dayOverflow) {\n            fixedInstantLocal = bucket.computeMillis(false, text);\n        } else {\n            fixedInstantLocal = bucket.computeMillis(true, text);\n            int day = chrono.dayOfMonth().get(fixedInstantLocal);\n            if (day != Integer.parseInt(text.substring(newPos - 2, newPos))) {\n                newPos = ~newPos;\n            }\n        }\n\n        instant.setMillis(fixedInstantLocal - zone.getOffset(fixedInstantLocal));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n            chrono = chrono.withZone(zone);\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            chrono = chrono.withZone(zone);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..8378bb59 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,45 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+        DateTimeZone zone = chrono.getZone();\n+        long instantLocal = instant.getMillis() + zone.getOffset(instant.getMillis());\n         chrono = selectChronology(chrono);\n+\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n+        long fixedInstantLocal = -1;\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        boolean dayOverflow = bucket.restoreState(fixedInstantLocal).getOverflow() == null;\n+\n+        // If dayOverflow, it means there's a chance of converting feb 29 to mar 1, fallback to previous year to avoid it.\n+        if (dayOverflow) {\n+            defaultYear = chrono.year().get(instantLocal - 86400000L * 365L); // Assuming 365 days a year to avoid DST issues.\n+            bucket = new DateTimeParserBucket(\n+                    instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            newPos = parser.parseInto(bucket, text, position);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        if (!dayOverflow) {\n+            fixedInstantLocal = bucket.computeMillis(false, text);\n+        } else {\n+            fixedInstantLocal = bucket.computeMillis(true, text);\n+            int day = chrono.dayOfMonth().get(fixedInstantLocal);\n+            if (day != Integer.parseInt(text.substring(newPos - 2, newPos))) {\n+                newPos = ~newPos;\n+            }\n         }\n-        return newPos;\n-    }\n+\n+        instant.setMillis(fixedInstantLocal - zone.getOffset(fixedInstantLocal));\n+        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+            chrono = chrono.withZone(zone);\n+        } else if (bucket.getZone() != null) {\n+            zone = bucket.getZone();\n+            chrono = chrono.withZone(zone);\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}