{
    "patch": "@Override\npublic ReturnValue execute(Args args) {\n    Map<String, Integer> map = new HashMap<>();\n    List<String> strings = (List<String>) args.getArg(List.class);\n\n    for (String s : strings) {\n        String[] words = s.split(\"\\\\s+\");\n        for (String word : words) {\n            if (!map.containsKey(word)) {\n                map.put(word, 1);\n            } else {\n                map.put(word, map.get(word) + 1);\n            }\n        }\n    }\n\n    return new ReturnValue() {\n        @Override\n        public <T> T returnValueFor(Class<T> clazz) {\n            if (clazz.equals(Map.class)) {\n                return (T) map;\n            } else if (clazz.equals(Iterable.class)) {\n                // The bug was in this line where map.entrySet() was replaced with map.keySet()\n                // Due to that, the test was failing with a null pointer exception\n                // This has been fixed by replacing map.keySet() with map.entrySet()\n                Iterable<Map.Entry<String, Integer>> iterable = map.entrySet();\n                // Returning unmodifiable iterable as per the specification\n                return (T) Collections.unmodifiableIterable(iterable);\n            }\n            return null;\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}