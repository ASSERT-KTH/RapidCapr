{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = \",\";\n    if (right != null) {\n      joinString = NodeUtil.getStringValue(right);\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder foldedString = new StringBuilder();\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (!foldedString.toString().isEmpty()) {\n          Node foldedNode = Node.newString(\n              foldedString.substring(0, foldedString.length() - joinString.length()));\n          unrollNonStringNodes(n, prev, foldedNode, arrayFoldedChildren);\n          foldedString.setLength(0);\n          prev = null;\n        }\n\n        if (elem.getType() == Token.STRING) {\n          foldedString.append(NodeUtil.getStringValue(elem)).append(joinString);\n        } else {\n          arrayFoldedChildren.add(elem);\n        }\n      } else {\n        if (!foldedString.toString().isEmpty()) {\n          Node foldedNode = Node.newString(\n              foldedString.substring(0, foldedString.length() - joinString.length()));\n          unrollNonStringNodes(n, prev, foldedNode, arrayFoldedChildren);\n          foldedString.setLength(0);\n          prev = null;\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (!foldedString.toString().isEmpty()) {\n      Node foldedNode = Node.newString(\n          foldedString.substring(0, foldedString.length() - joinString.length()));\n      unrollNonStringNodes(n, prev, foldedNode, arrayFoldedChildren);\n    }\n\n    Node arrayLitNode = new Node(Token.ARRAYLIT);\n    boolean hasFolded = false;\n    for (Node node : arrayFoldedChildren) {\n      if (node.getType() == Token.STRING) {\n        hasFolded = true;\n      }\n      arrayLitNode.addChildToBack(node);\n    }\n\n    if (!hasFolded) {\n      n.getParent().replaceChild(n, arrayNode);\n      reportCodeChange();\n      return arrayNode;\n    }\n\n    Node joinNode = new Node(Token.CALL);\n    joinNode.addChildToBack(callTarget.cloneTree());\n    joinNode.addChildToBack(arrayLitNode);\n\n    n.getParent().replaceChild(n, joinNode);\n    reportCodeChange();\n\n    return joinNode;\n  }\n\n  private void unrollNonStringNodes(Node joinNode, Node prevNode, Node firstNode,\n      List<Node> outputList) {\n    // Handle non-string nodes before a string.\n    if (!NodeUtil.isImmutableValue(firstNode) || firstNode.getType() == Token.EMPTY) {\n      if (prevNode != null) {\n        outputList.add(firstNode);\n      } else {\n        joinNode.getParent().replaceChild(joinNode, firstNode);\n        reportCodeChange();\n        outputList.add(firstNode);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..c0695bbe 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -386,93 +386,87 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+      joinString = NodeUtil.getStringValue(right);\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n+    StringBuilder foldedString = new StringBuilder();\n     Node prev = null;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+        if (!foldedString.toString().isEmpty()) {\n+          Node foldedNode = Node.newString(\n+              foldedString.substring(0, foldedString.length() - joinString.length()));\n+          unrollNonStringNodes(n, prev, foldedNode, arrayFoldedChildren);\n+          foldedString.setLength(0);\n+          prev = null;\n+        }\n+\n+        if (elem.getType() == Token.STRING) {\n+          foldedString.append(NodeUtil.getStringValue(elem)).append(joinString);\n         } else {\n-          sb.append(joinString);\n+          arrayFoldedChildren.add(elem);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (!foldedString.toString().isEmpty()) {\n+          Node foldedNode = Node.newString(\n+              foldedString.substring(0, foldedString.length() - joinString.length()));\n+          unrollNonStringNodes(n, prev, foldedNode, arrayFoldedChildren);\n+          foldedString.setLength(0);\n+          prev = null;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n       elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (!foldedString.toString().isEmpty()) {\n+      Node foldedNode = Node.newString(\n+          foldedString.substring(0, foldedString.length() - joinString.length()));\n+      unrollNonStringNodes(n, prev, foldedNode, arrayFoldedChildren);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    Node arrayLitNode = new Node(Token.ARRAYLIT);\n+    boolean hasFolded = false;\n+    for (Node node : arrayFoldedChildren) {\n+      if (node.getType() == Token.STRING) {\n+        hasFolded = true;\n+      }\n+      arrayLitNode.addChildToBack(node);\n+    }\n+\n+    if (!hasFolded) {\n+      n.getParent().replaceChild(n, arrayNode);\n+      reportCodeChange();\n+      return arrayNode;\n     }\n \n-    return n;\n+    Node joinNode = new Node(Token.CALL);\n+    joinNode.addChildToBack(callTarget.cloneTree());\n+    joinNode.addChildToBack(arrayLitNode);\n+\n+    n.getParent().replaceChild(n, joinNode);\n+    reportCodeChange();\n+\n+    return joinNode;\n+  }\n+\n+  private void unrollNonStringNodes(Node joinNode, Node prevNode, Node firstNode,\n+      List<Node> outputList) {\n+    // Handle non-string nodes before a string.\n+    if (!NodeUtil.isImmutableValue(firstNode) || firstNode.getType() == Token.EMPTY) {\n+      if (prevNode != null) {\n+        outputList.add(firstNode);\n+      } else {\n+        joinNode.getParent().replaceChild(joinNode, firstNode);\n+        reportCodeChange();\n+        outputList.add(firstNode);\n+      }\n+    }\n   }\n \n   /**\n@@ -642,4 +636,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}