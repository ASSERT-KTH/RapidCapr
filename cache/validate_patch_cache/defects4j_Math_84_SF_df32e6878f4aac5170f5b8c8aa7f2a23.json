{
    "patch": "import org.apache.commons.math3.exception.*;\nimport org.apache.commons.math3.optim.SimpleBounds;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.MaxEval;\nimport org.apache.commons.math3.optim.OptimizationDataException;\nimport java.util.Comparator;\n\nprotected void iterateSimplex(final Comparator<PointValuePair> comparator) throws TooManyEvaluationsException, EvaluationException, OptimizationException {\n    while (true) {\n        incrementIterationsCounter();\n        final PointValuePair[] vertices = simplex.getVertices();\n        final PointValuePair best = vertices[0];\n        final PointValuePair secondBest = vertices[1];\n        final PointValuePair worst = vertices[vertices.length - 1];\n        final PointValuePair reflected = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best, ReflectionCoefficient.REFLECTION_COEFFICIENT_MULTIPLIER), comparator);\n        if (comparator.compare(reflected, worst) < 0) {\n            final PointValuePair expanded = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best, ReflectionCoefficient.EXPANSION_COEFFICIENT), comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex.updateBest(expanded);\n            } else {\n                simplex.updateBest(reflected); \n            }\n        } else {\n            boolean shouldReduce = true;\n            if (comparator.compare(reflected, AbstractSimplex.getPrevWorst(vertices, worst)) < 0) {\n                simplex.updateBest(reflected);\n                shouldReduce = false;\n            }\n            if (shouldReduce) {\n                final PointValuePair contracted = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best, ReflectionCoefficient.CONTRACTION_COEFFICIENT), comparator);\n                if (comparator.compare(contracted, worst) < 0) {\n                    simplex.updateBest(contracted);\n                } else {\n                    simplex.contractInside(best, ReflectionCoefficient.SHRINK_COEFFICIENT);\n                }\n            }\n        }\n        final PointValuePair newBest = simplex.getVertex(0);\n        if (isConverged(best, newBest)) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..4c2f2937d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,51 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+import org.apache.commons.math3.exception.*;\n+import org.apache.commons.math3.optim.SimpleBounds;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.optim.OptimizationData;\n+import org.apache.commons.math3.optim.MaxEval;\n+import org.apache.commons.math3.optim.OptimizationDataException;\n+import java.util.Comparator;\n \n+protected void iterateSimplex(final Comparator<PointValuePair> comparator) throws TooManyEvaluationsException, EvaluationException, OptimizationException {\n+    while (true) {\n+        incrementIterationsCounter();\n+        final PointValuePair[] vertices = simplex.getVertices();\n+        final PointValuePair best = vertices[0];\n+        final PointValuePair secondBest = vertices[1];\n+        final PointValuePair worst = vertices[vertices.length - 1];\n+        final PointValuePair reflected = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best, ReflectionCoefficient.REFLECTION_COEFFICIENT_MULTIPLIER), comparator);\n+        if (comparator.compare(reflected, worst) < 0) {\n+            final PointValuePair expanded = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best, ReflectionCoefficient.EXPANSION_COEFFICIENT), comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex.updateBest(expanded);\n+            } else {\n+                simplex.updateBest(reflected); \n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        } else {\n+            boolean shouldReduce = true;\n+            if (comparator.compare(reflected, AbstractSimplex.getPrevWorst(vertices, worst)) < 0) {\n+                simplex.updateBest(reflected);\n+                shouldReduce = false;\n+            }\n+            if (shouldReduce) {\n+                final PointValuePair contracted = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best, ReflectionCoefficient.CONTRACTION_COEFFICIENT), comparator);\n+                if (comparator.compare(contracted, worst) < 0) {\n+                    simplex.updateBest(contracted);\n+                } else {\n+                    simplex.contractInside(best, ReflectionCoefficient.SHRINK_COEFFICIENT);\n+                }\n             }\n-\n         }\n-\n+        final PointValuePair newBest = simplex.getVertex(0);\n+        if (isConverged(best, newBest)) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}