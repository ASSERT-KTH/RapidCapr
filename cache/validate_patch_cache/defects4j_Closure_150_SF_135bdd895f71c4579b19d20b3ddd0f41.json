{
    "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n    handleFunctionInputs(n.getNext().getFirstChild());\n    return;\n  }\n\n  if (n.getType() == Token.FUNCTION) {\n    if (NodeUtil.isFunctionDeclaration(n) || \n        (NodeUtil.isFunctionExpression(n) && !isAssignedToVariable(parent))) {\n      defineDeclaredFunction(n, parent);\n    }\n    return;\n  }\n\n  if (n.getType() == Token.CATCH) {\n    defineCatch(n, parent);\n    return;\n  }\n\n  if (n.getType() == Token.VAR) {\n    defineVar(n, parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n}\n\nprivate boolean isAssignedToVariable(Node parent) {\n  if (parent == null) {\n    return false;\n  }\n  if (parent.getType() == Token.NAME) {\n    return isVarOrAssign(parent.getParent());\n  }\n  return isVarOrAssign(parent);\n}\n\nprivate boolean isVarOrAssign(Node node) {\n  return node.getType() == Token.VAR || node.getType() == Token.ASSIGN;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..bb70a5a9 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,48 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n+    handleFunctionInputs(n.getNext().getFirstChild());\n+    return;\n+  }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+  if (n.getType() == Token.FUNCTION) {\n+    if (NodeUtil.isFunctionDeclaration(n) || \n+        (NodeUtil.isFunctionExpression(n) && !isAssignedToVariable(parent))) {\n+      defineDeclaredFunction(n, parent);\n     }\n+    return;\n+  }\n+\n+  if (n.getType() == Token.CATCH) {\n+    defineCatch(n, parent);\n+    return;\n+  }\n+\n+  if (n.getType() == Token.VAR) {\n+    defineVar(n, parent);\n+    return;\n+  }\n+\n+  attachLiteralTypes(n);\n+}\n+\n+private boolean isAssignedToVariable(Node parent) {\n+  if (parent == null) {\n+    return false;\n+  }\n+  if (parent.getType() == Token.NAME) {\n+    return isVarOrAssign(parent.getParent());\n+  }\n+  return isVarOrAssign(parent);\n+}\n+\n+private boolean isVarOrAssign(Node node) {\n+  return node.getType() == Token.VAR || node.getType() == Token.ASSIGN;\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}