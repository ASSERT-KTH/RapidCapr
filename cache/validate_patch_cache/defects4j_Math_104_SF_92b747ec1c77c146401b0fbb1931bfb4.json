{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input arguments a=\" + a + \" x=\" + x);\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a == 1.0) {\n        return Math.exp(-x);\n    }\n    if (x < a + 1.0) {\n        double sum = a;\n        double term = a;\n        \n        int n = 1;\n        while (sum != sum + term) {\n            term *= x / (a + n);\n            sum += term;\n            ++n;\n        }\n        return Math.exp(-x + Math.log(sum));\n    }\n    else {\n        // Continued fraction\n        double fpmin = 1e-300; // Close to the smallest representable floating-point number.\n        double b = x + 1.0 - a;\n        double c = 1.0 / fpmin;\n        double d = 1.0 / b;\n        double h = d;\n        \n        int i, an;\n        for (i = 1; i <= 1000; i++) {\n            an = -i * (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) < fpmin) {\n                d = fpmin;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < fpmin) {\n                c = fpmin;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < 10e-15) {\n                return h;\n            }\n        }\n        throw new EvaluationException(\"Maximum number of iterations reached\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0ccd66f6d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,58 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments a=\" + a + \" x=\" + x);\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a == 1.0) {\n+        return Math.exp(-x);\n+    }\n+    if (x < a + 1.0) {\n+        double sum = a;\n+        double term = a;\n+        \n+        int n = 1;\n+        while (sum != sum + term) {\n+            term *= x / (a + n);\n+            sum += term;\n+            ++n;\n+        }\n+        return Math.exp(-x + Math.log(sum));\n+    }\n+    else {\n+        // Continued fraction\n+        double fpmin = 1e-300; // Close to the smallest representable floating-point number.\n+        double b = x + 1.0 - a;\n+        double c = 1.0 / fpmin;\n+        double d = 1.0 / b;\n+        double h = d;\n+        \n+        int i, an;\n+        for (i = 1; i <= 1000; i++) {\n+            an = -i * (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) < fpmin) {\n+                d = fpmin;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) < fpmin) {\n+                c = fpmin;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < 10e-15) {\n+                return h;\n+            }\n+        }\n+        throw new EvaluationException(\"Maximum number of iterations reached\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}