{
    "patch": "if (child.isString()) {\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),\n            child,\n            propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,\n            name,\n            (type == null ? \"null\" : type.toString()),\n            n.toString(),\n            \"\"));\n      }\n    }\n} else {\n    Preconditions.checkState(NodeUtil.isGetterOrSetter(child));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..c7a71678 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,30 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (child.isString()) {\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child,\n+                               processProperty(t, prop, type, null))) {\n+      // TODO(user): It doesn't look like the user can do much in this\n+      // case right now.\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(),\n+            child,\n+            propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION,\n+            name,\n+            (type == null ? \"null\" : type.toString()),\n+            n.toString(),\n+            \"\"));\n+      }\n+    }\n+} else {\n+    Preconditions.checkState(NodeUtil.isGetterOrSetter(child));\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}