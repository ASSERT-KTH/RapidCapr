{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the initial offset at local instant\n    int initialOffset = getOffset(instantLocal);\n\n    // calculate instant with initial offset and correct offset\n    long instantUTC = instantLocal - initialOffset;\n    int correctedOffset = getOffset(instantUTC);\n\n    // if there is a gap and local instant is before the gap, return previous offset\n    if (initialOffset > correctedOffset) {\n        long nextTransitionInstant = nextTransition(instantUTC);\n        long nextTransitionLocal = nextTransition(instantLocal);\n        // check if there's a gap of at least one hour\n        if ((nextTransitionLocal - instantLocal) >= DateTimeConstants.MILLIS_PER_HOUR) {\n            return getOffset(previousTransition(instantLocal));\n        }\n    }\n    // if there is an overlap and local instant is in the overlap, return previous offset\n    else if (initialOffset < correctedOffset) {\n        long previousTransitionInstant = previousTransition(instantUTC);\n        long previousTransitionLocal = previousTransition(instantLocal);\n        // check if there's an overlap of at least one hour\n        if ((instantLocal - previousTransitionLocal) >= DateTimeConstants.MILLIS_PER_HOUR) {\n            return getOffset(previousTransitionInstant);\n        }\n    }\n\n    return correctedOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..038a6c6b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,36 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the initial offset at local instant\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // calculate instant with initial offset and correct offset\n+    long instantUTC = instantLocal - initialOffset;\n+    int correctedOffset = getOffset(instantUTC);\n+\n+    // if there is a gap and local instant is before the gap, return previous offset\n+    if (initialOffset > correctedOffset) {\n+        long nextTransitionInstant = nextTransition(instantUTC);\n+        long nextTransitionLocal = nextTransition(instantLocal);\n+        // check if there's a gap of at least one hour\n+        if ((nextTransitionLocal - instantLocal) >= DateTimeConstants.MILLIS_PER_HOUR) {\n+            return getOffset(previousTransition(instantLocal));\n+        }\n+    }\n+    // if there is an overlap and local instant is in the overlap, return previous offset\n+    else if (initialOffset < correctedOffset) {\n+        long previousTransitionInstant = previousTransition(instantUTC);\n+        long previousTransitionLocal = previousTransition(instantLocal);\n+        // check if there's an overlap of at least one hour\n+        if ((instantLocal - previousTransitionLocal) >= DateTimeConstants.MILLIS_PER_HOUR) {\n+            return getOffset(previousTransitionInstant);\n         }\n-        return offsetAdjusted;\n     }\n \n+    return correctedOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}