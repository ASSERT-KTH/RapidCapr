{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null && NodeUtil.isGet(parent)) {\n  Node llhs = parent.getFirstChild();\n  while (NodeUtil.isGet(llhs)) {\n    llhs = llhs.getFirstChild();\n  }\n  if (llhs != null && llhs.matchesQualifiedName(\"Object.defineProperty\")) {\n    return true; // ignoring implementation details\n  }\n  if (llhs != null && llhs.matchesQualifiedName(\"Object.defineProperties\")) {\n    return true; // ignoring implementation details\n  }\n  if (llhs != null && llhs.getLastChild().getString().equals(\"prototype\")) {\n    return false;\n  }\n  if (NodeUtil.isClassConstructorCall(parent)) {\n    return true; // Travese class constructors, even if it's assigning to a prototype.\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a1726112 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,25 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && NodeUtil.isGet(parent)) {\n+  Node llhs = parent.getFirstChild();\n+  while (NodeUtil.isGet(llhs)) {\n+    llhs = llhs.getFirstChild();\n+  }\n+  if (llhs != null && llhs.matchesQualifiedName(\"Object.defineProperty\")) {\n+    return true; // ignoring implementation details\n+  }\n+  if (llhs != null && llhs.matchesQualifiedName(\"Object.defineProperties\")) {\n+    return true; // ignoring implementation details\n+  }\n+  if (llhs != null && llhs.getLastChild().getString().equals(\"prototype\")) {\n+    return false;\n+  }\n+  if (NodeUtil.isClassConstructorCall(parent)) {\n+    return true; // Travese class constructors, even if it's assigning to a prototype.\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}