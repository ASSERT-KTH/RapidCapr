{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 48 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 48 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 48 * DateTimeConstants.MILLIS_PER_HOUR);\n    if (instantBefore == instantAfter) {\n        return instant; // not an overlap (less than is a gap, equal is normal case)\n    }\n    \n    // work out range of instants that have duplicate local times\n    long local = convertUTCToLocal(instant);\n    long durationMillis = Math.min(48 * DateTimeConstants.MILLIS_PER_HOUR, Math.abs(instantAfter - instantBefore));\n    long offsetMillis = earlierOrLater ? durationMillis / 2 : -durationMillis / 2;\n    long targetLocal = convertUTCToLocal(instant + offsetMillis);\n    while (offsetMillis != 0 && targetLocal != local) {\n        durationMillis /= 2;\n        offsetMillis = earlierOrLater ? durationMillis : -durationMillis;\n        targetLocal = convertUTCToLocal(instant + offsetMillis);\n    }\n\n    return convertLocalToUTC(local, false, instant + offsetMillis);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..35a11aff 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,27 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n-        }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // evaluate 48 hours before and after to work out if anything is happening\n+    long instantBefore = convertUTCToLocal(instant - 48 * DateTimeConstants.MILLIS_PER_HOUR);\n+    long instantAfter = convertUTCToLocal(instant + 48 * DateTimeConstants.MILLIS_PER_HOUR);\n+    if (instantBefore == instantAfter) {\n+        return instant; // not an overlap (less than is a gap, equal is normal case)\n     }\n+    \n+    // work out range of instants that have duplicate local times\n+    long local = convertUTCToLocal(instant);\n+    long durationMillis = Math.min(48 * DateTimeConstants.MILLIS_PER_HOUR, Math.abs(instantAfter - instantBefore));\n+    long offsetMillis = earlierOrLater ? durationMillis / 2 : -durationMillis / 2;\n+    long targetLocal = convertUTCToLocal(instant + offsetMillis);\n+    while (offsetMillis != 0 && targetLocal != local) {\n+        durationMillis /= 2;\n+        offsetMillis = earlierOrLater ? durationMillis : -durationMillis;\n+        targetLocal = convertUTCToLocal(instant + offsetMillis);\n+    }\n+\n+    return convertLocalToUTC(local, false, instant + offsetMillis);\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}