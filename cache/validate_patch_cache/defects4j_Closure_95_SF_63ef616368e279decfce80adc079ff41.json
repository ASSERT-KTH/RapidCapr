{
    "patch": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LET ||\n            parent.getType() == Token.CONST ||\n            parent.getType() == Token.REST ||\n            parent.getType() == Token.EXPORT ||\n            parent.getType() == Token.PARAM_LIST ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      // don't try to declare in a deleted scope\n      while (scopeToDeclareIn.isDeleted()) {\n        scopeToDeclareIn = scopeToDeclareIn.getParent();\n      }\n\n      // don't try to declare in the global scope if there's\n      // already a symbol there with this name.\n      if (scopeToDeclareIn.isGlobal() && !inferred) {\n        Var var = scopeToDeclareIn.getVar(variableName);\n        if (var != null) {\n          validator.expectUndeclaredVariable(\n              sourceName, n, parent, var, variableName, type);\n          return;\n        }\n      }\n\n      // declared in closest hoist scope?\n      if (scopeToDeclareIn.isDeclared(variableName, false) &&\n          !scopeToDeclareIn.isVar(variableName)) {\n        Var oldVar = scopeToDeclareIn.getClosestHoistScope().getVar(variableName);\n        if (oldVar.getParentNode() == parent) {\n          // We redefined a var/let/const in the same scope.\n          validator.expectRedefinedVariable(sourceName, n, parent, oldVar);\n        } else {\n          // We tried to define a variable in a scope above an existing variable definition.\n          validator.expectDuplicateVariableDefinition(sourceName, n, oldVar.getNameNode());\n        }\n      } else {\n        if (inferred) {\n          if (n.getType() != Token.NAME || !parent.getType().equals(Token.VAR)) {\n            setDeferredType(n, type);\n          }\n        } else {\n          scopeToDeclareIn.declare(variableName, n, type, compiler.getInput(sourceName), inferred);\n\n          if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n            boolean isExtern = compiler.getInput(sourceName).isExtern();\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in a function scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.getClosestHoistScope().isFunctionScope() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                    superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..e69de651 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -872,22 +872,24 @@ final class TypedScopeCreator implements ScopeCreator {\n     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n       if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n             parent.getType() == Token.FUNCTION ||\n             parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n+            parent.getType() == Token.LET ||\n+            parent.getType() == Token.CONST ||\n+            parent.getType() == Token.REST ||\n+            parent.getType() == Token.EXPORT ||\n+            parent.getType() == Token.PARAM_LIST ||\n             parent.getType() == Token.CATCH);\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+            (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n       } else {\n         Preconditions.checkArgument(\n             n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+            (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n       }\n       String variableName = n.getQualifiedName();\n       Preconditions.checkArgument(!variableName.isEmpty());\n@@ -897,39 +899,51 @@ final class TypedScopeCreator implements ScopeCreator {\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+      // don't try to declare in a deleted scope\n+      while (scopeToDeclareIn.isDeleted()) {\n+        scopeToDeclareIn = scopeToDeclareIn.getParent();\n+      }\n \n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+      // don't try to declare in the global scope if there's\n+      // already a symbol there with this name.\n+      if (scopeToDeclareIn.isGlobal() && !inferred) {\n+        Var var = scopeToDeclareIn.getVar(variableName);\n+        if (var != null) {\n+          validator.expectUndeclaredVariable(\n+              sourceName, n, parent, var, variableName, type);\n+          return;\n+        }\n+      }\n+\n+      // declared in closest hoist scope?\n+      if (scopeToDeclareIn.isDeclared(variableName, false) &&\n+          !scopeToDeclareIn.isVar(variableName)) {\n+        Var oldVar = scopeToDeclareIn.getClosestHoistScope().getVar(variableName);\n+        if (oldVar.getParentNode() == parent) {\n+          // We redefined a var/let/const in the same scope.\n+          validator.expectRedefinedVariable(sourceName, n, parent, oldVar);\n+        } else {\n+          // We tried to define a variable in a scope above an existing variable definition.\n+          validator.expectDuplicateVariableDefinition(sourceName, n, oldVar.getNameNode());\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n+      } else {\n+        if (inferred) {\n+          if (n.getType() != Token.NAME || !parent.getType().equals(Token.VAR)) {\n+            setDeferredType(n, type);\n+          }\n+        } else {\n+          scopeToDeclareIn.declare(variableName, n, type, compiler.getInput(sourceName), inferred);\n+\n+          if (shouldDeclareOnGlobalThis) {\n+            ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            boolean isExtern = compiler.getInput(sourceName).isExtern();\n             globalThis.defineDeclaredProperty(variableName, type, isExtern);\n           }\n         }\n \n-        // If we're in the global scope, also declare var.prototype\n+        // If we're in a function scope, also declare var.prototype\n         // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        if (scopeToDeclareIn.getClosestHoistScope().isFunctionScope() && type instanceof FunctionType) {\n           FunctionType fnType = (FunctionType) type;\n           if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n@@ -937,8 +951,7 @@ final class TypedScopeCreator implements ScopeCreator {\n                 fnType.getPrototype(), compiler.getInput(sourceName),\n                 /* declared iff there's an explicit supertype */\n                 superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+                    superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}