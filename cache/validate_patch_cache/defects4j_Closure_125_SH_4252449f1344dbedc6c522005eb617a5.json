{
    "patch": "      JSType instanceType = null;\n      if (fnType != null) {\n        visitParameterList(t, n, fnType);\n        if (!fnType.isConstructor()) {\n          report(t, n, NOT_A_CONSTRUCTOR);\n        } else {\n          instanceType = fnType.getInstanceType();\n        }\n      }\n      ensureTyped(t, n, instanceType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..2570e3ff 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n+      JSType instanceType = null;\n       if (fnType != null) {\n+        visitParameterList(t, n, fnType);\n+        if (!fnType.isConstructor()) {\n+          report(t, n, NOT_A_CONSTRUCTOR);\n+        } else {\n+          instanceType = fnType.getInstanceType();\n+        }\n+      }\n+      ensureTyped(t, n, instanceType);\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}