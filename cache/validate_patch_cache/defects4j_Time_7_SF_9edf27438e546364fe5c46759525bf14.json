{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n  \n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    int parsedOffsetMillis = 0;\n    DateTimeZone parsedZone = null;\n\n    // Use an initial zone offset to handle the case where the parsed input string\n    // contains no time zone or offset information\n    int initialZoneOffsetMillis = chrono.getZone().getOffset(instantMillis);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis + initialZoneOffsetMillis, chrono, iLocale, iPivotYear, initialZoneOffsetMillis);\n  \n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        parsedOffsetMillis = bucket.getOffsetInteger() != null ? bucket.getOffsetInteger() : initialZoneOffsetMillis;\n        parsedZone = bucket.getZone() != null ? bucket.getZone() : DateTimeZone.getDefault();\n        chrono = selectChronology(bucket.getChronology());\n        instantMillis = bucket.computeMillis(true, text);\n        instant.setMillis(instantMillis - parsedOffsetMillis);\n        instant.setChronology(chrono);\n        instant.setZone(parsedZone);\n    }\n  \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..123e58f2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,36 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+  \n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    int parsedOffsetMillis = 0;\n+    DateTimeZone parsedZone = null;\n+\n+    // Use an initial zone offset to handle the case where the parsed input string\n+    // contains no time zone or offset information\n+    int initialZoneOffsetMillis = chrono.getZone().getOffset(instantMillis);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantMillis + initialZoneOffsetMillis, chrono, iLocale, iPivotYear, initialZoneOffsetMillis);\n+  \n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        parsedOffsetMillis = bucket.getOffsetInteger() != null ? bucket.getOffsetInteger() : initialZoneOffsetMillis;\n+        parsedZone = bucket.getZone() != null ? bucket.getZone() : DateTimeZone.getDefault();\n+        chrono = selectChronology(bucket.getChronology());\n+        instantMillis = bucket.computeMillis(true, text);\n+        instant.setMillis(instantMillis - parsedOffsetMillis);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+        instant.setZone(parsedZone);\n     }\n+  \n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}