{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double s1 = v1.getNorm();\n      double s2 = v2.getNorm();\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double rho = 0.125 * (((v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / s2) / s2);\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v1.y * v2.z - v1.z * v2.y - rho * v2.y * v2.z,\n                          v1.z * v2.x - v1.x * v2.z - rho * v2.z * v2.x,\n                          v1.x * v2.y - v1.y * v2.x - rho * v2.x * v2.y);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..01124b66c 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -459,6 +459,8 @@ public class Vector3D implements Serializable {\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      double s1 = v1.getNorm();\n+      double s2 = v2.getNorm();\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +469,12 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      double rho = 0.125 * (((v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / s2) / s2);\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      return new Vector3D(v1.y * v2.z - v1.z * v2.y - rho * v2.y * v2.z,\n+                          v1.z * v2.x - v1.x * v2.z - rho * v2.z * v2.x,\n+                          v1.x * v2.y - v1.y * v2.x - rho * v2.x * v2.y);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<3.125>",
    "test_result": "FAIL"
}