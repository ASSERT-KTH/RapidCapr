{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // Check if 'this' is an instance of a function type.\n    // This check is here to ensure that a function type is only compared with another function type.\n    if (!(this instanceof ArrowType)) {\n        return false;\n    }\n    ArrowType thisFunctionType = (ArrowType) this;\n\n    if (!thisFunctionType.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    boolean haveVarArgs = false;\n    boolean isThisVarArgs = false;\n    Node thisParam = thisFunctionType.parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null || thatParam != null) {\n        JSType thisParamType = thisParam == null ? null : thisParam.getJSType();\n\n        JSType thatParamType;\n        if (thatParam == null) {\n            // if 'that' is missing parameters, they are assumed of type 'undefined'.\n            // treat 'this' argument as if it were optional.\n            thatParamType = JSType.UNDEFINED;\n            isThisVarArgs = true;\n        } else {\n            thatParamType = thatParam.getJSType();\n        }\n\n        // Compare the types of the parameters.\n        if (thisParamType != null && !thatParamType.isSubtype(thisParamType)) {\n            return false;\n        }\n\n        isThisVarArgs = thisParam == null ? false : thisParam.isVarArgs();\n        boolean isThatVarArgs = thatParam == null ? false : thatParam.isVarArgs();\n\n        if (isThisVarArgs || isThatVarArgs) {\n            // Mark that this and/or that have varargs.\n            haveVarArgs = true;\n        }\n\n        // Advance to the next parameter.\n        if (thisParam != null) {\n            thisParam = thisParam.getNext();\n        }\n        if (thatParam != null) {\n            thatParam = thatParam.getNext();\n        }\n    }\n\n    if (isThisVarArgs && !thatParam.getJSType().isSubtype(thisParam.getJSType())) {\n        // If this is a varargs parameter but that isn't, and the type of that's last parameter is not a subtype of the type of this's last parameter, then that is not a subtype of this.\n        return false;\n    }\n\n    // Handle cases where one function type has variable arity (via a varargs parameter) and the other doesn't.\n    if (haveVarArgs) {\n        if (!isThisVarArgs) {\n            // this requires variable arity while that doesn't.\n            return false;\n        } else if (thatParam != null) {\n            // that requires variable arity while this doesn't, and this has additional unaccounted for parameters.\n            return false;\n        }\n    } else {\n        if (isThisVarArgs && thatParam == null) {\n            // this requires variable arity while that doesn't.\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..02841ae4 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,87 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+    // Check if 'this' is an instance of a function type.\n+    // This check is here to ensure that a function type is only compared with another function type.\n+    if (!(this instanceof ArrowType)) {\n+        return false;\n+    }\n+    ArrowType thisFunctionType = (ArrowType) this;\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+    if (!thisFunctionType.returnType.isSubtype(that.returnType)) {\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n+    boolean haveVarArgs = false;\n+    boolean isThisVarArgs = false;\n+    Node thisParam = thisFunctionType.parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+\n+    while (thisParam != null || thatParam != null) {\n+        JSType thisParamType = thisParam == null ? null : thisParam.getJSType();\n+\n+        JSType thatParamType;\n+        if (thatParam == null) {\n+            // if 'that' is missing parameters, they are assumed of type 'undefined'.\n+            // treat 'this' argument as if it were optional.\n+            thatParamType = JSType.UNDEFINED;\n+            isThisVarArgs = true;\n+        } else {\n+            thatParamType = thatParam.getJSType();\n         }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        // Compare the types of the parameters.\n+        if (thisParamType != null && !thatParamType.isSubtype(thisParamType)) {\n+            return false;\n+        }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        isThisVarArgs = thisParam == null ? false : thisParam.isVarArgs();\n+        boolean isThatVarArgs = thatParam == null ? false : thatParam.isVarArgs();\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+        if (isThisVarArgs || isThatVarArgs) {\n+            // Mark that this and/or that have varargs.\n+            haveVarArgs = true;\n+        }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+        // Advance to the next parameter.\n+        if (thisParam != null) {\n+            thisParam = thisParam.getNext();\n+        }\n+        if (thatParam != null) {\n+            thatParam = thatParam.getNext();\n+        }\n+    }\n+\n+    if (isThisVarArgs && !thatParam.getJSType().isSubtype(thisParam.getJSType())) {\n+        // If this is a varargs parameter but that isn't, and the type of that's last parameter is not a subtype of the type of this's last parameter, then that is not a subtype of this.\n+        return false;\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // Handle cases where one function type has variable arity (via a varargs parameter) and the other doesn't.\n+    if (haveVarArgs) {\n+        if (!isThisVarArgs) {\n+            // this requires variable arity while that doesn't.\n+            return false;\n+        } else if (thatParam != null) {\n+            // that requires variable arity while this doesn't, and this has additional unaccounted for parameters.\n+            return false;\n+        }\n+    } else {\n+        if (isThisVarArgs && thatParam == null) {\n+            // this requires variable arity while that doesn't.\n+            return false;\n+        }\n+    }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}