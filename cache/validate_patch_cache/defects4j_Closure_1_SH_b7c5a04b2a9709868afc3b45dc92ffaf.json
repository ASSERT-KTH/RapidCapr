{
    "patch": "      List<Node> unreferencedArgs = Lists.newArrayList();\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          unreferencedArgs.add(arg);\n        } else if (!unreferencedArgs.isEmpty()) {\n          // Only remove unreferenced args from end of argList.\n          for (Node unusedArg : unreferencedArgs) {\n            argList.removeChild(unusedArg);\n            compiler.reportCodeChange();\n          }\n          unreferencedArgs = Lists.newArrayList();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..982521c9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      List<Node> unreferencedArgs = Lists.newArrayList();\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          unreferencedArgs.add(arg);\n+        } else if (!unreferencedArgs.isEmpty()) {\n+          // Only remove unreferenced args from end of argList.\n+          for (Node unusedArg : unreferencedArgs) {\n+            argList.removeChild(unusedArg);\n+            compiler.reportCodeChange();\n+          }\n+          unreferencedArgs = Lists.newArrayList();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}