{
    "patch": "      Node firstParamNode = argList.getFirstChild();\n      while (firstParamNode != null && !referenced.contains(fnScope.getVar(firstParamNode.getString()))) {\n        argList.removeChild(firstParamNode);\n        compiler.reportCodeChange();\n        firstParamNode = argList.getFirstChild();\n      }\n      // Remove non-referenced parameters left at the end of the param list.\n      Node currentNode = firstParamNode;\n      for (Node i = firstParamNode; i != null; i = i.getNext()) {\n          if (!referenced.contains(fnScope.getVar(i.getString()))) {\n            if (argList.getLastChild() == i) {\n              argList.removeChild(i);\n              compiler.reportCodeChange();\n            } else {\n              currentNode.insertBefore(i.detach());\n              compiler.reportCodeChange();\n            }\n          } else {\n            currentNode = i;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0b5f7bce 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node firstParamNode = argList.getFirstChild();\n+      while (firstParamNode != null && !referenced.contains(fnScope.getVar(firstParamNode.getString()))) {\n+        argList.removeChild(firstParamNode);\n+        compiler.reportCodeChange();\n+        firstParamNode = argList.getFirstChild();\n+      }\n+      // Remove non-referenced parameters left at the end of the param list.\n+      Node currentNode = firstParamNode;\n+      for (Node i = firstParamNode; i != null; i = i.getNext()) {\n+          if (!referenced.contains(fnScope.getVar(i.getString()))) {\n+            if (argList.getLastChild() == i) {\n+              argList.removeChild(i);\n+              compiler.reportCodeChange();\n+            } else {\n+              currentNode.insertBefore(i.detach());\n+              compiler.reportCodeChange();\n+            }\n+          } else {\n+            currentNode = i;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}