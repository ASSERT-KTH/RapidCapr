{
    "patch": "public boolean getProp(String key) {\n    boolean result = false;\n    try {\n        Properties props = new Properties();\n        props.load(new FileInputStream(\"config.properties\"));\n        String value = props.getProperty(key);        \n        if(value != null && value.equalsIgnoreCase(\"true\")) {\n            result = true;\n        }\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..eae2b420 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getProp(String key) {\n+    boolean result = false;\n+    try {\n+        Properties props = new Properties();\n+        props.load(new FileInputStream(\"config.properties\"));\n+        String value = props.getProperty(key);        \n+        if(value != null && value.equalsIgnoreCase(\"true\")) {\n+            result = true;\n+        }\n+    } catch (IOException ex) {\n+        ex.printStackTrace();\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}