{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end == seqEnd) {\n            // If the entity is not complete, write it to the output and return the current index\n            out.write(input.subSequence(index, seqEnd).toString());\n            return seqEnd - index;\n        }\n\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            out.write(input.subSequence(index, end + 1).toString());\n            return end + 1 - index;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        return end - index + 1;\n    } else if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) != '#') {\n        // If the entity is not numeric convert the characters to their equivalent entity and\n        // write it to the output\n        int end = index + 1;\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end == seqEnd) {\n            // If the entity is not complete, write it to the output and return the current index\n            out.write(input.subSequence(index, seqEnd).toString());\n            return seqEnd - index;\n        }\n\n        String entity = input.subSequence(index, end + 1).toString();\n        String value = html40_entities.get(entity);\n        if (value != null) {\n            out.write(value);\n        } else {\n            out.write(entity);\n        }\n\n        return end - index + 1;\n    }\n\n    return 0;\n}\n\nprivate static final Map<String, String> html40_entities = new HashMap<>();\nstatic {\n    html40_entities.put(\"&nbsp;\", \"\\u00A0\");\n    html40_entities.put(\"&iexcl;\", \"\\u00A1\");\n    html40_entities.put(\"&cent;\", \"\\u00A2\");\n    html40_entities.put(\"&pound;\", \"\\u00A3\");\n    html40_entities.put(\"&curren;\", \"\\u00A4\");\n    html40_entities.put(\"&yen;\", \"\\u00A5\");\n    html40_entities.put(\"&brvbar;\", \"\\u00A6\");\n    html40_entities.put(\"&sect;\", \"\\u00A7\");\n    html40_entities.put(\"&uml;\", \"\\u00A8\");\n    html40_entities.put(\"&copy;\", \"\\u00A9\");\n    html40_entities.put(\"&ordf;\", \"\\u00AA\");\n    html40_entities.put(\"&laquo;\", \"\\u00AB\");\n    html40_entities.put(\"&not;\", \"\\u00AC\");\n    html40_entities.put(\"&shy;\", \"\\u00AD\");\n    html40_entities.put(\"&reg;\", \"\\u00AE\");\n    html40_entities.put(\"&macr;\", \"\\u00AF\");\n    html40_entities.put(\"&deg;\", \"\\u00B0\");\n    html40_entities.put(\"&plusmn;\", \"\\u00B1\");\n    html40_entities.put(\"&sup2;\", \"\\u00B2\");\n    html40_entities.put(\"&sup3;\", \"\\u00B3\");\n    html40_entities.put(\"&acute;\", \"\\u00B4\");\n    html40_entities.put(\"&micro;\", \"\\u00B5\");\n    html40_entities.put(\"&para;\", \"\\u00B6\");\n    html40_entities.put(\"&middot;\", \"\\u00B7\");\n    html40_entities.put(\"&cedil;\", \"\\u00B8\");\n    html40_entities.put(\"&sup1;\", \"\\u00B9\");\n    html40_entities.put(\"&ordm;\", \"\\u00BA\");\n    html40_entities.put(\"&raquo;\", \"\\u00BB\");\n    html40_entities.put(\"&frac14;\", \"\\u00BC\");\n    html40_entities.put(\"&frac12;\", \"\\u00BD\");\n    html40_entities.put(\"&frac34;\", \"\\u00BE\");\n    html40_entities.put(\"&iquest;\", \"\\u00BF\");\n    html40_entities.put(\"&Agrave;\", \"\\u00C0\");\n    html40_entities.put(\"&Aacute;\", \"\\u00C1\");\n    html40_entities.put(\"&Acirc;\", \"\\u00C2\");\n    html40_entities.put(\"&Atilde;\", \"\\u00C3\");\n    html40_entities.put(\"&Auml;\", \"\\u00C4\");\n    html40_entities.put(\"&Aring;\", \"\\u00C5\");\n    html40_entities.put(\"&AElig;\", \"\\u00C6\");\n    html40_entities.put(\"&Ccedil;\", \"\\u00C7\");\n    html40_entities.put(\"&Egrave;\", \"\\u00C8\");\n    html40_entities.put(\"&Eacute;\", \"\\u00C9\");\n    html40_entities.put(\"&Ecirc;\", \"\\u00CA\");\n    html40_entities.put(\"&Euml;\", \"\\u00CB\");\n    html40_entities.put(\"&Igrave;\", \"\\u00CC\");\n    html40_entities.put(\"&Iacute;\", \"\\u00CD\");\n    html40_entities.put(\"&Icirc;\", \"\\u00CE\");\n    html40_entities.put(\"&Iuml;\", \"\\u00CF\");\n    html40_entities.put(\"&ETH;\", \"\\u00D0\");\n    html40_entities.put(\"&Ntilde;\", \"\\u00D1\");\n    html40_entities.put(\"&Ograve;\", \"\\u00D2\");\n    html40_entities.put(\"&Oacute;\", \"\\u00D3\");\n    html40_entities.put(\"&Ocirc;\", \"\\u00D4\");\n    html40_entities.put(\"&Otilde;\", \"\\u00D5\");\n    html40_entities.put(\"&Ouml;\", \"\\u00D6\");\n    html40_entities.put(\"&times;\", \"\\u00D7\");\n    html40_entities.put(\"&Oslash;\", \"\\u00D8\");\n    html40_entities.put(\"&Ugrave;\", \"\\u00D9\");\n    html40_entities.put(\"&Uacute;\", \"\\u00DA\");\n    html40_entities.put(\"&Ucirc;\", \"\\u00DB\");\n    html40_entities.put(\"&Uuml;\", \"\\u00DC\");\n    html40_entities.put(\"&Yacute;\", \"\\u00DD\");\n    html40_entities.put(\"&THORN;\", \"\\u00DE\");\n    html40_entities.put(\"&szlig;\", \"\\u00DF\");\n    html40_entities.put(\"&agrave;\", \"\\u00E0\");\n    html40_entities.put(\"&aacute;\", \"\\u00E1\");\n    html40_entities.put(\"&acirc;\", \"\\u00E2\");\n    html40_entities.put(\"&atilde;\", \"\\u00E3\");\n    html40_entities.put(\"&auml;\", \"\\u00E4\");\n    html40_entities.put(\"&aring;\", \"\\u00E5\");\n    html40_entities.put(\"&aelig;\", \"\\u00E6\");\n    html40_entities.put(\"&ccedil;\", \"\\u00E7\");\n    html40_entities.put(\"&egrave;\", \"\\u00E8\");\n    html40_entities.put(\"&eacute;\", \"\\u00E9\");\n    html40_entities.put(\"&ecirc;\", \"\\u00EA\");\n    html40_entities.put(\"&euml;\", \"\\u00EB\");\n    html40_entities.put(\"&igrave;\", \"\\u00EC\");\n    html40_entities.put(\"&iacute;\", \"\\u00ED\");\n    html40_entities.put(\"&icirc;\", \"\\u00EE\");\n    html40_entities.put(\"&iuml;\", \"\\u00EF\");\n    html40_entities.put(\"&eth;\", \"\\u00F0\");\n    html40_entities.put(\"&ntilde;\", \"\\u00F1\");\n    html40_entities.put(\"&ograve;\", \"\\u00F2\");\n    html40_entities.put(\"&oacute;\", \"\\u00F3\");\n    html40_entities.put(\"&ocirc;\", \"\\u00F4\");\n    html40_entities.put(\"&otilde;\", \"\\u00F5\");\n    html40_entities.put(\"&ouml;\", \"\\u00F6\");\n    html40_entities.put(\"&divide;\", \"\\u00F7\");\n    html40_entities.put(\"&oslash;\", \"\\u00F8\");\n    html40_entities.put(\"&ugrave;\", \"\\u00F9\");\n    html40_entities.put(\"&uacute;\", \"\\u00FA\");\n    html40_entities.put(\"&ucirc;\", \"\\u00FB\");\n    html40_entities.put(\"&uuml;\", \"\\u00FC\");\n    html40_entities.put(\"&yacute;\", \"\\u00FD\");\n    html40_entities.put(\"&thorn;\", \"\\u00FE\");\n    html40_entities.put(\"&yuml;\", \"\\u00FF\");\n    html40_entities.put(\"&fnof;\", \"\\u0192\");\n    html40_entities.put(\"&Alpha;\", \"\\u0391\");\n    html40_entities.put(\"&Beta;\", \"\\u0392\");\n    html40_entities.put(\"&Gamma;\", \"\\u0393\");\n    html40_entities.put(\"&Delta;\", \"\\u0394\");\n    html40_entities.put(\"&Epsilon;\", \"\\u0395\");\n    html40_entities.put(\"&Zeta;\", \"\\u0396\");\n    html40_entities.put(\"&Eta;\", \"\\u0397\");\n    html40_entities.put(\"&Theta;\", \"\\u0398\");\n    html40_entities.put(\"&Iota;\", \"\\u0399\");\n    html40_entities.put(\"&Kappa;\", \"\\u039A\");\n    html40_entities.put(\"&Lambda;\", \"\\u039B\");\n    html40_entities.put(\"&Mu;\", \"\\u039C\");\n    html40_entities.put(\"&Nu;\", \"\\u039D\");\n    html40_entities.put(\"&Xi;\", \"\\u039E\");\n    html40_entities.put(\"&Omicron;\", \"\\u039F\");\n    html40_entities.put(\"&Pi;\", \"\\u03A0\");\n    html40_entities.put(\"&Rho;\", \"\\u03A1\");\n    html40_entities.put(\"&Sigma;\", \"\\u03A3\");\n    html40_entities.put(\"&Tau;\", \"\\u03A4\");\n    html40_entities.put(\"&Upsilon;\", \"\\u03A5\");\n    html40_entities.put(\"&Phi;\", \"\\u03A6\");\n    html40_entities.put(\"&Chi;\", \"\\u03A7\");\n    html40_entities.put(\"&Psi;\", \"\\u03A8\");\n    html40_entities.put(\"&Omega;\", \"\\u03A9\");\n    html40_entities.put(\"&alpha;\", \"\\u03B1\");\n    html40_entities.put(\"&beta;\", \"\\u03B2\");\n    html40_entities.put(\"&gamma;\", \"\\u03B3\");\n    html40_entities.put(\"&delta;\", \"\\u03B4\");\n    html40_entities.put(\"&epsilon;\", \"\\u03B5\");\n    html40_entities.put(\"&zeta;\", \"\\u03B6\");\n    html40_entities.put(\"&eta;\", \"\\u03B7\");\n    html40_entities.put(\"&theta;\", \"\\u03B8\");\n    html40_entities.put(\"&iota;\", \"\\u03B9\");\n    html40_entities.put(\"&kappa;\", \"\\u03BA\");\n    html40_entities.put(\"&lambda;\", \"\\u03BB\");\n    html40_entities.put(\"&mu;\", \"\\u03BC\");\n    html40_entities.put(\"&nu;\", \"\\u03BD\");\n    html40_entities.put(\"&xi;\", \"\\u03BE\");\n    html40_entities.put(\"&omicron;\", \"\\u03BF\");\n    html40_entities.put(\"&pi;\", \"\\u03C0\");\n    html40_entities.put(\"&rho;\", \"\\u03C1\");\n    html40_entities.put(\"&sigmaf;\", \"\\u03C2\");\n    html40_entities.put(\"&sigma;\", \"\\u03C3\");\n    html40_entities.put(\"&tau;\", \"\\u03C4\");\n    html40_entities.put(\"&upsilon;\", \"\\u03C5\");\n    html40_entities.put(\"&phi;\", \"\\u03C6\");\n    html40_entities.put(\"&chi;\", \"\\u03C7\");\n    html40_entities.put(\"&psi;\", \"\\u03C8\");\n    html40_entities.put(\"&omega;\", \"\\u03C9\");\n    html40_entities.put(\"&thetasym;\", \"\\u03D1\");\n    html40_entities.put(\"&upsih;\", \"\\u03D2\");\n    html40_entities.put(\"&piv;\", \"\\u03D6\");\n    html40_entities.put(\"&bull;\", \"\\u2022\");\n    html40_entities.put(\"&hellip;\", \"\\u2026\");\n    html40_entities.put(\"&prime;\", \"\\u2032\");\n    htm",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..20d38937 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,232 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-                // Check there's more than just an x after the &#\n-            }\n+        char firstChar = input.charAt(start);\n+        if (firstChar == 'x' || firstChar == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+        int end = start;\n+        while (end < seqEnd && input.charAt(end) != ';') {\n+            end++;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+        if (end == seqEnd) {\n+            // If the entity is not complete, write it to the output and return the current index\n+            out.write(input.subSequence(index, seqEnd).toString());\n+            return seqEnd - index;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue;\n+        try {\n+            if (isHex) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n             }\n+        } catch (NumberFormatException nfe) {\n+            out.write(input.subSequence(index, end + 1).toString());\n+            return end + 1 - index;\n+        }\n+\n+        if (entityValue > 0xFFFF) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs[0]);\n+            out.write(chrs[1]);\n+        } else {\n+            out.write(entityValue);\n+        }\n+\n+        return end - index + 1;\n+    } else if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) != '#') {\n+        // If the entity is not numeric convert the characters to their equivalent entity and\n+        // write it to the output\n+        int end = index + 1;\n+        while (end < seqEnd && input.charAt(end) != ';') {\n+            end++;\n+        }\n \n+        if (end == seqEnd) {\n+            // If the entity is not complete, write it to the output and return the current index\n+            out.write(input.subSequence(index, seqEnd).toString());\n+            return seqEnd - index;\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        String entity = input.subSequence(index, end + 1).toString();\n+        String value = html40_entities.get(entity);\n+        if (value != null) {\n+            out.write(value);\n+        } else {\n+            out.write(entity);\n         }\n-        return 0;\n+\n+        return end - index + 1;\n     }\n+\n+    return 0;\n+}\n+\n+private static final Map<String, String> html40_entities = new HashMap<>();\n+static {\n+    html40_entities.put(\"&nbsp;\", \"\\u00A0\");\n+    html40_entities.put(\"&iexcl;\", \"\\u00A1\");\n+    html40_entities.put(\"&cent;\", \"\\u00A2\");\n+    html40_entities.put(\"&pound;\", \"\\u00A3\");\n+    html40_entities.put(\"&curren;\", \"\\u00A4\");\n+    html40_entities.put(\"&yen;\", \"\\u00A5\");\n+    html40_entities.put(\"&brvbar;\", \"\\u00A6\");\n+    html40_entities.put(\"&sect;\", \"\\u00A7\");\n+    html40_entities.put(\"&uml;\", \"\\u00A8\");\n+    html40_entities.put(\"&copy;\", \"\\u00A9\");\n+    html40_entities.put(\"&ordf;\", \"\\u00AA\");\n+    html40_entities.put(\"&laquo;\", \"\\u00AB\");\n+    html40_entities.put(\"&not;\", \"\\u00AC\");\n+    html40_entities.put(\"&shy;\", \"\\u00AD\");\n+    html40_entities.put(\"&reg;\", \"\\u00AE\");\n+    html40_entities.put(\"&macr;\", \"\\u00AF\");\n+    html40_entities.put(\"&deg;\", \"\\u00B0\");\n+    html40_entities.put(\"&plusmn;\", \"\\u00B1\");\n+    html40_entities.put(\"&sup2;\", \"\\u00B2\");\n+    html40_entities.put(\"&sup3;\", \"\\u00B3\");\n+    html40_entities.put(\"&acute;\", \"\\u00B4\");\n+    html40_entities.put(\"&micro;\", \"\\u00B5\");\n+    html40_entities.put(\"&para;\", \"\\u00B6\");\n+    html40_entities.put(\"&middot;\", \"\\u00B7\");\n+    html40_entities.put(\"&cedil;\", \"\\u00B8\");\n+    html40_entities.put(\"&sup1;\", \"\\u00B9\");\n+    html40_entities.put(\"&ordm;\", \"\\u00BA\");\n+    html40_entities.put(\"&raquo;\", \"\\u00BB\");\n+    html40_entities.put(\"&frac14;\", \"\\u00BC\");\n+    html40_entities.put(\"&frac12;\", \"\\u00BD\");\n+    html40_entities.put(\"&frac34;\", \"\\u00BE\");\n+    html40_entities.put(\"&iquest;\", \"\\u00BF\");\n+    html40_entities.put(\"&Agrave;\", \"\\u00C0\");\n+    html40_entities.put(\"&Aacute;\", \"\\u00C1\");\n+    html40_entities.put(\"&Acirc;\", \"\\u00C2\");\n+    html40_entities.put(\"&Atilde;\", \"\\u00C3\");\n+    html40_entities.put(\"&Auml;\", \"\\u00C4\");\n+    html40_entities.put(\"&Aring;\", \"\\u00C5\");\n+    html40_entities.put(\"&AElig;\", \"\\u00C6\");\n+    html40_entities.put(\"&Ccedil;\", \"\\u00C7\");\n+    html40_entities.put(\"&Egrave;\", \"\\u00C8\");\n+    html40_entities.put(\"&Eacute;\", \"\\u00C9\");\n+    html40_entities.put(\"&Ecirc;\", \"\\u00CA\");\n+    html40_entities.put(\"&Euml;\", \"\\u00CB\");\n+    html40_entities.put(\"&Igrave;\", \"\\u00CC\");\n+    html40_entities.put(\"&Iacute;\", \"\\u00CD\");\n+    html40_entities.put(\"&Icirc;\", \"\\u00CE\");\n+    html40_entities.put(\"&Iuml;\", \"\\u00CF\");\n+    html40_entities.put(\"&ETH;\", \"\\u00D0\");\n+    html40_entities.put(\"&Ntilde;\", \"\\u00D1\");\n+    html40_entities.put(\"&Ograve;\", \"\\u00D2\");\n+    html40_entities.put(\"&Oacute;\", \"\\u00D3\");\n+    html40_entities.put(\"&Ocirc;\", \"\\u00D4\");\n+    html40_entities.put(\"&Otilde;\", \"\\u00D5\");\n+    html40_entities.put(\"&Ouml;\", \"\\u00D6\");\n+    html40_entities.put(\"&times;\", \"\\u00D7\");\n+    html40_entities.put(\"&Oslash;\", \"\\u00D8\");\n+    html40_entities.put(\"&Ugrave;\", \"\\u00D9\");\n+    html40_entities.put(\"&Uacute;\", \"\\u00DA\");\n+    html40_entities.put(\"&Ucirc;\", \"\\u00DB\");\n+    html40_entities.put(\"&Uuml;\", \"\\u00DC\");\n+    html40_entities.put(\"&Yacute;\", \"\\u00DD\");\n+    html40_entities.put(\"&THORN;\", \"\\u00DE\");\n+    html40_entities.put(\"&szlig;\", \"\\u00DF\");\n+    html40_entities.put(\"&agrave;\", \"\\u00E0\");\n+    html40_entities.put(\"&aacute;\", \"\\u00E1\");\n+    html40_entities.put(\"&acirc;\", \"\\u00E2\");\n+    html40_entities.put(\"&atilde;\", \"\\u00E3\");\n+    html40_entities.put(\"&auml;\", \"\\u00E4\");\n+    html40_entities.put(\"&aring;\", \"\\u00E5\");\n+    html40_entities.put(\"&aelig;\", \"\\u00E6\");\n+    html40_entities.put(\"&ccedil;\", \"\\u00E7\");\n+    html40_entities.put(\"&egrave;\", \"\\u00E8\");\n+    html40_entities.put(\"&eacute;\", \"\\u00E9\");\n+    html40_entities.put(\"&ecirc;\", \"\\u00EA\");\n+    html40_entities.put(\"&euml;\", \"\\u00EB\");\n+    html40_entities.put(\"&igrave;\", \"\\u00EC\");\n+    html40_entities.put(\"&iacute;\", \"\\u00ED\");\n+    html40_entities.put(\"&icirc;\", \"\\u00EE\");\n+    html40_entities.put(\"&iuml;\", \"\\u00EF\");\n+    html40_entities.put(\"&eth;\", \"\\u00F0\");\n+    html40_entities.put(\"&ntilde;\", \"\\u00F1\");\n+    html40_entities.put(\"&ograve;\", \"\\u00F2\");\n+    html40_entities.put(\"&oacute;\", \"\\u00F3\");\n+    html40_entities.put(\"&ocirc;\", \"\\u00F4\");\n+    html40_entities.put(\"&otilde;\", \"\\u00F5\");\n+    html40_entities.put(\"&ouml;\", \"\\u00F6\");\n+    html40_entities.put(\"&divide;\", \"\\u00F7\");\n+    html40_entities.put(\"&oslash;\", \"\\u00F8\");\n+    html40_entities.put(\"&ugrave;\", \"\\u00F9\");\n+    html40_entities.put(\"&uacute;\", \"\\u00FA\");\n+    html40_entities.put(\"&ucirc;\", \"\\u00FB\");\n+    html40_entities.put(\"&uuml;\", \"\\u00FC\");\n+    html40_entities.put(\"&yacute;\", \"\\u00FD\");\n+    html40_entities.put(\"&thorn;\", \"\\u00FE\");\n+    html40_entities.put(\"&yuml;\", \"\\u00FF\");\n+    html40_entities.put(\"&fnof;\", \"\\u0192\");\n+    html40_entities.put(\"&Alpha;\", \"\\u0391\");\n+    html40_entities.put(\"&Beta;\", \"\\u0392\");\n+    html40_entities.put(\"&Gamma;\", \"\\u0393\");\n+    html40_entities.put(\"&Delta;\", \"\\u0394\");\n+    html40_entities.put(\"&Epsilon;\", \"\\u0395\");\n+    html40_entities.put(\"&Zeta;\", \"\\u0396\");\n+    html40_entities.put(\"&Eta;\", \"\\u0397\");\n+    html40_entities.put(\"&Theta;\", \"\\u0398\");\n+    html40_entities.put(\"&Iota;\", \"\\u0399\");\n+    html40_entities.put(\"&Kappa;\", \"\\u039A\");\n+    html40_entities.put(\"&Lambda;\", \"\\u039B\");\n+    html40_entities.put(\"&Mu;\", \"\\u039C\");\n+    html40_entities.put(\"&Nu;\", \"\\u039D\");\n+    html40_entities.put(\"&Xi;\", \"\\u039E\");\n+    html40_entities.put(\"&Omicron;\", \"\\u039F\");\n+    html40_entities.put(\"&Pi;\", \"\\u03A0\");\n+    html40_entities.put(\"&Rho;\", \"\\u03A1\");\n+    html40_entities.put(\"&Sigma;\", \"\\u03A3\");\n+    html40_entities.put(\"&Tau;\", \"\\u03A4\");\n+    html40_entities.put(\"&Upsilon;\", \"\\u03A5\");\n+    html40_entities.put(\"&Phi;\", \"\\u03A6\");\n+    html40_entities.put(\"&Chi;\", \"\\u03A7\");\n+    html40_entities.put(\"&Psi;\", \"\\u03A8\");\n+    html40_entities.put(\"&Omega;\", \"\\u03A9\");\n+    html40_entities.put(\"&alpha;\", \"\\u03B1\");\n+    html40_entities.put(\"&beta;\", \"\\u03B2\");\n+    html40_entities.put(\"&gamma;\", \"\\u03B3\");\n+    html40_entities.put(\"&delta;\", \"\\u03B4\");\n+    html40_entities.put(\"&epsilon;\", \"\\u03B5\");\n+    html40_entities.put(\"&zeta;\", \"\\u03B6\");\n+    html40_entities.put(\"&eta;\", \"\\u03B7\");\n+    html40_entities.put(\"&theta;\", \"\\u03B8\");\n+    html40_entities.put(\"&iota;\", \"\\u03B9\");\n+    html40_entities.put(\"&kappa;\", \"\\u03BA\");\n+    html40_entities.put(\"&lambda;\", \"\\u03BB\");\n+    html40_entities.put(\"&mu;\", \"\\u03BC\");\n+    html40_entities.put(\"&nu;\", \"\\u03BD\");\n+    html40_entities.put(\"&xi;\", \"\\u03BE\");\n+    html40_entities.put(\"&omicron;\", \"\\u03BF\");\n+    html40_entities.put(\"&pi;\", \"\\u03C0\");\n+    html40_entities.put(\"&rho;\", \"\\u03C1\");\n+    html40_entities.put(\"&sigmaf;\", \"\\u03C2\");\n+    html40_entities.put(\"&sigma;\", \"\\u03C3\");\n+    html40_entities.put(\"&tau;\", \"\\u03C4\");\n+    html40_entities.put(\"&upsilon;\", \"\\u03C5\");\n+    html40_entities.put(\"&phi;\", \"\\u03C6\");\n+    html40_entities.put(\"&chi;\", \"\\u03C7\");\n+    html40_entities.put(\"&psi;\", \"\\u03C8\");\n+    html40_entities.put(\"&omega;\", \"\\u03C9\");\n+    html40_entities.put(\"&thetasym;\", \"\\u03D1\");\n+    html40_entities.put(\"&upsih;\", \"\\u03D2\");\n+    html40_entities.put(\"&piv;\", \"\\u03D6\");\n+    html40_entities.put(\"&bull;\", \"\\u2022\");\n+    html40_entities.put(\"&hellip;\", \"\\u2026\");\n+    html40_entities.put(\"&prime;\", \"\\u2032\");\n+    htm\n }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}