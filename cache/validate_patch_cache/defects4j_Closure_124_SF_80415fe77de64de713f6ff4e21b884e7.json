{
    "patch": "    // We need to check if the property is a global.\n    Node propNode = node.getLastChild();\n    if (propNode.isString()) {\n      Var var = getScope().getVar(propNode.getString());\n      if (var != null && var.isGlobal()) {\n        return true;\n      }\n    }\n    // Otherwise, we need to make sure the name is not assigned to the replacement.\n    node = node.getFirstChild(); // the GETPROP's object node\n    if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..391b4d81 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,17 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n+    // We need to check if the property is a global.\n+    Node propNode = node.getLastChild();\n+    if (propNode.isString()) {\n+      Var var = getScope().getVar(propNode.getString());\n+      if (var != null && var.isGlobal()) {\n+        return true;\n+      }\n     }\n-\n-    return true;\n-  }\n+    // Otherwise, we need to make sure the name is not assigned to the replacement.\n+    node = node.getFirstChild(); // the GETPROP's object node\n+    if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +237,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}