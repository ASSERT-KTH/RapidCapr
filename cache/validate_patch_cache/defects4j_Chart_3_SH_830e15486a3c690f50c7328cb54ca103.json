{
    "patch": "            for (int index = 0; index < this.data.size(); index++) {\n                TimeSeriesDataItem item = this.data.get(index);\n                if (index >= start && index <= end) {\n                    item = (TimeSeriesDataItem) item.clone();\n                    try {\n                        copy.add(item);\n                    } catch (SeriesException e) {\n                        e.printStackTrace();\n                    }\n                }\n                else if (index > end) { // end condition\n                    break;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..31b4f1b 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,18 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+            for (int index = 0; index < this.data.size(); index++) {\n+                TimeSeriesDataItem item = this.data.get(index);\n+                if (index >= start && index <= end) {\n+                    item = (TimeSeriesDataItem) item.clone();\n+                    try {\n+                        copy.add(item);\n+                    } catch (SeriesException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                else if (index > end) { // end condition\n+                    break;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}