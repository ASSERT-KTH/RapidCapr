{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    Enhancer enhancer = new Enhancer();\n    enhancer.setSuperclass(mock.getClass());\n    enhancer.setInterfaces(new Class[]{Factory.class});\n    enhancer.setCallbackType(MethodInterceptor.class);\n    Class<?> proxyClass = enhancer.createClass();\n    Factory proxy = (Factory) ObjenesisStd.getInstantiatorOf(proxyClass).newInstance();\n    ((Factory) mock).setCallbacks(new MethodInterceptor[]{NoOp.INSTANCE});\n    ((Factory) proxy).setCallbacks(new MethodInterceptor[]{newFilter});\n    ((Factory) mock).getMockSettings().getSerializableMode();\n    Field field = null;\n    try {\n        field = Field.class.getDeclaredField(\"accessFlags\");\n        field.setAccessible(true);\n        int flags = field.getInt(field);\n        if ((flags & Modifier.FINAL) != 0) {\n            field.setInt(mock.getClass().getDeclaredField(field.getName()), flags & ~Modifier.FINAL);\n            field.setInt(field, flags & ~Modifier.FINAL);\n        }\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n        throw new RuntimeException(e);\n    }\n    field.setAccessible(false);\n    ((Factory) mock).setCallbackFilter(new SingletonSychronizerFilter(InvocationOnMock.class));\n    ((Factory) mock).setCallbackTypes(new Class[]{MethodInterceptor.class});\n    ((Factory) mock).setCallbacks(new MethodInterceptor[]{NoOp.INSTANCE});\n    ((Factory) proxy).setCallbackFilter(new SingletonSychronizerFilter(InvocationOnMock.class));\n    ((Factory) proxy).setCallbackTypes(new Class[]{MethodInterceptor.class});\n    ((Factory) mock).setCallback(0, newFilter);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..22939b858 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,40 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    Enhancer enhancer = new Enhancer();\n+    enhancer.setSuperclass(mock.getClass());\n+    enhancer.setInterfaces(new Class[]{Factory.class});\n+    enhancer.setCallbackType(MethodInterceptor.class);\n+    Class<?> proxyClass = enhancer.createClass();\n+    Factory proxy = (Factory) ObjenesisStd.getInstantiatorOf(proxyClass).newInstance();\n+    ((Factory) mock).setCallbacks(new MethodInterceptor[]{NoOp.INSTANCE});\n+    ((Factory) proxy).setCallbacks(new MethodInterceptor[]{newFilter});\n+    ((Factory) mock).getMockSettings().getSerializableMode();\n+    Field field = null;\n+    try {\n+        field = Field.class.getDeclaredField(\"accessFlags\");\n+        field.setAccessible(true);\n+        int flags = field.getInt(field);\n+        if ((flags & Modifier.FINAL) != 0) {\n+            field.setInt(mock.getClass().getDeclaredField(field.getName()), flags & ~Modifier.FINAL);\n+            field.setInt(field, flags & ~Modifier.FINAL);\n+        }\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+    }\n+    field.setAccessible(false);\n+    ((Factory) mock).setCallbackFilter(new SingletonSychronizerFilter(InvocationOnMock.class));\n+    ((Factory) mock).setCallbackTypes(new Class[]{MethodInterceptor.class});\n+    ((Factory) mock).setCallbacks(new MethodInterceptor[]{NoOp.INSTANCE});\n+    ((Factory) proxy).setCallbackFilter(new SingletonSychronizerFilter(InvocationOnMock.class));\n+    ((Factory) proxy).setCallbackTypes(new Class[]{MethodInterceptor.class});\n+    ((Factory) mock).setCallback(0, newFilter);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}