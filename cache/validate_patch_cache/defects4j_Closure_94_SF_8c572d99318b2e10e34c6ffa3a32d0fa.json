{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.DIV:\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n      case Token.HOOK:\n      case Token.INC:\n      case Token.DEC:\n      case Token.EQ:\n      case Token.NE:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n        return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getString());\n        }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..5863d46a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,7 +317,7 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n     switch (val.getType()) {\n       case Token.STRING:\n       case Token.NUMBER:\n@@ -326,10 +326,30 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n+      case Token.DIV:\n+      case Token.AND:\n+      case Token.OR:\n+      case Token.COMMA:\n+      case Token.HOOK:\n+      case Token.INC:\n+      case Token.DEC:\n+      case Token.EQ:\n+      case Token.NE:\n+      case Token.LT:\n+      case Token.LE:\n+      case Token.GT:\n+      case Token.GE:\n+      case Token.LSH:\n+      case Token.RSH:\n+      case Token.URSH:\n       case Token.BITAND:\n-      case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n+      case Token.ADD:\n+      case Token.SUB:\n+      case Token.MUL:\n+      case Token.MOD:\n+        return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n@@ -340,7 +360,7 @@ public final class NodeUtil {\n       case Token.NAME:\n       case Token.GETPROP:\n         if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+          return defines.contains(val.getString());\n         }\n     }\n     return false;",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}