{
    "patch": "public static String getProperty(String key) {\n    String[] warnings = {\"input/output warning\", \"null pointer warning\", \"out of bounds warning\"};\n    if (key == null) {\n        throw new NullPointerException(\"key is null\");\n    }\n    for (String warning : warnings) {\n        if (warning.equals(key)) {\n            return warning;\n        }\n    }\n    throw new IllegalArgumentException(\"Invalid key: \" + key);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..4fc2bc90 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) {\n+    String[] warnings = {\"input/output warning\", \"null pointer warning\", \"out of bounds warning\"};\n+    if (key == null) {\n+        throw new NullPointerException(\"key is null\");\n+    }\n+    for (String warning : warnings) {\n+        if (warning.equals(key)) {\n+            return warning;\n+        }\n+    }\n+    throw new IllegalArgumentException(\"Invalid key: \" + key);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}