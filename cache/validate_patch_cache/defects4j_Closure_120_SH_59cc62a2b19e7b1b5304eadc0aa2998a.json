{
    "patch": "      // Check if there's only one reference outside the initialization, and\n      // that it's in a different block.\n      boolean foundOneReference = false;\n      for (int i = 0; i < references.size(); i++) {\n        if (i == ref.getIndex()) {\n          continue;\n        }\n        Reference otherRef = references.get(i);\n        if (otherRef.isDelete()) {\n          return false;\n        }\n        if (ref.getNameNode().matchesNameNode(otherRef.getNameNode())) {\n          if (foundOneReference) {\n            return false;\n          }\n          // Two reads in the same chain still count as one use.\n          if (otherRef.isSimpleAssignmentToName()) {\n            continue;\n          }\n          // Other write anywhere in chain invalidates it.\n          if (otherRef.isAssignment() && !ref.isInitialization()) {\n            return false;\n          }\n          foundOneReference = true;\n          if (ref.getBasicBlock().equals(otherRef.getBasicBlock())) {\n            continue;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..334cd89c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,32 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Check if there's only one reference outside the initialization, and\n+      // that it's in a different block.\n+      boolean foundOneReference = false;\n+      for (int i = 0; i < references.size(); i++) {\n+        if (i == ref.getIndex()) {\n+          continue;\n+        }\n+        Reference otherRef = references.get(i);\n+        if (otherRef.isDelete()) {\n+          return false;\n+        }\n+        if (ref.getNameNode().matchesNameNode(otherRef.getNameNode())) {\n+          if (foundOneReference) {\n+            return false;\n+          }\n+          // Two reads in the same chain still count as one use.\n+          if (otherRef.isSimpleAssignmentToName()) {\n+            continue;\n+          }\n+          // Other write anywhere in chain invalidates it.\n+          if (otherRef.isAssignment() && !ref.isInitialization()) {\n+            return false;\n+          }\n+          foundOneReference = true;\n+          if (ref.getBasicBlock().equals(otherRef.getBasicBlock())) {\n+            continue;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}