{
    "patch": "public String fixCode(String code) {\n    String fixed = code.replaceAll(\"(?<!\\\\[)([+-]\\\\d+\\\\s*\\\\+\\\\s*\\\\d+)(?!\\\\])\", \"($1)\");\n    fixed = fixed.replaceAll(\"\\\\[(\\\\d+)\\\\s*([+-])\\\\s*\\\\d+\\\\]\", \"[$1 $2 $2 $2 $2 $2 $2]\");\n    fixed = fixed.replaceAll(\"(?<=for\\\\(.*);\\\\s*)(\\\\s+)(?=;)\", \"\");\n    fixed = normalizeForLoop(fixed);\n    return fixed;\n}\n\npublic String normalizeForLoop(String code) {\n    String regex = \"(for\\\\s*\\\\(.*?\\\\))\";\n    Pattern forLoopPattern = Pattern.compile(regex, Pattern.DOTALL);\n    Matcher forLoopMatcher = forLoopPattern.matcher(code);\n    StringBuffer sb = new StringBuffer();\n    while (forLoopMatcher.find()) {\n        String forLoopMatch = forLoopMatcher.group(1);\n        String normalized = fixInOperatorInForLoop(forLoopMatch);\n        forLoopMatcher.appendReplacement(sb, Matcher.quoteReplacement(normalized));\n    }\n    forLoopMatcher.appendTail(sb);\n    return sb.toString();\n}\n\npublic String fixInOperatorInForLoop(String forLoop) {\n    String regex = \"(?<=for\\\\s*\\\\(.*?;\\\\s*)((?:\\\\w+\\\\s+)?in\\\\s+\\\\w+)\\\\s*(?=.*?\\\\))\";\n    Pattern inOperatorPattern = Pattern.compile(regex, Pattern.DOTALL);\n    Matcher inOperatorMatcher = inOperatorPattern.matcher(forLoop);\n    StringBuffer sb = new StringBuffer();\n    if (inOperatorMatcher.find()) {\n        String inOperatorMatch = inOperatorMatcher.group(1);         \n        String fixedInOperator = inOperatorMatch.replaceAll(\"\\\\s+in\\\\s+\", \" \");\n        inOperatorMatcher.appendReplacement(sb, Matcher.quoteReplacement(fixedInOperator));\n    }\n    inOperatorMatcher.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..296cb7bf 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,41 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String fixed = code.replaceAll(\"(?<!\\\\[)([+-]\\\\d+\\\\s*\\\\+\\\\s*\\\\d+)(?!\\\\])\", \"($1)\");\n+    fixed = fixed.replaceAll(\"\\\\[(\\\\d+)\\\\s*([+-])\\\\s*\\\\d+\\\\]\", \"[$1 $2 $2 $2 $2 $2 $2]\");\n+    fixed = fixed.replaceAll(\"(?<=for\\\\(.*);\\\\s*)(\\\\s+)(?=;)\", \"\");\n+    fixed = normalizeForLoop(fixed);\n+    return fixed;\n+}\n+\n+public String normalizeForLoop(String code) {\n+    String regex = \"(for\\\\s*\\\\(.*?\\\\))\";\n+    Pattern forLoopPattern = Pattern.compile(regex, Pattern.DOTALL);\n+    Matcher forLoopMatcher = forLoopPattern.matcher(code);\n+    StringBuffer sb = new StringBuffer();\n+    while (forLoopMatcher.find()) {\n+        String forLoopMatch = forLoopMatcher.group(1);\n+        String normalized = fixInOperatorInForLoop(forLoopMatch);\n+        forLoopMatcher.appendReplacement(sb, Matcher.quoteReplacement(normalized));\n+    }\n+    forLoopMatcher.appendTail(sb);\n+    return sb.toString();\n+}\n+\n+public String fixInOperatorInForLoop(String forLoop) {\n+    String regex = \"(?<=for\\\\s*\\\\(.*?;\\\\s*)((?:\\\\w+\\\\s+)?in\\\\s+\\\\w+)\\\\s*(?=.*?\\\\))\";\n+    Pattern inOperatorPattern = Pattern.compile(regex, Pattern.DOTALL);\n+    Matcher inOperatorMatcher = inOperatorPattern.matcher(forLoop);\n+    StringBuffer sb = new StringBuffer();\n+    if (inOperatorMatcher.find()) {\n+        String inOperatorMatch = inOperatorMatcher.group(1);         \n+        String fixedInOperator = inOperatorMatch.replaceAll(\"\\\\s+in\\\\s+\", \" \");\n+        inOperatorMatcher.appendReplacement(sb, Matcher.quoteReplacement(fixedInOperator));\n+    }\n+    inOperatorMatcher.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}