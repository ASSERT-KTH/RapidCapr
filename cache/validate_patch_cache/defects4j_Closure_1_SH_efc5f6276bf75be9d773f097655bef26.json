{
    "patch": "    \n    // For setter methods in object literals, don't remove parameters.\n    if (NodeUtil.isObjectLitKey(function.getParent())) {\n      Node value = function.getFirstChild();\n      if (value != null) {\n        if (Token.GETTER_DEF.equals(value.getToken())\n            || Token.SETTER_DEF.equals(value.getToken())) {\n          return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b73078c0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    // For setter methods in object literals, don't remove parameters.\n+    if (NodeUtil.isObjectLitKey(function.getParent())) {\n+      Node value = function.getFirstChild();\n+      if (value != null) {\n+        if (Token.GETTER_DEF.equals(value.getToken())\n+            || Token.SETTER_DEF.equals(value.getToken())) {\n+          return;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}