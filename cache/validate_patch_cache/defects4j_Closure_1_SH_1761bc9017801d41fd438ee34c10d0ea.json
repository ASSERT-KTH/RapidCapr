{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\n\n// For setter methods in object literals, don't remove parameters.\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // From the last parameter, work backwards to the first parameter looking\n  // for unused parameters.  Remove the parameters iff they have no side-effects.\n  // If we see a side-effect, then we know it is doing something useful\n  // and we stop removing parameters.\n  Node firstArg = argList.getFirstChild();\n  Node lastArg = argList.getLastChild();\n  while (lastArg != null && lastArg != firstArg) {\n    if (isRemovableParam(lastArg, referenced, fnScope)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n      lastArg = argList.getLastChild();\n      continue;\n    }\n    break;\n  }\n  if (lastArg != null && isRemovableParam(lastArg, referenced, fnScope)) {\n    argList.removeChild(lastArg);\n    compiler.reportCodeChange();\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fd0337ab 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+\n+// For setter methods in object literals, don't remove parameters.\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // From the last parameter, work backwards to the first parameter looking\n+  // for unused parameters.  Remove the parameters iff they have no side-effects.\n+  // If we see a side-effect, then we know it is doing something useful\n+  // and we stop removing parameters.\n+  Node firstArg = argList.getFirstChild();\n+  Node lastArg = argList.getLastChild();\n+  while (lastArg != null && lastArg != firstArg) {\n+    if (isRemovableParam(lastArg, referenced, fnScope)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+      lastArg = argList.getLastChild();\n+      continue;\n+    }\n+    break;\n+  }\n+  if (lastArg != null && isRemovableParam(lastArg, referenced, fnScope)) {\n+    argList.removeChild(lastArg);\n+    compiler.reportCodeChange();\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}