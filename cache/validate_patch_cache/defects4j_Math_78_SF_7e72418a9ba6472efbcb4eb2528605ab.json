{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.DerivativeException;\nimport org.apache.commons.math3.exception.EventException;\nimport org.apache.commons.math3.exception.FunctionEvaluationException;\nimport org.apache.commons.math3.optim.MaxEval;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;\nimport org.apache.commons.math3.optim.univariate.BrentOptimizer;\nimport org.apache.commons.math3.ode.events.EventHandler;\nimport org.apache.commons.math3.ode.sampling.StepHandler;\nimport org.apache.commons.math3.ode.sampling.StepInterpolator;\nimport org.apache.commons.math3.ode.nonstiff.StepProblem;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class EventState implements StepHandler {\n\n    private final EventHandler handler;\n    private final double maxCheckInterval;\n    private final double convergence;\n    private final int maxIterationCount;\n    private final double rootBracketingTolerance;\n\n    private boolean forward;\n    private double t0;\n    private double g0;\n    private boolean g0Positive;\n    private boolean increasing;\n    private double previousEventTime;\n    private boolean pendingEvent;\n    private double pendingEventTime;\n\n    public EventState(final EventHandler handler, final double maxCheckInterval,\n                      final double convergence,\n                      final int maxIterationCount, final double rootBracketingTolerance) {\n        this.handler                = handler;\n        this.maxCheckInterval       = maxCheckInterval;\n        this.convergence            = convergence;\n        this.maxIterationCount      = maxIterationCount;\n        this.rootBracketingTolerance = rootBracketingTolerance;\n    }\n\n    public void reset(final double t, final double[] y, final boolean forward)\n        throws DerivativeException {\n        t0 = t;\n        g0 = handler.g(t, y);\n        g0Positive = g0 >= 0;\n        pendingEvent          = false;\n        pendingEventTime      = Double.NaN;\n        previousEventTime     = Double.NaN;\n        increasing            = true;\n        this.forward          = forward;\n    }\n\n    public void handleStep(final StepInterpolator interpolator, final boolean isLast)\n        throws DerivativeException, EventException {\n        // find all events that occurred during the last step\n        while (true) {\n            final double t1 = interpolator.getCurrentTime();\n            if ((t1 - t0) <= 0.5 * maxCheckInterval) {\n                // we have not stepped over maxCheckInterval,\n                // we are going to use a simple endpoint test\n                final double dt = t1 - t0;\n                final double[] y = interpolator.getInterpolatedState(0);\n                final double g1 = handler.g(t1, y);\n                if (g0Positive ^ (g1 >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = g1 >= g0;\n\n                    final double ga = increasing ? g0 : g1;\n                    final double gb = increasing ? g1 : g0;\n\n                    final UnivariateFunction f = new UnivariateFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                final double[] y = interpolator.getInterpolatedState((t - t0) / dt);\n                                return handler.g(t, y);\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentOptimizer optimizer = new BrentOptimizer(rootBracketingTolerance, convergence);\n                    optimizer.setMaximalIterationCount(maxIterationCount);\n                    double root = optimizer.optimize(new MaxEval(maxIterationCount),\n                                                      new UnivariateObjectiveFunction(f),\n                                                      increasing ? GoalType.MINIMIZE : GoalType.MAXIMIZE, ga, gb).getPoint();\n\n                    if (Double.isNaN(previousEventTime) || (FastMath.abs(root - previousEventTime) > 0.01 * convergence)) {\n                        pendingEvent = true;\n                        pendingEventTime = root;\n                        return;\n                    }\n                }\n                g0 = g1;\n                break;\n            }\n            // we have to use several steps to cover the whole interval\n            final double tEnd   = t0 + maxCheckInterval;\n            final StepProblem problemIntegrator = new StepProblem(StepProblemIntegrator.INSTANCE,\n                              (StepProblemIntegrator.INSTANCE instanceof FirstOrderIntegrator) ? 1 : 2);\n            problemIntegrator.addEventHandler(handler, convergence, maxIterationCount, rootBracketingTolerance);\n            problemIntegrator.setInitialCondition(interpolator.getInterpolatedState());\n            problemIntegrator.integrate(new BaseAbstractUnivariateIntegrator.IntervalAdapter(t0, tEnd));\n            final double[]    y     = problemIntegrator.getCurrentState();\n            final StepInterpolator subInterpolator =\n                    problemIntegrator.getStepInterpolator().restrictStep(t0, y, tEnd);\n            final double       gEnd  = handler.g(tEnd, y);\n            if (g0Positive ^ (gEnd >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                // variation direction, with respect to the integration direction\n                increasing = gEnd >= g0;\n\n                final double ga = increasing ? g0 : gEnd;\n                final double gb = increasing ? gEnd : g0;\n\n                final UnivariateFunction f = new UnivariateFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            final double[] y = subInterpolator.getInterpolatedState((t - t0) / (tEnd - t0));\n                            return handler.g(t, y);\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentOptimizer optimizer = new BrentOptimizer(rootBracketingTolerance, convergence);\n                optimizer.setMaximalIterationCount(maxIterationCount);\n                double root = optimizer.optimize(new MaxEval(maxIterationCount),\n                                                  new UnivariateObjectiveFunction(f),\n                                                  increasing ? GoalType.MINIMIZE : GoalType.MAXIMIZE, ga, gb).getPoint();\n\n                if (Double.isNaN(previousEventTime) || (FastMath.abs(root - previousEventTime) > 0.01 * convergence)) {\n                    pendingEvent = true;\n                    pendingEventTime = root;\n                    return;\n                }\n            }\n            t0 = tEnd;\n            interpolator.reinitialize(subInterpolator, t0, y);\n            g0 = gEnd;\n        }\n        pendingEvent          = false;\n        pendingEventTime      = Double.NaN;\n        previousEventTime     = Double.NaN;\n    }\n\n    public boolean requiresDenseOutput() {\n        return true;\n    }\n\n    /**\n     * Get the state of convergence for the last handled step.\n     * The i<sup>th</sup> element of the returned boolean array indicates\n     * if convergence was achieved for the i<sup>th</sup> event.\n     * @return state of convergence for the last handled step,\n     * null if {@link #reset(double,double[],boolean) reset}\n     * has not been called yet\n     */\n    public boolean[] getConverged() {\n        return handler.getConvergedEvents();\n    }\n\n    public void pushTime(final double t) {\n        previousEventTime     = t;\n    }\n\n    /**\n     * Check if an event is pending.\n     * An event is considered as pending if it has been detected during\n     * the last successful step but the event handler has not been called yet.\n     * @return true if an event is pending\n     */\n    public boolean isPendingEvent() {\n        return pendingEvent;\n    }\n\n    /**\n     * Get the time at which the pending event will occur.\n     * @return time of the pending event\n     */\n    public double getPendingEventTime() {\n        return pendingEventTime;\n    }\n\n    /**\n     * Get the convergence threshold below which a step is considered to have converged.\n     * @return convergence threshold\n     */\n    public double getConvergence() {\n        return convergence;\n    }\n\n    /** Univariate function as an objective function. */\n    private class UnivariateObjectiveFunction extends ObjectiveFunction {\n        private final UnivariateFunction f;\n        public UnivariateObjectiveFunction(final UnivariateFunction f) {\n            super(f);\n            this.f = f;\n        }\n        @Override\n        public double value(final double x) {\n            try {\n                return f.value(x);\n            } catch (FunctionEvaluationException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..4a0f1bd3b 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,47 +164,85 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws DerivativeException, EventException, ConvergenceException {\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.DerivativeException;\n+import org.apache.commons.math3.exception.EventException;\n+import org.apache.commons.math3.exception.FunctionEvaluationException;\n+import org.apache.commons.math3.optim.MaxEval;\n+import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\n+import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;\n+import org.apache.commons.math3.optim.univariate.BrentOptimizer;\n+import org.apache.commons.math3.ode.events.EventHandler;\n+import org.apache.commons.math3.ode.sampling.StepHandler;\n+import org.apache.commons.math3.ode.sampling.StepInterpolator;\n+import org.apache.commons.math3.ode.nonstiff.StepProblem;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class EventState implements StepHandler {\n \n-        try {\n+    private final EventHandler handler;\n+    private final double maxCheckInterval;\n+    private final double convergence;\n+    private final int maxIterationCount;\n+    private final double rootBracketingTolerance;\n \n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n+    private boolean forward;\n+    private double t0;\n+    private double g0;\n+    private boolean g0Positive;\n+    private boolean increasing;\n+    private double previousEventTime;\n+    private boolean pendingEvent;\n+    private double pendingEventTime;\n \n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n+    public EventState(final EventHandler handler, final double maxCheckInterval,\n+                      final double convergence,\n+                      final int maxIterationCount, final double rootBracketingTolerance) {\n+        this.handler                = handler;\n+        this.maxCheckInterval       = maxCheckInterval;\n+        this.convergence            = convergence;\n+        this.maxIterationCount      = maxIterationCount;\n+        this.rootBracketingTolerance = rootBracketingTolerance;\n+    }\n \n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+    public void reset(final double t, final double[] y, final boolean forward)\n+        throws DerivativeException {\n+        t0 = t;\n+        g0 = handler.g(t, y);\n+        g0Positive = g0 >= 0;\n+        pendingEvent          = false;\n+        pendingEventTime      = Double.NaN;\n+        previousEventTime     = Double.NaN;\n+        increasing            = true;\n+        this.forward          = forward;\n+    }\n \n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n+    public void handleStep(final StepInterpolator interpolator, final boolean isLast)\n+        throws DerivativeException, EventException {\n+        // find all events that occurred during the last step\n+        while (true) {\n+            final double t1 = interpolator.getCurrentTime();\n+            if ((t1 - t0) <= 0.5 * maxCheckInterval) {\n+                // we have not stepped over maxCheckInterval,\n+                // we are going to use a simple endpoint test\n+                final double dt = t1 - t0;\n+                final double[] y = interpolator.getInterpolatedState(0);\n+                final double g1 = handler.g(t1, y);\n+                if (g0Positive ^ (g1 >= 0)) {\n                     // there is a sign change: an event is expected during this step\n \n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n                     // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n+                    increasing = g1 >= g0;\n+\n+                    final double ga = increasing ? g0 : g1;\n+                    final double gb = increasing ? g1 : g0;\n \n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n+                    final UnivariateFunction f = new UnivariateFunction() {\n                         public double value(final double t) throws FunctionEvaluationException {\n                             try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n+                                final double[] y = interpolator.getInterpolatedState((t - t0) / dt);\n+                                return handler.g(t, y);\n                             } catch (DerivativeException e) {\n                                 throw new FunctionEvaluationException(e, t);\n                             } catch (EventException e) {\n@@ -212,56 +250,139 @@ public class EventState {\n                             }\n                         }\n                     };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n+                    final BrentOptimizer optimizer = new BrentOptimizer(rootBracketingTolerance, convergence);\n+                    optimizer.setMaximalIterationCount(maxIterationCount);\n+                    double root = optimizer.optimize(new MaxEval(maxIterationCount),\n+                                                      new UnivariateObjectiveFunction(f),\n+                                                      increasing ? GoalType.MINIMIZE : GoalType.MAXIMIZE, ga, gb).getPoint();\n+\n+                    if (Double.isNaN(previousEventTime) || (FastMath.abs(root - previousEventTime) > 0.01 * convergence)) {\n+                        pendingEvent = true;\n                         pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n+                        return;\n+                    }\n+                }\n+                g0 = g1;\n+                break;\n+            }\n+            // we have to use several steps to cover the whole interval\n+            final double tEnd   = t0 + maxCheckInterval;\n+            final StepProblem problemIntegrator = new StepProblem(StepProblemIntegrator.INSTANCE,\n+                              (StepProblemIntegrator.INSTANCE instanceof FirstOrderIntegrator) ? 1 : 2);\n+            problemIntegrator.addEventHandler(handler, convergence, maxIterationCount, rootBracketingTolerance);\n+            problemIntegrator.setInitialCondition(interpolator.getInterpolatedState());\n+            problemIntegrator.integrate(new BaseAbstractUnivariateIntegrator.IntervalAdapter(t0, tEnd));\n+            final double[]    y     = problemIntegrator.getCurrentState();\n+            final StepInterpolator subInterpolator =\n+                    problemIntegrator.getStepInterpolator().restrictStep(t0, y, tEnd);\n+            final double       gEnd  = handler.g(tEnd, y);\n+            if (g0Positive ^ (gEnd >= 0)) {\n+                // there is a sign change: an event is expected during this step\n+\n+                // variation direction, with respect to the integration direction\n+                increasing = gEnd >= g0;\n+\n+                final double ga = increasing ? g0 : gEnd;\n+                final double gb = increasing ? gEnd : g0;\n+\n+                final UnivariateFunction f = new UnivariateFunction() {\n+                    public double value(final double t) throws FunctionEvaluationException {\n+                        try {\n+                            final double[] y = subInterpolator.getInterpolatedState((t - t0) / (tEnd - t0));\n+                            return handler.g(t, y);\n+                        } catch (DerivativeException e) {\n+                            throw new FunctionEvaluationException(e, t);\n+                        } catch (EventException e) {\n+                            throw new FunctionEvaluationException(e, t);\n                         }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                };\n+                final BrentOptimizer optimizer = new BrentOptimizer(rootBracketingTolerance, convergence);\n+                optimizer.setMaximalIterationCount(maxIterationCount);\n+                double root = optimizer.optimize(new MaxEval(maxIterationCount),\n+                                                  new UnivariateObjectiveFunction(f),\n+                                                  increasing ? GoalType.MINIMIZE : GoalType.MAXIMIZE, ga, gb).getPoint();\n+\n+                if (Double.isNaN(previousEventTime) || (FastMath.abs(root - previousEventTime) > 0.01 * convergence)) {\n+                    pendingEvent = true;\n+                    pendingEventTime = root;\n+                    return;\n                 }\n-\n             }\n+            t0 = tEnd;\n+            interpolator.reinitialize(subInterpolator, t0, y);\n+            g0 = gEnd;\n+        }\n+        pendingEvent          = false;\n+        pendingEventTime      = Double.NaN;\n+        previousEventTime     = Double.NaN;\n+    }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+    public boolean requiresDenseOutput() {\n+        return true;\n+    }\n+\n+    /**\n+     * Get the state of convergence for the last handled step.\n+     * The i<sup>th</sup> element of the returned boolean array indicates\n+     * if convergence was achieved for the i<sup>th</sup> event.\n+     * @return state of convergence for the last handled step,\n+     * null if {@link #reset(double,double[],boolean) reset}\n+     * has not been called yet\n+     */\n+    public boolean[] getConverged() {\n+        return handler.getConvergedEvents();\n+    }\n+\n+    public void pushTime(final double t) {\n+        previousEventTime     = t;\n+    }\n+\n+    /**\n+     * Check if an event is pending.\n+     * An event is considered as pending if it has been detected during\n+     * the last successful step but the event handler has not been called yet.\n+     * @return true if an event is pending\n+     */\n+    public boolean isPendingEvent() {\n+        return pendingEvent;\n+    }\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n+    /**\n+     * Get the time at which the pending event will occur.\n+     * @return time of the pending event\n+     */\n+    public double getPendingEventTime() {\n+        return pendingEventTime;\n+    }\n+\n+    /**\n+     * Get the convergence threshold below which a step is considered to have converged.\n+     * @return convergence threshold\n+     */\n+    public double getConvergence() {\n+        return convergence;\n+    }\n+\n+    /** Univariate function as an objective function. */\n+    private class UnivariateObjectiveFunction extends ObjectiveFunction {\n+        private final UnivariateFunction f;\n+        public UnivariateObjectiveFunction(final UnivariateFunction f) {\n+            super(f);\n+            this.f = f;\n+        }\n+        @Override\n+        public double value(final double x) {\n+            try {\n+                return f.value(x);\n+            } catch (FunctionEvaluationException e) {\n+                throw new RuntimeException(e);\n             }\n-            throw new EventException(e);\n         }\n-\n     }\n \n+}\n+\n     /** Get the occurrence time of the event triggered in the current\n      * step.\n      * @return occurrence time of the event triggered in the current",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}