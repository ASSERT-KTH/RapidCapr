{
    "patch": "public static double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[] probabilities = new double[M];\n    double[] tempProbabilities = new double[M];\n\n    // initialize probabilities array to genotypeProbabilities\n    for (int i = 0; i < M; i++) {\n        probabilities[i] = genotypeProbabilities[i];\n    }\n\n    // perform iterations of selfing\n    for (int i = 0; i < D; i++) {\n        for (int j = 0; j < M; j++) {\n            for (int k = 0; k < M; k++) {\n                int dominant = getDominant(j, k, M);\n                tempProbabilities[dominant] += probabilities[j] * genotypeProbabilities[k];\n            }\n        }\n\n        // swap probabilities and tempProbabilities arrays\n        double[] swap = probabilities;\n        probabilities = tempProbabilities;\n        tempProbabilities = swap;\n        Arrays.fill(tempProbabilities, 0);\n    }\n\n    // calculate result array\n    double[] result = new double[N + 1];\n\n    for (int i = 0; i < M; i++) {\n        result[populationCount(i)] += probabilities[i];\n    }\n\n    for (int i = 0; i <= N; i++) {\n        result[i] /= Math.pow(M, D);\n    }\n\n    return result;\n}\n\nprivate static int getDominant(int i, int j, int M) {\n    if (i > j) {\n        return getDominant(j, i, M);\n    } else {\n        return (M * (M + 1) / 2) - (M - i) * (M - i + 1) / 2 + j - i;\n    }\n}\n\nprivate static int populationCount(int i) {\n    int count = 0;\n\n    while (i > 0) {\n        count += i & 1;\n        i >>>= 1;\n    }\n\n    return count;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}