{
    "patch": "        BasicBlock declBlock = maybeDecl.getBasicBlock();\n        for (BasicBlock block = maybeInit.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.equals(declBlock)) {\n            return maybeDecl;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..8dc9010b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        BasicBlock declBlock = maybeDecl.getBasicBlock();\n+        for (BasicBlock block = maybeInit.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.equals(declBlock)) {\n+            return maybeDecl;\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}