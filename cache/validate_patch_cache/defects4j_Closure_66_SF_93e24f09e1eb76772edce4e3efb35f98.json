{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    int total = 0;\n    int typed = 0;\n    Iterator<?> keys = jsonObject.keys();\n    while (keys.hasNext()) {\n        String key = (String) keys.next();\n        if (jsonObject.get(key) instanceof JSONObject) {\n            JSONObject innerObject = (JSONObject) jsonObject.get(key);\n            total += innerObject.getInt(\"total\");\n            typed += innerObject.getInt(\"typed\");\n        }\n    }\n    return (typed * 100.0) / total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6cc3a300 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    int total = 0;\n+    int typed = 0;\n+    Iterator<?> keys = jsonObject.keys();\n+    while (keys.hasNext()) {\n+        String key = (String) keys.next();\n+        if (jsonObject.get(key) instanceof JSONObject) {\n+            JSONObject innerObject = (JSONObject) jsonObject.get(key);\n+            total += innerObject.getInt(\"total\");\n+            typed += innerObject.getInt(\"typed\");\n+        }\n+    }\n+    return (typed * 100.0) / total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}