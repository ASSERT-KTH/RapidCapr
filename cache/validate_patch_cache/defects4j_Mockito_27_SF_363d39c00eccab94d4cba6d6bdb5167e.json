{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        \n        if (mock instanceof Class) {\n            Class<?> mockClass = (Class<?>) mock;\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(mockClass);\n            enhancer.setCallback(newFilter);\n            mock = enhancer.create();\n        } else if (mock instanceof Factory) {\n            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n        } else {\n            ((Mock) mock).setInterceptor(newFilter);\n        }\n\n        setMockHandler(mock, newMockHandler);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..22986ecc1 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,23 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        \n+        if (mock instanceof Class) {\n+            Class<?> mockClass = (Class<?>) mock;\n+            Enhancer enhancer = new Enhancer();\n+            enhancer.setSuperclass(mockClass);\n+            enhancer.setCallback(newFilter);\n+            mock = enhancer.create();\n+        } else if (mock instanceof Factory) {\n+            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+        } else {\n+            ((Mock) mock).setInterceptor(newFilter);\n+        }\n+\n+        setMockHandler(mock, newMockHandler);\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}