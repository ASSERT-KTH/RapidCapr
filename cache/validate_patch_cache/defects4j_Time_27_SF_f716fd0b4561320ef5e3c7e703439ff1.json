{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    } else if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(null, null);\n    }\n    Object firstObject = elementPairs.get(0);\n    if (firstObject instanceof Separator) {\n        Separator sep = (Separator) firstObject;\n        List<Object> subList = elementPairs.subList(1, elementPairs.size());\n        PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    } else if (elementPairs.size() == 1) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    } else {\n        int mid = elementPairs.size() / 2;\n        List<Object> firstHalf = elementPairs.subList(0, mid);\n        List<Object> secondHalf = elementPairs.subList(mid, elementPairs.size());\n        PeriodFormatter first = toFormatter(firstHalf, notPrinter, notParser);\n        PeriodFormatter second = toFormatter(secondHalf, notPrinter, notParser);\n        return new PeriodFormatter(\n                new Composite(first.getPrinter(), second.getPrinter()),\n                new Composite(first.getParser(), second.getParser()));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c0b9bf1e 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,20 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    } else if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    Object firstObject = elementPairs.get(0);\n+    if (firstObject instanceof Separator) {\n+        Separator sep = (Separator) firstObject;\n+        List<Object> subList = elementPairs.subList(1, elementPairs.size());\n+        PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    } else if (elementPairs.size() == 1) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -810,7 +813,17 @@ public class PeriodFormatterBuilder {\n         } else {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+    } else {\n+        int mid = elementPairs.size() / 2;\n+        List<Object> firstHalf = elementPairs.subList(0, mid);\n+        List<Object> secondHalf = elementPairs.subList(mid, elementPairs.size());\n+        PeriodFormatter first = toFormatter(firstHalf, notPrinter, notParser);\n+        PeriodFormatter second = toFormatter(secondHalf, notPrinter, notParser);\n+        return new PeriodFormatter(\n+                new Composite(first.getPrinter(), second.getPrinter()),\n+                new Composite(first.getParser(), second.getParser()));\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: constructor Composite in class Composite cannot be applied to given types;",
    "test_result": "ERROR"
}