{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n\n    // If there are no bounds, register the type variable itself and return\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(typeVariable);\n        return;\n    }\n\n    // Otherwise, check the bounds\n    boolean hasNonObjectBound = false;\n    for (Type bound : bounds) {\n        if (bound != Object.class) {\n            hasNonObjectBound = true;\n\n            if (bound instanceof TypeVariable) {\n                // If a bound is a type variable, read its type variables recursively\n                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n                if (actualTypeArg != null) {\n                    registerTypeVariablesOn(actualTypeArg);\n                } else {\n                    readTypeVariable(typeVar);\n                }\n            } else {\n                // Otherwise, register the bound itself\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n\n    // If there are no non-Object bounds, register the type variable itself\n    if (!hasNonObjectBound) {\n        registerTypeVariablesOn(typeVariable);\n    }\n}\n\nprivate void readTypeVariable(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n\n    // If there are no bounds, register the type variable itself and return\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(typeVariable);\n        return;\n    }\n\n    // Otherwise, check the bounds\n    boolean hasNonObjectBound = false;\n    for (Type bound : bounds) {\n        if (bound != Object.class) {\n            hasNonObjectBound = true;\n\n            if (bound instanceof TypeVariable) {\n                // If a bound is a type variable, read its type variables recursively\n                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n                if (actualTypeArg != null) {\n                    registerTypeVariablesOn(actualTypeArg);\n                } else {\n                    readTypeVariable(typeVar);\n                }\n            } else {\n                // Otherwise, register the bound itself\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n\n    // If there are no non-Object bounds, register the type variable itself\n    if (!hasNonObjectBound) {\n        registerTypeVariablesOn(typeVariable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..2a16c51e5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,80 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+\n+    // If there are no bounds, register the type variable itself and return\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(typeVariable);\n+        return;\n+    }\n+\n+    // Otherwise, check the bounds\n+    boolean hasNonObjectBound = false;\n+    for (Type bound : bounds) {\n+        if (bound != Object.class) {\n+            hasNonObjectBound = true;\n+\n+            if (bound instanceof TypeVariable) {\n+                // If a bound is a type variable, read its type variables recursively\n+                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n+                if (actualTypeArg != null) {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                } else {\n+                    readTypeVariable(typeVar);\n+                }\n+            } else {\n+                // Otherwise, register the bound itself\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+\n+    // If there are no non-Object bounds, register the type variable itself\n+    if (!hasNonObjectBound) {\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+}\n+\n+private void readTypeVariable(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+\n+    // If there are no bounds, register the type variable itself and return\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(typeVariable);\n+        return;\n+    }\n+\n+    // Otherwise, check the bounds\n+    boolean hasNonObjectBound = false;\n+    for (Type bound : bounds) {\n+        if (bound != Object.class) {\n+            hasNonObjectBound = true;\n+\n+            if (bound instanceof TypeVariable) {\n+                // If a bound is a type variable, read its type variables recursively\n+                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n+                if (actualTypeArg != null) {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                } else {\n+                    readTypeVariable(typeVar);\n+                }\n+            } else {\n+                // Otherwise, register the bound itself\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+\n+    // If there are no non-Object bounds, register the type variable itself\n+    if (!hasNonObjectBound) {\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}