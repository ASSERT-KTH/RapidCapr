{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  // Only allow declarations of NAMEs and qualified names.\n  checkState(NodeUtil.isName(n) || NodeUtil.isGetProp(n));\n  checkState(NodeUtil.isFunctionBlock(parent) || NodeUtil.isVarDeclaration(parent)\n      || NodeUtil.isCatchBlock(parent) || NodeUtil.isFunctionExpression(parent)\n      || NodeUtil.isStringKey(parent) && NodeUtil.isObjLit(parent.getParent()));\n\n  boolean shouldDeclareOnGlobalThis = false;\n\n  if (NodeUtil.isName(n)) {\n    if (NodeUtil.isFunctionBlock(parent)) {\n      checkState(\n          !scope.isDeclaredLocally(n.getString(), false) || parent.getParent().isScript());\n    } else {\n      checkState(parent.getType() == Token.VAR || parent.getType() == Token.LET\n          || parent.getType() == Token.CONST || parent.getType() == Token.CATCH);\n      shouldDeclareOnGlobalThis =\n          scope.isGlobal() && n.isDeclaredTypeVar() && parent.getType() == Token.VAR;\n    }\n  } else {\n    // n is a qualified name.\n    checkState(NodeUtil.isGetProp(n));\n    Node root = NodeUtil.getRootOfQualifiedName(n);\n    checkState(NodeUtil.isName(root), root);\n    if (NodeUtil.isGetProp(root.getParent())) {\n      throw new IllegalStateException(\n          \"Should not be declaring a property of a qualified name: \" + n);\n    }\n    checkState(!scope.isDeclared(root.getString(), false), \"shouldn't already be declared\");\n  }\n  String varName = n.getQualifiedName();\n  checkNotNull(varName);\n  if (!inferred) {\n    setDeferredType(n, type);\n  }\n  CompilerInput input = compiler.getInput(sourceName);\n  boolean isExtern = input.isExtern();\n  if (NodeUtil.isName(n)) {\n    scope.declare(varName, n, type, input, inferred);\n  } else {\n    // We know that the root is a NAME.\n    Node root = NodeUtil.getRootOfQualifiedName(n);\n    Var var = scope.getVar(root.getString());\n    checkNotNull(var);\n    var.getScope().declare(varName, n, type, input, inferred);\n  }\n  if (shouldDeclareOnGlobalThis) {\n    ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n    if (inferred) {\n      globalThis.defineInferredProperty(varName, type == null\n          ? getNativeType(JSTypeNative.NO_TYPE)\n          : type, isExtern);\n    } else {\n      globalThis.defineDeclaredProperty(varName, type, isExtern);\n    }\n  }\n  if (shouldAddToLvalues(n, parent)) {\n    lvalues.add(n);\n    if (type != null && (type.isInterface() || type.isFunctionPrototypeType())) {\n      prototypeProperties.add(n.getQualifiedName());\n    }\n  }\n  if (NodeUtil.isFunctionExpression(parent)) {\n    functionNamesToInfer.add(n.getString());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..d7443c14 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,72 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n-\n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n-      }\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  // Only allow declarations of NAMEs and qualified names.\n+  checkState(NodeUtil.isName(n) || NodeUtil.isGetProp(n));\n+  checkState(NodeUtil.isFunctionBlock(parent) || NodeUtil.isVarDeclaration(parent)\n+      || NodeUtil.isCatchBlock(parent) || NodeUtil.isFunctionExpression(parent)\n+      || NodeUtil.isStringKey(parent) && NodeUtil.isObjLit(parent.getParent()));\n+\n+  boolean shouldDeclareOnGlobalThis = false;\n+\n+  if (NodeUtil.isName(n)) {\n+    if (NodeUtil.isFunctionBlock(parent)) {\n+      checkState(\n+          !scope.isDeclaredLocally(n.getString(), false) || parent.getParent().isScript());\n+    } else {\n+      checkState(parent.getType() == Token.VAR || parent.getType() == Token.LET\n+          || parent.getType() == Token.CONST || parent.getType() == Token.CATCH);\n+      shouldDeclareOnGlobalThis =\n+          scope.isGlobal() && n.isDeclaredTypeVar() && parent.getType() == Token.VAR;\n     }\n+  } else {\n+    // n is a qualified name.\n+    checkState(NodeUtil.isGetProp(n));\n+    Node root = NodeUtil.getRootOfQualifiedName(n);\n+    checkState(NodeUtil.isName(root), root);\n+    if (NodeUtil.isGetProp(root.getParent())) {\n+      throw new IllegalStateException(\n+          \"Should not be declaring a property of a qualified name: \" + n);\n+    }\n+    checkState(!scope.isDeclared(root.getString(), false), \"shouldn't already be declared\");\n+  }\n+  String varName = n.getQualifiedName();\n+  checkNotNull(varName);\n+  if (!inferred) {\n+    setDeferredType(n, type);\n+  }\n+  CompilerInput input = compiler.getInput(sourceName);\n+  boolean isExtern = input.isExtern();\n+  if (NodeUtil.isName(n)) {\n+    scope.declare(varName, n, type, input, inferred);\n+  } else {\n+    // We know that the root is a NAME.\n+    Node root = NodeUtil.getRootOfQualifiedName(n);\n+    Var var = scope.getVar(root.getString());\n+    checkNotNull(var);\n+    var.getScope().declare(varName, n, type, input, inferred);\n+  }\n+  if (shouldDeclareOnGlobalThis) {\n+    ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+    if (inferred) {\n+      globalThis.defineInferredProperty(varName, type == null\n+          ? getNativeType(JSTypeNative.NO_TYPE)\n+          : type, isExtern);\n+    } else {\n+      globalThis.defineDeclaredProperty(varName, type, isExtern);\n+    }\n+  }\n+  if (shouldAddToLvalues(n, parent)) {\n+    lvalues.add(n);\n+    if (type != null && (type.isInterface() || type.isFunctionPrototypeType())) {\n+      prototypeProperties.add(n.getQualifiedName());\n+    }\n+  }\n+  if (NodeUtil.isFunctionExpression(parent)) {\n+    functionNamesToInfer.add(n.getString());\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}