{
    "patch": "  String getReadableJSTypeName(Node n, boolean dereference) {\n    JSType type = getJSType(n).resolve();\n    if (n.isGetProp()) {\n      ObjectType objectType = type.dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null) {\n          FunctionType constr = objectType.getConstructor();\n          if (constr.isInterface()) {\n            objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n          } else {\n            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n              objectType = objectType.getImplicitPrototype();\n            }\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          ObjectType originalType = getJSType(n.getFirstChild()).dereference();\n          if (originalType != null && !originalType.isEquivalentTo(objectType)) {\n            String parentTypeName = getReadableJSTypeName(n.getFirstChild(), dereference);\n            if (parentTypeName != null) {\n              return parentTypeName + \".\" + propName;\n            }\n          }\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    if (type.isFunctionType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    }\n    \n    if (type.isInstanceType()) {\n      return type.toMaybeObjectType().toString();\n    }\n\n    return type.toString();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..82f24a86 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -722,24 +722,19 @@ class TypeValidator {\n    *     to an Object type, if possible.\n    */\n   String getReadableJSTypeName(Node n, boolean dereference) {\n-\n-    // The best type name is the actual type name.\n-\n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n+    JSType type = getJSType(n).resolve();\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+      ObjectType objectType = type.dereference();\n       if (objectType != null) {\n         String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n+        if (objectType.getConstructor() != null) {\n+          FunctionType constr = objectType.getConstructor();\n+          if (constr.isInterface()) {\n+            objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n+          } else {\n+            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+              objectType = objectType.getImplicitPrototype();\n+            }\n           }\n         }\n \n@@ -748,32 +743,41 @@ class TypeValidator {\n         if (objectType != null &&\n             (objectType.getConstructor() != null ||\n              objectType.isFunctionPrototypeType())) {\n+          ObjectType originalType = getJSType(n.getFirstChild()).dereference();\n+          if (originalType != null && !originalType.isEquivalentTo(objectType)) {\n+            String parentTypeName = getReadableJSTypeName(n.getFirstChild(), dereference);\n+            if (parentTypeName != null) {\n+              return parentTypeName + \".\" + propName;\n+            }\n+          }\n           return objectType.toString() + \".\" + propName;\n         }\n       }\n     }\n \n-    JSType type = getJSType(n);\n     if (dereference) {\n       ObjectType dereferenced = type.dereference();\n       if (dereferenced != null) {\n         type = dereferenced;\n       }\n     }\n-    if (type.isFunctionPrototypeType() ||\n+\n+    if (type.isFunctionType() ||\n         (type.toObjectType() != null &&\n          type.toObjectType().getConstructor() != null)) {\n       return type.toString();\n     }\n+\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n-    } else {\n-      return type.toString();\n     }\n+    \n+    if (type.isInstanceType()) {\n+      return type.toMaybeObjectType().toString();\n+    }\n+\n+    return type.toString();\n   }\n \n   /**",
    "result_reason": "error: method resolve in class JSType cannot be applied to given types;",
    "test_result": "ERROR"
}