{
    "patch": "        if (ref == getInitializingReference()) {\n          if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n            // If we are in the function boundary and the assignment was done\n            // during the declaration, then it's a one-time assignment.\n            return true;\n          }\n          if (ref.isVarDeclaration()) {\n            // If there are no more references to this variable, then it's a\n            // one-time assignment.\n            for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n              Reference nextRef = references.get(i);\n              if (nextRef.getName().equals(ref.getName())) {\n                return false;\n              }\n            }\n            return true;\n          }\n        } else if (block.isLoop) {\n          // loop assignment is not ok since it may execute multiple times\n          return false;\n        } else { // block.isFunction or other block type\n          // Continue traversing up the chain.\n          block = block.getParent();\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..88058711 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref == getInitializingReference()) {\n+          if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+            // If we are in the function boundary and the assignment was done\n+            // during the declaration, then it's a one-time assignment.\n+            return true;\n+          }\n+          if (ref.isVarDeclaration()) {\n+            // If there are no more references to this variable, then it's a\n+            // one-time assignment.\n+            for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n+              Reference nextRef = references.get(i);\n+              if (nextRef.getName().equals(ref.getName())) {\n+                return false;\n+              }\n+            }\n+            return true;\n+          }\n+        } else if (block.isLoop) {\n+          // loop assignment is not ok since it may execute multiple times\n+          return false;\n+        } else { // block.isFunction or other block type\n+          // Continue traversing up the chain.\n+          block = block.getParent();\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}