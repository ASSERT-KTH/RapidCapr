{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int[] newValues = partial.getValues();\n            newValues[fieldIndex] = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n            Chronology chrono = partial.getChronology();\n            try {\n                chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n            } catch (IllegalArgumentException ex) {\n                if (values[1] != 2 && values[2] != 29) {\n                    throw ex;\n                }\n                int monthEnd = chrono.dayOfMonth().getMaximumValue(newValues[0], newValues[1]);\n                if (values[2] > monthEnd) {\n                    newValues[2] = monthEnd;\n                }\n                long instant = chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n                LocalDate date = new LocalDate(instant, chrono);\n                if (date.getMonthOfYear() != newValues[1]) {\n                    newValues[2] = monthEnd;\n                    instant = chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n                }\n                return chrono.get(partial.withValues(newValues), instant);\n            }\n            long instant = chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n            return chrono.get(partial, add(instant, valueToAdd));\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..82942a64 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            int[] newValues = partial.getValues();\n+            newValues[fieldIndex] = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+            Chronology chrono = partial.getChronology();\n+            try {\n+                chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n+            } catch (IllegalArgumentException ex) {\n+                if (values[1] != 2 && values[2] != 29) {\n+                    throw ex;\n+                }\n+                int monthEnd = chrono.dayOfMonth().getMaximumValue(newValues[0], newValues[1]);\n+                if (values[2] > monthEnd) {\n+                    newValues[2] = monthEnd;\n+                }\n+                long instant = chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n+                LocalDate date = new LocalDate(instant, chrono);\n+                if (date.getMonthOfYear() != newValues[1]) {\n+                    newValues[2] = monthEnd;\n+                    instant = chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n+                }\n+                return chrono.get(partial.withValues(newValues), instant);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            long instant = chrono.getDateTimeMillis(newValues[0], newValues[1], newValues[2], 0);\n+            return chrono.get(partial, add(instant, valueToAdd));\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}