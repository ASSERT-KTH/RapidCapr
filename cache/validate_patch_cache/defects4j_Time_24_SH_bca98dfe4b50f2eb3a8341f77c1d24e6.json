{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            int index = e.getIllegalFieldValueIndex();\n            SavedField problemField = savedFields[index];\n            DateTimeField field = problemField.iField;\n            \n            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n            String error = e.getMessage();\n            if (error.startsWith(\"Value \")) {\n                error = \"Cannot parse \\\"\" + problemField.getText() + \"\\\": \" + error.substring(6);\n            }\n            \n            StringBuilder sb = new StringBuilder(85)\n                .append(\"Failed on input: \")\n                .append(problemField.getFieldName())\n                .append('=')\n                .append(problemField.getText());\n            \n            FormatUtils.appendUnpaddedInteger(sb, field.getMinimumValue());\n            sb.append('-');\n            FormatUtils.appendUnpaddedInteger(sb, field.getMaximumValue());\n            sb.append(')');\n            \n            error += \" for field \" + sb;\n            throw new IllegalFieldValueException(\n                    problemField.iField.getType(),\n                    error,\n                    e);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..41408d60 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            int index = e.getIllegalFieldValueIndex();\n+            SavedField problemField = savedFields[index];\n+            DateTimeField field = problemField.iField;\n+            \n+            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+            String error = e.getMessage();\n+            if (error.startsWith(\"Value \")) {\n+                error = \"Cannot parse \\\"\" + problemField.getText() + \"\\\": \" + error.substring(6);\n+            }\n+            \n+            StringBuilder sb = new StringBuilder(85)\n+                .append(\"Failed on input: \")\n+                .append(problemField.getFieldName())\n+                .append('=')\n+                .append(problemField.getText());\n+            \n+            FormatUtils.appendUnpaddedInteger(sb, field.getMinimumValue());\n+            sb.append('-');\n+            FormatUtils.appendUnpaddedInteger(sb, field.getMaximumValue());\n+            sb.append(')');\n+            \n+            error += \" for field \" + sb;\n+            throw new IllegalFieldValueException(\n+                    problemField.iField.getType(),\n+                    error,\n+                    e);\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}