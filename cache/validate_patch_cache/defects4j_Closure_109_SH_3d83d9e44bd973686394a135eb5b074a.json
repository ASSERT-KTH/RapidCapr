{
    "patch": "  private Node parseContextTypeExpression(JsDocToken token) {\n    try {\n      // parse the type expression\n      Node typeExpression = parseTypeExpression(token);\n      if (typeExpression != null) {\n        return typeExpression;\n      }\n    } catch (Exception e) {\n      // Unable to parse type expression, fallback to parseTypeName()\n    }\n    return parseTypeName(token);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..e9b9761b 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,18 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+  private Node parseContextTypeExpression(JsDocToken token) {\n+    try {\n+      // parse the type expression\n+      Node typeExpression = parseTypeExpression(token);\n+      if (typeExpression != null) {\n+        return typeExpression;\n+      }\n+    } catch (Exception e) {\n+      // Unable to parse type expression, fallback to parseTypeName()\n+    }\n+    return parseTypeName(token);\n+  }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}