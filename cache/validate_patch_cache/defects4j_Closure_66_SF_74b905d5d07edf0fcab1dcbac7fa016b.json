{
    "patch": "public double getTypedPercent(String json) {\n    double total = 0.0;\n    double typed = 0.0;\n\n    try {\n        JSONObject obj = new JSONObject(json);\n        JSONArray arr = obj.getJSONArray(\"items\");\n\n        for (int i = 0; i < arr.length(); i++) {\n            JSONObject item = arr.getJSONObject(i);\n            total++;\n            if (item.has(\"type\") && !item.getString(\"type\").equals(\"\")) {\n                typed++;\n            }\n        }\n\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n\n    if (total == 0) {\n        return 0.0;\n    } else {\n        return (typed * 100) / total;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..bb252fd5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    double total = 0.0;\n+    double typed = 0.0;\n+\n+    try {\n+        JSONObject obj = new JSONObject(json);\n+        JSONArray arr = obj.getJSONArray(\"items\");\n+\n+        for (int i = 0; i < arr.length(); i++) {\n+            JSONObject item = arr.getJSONObject(i);\n+            total++;\n+            if (item.has(\"type\") && !item.getString(\"type\").equals(\"\")) {\n+                typed++;\n+            }\n+        }\n+\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (total == 0) {\n+        return 0.0;\n+    } else {\n+        return (typed * 100) / total;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}