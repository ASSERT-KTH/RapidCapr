{
    "patch": "import org.mockito.cglib.proxy.Callback;\nimport org.mockito.cglib.proxy.Enhancer;\n\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    Enhancer enhancer = new Enhancer();\n    enhancer.setSuperclass(mock.getClass());\n    enhancer.setInterfaces(new Class[] { Factory.class });\n    enhancer.setCallbackType(MethodInterceptorFilter.class);\n    Class<?> proxyClass = enhancer.createClass();\n    MethodInterceptorFilter interceptor = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n    try {\n        Factory newMock = (Factory) proxyClass.newInstance();\n        ((Factory) mock).setCallback(0, new NoOp());\n        newMock.setCallback(0, interceptor);\n        Field field = FieldUtils.getField(Factory.class, \"CGLIB$CALLBACK_0\");\n        field.set(mock, ((Factory) newMock).getCallback(0));\n    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n        throw new RuntimeException(\"Error resetting mock\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..12bc80971 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Callback;\n+import org.mockito.cglib.proxy.Enhancer;\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    Enhancer enhancer = new Enhancer();\n+    enhancer.setSuperclass(mock.getClass());\n+    enhancer.setInterfaces(new Class[] { Factory.class });\n+    enhancer.setCallbackType(MethodInterceptorFilter.class);\n+    Class<?> proxyClass = enhancer.createClass();\n+    MethodInterceptorFilter interceptor = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+    try {\n+        Factory newMock = (Factory) proxyClass.newInstance();\n+        ((Factory) mock).setCallback(0, new NoOp());\n+        newMock.setCallback(0, interceptor);\n+        Field field = FieldUtils.getField(Factory.class, \"CGLIB$CALLBACK_0\");\n+        field.set(mock, ((Factory) newMock).getCallback(0));\n+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n+        throw new RuntimeException(\"Error resetting mock\", e);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}