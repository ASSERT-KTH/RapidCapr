{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n    double sum = 1.0 / a;\n    double term = sum;\n    while (Math.abs(term / sum) > 1.0E-15) {\n        term *= x / (a + sum);\n        sum += term;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    double cf = continueFraction(a, x);\n    return 1.0 / (1.0 + cf);\n}\n\npublic static double continueFraction(double a, double x) {\n    double small = 1.0e-50;\n    double h0 = 1.0;\n    double h1 = x + 1.0 - a;\n    double b = x + 1.0;\n    double d = 0.0;\n    int i;\n    for (i = 1; i < 1000; i++) {\n        double an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < small) {\n            d = small;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < small) {\n            c = small;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h0 = h1;\n        h1 = h1 * del - h0;\n        if (Math.abs(del - 1.0) < 3.0e-7) {\n            break;\n        }\n    }\n    if (i >= 1000) {\n        return Double.NaN;\n    } else {\n        return h1;\n    }\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0\n            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8cb632610 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,80 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    while (Math.abs(term / sum) > 1.0E-15) {\n+        term *= x / (a + sum);\n+        sum += term;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    double cf = continueFraction(a, x);\n+    return 1.0 / (1.0 + cf);\n+}\n+\n+public static double continueFraction(double a, double x) {\n+    double small = 1.0e-50;\n+    double h0 = 1.0;\n+    double h1 = x + 1.0 - a;\n+    double b = x + 1.0;\n+    double d = 0.0;\n+    int i;\n+    for (i = 1; i < 1000; i++) {\n+        double an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < small) {\n+            d = small;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < small) {\n+            c = small;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h0 = h1;\n+        h1 = h1 * del - h0;\n+        if (Math.abs(del - 1.0) < 3.0e-7) {\n+            break;\n+        }\n+    }\n+    if (i >= 1000) {\n+        return Double.NaN;\n+    } else {\n+        return h1;\n+    }\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0\n+            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}