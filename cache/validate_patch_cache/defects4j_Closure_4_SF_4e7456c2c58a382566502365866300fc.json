{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean wasResolved = isResolved();\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean isFullyResolved = isResolved();\n\n    if (!wasResolved && isFullyResolved) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    if (!resolved) {\n        resolved = resolveViaProperties(t, enclosing);\n        isFullyResolved = isResolved();  \n        \n        if (!wasResolved && isFullyResolved) {\n            super.resolveInternal(t, enclosing);\n            finishPropertyContinuations();\n            return registry.isLastGeneration() ? getReferencedType() : this;\n        }\n    }\n\n    if (!isFullyResolved) {\n        handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..f638b817 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,39 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean wasResolved = isResolved();\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    boolean isFullyResolved = isResolved();\n+\n+    if (!wasResolved && isFullyResolved) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (!resolved) {\n+        resolved = resolveViaProperties(t, enclosing);\n+        isFullyResolved = isResolved();  \n+        \n+        if (!wasResolved && isFullyResolved) {\n+            super.resolveInternal(t, enclosing);\n+            finishPropertyContinuations();\n+            return registry.isLastGeneration() ? getReferencedType() : this;\n+        }\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (!isFullyResolved) {\n+        handleTypeCycle(t);\n     }\n \n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}