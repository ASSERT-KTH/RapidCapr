{
    "patch": "if (ref == null || !ref.isSimpleAssignmentToName()) {\n  return false;\n}\n\nBasicBlock originalBlock = ref.getBasicBlock();\nif (block.isFunction) {\n  Reference initRef = getInitializingReference();\n  if (initRef != null && initRef.getBasicBlock().equals(block)) {\n    return ref.equals(initRef);\n  } else if (getOneAndOnlyAssignment() != null && getOneAndOnlyAssignment().getBasicBlock().equals(block)) {\n    return ref.equals(getOneAndOnlyAssignment());\n  }\n} else if (block.isLoop) {\n  while (block != null && !block.equals(originalBlock)) {\n    block = block.getParent();\n  }\n  return block != null;\n}\n\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2cae7ed5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == null || !ref.isSimpleAssignmentToName()) {\n+  return false;\n+}\n+\n+BasicBlock originalBlock = ref.getBasicBlock();\n+if (block.isFunction) {\n+  Reference initRef = getInitializingReference();\n+  if (initRef != null && initRef.getBasicBlock().equals(block)) {\n+    return ref.equals(initRef);\n+  } else if (getOneAndOnlyAssignment() != null && getOneAndOnlyAssignment().getBasicBlock().equals(block)) {\n+    return ref.equals(getOneAndOnlyAssignment());\n+  }\n+} else if (block.isLoop) {\n+  while (block != null && !block.equals(originalBlock)) {\n+    block = block.getParent();\n+  }\n+  return block != null;\n+}\n+\n+return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}