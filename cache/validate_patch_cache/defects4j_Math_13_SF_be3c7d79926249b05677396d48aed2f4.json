{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final double[] realEigenvalues = dec.getRealEigenvalues();\n        for (double eigenvalue : realEigenvalues) {\n            if (eigenvalue < 0) {\n                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n            } else if (eigenvalue == 0 && !Double.isNaN(eigenvalue)) {\n                // set very small eigenvalues to 0\n                eigenvalue = 0.0;\n            }\n        }\n        final RealMatrix v = dec.getV();\n        final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(MathArrays.sqrt(realEigenvalues));\n        final RealMatrix vT = v.transpose();\n        return v.multiply(d).multiply(vT);\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Matrix cannot be square rooted.\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..292644119 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final double[] realEigenvalues = dec.getRealEigenvalues();\n+        for (double eigenvalue : realEigenvalues) {\n+            if (eigenvalue < 0) {\n+                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+            } else if (eigenvalue == 0 && !Double.isNaN(eigenvalue)) {\n+                // set very small eigenvalues to 0\n+                eigenvalue = 0.0;\n+            }\n+        }\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(MathArrays.sqrt(realEigenvalues));\n+        final RealMatrix vT = v.transpose();\n+        return v.multiply(d).multiply(vT);\n+    } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Matrix cannot be square rooted.\", e);\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}