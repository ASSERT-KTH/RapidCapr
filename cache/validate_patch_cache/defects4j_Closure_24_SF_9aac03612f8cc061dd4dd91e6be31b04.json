{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        if (parent.isVar() || parent.isFunction()) {\n            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                String name = n.getFirstChild().getQualifiedName();\n                Var aliasVar = scope.getVar(name);\n                aliases.put(name, aliasVar);\n\n                if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                    transformation.addAlias(name, qualifiedName);\n                } else {\n                    // This is not actually an alias (it doesn't have an initializer).\n                    aliases.remove(name);\n                }\n            }\n        } else if (parent.getType() == Token.OBJECTLIT ||\n                (parent.getType() == Token.CALL && parent.getFirstChild().isGetProp())) {\n            // Check for shorthand properties.\n            Node left = parent.getFirstChild();\n            if (n == left) {\n                String name = n.getString();\n                String qualifiedName = left.getQualifiedName() + \".\" + name;\n                transformation.addAlias(name, qualifiedName);\n            }\n        } else if (v.isBleedingFunction()) {\n            // Bleeding functions already get a BAD_PARAMETERS error, so just do nothing.\n        } else {\n            // Private variables are not supported yet.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..a0fdd610 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,42 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+        if (parent.isVar() || parent.isFunction()) {\n+            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                String name = n.getFirstChild().getQualifiedName();\n+                Var aliasVar = scope.getVar(name);\n+                aliases.put(name, aliasVar);\n+\n+                if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                    transformation.addAlias(name, qualifiedName);\n+                } else {\n+                    // This is not actually an alias (it doesn't have an initializer).\n+                    aliases.remove(name);\n+                }\n+            }\n+        } else if (parent.getType() == Token.OBJECTLIT ||\n+                (parent.getType() == Token.CALL && parent.getFirstChild().isGetProp())) {\n+            // Check for shorthand properties.\n+            Node left = parent.getFirstChild();\n+            if (n == left) {\n+                String name = n.getString();\n+                String qualifiedName = left.getQualifiedName() + \".\" + name;\n+                transformation.addAlias(name, qualifiedName);\n+            }\n+        } else if (v.isBleedingFunction()) {\n+            // Bleeding functions already get a BAD_PARAMETERS error, so just do nothing.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            // Private variables are not supported yet.\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-        }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}