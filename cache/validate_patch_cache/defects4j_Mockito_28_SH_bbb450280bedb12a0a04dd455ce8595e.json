{
    "patch": "            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null) {\n                field.setAccessible(true);\n                try {\n                    if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                        field.set(fieldInstance, mockCandidate);\n                    } else {\n                        Object candidate = mockCandidateFilter.filterCandidate(mocks, field.getType(), field.getName(), field.getAnnotation(Qualifier.class)).thenInject();\n                        field.set(fieldInstance, candidate == null ? mockCandidate : candidate);\n                    }\n                    if (field.isAnnotationPresent(Qualifier.class)) {\n                        for (Field innerField : awaitingInjectionClazz.getDeclaredFields()) {\n                            if (innerField.getType().equals(field.getType())) {\n                                Qualifier innerQualifier = innerField.getAnnotation(Qualifier.class);\n                                if (innerQualifier != null && innerQualifier.value().equals(field.getAnnotation(Qualifier.class).value())) {\n                                    innerField.setAccessible(true);\n                                    innerField.set(fieldInstance, field.get(fieldInstance));\n                                } else if (innerQualifier == null && field.getAnnotation(Qualifier.class).value().isEmpty()) {\n                                    innerField.setAccessible(true);\n                                    innerField.set(fieldInstance, field.get(fieldInstance));\n                                }\n                            }\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..906e845b4 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,37 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null) {\n+                field.setAccessible(true);\n+                try {\n+                    if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                        field.set(fieldInstance, mockCandidate);\n+                    } else {\n+                        Object candidate = mockCandidateFilter.filterCandidate(mocks, field.getType(), field.getName(), field.getAnnotation(Qualifier.class)).thenInject();\n+                        field.set(fieldInstance, candidate == null ? mockCandidate : candidate);\n+                    }\n+                    if (field.isAnnotationPresent(Qualifier.class)) {\n+                        for (Field innerField : awaitingInjectionClazz.getDeclaredFields()) {\n+                            if (innerField.getType().equals(field.getType())) {\n+                                Qualifier innerQualifier = innerField.getAnnotation(Qualifier.class);\n+                                if (innerQualifier != null && innerQualifier.value().equals(field.getAnnotation(Qualifier.class).value())) {\n+                                    innerField.setAccessible(true);\n+                                    innerField.set(fieldInstance, field.get(fieldInstance));\n+                                } else if (innerQualifier == null && field.getAnnotation(Qualifier.class).value().isEmpty()) {\n+                                    innerField.setAccessible(true);\n+                                    innerField.set(fieldInstance, field.get(fieldInstance));\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}