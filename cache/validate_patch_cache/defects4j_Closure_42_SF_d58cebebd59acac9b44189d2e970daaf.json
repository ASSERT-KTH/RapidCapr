{
    "patch": "public static class TransformDispatcher implements TypeSafeDispatcher<Node> {\n\n    private final String sourceName;\n    private final ErrorReporter errorReporter;\n    private final RewriteJsx rewriteJsx;\n\n    public TransformDispatcher(String sourceName, ErrorReporter errorReporter, RewriteJsx rewriteJsx) {\n        this.sourceName = sourceName;\n        this.errorReporter = errorReporter;\n        this.rewriteJsx = rewriteJsx;\n    }\n\n    @Override\n    public Node processBooleanLiteral(BooleanLiteral literalNode) {\n        return new Node(literalNode.getType());\n    }\n\n    @Override\n    public Node processNumberLiteral(NumberLiteral literalNode) {\n        return new Node(literalNode.getType(), literalNode.getNumber());\n    }\n\n    @Override\n    public Node processStringLiteral(StringLiteral literalNode) {\n        return new Node(literalNode.getType(), literalNode.getValue());\n    }\n\n    @Override\n    public Node processNullLiteral(NullLiteral literalNode) {\n        return new Node(literalNode.getType());\n    }\n\n    @Override\n    public Node processThisLiteral(ThisLiteral literalNode) {\n        return new Node(literalNode.getType());\n    }\n\n    @Override\n    public Node processRegExpLiteral(RegExpLiteral literalNode) {\n        return new Node(literalNode.getType(), literalNode.getValue(), literalNode.getFlags());\n    }\n\n    @Override\n    public Node processName(Name nameNode) {\n        return new Node(Token.NAME, nameNode.getIdentifier());\n    }\n\n    private boolean isDirective(Node n) {\n        if (n == null) return false;\n\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n                n.getFirstChild().isString() &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    public Node processBlock(Block blockNode) {\n        return processGeneric(blockNode);\n    }\n\n    @Override\n    public Node processBreakStatement(BreakStatement statementNode) {\n        Node node = newNode(Token.BREAK);\n        if (statementNode.getBreakLabel() != null) {\n            Node labelName = transform(statementNode.getBreakLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    public Node processCatchClause(CatchClause clauseNode) {\n        AstNode catchVar = clauseNode.getVarName();\n        Node node = newNode(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            errorReporter.error(\n                    \"Catch clauses are not supported\",\n                    sourceName,\n                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n        }\n        node.addChildToBack(transformBlock(clauseNode.getBody()));\n        return node;\n    }\n\n    @Override\n    public Node processConditionalExpression(ConditionalExpression exprNode) {\n        return newNode(\n                Token.HOOK,\n                transform(exprNode.getTestExpression()),\n                transform(exprNode.getTrueExpression()),\n                transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    public Node processContinueStatement(ContinueStatement statementNode) {\n        Node node = newNode(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    public Node processDoLoop(DoLoop loopNode) {\n        return newNode(\n                Token.DO,\n                transformBlock(loopNode.getBody()),\n                transform(loopNode.getCondition()));\n    }\n\n    @Override\n    public Node processElementGet(ElementGet getNode) {\n        return newNode(\n                Token.GETELEM,\n                transform(getNode.getTarget()),\n                transform(getNode.getElement()));\n    }\n\n    @Override\n    public Node processEmptyExpression(EmptyExpression exprNode) {\n        Node node = newNode(Token.EMPTY);\n        return node;\n    }\n\n    @Override\n    public Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node node = newNode(transformTokenType(statementNode.getType()));\n        node.addChildToBack(transform(statementNode.getExpression()));\n        return node;\n    }\n\n    @Override\n    public Node processForInLoop(ForInLoop loopNode) {\n        Node iterChild = transform(loopNode.getIterator());\n        Node targetChild = transform(loopNode.getIteratedObject());\n        Node bodyChild = transformBlock(loopNode.getBody());\n        return new Node(Token.FORIN, iterChild, targetChild, bodyChild);\n    }\n\n// rest of the methods go here\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..bbd31164 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,154 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public static class TransformDispatcher implements TypeSafeDispatcher<Node> {\n+\n+    private final String sourceName;\n+    private final ErrorReporter errorReporter;\n+    private final RewriteJsx rewriteJsx;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    public TransformDispatcher(String sourceName, ErrorReporter errorReporter, RewriteJsx rewriteJsx) {\n+        this.sourceName = sourceName;\n+        this.errorReporter = errorReporter;\n+        this.rewriteJsx = rewriteJsx;\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    public Node processBooleanLiteral(BooleanLiteral literalNode) {\n+        return new Node(literalNode.getType());\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public Node processNumberLiteral(NumberLiteral literalNode) {\n+        return new Node(literalNode.getType(), literalNode.getNumber());\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    public Node processStringLiteral(StringLiteral literalNode) {\n+        return new Node(literalNode.getType(), literalNode.getValue());\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    public Node processNullLiteral(NullLiteral literalNode) {\n+        return new Node(literalNode.getType());\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public Node processThisLiteral(ThisLiteral literalNode) {\n+        return new Node(literalNode.getType());\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    public Node processRegExpLiteral(RegExpLiteral literalNode) {\n+        return new Node(literalNode.getType(), literalNode.getValue(), literalNode.getFlags());\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    public Node processName(Name nameNode) {\n+        return new Node(Token.NAME, nameNode.getIdentifier());\n+    }\n+\n+    private boolean isDirective(Node n) {\n+        if (n == null) return false;\n+\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+                n.getFirstChild().isString() &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    public Node processBlock(Block blockNode) {\n+        return processGeneric(blockNode);\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    public Node processBreakStatement(BreakStatement statementNode) {\n+        Node node = newNode(Token.BREAK);\n+        if (statementNode.getBreakLabel() != null) {\n+            Node labelName = transform(statementNode.getBreakLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    public Node processCatchClause(CatchClause clauseNode) {\n+        AstNode catchVar = clauseNode.getVarName();\n+        Node node = newNode(Token.CATCH, transform(catchVar));\n+        if (clauseNode.getCatchCondition() != null) {\n+            errorReporter.error(\n+                    \"Catch clauses are not supported\",\n+                    sourceName,\n+                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+        }\n+        node.addChildToBack(transformBlock(clauseNode.getBody()));\n+        return node;\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    @Override\n+    public Node processConditionalExpression(ConditionalExpression exprNode) {\n+        return newNode(\n+                Token.HOOK,\n+                transform(exprNode.getTestExpression()),\n+                transform(exprNode.getTrueExpression()),\n+                transform(exprNode.getFalseExpression()));\n+    }\n+\n+    @Override\n+    public Node processContinueStatement(ContinueStatement statementNode) {\n+        Node node = newNode(Token.CONTINUE);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processDoLoop(DoLoop loopNode) {\n+        return newNode(\n+                Token.DO,\n+                transformBlock(loopNode.getBody()),\n+                transform(loopNode.getCondition()));\n+    }\n+\n+    @Override\n+    public Node processElementGet(ElementGet getNode) {\n+        return newNode(\n+                Token.GETELEM,\n+                transform(getNode.getTarget()),\n+                transform(getNode.getElement()));\n     }\n \n+    @Override\n+    public Node processEmptyExpression(EmptyExpression exprNode) {\n+        Node node = newNode(Token.EMPTY);\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processExpressionStatement(ExpressionStatement statementNode) {\n+        Node node = newNode(transformTokenType(statementNode.getType()));\n+        node.addChildToBack(transform(statementNode.getExpression()));\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processForInLoop(ForInLoop loopNode) {\n+        Node iterChild = transform(loopNode.getIterator());\n+        Node targetChild = transform(loopNode.getIteratedObject());\n+        Node bodyChild = transformBlock(loopNode.getBody());\n+        return new Node(Token.FORIN, iterChild, targetChild, bodyChild);\n+    }\n+\n+// rest of the methods go here\n+}\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: class IRFactory.TransformDispatcher is already defined in class IRFactory",
    "test_result": "ERROR"
}