{
    "patch": "      if (name != null && name.getIdentifier() != null) {\n        node.addChildToBack(transform(name));\n      } else {\n        node.addChildToBack(newNode(Token.NAME));\n      }\n      Node lp = newNode(Token.LP);\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      lp.addChildToBack(newNode(Token.RP));\n      node.addChildToBack(lp);\n      node.addChildToBack(transform(functionNode.getBody()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..55d39fa3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,18 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      if (name != null && name.getIdentifier() != null) {\n+        node.addChildToBack(transform(name));\n+      } else {\n+        node.addChildToBack(newNode(Token.NAME));\n+      }\n+      Node lp = newNode(Token.LP);\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      lp.addChildToBack(newNode(Token.RP));\n+      node.addChildToBack(lp);\n+      node.addChildToBack(transform(functionNode.getBody()));\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}