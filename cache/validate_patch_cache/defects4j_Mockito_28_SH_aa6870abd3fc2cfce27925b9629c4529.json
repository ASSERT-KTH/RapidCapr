{
    "patch": "            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null) {\n                try {\n                    Object oldValue = field.get(fieldInstance);\n                    if (field.getType().isInstance(mockCandidate)) {\n                        field.setAccessible(true);\n                        field.set(fieldInstance, mockCandidate);\n                    } else {\n                        Class<?> fieldClass = field.getType();\n                        Object candidate = mockCandidateFilter.filterCandidate(mocks, fieldClass, field).thenInject();\n                        if (candidate != null) {\n                            field.setAccessible(true);\n                            field.set(fieldInstance, candidate);\n                        }\n                    }\n                    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                        innerField.setAccessible(true);\n                        if (innerField.get(mockCandidate) == oldValue) {\n                            innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..d6317e29a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,34 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null) {\n+                try {\n+                    Object oldValue = field.get(fieldInstance);\n+                    if (field.getType().isInstance(mockCandidate)) {\n+                        field.setAccessible(true);\n+                        field.set(fieldInstance, mockCandidate);\n+                    } else {\n+                        Class<?> fieldClass = field.getType();\n+                        Object candidate = mockCandidateFilter.filterCandidate(mocks, fieldClass, field).thenInject();\n+                        if (candidate != null) {\n+                            field.setAccessible(true);\n+                            field.set(fieldInstance, candidate);\n+                        }\n+                    }\n+                    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                        innerField.setAccessible(true);\n+                        if (innerField.get(mockCandidate) == oldValue) {\n+                            innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n+                        }\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: incompatible types: Class<CAP#1> cannot be converted to Field",
    "test_result": "ERROR"
}