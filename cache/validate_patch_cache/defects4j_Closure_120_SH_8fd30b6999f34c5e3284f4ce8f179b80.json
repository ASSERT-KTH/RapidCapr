{
    "patch": "        } else if (block.isBranch() && !block.isExceptionBlock()) {\n          // This block is part of a conditional statement.\n          Branch branch = block.getBranch();\n          if (block == branch.falseSuccessor) {\n            // The variable is assigned a value in one branch but not the other.\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2adf8547 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isBranch() && !block.isExceptionBlock()) {\n+          // This block is part of a conditional statement.\n+          Branch branch = block.getBranch();\n+          if (block == branch.falseSuccessor) {\n+            // The variable is assigned a value in one branch but not the other.\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}