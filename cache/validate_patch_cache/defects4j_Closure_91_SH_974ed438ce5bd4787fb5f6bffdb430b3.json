{
    "patch": "    if (n.isFunction()) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally be able to have a\n      // @this annotation associated with them, e.g.,\n      //   var a = function() { }; or\n      //   a.x = function() {};\n      if (!NodeUtil.mayHaveLocalHoistableThis(n)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && NodeUtil.isLValue(parent)) {\n        Node lrsh = parent.getFirstChild();\n        if (lrsh != null) {\n          Node lhs = lrsh.getFirstChild();\n          if (lhs != null) {\n            if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs != null && llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f74c668c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,35 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (n.isFunction()) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally be able to have a\n+      // @this annotation associated with them, e.g.,\n+      //   var a = function() { }; or\n+      //   a.x = function() {};\n+      if (!NodeUtil.mayHaveLocalHoistableThis(n)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && NodeUtil.isLValue(parent)) {\n+        Node lrsh = parent.getFirstChild();\n+        if (lrsh != null) {\n+          Node lhs = lrsh.getFirstChild();\n+          if (lhs != null) {\n+            if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs != null && llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}