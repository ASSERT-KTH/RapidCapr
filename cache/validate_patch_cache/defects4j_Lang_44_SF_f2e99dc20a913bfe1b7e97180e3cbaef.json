{
    "patch": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        // This is protection for poorness in java.lang.BigDecimal.\n        // It accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        return null;\n    }\n\n    // Add validation when the input starts with 0x or -0x\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        if (val.length() < 3) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        try {\n            return createInteger(val);\n        } catch (NumberFormatException e) {\n            return createLong(val);  // Return it as a long if it's too large for an int\n        }\n    }\n\n    // The rest of the code is same as before\n    char lastChar = val.charAt(val.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = val.indexOf('.');\n    int expPos = indexOfExponent(val);\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            dec = val.substring(decPos + 1, expPos);\n        } else {\n            dec = val.substring(decPos + 1);\n        }\n        mant = val.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = val.substring(0, expPos);\n        } else {\n            mant = val;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = val.substring(0, val.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n            boolean validL = dec == null && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric));\n            if (!validL) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            if (numeric.length() <= DIGITS_LIMIT_INT64\n                    && !numeric.startsWith(\"+\")) {\n                // If numeric value is less than 2^63, parse it as long.\n                try {\n                    return createLong(numeric);\n                } catch (NumberFormatException nfe) {\n                    // pass through and have it parsed as BigInteger.\n                }\n            }\n            return createBigInteger(numeric);\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore the bad number\n                }\n                // Fall through\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n\n                // At this point the string is known to be neither a valid long nor a valid\n                // double, and should thus be parseable as a BigInteger.\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException nfe) {\n                     // empty catch\n                }\n                // Fall through\n            default:\n                throw new NumberFormatException(val + \" is not a valid number.\");\n\n        }\n    } else {\n        // The input does not end with a letter\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length());\n        } else {\n            exp = null;\n        }\n\n        // Set dec variable to a default value if it is null\n        if (dec == null) {\n            dec = \"\";\n        }\n\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        if (exp == null && (dec.isEmpty() || dec.equals(\".\") || dec.equals(\".0\"))) {\n            // Positive integer\n            if (mant.startsWith(\"+\")) {\n                mant = mant.substring(1);\n            }\n            try {\n                return createInteger(mant);\n            } catch (NumberFormatException e) {\n                try {\n                    return createLong(mant);\n                } catch (NumberFormatException ne) {\n                    return createBigInteger(mant);\n                }\n            }\n        } else {\n            if (dec.equals(\".\")) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            boolean canBeDouble = exp == null || decPos > -1 && expPos < decPos || dec.isEmpty();\n            if (canBeDouble) {\n                try {\n                    Double d = createDouble(val);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n            }\n            try {\n                return createBigDecimal(val);\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            if (canBeDouble) {\n                // If the number can be parsed as a double and BigDecimal, return the double\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..9273291f 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -135,140 +135,152 @@ public final class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n-            return null;\n-        }\n-        if (val.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n-        }\n-        if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n+public static Number createNumber(String val) throws NumberFormatException {\n+    if (val == null) {\n+        return null;\n+    }\n+    if (val.length() == 0) {\n+        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+    }\n+    if (val.startsWith(\"--\")) {\n+        // This is protection for poorness in java.lang.BigDecimal.\n+        // It accepts this as a legal value, but it does not appear\n+        // to be in specification of class. OS X Java parses it to\n+        // a wrong value.\n+        return null;\n+    }\n+\n+    // Add validation when the input starts with 0x or -0x\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        if (val.length() < 3) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n         }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        try {\n             return createInteger(val);\n-        }   \n-        char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n+        } catch (NumberFormatException e) {\n+            return createLong(val);  // Return it as a long if it's too large for an int\n+        }\n+    }\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n+    // The rest of the code is same as before\n+    char lastChar = val.charAt(val.length() - 1);\n+    String mant;\n+    String dec;\n+    String exp;\n+    int decPos = val.indexOf('.');\n+    int expPos = indexOfExponent(val);\n+    if (decPos > -1) {\n+        if (expPos > -1) {\n+            if (expPos < decPos) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n             }\n-            mant = val.substring(0, decPos);\n+            dec = val.substring(decPos + 1, expPos);\n         } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n-            }\n-            dec = null;\n+            dec = val.substring(decPos + 1);\n         }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // empty catch\n-                    }\n-                    //Fall through\n-                default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-\n-            }\n+        mant = val.substring(0, decPos);\n+    } else {\n+        if (expPos > -1) {\n+            mant = val.substring(0, expPos);\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n-            } else {\n-                exp = null;\n+            mant = val;\n+        }\n+        dec = null;\n+    }\n+    if (!Character.isDigit(lastChar)) {\n+        if (expPos > -1 && expPos < val.length() - 1) {\n+            exp = val.substring(expPos + 1, val.length() - 1);\n+        } else {\n+            exp = null;\n+        }\n+        String numeric = val.substring(0, val.length() - 1);\n+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        switch (lastChar) {\n+            case 'l':\n+            case 'L':\n+            boolean validL = dec == null && exp == null\n+                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric));\n+            if (!validL) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n+            if (numeric.length() <= DIGITS_LIMIT_INT64\n+                    && !numeric.startsWith(\"+\")) {\n+                // If numeric value is less than 2^63, parse it as long.\n                 try {\n-                    return createInteger(val);\n+                    return createLong(numeric);\n                 } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                    // pass through and have it parsed as BigInteger.\n                 }\n+            }\n+            return createBigInteger(numeric);\n+            case 'f':\n+            case 'F':\n                 try {\n-                    return createLong(val);\n+                    Float f = createFloat(numeric);\n+                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        return f;\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // ignore the bad number\n+                }\n+                // Fall through\n+            case 'd':\n+            case 'D':\n+                try {\n+                    Double d = createDouble(numeric);\n+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                        return d;\n+                    }\n                 } catch (NumberFormatException nfe) {\n                     // empty catch\n                 }\n-                return createBigInteger(val);\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                // At this point the string is known to be neither a valid long nor a valid\n+                // double, and should thus be parseable as a BigInteger.\n                 try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n+                    return createBigDecimal(numeric);\n                 } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                     // empty catch\n                 }\n+                // Fall through\n+            default:\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+\n+        }\n+    } else {\n+        // The input does not end with a letter\n+        if (expPos > -1 && expPos < val.length() - 1) {\n+            exp = val.substring(expPos + 1, val.length());\n+        } else {\n+            exp = null;\n+        }\n+\n+        // Set dec variable to a default value if it is null\n+        if (dec == null) {\n+            dec = \"\";\n+        }\n+\n+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        if (exp == null && (dec.isEmpty() || dec.equals(\".\") || dec.equals(\".0\"))) {\n+            // Positive integer\n+            if (mant.startsWith(\"+\")) {\n+                mant = mant.substring(1);\n+            }\n+            try {\n+                return createInteger(mant);\n+            } catch (NumberFormatException e) {\n+                try {\n+                    return createLong(mant);\n+                } catch (NumberFormatException ne) {\n+                    return createBigInteger(mant);\n+                }\n+            }\n+        } else {\n+            if (dec.equals(\".\")) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+            boolean canBeDouble = exp == null || decPos > -1 && expPos < decPos || dec.isEmpty();\n+            if (canBeDouble) {\n                 try {\n                     Double d = createDouble(val);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n@@ -277,13 +289,20 @@ public final class NumberUtils {\n                 } catch (NumberFormatException nfe) {\n                     // empty catch\n                 }\n-\n+            }\n+            try {\n                 return createBigDecimal(val);\n-\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n             }\n-\n+            if (canBeDouble) {\n+                // If the number can be parsed as a double and BigDecimal, return the double\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n         }\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}