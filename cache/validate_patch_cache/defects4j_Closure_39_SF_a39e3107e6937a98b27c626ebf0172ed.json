{
    "patch": "    return !isRegexpType();\n  }\n\n  private static final int MAX_RECURSION_DEPTH = 10;\n  \n  private String toStringHelper(boolean forAnnotations, Set<ObjectType> visitedTypes, int recursionDepth) {\n    if (recursionDepth > MAX_RECURSION_DEPTH) {\n      return \"{...}\";\n    }\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        Object propertyType = getPropertyType(property);\n        String propertyTypeString = propertyType.toString();\n\n        // Correctly handle recursive object types\n        if (propertyType instanceof ObjectType && !visitedTypes.contains(propertyType)) {\n          visitedTypes.add((ObjectType) propertyType);\n          propertyTypeString = ((ObjectType) propertyType).toStringHelper(false, visitedTypes, recursionDepth + 1);\n          visitedTypes.remove((ObjectType) propertyType);\n        }\n\n        sb.append(propertyTypeString);\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n  \n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    Set<ObjectType> visitedTypes = new HashSet<>();\n    return toStringHelper(forAnnotations, visitedTypes, 0);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..f96d98c1 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,12 +345,15 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+  private static final int MAX_RECURSION_DEPTH = 10;\n+  \n+  private String toStringHelper(boolean forAnnotations, Set<ObjectType> visitedTypes, int recursionDepth) {\n+    if (recursionDepth > MAX_RECURSION_DEPTH) {\n+      return \"{...}\";\n+    }\n     if (hasReferenceName()) {\n       return getReferenceName();\n     } else if (prettyPrint) {\n@@ -377,7 +380,18 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+\n+        Object propertyType = getPropertyType(property);\n+        String propertyTypeString = propertyType.toString();\n+\n+        // Correctly handle recursive object types\n+        if (propertyType instanceof ObjectType && !visitedTypes.contains(propertyType)) {\n+          visitedTypes.add((ObjectType) propertyType);\n+          propertyTypeString = ((ObjectType) propertyType).toStringHelper(false, visitedTypes, recursionDepth + 1);\n+          visitedTypes.remove((ObjectType) propertyType);\n+        }\n+\n+        sb.append(propertyTypeString);\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -394,6 +408,11 @@ class PrototypeObjectType extends ObjectType {\n       return \"{...}\";\n     }\n   }\n+  \n+  @Override\n+  String toStringHelper(boolean forAnnotations) {\n+    Set<ObjectType> visitedTypes = new HashSet<>();\n+    return toStringHelper(forAnnotations, visitedTypes, 0);\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}