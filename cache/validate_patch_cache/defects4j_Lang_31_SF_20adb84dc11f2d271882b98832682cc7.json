{
    "patch": "public static boolean containsAny(CharSequence seq, char[] searchChars) {\n    int strLen = seq.length();\n    int searchCharsLen = searchChars.length;\n    for (int i = 0; i < strLen; i++) {\n        char ch = seq.charAt(i);\n        for (int j = 0; j < searchCharsLen; j++) {\n            // Check if the current character matches any character in the searchChars array\n            if (searchChars[j] == ch) {\n                return true;\n            } else if (Character.isHighSurrogate(ch) && j < searchCharsLen - 1\n                    && searchChars[j + 1] == seq.charAt(i + 1)) {\n                // Handle supplementary characters\n                return true;\n            }\n        }\n        if (Character.isHighSurrogate(ch)) {\n            // Skip the low surrogate character if it's present\n            i++;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..bdf5d2c2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,28 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence seq, char[] searchChars) {\n+    int strLen = seq.length();\n+    int searchCharsLen = searchChars.length;\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = seq.charAt(i);\n+        for (int j = 0; j < searchCharsLen; j++) {\n+            // Check if the current character matches any character in the searchChars array\n+            if (searchChars[j] == ch) {\n+                return true;\n+            } else if (Character.isHighSurrogate(ch) && j < searchCharsLen - 1\n+                    && searchChars[j + 1] == seq.charAt(i + 1)) {\n+                // Handle supplementary characters\n+                return true;\n+            }\n+        }\n+        if (Character.isHighSurrogate(ch)) {\n+            // Skip the low surrogate character if it's present\n+            i++;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}