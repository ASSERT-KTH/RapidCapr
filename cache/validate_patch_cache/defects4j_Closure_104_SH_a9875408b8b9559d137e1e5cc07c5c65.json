{
    "patch": "    if (result == null) {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n    // If result is a union type with only one alternate,\n    // return that alternate.\n    if (result.isUnionType() && result.toMaybeUnionType().getAlternates().size() == 1) {\n      return result.toMaybeUnionType().getAlternates().iterator().next();\n    }\n    if (this.isObject() && that.isObject() && result.isNoObjectType()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return result;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..19d9faae 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,18 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+    if (result == null) {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+    // If result is a union type with only one alternate,\n+    // return that alternate.\n+    if (result.isUnionType() && result.toMaybeUnionType().getAlternates().size() == 1) {\n+      return result.toMaybeUnionType().getAlternates().iterator().next();\n+    }\n+    if (this.isObject() && that.isObject() && result.isNoObjectType()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+    return result;\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}