{
    "patch": "private void readTypeVariables() {\n    if (typeVariable != null) {\n        for (Type type : typeVariable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        Type actualType = getActualTypeArgumentFor(typeVariable);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n        }\n    } else {\n        for (Type type : parentClass.getGenericInterfaces()) {\n            if (type instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) type;\n                for (Type param : parameterizedType.getActualTypeArguments()) {\n                    registerTypeVariablesOn(param);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f8bb12543 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    if (typeVariable != null) {\n+        for (Type type : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualType = getActualTypeArgumentFor(typeVariable);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    } else {\n+        for (Type type : parentClass.getGenericInterfaces()) {\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) type;\n+                for (Type param : parameterizedType.getActualTypeArguments()) {\n+                    registerTypeVariablesOn(param);\n+                }\n+            }\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}