{
    "patch": "public static double getTypedPercent(JsonStructure input) {\n    double numTyped = 0;\n    double numTotal = 0;\n    if (input.getValueType() == ValueType.ARRAY) {\n        JsonArray jsonArray = (JsonArray) input;\n        for (JsonValue jsonValue : jsonArray) {\n            numTotal++;\n            if (jsonValue.getValueType() == ValueType.STRING) {\n                try {\n                    Double.parseDouble(((JsonString)jsonValue).getString());\n                    numTyped++;\n                } catch (NumberFormatException e) {\n\n                }\n            }\n        }\n    }\n    return (numTyped / numTotal) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2f283c14 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonStructure input) {\n+    double numTyped = 0;\n+    double numTotal = 0;\n+    if (input.getValueType() == ValueType.ARRAY) {\n+        JsonArray jsonArray = (JsonArray) input;\n+        for (JsonValue jsonValue : jsonArray) {\n+            numTotal++;\n+            if (jsonValue.getValueType() == ValueType.STRING) {\n+                try {\n+                    Double.parseDouble(((JsonString)jsonValue).getString());\n+                    numTyped++;\n+                } catch (NumberFormatException e) {\n+\n+                }\n+            }\n+        }\n+    }\n+    return (numTyped / numTotal) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}