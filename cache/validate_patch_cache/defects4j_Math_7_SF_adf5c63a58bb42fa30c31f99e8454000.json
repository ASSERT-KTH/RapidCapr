{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } else {\n        final Dfp product = newInstance();\n        final int[] top = product.mant;\n        final int[] bottom = this.mant;\n        final int blen = bottom.length;\n        final int tlen = blen + 1;\n        final int[] carry = new int[tlen];\n        for (int i = 0; i < blen; i++) {\n            final long prod = (long) x * bottom[i] + carry[i];\n            carry[i] = (int) (prod / RADIX);\n            carry[i + 1] = (int) (prod - carry[i] * RADIX);\n        }\n        if (carry[blen] != 0) {\n            top[tlen - 1] = carry[blen];\n        }\n        for (int i = 0; i < blen; i++) {\n            final long sum = top[i] + carry[i];\n            carry[i] = (int) (sum / RADIX);\n            top[i] = (int) (sum - carry[i] * RADIX);\n        }\n        product.exp = exp;\n        product.checkNorm();\n        return product;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..08268430f 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,34 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n-\n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } else {\n+        final Dfp product = newInstance();\n+        final int[] top = product.mant;\n+        final int[] bottom = this.mant;\n+        final int blen = bottom.length;\n+        final int tlen = blen + 1;\n+        final int[] carry = new int[tlen];\n+        for (int i = 0; i < blen; i++) {\n+            final long prod = (long) x * bottom[i] + carry[i];\n+            carry[i] = (int) (prod / RADIX);\n+            carry[i + 1] = (int) (prod - carry[i] * RADIX);\n+        }\n+        if (carry[blen] != 0) {\n+            top[tlen - 1] = carry[blen];\n+        }\n+        for (int i = 0; i < blen; i++) {\n+            final long sum = top[i] + carry[i];\n+            carry[i] = (int) (sum / RADIX);\n+            top[i] = (int) (sum - carry[i] * RADIX);\n+        }\n+        product.exp = exp;\n+        product.checkNorm();\n+        return product;\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}