{
    "patch": "import org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\npublic class Gamma {\n\n    private static final double DEFAULT_EPSILON = 1e-9;\n\n    public static double regularizedGammaP(double a, double x) {\n        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n\n    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws IllegalArgumentException {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be positive.\");\n        }\n\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x must be non-negative.\");\n        }\n\n        if (Precision.equals(x, 0.0, 1.0e-15)) {\n            return 0;\n        }\n\n        if (x >= a + 1) {\n            return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n        }\n\n        double n = 0, an = 1 / a, sum = an;\n        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n            n++;\n            an = an * x / (a + n);\n            sum += an;\n        }\n        if (n >= maxIterations) {\n            throw new IllegalArgumentException(\"Maximum number of iterations exceeded\");\n        }\n\n        return Math.exp(-x + a * Math.log(x) - MathUtils.logGamma(a)) * sum;\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n\n    public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) throws IllegalArgumentException {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be positive.\");\n        }\n\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x must be non-negative.\");\n        }\n\n        if (Precision.equals(x, 0.0, 1.0e-15)) {\n            return 1;\n        }\n\n        if (x >= a + 1) {\n            return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n        }\n\n        double n = 0, an = 1, b = x + 1 - a, c = 1 / DEFAULT_EPSILON, d = 1 / b, h = d;\n        while (Math.abs(d / h) > epsilon && n < maxIterations && h < Double.POSITIVE_INFINITY) {\n            n++;\n            an = -n * (n - a);\n            b += 2;\n            d = an * d + b;\n            if (Math.abs(d) < DEFAULT_EPSILON) {\n                d = DEFAULT_EPSILON;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < DEFAULT_EPSILON) {\n                c = DEFAULT_EPSILON;\n            }\n            d = 1 / d;\n            h *= d * c;\n        }\n        if (n >= maxIterations) {\n            throw new IllegalArgumentException(\"Maximum number of iterations exceeded\");\n        }\n        return h * Math.exp(-x + a * Math.log(x) - MathUtils.logGamma(a));\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}