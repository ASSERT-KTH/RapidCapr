{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    if (meanImpl.getClass() == Mean.class) {\n        meanImpl.increment(value);\n    } else {\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n        if (Double.isNaN(meanImpl.getResult())) {\n            meanImpl.clear();\n            double[] data = getValues();\n            for (double d : data) {\n                meanImpl.increment(d);\n            }\n        }\n    }\n    if (varianceImpl.getClass() == Variance.class) {\n        varianceImpl.increment(value);\n    } else {\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n        if (Double.isNaN(varianceImpl.getResult())) {\n            varianceImpl.clear();\n            double[] data = getValues();\n            for (double d : data) {\n                varianceImpl.increment(d);\n            }\n        }\n    }\n    if (geoMeanImpl.getClass() == GeometricMean.class) {\n        if (value > 0.0) {\n            geoMeanImpl.increment(value);\n        }\n    } else {\n        ((AbstractStorelessUnivariateStatistic) geoMeanImpl).increment(value);\n        if (Double.isNaN(geoMeanImpl.getResult())) {\n            geoMeanImpl.clear();\n            double[] data = getValues();\n            for (double d : data) {\n                if (d > 0.0) {\n                    geoMeanImpl.increment(d);\n                }\n            }\n        }\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..ff5c6b3d6 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,58 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    if (meanImpl.getClass() == Mean.class) {\n+        meanImpl.increment(value);\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+        if (Double.isNaN(meanImpl.getResult())) {\n+            meanImpl.clear();\n+            double[] data = getValues();\n+            for (double d : data) {\n+                meanImpl.increment(d);\n+            }\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    }\n+    if (varianceImpl.getClass() == Variance.class) {\n+        varianceImpl.increment(value);\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+        if (Double.isNaN(varianceImpl.getResult())) {\n+            varianceImpl.clear();\n+            double[] data = getValues();\n+            for (double d : data) {\n+                varianceImpl.increment(d);\n+            }\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    }\n+    if (geoMeanImpl.getClass() == GeometricMean.class) {\n+        if (value > 0.0) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) geoMeanImpl).increment(value);\n+        if (Double.isNaN(geoMeanImpl.getResult())) {\n+            geoMeanImpl.clear();\n+            double[] data = getValues();\n+            for (double d : data) {\n+                if (d > 0.0) {\n+                    geoMeanImpl.increment(d);\n+                }\n+            }\n+        }\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}