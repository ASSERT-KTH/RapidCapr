{
    "patch": "      List<Reference> assignments = getAllAssignments();\n      if (assignments.size() > 1) {\n        return false;\n      }\n\n      if (assignments.size() == 1) {\n        Reference decl = getDecl();\n        Reference assignment = assignments.get(0);\n\n        // Multiple variables as part of a comma separated declaration are also assigned\n        // more than once.\n        if (!decl.isName() || !assignment.isName()) {\n          return false;\n        }\n\n        // When we are initializing the variable (through \"var x = ...\") it's okay to assign\n        // the variable multiple times in a lifetime.\n        if (assignment.getIndex() < decl.getIndex()) {\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..123730ac 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,25 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      List<Reference> assignments = getAllAssignments();\n+      if (assignments.size() > 1) {\n+        return false;\n+      }\n+\n+      if (assignments.size() == 1) {\n+        Reference decl = getDecl();\n+        Reference assignment = assignments.get(0);\n+\n+        // Multiple variables as part of a comma separated declaration are also assigned\n+        // more than once.\n+        if (!decl.isName() || !assignment.isName()) {\n+          return false;\n+        }\n+\n+        // When we are initializing the variable (through \"var x = ...\") it's okay to assign\n+        // the variable multiple times in a lifetime.\n+        if (assignment.getIndex() < decl.getIndex()) {\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}