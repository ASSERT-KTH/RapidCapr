{
    "patch": "      // Strip unreferenced arguments from function calls.\n      Node functionBody = function.getLastChild();\n      while (functionBody != null) {\n        if (NodeUtil.isFunctionCall(functionBody)) {\n          Node callArgList = functionBody.getFirstChild().getNext();\n          if (callArgList != null) {\n            // This function call has arguments.\n            for (Node currentArg = callArgList.getFirstChild(); currentArg != null; currentArg = currentArg.getNext()) {\n              if (NodeUtil.isName(currentArg)) {\n                Var callArgVar = fnScope.getVar(currentArg.getString());\n                if (!referenced.contains(callArgVar)) {\n                  callArgList.removeChild(currentArg);\n                  compiler.reportCodeChange();\n                }\n              }\n            }\n          }\n        }\n        functionBody = functionBody.getPrevious();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f7b2dc0b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Strip unreferenced arguments from function calls.\n+      Node functionBody = function.getLastChild();\n+      while (functionBody != null) {\n+        if (NodeUtil.isFunctionCall(functionBody)) {\n+          Node callArgList = functionBody.getFirstChild().getNext();\n+          if (callArgList != null) {\n+            // This function call has arguments.\n+            for (Node currentArg = callArgList.getFirstChild(); currentArg != null; currentArg = currentArg.getNext()) {\n+              if (NodeUtil.isName(currentArg)) {\n+                Var callArgVar = fnScope.getVar(currentArg.getString());\n+                if (!referenced.contains(callArgVar)) {\n+                  callArgList.removeChild(currentArg);\n+                  compiler.reportCodeChange();\n+                }\n+              }\n+            }\n+          }\n+        }\n+        functionBody = functionBody.getPrevious();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}