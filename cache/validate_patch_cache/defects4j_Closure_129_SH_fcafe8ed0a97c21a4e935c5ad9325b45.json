{
    "patch": "    \n      // ignore cast nodes.\n      while (first.isCast()) {\n        first = first.getFirstChild();\n      }\n    \n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n      \n      if (first.isName() && \"eval\".equals(first.getString())) {\n        Node parent = n.getParent();\n        if (parent.isExprResult()) {\n          Node grandparent = parent.getParent();\n          if (grandparent.isHook()) {\n            grandparent.putBooleanProp(Node.DIRECT_EVAL, true);\n          } else {\n            parent.putBooleanProp(Node.DIRECT_EVAL, true);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..daa7ac4c 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,26 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+    \n+      // ignore cast nodes.\n+      while (first.isCast()) {\n+        first = first.getFirstChild();\n+      }\n+    \n+      if (!NodeUtil.isGet(first)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n+      \n+      if (first.isName() && \"eval\".equals(first.getString())) {\n+        Node parent = n.getParent();\n+        if (parent.isExprResult()) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent.isHook()) {\n+            grandparent.putBooleanProp(Node.DIRECT_EVAL, true);\n+          } else {\n+            parent.putBooleanProp(Node.DIRECT_EVAL, true);\n+          }\n+        }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}