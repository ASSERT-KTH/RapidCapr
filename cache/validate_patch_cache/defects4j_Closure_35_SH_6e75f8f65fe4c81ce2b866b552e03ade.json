{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType currentPropType = objType.getPropertyType(prop);\n          if (currentPropType != null && currentPropType.isUnknownType()) {\n            // If the property already exists but is marked as unknown,\n            // we can infer a more specific type based on the constraint.\n            objType.defineInferredProperty(prop, propType, null);\n          } else if (!objType.hasProperty(prop) && !objType.isPropertyTypeDeclared(prop)) {\n            // If the property is not yet declared, we can just use the\n            // constraint type directly.\n            objType.defineInferredProperty(prop, propType, null);\n          } else {\n            // If the property already exists and is not marked as unknown,\n            // we can't infer a more specific type.\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..39bc2c7a 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,16 +1123,20 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          JSType currentPropType = objType.getPropertyType(prop);\n+          if (currentPropType != null && currentPropType.isUnknownType()) {\n+            // If the property already exists but is marked as unknown,\n+            // we can infer a more specific type based on the constraint.\n+            objType.defineInferredProperty(prop, propType, null);\n+          } else if (!objType.hasProperty(prop) && !objType.isPropertyTypeDeclared(prop)) {\n+            // If the property is not yet declared, we can just use the\n+            // constraint type directly.\n+            objType.defineInferredProperty(prop, propType, null);\n+          } else {\n+            // If the property already exists and is not marked as unknown,\n+            // we can't infer a more specific type.\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}