{
    "patch": "public static String unescapeJava(String str) {\n    if (str == null || str.isEmpty()) {\n        return str;\n    }\n\n    StringBuilder result = new StringBuilder(str.length());\n    boolean sawBackslash = false;\n\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n\n        if (sawBackslash) {\n            sawBackslash = false;\n            if (ch == '\\\\') {\n                result.append('\\\\');\n            } else if (ch == '\\\"') {\n                result.append('\\\"');\n            } else if (ch == '\\'') {\n                result.append('\\'');\n            } else if (ch == 'r') {\n                result.append('\\r');\n            } else if (ch == 'f') {\n                result.append('\\f');\n            } else if (ch == 't') {\n                result.append('\\t');\n            } else if (ch == 'n') {\n                result.append('\\n');\n            } else if (ch == 'b') {\n                result.append('\\b');\n            } else if (ch == 'u') {\n                int hex = 0;\n\n                for (int j = 0; j < 4; j++) {\n                    if (++i >= str.length()) {\n                        throw new IllegalArgumentException(\"Invalid unicode sequence: \"\n                                + str);\n                    }\n\n                    ch = str.charAt(i);\n\n                    switch (ch) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9':\n                        hex = (hex << 4) + ch - '0';\n                        break;\n                    case 'a':\n                    case 'b':\n                    case 'c':\n                    case 'd':\n                    case 'e':\n                    case 'f':\n                        hex = (hex << 4) + 10 + ch - 'a';\n                        break;\n                    case 'A':\n                    case 'B':\n                    case 'C':\n                    case 'D':\n                    case 'E':\n                    case 'F':\n                        hex = (hex << 4) + 10 + ch - 'A';\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Invalid unicode sequence: \"\n                                + str);\n                    }\n                }\n\n                result.append((char) hex);\n            } else {\n                throw new IllegalArgumentException(\"Unexpected character after backslash: \"\n                        + ch);\n            }\n        } else if (ch == '\\\\') {\n            sawBackslash = true;\n        } else {\n            result.append(ch);\n        }\n    }\n\n    if (sawBackslash) {\n        result.append('\\\\');\n    }\n\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1f82608b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,99 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String str) {\n+    if (str == null || str.isEmpty()) {\n+        return str;\n+    }\n+\n+    StringBuilder result = new StringBuilder(str.length());\n+    boolean sawBackslash = false;\n+\n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+\n+        if (sawBackslash) {\n+            sawBackslash = false;\n+            if (ch == '\\\\') {\n+                result.append('\\\\');\n+            } else if (ch == '\\\"') {\n+                result.append('\\\"');\n+            } else if (ch == '\\'') {\n+                result.append('\\'');\n+            } else if (ch == 'r') {\n+                result.append('\\r');\n+            } else if (ch == 'f') {\n+                result.append('\\f');\n+            } else if (ch == 't') {\n+                result.append('\\t');\n+            } else if (ch == 'n') {\n+                result.append('\\n');\n+            } else if (ch == 'b') {\n+                result.append('\\b');\n+            } else if (ch == 'u') {\n+                int hex = 0;\n+\n+                for (int j = 0; j < 4; j++) {\n+                    if (++i >= str.length()) {\n+                        throw new IllegalArgumentException(\"Invalid unicode sequence: \"\n+                                + str);\n+                    }\n+\n+                    ch = str.charAt(i);\n+\n+                    switch (ch) {\n+                    case '0':\n+                    case '1':\n+                    case '2':\n+                    case '3':\n+                    case '4':\n+                    case '5':\n+                    case '6':\n+                    case '7':\n+                    case '8':\n+                    case '9':\n+                        hex = (hex << 4) + ch - '0';\n+                        break;\n+                    case 'a':\n+                    case 'b':\n+                    case 'c':\n+                    case 'd':\n+                    case 'e':\n+                    case 'f':\n+                        hex = (hex << 4) + 10 + ch - 'a';\n+                        break;\n+                    case 'A':\n+                    case 'B':\n+                    case 'C':\n+                    case 'D':\n+                    case 'E':\n+                    case 'F':\n+                        hex = (hex << 4) + 10 + ch - 'A';\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Invalid unicode sequence: \"\n+                                + str);\n+                    }\n+                }\n+\n+                result.append((char) hex);\n+            } else {\n+                throw new IllegalArgumentException(\"Unexpected character after backslash: \"\n+                        + ch);\n+            }\n+        } else if (ch == '\\\\') {\n+            sawBackslash = true;\n+        } else {\n+            result.append(ch);\n+        }\n+    }\n+\n+    if (sawBackslash) {\n+        result.append('\\\\');\n+    }\n+\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}