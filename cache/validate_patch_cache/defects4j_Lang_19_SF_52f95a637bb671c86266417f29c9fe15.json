{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index < 0 || index >= seqEnd || seqEnd - index < 3 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int start = index + 2;\n    boolean isHex = false;\n    if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        start++;\n        isHex = true;\n        if (start >= seqEnd) {\n            return 0;    //check if just an x without value\n        }\n    }\n\n    int end = start;\n    boolean hasSemicolon = false;\n    while (end < seqEnd && input.charAt(end) != ';') { // find end of entity\n        end++;\n    }\n\n    int entityLength = (hasSemicolon = end < seqEnd && input.charAt(end) == ';') ? end - index + 1 : end - index;\n    if (entityLength < 1 || (!hasSemicolon && entityLength < (isHex ? 3 : 2))) {\n        return 0;\n    }\n\n    int codepoint;\n    try {\n        if(isHex) {\n            codepoint = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n        } else {\n            codepoint = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n        }\n    } catch(NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n        return 0;\n    }\n\n    if (codepoint < 0 || codepoint > 0x10FFFF || (codepoint >= 0xD800 && codepoint <= 0xDFFF)) {\n        return 0;\n    }\n\n    char[] chrs = Character.toChars(codepoint);\n    out.write(chrs);\n\n    return entityLength;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..6995bc9f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,51 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index < 0 || index >= seqEnd || seqEnd - index < 3 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n+    int start = index + 2;\n+    boolean isHex = false;\n+    if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+        start++;\n+        isHex = true;\n+        if (start >= seqEnd) {\n+            return 0;    //check if just an x without value\n+        }\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    int end = start;\n+    boolean hasSemicolon = false;\n+    while (end < seqEnd && input.charAt(end) != ';') { // find end of entity\n+        end++;\n+    }\n \n+    int entityLength = (hasSemicolon = end < seqEnd && input.charAt(end) == ';') ? end - index + 1 : end - index;\n+    if (entityLength < 1 || (!hasSemicolon && entityLength < (isHex ? 3 : 2))) {\n+        return 0;\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+    int codepoint;\n+    try {\n+        if(isHex) {\n+            codepoint = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n+        } else {\n+            codepoint = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n         }\n+    } catch(NumberFormatException nfe) {\n+        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n+        return 0;\n+    }\n+\n+    if (codepoint < 0 || codepoint > 0x10FFFF || (codepoint >= 0xD800 && codepoint <= 0xDFFF)) {\n         return 0;\n     }\n+\n+    char[] chrs = Character.toChars(codepoint);\n+    out.write(chrs);\n+\n+    return entityLength;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 55295 expected:<\ud7ff[?]> but was:<\ud7ff[&#xd800;]>",
    "test_result": "FAIL"
}