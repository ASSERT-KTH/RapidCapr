{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix d = dec.getD();\n    RealMatrix v = dec.getV();\n    // Set up diagonal matrix of eigenvalues\n    int n = d.getRowDimension();\n    double[] sqrtEigenValues = new double[n];\n    for (int i = 0; i < n; i++) {\n        sqrtEigenValues[i] = FastMath.sqrt(FastMath.max(0, d.getEntry(i, i)));\n    }\n    RealMatrix sqrtD = new DiagonalMatrix(sqrtEigenValues);\n    // Calculate square root of m using the sparse matrix\n    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..910b4956a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix d = dec.getD();\n+    RealMatrix v = dec.getV();\n+    // Set up diagonal matrix of eigenvalues\n+    int n = d.getRowDimension();\n+    double[] sqrtEigenValues = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        sqrtEigenValues[i] = FastMath.sqrt(FastMath.max(0, d.getEntry(i, i)));\n     }\n+    RealMatrix sqrtD = new DiagonalMatrix(sqrtEigenValues);\n+    // Calculate square root of m using the sparse matrix\n+    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}