{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType != null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          if (propType.isConstructor() ||\n              propType.isFunctionType() ||\n              propType.isNamespaceType()) {\n            // We don't usually consider constructors, functions, or namespaces when inferring\n            // record types. e.g., we don't want to infer `function(): number` or `namespace{}` in\n            // `{x: ?}`, because neither adds information to the inferred type of `x`, and may in\n            // fact conflict with its actual usages. Instead, we prefer to infer `{}`. However, in\n            // the case of a constructor (propType.isConstructor() must be true), function type, or\n            // namespace type, we still want to know the returned type.\n            FunctionType fnType = propType.toMaybeFunctionType();\n            if (fnType != null) {\n              typeToInfer = fnType.getReturnType();\n            } else {\n              NamespaceType nsType = propType.toMaybeNamespaceType();\n              if (nsType != null) {\n                typeToInfer = nsType.getNamespaceObjectType();\n              }\n            }\n          } else {\n            typeToInfer = getNativeType(VOID_TYPE)\n                .getLeastSupertype(propType.getContainedTypeOrDefault(getNativeType(UNKNOWN_TYPE)));\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..139c216c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,23 +1118,44 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+  if (objType != null) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!objType.hasProperty(prop)) {\n+          if (propType.isConstructor() ||\n+              propType.isFunctionType() ||\n+              propType.isNamespaceType()) {\n+            // We don't usually consider constructors, functions, or namespaces when inferring\n+            // record types. e.g., we don't want to infer `function(): number` or `namespace{}` in\n+            // `{x: ?}`, because neither adds information to the inferred type of `x`, and may in\n+            // fact conflict with its actual usages. Instead, we prefer to infer `{}`. However, in\n+            // the case of a constructor (propType.isConstructor() must be true), function type, or\n+            // namespace type, we still want to know the returned type.\n+            FunctionType fnType = propType.toMaybeFunctionType();\n+            if (fnType != null) {\n+              typeToInfer = fnType.getReturnType();\n+            } else {\n+              NamespaceType nsType = propType.toMaybeNamespaceType();\n+              if (nsType != null) {\n+                typeToInfer = nsType.getNamespaceObjectType();\n+              }\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            typeToInfer = getNativeType(VOID_TYPE)\n+                .getLeastSupertype(propType.getContainedTypeOrDefault(getNativeType(UNKNOWN_TYPE)));\n           }\n+          objType.defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n+}\n+    }\n+  }\n \n   /**\n    * If we access a property of a symbol, then that symbol is not",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}