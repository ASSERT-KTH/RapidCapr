{
    "patch": "    Set<String> referencedNames = referenced.stream()\n        .map(Var::getName)\n        .collect(Collectors.toSet());\n\n    Node argList = getFunctionArgList(function);\n\n    int numToRemove = 0;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      if (!referencedNames.contains(arg.getString())) {\n        numToRemove++;\n      } else {\n        numToRemove = 0;\n      }\n    }\n\n    if (numToRemove > 0) {\n      for (int i = 0; i < numToRemove; i++) {\n        argList.removeChild(argList.getLastChild());\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b4b76382 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> referencedNames = referenced.stream()\n+        .map(Var::getName)\n+        .collect(Collectors.toSet());\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    int numToRemove = 0;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      if (!referencedNames.contains(arg.getString())) {\n+        numToRemove++;\n+      } else {\n+        numToRemove = 0;\n+      }\n+    }\n+\n+    if (numToRemove > 0) {\n+      for (int i = 0; i < numToRemove; i++) {\n+        argList.removeChild(argList.getLastChild());\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}