{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        final int numDecisionVariables = simplex[0].getPoint().length;\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n        while (numIterations < maxIterations) {\n\n            incrementIterationsCounter();\n            numIterations++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                return;\n            }\n\n            RealPointValuePair[] contractedSimplex = null;\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractedSimplex = simplexContract(original, contracted.getPointRef(), comparator);\n            } else {\n                contractedSimplex = simplexContract(original, best.getPointRef(), comparator);\n                if (comparator.compare(contractedSimplex[numDecisionVariables], best) < 0) {\n                    simplex = contractedSimplex;\n                } else {\n                    // Perform a shrink\n                    simplexShrink(original, comparator);\n                }\n            }\n\n            // check convergence\n            if (isConverged(simplex, comparator, getRelativeThreshold(), getAbsoluteThreshold())) {\n                return;\n            }\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a1604ab2b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -60,10 +60,13 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n+        final int numDecisionVariables = simplex[0].getPoint().length;\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n+        while (numIterations < maxIterations) {\n \n             incrementIterationsCounter();\n+            numIterations++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -80,22 +83,33 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n                 return;\n-\n             }\n \n+            RealPointValuePair[] contractedSimplex = null;\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contractedSimplex = simplexContract(original, contracted.getPointRef(), comparator);\n+            } else {\n+                contractedSimplex = simplexContract(original, best.getPointRef(), comparator);\n+                if (comparator.compare(contractedSimplex[numDecisionVariables], best) < 0) {\n+                    simplex = contractedSimplex;\n+                } else {\n+                    // Perform a shrink\n+                    simplexShrink(original, comparator);\n+                }\n+            }\n \n             // check convergence\n+            if (isConverged(simplex, comparator, getRelativeThreshold(), getAbsoluteThreshold())) {\n                 return;\n             }\n-\n         }\n \n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}