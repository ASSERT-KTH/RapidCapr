{
    "patch": "    // We only want to match contraints on anonymous types.\n    if (!constraintObj.isNominalConstructor() ||\n            constraintObj.hasReferenceName() ||\n            constraintObj.isInterface() ||\n            constraintObj.isFunctionType()) {\n        return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..bd29043e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,13 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    // We only want to match contraints on anonymous types.\n+    if (!constraintObj.isNominalConstructor() ||\n+            constraintObj.hasReferenceName() ||\n+            constraintObj.isInterface() ||\n+            constraintObj.isFunctionType()) {\n+        return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}