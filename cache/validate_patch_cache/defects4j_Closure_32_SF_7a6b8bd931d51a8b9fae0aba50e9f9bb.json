{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Read the content from the first line.\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  Boolean ignoreStar = false;\n\n  //Track the start of the line to count whitespace that\n  //the tokenizer skipped. Because this case is rare, it's easier\n  //to do this here than in the tokenizer.\n  int startContentLineno = stream.getLineno();\n  int startContentCharno = stream.getCharno();\n\n  while (true) {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          state = State.SEARCHING_TEXT;\n        } else {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        ignoreStar = true;\n        break;\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append('\\n');\n        }\n        ignoreStar = false;\n        state = State.SEARCHING_TEXT;\n        break;\n      case AT:\n        if (state == State.SEARCHING_ANNOTATION) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('@');\n        } else {\n          return new ExtractionInfo(builder.toString(), token);\n        }\n        ignoreStar = false;\n        break;\n      case EOF:\n      case '\\0':\n        return new ExtractionInfo(builder.toString(), token);\n      case EOC:\n        if (state == State.SEARCHING_ANNOTATION) {\n          return new ExtractionInfo(builder.toString(), token);\n        }\n        ignoreStar = false;\n        break;\n      case WORD:\n      case STRING:\n      case STAR:\n      case LT:\n      case GT:\n      case EQ:\n      case BANG:\n      case OPEN_PAREN:\n      case CLOSE_PAREN:\n      case OPEN_BRACE:\n      case CLOSE_BRACE:\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case PERIOD:\n      case COMMA:\n      case QUESTION:\n      case COLON:\n      case PLUS:\n      case MINUS:\n      case BIT_AND:\n      case BIT_OR:\n      case DIV:\n      case SEMI:\n      case XOR:\n      case MOD:\n      case INSTANCEOF:\n      case IN:\n      case SHARP:\n        ignoreStar = false;\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        state = State.SEARCHING_TEXT;\n        break;\n      case ELLIPSIS:\n        ignoreStar = false;\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(\"...\");\n\n        state = State.SEARCHING_TEXT;\n        break;\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_TEXT;\n        break;\n    }\n\n    if (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n      token = next();\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..61adfc99 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,132 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+                                                    WhitespaceOption option) {\n+  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n+    return new ExtractionInfo(\"\", token);\n+  }\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+  stream.update();\n+  int startLineno = stream.getLineno();\n+  int startCharno = stream.getCharno() + 1;\n \n-              // All tokens must be separated by a space.\n+  // Read the content from the first line.\n+  String line = stream.getRemainingJSDocLine();\n+  if (option != WhitespaceOption.PRESERVE) {\n+    line = line.trim();\n+  }\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+  StringBuilder builder = new StringBuilder();\n+  builder.append(line);\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+  state = State.SEARCHING_ANNOTATION;\n+  token = next();\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+  Boolean ignoreStar = false;\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+  //Track the start of the line to count whitespace that\n+  //the tokenizer skipped. Because this case is rare, it's easier\n+  //to do this here than in the tokenizer.\n+  int startContentLineno = stream.getLineno();\n+  int startContentCharno = stream.getCharno();\n \n-            return new ExtractionInfo(multilineText, token);\n+  while (true) {\n+    switch (token) {\n+      case STAR:\n+        if (ignoreStar) {\n+          state = State.SEARCHING_TEXT;\n+        } else {\n+          if (builder.length() > 0) {\n+            builder.append(' ');\n           }\n-\n+          builder.append('*');\n+        }\n+        ignoreStar = true;\n+        break;\n+      case EOL:\n+        if (option != WhitespaceOption.SINGLE_LINE) {\n+          builder.append('\\n');\n+        }\n+        ignoreStar = false;\n+        state = State.SEARCHING_TEXT;\n+        break;\n+      case AT:\n+        if (state == State.SEARCHING_ANNOTATION) {\n           if (builder.length() > 0) {\n             builder.append(' ');\n           }\n-          builder.append(toString(token));\n+          builder.append('@');\n+        } else {\n+          return new ExtractionInfo(builder.toString(), token);\n+        }\n+        ignoreStar = false;\n+        break;\n+      case EOF:\n+      case '\\0':\n+        return new ExtractionInfo(builder.toString(), token);\n+      case EOC:\n+        if (state == State.SEARCHING_ANNOTATION) {\n+          return new ExtractionInfo(builder.toString(), token);\n+        }\n+        ignoreStar = false;\n+        break;\n+      case WORD:\n+      case STRING:\n+      case STAR:\n+      case LT:\n+      case GT:\n+      case EQ:\n+      case BANG:\n+      case OPEN_PAREN:\n+      case CLOSE_PAREN:\n+      case OPEN_BRACE:\n+      case CLOSE_BRACE:\n+      case OPEN_SQUARE:\n+      case CLOSE_SQUARE:\n+      case PERIOD:\n+      case COMMA:\n+      case QUESTION:\n+      case COLON:\n+      case PLUS:\n+      case MINUS:\n+      case BIT_AND:\n+      case BIT_OR:\n+      case DIV:\n+      case SEMI:\n+      case XOR:\n+      case MOD:\n+      case INSTANCEOF:\n+      case IN:\n+      case SHARP:\n+        ignoreStar = false;\n+        if (builder.length() > 0) {\n+          builder.append(' ');\n+        }\n+        builder.append(toString(token));\n \n-          line = stream.getRemainingJSDocLine();\n+        state = State.SEARCHING_TEXT;\n+        break;\n+      case ELLIPSIS:\n+        ignoreStar = false;\n+        if (builder.length() > 0) {\n+          builder.append(' ');\n+        }\n+        builder.append(\"...\");\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+        state = State.SEARCHING_TEXT;\n+        break;\n+      default:\n+        ignoreStar = false;\n+        state = State.SEARCHING_TEXT;\n+        break;\n+    }\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+    if (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n+      token = next();\n+    }\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}