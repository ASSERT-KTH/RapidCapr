{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrtM;\n    EigenDecomposition eigen = new EigenDecomposition(m);\n    RealMatrix v = eigen.getV();\n    RealMatrix d = eigen.getD();\n    RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n    double epsilon = 1E-12;\n\n    for(int i = 0; i < d.getRowDimension(); i++) {\n        if(d.getEntry(i,i) < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        } else if(Math.abs(d.getEntry(i,i)) <= epsilon) {\n            dSqrt.setEntry(i,i, 0.0);\n        } else {\n            dSqrt.setEntry(i,i, Math.sqrt(d.getEntry(i,i)));\n        }\n    }\n\n    sqrtM = v.multiply(dSqrt).multiply(v.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d3b6c39e6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrtM;\n+    EigenDecomposition eigen = new EigenDecomposition(m);\n+    RealMatrix v = eigen.getV();\n+    RealMatrix d = eigen.getD();\n+    RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n+    double epsilon = 1E-12;\n+\n+    for(int i = 0; i < d.getRowDimension(); i++) {\n+        if(d.getEntry(i,i) < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        } else if(Math.abs(d.getEntry(i,i)) <= epsilon) {\n+            dSqrt.setEntry(i,i, 0.0);\n+        } else {\n+            dSqrt.setEntry(i,i, Math.sqrt(d.getEntry(i,i)));\n+        }\n     }\n+\n+    sqrtM = v.multiply(dSqrt).multiply(v.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}