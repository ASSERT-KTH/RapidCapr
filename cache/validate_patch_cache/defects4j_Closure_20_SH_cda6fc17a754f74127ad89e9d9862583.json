{
    "patch": "   Node value = callTarget.getNext();\n   if (value != null && NodeUtil.isImmutableValue(value)) {\n        Node addition = NodeUtil.newString(\"\").srcref(callTarget);\n        value.detachFromParent();\n        addition.addChildToFront(value);\n        n.replaceWith(addition);\n        reportCodeChange();\n        return addition;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..a54c2752 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,15 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+   Node value = callTarget.getNext();\n+   if (value != null && NodeUtil.isImmutableValue(value)) {\n+        Node addition = NodeUtil.newString(\"\").srcref(callTarget);\n+        value.detachFromParent();\n+        addition.addChildToFront(value);\n+        n.replaceWith(addition);\n+        reportCodeChange();\n+        return addition;\n+      }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}