{
    "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);\nDateTimeFieldType fieldType = newPartial.getFieldType(index);\nif (fieldType.getField(iChronology).getDurationType().getField(iChronology).compareTo(DurationFieldType.millis()) == 0 ) {\n    newPartial = newPartial.without(fieldType);\n}\niChronology.validate(newPartial, newValues);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..2d53837f 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,12 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+DateTimeFieldType fieldType = newPartial.getFieldType(index);\n+if (fieldType.getField(iChronology).getDurationType().getField(iChronology).compareTo(DurationFieldType.millis()) == 0 ) {\n+    newPartial = newPartial.without(fieldType);\n+}\n+iChronology.validate(newPartial, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: variable fieldType is already defined in method with(DateTimeFieldType,int)",
    "test_result": "ERROR"
}