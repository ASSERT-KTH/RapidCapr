{
    "patch": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      if (n.isCall() || n.isNew()) {\n        Node fn = n.getFirstChild();\n        if (fn.isFunction() || fn.isQualifiedName()) {\n          // Treat function calls to global and local functions as statements.\n          return;\n        }\n      } else if (n.isFunction()) {\n        if (n.getParent().isAssign() && !NodeUtil.isExpressionResultUsed(n.getParent())) {\n          // Treat named function expressions that are LHS of assignments as statements.\n          return;\n        } else if (n.getParent().isGetElem()) {\n          // Treat function expressions that are properties of objects as statements.\n          return;\n        } else if (n.getParent().isStringKey()) {\n          // Treat function expressions that are values of object literals as statements\n          // if they do not return a value.\n          Node gp = n.getGrandparent();\n          if (gp.getParent().isExprResult() || gp.getParent().getType() == Token.COMMA) {\n            Node lastChild = gp.getLastChild();\n            if (lastChild.getType() == Token.STRING || NodeUtil.mayHaveSideEffects(lastChild, t.getCompiler())) {\n              return;\n            }\n          }\n        }\n      }\n      // Reject all other statements that do not return a value.\n      if (!NodeUtil.isStatement(n)) {\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n          msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n              \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..e147ff69 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -127,21 +127,43 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+    if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+      if (n.isCall() || n.isNew()) {\n+        Node fn = n.getFirstChild();\n+        if (fn.isFunction() || fn.isQualifiedName()) {\n+          // Treat function calls to global and local functions as statements.\n+          return;\n+        }\n+      } else if (n.isFunction()) {\n+        if (n.getParent().isAssign() && !NodeUtil.isExpressionResultUsed(n.getParent())) {\n+          // Treat named function expressions that are LHS of assignments as statements.\n+          return;\n+        } else if (n.getParent().isGetElem()) {\n+          // Treat function expressions that are properties of objects as statements.\n+          return;\n+        } else if (n.getParent().isStringKey()) {\n+          // Treat function expressions that are values of object literals as statements\n+          // if they do not return a value.\n+          Node gp = n.getGrandparent();\n+          if (gp.getParent().isExprResult() || gp.getParent().getType() == Token.COMMA) {\n+            Node lastChild = gp.getLastChild();\n+            if (lastChild.getType() == Token.STRING || NodeUtil.mayHaveSideEffects(lastChild, t.getCompiler())) {\n+              return;\n+            }\n+          }\n+        }\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n+      // Reject all other statements that do not return a value.\n       if (!NodeUtil.isStatement(n)) {\n+        String msg = \"This code lacks side-effects. Is there a bug?\";\n+        if (n.isString()) {\n+          msg = \"Is there a missing '+' on the previous line?\";\n+        } else if (isSimpleOp) {\n+          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n+              \"' operator is not being used.\";\n+        }\n+\n+        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n         problemNodes.add(n);\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}