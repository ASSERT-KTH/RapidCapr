{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(final CharSequence str, final char[] searchChars) {\n        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int len = str.length();\n        final int searchLen = searchChars.length;\n        final int searchLast = searchLen - 1;\n        for (int i = 0; i < len; i++) {\n            final char ch = str.charAt(i);\n            if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                final int codePoint = codePointAt(str, i, len);\n                if (codePointIn(searchChars, codePoint)) {\n                    return true;\n                }\n                i++;\n            } else {\n                if (charIn(searchChars, ch)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n\n    public static boolean charIn(final char[] chars, final char ch) {\n        for (final char c : chars) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static boolean codePointIn(final char[] chars, final int codePoint) {\n        for (int j = 0; j < chars.length; j++) {\n            final char high = chars[j++];\n            if (j == chars.length) {\n                if (codePoint < Character.MIN_LOW_SURROGATE || codePoint > Character.MAX_LOW_SURROGATE) {\n                    return false;\n                }\n            } else {\n                final char low = chars[j];\n                if (codePoint >= toCodePoint(high, low)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static int codePointAt(final CharSequence seq, final int index, final int limit) {\n        if (index < 0 || index >= limit) {\n            throw new IndexOutOfBoundsException(\"index bounds [\" + 0 + \", \" + limit + \")\");\n        }\n        final char c1 = seq.charAt(index++);\n        if (isHighSurrogate(c1) && index < limit) {\n            final char c2 = seq.charAt(index);\n            if (isLowSurrogate(c2)) {\n                return toCodePoint(c1, c2);\n            }\n        }\n        return c1;\n    }\n\n    public static boolean isHighSurrogate(final char ch) {\n        return ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE;\n    }\n\n    public static boolean isLowSurrogate(final char ch) {\n        return ch >= Character.MIN_LOW_SURROGATE && ch <= Character.MAX_LOW_SURROGATE;\n    }\n\n    public static int toCodePoint(final char high, final char low) {\n        return Character.toCodePoint(high, low);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..87d632b9 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,88 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(final CharSequence str, final char[] searchChars) {\n+        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int len = str.length();\n+        final int searchLen = searchChars.length;\n+        final int searchLast = searchLen - 1;\n+        for (int i = 0; i < len; i++) {\n+            final char ch = str.charAt(i);\n+            if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                final int codePoint = codePointAt(str, i, len);\n+                if (codePointIn(searchChars, codePoint)) {\n+                    return true;\n+                }\n+                i++;\n+            } else {\n+                if (charIn(searchChars, ch)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+\n+    public static boolean charIn(final char[] chars, final char ch) {\n+        for (final char c : chars) {\n+            if (c == ch) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean codePointIn(final char[] chars, final int codePoint) {\n+        for (int j = 0; j < chars.length; j++) {\n+            final char high = chars[j++];\n+            if (j == chars.length) {\n+                if (codePoint < Character.MIN_LOW_SURROGATE || codePoint > Character.MAX_LOW_SURROGATE) {\n+                    return false;\n+                }\n+            } else {\n+                final char low = chars[j];\n+                if (codePoint >= toCodePoint(high, low)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static int codePointAt(final CharSequence seq, final int index, final int limit) {\n+        if (index < 0 || index >= limit) {\n+            throw new IndexOutOfBoundsException(\"index bounds [\" + 0 + \", \" + limit + \")\");\n+        }\n+        final char c1 = seq.charAt(index++);\n+        if (isHighSurrogate(c1) && index < limit) {\n+            final char c2 = seq.charAt(index);\n+            if (isLowSurrogate(c2)) {\n+                return toCodePoint(c1, c2);\n+            }\n+        }\n+        return c1;\n+    }\n+\n+    public static boolean isHighSurrogate(final char ch) {\n+        return ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE;\n+    }\n+\n+    public static boolean isLowSurrogate(final char ch) {\n+        return ch >= Character.MIN_LOW_SURROGATE && ch <= Character.MAX_LOW_SURROGATE;\n+    }\n+\n+    public static int toCodePoint(final char high, final char low) {\n+        return Character.toCodePoint(high, low);\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}