{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  if (parent != null) {\n    // Handle function inputs\n    if (parent.getType() == Token.CALL ||\n        parent.getType() == Token.NEW ||\n        parent.getType() == Token.ASSIGN ||\n        (parent.getType() == Token.EXPR_RESULT && n.getType() == Token.FUNCTION)) {\n      handleFunctionInputs(n);\n      return;\n    } else if (parent.getType() == Token.FUNCTION && n.getType() == Token.LP) {\n      handleFunctionInputs(parent);\n      return;\n    }\n\n    // Handle variables and exceptions\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() != Token.NAME) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      default:\n        attachLiteralTypes(n);\n        break;\n    }\n  } else {\n    // Handle top-level functions, variables and exceptions\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      default:\n        attachLiteralTypes(n);\n        break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..fa02e279 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,60 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  if (parent != null) {\n+    // Handle function inputs\n+    if (parent.getType() == Token.CALL ||\n+        parent.getType() == Token.NEW ||\n+        parent.getType() == Token.ASSIGN ||\n+        (parent.getType() == Token.EXPR_RESULT && n.getType() == Token.FUNCTION)) {\n+      handleFunctionInputs(n);\n+      return;\n+    } else if (parent.getType() == Token.FUNCTION && n.getType() == Token.LP) {\n+      handleFunctionInputs(parent);\n+      return;\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    // Handle variables and exceptions\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() != Token.NAME) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      default:\n+        attachLiteralTypes(n);\n+        break;\n     }\n+  } else {\n+    // Handle top-level functions, variables and exceptions\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      default:\n+        attachLiteralTypes(n);\n+        break;\n+    }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}