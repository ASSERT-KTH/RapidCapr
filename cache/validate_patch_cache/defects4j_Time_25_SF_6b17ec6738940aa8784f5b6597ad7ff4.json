{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long nextTransitionWithNewOffset;\n    try {\n        // gets the next transition time considering the local time zone offset\n        nextTransitionWithNewOffset = nextTransition(instantLocal - initialOffset);\n    } catch (IllegalArgumentException e) {\n        // the given instant is within a gap or overlap\n        int offsetBeforeGap = getOffset(nextTransition(instantLocal - initialOffset - 1L));\n        int offsetAfterGap = getOffset(nextTransition(instantLocal - initialOffset + 1L));\n\n        if (offsetBeforeGap == offsetAfterGap) {\n            // this is an overlap, choose the newer transition\n            boolean isBeforeTransition = instantLocal < nextTransition(instantLocal - initialOffset + 1L);\n            return isBeforeTransition ? offsetBeforeGap : offsetAfterGap;\n        } else {\n            // this is a gap, return the offset just before the gap\n            return offsetBeforeGap;\n        }\n    }\n\n    if (nextTransitionWithNewOffset == instantLocal) {\n        // next transition occurs exactly at the given local time\n        int offsetBeforeTransition = getOffset(nextTransitionWithNewOffset - 1L);\n        return initialOffset < offsetBeforeTransition ? getOffset(nextTransitionWithNewOffset - 1L) : offsetBeforeTransition;\n    }\n\n    // gets the next transition time nearest to the given local time\n    long nextTransitionWithInitialOffset = nextTransition(instantLocal - initialOffset);\n\n    if (nextTransitionWithInitialOffset == instantLocal) {\n        // current time occurs exactly at the next transition with initial offset\n        int offsetBeforeTransition = getOffset(nextTransitionWithInitialOffset - 1L);\n        return initialOffset >= offsetBeforeTransition ? initialOffset : getOffset(nextTransitionWithInitialOffset - 1L);\n    }\n\n    if (nextTransitionWithInitialOffset == nextTransitionWithNewOffset) {\n        // the given instant is in an overlap\n        int offsetBeforeOverlap = getOffset(nextTransitionWithInitialOffset - 1L);\n        int offsetAfterOverlap = getOffset(nextTransitionWithInitialOffset);\n        return instantLocal < nextTransitionWithNewOffset ? offsetBeforeOverlap : offsetAfterOverlap;\n    }\n\n    // the given instant is between two separate transitions\n    int newOffset = getOffset(nextTransitionWithNewOffset - 1L);\n    int prevOffset = getOffset(nextTransitionWithInitialOffset - 1L);\n    return newOffset > prevOffset ? prevOffset : newOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6874a364 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,55 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long nextTransitionWithNewOffset;\n+    try {\n+        // gets the next transition time considering the local time zone offset\n+        nextTransitionWithNewOffset = nextTransition(instantLocal - initialOffset);\n+    } catch (IllegalArgumentException e) {\n+        // the given instant is within a gap or overlap\n+        int offsetBeforeGap = getOffset(nextTransition(instantLocal - initialOffset - 1L));\n+        int offsetAfterGap = getOffset(nextTransition(instantLocal - initialOffset + 1L));\n+\n+        if (offsetBeforeGap == offsetAfterGap) {\n+            // this is an overlap, choose the newer transition\n+            boolean isBeforeTransition = instantLocal < nextTransition(instantLocal - initialOffset + 1L);\n+            return isBeforeTransition ? offsetBeforeGap : offsetAfterGap;\n+        } else {\n+            // this is a gap, return the offset just before the gap\n+            return offsetBeforeGap;\n         }\n-        return offsetAdjusted;\n     }\n \n+    if (nextTransitionWithNewOffset == instantLocal) {\n+        // next transition occurs exactly at the given local time\n+        int offsetBeforeTransition = getOffset(nextTransitionWithNewOffset - 1L);\n+        return initialOffset < offsetBeforeTransition ? getOffset(nextTransitionWithNewOffset - 1L) : offsetBeforeTransition;\n+    }\n+\n+    // gets the next transition time nearest to the given local time\n+    long nextTransitionWithInitialOffset = nextTransition(instantLocal - initialOffset);\n+\n+    if (nextTransitionWithInitialOffset == instantLocal) {\n+        // current time occurs exactly at the next transition with initial offset\n+        int offsetBeforeTransition = getOffset(nextTransitionWithInitialOffset - 1L);\n+        return initialOffset >= offsetBeforeTransition ? initialOffset : getOffset(nextTransitionWithInitialOffset - 1L);\n+    }\n+\n+    if (nextTransitionWithInitialOffset == nextTransitionWithNewOffset) {\n+        // the given instant is in an overlap\n+        int offsetBeforeOverlap = getOffset(nextTransitionWithInitialOffset - 1L);\n+        int offsetAfterOverlap = getOffset(nextTransitionWithInitialOffset);\n+        return instantLocal < nextTransitionWithNewOffset ? offsetBeforeOverlap : offsetAfterOverlap;\n+    }\n+\n+    // the given instant is between two separate transitions\n+    int newOffset = getOffset(nextTransitionWithNewOffset - 1L);\n+    int prevOffset = getOffset(nextTransitionWithInitialOffset - 1L);\n+    return newOffset > prevOffset ? prevOffset : newOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}