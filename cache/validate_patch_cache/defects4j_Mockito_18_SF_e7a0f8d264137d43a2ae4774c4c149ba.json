{
    "patch": "public static <T> Optional<T> returnValueFor(Class<T> clazz) {\n    T result = null;\n    try {\n        result = clazz.getDeclaredConstructor().newInstance();\n    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException exception) {\n        // do nothing\n    }\n    return Optional.ofNullable(result);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..80a4a7aaf 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> Optional<T> returnValueFor(Class<T> clazz) {\n+    T result = null;\n+    try {\n+        result = clazz.getDeclaredConstructor().newInstance();\n+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException exception) {\n+        // do nothing\n+    }\n+    return Optional.ofNullable(result);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}