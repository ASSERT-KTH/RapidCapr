{
    "patch": "private void parseDirectives(Node n) {\n  for (Node directive : NodeUtil.getDirectives(n)) {\n    if (isDirective(directive)) {\n      handleDirective(directive);\n    } else {\n      errorReporter.warning(\"Unsupported parser directive\", sourceName,\n                             directive.getLineno());\n    }\n  }\n}\n\nprivate void handleDirective(Node n) {\n  String directive = n.getFirstChild().getString();\n  try {\n    switch (directive) {\n      case \"use strict\":\n        // Remove the directive node.\n        n.detachFromParent();\n        // Record the fact that this block had a 'use strict' directive.  We'll\n        // use this information later when generating code to ensure that the\n        // produced code has a 'use strict' directive only if needed.\n        currentScopeNode.addDirective(new UseStrictDirective());\n        break;\n\n      default:\n        errorReporter.warning(\"Unsupported parser directive\", sourceName,\n                               n.getLineno());\n    }\n  } catch (NullPointerException npe) {\n    // Ignore missing directive tokens.\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..956bd456 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,38 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+private void parseDirectives(Node n) {\n+  for (Node directive : NodeUtil.getDirectives(n)) {\n+    if (isDirective(directive)) {\n+      handleDirective(directive);\n+    } else {\n+      errorReporter.warning(\"Unsupported parser directive\", sourceName,\n+                             directive.getLineno());\n+    }\n+  }\n+}\n+\n+private void handleDirective(Node n) {\n+  String directive = n.getFirstChild().getString();\n+  try {\n+    switch (directive) {\n+      case \"use strict\":\n+        // Remove the directive node.\n+        n.detachFromParent();\n+        // Record the fact that this block had a 'use strict' directive.  We'll\n+        // use this information later when generating code to ensure that the\n+        // produced code has a 'use strict' directive only if needed.\n+        currentScopeNode.addDirective(new UseStrictDirective());\n+        break;\n+\n+      default:\n+        errorReporter.warning(\"Unsupported parser directive\", sourceName,\n+                               n.getLineno());\n+    }\n+  } catch (NullPointerException npe) {\n+    // Ignore missing directive tokens.\n+  }\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}