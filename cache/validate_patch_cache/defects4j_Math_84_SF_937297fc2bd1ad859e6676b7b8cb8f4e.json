{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            return;\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n            } else {\n                // shrink the simplex around best\n                final RealPointValuePair[] shrinkedSimplex = shrinkSimplex(original, comparator);\n                simplex = shrinkedSimplex;\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n        }\n    }\n}\n\n/**\n * Shrinks the simplex around the best point.\n * @param original The original simplex.\n * @param comparator The comparison function.\n * @return The shrinked simplex.\n */\nprivate RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original,\n                                           final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n    final RealPointValuePair best = original[0];\n\n    for (int i = 0; i < original.length; i++) {\n        final RealPointValuePair point = original[i];\n\n        // shrink the point towards the best point\n        final double[] coordinates = new double[point.getPoint().length];\n        for (int j = 0; j < coordinates.length; j++) {\n            coordinates[j] = best.getPoint()[j] + sigma * (point.getPoint()[j] - best.getPoint()[j]);\n        }\n\n        final double value = computeObjectiveValue(coordinates);\n        final RealPointValuePair newPoint = new RealPointValuePair(coordinates, value);\n        newSimplex[i] = newPoint;\n    }\n\n    Arrays.sort(newSimplex, comparator);\n\n    return newSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..8d364edb2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,86 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        } else {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n+            } else {\n+                // shrink the simplex around best\n+                final RealPointValuePair[] shrinkedSimplex = shrinkSimplex(original, comparator);\n+                simplex = shrinkedSimplex;\n+            }\n \n             // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n             }\n+        }\n+    }\n+}\n \n+/**\n+ * Shrinks the simplex around the best point.\n+ * @param original The original simplex.\n+ * @param comparator The comparison function.\n+ * @return The shrinked simplex.\n+ */\n+private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original,\n+                                           final Comparator<RealPointValuePair> comparator) {\n+\n+    final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n+    final RealPointValuePair best = original[0];\n+\n+    for (int i = 0; i < original.length; i++) {\n+        final RealPointValuePair point = original[i];\n+\n+        // shrink the point towards the best point\n+        final double[] coordinates = new double[point.getPoint().length];\n+        for (int j = 0; j < coordinates.length; j++) {\n+            coordinates[j] = best.getPoint()[j] + sigma * (point.getPoint()[j] - best.getPoint()[j]);\n         }\n \n+        final double value = computeObjectiveValue(coordinates);\n+        final RealPointValuePair newPoint = new RealPointValuePair(coordinates, value);\n+        newSimplex[i] = newPoint;\n     }\n \n+    Arrays.sort(newSimplex, comparator);\n+\n+    return newSimplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}