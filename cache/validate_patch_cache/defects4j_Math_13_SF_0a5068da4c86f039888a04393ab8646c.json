{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (!isPositiveSemidefinite(m)) {\n        throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n    }\n\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrt(d));\n\n    final RealMatrix result = v.multiply(sqrtD).multiply(v.transpose());\n\n    if (!isCloseEnough(result.multiply(result), m)) {\n        throw new IllegalStateException(\"Square root computation failed\");\n    }\n\n    return result;\n}\n\nprivate double[] sqrt(RealVector vector) {\n    final int n = vector.getDimension();\n    final double[] result = new double[n];\n    for (int i = 0; i < n ;i++) {\n        result[i] = Math.sqrt(vector.getEntry(i));\n    }\n    return result;\n}\n\nprivate boolean isPositiveSemidefinite(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenvalues = dec.getRealEigenvalues();\n \n    for(int i = 0; i < eigenvalues.length ; i++) {\n        if (eigenvalues[i] < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean isCloseEnough(RealMatrix m1, RealMatrix m2) {\n    final double tolerance = 1e-9;\n    final double normDiff = m1.subtract(m2).getFrobeniusNorm();\n    return normDiff < tolerance * m1.getFrobeniusNorm();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d4d90d0c3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,51 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (!isPositiveSemidefinite(m)) {\n+        throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n     }\n+\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrt(d));\n+\n+    final RealMatrix result = v.multiply(sqrtD).multiply(v.transpose());\n+\n+    if (!isCloseEnough(result.multiply(result), m)) {\n+        throw new IllegalStateException(\"Square root computation failed\");\n+    }\n+\n+    return result;\n+}\n+\n+private double[] sqrt(RealVector vector) {\n+    final int n = vector.getDimension();\n+    final double[] result = new double[n];\n+    for (int i = 0; i < n ;i++) {\n+        result[i] = Math.sqrt(vector.getEntry(i));\n+    }\n+    return result;\n+}\n+\n+private boolean isPositiveSemidefinite(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+ \n+    for(int i = 0; i < eigenvalues.length ; i++) {\n+        if (eigenvalues[i] < 0) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private boolean isCloseEnough(RealMatrix m1, RealMatrix m2) {\n+    final double tolerance = 1e-9;\n+    final double normDiff = m1.subtract(m2).getFrobeniusNorm();\n+    return normDiff < tolerance * m1.getFrobeniusNorm();\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}