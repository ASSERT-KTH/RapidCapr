{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n                            boolean conditional) {\n  if (n == null) {\n    return;\n  }\n  switch (n.getType()) {\n    case Token.SCRIPT:\n    case Token.BLOCK:\n    case Token.FUNCTION:\n      return;\n\n    case Token.WHILE:\n    case Token.DO:\n    case Token.IF:\n      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n          conditional);\n      return;\n\n    case Token.FOR:\n      if (!NodeUtil.isForIn(n)) {\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n      } else {\n        // for(x in y) {...}\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isVar(lhs)) {\n          // for(var x in y) {...}\n          lhs = lhs.getLastChild();\n        }\n        addToSetIfLocal(lhs, kill);\n        if (rhs.getType() == Token.ARRAYLIT) {\n          for (Node nameNode = rhs.getFirstChild(); nameNode != null; nameNode = nameNode.getNext()) {\n            if (nameNode.getType() == Token.EMPTY) {\n              continue;\n            }\n            // If the name of the variable we are declaring in this iteration is declared\n            // elsewhere, we only want to mark a kill without a gen (i.e. not read the original value).\n            String name = nameNode.getFirstChild().getString();\n            if (nameNode.hasChildren() && varDeclaredInside(nameNode, name)) {\n              addToSetIfLocal(lhs, kill);\n            } else {\n              addToSetIfLocal(lhs, kill);\n              addToSetIfLocal(lhs, gen);\n            }\n          }\n        } else {\n          addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n      }\n      return;\n\n    case Token.VAR:\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.hasChildren()) {\n          computeGenKill(child.getFirstChild(), gen, kill, conditional);\n          if (!conditional) {\n            addToSetIfLocal(child.getFirstChild(), kill);\n          }\n        }\n      }\n      return;\n\n    case Token.AND:\n    case Token.OR:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      // May short circuit.\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n\n    case Token.HOOK:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      // Assume both sides are conditional.\n      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n\n    case Token.NAME:\n      if (isArgumentsName(n)) {\n        markAllParametersEscaped();\n      } else {\n        addToSetIfLocal(n, gen);\n      }\n      return;\n\n    default:\n      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n        Node lhs = n.getFirstChild();\n        if (!conditional) {\n          addToSetIfLocal(lhs, kill);\n        }\n        if (!NodeUtil.isAssign(n)) {\n          // assignments such as a += 1 reads a.\n          addToSetIfLocal(lhs, gen);\n        }\n        computeGenKill(lhs.getNext(), gen, kill, conditional);\n      } else {\n        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n          computeGenKill(child, gen, kill, conditional);\n        }\n      }\n      return;\n  }\n}\n\n/**\n * Determines whether a variable declaration of the given name exists in the ancestor tree.\n *\n * @return Whether the named variable is declared inside the given node.\n */\nprivate boolean varDeclaredInside(Node n, String name) {\n  Node ancestor = n.getParent();\n  while (ancestor != null) {\n    switch (ancestor.getType()) {\n      case Token.SCRIPT:\n      case Token.FUNCTION:\n      case Token.CATCH:\n        return false;\n\n      case Token.BLOCK:\n        // Traverse all named child functions.\n        for (Node child = ancestor.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isFunction()) {\n            Node lValue = child.getFirstChild();\n            if (lValue != null && lValue.getString().equals(name)) {\n              return true;\n            }\n          }\n        }\n        // Traverse the block's siblings.\n        for (Node sibling = ancestor.getNext(); sibling != null;\n             sibling = sibling.getNext()) {\n          if (isDeclaration(sibling) && sibling.getFirstChild().getString().equals(name)) {\n            return true;\n          }\n        }\n        break;\n\n      case Token.CASE:\n      case Token.DEFAULT:\n        ancestor = ancestor.getParent(); // switch\n        break;\n\n      default:\n        if (isDeclaration(ancestor) && ancestor.getFirstChild().getString().equals(name)) {\n          return true;\n        }\n        break;\n\n    }\n    ancestor = ancestor.getParent();\n  }\n  return false;\n}\n\n/**\n * Whether a node is a VAR or CONST declaration.\n */\nprivate boolean isDeclaration(Node n) {\n  int type = n.getType();\n  return type == Token.VAR || type == Token.CONST;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..6a597dbc 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,169 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n+private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+                            boolean conditional) {\n+  if (n == null) {\n+    return;\n+  }\n+  switch (n.getType()) {\n+    case Token.SCRIPT:\n+    case Token.BLOCK:\n+    case Token.FUNCTION:\n+      return;\n \n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n+    case Token.WHILE:\n+    case Token.DO:\n+    case Token.IF:\n+      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n+          conditional);\n+      return;\n \n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n+    case Token.FOR:\n+      if (!NodeUtil.isForIn(n)) {\n         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n             conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+      } else {\n+        // for(x in y) {...}\n+        Node lhs = n.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (NodeUtil.isVar(lhs)) {\n+          // for(var x in y) {...}\n+          lhs = lhs.getLastChild();\n         }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+        addToSetIfLocal(lhs, kill);\n+        if (rhs.getType() == Token.ARRAYLIT) {\n+          for (Node nameNode = rhs.getFirstChild(); nameNode != null; nameNode = nameNode.getNext()) {\n+            if (nameNode.getType() == Token.EMPTY) {\n+              continue;\n+            }\n+            // If the name of the variable we are declaring in this iteration is declared\n+            // elsewhere, we only want to mark a kill without a gen (i.e. not read the original value).\n+            String name = nameNode.getFirstChild().getString();\n+            if (nameNode.hasChildren() && varDeclaredInside(nameNode, name)) {\n+              addToSetIfLocal(lhs, kill);\n+            } else {\n+              addToSetIfLocal(lhs, kill);\n+              addToSetIfLocal(lhs, gen);\n             }\n           }\n-        }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n         } else {\n-          addToSetIfLocal(n, gen);\n+          addToSetIfLocal(lhs, gen);\n+          computeGenKill(rhs, gen, kill, conditional);\n         }\n-        return;\n+      }\n+      return;\n \n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n+    case Token.VAR:\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.hasChildren()) {\n+          computeGenKill(child.getFirstChild(), gen, kill, conditional);\n           if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n+            addToSetIfLocal(child.getFirstChild(), kill);\n           }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n+        }\n+      }\n+      return;\n+\n+    case Token.AND:\n+    case Token.OR:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      // May short circuit.\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      return;\n+\n+    case Token.HOOK:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      // Assume both sides are conditional.\n+      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      return;\n+\n+    case Token.NAME:\n+      if (isArgumentsName(n)) {\n+        markAllParametersEscaped();\n+      } else {\n+        addToSetIfLocal(n, gen);\n+      }\n+      return;\n+\n+    default:\n+      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+        Node lhs = n.getFirstChild();\n+        if (!conditional) {\n+          addToSetIfLocal(lhs, kill);\n+        }\n+        if (!NodeUtil.isAssign(n)) {\n+          // assignments such as a += 1 reads a.\n+          addToSetIfLocal(lhs, gen);\n+        }\n+        computeGenKill(lhs.getNext(), gen, kill, conditional);\n+      } else {\n+        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+          computeGenKill(child, gen, kill, conditional);\n+        }\n+      }\n+      return;\n+  }\n+}\n+\n+/**\n+ * Determines whether a variable declaration of the given name exists in the ancestor tree.\n+ *\n+ * @return Whether the named variable is declared inside the given node.\n+ */\n+private boolean varDeclaredInside(Node n, String name) {\n+  Node ancestor = n.getParent();\n+  while (ancestor != null) {\n+    switch (ancestor.getType()) {\n+      case Token.SCRIPT:\n+      case Token.FUNCTION:\n+      case Token.CATCH:\n+        return false;\n+\n+      case Token.BLOCK:\n+        // Traverse all named child functions.\n+        for (Node child = ancestor.getFirstChild(); child != null; child = child.getNext()) {\n+          if (child.isFunction()) {\n+            Node lValue = child.getFirstChild();\n+            if (lValue != null && lValue.getString().equals(name)) {\n+              return true;\n+            }\n           }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+        }\n+        // Traverse the block's siblings.\n+        for (Node sibling = ancestor.getNext(); sibling != null;\n+             sibling = sibling.getNext()) {\n+          if (isDeclaration(sibling) && sibling.getFirstChild().getString().equals(name)) {\n+            return true;\n           }\n         }\n-        return;\n+        break;\n+\n+      case Token.CASE:\n+      case Token.DEFAULT:\n+        ancestor = ancestor.getParent(); // switch\n+        break;\n+\n+      default:\n+        if (isDeclaration(ancestor) && ancestor.getFirstChild().getString().equals(name)) {\n+          return true;\n+        }\n+        break;\n+\n     }\n+    ancestor = ancestor.getParent();\n   }\n+  return false;\n+}\n+\n+/**\n+ * Whether a node is a VAR or CONST declaration.\n+ */\n+private boolean isDeclaration(Node n) {\n+  int type = n.getType();\n+  return type == Token.VAR || type == Token.CONST;\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}