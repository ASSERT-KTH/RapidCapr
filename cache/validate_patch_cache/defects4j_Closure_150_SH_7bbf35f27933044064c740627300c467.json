{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(n)) {\n            // Breaking to prevent falling through to `attachFunctionNameHooks`\n            defineDeclaredFunction(n, parent);\n            break;\n          }\n          attachFunctionNameHooks(n);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          // Catch function inputs\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n          }\n          break;\n        default:\n          break; // add this line\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a0393008 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,10 +1451,12 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            // Breaking to prevent falling through to `attachFunctionNameHooks`\n+            defineDeclaredFunction(n, parent);\n+            break;\n           }\n-          defineDeclaredFunction(n, parent);\n+          attachFunctionNameHooks(n);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1462,6 +1464,14 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          // Catch function inputs\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+        default:\n+          break; // add this line\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}