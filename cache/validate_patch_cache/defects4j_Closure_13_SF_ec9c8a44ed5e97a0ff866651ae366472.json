{
    "patch": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    int visits = 0;\n    boolean changed; // remove initialization\n\n    do {\n        changed = false; // initialize inside loop\n        Node c = node.getFirstChild();\n        while (c != null) {\n            traverse(c);\n\n            if (c.isChanged()) {\n                changed = true; // update the changed flag if child node was changed\n            }\n\n            Node next = c.getNext();\n            c = next;\n        }\n\n        if (changed) {\n            visit(node);\n        }\n        visits++;\n\n        Preconditions.checkState(visits < 10000, \"too many iterations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..22187a75 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,42 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n+private void traverse(Node node) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n     if (!shouldVisit(node)) {\n-      return;\n+        return;\n     }\n \n     int visits = 0;\n+    boolean changed; // remove initialization\n+\n     do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+        changed = false; // initialize inside loop\n+        Node c = node.getFirstChild();\n+        while (c != null) {\n+            traverse(c);\n+\n+            if (c.isChanged()) {\n+                changed = true; // update the changed flag if child node was changed\n+            }\n+\n+            Node next = c.getNext();\n+            c = next;\n+        }\n \n-      visit(node);\n-      visits++;\n+        if (changed) {\n+            visit(node);\n+        }\n+        visits++;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n+        Preconditions.checkState(visits < 10000, \"too many iterations\");\n     } while (shouldRetraverse(node));\n \n     exitNode(node);\n-  }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}