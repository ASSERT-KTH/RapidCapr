{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] expandedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = expandedSimplex;\n            } else {\n                simplex = reflected.getPoint() != best.getPoint() ?\n                    reflected.getPoint() != original[original.length - 1].getPoint() ?\n                        replaceWorst(original, reflected, comparator) :\n                        contractInside(original, best, comparator) :\n                    contractOutside(original, best, comparator);\n            }\n\n        } else {\n            simplex = contractInside(original, best, comparator);\n        }\n\n        // check convergence\n        if (isConverged(original[0], simplex[0])) {\n            return;\n        }\n\n    }\n\n}\n\nprivate RealPointValuePair[] replaceWorst(final RealPointValuePair[] original,\n        final RealPointValuePair replacement,\n        final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[original.length];\n    for (int i = 0; i < reflectedSimplex.length; i++) {\n        reflectedSimplex[i] = original[i].getPoint() != original[original.length - 1].getPoint() ?\n                original[i] : replacement;\n    }\n    Arrays.sort(reflectedSimplex, comparator);\n    return reflectedSimplex;\n\n}\n\nprivate RealPointValuePair[] contractInside(final RealPointValuePair[] original, \n        final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    for (int i = 1; i < original.length; i++) {\n        final double[] contracted = new double[original[i].getPoint().length];\n        for (int j = 0; j < contracted.length; j++) {\n            contracted[j] = contractionFactor * best.getPoint()[j]\n                    + (1 - contractionFactor) * original[i].getPoint()[j];\n        }\n        final double value = evaluateObjective(contracted);\n        contractedSimplex[i - 1] = new RealPointValuePair(contracted, value);\n    }\n    contractedSimplex[original.length - 1] = original[0];\n    Arrays.sort(contractedSimplex, comparator);\n    return contractedSimplex;\n\n}\n\nprivate RealPointValuePair[] contractOutside(final RealPointValuePair[] original, \n        final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    for (int i = 0; i < original.length; i++) {\n        final double[] contracted = new double[original[i].getPoint().length];\n        for (int j = 0; j < contracted.length; j++) {\n            contracted[j] = contractionFactor * original[0].getPoint()[j]\n                    + (1 - contractionFactor) * original[i].getPoint()[j];\n        }\n        final double value = evaluateObjective(contracted);\n        contractedSimplex[i] = new RealPointValuePair(contracted, value);\n    }\n    Arrays.sort(contractedSimplex, comparator);\n    return contractedSimplex;\n\n}\n\nprivate boolean isConverged(final RealPointValuePair oldVertex,\n                            final RealPointValuePair newVertex) {\n    final double[] p = oldVertex.getPoint();\n    final double[] v = newVertex.getPoint();\n    double sum1 = 0;\n    double sum2 = 0;\n    double max = 0;\n    for (int i = 0; i < p.length; i++) {\n        final double delta = FastMath.abs(v[i] - p[i]);\n        final double scale = FastMath.max(FastMath.abs(v[i]), FastMath.abs(p[i]));\n        sum1 += delta;\n        sum2 += scale;\n        max = FastMath.max(max, delta / scale);\n    }\n    if (sum1 < getAbsoluteThreshold() || max < getRelativeThreshold()) {\n        return true;\n    } else if (getIterations() >= getMaxIterations()) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..cdbac59b6 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,120 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] expandedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = expandedSimplex;\n+            } else {\n+                simplex = reflected.getPoint() != best.getPoint() ?\n+                    reflected.getPoint() != original[original.length - 1].getPoint() ?\n+                        replaceWorst(original, reflected, comparator) :\n+                        contractInside(original, best, comparator) :\n+                    contractOutside(original, best, comparator);\n+            }\n \n-            incrementIterationsCounter();\n+        } else {\n+            simplex = contractInside(original, best, comparator);\n+        }\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // check convergence\n+        if (isConverged(original[0], simplex[0])) {\n+            return;\n+        }\n+\n+    }\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+}\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+private RealPointValuePair[] replaceWorst(final RealPointValuePair[] original,\n+        final RealPointValuePair replacement,\n+        final Comparator<RealPointValuePair> comparator) {\n \n-                return;\n+    final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 0; i < reflectedSimplex.length; i++) {\n+        reflectedSimplex[i] = original[i].getPoint() != original[original.length - 1].getPoint() ?\n+                original[i] : replacement;\n+    }\n+    Arrays.sort(reflectedSimplex, comparator);\n+    return reflectedSimplex;\n \n-            }\n+}\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+private RealPointValuePair[] contractInside(final RealPointValuePair[] original, \n+        final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n \n-            // check convergence\n-                return;\n-            }\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] contracted = new double[original[i].getPoint().length];\n+        for (int j = 0; j < contracted.length; j++) {\n+            contracted[j] = contractionFactor * best.getPoint()[j]\n+                    + (1 - contractionFactor) * original[i].getPoint()[j];\n+        }\n+        final double value = evaluateObjective(contracted);\n+        contractedSimplex[i - 1] = new RealPointValuePair(contracted, value);\n+    }\n+    contractedSimplex[original.length - 1] = original[0];\n+    Arrays.sort(contractedSimplex, comparator);\n+    return contractedSimplex;\n+\n+}\n+\n+private RealPointValuePair[] contractOutside(final RealPointValuePair[] original, \n+        final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n \n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 0; i < original.length; i++) {\n+        final double[] contracted = new double[original[i].getPoint().length];\n+        for (int j = 0; j < contracted.length; j++) {\n+            contracted[j] = contractionFactor * original[0].getPoint()[j]\n+                    + (1 - contractionFactor) * original[i].getPoint()[j];\n         }\n+        final double value = evaluateObjective(contracted);\n+        contractedSimplex[i] = new RealPointValuePair(contracted, value);\n+    }\n+    Arrays.sort(contractedSimplex, comparator);\n+    return contractedSimplex;\n+\n+}\n \n+private boolean isConverged(final RealPointValuePair oldVertex,\n+                            final RealPointValuePair newVertex) {\n+    final double[] p = oldVertex.getPoint();\n+    final double[] v = newVertex.getPoint();\n+    double sum1 = 0;\n+    double sum2 = 0;\n+    double max = 0;\n+    for (int i = 0; i < p.length; i++) {\n+        final double delta = FastMath.abs(v[i] - p[i]);\n+        final double scale = FastMath.max(FastMath.abs(v[i]), FastMath.abs(p[i]));\n+        sum1 += delta;\n+        sum2 += scale;\n+        max = FastMath.max(max, delta / scale);\n     }\n+    if (sum1 < getAbsoluteThreshold() || max < getRelativeThreshold()) {\n+        return true;\n+    } else if (getIterations() >= getMaxIterations()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}