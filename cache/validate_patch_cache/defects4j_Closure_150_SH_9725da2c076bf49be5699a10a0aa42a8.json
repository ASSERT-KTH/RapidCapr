{
    "patch": "private boolean isDeclaredFunction(Node n, Node parent) {\n    if (n == null || parent == null) {\n        return false;\n    }\n\n    // Check for function declarations (i.e., `function foo(){}`)\n    if (n.isFunction()) {\n        return true;\n    }\n\n    // Check for functions that are assigned directly to a name (i.e., `foo = function() {}`)\n    if (n.isAssign() && n.getFirstChild() != null && n.getFirstChild().isFunction()) {\n        Node nameNode = n.getFirstChild();\n        return nameNode.isName() && nameNode.getString().equals(parent.getString());\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..8ff36733 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,24 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+private boolean isDeclaredFunction(Node n, Node parent) {\n+    if (n == null || parent == null) {\n+        return false;\n+    }\n+\n+    // Check for function declarations (i.e., `function foo(){}`)\n+    if (n.isFunction()) {\n+        return true;\n+    }\n+\n+    // Check for functions that are assigned directly to a name (i.e., `foo = function() {}`)\n+    if (n.isAssign() && n.getFirstChild() != null && n.getFirstChild().isFunction()) {\n+        Node nameNode = n.getFirstChild();\n+        return nameNode.isName() && nameNode.getString().equals(parent.getString());\n+    }\n+\n+    return false;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}