{
    "patch": "        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (mockCandidate != null && field.getType().isInstance(mockCandidate)) {\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, mockCandidate);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..1ea75c9e0 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,17 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (mockCandidate != null && field.getType().isInstance(mockCandidate)) {\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, mockCandidate);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}