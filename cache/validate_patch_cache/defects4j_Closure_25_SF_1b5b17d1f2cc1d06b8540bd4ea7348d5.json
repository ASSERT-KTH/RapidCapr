{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          // Instantiate the constructor\n          // to get the type of the constructed object.\n          Node parent = n.getParent();\n          JSTypeRegistry registry = getTypedScope().getRegistry();\n          Node instantiation = new Node(Token.NEW, constructor.cloneTree(),\n              Node.newString(Token.EMPTY));\n          constructorType.instantiateGenericsFromArgumentTypes(\n              ct.getTemplateTypeMap(), ct.getTypeParameters(),\n              scope, registry);\n          JSType instantiatedConstructorType = instantiation.getJSType();\n          // Constrain the instantiated constructor type by the\n          // type from which we are instantiating.\n          if (instantiatedConstructorType != null) {\n            instantiatedConstructorType =\n                instantiatedConstructorType.specialize(\n                    registry.createTemplatizedType(ct, type));\n          }\n          if (instantiatedConstructorType != null) {\n            type = instantiatedConstructorType.toMaybeFunctionType().getInstanceType();\n          }\n          parent.addChildAfter(instantiation, n);\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..6e065ecb 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1051,7 +1051,27 @@ class TypeInference\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+          // Instantiate the constructor\n+          // to get the type of the constructed object.\n+          Node parent = n.getParent();\n+          JSTypeRegistry registry = getTypedScope().getRegistry();\n+          Node instantiation = new Node(Token.NEW, constructor.cloneTree(),\n+              Node.newString(Token.EMPTY));\n+          constructorType.instantiateGenericsFromArgumentTypes(\n+              ct.getTemplateTypeMap(), ct.getTypeParameters(),\n+              scope, registry);\n+          JSType instantiatedConstructorType = instantiation.getJSType();\n+          // Constrain the instantiated constructor type by the\n+          // type from which we are instantiating.\n+          if (instantiatedConstructorType != null) {\n+            instantiatedConstructorType =\n+                instantiatedConstructorType.specialize(\n+                    registry.createTemplatizedType(ct, type));\n+          }\n+          if (instantiatedConstructorType != null) {\n+            type = instantiatedConstructorType.toMaybeFunctionType().getInstanceType();\n+          }\n+          parent.addChildAfter(instantiation, n);\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}