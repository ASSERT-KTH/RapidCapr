{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg = argList.getLastChild();\n  while (lastArg != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (var == null) {\n      // This arg has apparently already been removed.\n      lastArg = lastArg.getPrevious();\n      continue;\n    }\n    if (!referenced.contains(var)) {\n      lastArg = lastArg.getPrevious();\n      argList.removeChild(lastArg.getNext());\n      compiler.reportCodeChange();\n      continue;  // Keep inspecting args from the end.\n    }\n    break;  // Found a referenced arg, stop inspection.\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..78a02f50 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg = argList.getLastChild();\n+  while (lastArg != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (var == null) {\n+      // This arg has apparently already been removed.\n+      lastArg = lastArg.getPrevious();\n+      continue;\n+    }\n+    if (!referenced.contains(var)) {\n+      lastArg = lastArg.getPrevious();\n+      argList.removeChild(lastArg.getNext());\n+      compiler.reportCodeChange();\n+      continue;  // Keep inspecting args from the end.\n+    }\n+    break;  // Found a referenced arg, stop inspection.\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}