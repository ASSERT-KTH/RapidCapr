{
    "patch": "private void init() {\n    Matcher patternMatcher = formatPattern.matcher(pattern);\n    if (!patternMatcher.matches()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n    currentFormatField = \"\";\n    Strategy currentStrategy = null;\n    StringBuilder regex = new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    for (int i = 0; i < pattern.length(); i++) {\n        char c = pattern.charAt(i);\n        if (currentStrategy != null && !currentStrategy.addRegex(this, regex, c)) {\n            collector.add(currentStrategy);\n            currentStrategy = null;\n        }\n        if (currentStrategy == null) {\n            currentFormatField = String.valueOf(c);\n            currentStrategy = getStrategy(currentFormatField);\n        } else {\n            currentFormatField += c;\n        }\n    }\n    if (currentStrategy != null) {\n        collector.add(currentStrategy);\n    }\n    strategies = collector.toArray(new Strategy[collector.size()]);\n    parsePattern = Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..1655dc23 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,37 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n-\n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+private void init() {\n+    Matcher patternMatcher = formatPattern.matcher(pattern);\n+    if (!patternMatcher.matches()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n+    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+    currentFormatField = \"\";\n+    Strategy currentStrategy = null;\n+    StringBuilder regex = new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n-            }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n-        }\n-        if(currentStrategy.addRegex(this, regex)) {\n+    for (int i = 0; i < pattern.length(); i++) {\n+        char c = pattern.charAt(i);\n+        if (currentStrategy != null && !currentStrategy.addRegex(this, regex, c)) {\n             collector.add(currentStrategy);\n+            currentStrategy = null;\n+        }\n+        if (currentStrategy == null) {\n+            currentFormatField = String.valueOf(c);\n+            currentStrategy = getStrategy(currentFormatField);\n+        } else {\n+            currentFormatField += c;\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n     }\n+    if (currentStrategy != null) {\n+        collector.add(currentStrategy);\n+    }\n+    strategies = collector.toArray(new Strategy[collector.size()]);\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "error: method addRegex in interface Strategy cannot be applied to given types;",
    "test_result": "ERROR"
}