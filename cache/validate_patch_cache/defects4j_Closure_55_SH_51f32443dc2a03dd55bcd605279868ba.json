{
    "patch": "    if (NodeUtil.isFunctionExpression(n)) {\n      return true;\n    } else if (n.getType() == Token.CALL) {\n      return isReduceableCall(n);\n    } else {\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..b2f31bed 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,13 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      return true;\n+    } else if (n.getType() == Token.CALL) {\n+      return isReduceableCall(n);\n+    } else {\n+      return false;\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}