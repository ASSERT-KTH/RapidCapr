{
    "patch": "public Fraction reduce() {\n    if (numerator == 0) {\n        return Fraction.ZERO;\n    }\n\n    // Calculate the absolute values of the numerator and denominator\n    int absNumerator = Math.abs(numerator);\n    int absDenominator = Math.abs(denominator);\n\n    // Calculate the greatest common divisor\n    int gcd = greatestCommonDivisor(absNumerator, absDenominator);\n\n    // If gcd is 1, the fraction is already reduced\n    if (gcd == 1) {\n        return this;\n    }\n\n    // Calculate the sign of the resulting fraction\n    int sign = numerator < 0 ? -1 : 1;\n    sign *= denominator < 0 ? -1 : 1;\n\n    // Return the reduced fraction with the correct sign\n    return new Fraction(sign * absNumerator / gcd, absDenominator / gcd);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..59373f1e 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,31 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    if (numerator == 0) {\n+        return Fraction.ZERO;\n     }\n \n+    // Calculate the absolute values of the numerator and denominator\n+    int absNumerator = Math.abs(numerator);\n+    int absDenominator = Math.abs(denominator);\n+\n+    // Calculate the greatest common divisor\n+    int gcd = greatestCommonDivisor(absNumerator, absDenominator);\n+\n+    // If gcd is 1, the fraction is already reduced\n+    if (gcd == 1) {\n+        return this;\n+    }\n+\n+    // Calculate the sign of the resulting fraction\n+    int sign = numerator < 0 ? -1 : 1;\n+    sign *= denominator < 0 ? -1 : 1;\n+\n+    // Return the reduced fraction with the correct sign\n+    return new Fraction(sign * absNumerator / gcd, absDenominator / gcd);\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<0/1> was not:<0/1>",
    "test_result": "FAIL"
}