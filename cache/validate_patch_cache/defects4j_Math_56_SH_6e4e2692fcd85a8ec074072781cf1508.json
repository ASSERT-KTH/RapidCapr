{
    "patch": "int countBefore = 0;\nfor (int i = 0; i < last; i++) {\n    int idx = 0;\n    final int offset = uniCounterOffset[i];\n    while (countBefore + idx * offset <= index) {\n        countBefore += idx * offset;\n        ++idx;\n    }\n    --idx;\n    countBefore += offset * idx;\n    indices[i] = idx;\n}\n\nif (countBefore < index) {\n    for (int i = last - 1; i >= 0; i--) {\n        if (indices[i] < uniCounter[i] - 1) {\n            ++indices[i];\n            countBefore += uniCounterOffset[i];\n            if (countBefore > index) {\n                break;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..5547513f4 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,30 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+int countBefore = 0;\n+for (int i = 0; i < last; i++) {\n+    int idx = 0;\n+    final int offset = uniCounterOffset[i];\n+    while (countBefore + idx * offset <= index) {\n+        countBefore += idx * offset;\n+        ++idx;\n+    }\n+    --idx;\n+    countBefore += offset * idx;\n+    indices[i] = idx;\n+}\n+\n+if (countBefore < index) {\n+    for (int i = last - 1; i >= 0; i--) {\n+        if (indices[i] < uniCounter[i] - 1) {\n+            ++indices[i];\n+            countBefore += uniCounterOffset[i];\n+            if (countBefore > index) {\n+                break;\n+            }\n         }\n-        --idx;\n-        indices[last] = idx;\n+    }\n+}\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}