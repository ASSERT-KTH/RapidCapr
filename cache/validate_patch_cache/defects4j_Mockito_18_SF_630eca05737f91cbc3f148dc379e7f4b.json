{
    "patch": "public static Map<String, String> removeValuesContainingChar(Map<String, String> map, char ch) {\n    Map<String, String> newMap = new HashMap<>();\n    for (Map.Entry<String, String> entry : map.entrySet()) {\n        String value = entry.getValue();\n        if (value == null || value.indexOf(ch) < 0) {\n            newMap.put(entry.getKey(), value);\n        }\n    }\n    return newMap;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..47c4fb46c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,16 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, String> removeValuesContainingChar(Map<String, String> map, char ch) {\n+    Map<String, String> newMap = new HashMap<>();\n+    for (Map.Entry<String, String> entry : map.entrySet()) {\n+        String value = entry.getValue();\n+        if (value == null || value.indexOf(ch) < 0) {\n+            newMap.put(entry.getKey(), value);\n+        }\n+    }\n+    return newMap;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}