{
    "patch": "public boolean canBeCalled() {\n    return !isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        List<String> propertyNames = new ArrayList<>();\n        for (ObjectType current = this; current != null && !current.isNativeObjectType()\n             && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n             current = current.getImplicitPrototype()) {\n            for (String property : current.getOwnPropertyNames()) {\n                if (!propertyNames.contains(property)) {\n                    propertyNames.add(property);\n                }\n            }\n        }\n\n        Collections.sort(propertyNames);\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        int maxLength = propertyNames.size() - 1;\n        for (int j = 0; j <= maxLength; j++) {\n            String property = propertyNames.get(j);\n            sb.append(property);\n            sb.append(\": \");\n            sb.append(getPropertyType(property).toString());\n\n            if (j < maxLength) {\n                sb.append(\", \");\n            } else if (j == MAX_PRETTY_PRINTED_PROPERTIES && j != maxLength) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..5cd98671 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,58 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return !isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        List<String> propertyNames = new ArrayList<>();\n+        for (ObjectType current = this; current != null && !current.isNativeObjectType()\n+             && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+             current = current.getImplicitPrototype()) {\n+            for (String property : current.getOwnPropertyNames()) {\n+                if (!propertyNames.contains(property)) {\n+                    propertyNames.add(property);\n+                }\n+            }\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        Collections.sort(propertyNames);\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+\n+        int i = 0;\n+        int maxLength = propertyNames.size() - 1;\n+        for (int j = 0; j <= maxLength; j++) {\n+            String property = propertyNames.get(j);\n+            sb.append(property);\n+            sb.append(\": \");\n+            sb.append(getPropertyType(property).toString());\n+\n+            if (j < maxLength) {\n+                sb.append(\", \");\n+            } else if (j == MAX_PRETTY_PRINTED_PROPERTIES && j != maxLength) {\n+                sb.append(\", ...\");\n+                break;\n+            }\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n-    }\n-  }\n+        return \"{...}\";\n+   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}