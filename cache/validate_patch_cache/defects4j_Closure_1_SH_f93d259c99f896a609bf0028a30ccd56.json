{
    "patch": "// Strip unreferenced args off the end of the function declaration.\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node firstUnreferencedArg = null;\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (referenced.contains(fnScope.getVar(arg.getString()))) {\n          continue;\n        } else if (firstUnreferencedArg == null) {\n          firstUnreferencedArg = arg;\n        }\n      }\n      if (firstUnreferencedArg != null) {\n        // Eliminate unreferenced arguments.\n        while (argList.getLastChild() != firstUnreferencedArg) {\n          argList.removeChildAfter(argList.getLastChild().getPrevious());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6d0df109 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node firstUnreferencedArg = null;\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (referenced.contains(fnScope.getVar(arg.getString()))) {\n+          continue;\n+        } else if (firstUnreferencedArg == null) {\n+          firstUnreferencedArg = arg;\n+        }\n+      }\n+      if (firstUnreferencedArg != null) {\n+        // Eliminate unreferenced arguments.\n+        while (argList.getLastChild() != firstUnreferencedArg) {\n+          argList.removeChildAfter(argList.getLastChild().getPrevious());\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}