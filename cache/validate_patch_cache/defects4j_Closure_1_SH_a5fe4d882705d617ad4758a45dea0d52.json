{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    boolean createUnreferencedParameterVars = false;\n    if (!modifyCallers) {\n      int argNum = 0;\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (referenced.contains(var)) {\n          if (!arg.isDefaultValue()) {\n            ++argNum;\n          }\n          continue;\n        }\n        if (arg.isDefaultValue()) {\n          ++argNum;\n          continue;\n        }\n        if (!createUnreferencedParameterVars) {\n          createUnreferencedParameterVars = true;\n          Node firstParameter = argList.getFirstChild();\n          NodeUtil.tryToOptimizeUnusedParameters(fnScope, argList);\n          if (argList.getFirstChild().isName()) {\n            // If parameter renaming did happen and there are unused parameters\n            // left, then the parameter vars will be created later.\n            argList = getFunctionArgList(fnScope.getRootNode());\n          }\n        }\n        Node nameNode = arg.isName() ? arg : arg.getFirstChild();\n        Node defaultValue = arg.getNext();\n        if (defaultValue != null) {\n          defaultValue.detach();\n        }\n        Node varNode = IR.var(nameNode.cloneNode());\n        Node scopeNode = fnScope.getRootNode();\n        varNode.srcrefBefore(nameNode);\n        scopeNode.addChildToFront(varNode);\n        Node assignNode = IR.assign(nameNode.cloneNode(), IR.name(\"undefined\"));\n        assignNode.srcrefTree(varNode);\n        varNode.getFirstChild().addChildToBack(assignNode);\n        arg.detach();\n        compiler.reportCodeChange();\n        ++argNum;\n      }\n      if (fnScope.getDefaultParameters().stream().count() > 0) {\n        return;\n      }\n      int functionLength = NodeUtil.getFunctionParameters(function).size();\n      function.putProp(Node.FUNCTION_LENGTH, argNum);\n      if (argNum < functionLength) { // remove unreferenced args off end of function declaration\n        Node toRemove = function.getLastChild();\n        while (argNum++ < functionLength) { // remove the argument from the declaration\n          Node parent = toRemove.getParent();\n          Preconditions.checkState(toRemove.isName() || toRemove.isDefaultValue());\n          parent.removeChild(toRemove);\n          toRemove = parent.getLastChild();\n        }\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3f6b8541 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,73 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    boolean createUnreferencedParameterVars = false;\n+    if (!modifyCallers) {\n+      int argNum = 0;\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (referenced.contains(var)) {\n+          if (!arg.isDefaultValue()) {\n+            ++argNum;\n+          }\n+          continue;\n+        }\n+        if (arg.isDefaultValue()) {\n+          ++argNum;\n+          continue;\n+        }\n+        if (!createUnreferencedParameterVars) {\n+          createUnreferencedParameterVars = true;\n+          Node firstParameter = argList.getFirstChild();\n+          NodeUtil.tryToOptimizeUnusedParameters(fnScope, argList);\n+          if (argList.getFirstChild().isName()) {\n+            // If parameter renaming did happen and there are unused parameters\n+            // left, then the parameter vars will be created later.\n+            argList = getFunctionArgList(fnScope.getRootNode());\n+          }\n+        }\n+        Node nameNode = arg.isName() ? arg : arg.getFirstChild();\n+        Node defaultValue = arg.getNext();\n+        if (defaultValue != null) {\n+          defaultValue.detach();\n+        }\n+        Node varNode = IR.var(nameNode.cloneNode());\n+        Node scopeNode = fnScope.getRootNode();\n+        varNode.srcrefBefore(nameNode);\n+        scopeNode.addChildToFront(varNode);\n+        Node assignNode = IR.assign(nameNode.cloneNode(), IR.name(\"undefined\"));\n+        assignNode.srcrefTree(varNode);\n+        varNode.getFirstChild().addChildToBack(assignNode);\n+        arg.detach();\n+        compiler.reportCodeChange();\n+        ++argNum;\n+      }\n+      if (fnScope.getDefaultParameters().stream().count() > 0) {\n+        return;\n+      }\n+      int functionLength = NodeUtil.getFunctionParameters(function).size();\n+      function.putProp(Node.FUNCTION_LENGTH, argNum);\n+      if (argNum < functionLength) { // remove unreferenced args off end of function declaration\n+        Node toRemove = function.getLastChild();\n+        while (argNum++ < functionLength) { // remove the argument from the declaration\n+          Node parent = toRemove.getParent();\n+          Preconditions.checkState(toRemove.isName() || toRemove.isDefaultValue());\n+          parent.removeChild(toRemove);\n+          toRemove = parent.getLastChild();\n+        }\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}