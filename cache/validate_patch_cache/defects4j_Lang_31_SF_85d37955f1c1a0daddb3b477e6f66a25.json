{
    "patch": "public static boolean containsAny(final CharSequence string, final char[] searchChars) {\n    final int len = string.length();\n    final int searchLen = searchChars.length;\n    final Set<Integer> set = new HashSet<>(searchLen);\n\n    for (char c : searchChars) {\n        if (Character.isHighSurrogate(c)) {\n            if ((set.contains((int) c) == false) && (set.contains((int) (c + 1)) == false)) {\n                set.add((int) c);\n                set.add((int) (c + 1));\n            }\n        } else {\n            set.add((int) c);\n        }\n    }\n\n    for (int i = 0; i < len; i++) {\n        final char ch = string.charAt(i);\n        if (set.contains((int) ch)) {\n            return true;\n        }\n        if (Character.isHighSurrogate(ch) && (i < len - 1)) {\n            final char ch2 = string.charAt(i + 1);\n            if (set.contains((int) ch2)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..515f2924 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,36 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence string, final char[] searchChars) {\n+    final int len = string.length();\n+    final int searchLen = searchChars.length;\n+    final Set<Integer> set = new HashSet<>(searchLen);\n+\n+    for (char c : searchChars) {\n+        if (Character.isHighSurrogate(c)) {\n+            if ((set.contains((int) c) == false) && (set.contains((int) (c + 1)) == false)) {\n+                set.add((int) c);\n+                set.add((int) (c + 1));\n+            }\n+        } else {\n+            set.add((int) c);\n+        }\n+    }\n+\n+    for (int i = 0; i < len; i++) {\n+        final char ch = string.charAt(i);\n+        if (set.contains((int) ch)) {\n+            return true;\n+        }\n+        if (Character.isHighSurrogate(ch) && (i < len - 1)) {\n+            final char ch2 = string.charAt(i + 1);\n+            if (set.contains((int) ch2)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}