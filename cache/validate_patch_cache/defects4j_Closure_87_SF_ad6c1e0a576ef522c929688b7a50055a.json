{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  // Check if the node is a block with only one child node\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n\n  // Don't fold expressions that are part of a function\n  if (NodeUtil.isFunction(maybeExpr.getParent())) {\n    return false;\n  }\n\n  // Don't fold expressions that have side effects\n  if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n    return false;\n  }\n\n  // Don't fold expressions that are within an IF block\n  Node parent = maybeExpr.getParent();\n  if (parent != null && parent.getType() == Token.IF) {\n    Node ifNode = parent;\n    Node ifBlock = ifNode.getLastChild();\n    if (ifBlock != null && ifBlock.getChildCount() == 1 && NodeUtil.isExpressionNode(ifBlock.getFirstChild())) {\n      return false;\n    }\n  }\n\n  // Don't fold expressions that are the argument of a call or new\n  if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n    return false;\n  }\n\n  // Don't fold expressions within an EXPR_RESULT parent\n  if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n    return false;\n  }\n\n  return NodeUtil.isExpressionNode(maybeExpr);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b4b2f50d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,47 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  // Check if the node is a block with only one child node\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node maybeExpr = n.getFirstChild();\n+\n+  // Don't fold expressions that are part of a function\n+  if (NodeUtil.isFunction(maybeExpr.getParent())) {\n+    return false;\n+  }\n+\n+  // Don't fold expressions that have side effects\n+  if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+    return false;\n+  }\n+\n+  // Don't fold expressions that are within an IF block\n+  Node parent = maybeExpr.getParent();\n+  if (parent != null && parent.getType() == Token.IF) {\n+    Node ifNode = parent;\n+    Node ifBlock = ifNode.getLastChild();\n+    if (ifBlock != null && ifBlock.getChildCount() == 1 && NodeUtil.isExpressionNode(ifBlock.getFirstChild())) {\n+      return false;\n     }\n+  }\n \n+  // Don't fold expressions that are the argument of a call or new\n+  if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n     return false;\n   }\n \n+  // Don't fold expressions within an EXPR_RESULT parent\n+  if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+    return false;\n+  }\n+\n+  return NodeUtil.isExpressionNode(maybeExpr);\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}