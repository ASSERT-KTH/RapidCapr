{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // IE has a bug where event handlers behave differently when\n      // their return value is used vs. when their return value is in\n      // an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs\n      // into other expressions.\n\n      // We only have to worry about methods with an implicit 'this'\n      // param, or this doesn't happen.\n      if (NodeUtil.isExpressionNode(maybeExpr) && \n        !NodeUtil.isFunctionExpression(maybeExpr) &&\n        maybeExpr.getType() != Token.OBJECTLIT &&\n        maybeExpr.getType() != Token.FUNCTION &&\n        maybeExpr.getType() != Token.REGEXP) {\n        Node parent = n.getParent();\n        if (parent != null &&\n          parent.getType() == Token.EXPR_RESULT &&\n          parent.getFirstChild() == n &&\n          !NodeUtil.isFunctionExpression(parent)) {\n          return false;\n        }\n        else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          Node grandChild = maybeExpr.getFirstChild();\n          if (grandChild.getType() == Token.CALL) {\n            Node target = grandChild.getFirstChild();\n            if (target.getType() == Token.GETPROP) {\n              Node methodName = target.getLastChild();\n              if (methodName.getType() == Token.STRING) {\n                String name = methodName.getString();\n                if (name.equals(\"call\") || name.equals(\"apply\")) {\n                  return false;\n                }\n              }\n            }\n            else if (target.getType() != Token.NAME ||\n                !target.getString().equals(\"goog.dom.safeHtmlToNode\")) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..380c97d0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,57 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // IE has a bug where event handlers behave differently when\n+      // their return value is used vs. when their return value is in\n+      // an EXPR_RESULT. It's pretty freaking weird. See:\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      // We try to detect this case, and not fold EXPR_RESULTs\n+      // into other expressions.\n+\n+      // We only have to worry about methods with an implicit 'this'\n+      // param, or this doesn't happen.\n+      if (NodeUtil.isExpressionNode(maybeExpr) && \n+        !NodeUtil.isFunctionExpression(maybeExpr) &&\n+        maybeExpr.getType() != Token.OBJECTLIT &&\n+        maybeExpr.getType() != Token.FUNCTION &&\n+        maybeExpr.getType() != Token.REGEXP) {\n+        Node parent = n.getParent();\n+        if (parent != null &&\n+          parent.getType() == Token.EXPR_RESULT &&\n+          parent.getFirstChild() == n &&\n+          !NodeUtil.isFunctionExpression(parent)) {\n+          return false;\n+        }\n+        else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+          Node grandChild = maybeExpr.getFirstChild();\n+          if (grandChild.getType() == Token.CALL) {\n+            Node target = grandChild.getFirstChild();\n+            if (target.getType() == Token.GETPROP) {\n+              Node methodName = target.getLastChild();\n+              if (methodName.getType() == Token.STRING) {\n+                String name = methodName.getString();\n+                if (name.equals(\"call\") || name.equals(\"apply\")) {\n+                  return false;\n+                }\n+              }\n+            }\n+            else if (target.getType() != Token.NAME ||\n+                !target.getString().equals(\"goog.dom.safeHtmlToNode\")) {\n+              return false;\n+            }\n+          }\n+        }\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}