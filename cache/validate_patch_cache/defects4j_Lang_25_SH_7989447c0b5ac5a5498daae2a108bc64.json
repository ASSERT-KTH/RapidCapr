{
    "patch": "StringBuilder result = new StringBuilder();\nfor (int i = 0; i < input.length(); i++) {\n    char c = input.charAt(i);\n    if (c == '\\\\') {\n        char nextChar = (i == input.length() - 1) ? '\\\\' : input.charAt(i + 1);\n        // Advance past escape character and append escaped character\n        i++;\n        switch (nextChar) {\n            case '\\\"': result.append('\\\"'); break;\n            case '\\\\': result.append('\\\\'); break;\n            case '/': result.append('/'); break;\n            case 'b': result.append('\\b'); break;\n            case 'f': result.append('\\f'); break;\n            case 'n': result.append('\\n'); break;\n            case 'r': result.append('\\r'); break;\n            case 't': result.append('\\t'); break;\n            case 'u':\n                if (i + 4 < input.length()) {\n                    // Unicode escape sequence\n                    String hex = input.substring(i + 1, i + 5);\n                    result.append((char) Integer.parseInt(hex, 16));\n                    i += 4;\n                    break;\n                }\n                // If we don't have 4 hex digits after \"\\u\", assume this is an invalid escape sequence\n            default:\n                result.append('\\\\');\n                result.append(nextChar);\n                break;\n        }\n    } else {\n        result.append(c);\n    }\n}\n\nString actual = result.toString();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}