{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.GETELEM:\n          case Token.GETPROP:\n            if (NodeUtil.isLiteralValue(parent.getLastChild(), true, false, false) &&\n                (\"prototype\".equals(parent.getLastChild().getString()))) {\n              return false;\n            }\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild().getType() == Token.GETPROP &&\n                parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            break;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fd640a28 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null) {\n+        switch (parent.getType()) {\n+          case Token.GETELEM:\n+          case Token.GETPROP:\n+            if (NodeUtil.isLiteralValue(parent.getLastChild(), true, false, false) &&\n+                (\"prototype\".equals(parent.getLastChild().getString()))) {\n+              return false;\n+            }\n+            break;\n+          case Token.ASSIGN:\n+            if (parent.getFirstChild().getType() == Token.GETPROP &&\n+                parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            break;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: method isLiteralValue in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}