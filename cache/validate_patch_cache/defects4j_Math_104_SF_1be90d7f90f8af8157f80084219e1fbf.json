{
    "patch": "public static double regularizedLowerIncompleteGamma(double a, double x){\n    if (a <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid gamma function argument a: \" + a);\n    }\n    if (x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid gamma function argument x: \" + x);\n    }\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(a) || Double.isInfinite(x)) {\n        return Double.NaN;\n    }\n\n    double epsilon = 1.0e-15;\n    double maxIterations = 1000;\n\n    double sum = 0.0;\n    double term = 0.0;\n    double n = 0.0;\n\n    while (n < maxIterations) {\n        term = (Math.pow(x, n) / (factorial(n) * a)) * Math.exp(-x);\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * epsilon) {\n            break;\n        }\n        n += 1.0;\n    }\n\n    return sum;       \n}\n\npublic static double factorial(double n){\n    if (n < 0.0) {\n        throw new IllegalArgumentException(\"Invalid factorial argument: \" + n);\n    }\n    if (Double.isInfinite(n)) {\n        return Double.POSITIVE_INFINITY;\n    }\n\n    double result = 1.0;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5f5de1b46 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedLowerIncompleteGamma(double a, double x){\n+    if (a <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid gamma function argument a: \" + a);\n+    }\n+    if (x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid gamma function argument x: \" + x);\n+    }\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    if (Double.isInfinite(a) || Double.isInfinite(x)) {\n+        return Double.NaN;\n+    }\n+\n+    double epsilon = 1.0e-15;\n+    double maxIterations = 1000;\n+\n+    double sum = 0.0;\n+    double term = 0.0;\n+    double n = 0.0;\n+\n+    while (n < maxIterations) {\n+        term = (Math.pow(x, n) / (factorial(n) * a)) * Math.exp(-x);\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * epsilon) {\n+            break;\n+        }\n+        n += 1.0;\n+    }\n+\n+    return sum;       \n+}\n+\n+public static double factorial(double n){\n+    if (n < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid factorial argument: \" + n);\n+    }\n+    if (Double.isInfinite(n)) {\n+        return Double.POSITIVE_INFINITY;\n+    }\n+\n+    double result = 1.0;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}