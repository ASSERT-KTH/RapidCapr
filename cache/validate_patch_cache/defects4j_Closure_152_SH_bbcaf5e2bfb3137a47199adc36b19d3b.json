{
    "patch": "    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof NamedType) {\n      resolvedTypeOfThis = ((NamedType) resolvedTypeOfThis).getReferencedType();\n    }\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n      typeOfThis = null;\n    }\n    if (typeOfThis == null) {\n      String errorMsg =\n          \"Invalid 'this' type '\" + getThisType() + \"' for call to method '\" + getFullName() + \"'\";\n      if (getJSDocInfo().isFromExterns()) {\n        throw new InvalidExternsException(errorMsg);\n      } else {\n        t.report(getNode(), CALL_WITH_NON_OBJECT_THIS, errorMsg);\n        typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..84f9f849 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,25 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (resolvedTypeOfThis instanceof NamedType) {\n+      resolvedTypeOfThis = ((NamedType) resolvedTypeOfThis).getReferencedType();\n+    }\n+    if (resolvedTypeOfThis instanceof ObjectType) {\n+      typeOfThis = (ObjectType) resolvedTypeOfThis;\n+    } else {\n+      typeOfThis = null;\n+    }\n+    if (typeOfThis == null) {\n+      String errorMsg =\n+          \"Invalid 'this' type '\" + getThisType() + \"' for call to method '\" + getFullName() + \"'\";\n+      if (getJSDocInfo().isFromExterns()) {\n+        throw new InvalidExternsException(errorMsg);\n+      } else {\n+        t.report(getNode(), CALL_WITH_NON_OBJECT_THIS, errorMsg);\n+        typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+      }\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}