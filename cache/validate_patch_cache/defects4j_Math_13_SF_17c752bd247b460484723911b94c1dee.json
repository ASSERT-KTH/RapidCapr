{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double tolerance = 1e-10;\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final double[] realEigenvalues = dec.getRealEigenvalues();\n        double maxEigenvalue = 0;\n        for (double eigenvalue : realEigenvalues) {\n            if (eigenvalue > maxEigenvalue) {\n                maxEigenvalue = eigenvalue;\n            }\n        }\n        final double sqrtMaxEigenvalue = Math.sqrt(maxEigenvalue);\n        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n        RealMatrix mMinusSqrtMaxEVIdentity = m.subtract(identity.scalarMultiply(sqrtMaxEigenvalue));\n        SingularValueDecomposition svd = new SingularValueDecomposition(mMinusSqrtMaxEVIdentity);\n        RealMatrix u = svd.getU();\n        RealMatrix v = svd.getV();\n        RealMatrix s = svd.getS();\n        for (int i = 0; i < s.getRowDimension(); i++) {\n            double val = s.getEntry(i, i);\n            if (val > tolerance) {\n                s.setEntry(i, i, Math.sqrt(val));\n            } else {\n                s.setEntry(i, i, 0.0);\n            }\n        }\n        return u.multiply(s).multiply(v.transpose()).add(identity.scalarMultiply(sqrtMaxEigenvalue));\n    } catch (OutOfMemoryError e) {\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f3350473b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double tolerance = 1e-10;\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final double[] realEigenvalues = dec.getRealEigenvalues();\n+        double maxEigenvalue = 0;\n+        for (double eigenvalue : realEigenvalues) {\n+            if (eigenvalue > maxEigenvalue) {\n+                maxEigenvalue = eigenvalue;\n+            }\n+        }\n+        final double sqrtMaxEigenvalue = Math.sqrt(maxEigenvalue);\n+        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+        RealMatrix mMinusSqrtMaxEVIdentity = m.subtract(identity.scalarMultiply(sqrtMaxEigenvalue));\n+        SingularValueDecomposition svd = new SingularValueDecomposition(mMinusSqrtMaxEVIdentity);\n+        RealMatrix u = svd.getU();\n+        RealMatrix v = svd.getV();\n+        RealMatrix s = svd.getS();\n+        for (int i = 0; i < s.getRowDimension(); i++) {\n+            double val = s.getEntry(i, i);\n+            if (val > tolerance) {\n+                s.setEntry(i, i, Math.sqrt(val));\n+            } else {\n+                s.setEntry(i, i, 0.0);\n+            }\n+        }\n+        return u.multiply(s).multiply(v.transpose()).add(identity.scalarMultiply(sqrtMaxEigenvalue));\n+    } catch (OutOfMemoryError e) {\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}