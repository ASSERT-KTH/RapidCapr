{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() || (n.isComma() && !NodeUtil.isExpressionResultUsed(n))) {\n      return;\n    }\n\n    if (n.isFunction()) {\n      return;\n    }\n\n    if (parent != null) {\n      if (parent.isCatch()) {\n        return;\n      }\n\n      if (n.isString()\n          && NodeUtil.isImmutableValue(parent)\n          && !isStringBeingCoercedToStringConcatenation(n, parent)) {\n        String msg = \"Is there a missing '+' on the previous line?\";\n        t.report(n, USELESS_CODE_ERROR, msg);\n        return;\n      }\n    }\n\n    if (isNodeLackingSideEffects(n, parent, t.getCompiler())) {\n      if (n.isExprResult() || parent == null || parent.isExprResult() || parent.isBlock()) {\n        NodeReport nReport = n == null ? t.reportCodeChange() : t.report(n, USELESS_CODE_ERROR);\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        nReport.addFix().setActionToNode(Nop.get().srcref(n)).setMessage(msg).setOriginalNode(n);\n      } else if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        return;\n      } else {\n        // Matches the !isCandidateLine in com.google.javascript.jscomp.CodeReplacer.replaceNegativeNumberLiterals\n        if (n.isNumber()\n            && parent.getType() != Token.MINUS\n            && parent.getType() != Token.POS\n            && (!parent.isAdd() || parent.getFirstChild() != n)) {\n          return;\n        }\n\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        t.report(n, USELESS_CODE_ERROR, msg);\n        return;\n      }\n    }\n\n    // Special-case \"return expr;\" -> \"expr;\", but only if the parent is a block,\n    // since the peephole pass will handle this case for other parent types.\n    if (n.isReturn() && n.hasChildren() && parent.isBlock() &&\n        !n.getNext().isBlock()) {\n      t.reportCodeChange();\n      parent.replaceChild(n, n.removeFirstChild());\n      n = n.getPrevious();\n    }\n\n    // Check for instances of \"new Array()\" that can instead be \"[]\".\n    if (n.isNew() &&\n        n.getFirstChild().isName()\n        && \"Array\".equals(n.getFirstChild().getString())\n        && !n.hasMoreThanOneChild()) {\n      t.reportCodeChange();\n      n.replaceWith(IR.arraylit().srcref(n));\n    }\n  }\n\n  /** Determines whether a string is being coerced to string by concatenation or conversion. */\n  private static boolean isStringBeingCoercedToStringConcatenation(Node n, Node parent) {\n    boolean isAddition = parent.isAdd();\n    return isAddition && NodeUtil.isExpressionResultUsed(parent)\n        || parent.getType() == Token.STRING\n        || isStringBeingConcatenated(n, parent.getParent());\n  }\n\n  /** Recursively determined whether a string is being concatenated to another string. */\n  private static boolean isStringBeingConcatenated(Node stringNode, Node parent) {\n    if (parent == null || parent.isScript() || parent.isFunction()) {\n      return false;\n    }\n    if (parent.isAdd() && !NodeUtil.isExpressionResultUsed(parent)) {\n      Node left = parent.getFirstChild();\n      Node right = parent.getLastChild();\n      if (isStringNode(left) && (left == stringNode || left.isEquivalentTo(stringNode))) {\n        return true;\n      }\n      if (isStringNode(right) && (right == stringNode || right.isEquivalentTo(stringNode))) {\n        return true;\n      }\n    }\n    return isStringBeingConcatenated(stringNode, parent.getParent());\n  }\n\n  private static boolean isStringNode(Node node) {\n    return node != null && node.isString();\n  }\n\n  private static boolean isNodeLackingSideEffects(Node n, Node parent, Compiler compiler) {\n    // This check should be handled by the CheckFor lacked side-effect pass.\n    return NodeUtil.isStatement(n)\n        && !n.isFunction()\n        && !n.isExprResult()\n        && !NodeUtil.mayHaveSideEffects(n, compiler)\n        && NodeUtil.getEnclosingStatement(n) != null\n        && NodeUtil.getSideEffectFlags(parent, compiler).returnsFalse();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..2f21fe27 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,70 +81,108 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isEmpty() || (n.isComma() && !NodeUtil.isExpressionResultUsed(n))) {\n       return;\n     }\n \n-    if (parent == null) {\n+    if (n.isFunction()) {\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+    if (parent != null) {\n+      if (parent.isCatch()) {\n+        return;\n+      }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n+      if (n.isString()\n+          && NodeUtil.isImmutableValue(parent)\n+          && !isStringBeingCoercedToStringConcatenation(n, parent)) {\n+        String msg = \"Is there a missing '+' on the previous line?\";\n+        t.report(n, USELESS_CODE_ERROR, msg);\n+        return;\n+      }\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n+    if (isNodeLackingSideEffects(n, parent, t.getCompiler())) {\n+      if (n.isExprResult() || parent == null || parent.isExprResult() || parent.isBlock()) {\n+        NodeReport nReport = n == null ? t.reportCodeChange() : t.report(n, USELESS_CODE_ERROR);\n+        String msg = \"This code lacks side-effects. Is there a bug?\";\n+        nReport.addFix().setActionToNode(Nop.get().srcref(n)).setMessage(msg).setOriginalNode(n);\n+      } else if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n         return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+      } else {\n+        // Matches the !isCandidateLine in com.google.javascript.jscomp.CodeReplacer.replaceNegativeNumberLiterals\n+        if (n.isNumber()\n+            && parent.getType() != Token.MINUS\n+            && parent.getType() != Token.POS\n+            && (!parent.isAdd() || parent.getFirstChild() != n)) {\n+          return;\n         }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+\n+        String msg = \"This code lacks side-effects. Is there a bug?\";\n+        t.report(n, USELESS_CODE_ERROR, msg);\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+    // Special-case \"return expr;\" -> \"expr;\", but only if the parent is a block,\n+    // since the peephole pass will handle this case for other parent types.\n+    if (n.isReturn() && n.hasChildren() && parent.isBlock() &&\n+        !n.getNext().isBlock()) {\n+      t.reportCodeChange();\n+      parent.replaceChild(n, n.removeFirstChild());\n+      n = n.getPrevious();\n+    }\n+\n+    // Check for instances of \"new Array()\" that can instead be \"[]\".\n+    if (n.isNew() &&\n+        n.getFirstChild().isName()\n+        && \"Array\".equals(n.getFirstChild().getString())\n+        && !n.hasMoreThanOneChild()) {\n+      t.reportCodeChange();\n+      n.replaceWith(IR.arraylit().srcref(n));\n+    }\n+  }\n+\n+  /** Determines whether a string is being coerced to string by concatenation or conversion. */\n+  private static boolean isStringBeingCoercedToStringConcatenation(Node n, Node parent) {\n+    boolean isAddition = parent.isAdd();\n+    return isAddition && NodeUtil.isExpressionResultUsed(parent)\n+        || parent.getType() == Token.STRING\n+        || isStringBeingConcatenated(n, parent.getParent());\n+  }\n+\n+  /** Recursively determined whether a string is being concatenated to another string. */\n+  private static boolean isStringBeingConcatenated(Node stringNode, Node parent) {\n+    if (parent == null || parent.isScript() || parent.isFunction()) {\n+      return false;\n+    }\n+    if (parent.isAdd() && !NodeUtil.isExpressionResultUsed(parent)) {\n+      Node left = parent.getFirstChild();\n+      Node right = parent.getLastChild();\n+      if (isStringNode(left) && (left == stringNode || left.isEquivalentTo(stringNode))) {\n+        return true;\n+      }\n+      if (isStringNode(right) && (right == stringNode || right.isEquivalentTo(stringNode))) {\n+        return true;\n       }\n     }\n+    return isStringBeingConcatenated(stringNode, parent.getParent());\n+  }\n+\n+  private static boolean isStringNode(Node node) {\n+    return node != null && node.isString();\n+  }\n+\n+  private static boolean isNodeLackingSideEffects(Node n, Node parent, Compiler compiler) {\n+    // This check should be handled by the CheckFor lacked side-effect pass.\n+    return NodeUtil.isStatement(n)\n+        && !n.isFunction()\n+        && !n.isExprResult()\n+        && !NodeUtil.mayHaveSideEffects(n, compiler)\n+        && NodeUtil.getEnclosingStatement(n) != null\n+        && NodeUtil.getSideEffectFlags(parent, compiler).returnsFalse();\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}