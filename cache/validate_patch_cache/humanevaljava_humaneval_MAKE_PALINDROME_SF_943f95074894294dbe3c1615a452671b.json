{
    "patch": "public static String make_palindrome(String str) {\n    if (str.length() == 0)\n        return \"\";\n\n    int beginning_of_suffix = 0;\n    int end_of_prefix = str.length() - 1;\n    while (beginning_of_suffix < end_of_prefix && !is_palindrome(str.substring(beginning_of_suffix))) {\n        beginning_of_suffix++;\n    }\n\n    StringBuilder sb = new StringBuilder(str);\n    for (int i = end_of_prefix-1; i>=beginning_of_suffix; i--) {\n        sb.append(str.charAt(i));\n    }\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\nindex 05f44d8..3af952a 100644\n--- a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n+++ b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n@@ -9,17 +9,21 @@ public class MAKE_PALINDROME {\n         return true;\n     }\n \n-    public static String make_palindrome(String str){\n-        if (str.length() == 0)\n-            return \"\";\n+public static String make_palindrome(String str) {\n+    if (str.length() == 0)\n+        return \"\";\n \n-        int beginning_of_suffix = 0;\n-        while (! is_palindrome(str.substring(beginning_of_suffix))){\n-            beginning_of_suffix += 1;\n-        }\n-        \n-        String result = str;\n-        result += str.substring(0, beginning_of_suffix);\n-        return result;\n+    int beginning_of_suffix = 0;\n+    int end_of_prefix = str.length() - 1;\n+    while (beginning_of_suffix < end_of_prefix && !is_palindrome(str.substring(beginning_of_suffix))) {\n+        beginning_of_suffix++;\n+    }\n+\n+    StringBuilder sb = new StringBuilder(str);\n+    for (int i = end_of_prefix-1; i>=beginning_of_suffix; i--) {\n+        sb.append(str.charAt(i));\n     }\n+\n+    return sb.toString();\n+}\n }",
    "result_reason": "   TEST_MAKE_PALINDROME.test_2:23 expected:<xyz[]> but was:<xyz[yx]>",
    "test_result": "FAIL"
}