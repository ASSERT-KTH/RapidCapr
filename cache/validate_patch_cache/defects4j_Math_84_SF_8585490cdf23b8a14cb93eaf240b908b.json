{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            else {\n                simplex = contraction(original, comparator);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        simplex = contraction(original, comparator);\n\n        // check convergence\n        if (isConverged()) {\n            return;\n        }\n\n    }\n\n}\n\nprivate RealPointValuePair[] contraction(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n    final double[] xSmallest = original[original.length - 1].getPointRef();\n    final double[] xR = original[original.length - 2].getPointRef();\n\n    final double[] contracted = new double[xSmallest.length];\n    for (int i = 0; i < xSmallest.length; i++) {\n        contracted[i] = (best.getPointRef()[i] + xSmallest[i]) / 2;\n    }\n\n    final RealPointValuePair contractedVertex = new RealPointValuePair(contracted, computeObjectiveValue(contracted));\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n    for (int i = 0; i < simplex.length; i++) {\n        if (comparator.compare(simplex[i], xR) == 0) {\n            contractedSimplex[i] = contractedVertex;\n        } else {\n            contractedSimplex[i] = new RealPointValuePair(new double[xSmallest.length], 0);\n            for (int j = 0; j < xSmallest.length; j++) {\n                contractedSimplex[i].getPointRef()[j] = (simplex[i].getPointRef()[j] + xSmallest[j]) / 2;\n            }\n            contractedSimplex[i].setValue(computeObjectiveValue(contractedSimplex[i].getPoint()));\n        }\n    }\n\n    Arrays.sort(contractedSimplex, comparator);\n\n    return contractedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..49d6d5038 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,77 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n+            else {\n+                simplex = contraction(original, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n-                return;\n-            }\n+        }\n \n+        // compute the contracted simplex\n+        simplex = contraction(original, comparator);\n+\n+        // check convergence\n+        if (isConverged()) {\n+            return;\n         }\n \n     }\n \n+}\n+\n+private RealPointValuePair[] contraction(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+    final double[] xSmallest = original[original.length - 1].getPointRef();\n+    final double[] xR = original[original.length - 2].getPointRef();\n+\n+    final double[] contracted = new double[xSmallest.length];\n+    for (int i = 0; i < xSmallest.length; i++) {\n+        contracted[i] = (best.getPointRef()[i] + xSmallest[i]) / 2;\n+    }\n+\n+    final RealPointValuePair contractedVertex = new RealPointValuePair(contracted, computeObjectiveValue(contracted));\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n+    for (int i = 0; i < simplex.length; i++) {\n+        if (comparator.compare(simplex[i], xR) == 0) {\n+            contractedSimplex[i] = contractedVertex;\n+        } else {\n+            contractedSimplex[i] = new RealPointValuePair(new double[xSmallest.length], 0);\n+            for (int j = 0; j < xSmallest.length; j++) {\n+                contractedSimplex[i].getPointRef()[j] = (simplex[i].getPointRef()[j] + xSmallest[j]) / 2;\n+            }\n+            contractedSimplex[i].setValue(computeObjectiveValue(contractedSimplex[i].getPoint()));\n+        }\n+    }\n+\n+    Arrays.sort(contractedSimplex, comparator);\n+\n+    return contractedSimplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}