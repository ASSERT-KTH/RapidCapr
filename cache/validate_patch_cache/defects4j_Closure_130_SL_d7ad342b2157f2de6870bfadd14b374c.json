{
    "patch": "if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 && name.canEliminate()) {\n        // Inline the object literal or function by replacing all references to it with its sole value.\n        inlineValue(name.getRefs().get(0), namespace, Iterables.getOnlyElement(name.getValues()));\n      } else if (name.props != null) {\n        workList.addAll(name.props);\n      }\n} else if (name.props != null && (name.globalSets == 1 || name.localSets == 1)) {\n      workList.addAll(name.props);\n} else if (name.aliasingGets > 0) {\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() && inlineAliasIfPossible(ref, namespace)) {\n          name.removeRef(ref);\n        }\n      }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..78cd2109 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,23 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 && name.canEliminate()) {\n+        // Inline the object literal or function by replacing all references to it with its sole value.\n+        inlineValue(name.getRefs().get(0), namespace, Iterables.getOnlyElement(name.getValues()));\n+      } else if (name.props != null) {\n+        workList.addAll(name.props);\n+      }\n+} else if (name.props != null && (name.globalSets == 1 || name.localSets == 1)) {\n+      workList.addAll(name.props);\n+} else if (name.aliasingGets > 0) {\n+      List<Ref> refs = Lists.newArrayList(name.getRefs());\n+      for (Ref ref : refs) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() && inlineAliasIfPossible(ref, namespace)) {\n+          name.removeRef(ref);\n+        }\n+      }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}