{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN() || Double.isNaN(x)) {\n            return newInstance(getField(), Double.NaN);\n        }\n        if (x == 0) {\n            return newInstance(getField(), 0.0);\n        }\n        if (x == 1) {\n            return newInstance(this);\n        }\n        if (x == -1) {\n            return negate();\n        }\n\n        final DfpField field = getField();\n        final Dfp result = newInstance(field);\n        boolean negative = false;\n        int q = x;\n\n        if (q < 0) {\n            negative = !negative;\n            q = -q;\n        }\n\n        int bitpos = Integer.highestOneBit(q) >> 1;\n        do {\n            result.selfMultiply();\n            if (q >= bitpos) {\n                result.selfAdd(this);\n                q -= bitpos;\n            }\n            bitpos >>= 1;\n        } while (bitpos > 0);\n\n        if (negative) {\n            result.selfNegate();\n        }\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..2cd76f4c3 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,44 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN() || Double.isNaN(x)) {\n+            return newInstance(getField(), Double.NaN);\n+        }\n+        if (x == 0) {\n+            return newInstance(getField(), 0.0);\n+        }\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+        if (x == -1) {\n+            return negate();\n+        }\n+\n+        final DfpField field = getField();\n+        final Dfp result = newInstance(field);\n+        boolean negative = false;\n+        int q = x;\n+\n+        if (q < 0) {\n+            negative = !negative;\n+            q = -q;\n+        }\n+\n+        int bitpos = Integer.highestOneBit(q) >> 1;\n+        do {\n+            result.selfMultiply();\n+            if (q >= bitpos) {\n+                result.selfAdd(this);\n+                q -= bitpos;\n+            }\n+            bitpos >>= 1;\n+        } while (bitpos > 0);\n+\n+        if (negative) {\n+            result.selfNegate();\n+        }\n+\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: no suitable method found for newInstance(DfpField,double)",
    "test_result": "ERROR"
}