{
    "patch": "@Override\npublic void visitTypeVariable(TypeVariable<?> typeVariable) {\n    if (processed.contains(typeVariable)) {\n        // Avoid infinite recursion\n        return;\n    }\n    processed.add(typeVariable);\n\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        // No bounds, use the type parameter itself\n        resolvedTypes.put(typeVariable, typeVariable);\n        return;\n    }\n\n    // Resolve the bounds of the type variable\n    TypeVariableResolver resolver = new TypeVariableResolver(processed, resolvedTypes);\n    for (Type bound : bounds) {\n        bound.accept(resolver);\n    }\n\n    // Store the resolved type for the type variable\n    Type resolvedType = resolvedTypes.get(typeVariable);\n    if (resolvedType != null) {\n        resolvedTypes.put(typeVariable, resolvedType);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..4725a4eaa 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,33 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+@Override\n+public void visitTypeVariable(TypeVariable<?> typeVariable) {\n+    if (processed.contains(typeVariable)) {\n+        // Avoid infinite recursion\n+        return;\n+    }\n+    processed.add(typeVariable);\n+\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        // No bounds, use the type parameter itself\n+        resolvedTypes.put(typeVariable, typeVariable);\n+        return;\n+    }\n+\n+    // Resolve the bounds of the type variable\n+    TypeVariableResolver resolver = new TypeVariableResolver(processed, resolvedTypes);\n+    for (Type bound : bounds) {\n+        bound.accept(resolver);\n+    }\n+\n+    // Store the resolved type for the type variable\n+    Type resolvedType = resolvedTypes.get(typeVariable);\n+    if (resolvedType != null) {\n+        resolvedTypes.put(typeVariable, resolvedType);\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}