{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double vx1 = v1.getX();\n    final double vy1 = v1.getY();\n    final double vz1 = v1.getZ();\n    final double vx2 = v2.getX();\n    final double vy2 = v2.getY();\n    final double vz2 = v2.getZ();\n    final double cx = vy1 * vz2 - vz1 * vy2;\n    final double cy = vz1 * vx2 - vx1 * vz2;\n    final double cz = vx1 * vy2 - vy1 * vx2;\n    double invNorm = 1.0 / FastMath.sqrt(cx * cx + cy * cy + cz * cz);\n    if (Double.isFinite(invNorm)) {\n        return new Vector3D(cx * invNorm, cy * invNorm, cz * invNorm);\n    }\n    // the norm of the cross product is zero, we try to recover a non-zero direction\n    // using linearly independent columns of the 3x3 matrix of the input vectors\n    RealMatrix m = new Array2DRowRealMatrix(new double[][]{{vx1, vy1, vz1}, {vx2, vy2, vz2}, {cx, cy, cz}}, false);\n    int[] pivot = new LUDecomposition(m).getSolver().getPermutation();\n    if (pivot[2] != 2) {\n        // swap first two columns\n        double tmp = vx1;\n        vx1 = vy1; vy1 = tmp;\n        tmp = vx2; vx2 = vy2; vy2 = tmp;\n        m.setColumnMatrix(0, new double[]{vx1, vy1, vz1});\n        m.setColumnMatrix(1, new double[]{vx2, vy2, vz2});\n        pivot = new LUDecomposition(m).getSolver().getPermutation();\n    }\n    if (m.getEntry(pivot[0], 0) != 0.0) {\n        // column 1 and column 2 are pivots, use first two rows\n        invNorm = 1.0 / FastMath.sqrt(vx1 * vx1 + vy1 * vy1 + vz1 * vz1);\n        return new Vector3D(cy * vz1 * invNorm - cz * vy1 * invNorm,\n                            cz * vx1 * invNorm - cx * vz1 * invNorm,\n                            cx * vy1 * invNorm - cy * vx1 * invNorm);\n    } else {\n        // columns 1 and 3 are pivots, use rows 1 and 3\n        invNorm = 1.0 / FastMath.sqrt(vx1 * vx1 + vz1 * vz1);\n        return new Vector3D(-vz1 * invNorm, 0, vx1 * invNorm);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..c265ed237 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,45 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double vx1 = v1.getX();\n+    final double vy1 = v1.getY();\n+    final double vz1 = v1.getZ();\n+    final double vx2 = v2.getX();\n+    final double vy2 = v2.getY();\n+    final double vz2 = v2.getZ();\n+    final double cx = vy1 * vz2 - vz1 * vy2;\n+    final double cy = vz1 * vx2 - vx1 * vz2;\n+    final double cz = vx1 * vy2 - vy1 * vx2;\n+    double invNorm = 1.0 / FastMath.sqrt(cx * cx + cy * cy + cz * cz);\n+    if (Double.isFinite(invNorm)) {\n+        return new Vector3D(cx * invNorm, cy * invNorm, cz * invNorm);\n+    }\n+    // the norm of the cross product is zero, we try to recover a non-zero direction\n+    // using linearly independent columns of the 3x3 matrix of the input vectors\n+    RealMatrix m = new Array2DRowRealMatrix(new double[][]{{vx1, vy1, vz1}, {vx2, vy2, vz2}, {cx, cy, cz}}, false);\n+    int[] pivot = new LUDecomposition(m).getSolver().getPermutation();\n+    if (pivot[2] != 2) {\n+        // swap first two columns\n+        double tmp = vx1;\n+        vx1 = vy1; vy1 = tmp;\n+        tmp = vx2; vx2 = vy2; vy2 = tmp;\n+        m.setColumnMatrix(0, new double[]{vx1, vy1, vz1});\n+        m.setColumnMatrix(1, new double[]{vx2, vy2, vz2});\n+        pivot = new LUDecomposition(m).getSolver().getPermutation();\n+    }\n+    if (m.getEntry(pivot[0], 0) != 0.0) {\n+        // column 1 and column 2 are pivots, use first two rows\n+        invNorm = 1.0 / FastMath.sqrt(vx1 * vx1 + vy1 * vy1 + vz1 * vz1);\n+        return new Vector3D(cy * vz1 * invNorm - cz * vy1 * invNorm,\n+                            cz * vx1 * invNorm - cx * vz1 * invNorm,\n+                            cx * vy1 * invNorm - cy * vx1 * invNorm);\n+    } else {\n+        // columns 1 and 3 are pivots, use rows 1 and 3\n+        invNorm = 1.0 / FastMath.sqrt(vx1 * vx1 + vz1 * vz1);\n+        return new Vector3D(-vz1 * invNorm, 0, vx1 * invNorm);\n+    }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}