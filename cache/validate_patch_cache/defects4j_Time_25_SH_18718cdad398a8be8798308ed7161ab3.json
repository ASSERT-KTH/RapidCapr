{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    boolean gap = (offsetLocal > offsetAdjusted);\n    long transition;\n    if (gap) {\n        // gap started in the instantLocal time-line\n        transition = previousTransition(instantAdjusted);\n    } else {\n        transition = nextTransition(instantAdjusted);\n    }\n    if (transition > instantLocal) {\n        // we are inside the DST gap, return the previous offset\n        // (the getOffset(instantLocal) is out of the valid period)\n        return offsetLocal;\n    }\n\n    long nextTransition;\n    int offsetAfter;\n    long prevTransition;\n    int offsetBefore;\n    if (gap) {\n        nextTransition = nextTransition(instantLocal - offsetAdjusted);\n        prevTransition = transition;\n        offsetBefore = getOffset(prevTransition - 1);\n        offsetAfter = getOffset(nextTransition);\n    } else {\n        nextTransition = nextTransition(instantLocal - offsetLocal);\n        prevTransition = transition;\n        offsetBefore = getOffset(prevTransition - 1);\n        offsetAfter = getOffset(nextTransition);\n    }\n\n    // if nextTransition is same as prevTransition there is no active\n    // rule and we can get the correct offset directly\n    if (prevTransition == nextTransition) {\n        return offsetAdjusted;\n    }\n\n    if (gap) {\n        if (offsetAfter > offsetBefore) {\n            return offsetAfter;\n        } else {\n            return getOffset(prevTransition - 1);\n        }\n    } else {\n        if (instantLocal >= nextTransition - offsetLocal) {\n            if (offsetBefore < offsetAfter) {\n                return offsetBefore;\n            } else {\n                return offsetAfter;\n            }\n        } else {\n            return offsetBefore;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4b14847c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,62 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    boolean gap = (offsetLocal > offsetAdjusted);\n+    long transition;\n+    if (gap) {\n+        // gap started in the instantLocal time-line\n+        transition = previousTransition(instantAdjusted);\n+    } else {\n+        transition = nextTransition(instantAdjusted);\n+    }\n+    if (transition > instantLocal) {\n+        // we are inside the DST gap, return the previous offset\n+        // (the getOffset(instantLocal) is out of the valid period)\n+        return offsetLocal;\n+    }\n+\n+    long nextTransition;\n+    int offsetAfter;\n+    long prevTransition;\n+    int offsetBefore;\n+    if (gap) {\n+        nextTransition = nextTransition(instantLocal - offsetAdjusted);\n+        prevTransition = transition;\n+        offsetBefore = getOffset(prevTransition - 1);\n+        offsetAfter = getOffset(nextTransition);\n+    } else {\n+        nextTransition = nextTransition(instantLocal - offsetLocal);\n+        prevTransition = transition;\n+        offsetBefore = getOffset(prevTransition - 1);\n+        offsetAfter = getOffset(nextTransition);\n+    }\n+\n+    // if nextTransition is same as prevTransition there is no active\n+    // rule and we can get the correct offset directly\n+    if (prevTransition == nextTransition) {\n+        return offsetAdjusted;\n+    }\n+\n+    if (gap) {\n+        if (offsetAfter > offsetBefore) {\n+            return offsetAfter;\n+        } else {\n+            return getOffset(prevTransition - 1);\n+        }\n+    } else {\n+        if (instantLocal >= nextTransition - offsetLocal) {\n+            if (offsetBefore < offsetAfter) {\n+                return offsetBefore;\n+            } else {\n+                return offsetAfter;\n+            }\n+        } else {\n+            return offsetBefore;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}