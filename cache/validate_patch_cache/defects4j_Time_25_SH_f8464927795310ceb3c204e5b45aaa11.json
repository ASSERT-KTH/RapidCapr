{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // for overlap, choose the lowest offset\n    if (offsetLocal < offsetAdjusted) {\n        long prev = previousTransition(instantAdjusted);\n        if ((prev - offsetLocal) < instantLocal) {\n            return offsetLocal;\n        }\n    } else {\n        // for gap, choose the highest offset\n        long next = nextTransition(instantAdjusted);\n        if ((next - offsetLocal) < instantLocal) {\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..212b3049 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // for overlap, choose the lowest offset\n+    if (offsetLocal < offsetAdjusted) {\n+        long prev = previousTransition(instantAdjusted);\n+        if ((prev - offsetLocal) < instantLocal) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        // for gap, choose the highest offset\n+        long next = nextTransition(instantAdjusted);\n+        if ((next - offsetLocal) < instantLocal) {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}