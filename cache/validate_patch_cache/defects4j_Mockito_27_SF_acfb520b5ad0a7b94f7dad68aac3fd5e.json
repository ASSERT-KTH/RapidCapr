{
    "patch": "import org.mockito.cglib.proxy.Callback;\nimport org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.InvocationHandler;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\nimport org.mockito.internal.creation.MockSettingsImpl;\n\nimport java.lang.reflect.Method;\n\npublic class ResetMock<T> {\n    private static final int METHOD_INTERCEPTOR_INDEX = 0;\n\n    interface MockHandlerInterface<T> extends java.io.Serializable {\n        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n    }\n\n    static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n        private final MockHandlerInterface<T> delegateMockHandler;\n\n        MockHandler(MockHandlerInterface<T> mockHandler) {\n            this.delegateMockHandler = mockHandler;\n        }\n\n        @Override\n        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n        }\n    }\n\n    static class MockHandlerInvocation implements java.io.Serializable {\n        private final Object object;\n        private final Method method;\n        private final Object[] args;\n        private final MethodProxy methodProxy;\n\n        MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n            this.object = object;\n            this.method = method;\n            this.args = args;\n            this.methodProxy = methodProxy;\n        }\n    }\n\n    static class InvocationHandlerAdapter implements MethodInterceptor, java.io.Serializable, Factory {\n        private final MethodInterceptor delegate;\n\n        InvocationHandlerAdapter(MethodInterceptor delegate) {\n            this.delegate = delegate;\n        }\n\n        @Override\n        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n            return delegate.intercept(obj, method, args, proxy);\n        }\n\n        @Override\n        public Object newInstance(Class[] classes, Object[] objects, Callback[] callbacks) {\n            return null;\n        }\n\n        @Override\n        public Object newInstance(Callback callback) {\n            return null;\n        }\n\n        @Override\n        public Object newInstance(Callback[] callbacks) {\n            return null;\n        }\n\n        @Override\n        public Callback getCallback(int i) {\n            return null;\n        }\n\n        @Override\n        public void setCallback(int i, Callback callback) {\n        }\n\n        @Override\n        public void setCallbacks(Callback[] callbacks) {\n        }\n\n        @Override\n        public Callback[] getCallbacks() {\n            return new Callback[0];\n        }\n\n        @Override\n        public void setCallbackFilter(org.mockito.cglib.proxy.CallbackFilter callbackFilter) {\n        }\n\n        @Override\n        public org.mockito.cglib.proxy.CallbackFilter getCallbackFilter() {\n            return null;\n        }\n\n        @Override\n        public void setCallbackType(Class aClass) {\n        }\n\n        @Override\n        public Class getCallbackType() {\n            return null;\n        }\n\n        @Override\n        public Object invoke(Object o, Method method, Object[] objects) throws Throwable {\n            return null;\n        }\n\n        @Override\n        public Object newInstance(Class[] interfaces) {\n            return null;\n        }\n    }\n\n    public void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n        ((Factory) mock).getCallbacks()[METHOD_INTERCEPTOR_INDEX] = new InvocationHandlerAdapter(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n                return newMockHandler.intercept(object, method, args, methodProxy);\n            }\n        });\n        ((Factory) mock).setCallbackType(MethodInterceptor.class);\n        ((Factory) mock).setInterceptDuringConstruction(false);\n        ((Factory) mock).setCallbacks(new Callback[]{((Factory) mock).getCallback(0)});\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        InvocationHandler invocationHandler = ((Factory) mock).getCallbacks()[METHOD_INTERCEPTOR_INDEX];\n        if (invocationHandler instanceof InvocationHandlerAdapter) {\n            InvocationHandlerAdapter invocationHandlerAdapter = (InvocationHandlerAdapter) invocationHandler;\n            Callback delegate = invocationHandlerAdapter.getCallback(0);\n            if (delegate instanceof MockHandler.MockMethodInterceptor) {\n                return ((MockHandler.MockMethodInterceptor) delegate).getMockHandler();\n            }\n        }\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b2cd05c57 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,151 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Callback;\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.InvocationHandler;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+\n+import java.lang.reflect.Method;\n+\n+public class ResetMock<T> {\n+    private static final int METHOD_INTERCEPTOR_INDEX = 0;\n+\n+    interface MockHandlerInterface<T> extends java.io.Serializable {\n+        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n+    }\n+\n+    static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n+        private final MockHandlerInterface<T> delegateMockHandler;\n+\n+        MockHandler(MockHandlerInterface<T> mockHandler) {\n+            this.delegateMockHandler = mockHandler;\n+        }\n+\n+        @Override\n+        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n+            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n+        }\n+    }\n+\n+    static class MockHandlerInvocation implements java.io.Serializable {\n+        private final Object object;\n+        private final Method method;\n+        private final Object[] args;\n+        private final MethodProxy methodProxy;\n+\n+        MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n+            this.object = object;\n+            this.method = method;\n+            this.args = args;\n+            this.methodProxy = methodProxy;\n+        }\n+    }\n+\n+    static class InvocationHandlerAdapter implements MethodInterceptor, java.io.Serializable, Factory {\n+        private final MethodInterceptor delegate;\n+\n+        InvocationHandlerAdapter(MethodInterceptor delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        @Override\n+        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+            return delegate.intercept(obj, method, args, proxy);\n+        }\n+\n+        @Override\n+        public Object newInstance(Class[] classes, Object[] objects, Callback[] callbacks) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object newInstance(Callback callback) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object newInstance(Callback[] callbacks) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Callback getCallback(int i) {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setCallback(int i, Callback callback) {\n+        }\n+\n+        @Override\n+        public void setCallbacks(Callback[] callbacks) {\n+        }\n+\n+        @Override\n+        public Callback[] getCallbacks() {\n+            return new Callback[0];\n+        }\n+\n+        @Override\n+        public void setCallbackFilter(org.mockito.cglib.proxy.CallbackFilter callbackFilter) {\n+        }\n+\n+        @Override\n+        public org.mockito.cglib.proxy.CallbackFilter getCallbackFilter() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setCallbackType(Class aClass) {\n+        }\n+\n+        @Override\n+        public Class getCallbackType() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object invoke(Object o, Method method, Object[] objects) throws Throwable {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object newInstance(Class[] interfaces) {\n+            return null;\n+        }\n+    }\n+\n+    public void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+        ((Factory) mock).getCallbacks()[METHOD_INTERCEPTOR_INDEX] = new InvocationHandlerAdapter(new MethodInterceptor() {\n+            @Override\n+            public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n+                return newMockHandler.intercept(object, method, args, methodProxy);\n+            }\n+        });\n+        ((Factory) mock).setCallbackType(MethodInterceptor.class);\n+        ((Factory) mock).setInterceptDuringConstruction(false);\n+        ((Factory) mock).setCallbacks(new Callback[]{((Factory) mock).getCallback(0)});\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        InvocationHandler invocationHandler = ((Factory) mock).getCallbacks()[METHOD_INTERCEPTOR_INDEX];\n+        if (invocationHandler instanceof InvocationHandlerAdapter) {\n+            InvocationHandlerAdapter invocationHandlerAdapter = (InvocationHandlerAdapter) invocationHandler;\n+            Callback delegate = invocationHandlerAdapter.getCallback(0);\n+            if (delegate instanceof MockHandler.MockMethodInterceptor) {\n+                return ((MockHandler.MockMethodInterceptor) delegate).getMockHandler();\n+            }\n+        }\n+        return null;\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}