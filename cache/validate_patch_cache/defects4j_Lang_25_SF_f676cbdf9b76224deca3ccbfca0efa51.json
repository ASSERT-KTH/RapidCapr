{
    "patch": "public static String unescapeJava(String input) {\n    StringBuilder sb = new StringBuilder(input.length());\n    int i = 0;\n    while (i < input.length()) {\n        char ch = input.charAt(i);\n        if (ch == '\\\\') {\n            i++;\n            if (i < input.length()) {\n                ch = input.charAt(i);\n                if (ch == 'n') {\n                    sb.append('\\n');\n                } else if (ch == 'r') {\n                    sb.append('\\r');\n                } else if (ch == 't') {\n                    sb.append('\\t');\n                } else if (ch == 'f') {\n                    sb.append('\\f');\n                } else if (ch == '\\b') {\n                    sb.append('\\b');\n                } else if (ch == '\\\"') {\n                    sb.append('\\\"');\n                } else if (ch == '\\'') {\n                    sb.append('\\'');\n                } else if (ch == '\\\\') {\n                    sb.append('\\\\');\n                } else if (ch >= '0' && ch <= '7') {\n                    // octal escape\n                    int octalValue = ch - '0';\n                    i++;\n                    if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n                        octalValue = octalValue * 8 + input.charAt(i) - '0';\n                        i++;\n                    }\n                    if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n                        octalValue = octalValue * 8 + input.charAt(i) - '0';\n                        i++;\n                    }\n                    sb.append((char) octalValue);\n                    i--;\n                } else if (ch == 'u') {\n                    // Unicode escape\n                    if (i + 4 < input.length()) {\n                        String hex = input.substring(i + 1, i + 5);\n                        try {\n                            sb.append((char) Integer.parseInt(hex, 16));\n                        } catch (NumberFormatException e) {\n                            throw new IllegalArgumentException(\"Unable to parse unicode value: \" + hex, e);\n                        }\n                        i += 4;\n                    } else {\n                        throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\u\" + input.substring(i + 1));\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Unrecognized escape character: '\\\\\" + ch + \"'\");\n                }\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence: '\\\\' at end of string\");\n            }\n        } else {\n            sb.append(ch);\n        }\n        i++;\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..2106d9f9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,71 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String input) {\n+    StringBuilder sb = new StringBuilder(input.length());\n+    int i = 0;\n+    while (i < input.length()) {\n+        char ch = input.charAt(i);\n+        if (ch == '\\\\') {\n+            i++;\n+            if (i < input.length()) {\n+                ch = input.charAt(i);\n+                if (ch == 'n') {\n+                    sb.append('\\n');\n+                } else if (ch == 'r') {\n+                    sb.append('\\r');\n+                } else if (ch == 't') {\n+                    sb.append('\\t');\n+                } else if (ch == 'f') {\n+                    sb.append('\\f');\n+                } else if (ch == '\\b') {\n+                    sb.append('\\b');\n+                } else if (ch == '\\\"') {\n+                    sb.append('\\\"');\n+                } else if (ch == '\\'') {\n+                    sb.append('\\'');\n+                } else if (ch == '\\\\') {\n+                    sb.append('\\\\');\n+                } else if (ch >= '0' && ch <= '7') {\n+                    // octal escape\n+                    int octalValue = ch - '0';\n+                    i++;\n+                    if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n+                        octalValue = octalValue * 8 + input.charAt(i) - '0';\n+                        i++;\n+                    }\n+                    if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n+                        octalValue = octalValue * 8 + input.charAt(i) - '0';\n+                        i++;\n+                    }\n+                    sb.append((char) octalValue);\n+                    i--;\n+                } else if (ch == 'u') {\n+                    // Unicode escape\n+                    if (i + 4 < input.length()) {\n+                        String hex = input.substring(i + 1, i + 5);\n+                        try {\n+                            sb.append((char) Integer.parseInt(hex, 16));\n+                        } catch (NumberFormatException e) {\n+                            throw new IllegalArgumentException(\"Unable to parse unicode value: \" + hex, e);\n+                        }\n+                        i += 4;\n+                    } else {\n+                        throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\u\" + input.substring(i + 1));\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\"Unrecognized escape character: '\\\\\" + ch + \"'\");\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid escape sequence: '\\\\' at end of string\");\n+            }\n+        } else {\n+            sb.append(ch);\n+        }\n+        i++;\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}