{
    "patch": "public class Values {\n    private Map<Class<?>, Object> values = new HashMap<>();\n\n    public void addValue(Class<?> clazz, Object value) {\n        values.put(clazz, value);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T returnValueFor(Class<T> clazz) {\n        return (T) values.get(clazz);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8714a5dbe 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class Values {\n+    private Map<Class<?>, Object> values = new HashMap<>();\n+\n+    public void addValue(Class<?> clazz, Object value) {\n+        values.put(clazz, value);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T returnValueFor(Class<T> clazz) {\n+        return (T) values.get(clazz);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}