{
    "patch": "switch (value.getType()) {\n  case Token.ASSIGN:\n    // A result that is aliased by a non-local name, is effectively the same as returning a non-local name,\n    // but this doesn't matter if the value is immutable.\n    return NodeUtil.isImmutableValue(value.getLastChild())\n        || (locals.apply(value)\n        && evaluatesToLocalValu",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..15ede95c 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,13 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+switch (value.getType()) {\n+  case Token.ASSIGN:\n+    // A result that is aliased by a non-local name, is effectively the same as returning a non-local name,\n+    // but this doesn't matter if the value is immutable.\n+    return NodeUtil.isImmutableValue(value.getLastChild())\n+        || (locals.apply(value)\n+        && evaluatesToLocalValu\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}