{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isStatementBlock(n)) {\n        scope = t.getScope();\n    }\n\n    switch (n.getToken()) {\n        case FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                defineDeclaredFunction(n, parent);\n                return;\n            }\n            if (parent.getToken() == Token.EXPR_RESULT) {\n                defineDeclaredFunction(n, parent);\n                return;\n            }\n            if (NodeUtil.isFunctionExpression(n) && parent.getToken() == Token.ASSIGN) {\n                return;\n            }\n            break;\n        case CATCH:\n            defineCatch(n, parent);\n            break;\n        case VAR:\n            defineVar(n, parent);\n            break;\n        case PARAM_LIST:\n            if (parent.getToken() == Token.FUNCTION && parent.getParent() != null && parent.getParent().getToken() != Token.ASSIGN) {\n                handleFunctionInputs(parent);\n                // Stop traversal, since the param list and body are both handled here.\n                t.getControlFlowGraph().setCurrentWalker(null);\n                return; \n            }\n            break;\n    }\n\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..21594f74 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,45 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (NodeUtil.isStatementBlock(n)) {\n+        scope = t.getScope();\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    switch (n.getToken()) {\n+        case FUNCTION:\n+            if (NodeUtil.isFunctionDeclaration(n)) {\n+                defineDeclaredFunction(n, parent);\n+                return;\n+            }\n+            if (parent.getToken() == Token.EXPR_RESULT) {\n+                defineDeclaredFunction(n, parent);\n+                return;\n+            }\n+            if (NodeUtil.isFunctionExpression(n) && parent.getToken() == Token.ASSIGN) {\n+                return;\n+            }\n+            break;\n+        case CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        case VAR:\n+            defineVar(n, parent);\n+            break;\n+        case PARAM_LIST:\n+            if (parent.getToken() == Token.FUNCTION && parent.getParent() != null && parent.getParent().getToken() != Token.ASSIGN) {\n+                handleFunctionInputs(parent);\n+                // Stop traversal, since the param list and body are both handled here.\n+                t.getControlFlowGraph().setCurrentWalker(null);\n+                return; \n+            }\n+            break;\n     }\n \n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot assign a value to final variable scope",
    "test_result": "ERROR"
}