{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n    final double[] eigenValues = dec.getRealEigenvalues();\n    int dim = eigenValues.length;\n    final double[] sqrtEigen = new double[dim];\n\n    // Check for negative eigenvalues\n    for (int i = 0; i < dim; i++) {\n        if (eigenValues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        if (eigenValues[i] == 0) {\n            sqrtEigen[i] = 0;\n        } else {\n            sqrtEigen[i] = Math.sqrt(eigenValues[i]);\n        }\n    }\n\n    final RealMatrix V = dec.getV();\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n    final RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n    return sqrtM.scalarMultiply(Math.sqrt(2.0));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..634d20f7e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n+    final double[] eigenValues = dec.getRealEigenvalues();\n+    int dim = eigenValues.length;\n+    final double[] sqrtEigen = new double[dim];\n+\n+    // Check for negative eigenvalues\n+    for (int i = 0; i < dim; i++) {\n+        if (eigenValues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        if (eigenValues[i] == 0) {\n+            sqrtEigen[i] = 0;\n+        } else {\n+            sqrtEigen[i] = Math.sqrt(eigenValues[i]);\n+        }\n     }\n+\n+    final RealMatrix V = dec.getV();\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n+    final RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n+    return sqrtM.scalarMultiply(Math.sqrt(2.0));\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.5> but was:<1.4999998026575463>",
    "test_result": "FAIL"
}