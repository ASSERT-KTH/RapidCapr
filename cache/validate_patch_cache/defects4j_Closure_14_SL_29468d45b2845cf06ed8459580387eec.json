{
    "patch": "if (cfa != null && finallyNode != null) {\n  // If there is a cfa, create an unconditional edge from `finallyNode` to the follow node\n  // after the `finally` block.\n  Node followNode = computeFollowNode(fromNode, parent, cfa);\n  if (followNode != null) {\n    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n  }\n}\n\n// Return the follow node after the `finally` block.\nreturn computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..90f2c9f6 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,17 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && finallyNode != null) {\n+  // If there is a cfa, create an unconditional edge from `finallyNode` to the follow node\n+  // after the `finally` block.\n+  Node followNode = computeFollowNode(fromNode, parent, cfa);\n+  if (followNode != null) {\n+    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n+  }\n+}\n+\n+// Return the follow node after the `finally` block.\n+return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: No cross edges found",
    "test_result": "FAIL"
}