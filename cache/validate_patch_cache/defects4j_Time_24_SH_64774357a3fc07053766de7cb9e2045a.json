{
    "patch": "            boolean adjusted = false;\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (millis > 0 && newMillis < 0) {\n                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n                }\n                if (millis < 0 && newMillis > 0) {\n                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n                }\n                if (!adjusted && millis != newMillis) {\n                    adjusted = true;\n                }\n                millis = newMillis;\n            }\n            if (count > 0 && adjusted) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9ab9f30d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean adjusted = false;\n+            for (int i = 0; i < count; i++) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (millis > 0 && newMillis < 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+                }\n+                if (millis < 0 && newMillis > 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+                }\n+                if (!adjusted && millis != newMillis) {\n+                    adjusted = true;\n+                }\n+                millis = newMillis;\n+            }\n+            if (count > 0 && adjusted) {\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}