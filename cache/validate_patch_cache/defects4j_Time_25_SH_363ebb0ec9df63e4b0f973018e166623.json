{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // check if we are in or near a DST gap\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        // we are in or near a DST gap\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n\n        if (prevLocal != prevAdjusted && offsetAdjusted > offsetLocal) {\n            // we are in a DST gap, choose the earlier offset\n            return offsetLocal;\n        } else if (prevLocal != prevAdjusted && offsetAdjusted < offsetLocal) {\n            // we are in a DST gap, choose the later offset\n            return offsetAdjusted;\n        } else {\n            // we are near a DST gap\n            long localBeforeGap = prevLocal < prevAdjusted ? prevLocal : prevAdjusted;\n            long localAfterGap = nextLocal > nextAdjusted ? nextLocal : nextAdjusted;\n            long adjustedBeforeGap = localBeforeGap + offsetLocal;\n            long adjustedAfterGap = localAfterGap + offsetAdjusted;\n            if (instantLocal >= localAfterGap) {\n                return offsetAdjusted;\n            } else if (instantLocal < localBeforeGap) {\n                return offsetLocal;\n            } else {\n                return instantLocal + offsetAdjusted >= adjustedAfterGap ? offsetAdjusted : offsetLocal;\n            }\n        }\n    } else {\n        // we are not near a DST gap\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6df0cab3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // check if we are in or near a DST gap\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        // we are in or near a DST gap\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+\n+        if (prevLocal != prevAdjusted && offsetAdjusted > offsetLocal) {\n+            // we are in a DST gap, choose the earlier offset\n+            return offsetLocal;\n+        } else if (prevLocal != prevAdjusted && offsetAdjusted < offsetLocal) {\n+            // we are in a DST gap, choose the later offset\n+            return offsetAdjusted;\n+        } else {\n+            // we are near a DST gap\n+            long localBeforeGap = prevLocal < prevAdjusted ? prevLocal : prevAdjusted;\n+            long localAfterGap = nextLocal > nextAdjusted ? nextLocal : nextAdjusted;\n+            long adjustedBeforeGap = localBeforeGap + offsetLocal;\n+            long adjustedAfterGap = localAfterGap + offsetAdjusted;\n+            if (instantLocal >= localAfterGap) {\n+                return offsetAdjusted;\n+            } else if (instantLocal < localBeforeGap) {\n+                return offsetLocal;\n+            } else {\n+                return instantLocal + offsetAdjusted >= adjustedAfterGap ? offsetAdjusted : offsetLocal;\n+            }\n+        }\n+    } else {\n+        // we are not near a DST gap\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000+03]:00> but was:<2007-0[3-31T23:00:00.000+02]:00>",
    "test_result": "FAIL"
}