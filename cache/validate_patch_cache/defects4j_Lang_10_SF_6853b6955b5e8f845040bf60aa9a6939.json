{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean escaped = false;\n    boolean startsWithSpecial = false;\n    boolean endsWithSpecial = false;\n\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s+\");\n            }\n            continue;\n        } else {\n            wasWhite = false;\n        }\n\n        if (c == '\\'' && unquote) {\n            if (++i == value.length()) {\n                break;\n            }\n            c = value.charAt(i);\n        }\n\n        switch (c) {\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n            case '-':\n                if (i == 0) {\n                    startsWithSpecial = true;\n                } else if (i == value.length() - 1) {\n                    endsWithSpecial = true;\n                    if (c == '-') {\n                        regex.append(\"\\\\b\");\n                    }\n                }\n                if (!escaped) {\n                    regex.append(\"\\\\\");\n                    escaped = true;\n                }\n                break;\n            default:\n                escaped = false;\n                if (i == value.length() - 1) {\n                    endsWithSpecial = false;\n                    if (Character.isDigit(c)) {\n                        regex.append(\"\\\\d\");\n                    } else if (Character.isLetter(c)) {\n                        regex.append(\"\\\\p{L}\");\n                    }\n                }\n                break;\n        }\n\n        regex.append(c);\n    }\n\n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n\n    if (startsWithSpecial) {\n        regex.insert(0, \"\\\\b\");\n    }\n\n    if (endsWithSpecial) {\n        regex.append(\"\\\\b\");\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..f9c577e6 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,27 +300,33 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean escaped = false;\n+    boolean startsWithSpecial = false;\n+    boolean endsWithSpecial = false;\n+\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n+            continue;\n+        } else {\n+            wasWhite = false;\n+        }\n+\n+        if (c == '\\'' && unquote) {\n+            if (++i == value.length()) {\n                 break;\n+            }\n+            c = value.charAt(i);\n+        }\n+\n+        switch (c) {\n             case '?':\n             case '[':\n             case ']':\n@@ -335,13 +341,51 @@ public class FastDateParser implements DateParser, Serializable {\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+            case '-':\n+                if (i == 0) {\n+                    startsWithSpecial = true;\n+                } else if (i == value.length() - 1) {\n+                    endsWithSpecial = true;\n+                    if (c == '-') {\n+                        regex.append(\"\\\\b\");\n+                    }\n+                }\n+                if (!escaped) {\n+                    regex.append(\"\\\\\");\n+                    escaped = true;\n+                }\n+                break;\n+            default:\n+                escaped = false;\n+                if (i == value.length() - 1) {\n+                    endsWithSpecial = false;\n+                    if (Character.isDigit(c)) {\n+                        regex.append(\"\\\\d\");\n+                    } else if (Character.isLetter(c)) {\n+                        regex.append(\"\\\\p{L}\");\n+                    }\n+                }\n+                break;\n         }\n-        return regex;\n+\n+        regex.append(c);\n+    }\n+\n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n     }\n \n+    if (startsWithSpecial) {\n+        regex.insert(0, \"\\\\b\");\n+    }\n+\n+    if (endsWithSpecial) {\n+        regex.append(\"\\\\b\");\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}