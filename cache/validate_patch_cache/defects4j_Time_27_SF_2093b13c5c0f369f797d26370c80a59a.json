{
    "patch": "private static class Pair {\n    public Separator separator;\n    public boolean separatorUsed;\n    public Object element;\n\n    public Pair(Separator separator, Object element) {\n        this.separator = separator;\n        this.element = element;\n    }\n}\n\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    Stack<Pair> stack = new Stack<>();\n    Iterator<Object> iter = elementPairs.iterator();\n    while (iter.hasNext()) {\n        Object obj = iter.next();\n        if (obj instanceof Separator) {\n            stack.push(new Pair((Separator) obj, false));\n        } else {\n            if (stack.empty()) {\n                stack.push(new Pair(null, obj));\n            } else {\n                Pair pair = stack.peek();\n                if (pair.separatorUsed) {\n                    stack.push(new Pair(null, obj));\n                } else {\n                    stack.pop();\n                    PeriodFormatter formatter = toFormatter(Collections.singletonList(obj), notPrinter, notParser);\n                    if (formatter.getPrinter() != null && formatter.getParser() != null) {\n                        pair.separator = pair.separator.finish(formatter.getPrinter(), formatter.getParser());\n                    }\n                    pair.separatorUsed = true;\n                    stack.push(pair);\n                }\n            }\n        }\n    }\n    Object[] comp = createComposite(stack.stream().map(p -> p.separator != null ? p.separator : p.element).collect(Collectors.toList()));\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..45b884ba 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,56 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static class Pair {\n+    public Separator separator;\n+    public boolean separatorUsed;\n+    public Object element;\n+\n+    public Pair(Separator separator, Object element) {\n+        this.separator = separator;\n+        this.element = element;\n+    }\n+}\n+\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    Stack<Pair> stack = new Stack<>();\n+    Iterator<Object> iter = elementPairs.iterator();\n+    while (iter.hasNext()) {\n+        Object obj = iter.next();\n+        if (obj instanceof Separator) {\n+            stack.push(new Pair((Separator) obj, false));\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (stack.empty()) {\n+                stack.push(new Pair(null, obj));\n+            } else {\n+                Pair pair = stack.peek();\n+                if (pair.separatorUsed) {\n+                    stack.push(new Pair(null, obj));\n+                } else {\n+                    stack.pop();\n+                    PeriodFormatter formatter = toFormatter(Collections.singletonList(obj), notPrinter, notParser);\n+                    if (formatter.getPrinter() != null && formatter.getParser() != null) {\n+                        pair.separator = pair.separator.finish(formatter.getPrinter(), formatter.getParser());\n+                    }\n+                    pair.separatorUsed = true;\n+                    stack.push(pair);\n+                }\n+            }\n         }\n     }\n+    Object[] comp = createComposite(stack.stream().map(p -> p.separator != null ? p.separator : p.element).collect(Collectors.toList()));\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}