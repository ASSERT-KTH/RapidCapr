{
    "patch": "public double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Map<String, Object> data = gson.fromJson(json, new TypeToken<Map<String, Object>>() {}.getType());\n    int correct = ((Number) data.get(\"typed_correctly\")).intValue();\n    int attempted = ((Number) data.get(\"total_attempts\")).intValue();\n    if (attempted == 0) {\n        return 0.0; // to avoid division by zero\n    }\n    return (double) correct * 100.0 / attempted;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..08dd3bf8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Map<String, Object> data = gson.fromJson(json, new TypeToken<Map<String, Object>>() {}.getType());\n+    int correct = ((Number) data.get(\"typed_correctly\")).intValue();\n+    int attempted = ((Number) data.get(\"total_attempts\")).intValue();\n+    if (attempted == 0) {\n+        return 0.0; // to avoid division by zero\n+    }\n+    return (double) correct * 100.0 / attempted;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}