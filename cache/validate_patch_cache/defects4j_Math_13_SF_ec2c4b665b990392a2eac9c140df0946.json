{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    double[] realEigenvalues = dec.getRealEigenvalues();\n    double[] imagEigenvalues = dec.getImagEigenvalues();\n    final RealMatrix V = dec.getV();\n    final int n = m.getRowDimension();\n    double[][] D_data = new double[n][n];\n    for (int i = 0; i < n; i++) {\n        if (imagEigenvalues[i] != 0.0) {\n            throw new IllegalArgumentException(\"Matrix has complex eigenvalues.\");\n        } else if (realEigenvalues[i] < 0.0) {\n            throw new IllegalArgumentException(\"Matrix has negative eigenvalues.\");\n        } else {\n            D_data[i][i] = Math.sqrt(realEigenvalues[i]);\n        }\n    }\n    final RealMatrix D = MatrixUtils.createRealMatrix(D_data);\n    final RealMatrix D_inverse = MatrixUtils.inverse(D);\n    return V.multiply(D).multiply(D_inverse).multiply(V.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d2bff69e1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    double[] realEigenvalues = dec.getRealEigenvalues();\n+    double[] imagEigenvalues = dec.getImagEigenvalues();\n+    final RealMatrix V = dec.getV();\n+    final int n = m.getRowDimension();\n+    double[][] D_data = new double[n][n];\n+    for (int i = 0; i < n; i++) {\n+        if (imagEigenvalues[i] != 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has complex eigenvalues.\");\n+        } else if (realEigenvalues[i] < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has negative eigenvalues.\");\n+        } else {\n+            D_data[i][i] = Math.sqrt(realEigenvalues[i]);\n+        }\n     }\n+    final RealMatrix D = MatrixUtils.createRealMatrix(D_data);\n+    final RealMatrix D_inverse = MatrixUtils.inverse(D);\n+    return V.multiply(D).multiply(D_inverse).multiply(V.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}