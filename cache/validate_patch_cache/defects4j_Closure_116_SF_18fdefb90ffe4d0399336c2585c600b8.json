{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n    Node arg = callNode.getFirstChild().getNext();\n\n    // Function called via 'call' and 'apply' may have a this-object as\n    // the first parameter.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode) && !arg.isThis()) {\n        return CanInlineResult.NO;\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(\n            !NodeUtil.isFunctionObjectApply(callNode),\n            \"Unexpected function object apply call node: %s\", callNode);\n        arg = arg.getNext();\n      }\n    }\n\n    Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    while (arg != null || param != null) {\n      if (param != null && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n        if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        param = param.getNext();\n        continue;\n      }\n\n      if (arg != null && NodeUtil.mayHaveSideEffects(arg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      arg = arg != null ? arg.getNext() : null;\n      param = param != null ? param.getNext() : null;\n    }\n\n    return arg == null && param == null ? CanInlineResult.YES : CanInlineResult.NO;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..1d2c3bf2 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,66 +686,48 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n+    Node arg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n+    // Function called via 'call' and 'apply' may have a this-object as\n+    // the first parameter.\n     if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (NodeUtil.isFunctionObjectCall(callNode) && !arg.isThis()) {\n+        return CanInlineResult.NO;\n       } else {\n         // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        Preconditions.checkState(\n+            !NodeUtil.isFunctionObjectApply(callNode),\n+            \"Unexpected function object apply call node: %s\", callNode);\n+        arg = arg.getNext();\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+    while (arg != null || param != null) {\n+      if (param != null && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n+        if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        param = param.getNext();\n+        continue;\n       }\n+\n+      if (arg != null && NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      arg = arg != null ? arg.getNext() : null;\n+      param = param != null ? param.getNext() : null;\n     }\n \n-    return CanInlineResult.YES;\n+    return arg == null && param == null ? CanInlineResult.YES : CanInlineResult.NO;\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<NO> but was:<YES>",
    "test_result": "FAIL"
}