{
    "patch": "if (n.getType() == Token.URSH) {\n    long lvalLong = ((long) lvalInt) & 0xFFFFFFFFL;\n    result = ((double) (lvalLong >>> (rvalInt & 0x1F))) % Math.pow(2, 32);\n} else {\n    result = lvalInt >> (rvalInt & 0x1F);\n    if (n.getType() == Token.LSH) {\n        result = lvalInt << (rvalInt & 0x1F);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..3ba27310 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,15 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (n.getType() == Token.URSH) {\n+    long lvalLong = ((long) lvalInt) & 0xFFFFFFFFL;\n+    result = ((double) (lvalLong >>> (rvalInt & 0x1F))) % Math.pow(2, 32);\n+} else {\n+    result = lvalInt >> (rvalInt & 0x1F);\n+    if (n.getType() == Token.LSH) {\n+        result = lvalInt << (rvalInt & 0x1F);\n+    }\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}