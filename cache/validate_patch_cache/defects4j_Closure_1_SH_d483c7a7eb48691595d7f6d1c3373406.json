{
    "patch": "// Remove unused parameters in simple mode.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        int count = 0;\n        for (Node child : argList.children()) {\n            Var var = fnScope.getVar(child.getString());\n            if (referenced.contains(var)) {\n                count++;\n            } else {\n                argList.removeChild(child);\n                compiler.reportCodeChange();\n            }\n        }\n\n        // Update function length property with the correct value\n        function.putProp(Node.LENGTH_STRING,\n                Node.newNumber(Math.max(0, argList.getChildCount() - count)));\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..06e3aeb1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove unused parameters in simple mode.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        int count = 0;\n+        for (Node child : argList.children()) {\n+            Var var = fnScope.getVar(child.getString());\n+            if (referenced.contains(var)) {\n+                count++;\n+            } else {\n+                argList.removeChild(child);\n+                compiler.reportCodeChange();\n+            }\n+        }\n+\n+        // Update function length property with the correct value\n+        function.putProp(Node.LENGTH_STRING,\n+                Node.newNumber(Math.max(0, argList.getChildCount() - count)));\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}