{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolvedViaRegistry = false;\n  boolean cycleDetected = false;\n\n  try {\n    // First, try to resolve the type using the registry.\n    resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n    // Check for an implicit prototype cycle if resolved via registry\n    if (resolvedViaRegistry) {\n      cycleDetected = detectImplicitPrototypeCycle();\n    }\n  } finally {\n    // If we haven't resolved the type and detected a cycle,\n    // try to resolve it via properties.\n    if (!resolvedViaRegistry || cycleDetected) {\n      resolveViaProperties(t, enclosing);\n\n      // Check for an implicit prototype cycle if resolved via properties\n      if (!cycleDetected) {\n        cycleDetected = detectImplicitPrototypeCycle();\n      }\n    }\n  }\n\n  // Call super.resolveInternal() only if we have resolved the type\n  // and haven't detected an implicit prototype cycle.\n  if (resolvedViaRegistry || !cycleDetected) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n\n  // Return the resolved type if we have resolved it and haven't detected an\n  // implicit prototype cycle and we're in the last registry generation,\n  // otherwise, return null.\n  return isResolved() && !cycleDetected ?\n      registry.isLastGeneration() ? getReferencedType() : this : null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..1b79b063 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,45 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolvedViaRegistry = false;\n+  boolean cycleDetected = false;\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  try {\n+    // First, try to resolve the type using the registry.\n+    resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // Check for an implicit prototype cycle if resolved via registry\n+    if (resolvedViaRegistry) {\n+      cycleDetected = detectImplicitPrototypeCycle();\n+    }\n+  } finally {\n+    // If we haven't resolved the type and detected a cycle,\n+    // try to resolve it via properties.\n+    if (!resolvedViaRegistry || cycleDetected) {\n+      resolveViaProperties(t, enclosing);\n+\n+      // Check for an implicit prototype cycle if resolved via properties\n+      if (!cycleDetected) {\n+        cycleDetected = detectImplicitPrototypeCycle();\n+      }\n     }\n+  }\n \n+  // Call super.resolveInternal() only if we have resolved the type\n+  // and haven't detected an implicit prototype cycle.\n+  if (resolvedViaRegistry || !cycleDetected) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n   }\n \n+  // Return the resolved type if we have resolved it and haven't detected an\n+  // implicit prototype cycle and we're in the last registry generation,\n+  // otherwise, return null.\n+  return isResolved() && !cycleDetected ?\n+      registry.isLastGeneration() ? getReferencedType() : this : null;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}