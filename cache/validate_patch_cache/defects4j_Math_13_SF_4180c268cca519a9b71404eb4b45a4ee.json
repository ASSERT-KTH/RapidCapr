{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_SIZE = 10000; // maximum matrix size to perform eigen decomposition on\n    if (m.getRowDimension() <= MAX_SIZE && m.getColumnDimension() <= MAX_SIZE) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } else {\n        // perform some other operation or return null if the matrix size is too large\n        return null; \n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fef6a9049 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_SIZE = 10000; // maximum matrix size to perform eigen decomposition on\n+    if (m.getRowDimension() <= MAX_SIZE && m.getColumnDimension() <= MAX_SIZE) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } else {\n+        // perform some other operation or return null if the matrix size is too large\n+        return null; \n     }\n }\n+}",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}