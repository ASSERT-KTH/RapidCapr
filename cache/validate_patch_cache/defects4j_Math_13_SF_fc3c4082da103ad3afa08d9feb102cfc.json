{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix diag = dec.getD();\n    for (int i = 0; i < diag.getRowDimension(); i++) {\n        diag.setEntry(i, i, Math.sqrt(Math.max(diag.getEntry(i, i), 0.0)));\n    }\n    final RealMatrix p = dec.getV().multiply(diag).multiply(dec.getVT());\n    return p;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4dc05e8c8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix diag = dec.getD();\n+    for (int i = 0; i < diag.getRowDimension(); i++) {\n+        diag.setEntry(i, i, Math.sqrt(Math.max(diag.getEntry(i, i), 0.0)));\n     }\n+    final RealMatrix p = dec.getV().multiply(diag).multiply(dec.getVT());\n+    return p;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}