{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isFunctionType()) {\n      FunctionType ft = constructorType.toMaybeFunctionType();\n      if (ft.isConstructor()) {\n        // Use the constructed type of the constructor\n        type = ft.getInstanceType();\n      } else if (constructor.isCall()) {\n        // If the constructor is called but not with the new operator, use the return type\n        type = ft.getReturnType();\n      }\n    } else if (constructorType.isEnumElementType()) {\n      EnumElementType enumType = constructorType.toMaybeEnumElementType();\n      if (enumType.isPrimitiveType()) {\n        type = enumType.getPrimitiveType();\n      } else {\n        // Constructing an instance of an enum is not valid, so return 'undefined'\n        type = getNativeType(JSTypeNative.UNDEFINED_TYPE);\n      }\n    } else if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n  }\n  // If type is null, the constructor did not have a known type\n  // Set the type to unknown\n  if (type == null) {\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n  n.setJSType(type);\n  // Traverse the constructor arguments\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..4220dd7a 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,45 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isFunctionType()) {\n+      FunctionType ft = constructorType.toMaybeFunctionType();\n+      if (ft.isConstructor()) {\n+        // Use the constructed type of the constructor\n+        type = ft.getInstanceType();\n+      } else if (constructor.isCall()) {\n+        // If the constructor is called but not with the new operator, use the return type\n+        type = ft.getReturnType();\n+      }\n+    } else if (constructorType.isEnumElementType()) {\n+      EnumElementType enumType = constructorType.toMaybeEnumElementType();\n+      if (enumType.isPrimitiveType()) {\n+        type = enumType.getPrimitiveType();\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        // Constructing an instance of an enum is not valid, so return 'undefined'\n+        type = getNativeType(JSTypeNative.UNDEFINED_TYPE);\n       }\n+    } else if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  // If type is null, the constructor did not have a known type\n+  // Set the type to unknown\n+  if (type == null) {\n+    type = getNativeType(UNKNOWN_TYPE);\n+  }\n+  n.setJSType(type);\n+  // Traverse the constructor arguments\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}