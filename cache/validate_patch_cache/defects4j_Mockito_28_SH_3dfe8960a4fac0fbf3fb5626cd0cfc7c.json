{
    "patch": "Object candidate = null;\ntry {\n    candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    if (candidate != null) {\n        if (field.getType().isAssignableFrom(candidate.getClass())) {\n            field.setAccessible(true);\n            field.set(fieldInstance, field.getType().cast(candidate));\n        } else {\n            String message = String.format(\"Mock candidate %s is not compatible with field type %s\", candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n            throw new RuntimeException(message);\n        }\n    }\n} catch (IllegalAccessException e) {\n    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n} finally {\n    if (candidate != null) {\n        mocks.remove(candidate); // remove the used mock from the set of available mocks\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..9fb511683 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = null;\n+try {\n+    candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+    if (candidate != null) {\n+        if (field.getType().isAssignableFrom(candidate.getClass())) {\n+            field.setAccessible(true);\n+            field.set(fieldInstance, field.getType().cast(candidate));\n+        } else {\n+            String message = String.format(\"Mock candidate %s is not compatible with field type %s\", candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n+            throw new RuntimeException(message);\n+        }\n+    }\n+} catch (IllegalAccessException e) {\n+    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+} finally {\n+    if (candidate != null) {\n+        mocks.remove(candidate); // remove the used mock from the set of available mocks\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}