{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !NodeUtil.isStatementBlock(n.getParent()) ||\n      !n.getParent().hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n  if (!NodeUtil.isExpressionNode(maybeExpr)) {\n    return false;\n  }\n\n  boolean hasNonExpressionChildren = false;\n  boolean hasVarDeclaration = false;\n\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // Ignore the expression node.\n    if (child.equals(maybeExpr)) {\n      continue;\n    }\n\n    int childType = child.getType();\n\n    // Check for non-expression nodes.\n    if (childType == Token.EMPTY || childType == Token.TRY ||\n        (!NodeUtil.isExpressionNode(child) && childType != Token.VAR)) {\n      hasNonExpressionChildren = true;\n      break;\n    }\n\n    // Check for VAR declarations.\n    if (childType == Token.VAR) {\n      if (!child.hasOneChild() || child.getFirstChild().getType() != Token.NAME) {\n        hasNonExpressionChildren = true;\n        break;\n      }\n\n      hasVarDeclaration = true;\n      \n      // Check for empty statements following the VAR declaration.\n      Node nextNode = child.getNext();\n      while (nextNode != null && nextNode.getType() == Token.EMPTY) {\n        nextNode = nextNode.getNext();\n      }\n      \n      if (nextNode != null) {\n        hasNonExpressionChildren = true;\n        break;\n      }\n    }\n  }\n\n  return (NodeUtil.isExpressionNode(maybeExpr) || hasVarDeclaration) &&\n         !hasNonExpressionChildren && !containsEventHandler(n.getParent());\n}\n\nprivate boolean containsEventHandler(Node n) {\n  if (n == null) {\n    return false;\n  }\n\n  if (n.getType() == Token.SCRIPT ||\n      n.getType() == Token.FUNCTION ||\n      n.getType() == Token.BLOCK) {\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (containsEventHandler(child)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if (n.isCall() && NodeUtil.isGet(n.getFirstChild()) &&\n      n.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.events.listen\")) {\n    Node lastArg = n.getLastChild();\n    if (!lastArg.isFunction()) {\n      return false;\n    }\n\n    Node functionBody = lastArg.getLastChild();\n    if (!NodeUtil.isStatementBlock(functionBody)) {\n      return false;\n    }\n\n    Set<Node> visited = new HashSet<>();\n    Deque<Node> queue = new LinkedList<>();\n    queue.addLast(functionBody);\n\n    while (!queue.isEmpty()) {\n      Node current = queue.removeFirst();\n      if (visited.contains(current)) {\n        continue;\n      }\n      visited.add(current);\n      \n      if (current.getChildCount() > 0) {\n        for (Node child = current.getFirstChild(); child != null; child = child.getNext()) {\n          if (isEventHandler(child, visited)) {\n            return true;\n          }\n          queue.addLast(child);\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nprivate boolean isEventHandler(Node n, Set<Node> visited) {\n  if (!n.hasChildren()) {\n    return false;\n  }\n\n  if (n.getChildCount() == 1 && n.getFirstChild().isCall() &&\n      NodeUtil.isGet(n.getFirstChild().getFirstChild()) &&\n      n.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.events.fire\")) {\n    return true;\n  }\n\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (visited.contains(child)) {\n      continue;\n    }\n    visited.add(child);\n    if (isEventHandler(child, visited)) {\n      return true;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a5e8beb5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,138 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !NodeUtil.isStatementBlock(n.getParent()) ||\n+      !n.getParent().hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node maybeExpr = n.getFirstChild();\n+  if (!NodeUtil.isExpressionNode(maybeExpr)) {\n+    return false;\n+  }\n+\n+  boolean hasNonExpressionChildren = false;\n+  boolean hasVarDeclaration = false;\n+\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    // Ignore the expression node.\n+    if (child.equals(maybeExpr)) {\n+      continue;\n+    }\n+\n+    int childType = child.getType();\n+\n+    // Check for non-expression nodes.\n+    if (childType == Token.EMPTY || childType == Token.TRY ||\n+        (!NodeUtil.isExpressionNode(child) && childType != Token.VAR)) {\n+      hasNonExpressionChildren = true;\n+      break;\n+    }\n+\n+    // Check for VAR declarations.\n+    if (childType == Token.VAR) {\n+      if (!child.hasOneChild() || child.getFirstChild().getType() != Token.NAME) {\n+        hasNonExpressionChildren = true;\n+        break;\n+      }\n+\n+      hasVarDeclaration = true;\n+      \n+      // Check for empty statements following the VAR declaration.\n+      Node nextNode = child.getNext();\n+      while (nextNode != null && nextNode.getType() == Token.EMPTY) {\n+        nextNode = nextNode.getNext();\n+      }\n+      \n+      if (nextNode != null) {\n+        hasNonExpressionChildren = true;\n+        break;\n       }\n     }\n+  }\n \n+  return (NodeUtil.isExpressionNode(maybeExpr) || hasVarDeclaration) &&\n+         !hasNonExpressionChildren && !containsEventHandler(n.getParent());\n+}\n+\n+private boolean containsEventHandler(Node n) {\n+  if (n == null) {\n+    return false;\n+  }\n+\n+  if (n.getType() == Token.SCRIPT ||\n+      n.getType() == Token.FUNCTION ||\n+      n.getType() == Token.BLOCK) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      if (containsEventHandler(child)) {\n+        return true;\n+      }\n+    }\n     return false;\n   }\n \n+  if (n.isCall() && NodeUtil.isGet(n.getFirstChild()) &&\n+      n.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.events.listen\")) {\n+    Node lastArg = n.getLastChild();\n+    if (!lastArg.isFunction()) {\n+      return false;\n+    }\n+\n+    Node functionBody = lastArg.getLastChild();\n+    if (!NodeUtil.isStatementBlock(functionBody)) {\n+      return false;\n+    }\n+\n+    Set<Node> visited = new HashSet<>();\n+    Deque<Node> queue = new LinkedList<>();\n+    queue.addLast(functionBody);\n+\n+    while (!queue.isEmpty()) {\n+      Node current = queue.removeFirst();\n+      if (visited.contains(current)) {\n+        continue;\n+      }\n+      visited.add(current);\n+      \n+      if (current.getChildCount() > 0) {\n+        for (Node child = current.getFirstChild(); child != null; child = child.getNext()) {\n+          if (isEventHandler(child, visited)) {\n+            return true;\n+          }\n+          queue.addLast(child);\n+        }\n+      }\n+    }\n+  }\n+\n+  return false;\n+}\n+\n+private boolean isEventHandler(Node n, Set<Node> visited) {\n+  if (!n.hasChildren()) {\n+    return false;\n+  }\n+\n+  if (n.getChildCount() == 1 && n.getFirstChild().isCall() &&\n+      NodeUtil.isGet(n.getFirstChild().getFirstChild()) &&\n+      n.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.events.fire\")) {\n+    return true;\n+  }\n+\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (visited.contains(child)) {\n+      continue;\n+    }\n+    visited.add(child);\n+    if (isEventHandler(child, visited)) {\n+      return true;\n+    }\n+  }\n+\n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}