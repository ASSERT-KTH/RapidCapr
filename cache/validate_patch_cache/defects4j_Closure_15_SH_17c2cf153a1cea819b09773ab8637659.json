{
    "patch": "  private boolean checkCallArguments(Node call, FunctionType functionType) {\n    if (functionType == null) {\n      return false;\n    }\n\n    for (int i = 0; i < functionType.getParameters().size(); i++) {\n      Node arg = null;\n      int varArgsNodeIndex = i - functionType.getRequiredArity();\n      if (i < call.getChildCount()) {\n        arg = call.getChildAtIndex(i);\n      } else if (varArgsNodeIndex == 0) {\n        arg = getOnlyVarArgNode(call.getLastChild());\n      }\n      if (arg != null) {\n        if (functionType.isVarArgs() && varArgsNodeIndex >= 0) {\n          for (; arg != null; arg = arg.getNext()) {\n            if (apply(arg) || varArgsNodeIndex == 0 && NodeUtil.mayHaveSideEffects(arg)) {\n              return true;\n            }\n            varArgsNodeIndex--;\n          }\n          break;\n        } else if (apply(arg)) {\n          return true;\n        }\n      } else if (!functionType.isVarArgs()) {\n        return true;\n      }\n    }\n    \n    if (call.isTaggedTemplateLit()) {\n      Node templateLitNode = call.getLastChild();\n      for (Node c = templateLitNode.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n          return true;\n        }\n      }\n    }\n\n    if (NodeUtil.isBuiltinConstructorCall(call)) {\n      return true;\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..ca1adeed 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,51 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+  private boolean checkCallArguments(Node call, FunctionType functionType) {\n+    if (functionType == null) {\n+      return false;\n+    }\n+\n+    for (int i = 0; i < functionType.getParameters().size(); i++) {\n+      Node arg = null;\n+      int varArgsNodeIndex = i - functionType.getRequiredArity();\n+      if (i < call.getChildCount()) {\n+        arg = call.getChildAtIndex(i);\n+      } else if (varArgsNodeIndex == 0) {\n+        arg = getOnlyVarArgNode(call.getLastChild());\n+      }\n+      if (arg != null) {\n+        if (functionType.isVarArgs() && varArgsNodeIndex >= 0) {\n+          for (; arg != null; arg = arg.getNext()) {\n+            if (apply(arg) || varArgsNodeIndex == 0 && NodeUtil.mayHaveSideEffects(arg)) {\n+              return true;\n+            }\n+            varArgsNodeIndex--;\n+          }\n+          break;\n+        } else if (apply(arg)) {\n+          return true;\n+        }\n+      } else if (!functionType.isVarArgs()) {\n+        return true;\n+      }\n+    }\n+    \n+    if (call.isTaggedTemplateLit()) {\n+      Node templateLitNode = call.getLastChild();\n+      for (Node c = templateLitNode.getFirstChild(); c != null; c = c.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    if (NodeUtil.isBuiltinConstructorCall(call)) {\n+      return true;\n+    }\n+\n+    return false;\n+  }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}