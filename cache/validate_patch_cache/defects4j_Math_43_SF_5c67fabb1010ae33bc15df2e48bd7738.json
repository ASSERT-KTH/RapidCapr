{
    "patch": "public void addValue(double value) {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        return;\n    }\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(Math.log(value));\n    secondMoment.increment(value);\n\n    if (meanImpl == null) {\n        meanImpl = new Mean();\n    }\n\n    if (!(meanImpl instanceof Mean)) {\n        meanImpl.increment(value);\n    } else {\n        meanImpl.evaluate(new double[]{value});\n    }\n\n    if (varianceImpl == null) {\n        varianceImpl = new Variance();\n    }\n\n    if (!(varianceImpl instanceof Variance)) {\n        varianceImpl.increment(value);\n    } else {\n        varianceImpl.increment(value);\n    }\n\n    if (geoMeanImpl == null) {\n        geoMeanImpl = new GeometricMean();\n    }\n\n    geoMeanImpl.increment(value); // to get the original product\n\n    // get the log-based geometric mean\n    double currGeoMean = Math.exp(getSumOfLogs() / n);\n\n    // use the corrected count to evaluate the final geometric mean\n    if (n > geoMeanImpl.getN()) {\n\n        double[] values = new double[]{currGeoMean};\n        if (currGeoMean == 0.0) {\n            values = new double[0];\n        }\n        geoMeanImpl.evaluate(values);\n    }\n    n++;\n}\n\nprivate double getSumOfLogs() {\n    double sumLogs = Double.NEGATIVE_INFINITY;\n    if (sumLogImpl != null) {\n        sumLogs = sumLogImpl.getResult();\n    }\n    return sumLogs;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..6e0c6636e 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,65 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+public void addValue(double value) {\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+        return;\n+    }\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(Math.log(value));\n+    secondMoment.increment(value);\n+\n+    if (meanImpl == null) {\n+        meanImpl = new Mean();\n+    }\n+\n+    if (!(meanImpl instanceof Mean)) {\n+        meanImpl.increment(value);\n+    } else {\n+        meanImpl.evaluate(new double[]{value});\n+    }\n+\n+    if (varianceImpl == null) {\n+        varianceImpl = new Variance();\n+    }\n+\n+    if (!(varianceImpl instanceof Variance)) {\n+        varianceImpl.increment(value);\n+    } else {\n+        varianceImpl.increment(value);\n+    }\n+\n+    if (geoMeanImpl == null) {\n+        geoMeanImpl = new GeometricMean();\n+    }\n+\n+    geoMeanImpl.increment(value); // to get the original product\n+\n+    // get the log-based geometric mean\n+    double currGeoMean = Math.exp(getSumOfLogs() / n);\n+\n+    // use the corrected count to evaluate the final geometric mean\n+    if (n > geoMeanImpl.getN()) {\n+\n+        double[] values = new double[]{currGeoMean};\n+        if (currGeoMean == 0.0) {\n+            values = new double[0];\n         }\n-        n++;\n+        geoMeanImpl.evaluate(values);\n     }\n+    n++;\n+}\n+\n+private double getSumOfLogs() {\n+    double sumLogs = Double.NEGATIVE_INFINITY;\n+    if (sumLogImpl != null) {\n+        sumLogs = sumLogImpl.getResult();\n+    }\n+    return sumLogs;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: method getSumOfLogs() is already defined in class SummaryStatistics",
    "test_result": "ERROR"
}