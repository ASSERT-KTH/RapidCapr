{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  if (n.isFunction()) {\n    if (!n.getParent().isFunction()) {\n      // Function declaration, not a nested function\n      defineDeclaredFunction(n, parent);\n    }\n    return;\n  }\n\n  if (n.isVar()) {\n    defineVar(n, parent);\n    return;\n  }\n\n  if (n.getType() == Token.CATCH) {\n    defineCatch(n, parent);\n    return;\n  }\n\n  if (n.getType() == Token.EXPR_RESULT && n.getChildCount() > 0 && n.getFirstChild().isFunction()) {\n    handleFunctionInputs(n);\n    return;\n  }\n\n  // Attach literal types for both expressions and variables\n  attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5a1a2ef7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,38 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+  if (n.isFunction()) {\n+    if (!n.getParent().isFunction()) {\n+      // Function declaration, not a nested function\n+      defineDeclaredFunction(n, parent);\n     }\n+    return;\n+  }\n+\n+  if (n.isVar()) {\n+    defineVar(n, parent);\n+    return;\n+  }\n+\n+  if (n.getType() == Token.CATCH) {\n+    defineCatch(n, parent);\n+    return;\n+  }\n+\n+  if (n.getType() == Token.EXPR_RESULT && n.getChildCount() > 0 && n.getFirstChild().isFunction()) {\n+    handleFunctionInputs(n);\n+    return;\n+  }\n+\n+  // Attach literal types for both expressions and variables\n+  attachLiteralTypes(n);\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}