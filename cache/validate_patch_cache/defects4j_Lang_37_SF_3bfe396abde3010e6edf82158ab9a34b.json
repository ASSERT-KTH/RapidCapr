{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    final Class<?> type1 = array1.getClass().getComponentType();\n    Object[] joinedArray = (Object[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    \n    int startPos = array1.length;\n    int copyLength = array2.length;\n    if (type1.isPrimitive()) {\n        Object listTypeArray = Array.newInstance(type1, array2.length);\n        for (int i = 0; i < array2.length; i++) {\n            Array.set(listTypeArray, i, array2[i]);\n        }\n        System.arraycopy(listTypeArray, 0, joinedArray, startPos, copyLength);\n    } else {\n        for (int i = 0; i < array2.length; i++) {\n            if (type1.isAssignableFrom(array2[i].getClass())) {\n                joinedArray[startPos + i] = array2[i];\n            } else {\n                throw new ArrayStoreException(\"Cannot store \" + array2[i].getClass().getName() + \" in an array of \" + type1.getName());\n            }\n        }\n    }\n    \n    return (T[]) joinedArray;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..195a99aa 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,39 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null && array2 == null) {\n+        return null;\n+    } else if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+    \n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    Object[] joinedArray = (Object[]) Array.newInstance(type1, array1.length + array2.length);\n+    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+    \n+    int startPos = array1.length;\n+    int copyLength = array2.length;\n+    if (type1.isPrimitive()) {\n+        Object listTypeArray = Array.newInstance(type1, array2.length);\n+        for (int i = 0; i < array2.length; i++) {\n+            Array.set(listTypeArray, i, array2[i]);\n+        }\n+        System.arraycopy(listTypeArray, 0, joinedArray, startPos, copyLength);\n+    } else {\n+        for (int i = 0; i < array2.length; i++) {\n+            if (type1.isAssignableFrom(array2[i].getClass())) {\n+                joinedArray[startPos + i] = array2[i];\n+            } else {\n+                throw new ArrayStoreException(\"Cannot store \" + array2[i].getClass().getName() + \" in an array of \" + type1.getName());\n+            }\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n     }\n+    \n+    return (T[]) joinedArray;\n+}\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "java.lang.ArrayStoreException: Cannot store java.lang.Long in an array of java.lang.Integer",
    "test_result": "FAIL"
}