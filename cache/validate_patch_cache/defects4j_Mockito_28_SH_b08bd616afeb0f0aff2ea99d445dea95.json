{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif (candidate != null) {\n    try {\n        final Object value = doPrivileged((PrivilegedExceptionAction<Object>) () -> {\n            field.setAccessible(true);\n            return field.get(fieldInstance);\n        });\n        if (value == null) {\n            field.setAccessible(true);\n            field.set(fieldInstance, candidate);\n        }\n    } catch (IllegalAccessException | PrivilegedActionException e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..a56169fac 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,24 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (candidate != null) {\n+    try {\n+        final Object value = doPrivileged((PrivilegedExceptionAction<Object>) () -> {\n+            field.setAccessible(true);\n+            return field.get(fieldInstance);\n+        });\n+        if (value == null) {\n+            field.setAccessible(true);\n+            field.set(fieldInstance, candidate);\n+        }\n+    } catch (IllegalAccessException | PrivilegedActionException e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}