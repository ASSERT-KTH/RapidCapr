{
    "patch": "                } else {\n                    simplex = contract(original, best, comparator);\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                simplex = contract(original, best, comparator);\n\n            }\n\n            // check convergence\n            if (isConverged(simplex[0].getPoint(), simplex[simplex.length - 1].getPoint())) {\n                return;\n            }\n\n        }\n\n    }\n\n    private RealPointValuePair[] contract(RealPointValuePair[] original,\n                                           RealPointValuePair best,\n                                           Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n        for (int i = 0; i < original.length; i++) {\n            if (i == 0) {\n                contractedSimplex[i] = best;\n            } else {\n                contractedSimplex[i] = new RealPointValuePair(contractCoefficient * (original[i].getPoint()[i - 1] + best.getPoint()[i - 1]), original[i].getPoint());\n            }\n        }\n        evaluateSimplex(contractedSimplex, comparator);\n        return contractedSimplex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..822faca6e 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,39 +58,19 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original, best, comparator);\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // compute the contracted simplex\n+                simplex = contract(original, best, comparator);\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            }\n \n             // check convergence\n+            if (isConverged(simplex[0].getPoint(), simplex[simplex.length - 1].getPoint())) {\n                 return;\n             }\n \n@@ -98,6 +78,20 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+    private RealPointValuePair[] contract(RealPointValuePair[] original,\n+                                           RealPointValuePair best,\n+                                           Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+        for (int i = 0; i < original.length; i++) {\n+            if (i == 0) {\n+                contractedSimplex[i] = best;\n+            } else {\n+                contractedSimplex[i] = new RealPointValuePair(contractCoefficient * (original[i].getPoint()[i - 1] + best.getPoint()[i - 1]), original[i].getPoint());\n+            }\n+        }\n+        evaluateSimplex(contractedSimplex, comparator);\n+        return contractedSimplex;\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}