{
    "patch": "boolean isOverride =\n          parent != null &&\n          parent.getType() == Token.ASSIGN &&\n          NodeUtil.isGetOrSetKey(getprop) &&\n          !getprop.isString() &&\n          getprop.getFirstChild().getType() == Token.THIS &&\n          t.getScopeDepth() == 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..98fc9c4f 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,13 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride =\n+          parent != null &&\n+          parent.getType() == Token.ASSIGN &&\n+          NodeUtil.isGetOrSetKey(getprop) &&\n+          !getprop.isString() &&\n+          getprop.getFirstChild().getType() == Token.THIS &&\n+          t.getScopeDepth() == 1;\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}