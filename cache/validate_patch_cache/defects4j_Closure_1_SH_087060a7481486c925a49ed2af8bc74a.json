{
    "patch": "  \n    // Find the number of unreferenced arguments\n    int totalArgs = 0;\n    int unreferencedArgs = 0;\n    boolean shouldSkip = false;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      totalArgs++;\n      if (arg.isDefaultValue()) {\n        shouldSkip = true;\n      }\n      if (!shouldSkip) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          unreferencedArgs++;\n        }\n      }\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int numArgsToRemove = unreferencedArgs;\n      if (numArgsToRemove > 0 && numArgsToRemove < totalArgs) {\n        Node lastArg = argList.getLastChild();\n        while (numArgsToRemove > 0 && lastArg != null) {\n          Var var = fnScope.getVar(lastArg.getString());\n          Node nextArg = lastArg.getPrevious();\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            numArgsToRemove--;\n            compiler.reportCodeChange();\n          }\n          lastArg = nextArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b4cbdbe0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  \n+    // Find the number of unreferenced arguments\n+    int totalArgs = 0;\n+    int unreferencedArgs = 0;\n+    boolean shouldSkip = false;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      totalArgs++;\n+      if (arg.isDefaultValue()) {\n+        shouldSkip = true;\n+      }\n+      if (!shouldSkip) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          unreferencedArgs++;\n+        }\n+      }\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int numArgsToRemove = unreferencedArgs;\n+      if (numArgsToRemove > 0 && numArgsToRemove < totalArgs) {\n+        Node lastArg = argList.getLastChild();\n+        while (numArgsToRemove > 0 && lastArg != null) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          Node nextArg = lastArg.getPrevious();\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            numArgsToRemove--;\n+            compiler.reportCodeChange();\n+          }\n+          lastArg = nextArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}