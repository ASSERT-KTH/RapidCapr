{
    "patch": "  /**\n   * Returns the JSType for a new expression.\n   *\n   * @param n The node representing the new expression.\n   * @param scope The current scope.\n   * @return The JSType for the new expression.\n   */\n  private JSType traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = getNativeType(UNKNOWN_TYPE);\n    if (constructorType == null) {\n      n.setJSType(type);\n      return scope;\n    }\n\n    boolean unknownOrEmptyConstructor =\n        constructorType.isUnknownType() || constructorType.isEmptyType();\n    if (!unknownOrEmptyConstructor) {\n      FunctionType functionType = constructorType.toMaybeFunctionType();\n      if (functionType != null && functionType.isConstructor()) {\n        if (functionType.isGeneric()) {\n          if (n.getLastChild() != null) {\n            // Only infer @template types, not @param types.\n            // Resolve the function type using the template type syntax of the form:\n            // new constructor<T1, T2, ...>(...)\n            JSType[] templateTypes = new JSType[functionType.getTemplateTypeMap().size()];\n            for (int i = 1; i < n.getChildCount(); ++i) {\n              templateTypes[i - 1] =\n                  getJSType(n.getChildAt(i).getJSDocInfo().getTemplateTypeTransformations());\n            }\n            JSType resolvedFunctionType =\n                resolveGenericFunction(\n                    n, scope, functionType.getInstanceType(), functionType, templateTypes);\n            if (resolvedFunctionType != null && resolvedFunctionType.isFunctionType()) {\n              type = resolvedFunctionType.toMaybeFunctionType().getInstanceType();\n            }\n          }\n        } else {\n          type = functionType.getInstanceType();\n        }\n      } else {\n        type = constructorType.restrictByNotNullOrUndefined();\n      }\n    }\n\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c5fa9db2 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,32 +1032,56 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+  /**\n+   * Returns the JSType for a new expression.\n+   *\n+   * @param n The node representing the new expression.\n+   * @param scope The current scope.\n+   * @return The JSType for the new expression.\n+   */\n+  private JSType traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+    JSType type = getNativeType(UNKNOWN_TYPE);\n+    if (constructorType == null) {\n+      n.setJSType(type);\n+      return scope;\n+    }\n+\n+    boolean unknownOrEmptyConstructor =\n+        constructorType.isUnknownType() || constructorType.isEmptyType();\n+    if (!unknownOrEmptyConstructor) {\n+      FunctionType functionType = constructorType.toMaybeFunctionType();\n+      if (functionType != null && functionType.isConstructor()) {\n+        if (functionType.isGeneric()) {\n+          if (n.getLastChild() != null) {\n+            // Only infer @template types, not @param types.\n+            // Resolve the function type using the template type syntax of the form:\n+            // new constructor<T1, T2, ...>(...)\n+            JSType[] templateTypes = new JSType[functionType.getTemplateTypeMap().size()];\n+            for (int i = 1; i < n.getChildCount(); ++i) {\n+              templateTypes[i - 1] =\n+                  getJSType(n.getChildAt(i).getJSDocInfo().getTemplateTypeTransformations());\n+            }\n+            JSType resolvedFunctionType =\n+                resolveGenericFunction(\n+                    n, scope, functionType.getInstanceType(), functionType, templateTypes);\n+            if (resolvedFunctionType != null && resolvedFunctionType.isFunctionType()) {\n+              type = resolvedFunctionType.toMaybeFunctionType().getInstanceType();\n+            }\n+          }\n+        } else {\n+          type = functionType.getInstanceType();\n         }\n+      } else {\n+        type = constructorType.restrictByNotNullOrUndefined();\n       }\n     }\n+\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+      traverse(arg, scope);\n     }\n     return scope;\n   }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}