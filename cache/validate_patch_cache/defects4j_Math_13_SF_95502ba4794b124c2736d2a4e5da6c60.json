{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n   EigenDecomposition dec = new EigenDecomposition(m);\n   RealMatrix matV = dec.getV();\n   RealMatrix matD = dec.getD();\n   RealMatrix matDsqrt = new BlockRealMatrix(matD.getRowDimension(), matD.getColumnDimension());\n   for (int i = 0; i < matD.getRowDimension(); i++) {\n       matDsqrt.setEntry(i, i, FastMath.sqrt(matD.getEntry(i, i)));\n   }\n   return matV.multiply(matDsqrt).multiply(matV.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5f66b952b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+   EigenDecomposition dec = new EigenDecomposition(m);\n+   RealMatrix matV = dec.getV();\n+   RealMatrix matD = dec.getD();\n+   RealMatrix matDsqrt = new BlockRealMatrix(matD.getRowDimension(), matD.getColumnDimension());\n+   for (int i = 0; i < matD.getRowDimension(); i++) {\n+       matDsqrt.setEntry(i, i, FastMath.sqrt(matD.getEntry(i, i)));\n+   }\n+   return matV.multiply(matDsqrt).multiply(matV.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}