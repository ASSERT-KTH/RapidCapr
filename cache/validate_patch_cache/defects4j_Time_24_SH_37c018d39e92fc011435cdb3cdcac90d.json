{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields && e.getDateTimeFieldType() == DateTimeFieldType.year() \n                    && count == 2 && savedFields[0].iField.getType() == DateTimeFieldType.weekyear()\n                    && savedFields[1].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                // Rolling back to first of two fields\n                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n\n                SavedField temp = savedFields[0];\n                savedFields[0] = savedFields[1];\n                savedFields[1] = temp;\n\n                count = 1;\n                millis = iMillis;\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n                return millis;\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0efe46d8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,29 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields && e.getDateTimeFieldType() == DateTimeFieldType.year() \n+                    && count == 2 && savedFields[0].iField.getType() == DateTimeFieldType.weekyear()\n+                    && savedFields[1].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n+                // Rolling back to first of two fields\n+                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+\n+                SavedField temp = savedFields[0];\n+                savedFields[0] = savedFields[1];\n+                savedFields[1] = temp;\n+\n+                count = 1;\n+                millis = iMillis;\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+                return millis;\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}