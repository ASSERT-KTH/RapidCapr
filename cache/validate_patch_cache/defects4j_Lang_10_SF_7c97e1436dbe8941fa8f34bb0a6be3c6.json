{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    String regexString = \"(?<!\\\\\\\\)(\\\\s)(?!\\\\+\\\\+)\";\n    String replacement = \"\\\\\\\\s+\";\n    if (regex == null) {\n        regex = new StringBuilder();\n    }\n    String escapedValue = Pattern.compile(\"(['\\\\\\\\^$.[\\\\]|()?+*{}])\").matcher(value).replaceAll(\"\\\\\\\\$0\");\n    if (unquote) {\n        escapedValue = escapedValue.replace(\"\\\\'\", \"'\");\n    }\n    String escapedAndConvertedValue = escapedValue.replaceAll(regexString, replacement);\n    regex.append(\"(?s)\").append(escapedAndConvertedValue);\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..c252bde0 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,20 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n-        }\n-        return regex;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    String regexString = \"(?<!\\\\\\\\)(\\\\s)(?!\\\\+\\\\+)\";\n+    String replacement = \"\\\\\\\\s+\";\n+    if (regex == null) {\n+        regex = new StringBuilder();\n     }\n+    String escapedValue = Pattern.compile(\"(['\\\\\\\\^$.[\\\\]|()?+*{}])\").matcher(value).replaceAll(\"\\\\\\\\$0\");\n+    if (unquote) {\n+        escapedValue = escapedValue.replace(\"\\\\'\", \"'\");\n+    }\n+    String escapedAndConvertedValue = escapedValue.replaceAll(regexString, replacement);\n+    regex.append(\"(?s)\").append(escapedAndConvertedValue);\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}