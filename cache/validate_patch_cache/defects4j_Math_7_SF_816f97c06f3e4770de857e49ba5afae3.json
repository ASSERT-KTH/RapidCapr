{
    "patch": "public void doEvents(SpacecraftState s0, AbsoluteDate t) throws OrekitException {\n    final Interpolator interpolator = s0.getOrbit().getPVCoordinates().getInterpolator();\n    interpolator.setInterpolatedTime(t.durationFrom(s0.getDate()));\n    final double previousT = interpolator.getPreviousTime();\n    boolean isLastStep = false;\n\n    final List<EventState> eventsStates = new ArrayList<EventState>(manager.getEventsStates());\n\n    final NavigableSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n        /** Compare event states in time order. */\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // the event occurs during the current step\n            occuringEvents.add(state);\n        }\n    }\n\n    while (!occuringEvents.isEmpty()) {\n\n        // handle the chronologically first event\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // restrict the interpolator to the first part of the step, up to the event\n        final double eventT = currentEvent.getEventTime();\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // get state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to current time\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        // check if the integration should be stopped\n        if (isLastStep) {\n            return;\n        }\n\n        // check remaining events that have become possible due to event handling\n        final Iterator<EventState> evStateIter = eventsStates.iterator();\n        occuringEvents.clear();\n        while (evStateIter.hasNext()) {\n            final EventState evState = evStateIter.next();\n            if (evState.isScheduled()) {\n                // the event has been scheduled to happen\n                if (evState.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(evState);\n                }\n            } else {\n                // the event did not happen during the last step\n                evState.reinitializeBegin(s0);\n            }\n        }\n\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..063117fdd 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,78 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public void doEvents(SpacecraftState s0, AbsoluteDate t) throws OrekitException {\n+    final Interpolator interpolator = s0.getOrbit().getPVCoordinates().getInterpolator();\n+    interpolator.setInterpolatedTime(t.durationFrom(s0.getDate()));\n+    final double previousT = interpolator.getPreviousTime();\n+    boolean isLastStep = false;\n+\n+    final List<EventState> eventsStates = new ArrayList<EventState>(manager.getEventsStates());\n+\n+    final NavigableSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n+        /** Compare event states in time order. */\n+        public int compare(EventState es0, EventState es1) {\n+            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+        }\n+    });\n \n-            });\n+    for (final EventState state : eventsStates) {\n+        if (state.evaluateStep(interpolator)) {\n+            // the event occurs during the current step\n+            occuringEvents.add(state);\n+        }\n+    }\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+    while (!occuringEvents.isEmpty()) {\n+\n+        // handle the chronologically first event\n+        final Iterator<EventState> iterator = occuringEvents.iterator();\n+        final EventState currentEvent = iterator.next();\n+        iterator.remove();\n \n-            while (!occuringEvents.isEmpty()) {\n+        // restrict the interpolator to the first part of the step, up to the event\n+        final double eventT = currentEvent.getEventTime();\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(eventT);\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+        // get state at event time\n+        interpolator.setInterpolatedTime(eventT);\n+        final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+        // advance all event states to current time\n+        currentEvent.stepAccepted(eventT, eventY);\n+        isLastStep = currentEvent.stop();\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+        // handle the first part of the step, up to the event\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        // check if the integration should be stopped\n+        if (isLastStep) {\n+            return;\n+        }\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+        // check remaining events that have become possible due to event handling\n+        final Iterator<EventState> evStateIter = eventsStates.iterator();\n+        occuringEvents.clear();\n+        while (evStateIter.hasNext()) {\n+            final EventState evState = evStateIter.next();\n+            if (evState.isScheduled()) {\n+                // the event has been scheduled to happen\n+                if (evState.evaluateStep(interpolator)) {\n+                    // the event occurs during the current step\n+                    occuringEvents.add(evState);\n                 }\n+            } else {\n+                // the event did not happen during the last step\n+                evState.reinitializeBegin(s0);\n+            }\n+        }\n+\n+    }\n+\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}