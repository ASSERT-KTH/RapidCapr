{
    "patch": "attachLiteralTypes(n);\n\nif (parent == null) {\n  return;\n}\n\nswitch (parent.getType()) {\n  case Token.SCRIPT:\n  case Token.BLOCK:\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n) && !isTopLevelFunction(n)) {\n          defineDeclaredFunction(n, parent);\n        } else if (NodeUtil.isStatement(n.getParent())) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      default:\n        break;\n    }\n    break;\n  case Token.NAME:\n    if (n.getType() == Token.FUNCTION) {\n      return;\n    }\n    // fall through\n  case Token.ASSIGN:\n    if (n.getType() == Token.FUNCTION) {\n      if (NodeUtil.isExpressionResult(parent)) {\n        parent = parent.getParent();\n      }\n      defineDeclaredFunction(n, parent);\n    }\n    break;\n  case Token.TRY:\n    if (n.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n    }\n    break;\n  case Token.LP:\n    if (NodeUtil.isFunctionExpression(parent)) {\n      defineDeclaredFunction(parent, parent.getParent());\n    } else if (parent == scope.getRootNode()) {\n      handleFunctionInputs(n);\n    }\n    break;\n  default:\n    break;\n}\n\nprivate boolean isTopLevelFunction(Node node) {\n  Node parent = node.getParent();\n  while (parent != null) {\n    if (NodeUtil.isFunctionBlock(parent)) {\n      return false;\n    } else if (parent.getType() == Token.SCRIPT) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..39560689 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,74 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+attachLiteralTypes(n);\n+\n+if (parent == null) {\n+  return;\n+}\n+\n+switch (parent.getType()) {\n+  case Token.SCRIPT:\n+  case Token.BLOCK:\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (NodeUtil.isFunctionExpression(n) && !isTopLevelFunction(n)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+        } else if (NodeUtil.isStatement(n.getParent())) {\n+          defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      default:\n+        break;\n+    }\n+    break;\n+  case Token.NAME:\n+    if (n.getType() == Token.FUNCTION) {\n+      return;\n+    }\n+    // fall through\n+  case Token.ASSIGN:\n+    if (n.getType() == Token.FUNCTION) {\n+      if (NodeUtil.isExpressionResult(parent)) {\n+        parent = parent.getParent();\n       }\n+      defineDeclaredFunction(n, parent);\n+    }\n+    break;\n+  case Token.TRY:\n+    if (n.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+    }\n+    break;\n+  case Token.LP:\n+    if (NodeUtil.isFunctionExpression(parent)) {\n+      defineDeclaredFunction(parent, parent.getParent());\n+    } else if (parent == scope.getRootNode()) {\n+      handleFunctionInputs(n);\n+    }\n+    break;\n+  default:\n+    break;\n+}\n+\n+private boolean isTopLevelFunction(Node node) {\n+  Node parent = node.getParent();\n+  while (parent != null) {\n+    if (NodeUtil.isFunctionBlock(parent)) {\n+      return false;\n+    } else if (parent.getType() == Token.SCRIPT) {\n+      return true;\n+    }\n+    parent = parent.getParent();\n+  }\n+  return false;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}