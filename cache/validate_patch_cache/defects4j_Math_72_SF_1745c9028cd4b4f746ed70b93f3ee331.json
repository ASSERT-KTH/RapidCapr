{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double x = initial;\n    double y = yInitial;\n    double oldX = x;\n    double yOld = y;\n    double xMin = min;\n    double yMinOld = yMin;\n    double xMax = max;\n    double yMaxOld = yMax;\n\n    for (int i = 0; i < maximalIterationCount; ++i) {\n        double delta = yOld / y;\n\n        double xNew;\n        if (yMin * y < 0) {\n            xNew = x - delta * (x - xMin);\n        } else if (yMax * y < 0) {\n            xNew = x - delta * (x - xMax);\n        } else {\n            setResult(x, i);\n            return result;\n        }\n\n        double yNew = f.value(xNew);\n\n        double tolerance = 2 * FastMath.max(relativeAccuracy * FastMath.abs(xNew),\n                                 absoluteAccuracy);\n\n        if (Math.abs(yNew) <= functionValueAccuracy) {\n            setResult(xNew, i);\n            return result;\n        }\n\n        if (FastMath.abs(xNew - x) < tolerance && FastMath.abs(yNew) >= FastMath.abs(y)) {\n            setResult(xNew, i);\n            return result;\n        }\n\n        double xTmp = xMin;\n        double yMinTmp = yMin;\n        double xMaxTmp = xMax;\n        double yMaxTmp = yMax;\n        double xOld = oldX;\n        double yMinOldTmp = yMinOld;\n        double yMaxOldTmp = yMaxOld;\n\n        oldX = x;\n        yOld = y;\n\n        if (yNew * y < 0) {\n            xMax = xNew;\n            yMax = yNew;\n        } else {\n            xMin = xNew;\n            yMin = yNew;\n        }\n\n        if (FastMath.abs(yMin) < FastMath.abs(yMax)) {\n            x = xMin;\n            y = yMin;\n        } else {\n            x = xMax;\n            y = yMax;\n        }\n\n        if (xMin * xMax < 0) {\n            yMax = yMaxOld;\n            yMin = yMinOldTmp;\n\n            if (yMin * y < 0) {\n                xMax = x;\n                yMax = y;\n            } else if (yMax * y < 0) {\n                xMin = x;\n                yMin = y;\n            }\n        }\n\n        yMinOld = yMinTmp;\n        yMaxOld = yMaxTmp;\n    }\n\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..ea98dd8f4 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,54 +95,121 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n+\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n+\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n+\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n+\n+    double x = initial;\n+    double y = yInitial;\n+    double oldX = x;\n+    double yOld = y;\n+    double xMin = min;\n+    double yMinOld = yMin;\n+    double xMax = max;\n+    double yMaxOld = yMax;\n+\n+    for (int i = 0; i < maximalIterationCount; ++i) {\n+        double delta = yOld / y;\n+\n+        double xNew;\n+        if (yMin * y < 0) {\n+            xNew = x - delta * (x - xMin);\n+        } else if (yMax * y < 0) {\n+            xNew = x - delta * (x - xMax);\n+        } else {\n+            setResult(x, i);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n+        double yNew = f.value(xNew);\n+\n+        double tolerance = 2 * FastMath.max(relativeAccuracy * FastMath.abs(xNew),\n+                                 absoluteAccuracy);\n+\n+        if (Math.abs(yNew) <= functionValueAccuracy) {\n+            setResult(xNew, i);\n+            return result;\n         }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+        if (FastMath.abs(xNew - x) < tolerance && FastMath.abs(yNew) >= FastMath.abs(y)) {\n+            setResult(xNew, i);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        double xTmp = xMin;\n+        double yMinTmp = yMin;\n+        double xMaxTmp = xMax;\n+        double yMaxTmp = yMax;\n+        double xOld = oldX;\n+        double yMinOldTmp = yMinOld;\n+        double yMaxOldTmp = yMaxOld;\n+\n+        oldX = x;\n+        yOld = y;\n+\n+        if (yNew * y < 0) {\n+            xMax = xNew;\n+            yMax = yNew;\n+        } else {\n+            xMin = xNew;\n+            yMin = yNew;\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        if (FastMath.abs(yMin) < FastMath.abs(yMax)) {\n+            x = xMin;\n+            y = yMin;\n+        } else {\n+            x = xMax;\n+            y = yMax;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        if (xMin * xMax < 0) {\n+            yMax = yMaxOld;\n+            yMin = yMinOldTmp;\n \n+            if (yMin * y < 0) {\n+                xMax = x;\n+                yMax = y;\n+            } else if (yMax * y < 0) {\n+                xMin = x;\n+                yMin = y;\n+            }\n+        }\n+\n+        yMinOld = yMinTmp;\n+        yMaxOld = yMaxTmp;\n     }\n \n+    throw new MaxIterationsExceededException(maximalIterationCount);\n+}\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}