{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    Object first = elementPairs.get(0);\n    if (size == 1 && first instanceof PeriodFormatterBuilder) {\n        return ((PeriodFormatterBuilder) first).toFormatter().withValuesExtracted();\n    }\n    List<Object> extractedElementPairs = extractValues(elementPairs);\n    if (extractedElementPairs.size() == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    Object[] comp = createComposite(extractedElementPairs);\n    if (notPrinter) {\n        if (comp[1] == null) {\n            throw new IllegalStateException(\"Can't build a printer with no formatter\");\n        }\n        return new PeriodFormatter(null, (PeriodParser) comp[1]).withValuesExtracted();\n    } else if (notParser) {\n        if (comp[0] == null) {\n            throw new IllegalStateException(\"Can't build a parser with no formatter\");\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        if (comp[0] == null || comp[1] == null) {\n            throw new IllegalStateException(\"Can't build a formatter with no printer and no parser\");\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]).withValuesExtracted();\n    }\n}\n\nprivate static List<Object> extractValues(List<Object> elementPairs) {\n    List<Object> extractedElementPairs = new ArrayList<Object>(elementPairs);\n    for (int i = 0; i < extractedElementPairs.size(); i++) {\n        Object obj = extractedElementPairs.get(i);\n        if (obj instanceof PeriodFormatterBuilder) {\n            PeriodFormatter fmt = ((PeriodFormatterBuilder) obj).toFormatter().withValuesExtracted();\n            extractedElementPairs.set(i, fmt);\n            List<Object> subList = extractValues(fmt.getElements());\n            for (int j = 0; j < subList.size(); j++) {\n                extractedElementPairs.add(i + 1 + j, subList.get(j));\n            }\n        } else if (obj instanceof PeriodParser || obj instanceof PeriodPrinter) {\n            if (!((AbstractPeriodFormatter) obj).rejectSignedValues()) {\n                if (i > 0 && extractedElementPairs.get(i - 1) instanceof Separator) {\n                    Separator sep = (Separator) extractedElementPairs.get(--i);\n                    extractedElementPairs.remove(i + 1);\n                    PeriodFormatterBuilder pb = new PeriodFormatterBuilder();\n                    if (obj instanceof PeriodParser) {\n                        pb.append(new SimplePeriodFormatter((PeriodParser) obj, sep, false, false)).appendLiteral(\"s\");\n                    } else {\n                        pb.append(new SimplePeriodFormatter(null, sep, false, true)).append((PeriodPrinter) obj);\n                    }\n                    extractedElementPairs.set(i, pb.toFormatter().withValuesExtracted());\n                }\n            }\n        }\n    }\n    return extractedElementPairs;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..d50311b3 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,70 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    Object first = elementPairs.get(0);\n+    if (size == 1 && first instanceof PeriodFormatterBuilder) {\n+        return ((PeriodFormatterBuilder) first).toFormatter().withValuesExtracted();\n+    }\n+    List<Object> extractedElementPairs = extractValues(elementPairs);\n+    if (extractedElementPairs.size() == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    Object[] comp = createComposite(extractedElementPairs);\n+    if (notPrinter) {\n+        if (comp[1] == null) {\n+            throw new IllegalStateException(\"Can't build a printer with no formatter\");\n+        }\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]).withValuesExtracted();\n+    } else if (notParser) {\n+        if (comp[0] == null) {\n+            throw new IllegalStateException(\"Can't build a parser with no formatter\");\n+        }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        if (comp[0] == null || comp[1] == null) {\n+            throw new IllegalStateException(\"Can't build a formatter with no printer and no parser\");\n+        }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]).withValuesExtracted();\n+    }\n+}\n+\n+private static List<Object> extractValues(List<Object> elementPairs) {\n+    List<Object> extractedElementPairs = new ArrayList<Object>(elementPairs);\n+    for (int i = 0; i < extractedElementPairs.size(); i++) {\n+        Object obj = extractedElementPairs.get(i);\n+        if (obj instanceof PeriodFormatterBuilder) {\n+            PeriodFormatter fmt = ((PeriodFormatterBuilder) obj).toFormatter().withValuesExtracted();\n+            extractedElementPairs.set(i, fmt);\n+            List<Object> subList = extractValues(fmt.getElements());\n+            for (int j = 0; j < subList.size(); j++) {\n+                extractedElementPairs.add(i + 1 + j, subList.get(j));\n+            }\n+        } else if (obj instanceof PeriodParser || obj instanceof PeriodPrinter) {\n+            if (!((AbstractPeriodFormatter) obj).rejectSignedValues()) {\n+                if (i > 0 && extractedElementPairs.get(i - 1) instanceof Separator) {\n+                    Separator sep = (Separator) extractedElementPairs.get(--i);\n+                    extractedElementPairs.remove(i + 1);\n+                    PeriodFormatterBuilder pb = new PeriodFormatterBuilder();\n+                    if (obj instanceof PeriodParser) {\n+                        pb.append(new SimplePeriodFormatter((PeriodParser) obj, sep, false, false)).appendLiteral(\"s\");\n+                    } else {\n+                        pb.append(new SimplePeriodFormatter(null, sep, false, true)).append((PeriodPrinter) obj);\n+                    }\n+                    extractedElementPairs.set(i, pb.toFormatter().withValuesExtracted());\n+                }\n+            }\n         }\n     }\n+    return extractedElementPairs;\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}