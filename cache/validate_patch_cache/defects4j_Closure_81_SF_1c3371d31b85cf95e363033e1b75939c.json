{
    "patch": "public class IRFactory extends Parser {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");\n\n  private final CompilerOptions options;\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n  private final SourceReader sourceReader;\n\n  // In order of decreasing specificity.\n  private static final ImmutableMap<Integer, Token> tokenMap =\n      ImmutableMap.<Integer, Token>builder()\n          .put(Token.NAME, Token.ASSIGN)\n          .put(Token.GETPROP, Token.ASSIGN) // e.g. x.y = 2\n          .put(Token.GETELEM, Token.ASSIGN) // e.g. x[y] = 2\n          .build();\n\n  public IRFactory(\n      CompilerOptions options,\n      ErrorReporter errorReporter,\n      String sourceName,\n      SourceReader sourceReader) {\n    super(options, errorReporter);\n    this.options = options;\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n    this.sourceReader = sourceReader;\n  }\n\n  /**\n   * Creates a new node, preserving the relevant line number and char number\n   * information.\n   */\n  Node newNode(int type, int lineno) {\n    Node node = new Node(type);\n    node.setLineno(lineno);\n    return node;\n  }\n\n  Node newNode(int type, AstNode astNode) {\n    Node node = newNode(type, astNode.getLineno());\n    node.addChildToBack(astNode);\n    return node;\n  }\n\n  Node newNode(int type, AstNode left, AstNode right) {\n    Node node = newNode(type, left.getLineno());\n    node.addChildToBack(left);\n    node.addChildToBack(right);\n    return node;\n  }\n\n  Node newNode(int type, AstNode left, AstNode mid, AstNode right) {\n    Node node = newNode(type, left.getLineno());\n    node.addChildToBack(left);\n    node.addChildToBack(mid);\n    node.addChildToBack(right);\n    return node;\n  }\n\n  Node newNode(int type, String value) {\n    Node node = newNode(type);\n    node.setString(value);\n    return node;\n  }\n\n  private static final ImmutableSet<String> SIMPLE_OPS =\n      ImmutableSet.of(\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"!=\", \">\", \">=\", \"<\", \"<=\");\n\n  static {\n    checkState(SIMPLE_OPS.size() == Token.LAST_OPERATOR - Token.FIRST_OPERATOR);\n  }\n\n  Node newNode(Token token, AstNode left, AstNode right) {\n    int type = token.type;\n    if (SIMPLE_OPS.contains(token.getName())) {\n      type = Token.BITAND;\n    }\n    switch (token.getType()) {\n      case Token.ASSIGN:\n        if (left.getType() == Token.GETELEM) {\n          type = Token.SETELEM;\n        } else if (left.getType(",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..efe72240 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,89 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory extends Parser {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\"use strict\");\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  private final CompilerOptions options;\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+  private final SourceReader sourceReader;\n+\n+  // In order of decreasing specificity.\n+  private static final ImmutableMap<Integer, Token> tokenMap =\n+      ImmutableMap.<Integer, Token>builder()\n+          .put(Token.NAME, Token.ASSIGN)\n+          .put(Token.GETPROP, Token.ASSIGN) // e.g. x.y = 2\n+          .put(Token.GETELEM, Token.ASSIGN) // e.g. x[y] = 2\n+          .build();\n+\n+  public IRFactory(\n+      CompilerOptions options,\n+      ErrorReporter errorReporter,\n+      String sourceName,\n+      SourceReader sourceReader) {\n+    super(options, errorReporter);\n+    this.options = options;\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+    this.sourceReader = sourceReader;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  /**\n+   * Creates a new node, preserving the relevant line number and char number\n+   * information.\n+   */\n+  Node newNode(int type, int lineno) {\n+    Node node = new Node(type);\n+    node.setLineno(lineno);\n+    return node;\n+  }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n+  Node newNode(int type, AstNode astNode) {\n+    Node node = newNode(type, astNode.getLineno());\n+    node.addChildToBack(astNode);\n+    return node;\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+  Node newNode(int type, AstNode left, AstNode right) {\n+    Node node = newNode(type, left.getLineno());\n+    node.addChildToBack(left);\n+    node.addChildToBack(right);\n+    return node;\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n+  Node newNode(int type, AstNode left, AstNode mid, AstNode right) {\n+    Node node = newNode(type, left.getLineno());\n+    node.addChildToBack(left);\n+    node.addChildToBack(mid);\n+    node.addChildToBack(right);\n+    return node;\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  Node newNode(int type, String value) {\n+    Node node = newNode(type);\n+    node.setString(value);\n+    return node;\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  private static final ImmutableSet<String> SIMPLE_OPS =\n+      ImmutableSet.of(\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"!=\", \">\", \">=\", \"<\", \"<=\");\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  static {\n+    checkState(SIMPLE_OPS.size() == Token.LAST_OPERATOR - Token.FIRST_OPERATOR);\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  Node newNode(Token token, AstNode left, AstNode right) {\n+    int type = token.type;\n+    if (SIMPLE_OPS.contains(token.getName())) {\n+      type = Token.BITAND;\n     }\n+    switch (token.getType()) {\n+      case Token.ASSIGN:\n+        if (left.getType() == Token.GETELEM) {\n+          type = Token.SETELEM;\n+        } else if (left.getType(\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}