{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null || !n.isName() || !v.isDeclared()) {\n      continue;\n    }\n\n    Node parent = n.getParent();\n    if (parent == null || !parent.isVar()) {\n      // Non-alias vars must be in a function. Those found here are local.\n      if (parent == null || !parent.getParent().isFunction()) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n      continue;\n    }\n\n    Node initializer = n.getNext();\n    if (initializer != null && initializer.isQualifiedName()) {\n      String name = n.getString();\n      String qualifiedName = initializer.getQualifiedName();\n\n      // Skip over aliases that start with `goog.`.\n      if (qualifiedName != null && qualifiedName.startsWith(\"goog.\")) {\n        continue;\n      }\n\n      // Add the variable to our alias map.\n      aliases.put(name, v);\n\n      // Add the alias to our transformation list.\n      transformation.addAlias(name, qualifiedName);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..0ac87ce3 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,40 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null || !n.isName() || !v.isDeclared()) {\n+      continue;\n+    }\n+\n+    Node parent = n.getParent();\n+    if (parent == null || !parent.isVar()) {\n+      // Non-alias vars must be in a function. Those found here are local.\n+      if (parent == null || !parent.getParent().isFunction()) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      }\n+      continue;\n+    }\n+\n+    Node initializer = n.getNext();\n+    if (initializer != null && initializer.isQualifiedName()) {\n+      String name = n.getString();\n+      String qualifiedName = initializer.getQualifiedName();\n+\n+      // Skip over aliases that start with `goog.`.\n+      if (qualifiedName != null && qualifiedName.startsWith(\"goog.\")) {\n+        continue;\n       }\n+\n+      // Add the variable to our alias map.\n+      aliases.put(name, v);\n+\n+      // Add the alias to our transformation list.\n+      transformation.addAlias(name, qualifiedName);\n     }\n+  }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}