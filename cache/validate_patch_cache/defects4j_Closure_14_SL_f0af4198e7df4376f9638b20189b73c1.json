{
    "patch": "   Node nextFollowNode = fromNode.getNext();\n   if (nextFollowNode == null && fromNode.getParent() != null && fromNode.getParent().getNext() != null) {\n     nextFollowNode = fromNode.getParent().getNext().getFirstChild();\n   }\n\n   if (finallyNode != null) {\n     if (finallyNode.isBlock() && finallyNode.hasChildren()) {\n       Node lastChild = finallyNode.getLastChild();\n       cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, lastChild, cfa));\n       cfa.createEdge(lastChild, Branch.UNCOND, nextFollowNode);\n     } else if (finallyNode != node.getNext() || nextFollowNode != null) {\n       cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, nextFollowNode, cfa));\n     }\n   } else {\n     cfa.createEdge(fromNode, Branch.UNCOND, nextFollowNode);\n   }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..bc2c9b05 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+   Node nextFollowNode = fromNode.getNext();\n+   if (nextFollowNode == null && fromNode.getParent() != null && fromNode.getParent().getNext() != null) {\n+     nextFollowNode = fromNode.getParent().getNext().getFirstChild();\n+   }\n+\n+   if (finallyNode != null) {\n+     if (finallyNode.isBlock() && finallyNode.hasChildren()) {\n+       Node lastChild = finallyNode.getLastChild();\n+       cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, lastChild, cfa));\n+       cfa.createEdge(lastChild, Branch.UNCOND, nextFollowNode);\n+     } else if (finallyNode != node.getNext() || nextFollowNode != null) {\n+       cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, nextFollowNode, cfa));\n+     }\n+   } else {\n+     cfa.createEdge(fromNode, Branch.UNCOND, nextFollowNode);\n+   }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>",
    "test_result": "FAIL"
}