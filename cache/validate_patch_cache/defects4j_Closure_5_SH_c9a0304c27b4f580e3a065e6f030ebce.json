{
    "patch": "    boolean isReferencedDirectlyOrIndirectly = false;\n    for (Reference ref : refs) {\n      Node refNode = ref.getNode();\n      if (refNode != name && NodeUtil.isAncestor(name, refNode)) {\n        isReferencedDirectlyOrIndirectly = true;\n        break;\n      }\n    }\n    return !isReferencedDirectlyOrIndirectly;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..26cecc01 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,15 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+    boolean isReferencedDirectlyOrIndirectly = false;\n+    for (Reference ref : refs) {\n+      Node refNode = ref.getNode();\n+      if (refNode != name && NodeUtil.isAncestor(name, refNode)) {\n+        isReferencedDirectlyOrIndirectly = true;\n+        break;\n+      }\n+    }\n+    return !isReferencedDirectlyOrIndirectly;\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: variable ref is already defined in method isInlinableObject(List<Reference>)",
    "test_result": "ERROR"
}