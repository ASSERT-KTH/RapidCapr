{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    \n    double ret = Double.NaN;\n    if (x < a+1) {\n        // Use the series representation\n        ret = regularizedGammaPSeries(a, x, epsilon, maxIterations);\n    } else { // x >= a+1\n        // Use the continued fraction representation\n        ret = regularizedGammaPContinuedFraction(a, x, epsilon, maxIterations);\n    }\n    if (Double.isNaN(ret)) {\n        throw new ArithmeticException(\"Failed convergence while evaluating regularizedGammaP(\" + a + \",\" + x + \")\");\n    }\n    return ret;\n}\n\nprivate static double regularizedGammaPSeries(double a, double x, double epsilon, int maxIterations) {\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    while (Math.abs(an/sum) > epsilon &&\n           n < maxIterations &&\n           sum < Double.POSITIVE_INFINITY) {\n        // compute next term in series\n        n += 1.0;\n        an *= x/(a+n);\n        // add term to sum\n        sum += an;\n    }\n    if (n >= maxIterations) {\n        throw new ArithmeticException(\"Max iterations (\" + maxIterations + \") exceeded\");\n    }\n    return Math.exp(-x+a*Math.log(x)-logGamma(a))*sum;\n}\n\nprivate static double regularizedGammaPContinuedFraction(double a, double x, double epsilon, int maxIterations) {\n    double fpmin = 1e-30;\n    double an = 1.0 / x;\n    double b = 1.0 + a - x;\n    double c = 1.0 / fpmin;\n    double d = 1.0 / b;\n    double h = d;\n    double n = 1.0;\n    while (n < maxIterations) {\n        double a1 = n * (a-n);\n        double a2 = (n+1.0)*(b+n);\n        d = a2*d + a1*an;\n        if (Math.abs(d) < fpmin) {\n            d = fpmin;\n        }\n        c = a2 + a1/c;\n        if (Math.abs(c) < fpmin) {\n            c = fpmin;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del-1.0) < epsilon) {\n            break;\n        }\n        n += 1.0;\n    }\n    if (n >= maxIterations) {\n        throw new ArithmeticException(\"Max iterations (\" + maxIterations + \") exceeded\");\n    }\n    return 1.0 - Math.exp(-x+a*Math.log(x)-logGamma(a))*h;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173/(x+0) - 86.50532033/(x+1) + 24.01409822/(x+2) - 1.231739516/(x+3) + 0.00120858003/(x+4) - 0.00000536382/(x+5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..539a8962d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,91 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    }\n+    if (x == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    }\n+    \n+    double ret = Double.NaN;\n+    if (x < a+1) {\n+        // Use the series representation\n+        ret = regularizedGammaPSeries(a, x, epsilon, maxIterations);\n+    } else { // x >= a+1\n+        // Use the continued fraction representation\n+        ret = regularizedGammaPContinuedFraction(a, x, epsilon, maxIterations);\n+    }\n+    if (Double.isNaN(ret)) {\n+        throw new ArithmeticException(\"Failed convergence while evaluating regularizedGammaP(\" + a + \",\" + x + \")\");\n+    }\n+    return ret;\n+}\n+\n+private static double regularizedGammaPSeries(double a, double x, double epsilon, int maxIterations) {\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    while (Math.abs(an/sum) > epsilon &&\n+           n < maxIterations &&\n+           sum < Double.POSITIVE_INFINITY) {\n+        // compute next term in series\n+        n += 1.0;\n+        an *= x/(a+n);\n+        // add term to sum\n+        sum += an;\n+    }\n+    if (n >= maxIterations) {\n+        throw new ArithmeticException(\"Max iterations (\" + maxIterations + \") exceeded\");\n+    }\n+    return Math.exp(-x+a*Math.log(x)-logGamma(a))*sum;\n+}\n+\n+private static double regularizedGammaPContinuedFraction(double a, double x, double epsilon, int maxIterations) {\n+    double fpmin = 1e-30;\n+    double an = 1.0 / x;\n+    double b = 1.0 + a - x;\n+    double c = 1.0 / fpmin;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double n = 1.0;\n+    while (n < maxIterations) {\n+        double a1 = n * (a-n);\n+        double a2 = (n+1.0)*(b+n);\n+        d = a2*d + a1*an;\n+        if (Math.abs(d) < fpmin) {\n+            d = fpmin;\n+        }\n+        c = a2 + a1/c;\n+        if (Math.abs(c) < fpmin) {\n+            c = fpmin;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del-1.0) < epsilon) {\n+            break;\n+        }\n+        n += 1.0;\n+    }\n+    if (n >= maxIterations) {\n+        throw new ArithmeticException(\"Max iterations (\" + maxIterations + \") exceeded\");\n+    }\n+    return 1.0 - Math.exp(-x+a*Math.log(x)-logGamma(a))*h;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173/(x+0) - 86.50532033/(x+1) + 24.01409822/(x+2) - 1.231739516/(x+3) + 0.00120858003/(x+4) - 0.00000536382/(x+5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}