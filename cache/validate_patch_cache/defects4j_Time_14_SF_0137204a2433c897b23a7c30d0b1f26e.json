{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = values.clone();\n    long instant = 0L;\n    boolean addedMonth = false;\n    boolean addedYear = false;\n\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType type = partial.getFieldType(i);\n        int value = values[i];\n\n        if (type == DateTimeFieldType.year()) {\n            instant = iChronology.year().set(instant, value);\n            instant = iChronology.monthOfYear().set(instant, 1);\n            instant = iChronology.dayOfMonth().set(instant, 1);\n            newValues[i] = value;\n        } else if (type == DateTimeFieldType.monthOfYear()) {\n            int totalMonths = iChronology.year().get(instant) * 12 + value - 1;\n            totalMonths += valueToAdd;\n            int year = totalMonths / 12;\n            int month = totalMonths % 12 + 1;\n            if (year != iChronology.year().get(instant)) {\n                addedYear = true;\n            }\n            instant = iChronology.year().set(instant, year);\n            instant = iChronology.monthOfYear().set(instant, month);\n            addedMonth = true;\n            newValues[i] = month;\n        } else if (type == DateTimeFieldType.dayOfMonth()) {\n            int maxDayOfMonth = iChronology.monthOfYear().getMaximumValue(instant);\n            int newDayOfMonth = value + valueToAdd;\n            if (newDayOfMonth < 1) {\n                while (newDayOfMonth < 1) {\n                    instant = iChronology.monthOfYear().add(instant, -1);\n                    int maxDayOfPreviousMonth = iChronology.monthOfYear().getMaximumValue(instant);\n                    newDayOfMonth += maxDayOfPreviousMonth;\n                }\n                addedMonth = true;\n            }\n            while (newDayOfMonth > maxDayOfMonth) {\n                newDayOfMonth -= maxDayOfMonth;\n                instant = iChronology.monthOfYear().add(instant, 1);\n                maxDayOfMonth = iChronology.monthOfYear().getMaximumValue(instant);\n                addedMonth = true;\n            }\n            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n            newValues[i] = newDayOfMonth;\n        } else {\n            instant = type.getField(iChronology).set(instant, value);\n        }\n    }\n\n    if (addedYear && !addedMonth) {\n        // handle case where adding months caused year to roll over\n        int[] newPartialValues = new int[partial.size()];\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeFieldType type = partial.getFieldType(i);\n            if (type == DateTimeFieldType.year()) {\n                newPartialValues[i] = iChronology.year().get(instant);\n            } else if (type == DateTimeFieldType.monthOfYear()) {\n                newPartialValues[i] = iChronology.monthOfYear().get(instant);\n            } else {\n                newPartialValues[i] = partial.getValue(i);\n            }\n        }\n        return newPartialValues;\n    }\n\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d6c41272 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,80 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = values.clone();\n+    long instant = 0L;\n+    boolean addedMonth = false;\n+    boolean addedYear = false;\n+\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType type = partial.getFieldType(i);\n+        int value = values[i];\n+\n+        if (type == DateTimeFieldType.year()) {\n+            instant = iChronology.year().set(instant, value);\n+            instant = iChronology.monthOfYear().set(instant, 1);\n+            instant = iChronology.dayOfMonth().set(instant, 1);\n+            newValues[i] = value;\n+        } else if (type == DateTimeFieldType.monthOfYear()) {\n+            int totalMonths = iChronology.year().get(instant) * 12 + value - 1;\n+            totalMonths += valueToAdd;\n+            int year = totalMonths / 12;\n+            int month = totalMonths % 12 + 1;\n+            if (year != iChronology.year().get(instant)) {\n+                addedYear = true;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            instant = iChronology.year().set(instant, year);\n+            instant = iChronology.monthOfYear().set(instant, month);\n+            addedMonth = true;\n+            newValues[i] = month;\n+        } else if (type == DateTimeFieldType.dayOfMonth()) {\n+            int maxDayOfMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+            int newDayOfMonth = value + valueToAdd;\n+            if (newDayOfMonth < 1) {\n+                while (newDayOfMonth < 1) {\n+                    instant = iChronology.monthOfYear().add(instant, -1);\n+                    int maxDayOfPreviousMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+                    newDayOfMonth += maxDayOfPreviousMonth;\n+                }\n+                addedMonth = true;\n+            }\n+            while (newDayOfMonth > maxDayOfMonth) {\n+                newDayOfMonth -= maxDayOfMonth;\n+                instant = iChronology.monthOfYear().add(instant, 1);\n+                maxDayOfMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+                addedMonth = true;\n+            }\n+            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+            newValues[i] = newDayOfMonth;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = type.getField(iChronology).set(instant, value);\n         }\n     }\n \n+    if (addedYear && !addedMonth) {\n+        // handle case where adding months caused year to roll over\n+        int[] newPartialValues = new int[partial.size()];\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeFieldType type = partial.getFieldType(i);\n+            if (type == DateTimeFieldType.year()) {\n+                newPartialValues[i] = iChronology.year().get(instant);\n+            } else if (type == DateTimeFieldType.monthOfYear()) {\n+                newPartialValues[i] = iChronology.monthOfYear().get(instant);\n+            } else {\n+                newPartialValues[i] = partial.getValue(i);\n+            }\n+        }\n+        return newPartialValues;\n+    }\n+\n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "junit.framework.AssertionFailedError: expected:<--01-29> but was:<--03-04>",
    "test_result": "FAIL"
}