{
    "patch": "      int numAssignments = 0;\n      Reference oneAndOnly = null;\n      for (int i = 0, max = references.size(); i < max; i++) {\n        Reference ref = references.get(i);\n        if (ref.isAssignmentToName()) {\n          numAssignments++;\n          if (numAssignments > 1) {\n            return null; // assigned more than once\n          }\n          oneAndOnly = ref;\n        }\n      }\n\n      return oneAndOnly;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..14b1a17f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int numAssignments = 0;\n+      Reference oneAndOnly = null;\n+      for (int i = 0, max = references.size(); i < max; i++) {\n+        Reference ref = references.get(i);\n+        if (ref.isAssignmentToName()) {\n+          numAssignments++;\n+          if (numAssignments > 1) {\n+            return null; // assigned more than once\n+          }\n+          oneAndOnly = ref;\n+        }\n+      }\n+\n+      return oneAndOnly;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}