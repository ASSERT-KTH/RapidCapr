{
    "patch": "// Functions with explicit 'this' types must be called in a GETPROP\n// or GETELEM.\nif (n.getParent() != null && n.getParent().isGetProp()) {\n  JSType typeOfThis = functionType.getTypeOfThis();\n  if (typeOfThis != null && !typeOfThis.isUnknownType()) {\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n    return;\n  }\n}\nif (n.getParent() != null && n.getParent().isFunction()) {\n  JSType typeOfThis = functionType.getTypeOfThis();\n  Node grandParent = n.getParent().getParent();\n  if (typeOfThis != null && !typeOfThis.isUnknownType() &&\n      grandParent != null && grandParent.isGetProp()) {\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n    return;\n  }\n}\nif (functionType.getTypeOfThis() != null) {\n  report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n} else {\n  visitParameterList(t, n, functionType);\n  ensureTyped(t, n, functionType.getReturnType());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..10718c1f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+// Functions with explicit 'this' types must be called in a GETPROP\n+// or GETELEM.\n+if (n.getParent() != null && n.getParent().isGetProp()) {\n+  JSType typeOfThis = functionType.getTypeOfThis();\n+  if (typeOfThis != null && !typeOfThis.isUnknownType()) {\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+    return;\n+  }\n+}\n+if (n.getParent() != null && n.getParent().isFunction()) {\n+  JSType typeOfThis = functionType.getTypeOfThis();\n+  Node grandParent = n.getParent().getParent();\n+  if (typeOfThis != null && !typeOfThis.isUnknownType() &&\n+      grandParent != null && grandParent.isGetProp()) {\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+    return;\n+  }\n+}\n+if (functionType.getTypeOfThis() != null) {\n+  report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n+} else {\n+  visitParameterList(t, n, functionType);\n+  ensureTyped(t, n, functionType.getReturnType());\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}