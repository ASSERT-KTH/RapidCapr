{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    DecompositionSolver solver = new LUDecomposition(m).getSolver();\n    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        RealVector e = new ArrayRealVector(n);\n        e.setEntry(i, 1d);\n        RealVector sqrt_e = solver.solve(e);\n        for (int j = i; j < n; j++) {\n            RealVector f = new ArrayRealVector(n);\n            f.setEntry(j, 1d);\n            RealVector sqrt_f = solver.solve(f);\n            double dot_product = sqrt_e.dotProduct(sqrt_f);\n            sqrt.setEntry(i, j, dot_product);\n            sqrt.setEntry(j, i, dot_product);\n        }\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b59221945 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    DecompositionSolver solver = new LUDecomposition(m).getSolver();\n+    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        RealVector e = new ArrayRealVector(n);\n+        e.setEntry(i, 1d);\n+        RealVector sqrt_e = solver.solve(e);\n+        for (int j = i; j < n; j++) {\n+            RealVector f = new ArrayRealVector(n);\n+            f.setEntry(j, 1d);\n+            RealVector sqrt_f = solver.solve(f);\n+            double dot_product = sqrt_e.dotProduct(sqrt_f);\n+            sqrt.setEntry(i, j, dot_product);\n+            sqrt.setEntry(j, i, dot_product);\n+        }\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}