{
    "patch": "// Convert each substring of escaped octal characters\n// by converting the octal value to the corresponding\n// byte value.\nwhile (idx < i) {\n    int cidx = idx;\n    int c = 0;\n    while (cidx < i && cidx < idx + 3 && Character.isDigit(val.charAt(cidx))) {\n        c = c * 8 + (int) (val.charAt(cidx) - '0');\n        cidx++;\n    }\n    if (c > 255) {\n        success = false;\n        break;\n    }\n    //Fixed hunk starts here\n    sb.append((char) c); // Change here\n    //End of fixed hunk\n    idx = cidx;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}