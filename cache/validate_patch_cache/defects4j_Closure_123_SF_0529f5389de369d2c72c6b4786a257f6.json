{
    "patch": "public String fixCode(String code) {\n    String regex = \"for *\\\\(([^;]+);([^;]+);([^\\\\(]*\\\\([^\\\\)]+\\\\)[^\\\\)]*)\\\\)\";\n    Matcher matcher = Pattern.compile(regex).matcher(code);\n    StringBuffer sb = new StringBuffer();\n    while (matcher.find()) {\n        String init = matcher.group(1).trim();\n        String cond = matcher.group(2).trim();\n        String body = matcher.group(3).trim();\n        if (init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\[.*?\\\\]\") && cond.matches(\"\\\\w+\\\\s*(<|<=)\\\\s*\\\\w+\\\\.length\") && body.matches(\"\\\\w+\\\\+\\\\+\")) {\n            matcher.appendReplacement(sb, \"for (int i=0;i<\" + init + \".length;i++)\" + body.replaceFirst(\"\\\\+\", \"\\\\.\"));\n        } else if (init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\{.*?\\\\}\") && cond.matches(\"\\\\w+\\\\s*(<|<=)\\\\s*\\\\w+\\\\.length\") && body.matches(\"\\\\w+\\\\+\\\\+\")) {\n            matcher.appendReplacement(sb, \"for (int i=0;i<\" + init + \".length;i++)\" + body.replaceFirst(\"\\\\+\", \"\\\\.\"));\n        } else if (cond.matches(\"\\\\w+\\\\.length\\\\s*(>|>=)\\\\s*\\\\w+\") && init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\[.*?\\\\]|\\\\w+\\\\s*=\\\\s*\\\\{.*?\\\\}\") && body.matches(\"\\\\w+--\")) {\n            matcher.appendReplacement(sb, \"for (int i=\" + init + \".length-1;i>=0;i--)\" + body.replaceFirst(\"--\", \"\\\\.\"));\n        } else if (cond.matches(\"\\\\w+\\\\.length\\\\s*(>|>=)\\\\s*\\\\w+\") && init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\[.*?\\\\]|\\\\w+\\\\s*=\\\\s*\\\\{.*?\\\\}\") && body.matches(\"--\\\\w+\")) {\n            matcher.appendReplacement(sb, \"for (int i=\" + init + \".length-1;i>=0;i--)\" + body.replaceFirst(\"--\", \"\\\\.\"));\n        } else {\n            matcher.appendReplacement(sb, matcher.group());\n        }\n    }\n    matcher.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..0e486085 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,29 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String regex = \"for *\\\\(([^;]+);([^;]+);([^\\\\(]*\\\\([^\\\\)]+\\\\)[^\\\\)]*)\\\\)\";\n+    Matcher matcher = Pattern.compile(regex).matcher(code);\n+    StringBuffer sb = new StringBuffer();\n+    while (matcher.find()) {\n+        String init = matcher.group(1).trim();\n+        String cond = matcher.group(2).trim();\n+        String body = matcher.group(3).trim();\n+        if (init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\[.*?\\\\]\") && cond.matches(\"\\\\w+\\\\s*(<|<=)\\\\s*\\\\w+\\\\.length\") && body.matches(\"\\\\w+\\\\+\\\\+\")) {\n+            matcher.appendReplacement(sb, \"for (int i=0;i<\" + init + \".length;i++)\" + body.replaceFirst(\"\\\\+\", \"\\\\.\"));\n+        } else if (init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\{.*?\\\\}\") && cond.matches(\"\\\\w+\\\\s*(<|<=)\\\\s*\\\\w+\\\\.length\") && body.matches(\"\\\\w+\\\\+\\\\+\")) {\n+            matcher.appendReplacement(sb, \"for (int i=0;i<\" + init + \".length;i++)\" + body.replaceFirst(\"\\\\+\", \"\\\\.\"));\n+        } else if (cond.matches(\"\\\\w+\\\\.length\\\\s*(>|>=)\\\\s*\\\\w+\") && init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\[.*?\\\\]|\\\\w+\\\\s*=\\\\s*\\\\{.*?\\\\}\") && body.matches(\"\\\\w+--\")) {\n+            matcher.appendReplacement(sb, \"for (int i=\" + init + \".length-1;i>=0;i--)\" + body.replaceFirst(\"--\", \"\\\\.\"));\n+        } else if (cond.matches(\"\\\\w+\\\\.length\\\\s*(>|>=)\\\\s*\\\\w+\") && init.matches(\"\\\\w+\\\\s*=\\\\s*\\\\[.*?\\\\]|\\\\w+\\\\s*=\\\\s*\\\\{.*?\\\\}\") && body.matches(\"--\\\\w+\")) {\n+            matcher.appendReplacement(sb, \"for (int i=\" + init + \".length-1;i>=0;i--)\" + body.replaceFirst(\"--\", \"\\\\.\"));\n+        } else {\n+            matcher.appendReplacement(sb, matcher.group());\n+        }\n+    }\n+    matcher.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}