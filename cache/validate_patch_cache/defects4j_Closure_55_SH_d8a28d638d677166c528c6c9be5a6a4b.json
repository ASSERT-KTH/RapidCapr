{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (n == null || !n.isFunction()) {\n    return false;\n  }\n\n  if (NodeUtil.getEnclosingType(n) != null && !NodeUtil.getEnclosingType(n).isTopLevel()) {\n    return false;\n  }\n\n  if (n.isArrowFunction()) {\n    return true;\n  }\n\n  if (n.isFunction() && n.getLastChild() != null && n.getLastChild().isBlock() && n.getSecondChild().isParamList()) {\n    Node body = n.getLastChild();\n    List<Node> stmts = body.removeChildren();\n    if (stmts.isEmpty()) {\n      return true;\n    }\n    if (stmts.size() > 1) {\n      return false;\n    }\n    Node onlyStmt = stmts.get(0);\n    if (!onlyStmt.isReturn()) {\n      return false;\n    }\n    Node retVal = onlyStmt.getFirstChild();\n    if (retVal == null || retVal.isEmpty()) {\n      return false;\n    }\n    return NodeUtil.mayHaveSideEffects(retVal, false, true, ScopeCreator.UNDEFINED);\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..d8a740aa 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,41 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (n == null || !n.isFunction()) {\n+    return false;\n+  }\n+\n+  if (NodeUtil.getEnclosingType(n) != null && !NodeUtil.getEnclosingType(n).isTopLevel()) {\n+    return false;\n+  }\n+\n+  if (n.isArrowFunction()) {\n+    return true;\n+  }\n+\n+  if (n.isFunction() && n.getLastChild() != null && n.getLastChild().isBlock() && n.getSecondChild().isParamList()) {\n+    Node body = n.getLastChild();\n+    List<Node> stmts = body.removeChildren();\n+    if (stmts.isEmpty()) {\n+      return true;\n+    }\n+    if (stmts.size() > 1) {\n+      return false;\n+    }\n+    Node onlyStmt = stmts.get(0);\n+    if (!onlyStmt.isReturn()) {\n+      return false;\n+    }\n+    Node retVal = onlyStmt.getFirstChild();\n+    if (retVal == null || retVal.isEmpty()) {\n+      return false;\n+    }\n+    return NodeUtil.mayHaveSideEffects(retVal, false, true, ScopeCreator.UNDEFINED);\n+  }\n+\n+  return false;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}