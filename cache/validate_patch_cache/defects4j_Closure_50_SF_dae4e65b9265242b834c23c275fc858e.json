{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n        if (!NodeUtil.isImmutableValue(right)) {\n            return n;\n        }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    Node strLitNode = arrayNode.getFirstChild();\n    while (strLitNode != null) {\n        if (!NodeUtil.isImmutableValue(strLitNode)) {\n            break;\n        }\n        if (strLitNode.getType() != Token.STRING) {\n            break;\n        }\n        strLitNode = strLitNode.getNext();\n    }\n\n    String joinString = \",\";\n    if (right != null) {\n        joinString = NodeUtil.getStringValue(right);\n        if (joinString == null) {\n            return n;\n        }\n    }\n    if (strLitNode != null) {\n        joinString = strLitNode.getString();\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n            if (sb == null) {\n                sb = new StringBuilder();\n            } else {\n                sb.append(joinString);\n                foldedSize += joinString.length();\n            }\n            String value = NodeUtil.getArrayElementStringValue(elem);\n            foldedSize += value.length() + 2;\n            sb.append(value);\n        } else {\n            if (sb != null) {\n                Preconditions.checkNotNull(prev);\n                arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n                foldedSize += sb.length() + 2;\n                sb = null;\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        prev = elem;\n        elem = elem.getNext();\n    }\n\n    if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString())\n                .copyInformationFrom(prev));\n    }\n\n    foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            n.replaceWith(emptyStringNode);\n            reportCodeChange();\n            return emptyStringNode;\n\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.remove(0);\n            if (foldedSize > originalSize) {\n                return n;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != Token.STRING) {\n                Node replacement = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n                foldedStringNode = replacement;\n            }\n            n.replaceWith(foldedStringNode);\n            reportCodeChange();\n            return foldedStringNode;\n\n        default:\n            int arrayFoldedChildrenCount = arrayFoldedChildren.size();\n            int joinSize = joinString.length();\n            if (joinSize == 1 && arrayFoldedChildrenCount == 2) {\n                Node firstNode = arrayFoldedChildren.get(0);\n                Node secondNode = arrayFoldedChildren.get(1);\n                n.replaceWith(new Node(Token.ADD, firstNode, secondNode).srcref(n));\n                reportCodeChange();\n                return firstNode;\n            }\n            foldedSize += String.format(\"([%d])\", arrayFoldedChildrenCount).length() + joinSize * arrayFoldedChildrenCount;\n            foldedSize += right != null ? InlineCostEstimator.getCost(right) : 0;\n            if (foldedSize <= originalSize && arrayFoldedChildrenCount > 0) {\n                arrayNode.detachChildren();\n                Node joinNode = new Node(Token.ADD);\n                joinNode.addChildToFront(Node.newString(\"[\").srcref(n));\n                for (Node arrayFoldedChild : arrayFoldedChildren) {\n                    joinNode.addChildToBack(arrayFoldedChild);\n                    if (joinNode.getLastChild().getType() != Token.EMPTY) {\n                        joinNode.addChildToBack(Node.newString(joinString).srcref(n));\n                    }\n                }\n                joinNode.addChildToBack(Node.newString(\"]\").srcref(n));\n\n                if (right != null) {\n                    Node addNode = new Node(Token.ADD);\n                    addNode.addChildToFront(joinNode);\n                    addNode.addChildToBack(right.cloneTree());\n                    joinNode = addNode;\n                }\n\n                n.replaceWith(joinNode.srcref(n));\n                reportCodeChange();\n                return joinNode;\n            }\n            return n;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..29d84e63 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,148 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n+        return n;\n     }\n \n     Node right = callTarget.getNext();\n     if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+        if (!NodeUtil.isImmutableValue(right)) {\n+            return n;\n+        }\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+        return n;\n+    }\n+\n+    Node strLitNode = arrayNode.getFirstChild();\n+    while (strLitNode != null) {\n+        if (!NodeUtil.isImmutableValue(strLitNode)) {\n+            break;\n+        }\n+        if (strLitNode.getType() != Token.STRING) {\n+            break;\n+        }\n+        strLitNode = strLitNode.getNext();\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+        joinString = NodeUtil.getStringValue(right);\n+        if (joinString == null) {\n+            return n;\n+        }\n+    }\n+    if (strLitNode != null) {\n+        joinString = strLitNode.getString();\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = null;\n     int foldedSize = 0;\n     Node prev = null;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+        if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+            if (sb == null) {\n+                sb = new StringBuilder();\n+            } else {\n+                sb.append(joinString);\n+                foldedSize += joinString.length();\n+            }\n+            String value = NodeUtil.getArrayElementStringValue(elem);\n+            foldedSize += value.length() + 2;\n+            sb.append(value);\n         } else {\n-          sb.append(joinString);\n+            if (sb != null) {\n+                Preconditions.checkNotNull(prev);\n+                arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n+                foldedSize += sb.length() + 2;\n+                sb = null;\n+            }\n+            foldedSize += InlineCostEstimator.getCost(elem);\n+            arrayFoldedChildren.add(elem);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n+        prev = elem;\n+        elem = elem.getNext();\n     }\n \n     if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+        Preconditions.checkNotNull(prev);\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString())\n+                .copyInformationFrom(prev));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+\n+    foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+        case 0:\n+            Node emptyStringNode = Node.newString(\"\");\n+            n.replaceWith(emptyStringNode);\n+            reportCodeChange();\n+            return emptyStringNode;\n+\n+        case 1:\n+            Node foldedStringNode = arrayFoldedChildren.remove(0);\n+            if (foldedSize > originalSize) {\n+                return n;\n+            }\n+            arrayNode.detachChildren();\n+            if (foldedStringNode.getType() != Token.STRING) {\n+                Node replacement = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n+                foldedStringNode = replacement;\n+            }\n+            n.replaceWith(foldedStringNode);\n+            reportCodeChange();\n+            return foldedStringNode;\n+\n+        default:\n+            int arrayFoldedChildrenCount = arrayFoldedChildren.size();\n+            int joinSize = joinString.length();\n+            if (joinSize == 1 && arrayFoldedChildrenCount == 2) {\n+                Node firstNode = arrayFoldedChildren.get(0);\n+                Node secondNode = arrayFoldedChildren.get(1);\n+                n.replaceWith(new Node(Token.ADD, firstNode, secondNode).srcref(n));\n+                reportCodeChange();\n+                return firstNode;\n+            }\n+            foldedSize += String.format(\"([%d])\", arrayFoldedChildrenCount).length() + joinSize * arrayFoldedChildrenCount;\n+            foldedSize += right != null ? InlineCostEstimator.getCost(right) : 0;\n+            if (foldedSize <= originalSize && arrayFoldedChildrenCount > 0) {\n+                arrayNode.detachChildren();\n+                Node joinNode = new Node(Token.ADD);\n+                joinNode.addChildToFront(Node.newString(\"[\").srcref(n));\n+                for (Node arrayFoldedChild : arrayFoldedChildren) {\n+                    joinNode.addChildToBack(arrayFoldedChild);\n+                    if (joinNode.getLastChild().getType() != Token.EMPTY) {\n+                        joinNode.addChildToBack(Node.newString(joinString).srcref(n));\n+                    }\n+                }\n+                joinNode.addChildToBack(Node.newString(\"]\").srcref(n));\n+\n+                if (right != null) {\n+                    Node addNode = new Node(Token.ADD);\n+                    addNode.addChildToFront(joinNode);\n+                    addNode.addChildToBack(right.cloneTree());\n+                    joinNode = addNode;\n+                }\n+\n+                n.replaceWith(joinNode.srcref(n));\n+                reportCodeChange();\n+                return joinNode;\n+            }\n+            return n;\n     }\n-\n-    return n;\n-  }\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +674,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}