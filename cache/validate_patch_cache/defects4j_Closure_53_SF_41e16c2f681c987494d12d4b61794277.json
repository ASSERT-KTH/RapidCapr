{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n  if (ref == null || ref.getParent() == null) {\n    return;\n  }\n  Node parent = ref.getParent();\n  int parentType = parent.getType();\n  if (!(parentType == Token.VAR || parentType == Token.ASSIGN || parentType == Token.EXPR_RESULT)) {\n    return;\n  }\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  if (val == null) {\n    // If val is null, just create an undefined node.\n    nodes.add(NodeUtil.newUndefinedNode(null));\n  } else if (parentType == Token.EXPR_RESULT) {\n    // If the parent is an expression statement, wrap the expression in an assignment\n    // to avoid empty statement issues.\n    nodes.add(\n        new Node(\n            Token.ASSIGN, Node.newString(Token.NAME, \"\"), val.detach()));\n  } else if (val.getType() == Token.OBJECTLIT) {\n    // If val is an object literal, replace each key/value pair with an assignment.\n    Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n    for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n      String var = key.getString();\n      Node value = key.removeFirstChild();\n      nodes.add(\n          new Node(\n              Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value));\n      all.remove(var);\n    }\n    for (String var : all) {\n      nodes.add(\n          new Node(\n              Token.ASSIGN,\n              Node.newString(Token.NAME, varmap.get(var)),\n              NodeUtil.newUndefinedNode(null)));\n    }\n  } else {\n    // If val is not null, not an object literal, and not an expression statement,\n    // create a new assignment with the original variable's name.\n    nodes.add(\n        new Node(\n            Token.ASSIGN, Node.newString(Token.NAME, v.getName()), val.detach()));\n  }\n  // Append a true node to ensure that the expression statement evaluates to true.\n  nodes.add(new Node(Token.TRUE));\n  // Join the nodes using the COMMA operator.\n  nodes = Lists.reverse(nodes);\n  Node replacement = new Node(Token.COMMA);\n  Node cur = replacement;\n  int i;\n  for (i = 0; i < nodes.size() - 2; i++) {\n    cur.addChildToFront(nodes.get(i));\n    Node t = new Node(Token.COMMA);\n    cur.addChildToFront(t);\n    cur = t;\n  }\n  cur.addChildToFront(nodes.get(i));\n  cur.addChildToFront(nodes.get(i + 1));\n  replacement.useSourceInfoIfMissingFromForTree(parent);\n  if (parentType == Token.VAR) {\n    parent.getParent().replaceChild(parent, NodeUtil.newExpr(replacement));\n  } else {\n    parent.getParent().replaceChild(parent, replacement);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..d79a1a33 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,64 +300,74 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n-\n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n-\n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n-\n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n-\n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n+private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n+  if (ref == null || ref.getParent() == null) {\n+    return;\n+  }\n+  Node parent = ref.getParent();\n+  int parentType = parent.getType();\n+  if (!(parentType == Token.VAR || parentType == Token.ASSIGN || parentType == Token.EXPR_RESULT)) {\n+    return;\n+  }\n+  List<Node> nodes = Lists.newArrayList();\n+  Node val = ref.getAssignedValue();\n+  blacklistVarReferencesInTree(val, v.scope);\n+  if (val == null) {\n+    // If val is null, just create an undefined node.\n+    nodes.add(NodeUtil.newUndefinedNode(null));\n+  } else if (parentType == Token.EXPR_RESULT) {\n+    // If the parent is an expression statement, wrap the expression in an assignment\n+    // to avoid empty statement issues.\n+    nodes.add(\n+        new Node(\n+            Token.ASSIGN, Node.newString(Token.NAME, \"\"), val.detach()));\n+  } else if (val.getType() == Token.OBJECTLIT) {\n+    // If val is an object literal, replace each key/value pair with an assignment.\n+    Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n+    for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+      String var = key.getString();\n+      Node value = key.removeFirstChild();\n+      nodes.add(\n+          new Node(\n+              Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value));\n+      all.remove(var);\n+    }\n+    for (String var : all) {\n+      nodes.add(\n+          new Node(\n+              Token.ASSIGN,\n+              Node.newString(Token.NAME, varmap.get(var)),\n+              NodeUtil.newUndefinedNode(null)));\n     }\n+  } else {\n+    // If val is not null, not an object literal, and not an expression statement,\n+    // create a new assignment with the original variable's name.\n+    nodes.add(\n+        new Node(\n+            Token.ASSIGN, Node.newString(Token.NAME, v.getName()), val.detach()));\n+  }\n+  // Append a true node to ensure that the expression statement evaluates to true.\n+  nodes.add(new Node(Token.TRUE));\n+  // Join the nodes using the COMMA operator.\n+  nodes = Lists.reverse(nodes);\n+  Node replacement = new Node(Token.COMMA);\n+  Node cur = replacement;\n+  int i;\n+  for (i = 0; i < nodes.size() - 2; i++) {\n+    cur.addChildToFront(nodes.get(i));\n+    Node t = new Node(Token.COMMA);\n+    cur.addChildToFront(t);\n+    cur = t;\n+  }\n+  cur.addChildToFront(nodes.get(i));\n+  cur.addChildToFront(nodes.get(i + 1));\n+  replacement.useSourceInfoIfMissingFromForTree(parent);\n+  if (parentType == Token.VAR) {\n+    parent.getParent().replaceChild(parent, NodeUtil.newExpr(replacement));\n+  } else {\n+    parent.getParent().replaceChild(parent, replacement);\n+  }\n+}\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}