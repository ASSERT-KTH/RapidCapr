{
    "patch": "    if (n.getType() == Token.CALL || n.getType() == Token.NEW) {\n      return false;\n    }\n    Node parent = n.getParent();\n    while (parent != null && parent.getType() != Token.SCRIPT) {\n      if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n        return false;\n      }\n      parent = parent.getParent();\n    }\n    return NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..c408fc22 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,17 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (n.getType() == Token.CALL || n.getType() == Token.NEW) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    while (parent != null && parent.getType() != Token.SCRIPT) {\n+      if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n+        return false;\n+      }\n+      parent = parent.getParent();\n+    }\n+    return NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}