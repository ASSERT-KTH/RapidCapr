{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long initialInstant = instantLocal - initialOffset;\n    int finalOffset = getOffset(initialInstant);\n\n    // Calculate the closest instant of a transition that is different from initialInstant\n    long transitionInstant = (finalOffset > initialOffset) ? nextTransition(initialInstant) : previousTransition(initialInstant);\n\n    if (transitionInstant == initialInstant) {\n        return finalOffset;\n    }\n\n    int transitionOffset = getOffset(transitionInstant + ((finalOffset > initialOffset) ? -1 : 1));\n    if (transitionOffset == initialOffset) {\n        return initialOffset;\n    }\n\n    // If there are more than 2 transitions between initialInstant and transitionInstant\n    // or if the transition at transitionInstant is a \"gap\" transition (offset moves forward),\n    // we should use the final offset. Otherwise, we should use the offset at the transition instant.\n    long tempInstant = (finalOffset > initialOffset) ? previousTransition(transitionInstant) : nextTransition(transitionInstant);\n    while (tempInstant != initialInstant) {\n        int tempOffset = getOffset(tempInstant);\n        if (tempOffset != initialOffset) {\n            return finalOffset;\n        }\n        tempInstant = (finalOffset > initialOffset) ? previousTransition(tempInstant) : nextTransition(tempInstant);\n    }\n\n    return (finalOffset > initialOffset) ? transitionOffset : initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..21facc3e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,38 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long initialInstant = instantLocal - initialOffset;\n+    int finalOffset = getOffset(initialInstant);\n+\n+    // Calculate the closest instant of a transition that is different from initialInstant\n+    long transitionInstant = (finalOffset > initialOffset) ? nextTransition(initialInstant) : previousTransition(initialInstant);\n+\n+    if (transitionInstant == initialInstant) {\n+        return finalOffset;\n+    }\n+\n+    int transitionOffset = getOffset(transitionInstant + ((finalOffset > initialOffset) ? -1 : 1));\n+    if (transitionOffset == initialOffset) {\n+        return initialOffset;\n+    }\n+\n+    // If there are more than 2 transitions between initialInstant and transitionInstant\n+    // or if the transition at transitionInstant is a \"gap\" transition (offset moves forward),\n+    // we should use the final offset. Otherwise, we should use the offset at the transition instant.\n+    long tempInstant = (finalOffset > initialOffset) ? previousTransition(transitionInstant) : nextTransition(transitionInstant);\n+    while (tempInstant != initialInstant) {\n+        int tempOffset = getOffset(tempInstant);\n+        if (tempOffset != initialOffset) {\n+            return finalOffset;\n         }\n-        return offsetAdjusted;\n+        tempInstant = (finalOffset > initialOffset) ? previousTransition(tempInstant) : nextTransition(tempInstant);\n     }\n \n+    return (finalOffset > initialOffset) ? transitionOffset : initialOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}