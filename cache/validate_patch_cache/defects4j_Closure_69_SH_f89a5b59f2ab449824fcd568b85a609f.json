{
    "patch": "      if (functionType.getThisType() != null &&\n          n.getParent().isGetProp() &&\n          n.getFirstChild() == n.getLastChild() &&\n          (\"apply\".equals(n.getLastChild().getString()) ||\n           \"call\".equals(n.getLastChild().getString()))) {\n        return;\n      } else if (functionType.getThisType() != null) {\n        report(t, n, EXPECTED_THIS_TYPE, functionType.getThisType().toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..fcde4e4f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getThisType() != null &&\n+          n.getParent().isGetProp() &&\n+          n.getFirstChild() == n.getLastChild() &&\n+          (\"apply\".equals(n.getLastChild().getString()) ||\n+           \"call\".equals(n.getLastChild().getString()))) {\n+        return;\n+      } else if (functionType.getThisType() != null) {\n+        report(t, n, EXPECTED_THIS_TYPE, functionType.getThisType().toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}