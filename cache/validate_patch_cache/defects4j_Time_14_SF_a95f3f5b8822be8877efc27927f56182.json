{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean changed = false;\n        int maxValue = 0;\n        int minValue = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int curValue = values[i];\n                int newValue = FieldUtils.safeAdd(curValue, valueToAdd);\n                maxValue = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n                minValue = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n\n                if (newValue < minValue || newValue > maxValue) {\n                    // do not handle values that are out of bounds for other fields in the same partial\n                    int curValueMonth = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n                    int curValueYear = values[DateTimeFieldType.year().getFieldIndex()];\n                    switch(partial.getFieldType(i).getName()) {\n                        case(\"dayOfMonth\"):\n                            while (true) {\n                                try {\n                                    LocalDate ld = new LocalDate(curValueYear, curValueMonth, newValue);\n                                    break;\n                                } catch (IllegalFieldValueException e) {\n                                    newValue--;\n                                }\n                            }\n                            break;\n                        case(\"monthOfYear\"):\n                            boolean hasOverflow = false;\n                            if (newValue > maxValue) {\n                                hasOverflow = true;\n                                newValue -= maxValue;\n                            } else if (newValue < minValue) {\n                                hasOverflow = true;\n                                newValue += maxValue;\n                            }\n\n                            while (true) {\n                                try {\n                                    LocalDate ld = new LocalDate(curValueYear, newValue, values[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n                                    break;\n                                } catch (IllegalFieldValueException e) {\n                                    newValue += (hasOverflow) ? -1 : 1;\n                                }\n                            }\n                            break;\n                        case(\"year\"):\n                            newValue = Math.min(Math.max(newValue, minValue), maxValue);\n                            break;\n                    }\n                } \n                \n                values[i] = newValue;\n                changed = true;\n            } else if (changed || (values[i] != partial.getFieldType(i).getField(iChronology).get(instant))) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        if (changed) {\n            instant = iChronology.set(partial, instant);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..6210bfda 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,79 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean changed = false;\n+        int maxValue = 0;\n+        int minValue = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int curValue = values[i];\n+                int newValue = FieldUtils.safeAdd(curValue, valueToAdd);\n+                maxValue = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n+                minValue = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n+\n+                if (newValue < minValue || newValue > maxValue) {\n+                    // do not handle values that are out of bounds for other fields in the same partial\n+                    int curValueMonth = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+                    int curValueYear = values[DateTimeFieldType.year().getFieldIndex()];\n+                    switch(partial.getFieldType(i).getName()) {\n+                        case(\"dayOfMonth\"):\n+                            while (true) {\n+                                try {\n+                                    LocalDate ld = new LocalDate(curValueYear, curValueMonth, newValue);\n+                                    break;\n+                                } catch (IllegalFieldValueException e) {\n+                                    newValue--;\n+                                }\n+                            }\n+                            break;\n+                        case(\"monthOfYear\"):\n+                            boolean hasOverflow = false;\n+                            if (newValue > maxValue) {\n+                                hasOverflow = true;\n+                                newValue -= maxValue;\n+                            } else if (newValue < minValue) {\n+                                hasOverflow = true;\n+                                newValue += maxValue;\n+                            }\n+\n+                            while (true) {\n+                                try {\n+                                    LocalDate ld = new LocalDate(curValueYear, newValue, values[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n+                                    break;\n+                                } catch (IllegalFieldValueException e) {\n+                                    newValue += (hasOverflow) ? -1 : 1;\n+                                }\n+                            }\n+                            break;\n+                        case(\"year\"):\n+                            newValue = Math.min(Math.max(newValue, minValue), maxValue);\n+                            break;\n+                    }\n+                } \n+                \n+                values[i] = newValue;\n+                changed = true;\n+            } else if (changed || (values[i] != partial.getFieldType(i).getField(iChronology).get(instant))) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (changed) {\n+            instant = iChronology.set(partial, instant);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}