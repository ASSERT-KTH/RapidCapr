{
    "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers == null || numbers.isEmpty()) {\n        return result;\n    }\n    int n = numbers.size();\n    int[] maxLeft = new int[n];\n    int[] maxRight = new int[n];\n    maxLeft[0] = numbers.get(0);\n    maxRight[n - 1] = numbers.get(n - 1);\n\n    for (int i = 1; i < n; i++) {\n        maxLeft[i] = (i % 1000 == 0) ? numbers.get(i) : Math.max(maxLeft[i - 1], numbers.get(i));\n        int j = n - i - 1;\n        maxRight[j] = ((j + 1) % 1000 == 0) ? numbers.get(j) : Math.max(maxRight[j + 1], numbers.get(j));\n    }\n\n    for (int i = 0; i < n; i++) {\n        result.add(Math.max(maxRight[i], maxLeft[i]));\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ROLLING_MAX.java b/src/main/java/humaneval/buggy/ROLLING_MAX.java\nindex d95e9dc..ea64f66 100644\n--- a/src/main/java/humaneval/buggy/ROLLING_MAX.java\n+++ b/src/main/java/humaneval/buggy/ROLLING_MAX.java\n@@ -4,14 +4,26 @@ import java.util.ArrayList;\n import java.util.List;\n \n public class ROLLING_MAX {\n-    public static List<Integer> rolling_max(List<Integer> numbers) {\n-        List<Integer> result = new ArrayList<Integer>();\n-        Integer running_max = null;\n-\n-        for (Integer n : numbers){\n-            running_max = Math.max(running_max, n);\n-            result.add(running_max);\n-        }\n+public static List<Integer> rolling_max(List<Integer> numbers) {\n+    List<Integer> result = new ArrayList<Integer>();\n+    if (numbers == null || numbers.isEmpty()) {\n         return result;\n     }\n+    int n = numbers.size();\n+    int[] maxLeft = new int[n];\n+    int[] maxRight = new int[n];\n+    maxLeft[0] = numbers.get(0);\n+    maxRight[n - 1] = numbers.get(n - 1);\n+\n+    for (int i = 1; i < n; i++) {\n+        maxLeft[i] = (i % 1000 == 0) ? numbers.get(i) : Math.max(maxLeft[i - 1], numbers.get(i));\n+        int j = n - i - 1;\n+        maxRight[j] = ((j + 1) % 1000 == 0) ? numbers.get(j) : Math.max(maxRight[j + 1], numbers.get(j));\n+    }\n+\n+    for (int i = 0; i < n; i++) {\n+        result.add(Math.max(maxRight[i], maxLeft[i]));\n+    }\n+    return result;\n+}\n }",
    "result_reason": "   TEST_ROLLING_MAX.test_1:24 arrays first differed at element [0]; expected:<4> but was:<1>",
    "test_result": "FAIL"
}