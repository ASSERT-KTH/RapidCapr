{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean hasParams = parameters.hasNext();\n  while (arguments.hasNext() && hasParams) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n        getJSType(parameter), call, ordinal);\n    hasParams = parameters.hasNext();\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (numArgs < minArgs) {\n    String errorSuffix = \"\";\n    if (maxArgs != Integer.MAX_VALUE) {\n      errorSuffix = \" and no more than \" + maxArgs + \" argument(s)\";\n    }\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.format(\"at least %d argument(s)\", minArgs), errorSuffix);\n  } else if (numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.format(\"no more than %d argument(s)\", maxArgs), \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..7d39e5d9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  boolean hasParams = parameters.hasNext();\n+  while (arguments.hasNext() && hasParams) {\n+    parameter = parameters.next();\n+    argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+        getJSType(parameter), call, ordinal);\n+    hasParams = parameters.hasNext();\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (numArgs < minArgs) {\n+    String errorSuffix = \"\";\n+    if (maxArgs != Integer.MAX_VALUE) {\n+      errorSuffix = \" and no more than \" + maxArgs + \" argument(s)\";\n     }\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.format(\"at least %d argument(s)\", minArgs), errorSuffix);\n+  } else if (numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.format(\"no more than %d argument(s)\", maxArgs), \"\");\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...n requires at least [0 argument(s) and no more than 0] argument(s).> but was:<...n requires at least [no more than 0 argument(s)] argument(s).>",
    "test_result": "FAIL"
}