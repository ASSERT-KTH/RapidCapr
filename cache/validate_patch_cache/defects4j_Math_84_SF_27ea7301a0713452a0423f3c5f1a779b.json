{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(reflected, expanded) < 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = evaluateNewSimplex(original, rho - chi, comparator);\n            }\n            return;\n        }\n\n        // if the reflected point is worse than the worst point, perform a\n        // contraction\n        RealPointValuePair contracted;\n        if (comparator.compare(reflected, original[original.length - 1]) > 0) {\n            contracted = evaluateNewSimplex(original, -chi, comparator);\n            if (comparator.compare(contracted, original[original.length - 1]) > 0) {\n                // perform a shrink\n                final RealPointValuePair[] shrinked = simplex;\n                for (int i = 1; i < shrinked.length; i++) {\n                    final double[] newPoint = new double[shrinked[i].getPoint().length];\n                    for (int j = 0; j < newPoint.length; j++) {\n                        newPoint[j] = best.getPoint()[j] + sigma\n                                * (shrinked[i].getPoint()[j] - best.getPoint()[j]);\n                    }\n                    shrinked[i] = new RealPointValuePair(newPoint,\n                            Double.NaN);\n                }\n                simplex = shrinked;\n            } else {\n                simplex = contracted;\n            }\n            return;\n        }\n\n        // perform an inside contraction\n        contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n            simplex = contracted;\n            return;\n        }\n\n        // perform an outside contraction\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n        for (int i = 0; i < contractedSimplex.length; i++) {\n            if (i == 0) {\n                contractedSimplex[i] = best;\n            } else {\n                final double[] newPoint = new double[original[i].getPoint().length];\n                for (int j = 0; j < newPoint.length; j++) {\n                    newPoint[j] = best.getPoint()[j] + beta\n                            * (original[i].getPoint()[j] - best.getPoint()[j]);\n                }\n                contractedSimplex[i] = new RealPointValuePair(newPoint,\n                        Double.NaN);\n            }\n        }\n\n        final RealPointValuePair contractedOut = evaluateNewSimplex(\n                contractedSimplex, 1.0, comparator);\n        if (comparator.compare(contractedOut, best) < 0) {\n            simplex = contractedSimplex;\n        } else {\n            // perform a shrink\n            final RealPointValuePair[] shrinked = simplex;\n            for (int i = 1; i < shrinked.length; i++) {\n                final double[] newPoint = new double[shrinked[i].getPoint().length];\n                for (int j = 0; j < newPoint.length; j++) {\n                    newPoint[j] = best.getPoint()[j] + sigma\n                            * (shrinked[i].getPoint()[j] - best.getPoint()[j]);\n                }\n                shrinked[i] = new RealPointValuePair(newPoint,\n                        Double.NaN);\n            }\n            simplex = shrinked;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..818d2f95d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,100 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the expanded simplex\n+                simplex = evaluateNewSimplex(original, rho - chi, comparator);\n+            }\n+            return;\n+        }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+        // if the reflected point is worse than the worst point, perform a\n+        // contraction\n+        RealPointValuePair contracted;\n+        if (comparator.compare(reflected, original[original.length - 1]) > 0) {\n+            contracted = evaluateNewSimplex(original, -chi, comparator);\n+            if (comparator.compare(contracted, original[original.length - 1]) > 0) {\n+                // perform a shrink\n+                final RealPointValuePair[] shrinked = simplex;\n+                for (int i = 1; i < shrinked.length; i++) {\n+                    final double[] newPoint = new double[shrinked[i].getPoint().length];\n+                    for (int j = 0; j < newPoint.length; j++) {\n+                        newPoint[j] = best.getPoint()[j] + sigma\n+                                * (shrinked[i].getPoint()[j] - best.getPoint()[j]);\n+                    }\n+                    shrinked[i] = new RealPointValuePair(newPoint,\n+                            Double.NaN);\n                 }\n-\n-                return;\n-\n+                simplex = shrinked;\n+            } else {\n+                simplex = contracted;\n             }\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // perform an inside contraction\n+        contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n+            simplex = contracted;\n+            return;\n+        }\n \n-            // check convergence\n-                return;\n+        // perform an outside contraction\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+        for (int i = 0; i < contractedSimplex.length; i++) {\n+            if (i == 0) {\n+                contractedSimplex[i] = best;\n+            } else {\n+                final double[] newPoint = new double[original[i].getPoint().length];\n+                for (int j = 0; j < newPoint.length; j++) {\n+                    newPoint[j] = best.getPoint()[j] + beta\n+                            * (original[i].getPoint()[j] - best.getPoint()[j]);\n+                }\n+                contractedSimplex[i] = new RealPointValuePair(newPoint,\n+                        Double.NaN);\n             }\n-\n         }\n \n+        final RealPointValuePair contractedOut = evaluateNewSimplex(\n+                contractedSimplex, 1.0, comparator);\n+        if (comparator.compare(contractedOut, best) < 0) {\n+            simplex = contractedSimplex;\n+        } else {\n+            // perform a shrink\n+            final RealPointValuePair[] shrinked = simplex;\n+            for (int i = 1; i < shrinked.length; i++) {\n+                final double[] newPoint = new double[shrinked[i].getPoint().length];\n+                for (int j = 0; j < newPoint.length; j++) {\n+                    newPoint[j] = best.getPoint()[j] + sigma\n+                            * (shrinked[i].getPoint()[j] - best.getPoint()[j]);\n+                }\n+                shrinked[i] = new RealPointValuePair(newPoint,\n+                        Double.NaN);\n+            }\n+            simplex = shrinked;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}