{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    // traverse up the hierarchy of generic type declarations to find the actual type argument of interest\n    Type type = typeVariable.getBounds()[0];\n    while (type instanceof TypeVariable) {\n        type = ((TypeVariable<?>) type).getBounds()[0];\n    }\n    return type;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..0f2820e25 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,19 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    // traverse up the hierarchy of generic type declarations to find the actual type argument of interest\n+    Type type = typeVariable.getBounds()[0];\n+    while (type instanceof TypeVariable) {\n+        type = ((TypeVariable<?>) type).getBounds()[0];\n+    }\n+    return type;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}