{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // Calculate Cholesky decomposition of m\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n\n    // Get the lower triangular matrix L from the decomposition\n    RealMatrix L = cholesky.getL();\n\n    // Calculate the square root of m as L*L^T\n    return L.multiply(L.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8f0bbbd7f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Calculate Cholesky decomposition of m\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+\n+    // Get the lower triangular matrix L from the decomposition\n+    RealMatrix L = cholesky.getL();\n+\n+    // Calculate the square root of m as L*L^T\n+    return L.multiply(L.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}