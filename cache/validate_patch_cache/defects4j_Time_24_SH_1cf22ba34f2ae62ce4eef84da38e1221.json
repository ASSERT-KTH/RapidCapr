{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        if (savedFields[i].getFieldType() != null) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    // Save the exception as this may be the last chronological piece\n    // we parse even though an error happened, and the savedFields\n    // array will then be most helpful for calculation.\n    iSavedFields = savedFields;\n    iSavedFieldsCount = count;\n    iSavedFieldsShared = false;\n\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n} finally {\n    // Write back the fields so as to have the correct values for printing/selecting\n    iSavedFields = savedFields;\n    iSavedFieldsCount = count;\n    iSavedFieldsShared = false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5dd01fa7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        if (savedFields[i].getFieldType() != null) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    // Save the exception as this may be the last chronological piece\n+    // we parse even though an error happened, and the savedFields\n+    // array will then be most helpful for calculation.\n+    iSavedFields = savedFields;\n+    iSavedFieldsCount = count;\n+    iSavedFieldsShared = false;\n+\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+} finally {\n+    // Write back the fields so as to have the correct values for printing/selecting\n+    iSavedFields = savedFields;\n+    iSavedFieldsCount = count;\n+    iSavedFieldsShared = false;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}