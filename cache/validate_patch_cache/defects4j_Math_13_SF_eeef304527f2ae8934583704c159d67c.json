{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    final RealMatrix L = dec.getL();\n    final RealMatrix LT = L.transpose();\n    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(dec.getSingularValues());\n\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(new double[n]);\n    for (int i = 0; i < n; i++) {\n        double sqrtDiag = Math.sqrt(Math.max(D.getEntry(i, i), 0.0));\n        if (Double.isNaN(sqrtDiag) || Double.isInfinite(sqrtDiag)) {\n            sqrtDiag = 0;\n        }\n        sqrtD.setEntry(i, i, sqrtDiag);\n    }\n\n    RealMatrix sqrtM = L.multiply(sqrtD).multiply(LT);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2e1f08b06 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    final RealMatrix L = dec.getL();\n+    final RealMatrix LT = L.transpose();\n+    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(dec.getSingularValues());\n+\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(new double[n]);\n+    for (int i = 0; i < n; i++) {\n+        double sqrtDiag = Math.sqrt(Math.max(D.getEntry(i, i), 0.0));\n+        if (Double.isNaN(sqrtDiag) || Double.isInfinite(sqrtDiag)) {\n+            sqrtDiag = 0;\n+        }\n+        sqrtD.setEntry(i, i, sqrtDiag);\n     }\n+\n+    RealMatrix sqrtM = L.multiply(sqrtD).multiply(LT);\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}