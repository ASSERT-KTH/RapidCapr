{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (n.isCall()) { // check if node is a call expression\n    return false;\n  } else if (n.isFunction()) { // check if node is a function expression\n    Node functionIdentifier = NodeUtil.getFunctionNameNode(n);\n    Node parent = n.getParent();\n    return functionIdentifier != null || (parent.isVar() && parent.getFirstChild() == n);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..58a97417 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,16 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (n.isCall()) { // check if node is a call expression\n+    return false;\n+  } else if (n.isFunction()) { // check if node is a function expression\n+    Node functionIdentifier = NodeUtil.getFunctionNameNode(n);\n+    Node parent = n.getParent();\n+    return functionIdentifier != null || (parent.isVar() && parent.getFirstChild() == n);\n   }\n+  return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}