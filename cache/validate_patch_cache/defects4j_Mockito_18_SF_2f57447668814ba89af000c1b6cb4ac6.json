{
    "patch": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MyClass {\n  \n  public static List<Double> calculateAverage(List<List<Integer>> listOfLists) {\n    List<Double> result = new ArrayList<>();\n    for (List<Integer> list : listOfLists) {\n      if (list.isEmpty()) {\n        result.add(0.0);\n      } else {\n        double sum = 0;\n        for (Integer value : list) {\n          sum += value;\n        }\n        result.add(sum / list.size());\n      }\n    }\n    return Collections.unmodifiableList(result);\n  }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f520668e8 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,28 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class MyClass {\n+  \n+  public static List<Double> calculateAverage(List<List<Integer>> listOfLists) {\n+    List<Double> result = new ArrayList<>();\n+    for (List<Integer> list : listOfLists) {\n+      if (list.isEmpty()) {\n+        result.add(0.0);\n+      } else {\n+        double sum = 0;\n+        for (Integer value : list) {\n+          sum += value;\n+        }\n+        result.add(sum / list.size());\n+      }\n+    }\n+    return Collections.unmodifiableList(result);\n+  }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}