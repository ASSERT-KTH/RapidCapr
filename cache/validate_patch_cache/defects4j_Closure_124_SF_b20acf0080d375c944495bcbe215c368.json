{
    "patch": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    node = node.getFirstChild();\n    while (node != null) {\n      if (!isSafeReplacement(node, replacement)) {\n        return false;\n      }\n      node = node.getNext();\n    }\n\n    if (node == null || !node.isName()) {\n      return true;\n    }\n\n    return !isNameAssignedTo(node.getString(), replacement);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..0faae660 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -210,13 +210,19 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n+    node = node.getFirstChild();\n+    while (node != null) {\n+      if (!isSafeReplacement(node, replacement)) {\n+        return false;\n+      }\n+      node = node.getNext();\n+    }\n+\n+    if (node == null || !node.isName()) {\n+      return true;\n     }\n \n-    return true;\n+    return !isNameAssignedTo(node.getString(), replacement);\n   }\n \n   /**\n@@ -241,4 +247,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}