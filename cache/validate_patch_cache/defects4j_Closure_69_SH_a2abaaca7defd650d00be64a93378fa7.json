{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.hasAnyDeclaredParameter() &&\n          functionType.getParameterTypes().get(0).isThisType()) {\n        Node parent = n.getParent();\n        boolean inGetPropOrGetElem =\n            (parent.isGetProp() || parent.isGetElem()) &&\n            parent.getFirstChild() == n;\n        if (!inGetPropOrGetElem) {\n          report(t, n, INVALID_THIS_TYPE);\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..3f3f87ea 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.hasAnyDeclaredParameter() &&\n+          functionType.getParameterTypes().get(0).isThisType()) {\n+        Node parent = n.getParent();\n+        boolean inGetPropOrGetElem =\n+            (parent.isGetProp() || parent.isGetElem()) &&\n+            parent.getFirstChild() == n;\n+        if (!inGetPropOrGetElem) {\n+          report(t, n, INVALID_THIS_TYPE);\n+        }\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+      ensureTyped(t, n);\n+    }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}