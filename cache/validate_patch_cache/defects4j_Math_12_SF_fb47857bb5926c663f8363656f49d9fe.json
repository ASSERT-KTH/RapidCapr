{
    "patch": "public class DistributionUtils {\n\n    /**\n     * Clones the input array.\n     *\n     * @param array the input array to be cloned\n     * @return a clone of the input array\n     */\n    public static double[] clone(double[] array) {\n        if (array == null) {\n            return null;\n        }\n        return array.clone();\n    }\n\n    /**\n     * Normalizes the input array so that the sum of all elements is 1.\n     * If the input array is all zeros, return an array of all zeros.\n     *\n     * @param array the input array to be normalized\n     * @return the normalized array\n     */\n    public static double[] normalize(double[] array) {\n        if (array == null) {\n            return null;\n        }\n        double sum = 0;\n        for (double d : array) {\n            sum += d;\n        }\n        if (sum == 0) {\n            double[] result = new double[array.length];\n            return result;\n        }\n        double[] result = new double[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i] / sum;\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Euclidean distance between two arrays of doubles.\n     * The arrays are assumed to have the same length.\n     *\n     * @param array1 the first array of doubles\n     * @param array2 the second array of doubles\n     * @return the Euclidean distance between the two arrays\n     */\n    public static double euclideanDistance(double[] array1, double[] array2) {\n        if (array1 == null || array2 == null || array1.length != array2.length) {\n            throw new IllegalArgumentException(\"Input arrays must have the same length and must not be null\");\n        }\n        double sumSquaredDiff = 0;\n        for (int i = 0; i < array1.length; i++) {\n            double diff = array1[i] - array2[i];\n            sumSquaredDiff += diff * diff;\n        }\n        return Math.sqrt(sumSquaredDiff);\n    }\n\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}