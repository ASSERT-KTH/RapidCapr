{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double fx = Math.abs(v1.x);\n      final double fy = Math.abs(v1.y);\n      final double fz = Math.abs(v1.z);\n      final double eps = 1e-50;\n      double max = fx;\n      if (fy > max) {\n          max = fy;\n      }\n      if (fz > max) {\n          max = fz;\n      }\n      if (max < eps) {\n          // this vector is zero => crossProduct(v1, v2) = 0 too\n          return Vector3D.ZERO;\n      }\n\n      final double invMax = 1.0 / max;\n      final double vx = v1.x * invMax;\n      final double vy = v1.y * invMax;\n      final double vz = v1.z * invMax;\n\n      final double wx = v2.x * invMax;\n      final double wy = v2.y * invMax;\n      final double wz = v2.z * invMax;\n\n      final double c1 = vy * wz - vz * wy;\n      final double c2 = vz * wx - vx * wz;\n      final double c3 = vx * wy - vy * wx;\n\n      final double scaledSqNorm = c1 * c1 + c2 * c2 + c3 * c3;\n      final double scaledInvNorm = 1.0 / Math.sqrt(scaledSqNorm);\n      return new Vector3D(c1 * scaledInvNorm, c2 * scaledInvNorm, c3 * scaledInvNorm);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..f519a73d4 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,21 +456,38 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double fx = Math.abs(v1.x);\n+      final double fy = Math.abs(v1.y);\n+      final double fz = Math.abs(v1.z);\n+      final double eps = 1e-50;\n+      double max = fx;\n+      if (fy > max) {\n+          max = fy;\n+      }\n+      if (fz > max) {\n+          max = fz;\n+      }\n+      if (max < eps) {\n+          // this vector is zero => crossProduct(v1, v2) = 0 too\n+          return Vector3D.ZERO;\n+      }\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+      final double invMax = 1.0 / max;\n+      final double vx = v1.x * invMax;\n+      final double vy = v1.y * invMax;\n+      final double vz = v1.z * invMax;\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      final double wx = v2.x * invMax;\n+      final double wy = v2.y * invMax;\n+      final double wz = v2.z * invMax;\n \n+      final double c1 = vy * wz - vz * wy;\n+      final double c2 = vz * wx - vx * wz;\n+      final double c3 = vx * wy - vy * wx;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double scaledSqNorm = c1 * c1 + c2 * c2 + c3 * c3;\n+      final double scaledInvNorm = 1.0 / Math.sqrt(scaledSqNorm);\n+      return new Vector3D(c1 * scaledInvNorm, c2 * scaledInvNorm, c3 * scaledInvNorm);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.2860387767736777>",
    "test_result": "FAIL"
}