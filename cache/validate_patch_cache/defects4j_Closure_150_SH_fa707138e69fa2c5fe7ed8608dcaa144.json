{
    "patch": "    Node grandparent = parent.getParent();\n    if (parent.getType() != Token.LP) {\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            // Breaking to prevent falling through to `attachFunctionNameHooks`\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (NodeUtil.isFunctionExpression(parent)) {\n            defineDeclaredFunction(parent, parent.getParent());\n          }\n          break;\n      }\n    } else if (parent.getParent() == scope.getRootNode()) {\n      handleFunctionInputs(parent.getParent());\n    } else if (grandparent.getType() == Token.FUNCTION) {\n      defineDeclaredFunction(grandparent, grandparent.getParent());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b159f40a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,10 +1448,13 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+    Node grandparent = parent.getParent();\n+    if (parent.getType() != Token.LP) {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n+            // Breaking to prevent falling through to `attachFunctionNameHooks`\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n@@ -1462,7 +1465,17 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          if (NodeUtil.isFunctionExpression(parent)) {\n+            defineDeclaredFunction(parent, parent.getParent());\n+          }\n+          break;\n       }\n+    } else if (parent.getParent() == scope.getRootNode()) {\n+      handleFunctionInputs(parent.getParent());\n+    } else if (grandparent.getType() == Token.FUNCTION) {\n+      defineDeclaredFunction(grandparent, grandparent.getParent());\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_DUP_VAR_DECLARATION. variable x redefined with type (Foo|null), original definition at testcode:13 with type (Foo|null) at testcode line 13 : 33",
    "test_result": "FAIL"
}