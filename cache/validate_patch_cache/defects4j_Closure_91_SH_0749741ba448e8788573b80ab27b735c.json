{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n          String propertyName = lhs.getLastChild().getString();\n          if (propertyName.equals(\"prototype\") || propertyName.equals(\"$jscomp$scopedEval\")) {\n            return false;\n          }\n        }\n        // Check if the parent is an assignment to another getprop.\n        if (parent.getParent() != null &&\n            parent.getParent().getType() == Token.ASSIGN &&\n            NodeUtil.isGet(parent.getParent().getFirstChild()) &&\n            NodeUtil.isGet(parent.getParent().getFirstChild().getFirstChild())) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2d712963 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP) {\n+          String propertyName = lhs.getLastChild().getString();\n+          if (propertyName.equals(\"prototype\") || propertyName.equals(\"$jscomp$scopedEval\")) {\n+            return false;\n+          }\n+        }\n+        // Check if the parent is an assignment to another getprop.\n+        if (parent.getParent() != null &&\n+            parent.getParent().getType() == Token.ASSIGN &&\n+            NodeUtil.isGet(parent.getParent().getFirstChild()) &&\n+            NodeUtil.isGet(parent.getParent().getFirstChild().getFirstChild())) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}