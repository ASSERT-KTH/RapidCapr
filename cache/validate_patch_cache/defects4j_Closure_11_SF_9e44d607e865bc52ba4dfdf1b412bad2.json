{
    "patch": "public boolean getprop(String key) {\n    try {\n        Process process = Runtime.getRuntime().exec(new String[] {\"/system/bin/getprop\", key});\n        InputStream inputStream = process.getInputStream();\n        String line = readFully(inputStream);\n        return line.equals(\"1\");\n    } catch (IOException e) {\n        String message = e.getMessage();\n        if (message != null && message.contains(\"No such file or directory\")) {\n            return false;\n        }\n        String[] warnings = e.getMessage().split(\"\\n\");\n        for (String warning : warnings) {\n            System.out.println(warning); // print out warnings\n        }\n        return false;\n    }\n}\n\nprivate static String readFully(InputStream inputStream) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream), 8192);\n    try {\n        StringBuilder sb = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n            sb.append(\"\\n\");\n        }\n        return sb.toString();\n    } finally {\n        reader.close();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..cefff4cb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String key) {\n+    try {\n+        Process process = Runtime.getRuntime().exec(new String[] {\"/system/bin/getprop\", key});\n+        InputStream inputStream = process.getInputStream();\n+        String line = readFully(inputStream);\n+        return line.equals(\"1\");\n+    } catch (IOException e) {\n+        String message = e.getMessage();\n+        if (message != null && message.contains(\"No such file or directory\")) {\n+            return false;\n+        }\n+        String[] warnings = e.getMessage().split(\"\\n\");\n+        for (String warning : warnings) {\n+            System.out.println(warning); // print out warnings\n+        }\n+        return false;\n+    }\n+}\n+\n+private static String readFully(InputStream inputStream) throws IOException {\n+    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream), 8192);\n+    try {\n+        StringBuilder sb = new StringBuilder();\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            sb.append(line);\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();\n+    } finally {\n+        reader.close();\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}