{
    "patch": "        if (hasFiniteBounds) {\n            for (int i = 0; i < lB.length; i++) {\n                if (Double.isNaN(lB[i]) ||\n                    Double.isNaN(uB[i])) {\n                    throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);\n                }\n                if (Double.compare(lB[i], uB[i]) > 0) {\n                    throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lB[i], uB[i], true);\n                }\n                if (!Double.isInfinite(lB[i]) ||\n                    !Double.isInfinite(uB[i])) {\n                    hasFiniteBounds = true;\n                }\n            }\n\n            if (hasFiniteBounds) {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n            } else {\n                boundaries = null;\n            }\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n                        throw new NumberIsTooLargeException(inputSigma[i], boundaries[1][i] - boundaries[0][i], false);\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..3a9043e0a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -501,42 +501,28 @@ public class CMAESOptimizer\n     /**\n      * Checks dimensions and values of boundaries and inputSigma if defined.\n      */\n-    private void checkParameters() {\n-        final double[] init = getStartPoint();\n-        final double[] lB = getLowerBound();\n-        final double[] uB = getUpperBound();\n-\n-        // Checks whether there is at least one finite bound value.\n-        boolean hasFiniteBounds = false;\n-        for (int i = 0; i < lB.length; i++) {\n-            if (!Double.isInfinite(lB[i]) ||\n-                !Double.isInfinite(uB[i])) {\n-                hasFiniteBounds = true;\n-                break;\n-            }\n-        }\n-        // Checks whether there is at least one infinite bound value.\n-        boolean hasInfiniteBounds = false;\n         if (hasFiniteBounds) {\n             for (int i = 0; i < lB.length; i++) {\n-                if (Double.isInfinite(lB[i]) ||\n-                    Double.isInfinite(uB[i])) {\n-                    hasInfiniteBounds = true;\n-                    break;\n+                if (Double.isNaN(lB[i]) ||\n+                    Double.isNaN(uB[i])) {\n+                    throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);\n+                }\n+                if (Double.compare(lB[i], uB[i]) > 0) {\n+                    throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lB[i], uB[i], true);\n+                }\n+                if (!Double.isInfinite(lB[i]) ||\n+                    !Double.isInfinite(uB[i])) {\n+                    hasFiniteBounds = true;\n                 }\n             }\n \n-            if (hasInfiniteBounds) {\n-                // If there is at least one finite bound, none can be infinite,\n-                // because mixed cases are not supported by the current code.\n-                throw new MathUnsupportedOperationException();\n-            } else {\n+            if (hasFiniteBounds) {\n                 // Convert API to internal handling of boundaries.\n                 boundaries = new double[2][];\n                 boundaries[0] = lB;\n                 boundaries[1] = uB;\n-\n-                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            } else {\n+                boundaries = null;\n             }\n         } else {\n             // Convert API to internal handling of boundaries.\n@@ -553,12 +539,11 @@ public class CMAESOptimizer\n                 }\n                 if (boundaries != null) {\n                     if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);\n+                        throw new NumberIsTooLargeException(inputSigma[i], boundaries[1][i] - boundaries[0][i], false);\n                     }\n                 }\n             }\n         }\n-    }\n \n     /**\n      * Initialization of the dynamic search parameters",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}