{
    "patch": "public static String unescape(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final StringBuilder builder = new StringBuilder(str.length());\n    final int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        final char c = str.charAt(i);\n        if (c == '\\\\') {\n            if (++i == strLen) {\n                throw new IllegalArgumentException(\"Invalid escaped character in pattern: \\\\\" + c);\n            }\n            final char escapedChar = str.charAt(i);\n            switch (escapedChar) {\n                case 'n': builder.append('\\n'); break;\n                case 'r': builder.append('\\r'); break;\n                case 't': builder.append('\\t'); break;\n                case 'f': builder.append('\\f'); break;\n                case 'b': builder.append('\\b'); break;\n                case '\\\"':\n                case '\\'':\n                case '\\\\':\n                    builder.append(escapedChar); break;\n                case 'u':\n                    if (i + 4 <= strLen) {\n                        // Get the hex value of the character value\n                        final int code = Integer.parseInt(str.substring(i + 1, i + 5), 16);\n                        builder.append((char) code);\n                        i += 4;\n                        break;\n                    }\n                    throw new IllegalArgumentException(\"Invalid unicode character representation in pattern: \\\\u\" + str.substring(i + 1));\n                default:\n                    throw new IllegalArgumentException(\"Invalid escaped character in pattern: \\\\\" + escapedChar);\n            }\n        }\n        else {\n            builder.append(c);\n        }\n    }\n    return builder.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..e4c9eeeb 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,48 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    final StringBuilder builder = new StringBuilder(str.length());\n+    final int strLen = str.length();\n+    for (int i = 0; i < strLen; i++) {\n+        final char c = str.charAt(i);\n+        if (c == '\\\\') {\n+            if (++i == strLen) {\n+                throw new IllegalArgumentException(\"Invalid escaped character in pattern: \\\\\" + c);\n+            }\n+            final char escapedChar = str.charAt(i);\n+            switch (escapedChar) {\n+                case 'n': builder.append('\\n'); break;\n+                case 'r': builder.append('\\r'); break;\n+                case 't': builder.append('\\t'); break;\n+                case 'f': builder.append('\\f'); break;\n+                case 'b': builder.append('\\b'); break;\n+                case '\\\"':\n+                case '\\'':\n+                case '\\\\':\n+                    builder.append(escapedChar); break;\n+                case 'u':\n+                    if (i + 4 <= strLen) {\n+                        // Get the hex value of the character value\n+                        final int code = Integer.parseInt(str.substring(i + 1, i + 5), 16);\n+                        builder.append((char) code);\n+                        i += 4;\n+                        break;\n+                    }\n+                    throw new IllegalArgumentException(\"Invalid unicode character representation in pattern: \\\\u\" + str.substring(i + 1));\n+                default:\n+                    throw new IllegalArgumentException(\"Invalid escaped character in pattern: \\\\\" + escapedChar);\n+            }\n+        }\n+        else {\n+            builder.append(c);\n+        }\n+    }\n+    return builder.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}