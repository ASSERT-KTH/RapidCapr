{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) throws IllegalArgumentException {\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw new IllegalArgumentException();\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    v1 = v1.normalize().scalarMultiply(FastMath.sqrt(u1u1 / v1v1));\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    double u1u2   = u1.dotProduct(u2);\n    double v1v2   = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1;\n    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n    double alpha  = coeffU - beta * coeffV;\n    v2 = v2.normalize().add(v1.scalarMultiply(-alpha)).normalize().scalarMultiply(FastMath.sqrt(u2u2 / (1 - alpha * alpha - beta * beta)));\n\n    // preliminary computation\n    Vector3D w = u1.crossProduct(u2);\n    double c1 = v1.dotProduct(w);\n    double c2 = v2.dotProduct(w);\n\n    if ((c1 == 0) || (c2 == 0)) {\n        if (u1.dotProduct(v1) * u2.dotProduct(v2) < 0) {\n            // special case u2 = -u1 and v2 = lambda v1 where lambda < 0\n            throw new IllegalArgumentException();\n        }\n\n        // the case |u1 x u2| = 0, ie u1 and u2 are colinear\n        Vector3D u3 = null;\n        double    co = 0;\n        if ((u1.crossProduct(v1).getNorm() == 0) && (u2.crossProduct(v1).getNorm() == 0)) {\n            // u1 and v1 are colinear\n            u3 = u1;\n            co = v1.dotProduct(u2);\n        } else if ((u1.crossProduct(v2).getNorm() == 0) && (u2.crossProduct(v2).getNorm() == 0)) {\n            // u1 and v2 are colinear\n            u3 = u1;\n            co = v2.dotProduct(u2);\n        } else if ((u1.crossProduct(v1).getNorm() == 0) && (u2.crossProduct(v2).getNorm() == 0)) {\n            // u2 and v1 are colinear\n            u3 = u2;\n            co = v1.dotProduct(u1);\n        } else if ((u1.crossProduct(v2).getNorm() == 0) && (u2.crossProduct(v2).getNorm() == 0)) {\n            // u2 and v2 colinear\n            u3 = u2;\n            co = v2.dotProduct(u1);\n        }\n        Vector3D n = (co >= 0) ? u3.normalize() : u3.normalize().negate();\n        double sine = FastMath.max(0, w.getNorm() / (u1.getNorm() * v1.getNorm()));\n        double cosine = FastMath.sqrt(1 - sine * sine);\n        q0 = cosine;\n        q1 = sine * n.getX();\n        q2 = sine * n.getY();\n        q3 = sine * n.getZ();\n    } else {\n        Vector3D e = w.divide(w.getNorm());\n        double s1 = (FastMath.sqrt(1 - alpha * alpha - beta * beta) * c1 - alpha * c2) / w.getNorm();\n        double s2 = (FastMath.sqrt(1 - alpha * alpha - beta * beta) * c2 - beta * c1) / w.getNorm();\n        double s3 = FastMath.sqrt(FastMath.max(0, 1 - s1 * s1 - s2 * s2));\n        if (u1.dotProduct(e.crossProduct(v1)) < 0) {\n            s3 = -s3;\n        }\n        q0 = FastMath.sqrt(0.5 * (s3 + 1));\n        double coeff = 0.25 / q0;\n        q1 = coeff * (s2 * e.getY() - s1 * e.getZ());\n        q2 = coeff * (s3 * e.getZ() - s2 * e.getX());\n        q3 = coeff * (s1 * e.getX() - s3 * e.getY());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..03a5106a6 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,69 +310,81 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n-\n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n-\n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n-      }\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) throws IllegalArgumentException {\n+    // norms computation\n+    double u1u1 = u1.getNormSq();\n+    double u2u2 = u2.getNormSq();\n+    double v1v1 = v1.getNormSq();\n+    double v2v2 = v2.getNormSq();\n+    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n+        throw new IllegalArgumentException();\n+    }\n \n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n+    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n+    v1 = v1.normalize().scalarMultiply(FastMath.sqrt(u1u1 / v1v1));\n+\n+    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n+    double u1u2   = u1.dotProduct(u2);\n+    double v1v2   = v1.dotProduct(v2);\n+    double coeffU = u1u2 / u1u1;\n+    double coeffV = v1v2 / u1u1;\n+    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n+    double alpha  = coeffU - beta * coeffV;\n+    v2 = v2.normalize().add(v1.scalarMultiply(-alpha)).normalize().scalarMultiply(FastMath.sqrt(u2u2 / (1 - alpha * alpha - beta * beta)));\n+\n+    // preliminary computation\n+    Vector3D w = u1.crossProduct(u2);\n+    double c1 = v1.dotProduct(w);\n+    double c2 = v2.dotProduct(w);\n+\n+    if ((c1 == 0) || (c2 == 0)) {\n+        if (u1.dotProduct(v1) * u2.dotProduct(v2) < 0) {\n+            // special case u2 = -u1 and v2 = lambda v1 where lambda < 0\n+            throw new IllegalArgumentException();\n+        }\n \n+        // the case |u1 x u2| = 0, ie u1 and u2 are colinear\n+        Vector3D u3 = null;\n+        double    co = 0;\n+        if ((u1.crossProduct(v1).getNorm() == 0) && (u2.crossProduct(v1).getNorm() == 0)) {\n+            // u1 and v1 are colinear\n+            u3 = u1;\n+            co = v1.dotProduct(u2);\n+        } else if ((u1.crossProduct(v2).getNorm() == 0) && (u2.crossProduct(v2).getNorm() == 0)) {\n+            // u1 and v2 are colinear\n+            u3 = u1;\n+            co = v2.dotProduct(u2);\n+        } else if ((u1.crossProduct(v1).getNorm() == 0) && (u2.crossProduct(v2).getNorm() == 0)) {\n+            // u2 and v1 are colinear\n+            u3 = u2;\n+            co = v1.dotProduct(u1);\n+        } else if ((u1.crossProduct(v2).getNorm() == 0) && (u2.crossProduct(v2).getNorm() == 0)) {\n+            // u2 and v2 colinear\n+            u3 = u2;\n+            co = v2.dotProduct(u1);\n+        }\n+        Vector3D n = (co >= 0) ? u3.normalize() : u3.normalize().negate();\n+        double sine = FastMath.max(0, w.getNorm() / (u1.getNorm() * v1.getNorm()));\n+        double cosine = FastMath.sqrt(1 - sine * sine);\n+        q0 = cosine;\n+        q1 = sine * n.getX();\n+        q2 = sine * n.getY();\n+        q3 = sine * n.getZ();\n+    } else {\n+        Vector3D e = w.divide(w.getNorm());\n+        double s1 = (FastMath.sqrt(1 - alpha * alpha - beta * beta) * c1 - alpha * c2) / w.getNorm();\n+        double s2 = (FastMath.sqrt(1 - alpha * alpha - beta * beta) * c2 - beta * c1) / w.getNorm();\n+        double s3 = FastMath.sqrt(FastMath.max(0, 1 - s1 * s1 - s2 * s2));\n+        if (u1.dotProduct(e.crossProduct(v1)) < 0) {\n+            s3 = -s3;\n+        }\n+        q0 = FastMath.sqrt(0.5 * (s3 + 1));\n+        double coeff = 0.25 / q0;\n+        q1 = coeff * (s2 * e.getY() - s1 * e.getZ());\n+        q2 = coeff * (s3 * e.getZ() - s2 * e.getX());\n+        q3 = coeff * (s1 * e.getX() - s3 * e.getY());\n     }\n-\n-  }\n+}\n \n   // compute the vectorial part\n   c = FastMath.sqrt(c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}