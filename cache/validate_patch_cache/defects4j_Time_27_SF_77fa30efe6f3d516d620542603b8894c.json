{
    "patch": "            int i = 1;\n            while (i < size && elementPairs.get(i) instanceof Literal) {\n                i++;\n            }\n            if (i >= size) {\n                // no more non-literal elements found, return a null formatter\n                return new PeriodFormatter(null, null);\n            }\n            Object[] comp = createComposite(elementPairs.subList(i, size));\n            PeriodPrinter printer = (notPrinter ? null : (PeriodPrinter) comp[0]);\n            PeriodParser parser = (notParser ? null : (PeriodParser) comp[1]);\n            if (printer == null && parser == null) {\n                // if they are both null, return a null formatter\n                return new PeriodFormatter(null, null);\n            } else {\n                // recursively create formatter with printer and parser as child formatters\n                PeriodFormatter childFormatter = toFormatter(elementPairs.subList(1, i), false, false);\n                sep = sep.finish(childFormatter.getPrinter(), childFormatter.getParser());\n                return new PeriodFormatter(printer, parser).withLocale(childFormatter.getLocale()).withTimeZone(childFormatter.getTimeZone()).withPivotYear(childFormatter.getPivotYear()).withDefaultPeriod(convertFieldsToPeriod(childFormatter.getDefaultFieldValueMap()));\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..04dc6c96 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,26 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            int i = 1;\n+            while (i < size && elementPairs.get(i) instanceof Literal) {\n+                i++;\n+            }\n+            if (i >= size) {\n+                // no more non-literal elements found, return a null formatter\n+                return new PeriodFormatter(null, null);\n+            }\n+            Object[] comp = createComposite(elementPairs.subList(i, size));\n+            PeriodPrinter printer = (notPrinter ? null : (PeriodPrinter) comp[0]);\n+            PeriodParser parser = (notParser ? null : (PeriodParser) comp[1]);\n+            if (printer == null && parser == null) {\n+                // if they are both null, return a null formatter\n+                return new PeriodFormatter(null, null);\n+            } else {\n+                // recursively create formatter with printer and parser as child formatters\n+                PeriodFormatter childFormatter = toFormatter(elementPairs.subList(1, i), false, false);\n+                sep = sep.finish(childFormatter.getPrinter(), childFormatter.getParser());\n+                return new PeriodFormatter(printer, parser).withLocale(childFormatter.getLocale()).withTimeZone(childFormatter.getTimeZone()).withPivotYear(childFormatter.getPivotYear()).withDefaultPeriod(convertFieldsToPeriod(childFormatter.getDefaultFieldValueMap()));\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}