{
    "patch": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    if (round) {\n        // Get the original value of the specified field\n        int originalFieldValue = val.get(field);\n        \n        // Set the field to the minimum value\n        val.set(field, val.getActualMinimum(field));\n        \n        if (originalFieldValue > val.get(field)) {\n            // Truncating the field caused it to go backwards, so we need to increment the next field\n            int nextField = getNextField(field);\n            if (nextField != -1) {\n                val.add(nextField, 1);\n            }\n        } else {\n            // Truncating the field did not cause it to go backwards, so we need to increment until it rounds up\n            int maxFieldValue = val.getMaximum(field);\n            if (field == Calendar.MONTH) {\n                maxFieldValue = val.getLeastMaximum(field);\n            }\n            \n            while (val.get(field) < originalFieldValue) {\n                // Increment the field until it rounds up\n                val.add(field, 1);\n                \n                // If the field reaches its maximum value, reset it to the minimum and increment the next field\n                if (val.get(field) == maxFieldValue) {\n                    val.set(field, val.getActualMinimum(field));\n                    int nextField = getNextField(field);\n                    if (nextField != -1) {\n                        val.add(nextField, 1);\n                        if (nextField == Calendar.MONTH) {\n                            val.set(Calendar.DAY_OF_MONTH, 1);\n                        }\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n    } else {\n        // Just truncate the specified field without rounding\n        val.set(field, val.getActualMinimum(field));\n    }\n}\n\n// Helper method to get the next higher field, or -1 if none exists\nprivate static int getNextField(int field) {\n    switch (field) {\n        case Calendar.YEAR:\n            return Calendar.MONTH;\n        case Calendar.MONTH:\n            return Calendar.DAY_OF_MONTH;\n        case Calendar.DAY_OF_MONTH:\n            return Calendar.HOUR_OF_DAY;\n        case Calendar.HOUR_OF_DAY:\n            return Calendar.MINUTE;\n        case Calendar.MINUTE:\n            return Calendar.SECOND;\n        case Calendar.SECOND:\n            return Calendar.MILLISECOND;\n        case Calendar.MILLISECOND:\n        default:\n            return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..bada456e 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,101 +616,76 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n-        }\n+private static void modify(Calendar val, int field, boolean round) {\n+    if (val.get(Calendar.YEAR) > 280000000) {\n+        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+    }\n+    \n+    if (round) {\n+        // Get the original value of the specified field\n+        int originalFieldValue = val.get(field);\n         \n-\n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n-                }\n+        // Set the field to the minimum value\n+        val.set(field, val.getActualMinimum(field));\n+        \n+        if (originalFieldValue > val.get(field)) {\n+            // Truncating the field caused it to go backwards, so we need to increment the next field\n+            int nextField = getNextField(field);\n+            if (nextField != -1) {\n+                val.add(nextField, 1);\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n+        } else {\n+            // Truncating the field did not cause it to go backwards, so we need to increment until it rounds up\n+            int maxFieldValue = val.getMaximum(field);\n+            if (field == Calendar.MONTH) {\n+                maxFieldValue = val.getLeastMaximum(field);\n+            }\n+            \n+            while (val.get(field) < originalFieldValue) {\n+                // Increment the field until it rounds up\n+                val.add(field, 1);\n+                \n+                // If the field reaches its maximum value, reset it to the minimum and increment the next field\n+                if (val.get(field) == maxFieldValue) {\n+                    val.set(field, val.getActualMinimum(field));\n+                    int nextField = getNextField(field);\n+                    if (nextField != -1) {\n+                        val.add(nextField, 1);\n+                        if (nextField == Calendar.MONTH) {\n+                            val.set(Calendar.DAY_OF_MONTH, 1);\n                         }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n+                    } else {\n+                        break;\n                     }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n+                }\n             }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+    } else {\n+        // Just truncate the specified field without rounding\n+        val.set(field, val.getActualMinimum(field));\n+    }\n+}\n \n+// Helper method to get the next higher field, or -1 if none exists\n+private static int getNextField(int field) {\n+    switch (field) {\n+        case Calendar.YEAR:\n+            return Calendar.MONTH;\n+        case Calendar.MONTH:\n+            return Calendar.DAY_OF_MONTH;\n+        case Calendar.DAY_OF_MONTH:\n+            return Calendar.HOUR_OF_DAY;\n+        case Calendar.HOUR_OF_DAY:\n+            return Calendar.MINUTE;\n+        case Calendar.MINUTE:\n+            return Calendar.SECOND;\n+        case Calendar.SECOND:\n+            return Calendar.MILLISECOND;\n+        case Calendar.MILLISECOND:\n+        default:\n+            return -1;\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected Sun Jan 27 00:00:00 PST 2002 but got Sun Jan 06 12:34:56 PST 2002",
    "test_result": "FAIL"
}