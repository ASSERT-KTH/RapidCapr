{
    "patch": "      JSDocInfo fnJSDocInfo = NodeUtil.getBestJSDocInfo(child);\n      JSType thisType = fnJSDocInfo != null ? fnJSDocInfo.getTypeOfThis() : null;\n      if (thisType != null && !NodeUtil.isGetOrSetKey(child.getParent())) {\n        report(t, n, INVALID_THIS_TYPE, childType.toString());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a8ac7a78 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo fnJSDocInfo = NodeUtil.getBestJSDocInfo(child);\n+      JSType thisType = fnJSDocInfo != null ? fnJSDocInfo.getTypeOfThis() : null;\n+      if (thisType != null && !NodeUtil.isGetOrSetKey(child.getParent())) {\n+        report(t, n, INVALID_THIS_TYPE, childType.toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}