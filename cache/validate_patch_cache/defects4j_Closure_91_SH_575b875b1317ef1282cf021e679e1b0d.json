{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      // This condition checks if the function is being assigned to a property with the name \"prototype\"\n      // and the object being assigned to is a GETPROP with a depth of one (e.g. obj.prototype = ...).\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP && lhs.getFirstChild().isQualifiedName() &&\n            lhs.getFirstChild().getQualifiedName().equals(\"Object.prototype\")) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fbaaacb2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      // This condition checks if the function is being assigned to a property with the name \"prototype\"\n+      // and the object being assigned to is a GETPROP with a depth of one (e.g. obj.prototype = ...).\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP && lhs.getFirstChild().isQualifiedName() &&\n+            lhs.getFirstChild().getQualifiedName().equals(\"Object.prototype\")) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}