{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n\n    // Initialize continued fraction\n    double hPrev = getA(0, x);\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    double bPrev = getB(0, x);\n    if (Precision.equals(bPrev, 0.0, small)) {\n        bPrev = small;\n    }\n\n    double dPrev = 0.0;\n    double fPrev = hPrev;\n\n    double hCurr = hPrev * getA(1, x) + bPrev;\n    if (Precision.equals(hCurr, 0.0, small)) {\n        hCurr = small;\n    }\n\n    double bCurr = bPrev * getA(1, x) + getB(1, x);\n    if (Precision.equals(bCurr, 0.0, small)) {\n        bCurr = small;\n    }\n\n    int n = 1;\n\n    while (n < maxIterations) {\n        double a = getA(n + 1, x);\n        double b = getB(n + 1, x);\n\n        double dCurr = b + a * dPrev;\n        double fCurr = hCurr + a * fPrev;\n\n        // check for convergence\n        if (fCurr != 0 && bCurr != 0 && FastMath.abs(hCurr / bCurr - hPrev / bPrev) < epsilon) {\n            break;\n        }\n\n        // check for zero\n        if (Precision.equals(dCurr, 0.0, small)) {\n            dCurr = small;\n        }\n\n        // update state variables\n        double deltaN = fCurr / dCurr;\n        hPrev = hCurr;\n        bPrev = bCurr;\n        dPrev = dCurr;\n        fPrev = fCurr;\n\n        hCurr = a * hPrev + bPrev;\n        if (Precision.equals(hCurr, 0.0, small)) {\n            hCurr = small;\n        }\n\n        bCurr = a * bPrev + dPrev;\n        if (Precision.equals(bCurr, 0.0, small)) {\n            bCurr = small;\n        }\n\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hCurr / bCurr;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..176a53877 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,77 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n+    // Initialize continued fraction\n+    double hPrev = getA(0, x);\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n+\n+    double bPrev = getB(0, x);\n+    if (Precision.equals(bPrev, 0.0, small)) {\n+        bPrev = small;\n+    }\n+\n+    double dPrev = 0.0;\n+    double fPrev = hPrev;\n+\n+    double hCurr = hPrev * getA(1, x) + bPrev;\n+    if (Precision.equals(hCurr, 0.0, small)) {\n+        hCurr = small;\n+    }\n+\n+    double bCurr = bPrev * getA(1, x) + getB(1, x);\n+    if (Precision.equals(bCurr, 0.0, small)) {\n+        bCurr = small;\n+    }\n+\n+    int n = 1;\n+\n+    while (n < maxIterations) {\n+        double a = getA(n + 1, x);\n+        double b = getB(n + 1, x);\n+\n+        double dCurr = b + a * dPrev;\n+        double fCurr = hCurr + a * fPrev;\n+\n+        // check for convergence\n+        if (fCurr != 0 && bCurr != 0 && FastMath.abs(hCurr / bCurr - hPrev / bPrev) < epsilon) {\n+            break;\n         }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n-\n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n-            }\n-\n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n-            }\n-\n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n+        // check for zero\n+        if (Precision.equals(dCurr, 0.0, small)) {\n+            dCurr = small;\n+        }\n+\n+        // update state variables\n+        double deltaN = fCurr / dCurr;\n+        hPrev = hCurr;\n+        bPrev = bCurr;\n+        dPrev = dCurr;\n+        fPrev = fCurr;\n+\n+        hCurr = a * hPrev + bPrev;\n+        if (Precision.equals(hCurr, 0.0, small)) {\n+            hCurr = small;\n         }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+        bCurr = a * bPrev + dPrev;\n+        if (Precision.equals(bCurr, 0.0, small)) {\n+            bCurr = small;\n         }\n \n-        return hN;\n+        n++;\n     }\n \n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n+    }\n+\n+    return hCurr / bCurr;\n+}\n+\n }",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}