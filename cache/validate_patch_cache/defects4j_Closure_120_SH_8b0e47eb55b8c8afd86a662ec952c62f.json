{
    "patch": "          // Ignore variables defined in functions; their lifetime is\n          // not easily analyzed.\n          return false;\n        } else if (block.isLoop) {\n          return false;\n        } else if (block.isExit()) {\n          if (block.isUnreachable()) {\n            return false;\n          }\n          JSError lastError = block.getLastChild().getLastChild();\n          if (!lastError.canBeThrown()) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6a212cd5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Ignore variables defined in functions; their lifetime is\n+          // not easily analyzed.\n+          return false;\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.isExit()) {\n+          if (block.isUnreachable()) {\n+            return false;\n+          }\n+          JSError lastError = block.getLastChild().getLastChild();\n+          if (!lastError.canBeThrown()) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}