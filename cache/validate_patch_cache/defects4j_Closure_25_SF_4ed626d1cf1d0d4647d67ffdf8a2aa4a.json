{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n\n    // Visit the arguments of the constructor before the constructor itself so that the arguments are evaluated\n    // in the scope that existed before the constructor was called.\n    // Arguments are evaluated from left to right.\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    // Visit the constructor node.\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    // If the constructor has a type, check if it is a constructor function type.\n    if (constructorType != null && constructorType.isFunctionType()) {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n\n      if (ct.isConstructor()) {\n        // If the constructor type is a constructor function type, set the instance type of the object being created\n        // to be the instance type of the constructor.\n        type = ct.getInstanceType();\n      }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..58fe604c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,36 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n+\n+    // Visit the arguments of the constructor before the constructor itself so that the arguments are evaluated\n+    // in the scope that existed before the constructor was called.\n+    // Arguments are evaluated from left to right.\n+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+      scope = traverse(arg, scope);\n+    }\n+\n+    // Visit the constructor node.\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+\n+    // If the constructor has a type, check if it is a constructor function type.\n+    if (constructorType != null && constructorType.isFunctionType()) {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+\n+      if (ct.isConstructor()) {\n+        // If the constructor type is a constructor function type, set the instance type of the object being created\n+        // to be the instance type of the constructor.\n+        type = ct.getInstanceType();\n       }\n     }\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}