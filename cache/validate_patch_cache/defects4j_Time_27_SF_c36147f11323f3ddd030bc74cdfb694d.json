{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    boolean hasSeparator = false;\n    for (Object obj : elementPairs) {\n        if (obj instanceof Separator) {\n            hasSeparator = true;\n            break;\n        }\n    }\n    if (hasSeparator) {\n        Separator sep = null;\n        List<Object> subList = new ArrayList<Object>();\n        for (Object obj : elementPairs) {\n            if (obj instanceof Separator) {\n                if (sep == null) {\n                    sep = (Separator) obj;\n                }\n            } else {\n                subList.add(obj);\n            }\n        }\n        PeriodFormatter formatter = toFormatter(subList, notPrinter, notParser);\n        return new PeriodFormatter(\n                sep == null ? formatter.getPrinter() : sep.finish(formatter.getPrinter(), null),\n                sep == null ? formatter.getParser() : sep.finish(null, formatter.getParser())\n        );\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..2483bb41 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,35 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    boolean hasSeparator = false;\n+    for (Object obj : elementPairs) {\n+        if (obj instanceof Separator) {\n+            hasSeparator = true;\n+            break;\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+    }\n+    if (hasSeparator) {\n+        Separator sep = null;\n+        List<Object> subList = new ArrayList<Object>();\n+        for (Object obj : elementPairs) {\n+            if (obj instanceof Separator) {\n+                if (sep == null) {\n+                    sep = (Separator) obj;\n+                }\n+            } else {\n+                subList.add(obj);\n+            }\n         }\n+        PeriodFormatter formatter = toFormatter(subList, notPrinter, notParser);\n+        return new PeriodFormatter(\n+                sep == null ? formatter.getPrinter() : sep.finish(formatter.getPrinter(), null),\n+                sep == null ? formatter.getParser() : sep.finish(null, formatter.getParser())\n+        );\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +829,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}