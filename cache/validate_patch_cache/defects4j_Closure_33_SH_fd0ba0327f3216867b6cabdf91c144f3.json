{
    "patch": "        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (isUntyped()) {\n                    defineDeclaredProperty(prop, typeToInfer, null);\n                } else if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                            .getLeastSupertype(propType);\n                    defineInferredProperty(prop, typeToInfer, null);\n                }\n            }\n        }\n        return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..963841da 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,21 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (!isPropertyTypeDeclared(prop)) {\n+                JSType typeToInfer = propType;\n+                if (isUntyped()) {\n+                    defineDeclaredProperty(prop, typeToInfer, null);\n+                } else if (!hasProperty(prop)) {\n+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                            .getLeastSupertype(propType);\n+                    defineInferredProperty(prop, typeToInfer, null);\n+                }\n+            }\n+        }\n+        return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}