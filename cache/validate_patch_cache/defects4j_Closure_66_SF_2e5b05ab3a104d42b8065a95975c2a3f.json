{
    "patch": "public static double getTypedPercent(String javascript) {\n    Context cx = Context.enter();\n    try {\n        Scriptable scope = cx.initStandardObjects();\n        Object result = cx.evaluateString(scope, javascript, \"<cmd>\", 1, null);\n        if (result instanceof Number) {\n            return ((Number) result).doubleValue();\n        } else if (result instanceof Boolean) {\n            return ((Boolean) result) ? 100.0 : 0.0;\n        } else if (result == null || result == Undefined.instance) {\n            return 0.0;\n        } else {\n            return 100.0;\n        }\n    } finally {\n        Context.exit();\n    }\n} ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..192e7094 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String javascript) {\n+    Context cx = Context.enter();\n+    try {\n+        Scriptable scope = cx.initStandardObjects();\n+        Object result = cx.evaluateString(scope, javascript, \"<cmd>\", 1, null);\n+        if (result instanceof Number) {\n+            return ((Number) result).doubleValue();\n+        } else if (result instanceof Boolean) {\n+            return ((Boolean) result) ? 100.0 : 0.0;\n+        } else if (result == null || result == Undefined.instance) {\n+            return 0.0;\n+        } else {\n+            return 100.0;\n+        }\n+    } finally {\n+        Context.exit();\n+    }\n+} \n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}