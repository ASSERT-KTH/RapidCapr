{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double percent = 0.0;\n    ObjectMapper mapper = new ObjectMapper();\n    try {\n        JsonNode rootNode = mapper.readTree(jsonStr);\n        int typedCount = rootNode.path(\"stats\").path(\"typed\").asInt();\n        int totalCount = rootNode.path(\"stats\").path(\"total\").asInt();\n        if (totalCount == 0) {\n            return percent;\n        }\n        percent = ((double) typedCount / (double) totalCount) * 100;\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..cb006a56 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double percent = 0.0;\n+    ObjectMapper mapper = new ObjectMapper();\n+    try {\n+        JsonNode rootNode = mapper.readTree(jsonStr);\n+        int typedCount = rootNode.path(\"stats\").path(\"typed\").asInt();\n+        int totalCount = rootNode.path(\"stats\").path(\"total\").asInt();\n+        if (totalCount == 0) {\n+            return percent;\n+        }\n+        percent = ((double) typedCount / (double) totalCount) * 100;\n+    } catch (JsonProcessingException e) {\n+        e.printStackTrace();\n+    }\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}