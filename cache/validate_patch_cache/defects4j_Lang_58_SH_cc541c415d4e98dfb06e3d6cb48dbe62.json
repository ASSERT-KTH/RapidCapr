{
    "patch": "if (dec == null && exp == null) {\n    // Must be an int, long or big int\n    String numeric = str.trim();\n    if (numeric.isEmpty()) {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    if (numeric.charAt(0) == '-') {\n        if (numeric.length() == 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        if (!isDigits(numeric.substring(1))) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        try {\n            long l = Long.parseLong(numeric);\n            return (l <= Integer.MIN_VALUE || l > Integer.MAX_VALUE) ? createLong(numeric) : createInteger(numeric);\n        } catch (NumberFormatException nfe) {\n            return createBigInteger(numeric);\n        }\n    } else {\n        if (!isDigits(numeric)) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        try {\n            return (numeric.length() <= 9) ? createInteger(numeric) : ((numeric.length() <= 18) ? createLong(numeric) : createBigInteger(numeric));\n        } catch (NumberFormatException nfe) {\n            return createBigInteger(numeric);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..30e525a5 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,37 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (dec == null && exp == null) {\n+    // Must be an int, long or big int\n+    String numeric = str.trim();\n+    if (numeric.isEmpty()) {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    if (numeric.charAt(0) == '-') {\n+        if (numeric.length() == 1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        if (!isDigits(numeric.substring(1))) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        try {\n+            long l = Long.parseLong(numeric);\n+            return (l <= Integer.MIN_VALUE || l > Integer.MAX_VALUE) ? createLong(numeric) : createInteger(numeric);\n+        } catch (NumberFormatException nfe) {\n+            return createBigInteger(numeric);\n+        }\n+    } else {\n+        if (!isDigits(numeric)) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        try {\n+            return (numeric.length() <= 9) ? createInteger(numeric) : ((numeric.length() <= 18) ? createLong(numeric) : createBigInteger(numeric));\n+        } catch (NumberFormatException nfe) {\n+            return createBigInteger(numeric);\n+        }\n+    }\n+}\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}