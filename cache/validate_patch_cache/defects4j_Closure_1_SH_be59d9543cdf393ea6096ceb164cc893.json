{
    "patch": "      // Keep track of the arg list length to correctly update length property of the function.\n      int argListLength = argList.getChildCount();\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          argListLength--;\n        } else {\n          break;\n        }\n      }\n      // Update length property of the function.\n      if (function.isArrowFunction()) {\n        function.putBooleanProp(Node.ARROW_FN_SHORTHAND, false);\n      }\n      function.putIntProp(Node.FUNCTION_LENGTH, argListLength);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..981eeadd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Keep track of the arg list length to correctly update length property of the function.\n+      int argListLength = argList.getChildCount();\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          argListLength--;\n+        } else {\n+          break;\n+        }\n+      }\n+      // Update length property of the function.\n+      if (function.isArrowFunction()) {\n+        function.putBooleanProp(Node.ARROW_FN_SHORTHAND, false);\n+      }\n+      function.putIntProp(Node.FUNCTION_LENGTH, argListLength);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}