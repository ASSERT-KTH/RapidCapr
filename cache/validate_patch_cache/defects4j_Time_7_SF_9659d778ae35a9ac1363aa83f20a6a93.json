{
    "patch": "\n        // Bug fix starts here\n        int parsedYear = bucket.computeParsedDateTime().getYear();\n        int parsedMonth = bucket.computeParsedDateTime().getMonthOfYear();\n        int parsedDayOfMonth = bucket.computeParsedDateTime().getDayOfMonth();\n        \n        if (parsedMonth == DateTimeConstants.FEBRUARY && parsedDayOfMonth == 29) {\n            if (!chrono.year().isLeap(parsedYear)) {\n                // Not a leap year, so adjust default year for the next attempt\n                defaultYear = chrono.year().add(defaultYear, 1);\n                bucket = new DateTimeParserBucket(\n                    instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n                newPos = parser.parseInto(bucket, text, position);\n            }\n        }\n        // Bug fix ends here",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7725d23e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,22 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+\n+        // Bug fix starts here\n+        int parsedYear = bucket.computeParsedDateTime().getYear();\n+        int parsedMonth = bucket.computeParsedDateTime().getMonthOfYear();\n+        int parsedDayOfMonth = bucket.computeParsedDateTime().getDayOfMonth();\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (parsedMonth == DateTimeConstants.FEBRUARY && parsedDayOfMonth == 29) {\n+            if (!chrono.year().isLeap(parsedYear)) {\n+                // Not a leap year, so adjust default year for the next attempt\n+                defaultYear = chrono.year().add(defaultYear, 1);\n+                bucket = new DateTimeParserBucket(\n+                    instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                newPos = parser.parseInto(bucket, text, position);\n+            }\n         }\n-        return newPos;\n-    }\n+        // Bug fix ends here\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}