{
    "patch": "public static Map<String, String> getStringPairs(String[] strings) {\n    Map<String, String> stringPairs = new HashMap<>();\n    for(int i = 0; i < strings.length - 1; i += 2) {\n        stringPairs.put(strings[i], strings[i+1]);\n    }\n    return stringPairs;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..843a90ba7 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,13 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, String> getStringPairs(String[] strings) {\n+    Map<String, String> stringPairs = new HashMap<>();\n+    for(int i = 0; i < strings.length - 1; i += 2) {\n+        stringPairs.put(strings[i], strings[i+1]);\n+    }\n+    return stringPairs;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}