{
    "patch": "        if (block.isFunction()) {\n          // Check if variable is assigned in function params.\n          if (!block.getFirstChild().isFunction()) {\n            for (Node paramNode : block.getFirstChild().children()) {\n              if (paramNode.isName() && paramNode.getString().equals(ref.getName())) {\n                return false;\n              }\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4f19421b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction()) {\n+          // Check if variable is assigned in function params.\n+          if (!block.getFirstChild().isFunction()) {\n+            for (Node paramNode : block.getFirstChild().children()) {\n+              if (paramNode.isName() && paramNode.getString().equals(ref.getName())) {\n+                return false;\n+              }\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}