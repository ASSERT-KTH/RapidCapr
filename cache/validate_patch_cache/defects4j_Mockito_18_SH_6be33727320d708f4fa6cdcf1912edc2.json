{
    "patch": "@Override\npublic ReturnValue execute(TestCase inputs) {\n    String[] values = (String[]) inputs.getVariable(\"values\");\n    if (values == null || values.length == 0) {\n        return new ReturnValue(ReturnValue.Type.NULL, null);\n    }\n    List<Integer> integers = new ArrayList<>();\n    for (String value : values) {\n        try {\n            integers.add(Integer.parseInt(value));\n        } catch (NumberFormatException e) {\n            // skip non-numeric values\n        }\n    }\n    if (integers.isEmpty()) {\n        return new ReturnValue(ReturnValue.Type.NULL, null);\n    }\n    return new ReturnValue(ReturnValue.Type.OBJECT, integers);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}