{
    "patch": "        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n\n          // Check for the special case where an event handler is\n          // called in the form of an expression statement.\n          // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n          if (isEventHandlerExpression(maybeExpr)) {\n            return false;\n          }\n\n          // Check if the node is an expression node and it's not an EXPR_RESULT node\n          Node expr = maybeExpr.getFirstChild();\n          if (expr.getType() == Token.HOOK ||\n              expr.getType() == Token.FUNCTION ||\n              NodeUtil.mayHaveSideEffects(expr)) {\n            return false;\n          } else {\n            return true;\n          }\n        } else {\n          return NodeUtil.isExpressionNode(maybeExpr);\n        }\n      }\n    }\n\n    return false;\n  }\n  \n  private boolean isEventHandlerExpression(Node n) {\n    Node call = n.getFirstChild();\n    Node target = call.getFirstChild();\n\n    if (target.getType() != Token.GETPROP) {\n      return false;\n    }\n\n    Node prop = target.getLastChild();\n\n    return prop.getType() == Token.STRING && prop.getString().startsWith(\"on\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..eeffef9f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,44 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n+        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+          // Check for the special case where an event handler is\n+          // called in the form of an expression statement.\n+          // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n+          if (isEventHandlerExpression(maybeExpr)) {\n+            return false;\n+          }\n \n+          // Check if the node is an expression node and it's not an EXPR_RESULT node\n+          Node expr = maybeExpr.getFirstChild();\n+          if (expr.getType() == Token.HOOK ||\n+              expr.getType() == Token.FUNCTION ||\n+              NodeUtil.mayHaveSideEffects(expr)) {\n+            return false;\n+          } else {\n+            return true;\n+          }\n+        } else {\n           return NodeUtil.isExpressionNode(maybeExpr);\n+        }\n       }\n     }\n \n     return false;\n   }\n+  \n+  private boolean isEventHandlerExpression(Node n) {\n+    Node call = n.getFirstChild();\n+    Node target = call.getFirstChild();\n+\n+    if (target.getType() != Token.GETPROP) {\n+      return false;\n+    }\n+\n+    Node prop = target.getLastChild();\n+\n+    return prop.getType() == Token.STRING && prop.getString().startsWith(\"on\");\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}