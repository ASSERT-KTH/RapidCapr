{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n  List<Node> nodes = Lists.newArrayList();\n\n  Node val = ref.getAssignedValue();\n  if (val == null) return;\n\n  blacklistVarReferencesInTree(val, v.scope);\n\n  if (val.getType() != Token.OBJECTLIT) {\n    val = new Node(Token.OBJECTLIT, val);\n    ref.replaceWith(new Node(Token.ASSIGN, ref.cloneTree(), val));\n    ref = new Reference(val);\n  }\n\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    if (!varmap.containsKey(var)) continue;\n\n    Node value = key.getFirstChild();\n    if (value == null) {\n        value = NodeUtil.newUndefinedNode(null);\n    }\n\n    nodes.add(new Node(Token.ASSIGN,\n      Node.newString(Token.NAME, varmap.get(var)), value));\n\n    // Remove from the varmap so we can fill the remaining properties with undefined.\n    varmap.remove(var);\n  }\n\n  for (String var : varmap.keySet()) {\n    nodes.add(new Node(Token.ASSIGN,\n      Node.newString(Token.NAME, varmap.get(var)),\n      new Node(Token.UNDEFINED)));\n  }\n\n  nodes.add(new Node(Token.TRUE));\n  Node replacement = new Node(Token.COMMA);\n  for (Node node : Lists.reverse(nodes)) {\n    replacement.addChildToFront(node);\n  }\n\n  Node parent = ref.getParent();\n  if (parent.getType() == Token.EXPR_RESULT) {\n    parent.replaceWith(new Node(Token.EXPR_RESULT, replacement));\n  } else if (parent.getType() == Token.VAR) {\n    Node grandparent = parent.getParent();\n    if (grandparent != null) {\n      grandparent.replaceChild(parent, NodeUtil.newExpr(replacement));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..41924e07 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,65 +300,59 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n+private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n+  List<Node> nodes = Lists.newArrayList();\n \n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n+  Node val = ref.getAssignedValue();\n+  if (val == null) return;\n \n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n+  blacklistVarReferencesInTree(val, v.scope);\n+\n+  if (val.getType() != Token.OBJECTLIT) {\n+    val = new Node(Token.OBJECTLIT, val);\n+    ref.replaceWith(new Node(Token.ASSIGN, ref.cloneTree(), val));\n+    ref = new Reference(val);\n+  }\n \n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+    String var = key.getString();\n+    if (!varmap.containsKey(var)) continue;\n \n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n+    Node value = key.getFirstChild();\n+    if (value == null) {\n+        value = NodeUtil.newUndefinedNode(null);\n     }\n \n+    nodes.add(new Node(Token.ASSIGN,\n+      Node.newString(Token.NAME, varmap.get(var)), value));\n+\n+    // Remove from the varmap so we can fill the remaining properties with undefined.\n+    varmap.remove(var);\n+  }\n+\n+  for (String var : varmap.keySet()) {\n+    nodes.add(new Node(Token.ASSIGN,\n+      Node.newString(Token.NAME, varmap.get(var)),\n+      new Node(Token.UNDEFINED)));\n+  }\n+\n+  nodes.add(new Node(Token.TRUE));\n+  Node replacement = new Node(Token.COMMA);\n+  for (Node node : Lists.reverse(nodes)) {\n+    replacement.addChildToFront(node);\n+  }\n+\n+  Node parent = ref.getParent();\n+  if (parent.getType() == Token.EXPR_RESULT) {\n+    parent.replaceWith(new Node(Token.EXPR_RESULT, replacement));\n+  } else if (parent.getType() == Token.VAR) {\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null) {\n+      grandparent.replaceChild(parent, NodeUtil.newExpr(replacement));\n+    }\n+  }\n+}\n+\n     /**\n      * Splits up the object literal into individual variables, and\n      * updates all uses.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}