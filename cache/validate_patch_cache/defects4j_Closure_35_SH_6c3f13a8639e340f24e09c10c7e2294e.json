{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType declaredType = objType.getPropertyType(prop);\n            if (!declaredType.isSubtype(propType)) {\n              warnings.add(JSError.make(\n                  n, TypeValidator.TYPE_MISMATCH_WARNING,\n                  String.format(\n                      \"The type of property %s does not match the type\"\n                          + \" declared by the annotation.\\n\"\n                          + \"Declared: %s\\nInferred: %s\",\n                      prop, declaredType, propType)));\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..ae1351d4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1130,9 +1130,19 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType declaredType = objType.getPropertyType(prop);\n+            if (!declaredType.isSubtype(propType)) {\n+              warnings.add(JSError.make(\n+                  n, TypeValidator.TYPE_MISMATCH_WARNING,\n+                  String.format(\n+                      \"The type of property %s does not match the type\"\n+                          + \" declared by the annotation.\\n\"\n+                          + \"Declared: %s\\nInferred: %s\",\n+                      prop, declaredType, propType)));\n+            }\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}