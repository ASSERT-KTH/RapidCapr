{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    boolean monthChanged = false;\n    int yearChange = 0;\n\n    for (int i = 0; i < partial.size(); i++) {\n        int addedValue = 0;\n        if (i == fieldIndex) {\n            addedValue = valueToAdd;\n        }\n\n        DateTimeField field = partial.getField(i);\n        int currentValue = values[i];\n        int newValue = field.addWrapPartial(partial, i, values, addedValue);\n        if (i == fieldIndex && currentValue != newValue) {\n            monthChanged = true;\n        }\n        // Handle year overflow/underflow caused by a change in month\n        if (i == DateTimeFieldType.monthOfYear().getFieldIndex() && monthChanged) {\n            int currentYear = partial.get(DateTimeFieldType.year());\n            if (newValue < 1) {\n                yearChange = newValue / 12 - 1;\n                newValue = newValue % 12 + 12;\n            } else if (newValue > 12) {\n                yearChange = newValue / 12;\n                newValue = newValue % 12;\n            }\n            if (newValue == 0) {\n                monthChanged = false;\n            }\n            newValue = field.set(partial.getChronology().setYear(currentYear + yearChange), newValue);\n            yearChange = 0;\n        }\n        values[i] = newValue;\n    }\n\n    if (monthChanged) {\n        int dayOfMonth = Math.min(partial.getChronology().dayOfMonth().getMaximumValue(values[0], values[1]),\n                                   partial.get(DateTimeFieldType.dayOfMonth()));\n        values = partial.getChronology().get(partial.with(DateTimeFieldType.dayOfMonth(), dayOfMonth), 0);\n    }\n\n    return values;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..9f9ad10f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    boolean monthChanged = false;\n+    int yearChange = 0;\n+\n+    for (int i = 0; i < partial.size(); i++) {\n+        int addedValue = 0;\n+        if (i == fieldIndex) {\n+            addedValue = valueToAdd;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        DateTimeField field = partial.getField(i);\n+        int currentValue = values[i];\n+        int newValue = field.addWrapPartial(partial, i, values, addedValue);\n+        if (i == fieldIndex && currentValue != newValue) {\n+            monthChanged = true;\n+        }\n+        // Handle year overflow/underflow caused by a change in month\n+        if (i == DateTimeFieldType.monthOfYear().getFieldIndex() && monthChanged) {\n+            int currentYear = partial.get(DateTimeFieldType.year());\n+            if (newValue < 1) {\n+                yearChange = newValue / 12 - 1;\n+                newValue = newValue % 12 + 12;\n+            } else if (newValue > 12) {\n+                yearChange = newValue / 12;\n+                newValue = newValue % 12;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            if (newValue == 0) {\n+                monthChanged = false;\n+            }\n+            newValue = field.set(partial.getChronology().setYear(currentYear + yearChange), newValue);\n+            yearChange = 0;\n         }\n+        values[i] = newValue;\n+    }\n+\n+    if (monthChanged) {\n+        int dayOfMonth = Math.min(partial.getChronology().dayOfMonth().getMaximumValue(values[0], values[1]),\n+                                   partial.get(DateTimeFieldType.dayOfMonth()));\n+        values = partial.getChronology().get(partial.with(DateTimeFieldType.dayOfMonth(), dayOfMonth), 0);\n     }\n \n+    return values;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}