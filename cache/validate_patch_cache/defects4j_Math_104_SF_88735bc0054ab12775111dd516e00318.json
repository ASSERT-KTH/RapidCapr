{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input argument for the algorithm: a=\" + a + \" x=\" + x);\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double a1 = a - 1.0;\n    double lnTerm1 = a1 * Math.log(x) - x - LogGamma.logGamma(a);\n    double lnTerm2 = -x - LogGamma.logGamma(a1);\n    double term1 = Math.exp(lnTerm1);\n    double sum = term1;\n    double term2 = Math.exp(lnTerm2);\n    double delta = term1;\n    int i = 1;\n    while (Math.abs(delta/sum) > PRECISION && i < MAX_ITERATIONS) {\n        delta = term1 * term2 / (a1 + i);\n        sum += delta;\n        i++;\n        term1 *= x / (a1 + i);\n        term2 *= a1 + i - 1;\n    }\n\n    if (i == MAX_ITERATIONS) {\n        throw new ArithmeticException(\"Maximum number of iterations exceeded\");\n    }\n\n    return sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..803cc6b1e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,37 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input argument for the algorithm: a=\" + a + \" x=\" + x);\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double a1 = a - 1.0;\n+    double lnTerm1 = a1 * Math.log(x) - x - LogGamma.logGamma(a);\n+    double lnTerm2 = -x - LogGamma.logGamma(a1);\n+    double term1 = Math.exp(lnTerm1);\n+    double sum = term1;\n+    double term2 = Math.exp(lnTerm2);\n+    double delta = term1;\n+    int i = 1;\n+    while (Math.abs(delta/sum) > PRECISION && i < MAX_ITERATIONS) {\n+        delta = term1 * term2 / (a1 + i);\n+        sum += delta;\n+        i++;\n+        term1 *= x / (a1 + i);\n+        term2 *= a1 + i - 1;\n+    }\n+\n+    if (i == MAX_ITERATIONS) {\n+        throw new ArithmeticException(\"Maximum number of iterations exceeded\");\n+    }\n+\n+    return sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}