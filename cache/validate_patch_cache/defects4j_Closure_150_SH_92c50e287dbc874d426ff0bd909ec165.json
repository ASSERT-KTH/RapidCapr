{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n  case Token.LP:\n    if (parent == scope.getRootNode()) {\n      handleFunctionInputs(n);\n    }\n    break;\n  case Token.FUNCTION:\n    if (parent.getType() == Token.NAME) {\n      return;\n    }\n    Node enclosingFunction = NodeUtil.getEnclosingFunction(n);\n    if (enclosingFunction == scope.getRootNode()) {\n      defineDeclaredFunction(n, parent);\n    }\n    break;\n  case Token.NAME:\n    if (NodeUtil.isFunctionExpression(n)) {\n      enclosingFunction = NodeUtil.getEnclosingFunction(n);\n      if (enclosingFunction == scope.getRootNode()) {\n        defineDeclaredFunction(n, parent);\n      }\n    }\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..dae0da7c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+  case Token.LP:\n+    if (parent == scope.getRootNode()) {\n+      handleFunctionInputs(n);\n+    }\n+    break;\n+  case Token.FUNCTION:\n+    if (parent.getType() == Token.NAME) {\n+      return;\n+    }\n+    Node enclosingFunction = NodeUtil.getEnclosingFunction(n);\n+    if (enclosingFunction == scope.getRootNode()) {\n+      defineDeclaredFunction(n, parent);\n+    }\n+    break;\n+  case Token.NAME:\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      enclosingFunction = NodeUtil.getEnclosingFunction(n);\n+      if (enclosingFunction == scope.getRootNode()) {\n+        defineDeclaredFunction(n, parent);\n       }\n     }\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+}\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}