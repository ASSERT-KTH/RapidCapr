{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Copy the refs before modifying the list.\n      List<Ref> refs = new ArrayList<>(name.getRefs());\n      boolean hasNewAlias = false;\n      for (Ref ref : refs) {\n        if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n          continue;\n        }\n\n        Name aliasName = namespace.getSlot(ref);\n        if (aliasName == null\n            || aliasName.getAliasingGets() != 1\n            || aliasName.getGlobalSets() > 1\n            || aliasName.getLocalSets() > 0\n            || aliasName.isExported()) {\n          continue;\n        }\n\n        // Try to inline the alias.\n        if (inlineAliasIfPossible(ref, aliasName, namespace)) {\n          hasNewAlias = true;\n\n          if (!aliasName.canEliminate()) {\n            // If the alias still has additional references, then re-add it\n            // to the worklist for possible future inlining.\n            workList.add(aliasName);\n          } else {\n            // Remove the aliased name since it is no longer needed.\n            namespace.removeName(aliasName);\n          }\n        }\n      }\n\n      // If any new aliases were created during the previous loop, add the\n      // current name back to the worklist to check for additional aliases.\n      if (hasNewAlias) {\n        workList.add(name);\n        continue;\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n          name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.getRefSet() != null) {\n        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n        workList.addAll(name.getRefSet());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..18da4ada 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,9 +158,8 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+private void inlineAliases(GlobalNamespace namespace) {\n+    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n \n@@ -169,32 +168,52 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+      // Copy the refs before modifying the list.\n+      List<Ref> refs = new ArrayList<>(name.getRefs());\n+      boolean hasNewAlias = false;\n+      for (Ref ref : refs) {\n+        if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n+          continue;\n+        }\n+\n+        Name aliasName = namespace.getSlot(ref);\n+        if (aliasName == null\n+            || aliasName.getAliasingGets() != 1\n+            || aliasName.getGlobalSets() > 1\n+            || aliasName.getLocalSets() > 0\n+            || aliasName.isExported()) {\n+          continue;\n+        }\n+\n+        // Try to inline the alias.\n+        if (inlineAliasIfPossible(ref, aliasName, namespace)) {\n+          hasNewAlias = true;\n+\n+          if (!aliasName.canEliminate()) {\n+            // If the alias still has additional references, then re-add it\n+            // to the worklist for possible future inlining.\n+            workList.add(aliasName);\n+          } else {\n+            // Remove the aliased name since it is no longer needed.\n+            namespace.removeName(aliasName);\n           }\n         }\n       }\n \n+      // If any new aliases were created during the previous loop, add the\n+      // current name back to the worklist to check for additional aliases.\n+      if (hasNewAlias) {\n+        workList.add(name);\n+        continue;\n+      }\n+\n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n       if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n-    }\n-  }\n+          name.type == Name.Type.FUNCTION) &&\n+          name.aliasingGets == 0 && name.getRefSet() != null) {\n+        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n+        workList.addAll(name.getRefSet());\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}