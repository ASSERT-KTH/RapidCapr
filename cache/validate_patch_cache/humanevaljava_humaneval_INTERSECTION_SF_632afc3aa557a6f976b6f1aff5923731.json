{
    "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    int left = Math.max(interval1[0], interval2[0]);\n    int right = Math.min(interval1[1], interval2[1]);\n\n    if (left >= right) {\n        return \"NO\";\n    }\n\n    int length = right - left;\n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\nprivate static boolean isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/INTERSECTION.java b/src/main/java/humaneval/buggy/INTERSECTION.java\nindex 2955ca2..c9ce750 100644\n--- a/src/main/java/humaneval/buggy/INTERSECTION.java\n+++ b/src/main/java/humaneval/buggy/INTERSECTION.java\n@@ -30,11 +30,27 @@ public class INTERSECTION {\n         }\n         return true;\n     }\n-    public static String intersection(int[] interval1, int[] interval2) {\n-        int l = Math.min(interval1[0], interval2[0]);\n-        int r = Math.max(interval1[1], interval2[1]);\n-        int length = r - l;\n-        if(length > 0 && is_prime(length)) return \"YES\";\n+public static String intersection(int[] interval1, int[] interval2) {\n+    int left = Math.max(interval1[0], interval2[0]);\n+    int right = Math.min(interval1[1], interval2[1]);\n+\n+    if (left >= right) {\n+        return \"NO\";\n+    }\n+\n+    int length = right - left;\n+    if (isPrime(length)) {\n+        return \"YES\";\n+    } else {\n         return \"NO\";\n     }\n }\n+\n+private static boolean isPrime(int n) {\n+    if (n < 2) return false;\n+    for (int i = 2; i <= Math.sqrt(n); i++) {\n+        if (n % i == 0) return false;\n+    }\n+    return true;\n+}\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}