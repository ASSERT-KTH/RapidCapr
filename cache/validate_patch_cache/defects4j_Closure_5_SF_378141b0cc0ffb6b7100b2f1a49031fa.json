{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.common.collect.Sets;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport static com.google.javascript.rhino.jstype.JSTypeNative.STRING;\n\n// ...\n\nprivate boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node grandparent = ref.getGrandparent();\n\n    // Ignore most indirect references, like x.y (but not x.y(),\n    // since the function referenced by y might reference 'this').\n    //\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target may be using the object as a 'this' value.\n      if (grandparent != null &&\n          grandparent.isCall() &&\n          grandparent.getFirstChild() == parent) {\n        return false;\n      }\n\n      // Check if the property belongs to an object literal.\n      if (!isPropertyOfObjectLiteral(parent, refs)) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements.\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null || !val.isObjectLit()) {\n      continue;\n    }\n\n    // Check if the value is not self-referential. IOW,\n    // disallow things like x = {b: x.a}.\n    // Also, ES5 getters/setters aren't handled.\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n\n      Node childVal = child.getFirstChild();\n      // Check if childVal is the parent of any of the passed in\n      // references, as that is how self-referential assignments\n      // will happen.\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            // There's a self-referential assignment\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n    // We have found an acceptable object literal assignment.\n    return true;\n  }\n  return false;\n}\n\nprivate boolean isPropertyOfObjectLiteral(Node getPropNode, List<Reference> refs) {\n  if (getPropNode == null || !getPropNode.isGetProp()) {\n    return false;\n  }\n\n  String propName = getPropNode.getLastChild().getString();\n  Node parent = getPropNode.getParent();\n\n  if (parent.isAssign()) {\n    Node rhs = parent.getLastChild();\n    if (rhs.isObjectLit() && rhs.getFirstChild() != null) {\n      for (Node child = rhs.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isString() && propName.equals(child.getString())) {\n          return true;\n        }\n      }\n    }\n  } else if (parent.isExprResult()) {\n    Node nextNode = parent.getNext();\n    if (nextNode != null && nextNode.isObjectLit() && nextNode.getFirstChild() != null) {\n      for (Node child = nextNode.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isString() && propName.equals(child.getString())) {\n          return !isSelfReferential(nextNode, child, refs);\n        }\n      }\n    }\n  }\n\n  // Otherwise, it's not part of an object literal.\n  return false;\n}\n\nprivate boolean isSelfReferential(\n    Node objectLit, Node propNode, List<Reference> refs) {\n  for (Reference ref : refs) {\n    if (!ref.getNode().isString() ||\n        !ref.getNode().getString().equals(propNode.getString()) ||\n        !ref.getScope().isLocal()) {\n      continue;\n    }\n\n    Node n = ref.getParent();\n    while (!NodeUtil.isStatementBlock(n)) {\n      if (n == propNode.getFirstChild()) {\n        return true;\n      }\n      n = n.getParent();\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..6aa0833b 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,105 +152,132 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      Set<String> validProperties = Sets.newHashSet();\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore most indirect references, like x.y (but not x.y(),\n-        // since the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target may be using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Sets;\n \n-          // Deleting a property has different semantics from deleting\n-          // a variable, so deleted properties should not be inlined.\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          String propName = parent.getLastChild().getString();\n-          if (!validProperties.contains(propName)) {\n-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n-              validProperties.add(propName);\n-            } else {\n-              return false;\n-            }\n-          }\n-          continue;\n-        }\n+import java.util.List;\n+import java.util.Set;\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+import static com.google.javascript.rhino.jstype.JSTypeNative.STRING;\n+\n+// ...\n+\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node grandparent = ref.getGrandparent();\n+\n+    // Ignore most indirect references, like x.y (but not x.y(),\n+    // since the function referenced by y might reference 'this').\n+    //\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      // A call target may be using the object as a 'this' value.\n+      if (grandparent != null &&\n+          grandparent.isCall() &&\n+          grandparent.getFirstChild() == parent) {\n+        return false;\n+      }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+      // Check if the property belongs to an object literal.\n+      if (!isPropertyOfObjectLiteral(parent, refs)) {\n+        return false;\n+      }\n+      continue;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    // Only rewrite VAR declarations or simple assignment statements.\n+    if (!isVarOrAssignExprLhs(name)) {\n+      return false;\n+    }\n+\n+    Node val = ref.getAssignedValue();\n+    if (val == null || !val.isObjectLit()) {\n+      continue;\n+    }\n+\n+    // Check if the value is not self-referential. IOW,\n+    // disallow things like x = {b: x.a}.\n+    // Also, ES5 getters/setters aren't handled.\n+    for (Node child = val.getFirstChild(); child != null;\n+         child = child.getNext()) {\n+      if (child.isGetterDef() || child.isSetterDef()) {\n+        return false;\n+      }\n \n-        // Make sure that the value is not self-referential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+      Node childVal = child.getFirstChild();\n+      // Check if childVal is the parent of any of the passed in\n+      // references, as that is how self-referential assignments\n+      // will happen.\n+      for (Reference t : refs) {\n+        Node refNode = t.getParent();\n+        while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n+          if (refNode == childVal) {\n+            // There's a self-referential assignment\n             return false;\n           }\n+          refNode = refNode.getParent();\n+        }\n+      }\n+    }\n+    // We have found an acceptable object literal assignment.\n+    return true;\n+  }\n+  return false;\n+}\n \n-          validProperties.add(child.getString());\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n+private boolean isPropertyOfObjectLiteral(Node getPropNode, List<Reference> refs) {\n+  if (getPropNode == null || !getPropNode.isGetProp()) {\n+    return false;\n+  }\n+\n+  String propName = getPropNode.getLastChild().getString();\n+  Node parent = getPropNode.getParent();\n+\n+  if (parent.isAssign()) {\n+    Node rhs = parent.getLastChild();\n+    if (rhs.isObjectLit() && rhs.getFirstChild() != null) {\n+      for (Node child = rhs.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isString() && propName.equals(child.getString())) {\n+          return true;\n         }\n+      }\n+    }\n+  } else if (parent.isExprResult()) {\n+    Node nextNode = parent.getNext();\n+    if (nextNode != null && nextNode.isObjectLit() && nextNode.getFirstChild() != null) {\n+      for (Node child = nextNode.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isString() && propName.equals(child.getString())) {\n+          return !isSelfReferential(nextNode, child, refs);\n+        }\n+      }\n+    }\n+  }\n \n+  // Otherwise, it's not part of an object literal.\n+  return false;\n+}\n+\n+private boolean isSelfReferential(\n+    Node objectLit, Node propNode, List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    if (!ref.getNode().isString() ||\n+        !ref.getNode().getString().equals(propNode.getString()) ||\n+        !ref.getScope().isLocal()) {\n+      continue;\n+    }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+    Node n = ref.getParent();\n+    while (!NodeUtil.isStatementBlock(n)) {\n+      if (n == propNode.getFirstChild()) {\n+        return true;\n       }\n-      return ret;\n+      n = n.getParent();\n     }\n+  }\n+  return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}