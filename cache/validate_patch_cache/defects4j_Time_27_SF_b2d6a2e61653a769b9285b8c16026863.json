{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        int i = 1;\n        while (i < size && elementPairs.get(i) instanceof Separator) {\n            i++;\n        }\n        if (i >= size) {\n            throw new IllegalArgumentException(\"Separators cannot be adjacent\");\n        }\n        List<Object> prefix = elementPairs.subList(1, i);\n        List<Object> suffix = elementPairs.subList(i, size);\n        PeriodFormatter f = toFormatter(suffix, notPrinter, notParser);\n        Separator sep2 = sep.finish(f.getPrinter(), f.getParser());\n        return toFormatter(prefix, sep2, notPrinter, notParser);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        if (comp[1] == null) {\n            return null;\n        }\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        if (comp[0] == null) {\n            return null;\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}\n\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs, Separator def, boolean notPrinter, boolean notParser) {\n    if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(def, def);\n    }\n    PeriodFormatter f = toFormatter(elementPairs, notPrinter, notParser);\n    return new PeriodFormatter(\n        def == null ? f.getPrinter() : new CompositePrinter(f.getPrinter(), def.getPrinter()),\n        def == null ? f.getParser() : new CompositeParser(f.getParser(), def.getParser())\n    );\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..bfbfdbe5 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,52 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        int i = 1;\n+        while (i < size && elementPairs.get(i) instanceof Separator) {\n+            i++;\n+        }\n+        if (i >= size) {\n+            throw new IllegalArgumentException(\"Separators cannot be adjacent\");\n+        }\n+        List<Object> prefix = elementPairs.subList(1, i);\n+        List<Object> suffix = elementPairs.subList(i, size);\n+        PeriodFormatter f = toFormatter(suffix, notPrinter, notParser);\n+        Separator sep2 = sep.finish(f.getPrinter(), f.getParser());\n+        return toFormatter(prefix, sep2, notPrinter, notParser);\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        if (comp[1] == null) {\n+            return null;\n+        }\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        if (comp[0] == null) {\n+            return null;\n         }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n+}\n+\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, Separator def, boolean notPrinter, boolean notParser) {\n+    if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(def, def);\n+    }\n+    PeriodFormatter f = toFormatter(elementPairs, notPrinter, notParser);\n+    return new PeriodFormatter(\n+        def == null ? f.getPrinter() : new CompositePrinter(f.getPrinter(), def.getPrinter()),\n+        def == null ? f.getParser() : new CompositeParser(f.getParser(), def.getParser())\n+    );\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}