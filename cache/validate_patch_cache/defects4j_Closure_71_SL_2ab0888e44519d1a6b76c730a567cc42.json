{
    "patch": "      boolean isOverride = t.inGlobalScope() && parent != null &&\n          (parent.getType() == Token.ASSIGN ||\n          (parent.isExprResult() && parent.getFirstChild().matchesQualifiedName(getprop))) &&\n          !(parent.getParent().isAssign() &&\n          NodeUtil.isLValue(parent.getParent()) &&\n          parent.getParent().getFirstChild() == parent) &&\n          !(parent.getFirstChild().isGetElem() &&\n          parent.getFirstChild().getSecondChild() == getprop) &&\n          !(parent.getFirstChild().isGetProp() &&\n          parent.getFirstChild().getLastChild().getString().equals(propertyName));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..2da23afb 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,16 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = t.inGlobalScope() && parent != null &&\n+          (parent.getType() == Token.ASSIGN ||\n+          (parent.isExprResult() && parent.getFirstChild().matchesQualifiedName(getprop))) &&\n+          !(parent.getParent().isAssign() &&\n+          NodeUtil.isLValue(parent.getParent()) &&\n+          parent.getParent().getFirstChild() == parent) &&\n+          !(parent.getFirstChild().isGetElem() &&\n+          parent.getFirstChild().getSecondChild() == getprop) &&\n+          !(parent.getFirstChild().isGetProp() &&\n+          parent.getFirstChild().getLastChild().getString().equals(propertyName));\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}