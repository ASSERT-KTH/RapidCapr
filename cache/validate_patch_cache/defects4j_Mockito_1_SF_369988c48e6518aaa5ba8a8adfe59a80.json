{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    int numParams = invocation.getMethod().getParameterCount();\n\n    // If there are too few arguments, assume null for the remaining positional parameters\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            if (position < numParams) {\n                ((CapturesArguments) m).captureFrom(rawArguments[position]);\n            } else {\n                ((CapturesArguments) m).captureFrom(null);\n            }\n        }\n    }\n\n    // Capture any varargs\n    int varargIndex = numParams - 1;\n    if (invocation.getMethod().isVarArgs() && varargIndex >= 0) {\n        Matcher varargMatcher = getMatcherAtPosition(varargIndex);\n        if (varargMatcher instanceof CapturesArguments && varargMatcher instanceof VarargMatcher) {\n            Object varargArray = rawArguments[varargIndex];\n            for (int i = 0; i < Array.getLength(varargArray); i++) {\n                ((CapturesArguments) varargMatcher).captureFrom(Array.get(varargArray, i));\n            }\n        }\n    }\n}\n\nprivate Matcher getMatcherAtPosition(int position) {\n    if (position < 0 || position >= matchers.size()) {\n        return null;\n    }\n    return matchers.get(position);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5a3224e52 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -117,37 +117,41 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n         return invocation.getLocation();\n     }\n \n-    public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+public void captureArgumentsFrom(Invocation invocation) {\n+    Object[] rawArguments = invocation.getRawArguments();\n+    int numParams = invocation.getMethod().getParameterCount();\n+\n+    // If there are too few arguments, assume null for the remaining positional parameters\n+    for (int position = 0; position < matchers.size(); position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            if (position < numParams) {\n+                ((CapturesArguments) m).captureFrom(rawArguments[position]);\n+            } else {\n+                ((CapturesArguments) m).captureFrom(null);\n+            }\n+        }\n+    }\n \n-        } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n-                }\n+    // Capture any varargs\n+    int varargIndex = numParams - 1;\n+    if (invocation.getMethod().isVarArgs() && varargIndex >= 0) {\n+        Matcher varargMatcher = getMatcherAtPosition(varargIndex);\n+        if (varargMatcher instanceof CapturesArguments && varargMatcher instanceof VarargMatcher) {\n+            Object varargArray = rawArguments[varargIndex];\n+            for (int i = 0; i < Array.getLength(varargArray); i++) {\n+                ((CapturesArguments) varargMatcher).captureFrom(Array.get(varargArray, i));\n             }\n         }\n+    }\n+}\n \n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n+private Matcher getMatcherAtPosition(int position) {\n+    if (position < 0 || position >= matchers.size()) {\n+        return null;\n     }\n+    return matchers.get(position);\n+}\n \n     private boolean isVarargMatcher(Matcher matcher) {\n         Matcher actualMatcher = matcher;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}