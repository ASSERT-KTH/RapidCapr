{
    "patch": "        boolean currentStrategyAdded = false;\n        if(currentFormatField != null && currentStrategy != null) {\n            currentStrategyAdded = currentStrategy.addRegex(this, regex);\n        }\n        if(nextStrategy == null || currentFormatField == null) {\n            if (currentStrategyAdded || currentStrategy == null) {\n                collector.add(currentStrategy);\n            } else {\n                nextStrategy.addRegex(this, regex);\n            }\n        }\n        currentFormatField = null;\n        if (!collector.isEmpty()) {\n            strategies = collector.toArray(new Strategy[collector.size()]);\n            parsePattern = Pattern.compile(regex.toString());\n        } else {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..1f8e3958 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,24 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        boolean currentStrategyAdded = false;\n+        if(currentFormatField != null && currentStrategy != null) {\n+            currentStrategyAdded = currentStrategy.addRegex(this, regex);\n+        }\n+        if(nextStrategy == null || currentFormatField == null) {\n+            if (currentStrategyAdded || currentStrategy == null) {\n+                collector.add(currentStrategy);\n+            } else {\n+                nextStrategy.addRegex(this, regex);\n+            }\n+        }\n+        currentFormatField = null;\n+        if (!collector.isEmpty()) {\n+            strategies = collector.toArray(new Strategy[collector.size()]);\n+            parsePattern = Pattern.compile(regex.toString());\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}