{
    "patch": "        final int n = m.getRowDimension();\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix eigenValues = dec.getD();\n        final RealMatrix eigenVectors = dec.getV();\n        final RealMatrix sqrtEigenValues = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            sqrtEigenValues.setEntry(i, i, FastMath.sqrt(eigenValues.getEntry(i, i)));\n        }\n        final RealMatrix t = eigenVectors.multiply(sqrtEigenValues);\n        final RealMatrix tInv = new LUDecomposition(t).getSolver().getInverse();\n        final RealMatrix squareRoot = t.multiply(tInv);\n        return squareRoot;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5c4e50f27 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix eigenValues = dec.getD();\n+        final RealMatrix eigenVectors = dec.getV();\n+        final RealMatrix sqrtEigenValues = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            sqrtEigenValues.setEntry(i, i, FastMath.sqrt(eigenValues.getEntry(i, i)));\n+        }\n+        final RealMatrix t = eigenVectors.multiply(sqrtEigenValues);\n+        final RealMatrix tInv = new LUDecomposition(t).getSolver().getInverse();\n+        final RealMatrix squareRoot = t.multiply(tInv);\n+        return squareRoot;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}