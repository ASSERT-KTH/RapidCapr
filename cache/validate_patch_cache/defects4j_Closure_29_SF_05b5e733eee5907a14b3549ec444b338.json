{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node val = ref.getAssignedValue();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target maybe using the object as a 'this' value.\n      Node gramps = parent.getParent();\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      // We don't inline object properties that aren't\n      // in a simple assignment statement.\n      if (!NodeUtil.isAssignmentOp(gramps)) {\n        continue;\n      }\n      // This assignment could be tolerated, if both the getters/setters and the\n      // object's properties are supported.\n      Node lhs = gramps.getFirstChild();\n      if (lhs.isGetProp()) {\n        Node obj = lhs.getFirstChild();\n        if (!obj.isName()) {\n          // We don't support complex LValues like x().y for now.\n          continue;\n        }\n        ObjectType objType = ObjectType.cast(obj.getJSType());\n        if (objType == null) {\n          continue;\n        }\n        if (objType.hasProperty(lhs.getLastChild().getString())) {\n          continue;\n        }\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      continue;\n    }\n\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      continue;\n    }\n\n    // Make sure that the value is not self-refential. IOW,\n    // disallow things like x = {b: x.a}.\n    for (Node child = val.getFirstChild(); child != null;\n        child = child.getNext()) {\n      if (isSelfReferringProp(child, refs)) {\n        return false;\n      }\n    }\n\n    // We have found an acceptable object literal assignment. As\n    // long as there are no other assignments that mess things up,\n    // we can inline.\n    return true;\n  }\n  return false;\n}\n\nprivate boolean isSelfReferringProp(Node prop, List<Reference> refs) {\n  if (prop.isGetterDef() || prop.isSetterDef()) {\n    // ES5 get/set not supported.\n    return true;\n  }\n  Node val = prop.getFirstChild();\n  for (Reference ref : refs) {\n    if (ref.getNode() == val) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..d9f78081 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,92 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node val = ref.getAssignedValue();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      // A call target maybe using the object as a 'this' value.\n+      Node gramps = parent.getParent();\n+      if (gramps.isCall()\n+          && gramps.getFirstChild() == parent) {\n+        return false;\n+      }\n+      // We don't inline object properties that aren't\n+      // in a simple assignment statement.\n+      if (!NodeUtil.isAssignmentOp(gramps)) {\n+        continue;\n+      }\n+      // This assignment could be tolerated, if both the getters/setters and the\n+      // object's properties are supported.\n+      Node lhs = gramps.getFirstChild();\n+      if (lhs.isGetProp()) {\n+        Node obj = lhs.getFirstChild();\n+        if (!obj.isName()) {\n+          // We don't support complex LValues like x().y for now.\n           continue;\n         }\n-\n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+        ObjectType objType = ObjectType.cast(obj.getJSType());\n+        if (objType == null) {\n+          continue;\n         }\n-\n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n+        if (objType.hasProperty(lhs.getLastChild().getString())) {\n           continue;\n         }\n+      }\n+      continue;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    // Only rewrite VAR declarations or simple assignment statements\n+    if (!isVarOrAssignExprLhs(name)) {\n+      continue;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    if (val == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n+    // We're looking for object literal assignments only.\n+    if (!val.isObjectLit()) {\n+      continue;\n+    }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+    // Make sure that the value is not self-refential. IOW,\n+    // disallow things like x = {b: x.a}.\n+    for (Node child = val.getFirstChild(); child != null;\n+        child = child.getNext()) {\n+      if (isSelfReferringProp(child, refs)) {\n+        return false;\n+      }\n+    }\n \n+    // We have found an acceptable object literal assignment. As\n+    // long as there are no other assignments that mess things up,\n+    // we can inline.\n+    return true;\n+  }\n+  return false;\n+}\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n+private boolean isSelfReferringProp(Node prop, List<Reference> refs) {\n+  if (prop.isGetterDef() || prop.isSetterDef()) {\n+    // ES5 get/set not supported.\n+    return true;\n+  }\n+  Node val = prop.getFirstChild();\n+  for (Reference ref : refs) {\n+    if (ref.getNode() == val) {\n+      return true;\n     }\n+  }\n+  return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}