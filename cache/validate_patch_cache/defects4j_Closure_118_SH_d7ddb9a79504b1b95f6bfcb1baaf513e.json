{
    "patch": "T type = typeSystem.getType(getScope(), n, name);\nif (type != null && type.isUnknownType()) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(\n        t.getSourceName(), child, propertiesToErrorFor.get(name),\n        Warnings.INVALIDATION, name,\n        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n  }\n  return;\n}\nProperty prop = getProperty(name);\nif (!prop.scheduleRenaming(child,\n                           processProperty(t, prop, type, null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(\n        t.getSourceName(), child, propertiesToErrorFor.get(name),\n        Warnings.INVALIDATION, name,\n        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..2437ef70 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,26 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+T type = typeSystem.getType(getScope(), n, name);\n+if (type != null && type.isUnknownType()) {\n+  if (propertiesToErrorFor.containsKey(name)) {\n+    compiler.report(JSError.make(\n+        t.getSourceName(), child, propertiesToErrorFor.get(name),\n+        Warnings.INVALIDATION, name,\n+        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+  }\n+  return;\n+}\n+Property prop = getProperty(name);\n+if (!prop.scheduleRenaming(child,\n+                           processProperty(t, prop, type, null))) {\n+  if (propertiesToErrorFor.containsKey(name)) {\n+    compiler.report(JSError.make(\n+        t.getSourceName(), child, propertiesToErrorFor.get(name),\n+        Warnings.INVALIDATION, name,\n+        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}