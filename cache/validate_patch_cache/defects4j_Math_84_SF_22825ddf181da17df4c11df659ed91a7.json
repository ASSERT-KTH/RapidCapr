{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException {\n        final int n = simplex.length;\n        while (true) {\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            // Perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0d, comparator);\n            if (comparator.compare(reflected, original[0]) < 0) {\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                // Perform an expansion step\n                final RealPointValuePair expanded = evaluateNewSimplex(original, 2.0d, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = expandContractShrink(original, comparator, expanded);\n                }\n            } else {\n                simplex = expandContractShrink(original, comparator, reflected);\n            }\n            if (getNumEvaluations() >= maxEvaluations) {\n                throw new OptimizationException(\"Maximal number of evaluations exceeded: \" + maxEvaluations);\n            }\n            final RealPointValuePair currentBest = simplex[0];\n            final double[] x = currentBest.getPoint();\n            final double fx = currentBest.getValue();\n            final boolean converged = true;\n            for (int i = 0; i < n; ++i) {\n                converged &= (FastMath.abs(simplex[i].getValue() - fx) <= getRelativeThreshold() * FastMath.abs(fx) +\n                        getAbsoluteThreshold());\n                if (!converged) {\n                    break;\n                }\n            }\n            if (converged || checker != null && checker.converged(getIterations(), previous, currentBest)) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..c7c20c6f5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,44 +58,44 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException {\n+        final int n = simplex.length;\n         while (true) {\n-\n-            incrementIterationsCounter();\n-\n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n+            // Perform a reflection step\n+            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0d, comparator);\n+            if (comparator.compare(reflected, original[0]) < 0) {\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                // Perform an expansion step\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, 2.0d, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = expandContractShrink(original, comparator, expanded);\n                 }\n-\n-                return;\n-\n+            } else {\n+                simplex = expandContractShrink(original, comparator, reflected);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            if (getNumEvaluations() >= maxEvaluations) {\n+                throw new OptimizationException(\"Maximal number of evaluations exceeded: \" + maxEvaluations);\n+            }\n+            final RealPointValuePair currentBest = simplex[0];\n+            final double[] x = currentBest.getPoint();\n+            final double fx = currentBest.getValue();\n+            final boolean converged = true;\n+            for (int i = 0; i < n; ++i) {\n+                converged &= (FastMath.abs(simplex[i].getValue() - fx) <= getRelativeThreshold() * FastMath.abs(fx) +\n+                        getAbsoluteThreshold());\n+                if (!converged) {\n+                    break;\n+                }\n+            }\n+            if (converged || checker != null && checker.converged(getIterations(), previous, currentBest)) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}