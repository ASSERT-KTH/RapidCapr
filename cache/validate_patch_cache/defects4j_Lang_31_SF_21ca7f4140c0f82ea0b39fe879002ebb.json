{
    "patch": "public class StringUtils {\n    \n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        for (int i = 0; i < str.length; i++) {\n            if (Character.isHighSurrogate(str[i])) {\n                if (i < str.length - 1 && searchCharsContains(str[i], str[i + 1], searchChars)) {\n                    return true;\n                }\n                i++; //skip next char as it is a low surrogate\n            } else if (searchCharsContains(str[i], searchChars)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean searchCharsContains(final char ch, final char[] searchChars) {\n        for (final char searchChar : searchChars) {\n            if (searchChar == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean searchCharsContains(final char high, final char low, final char[] searchChars) {\n        final int surrogate = Character.toCodePoint(high, low);\n        for (int i = 0; i < searchChars.length; i++) {\n            if (Character.isHighSurrogate(searchChars[i])) {\n                final int nextIndex = i + 1;\n                if (nextIndex < searchChars.length && Character.toCodePoint(searchChars[i], searchChars[nextIndex]) == surrogate) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..bf742664 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,47 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        for (int i = 0; i < str.length; i++) {\n+            if (Character.isHighSurrogate(str[i])) {\n+                if (i < str.length - 1 && searchCharsContains(str[i], str[i + 1], searchChars)) {\n+                    return true;\n+                }\n+                i++; //skip next char as it is a low surrogate\n+            } else if (searchCharsContains(str[i], searchChars)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean searchCharsContains(final char ch, final char[] searchChars) {\n+        for (final char searchChar : searchChars) {\n+            if (searchChar == ch) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean searchCharsContains(final char high, final char low, final char[] searchChars) {\n+        final int surrogate = Character.toCodePoint(high, low);\n+        for (int i = 0; i < searchChars.length; i++) {\n+            if (Character.isHighSurrogate(searchChars[i])) {\n+                final int nextIndex = i + 1;\n+                if (nextIndex < searchChars.length && Character.toCodePoint(searchChars[i], searchChars[nextIndex]) == surrogate) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}