{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    try {\n        long newMillis = savedField.set(millis, resetFields);\n        if (newMillis != millis) {\n            // if the new value is different, check if it is out of range\n            if ((newMillis < Long.MIN_VALUE && millis > Long.MIN_VALUE) || (newMillis > Long.MAX_VALUE && millis < Long.MAX_VALUE)) {\n                throw new IllegalArgumentException(\"Provided date is out of range\");\n            }\n            millis = newMillis;\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..68d2879a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    try {\n+        long newMillis = savedField.set(millis, resetFields);\n+        if (newMillis != millis) {\n+            // if the new value is different, check if it is out of range\n+            if ((newMillis < Long.MIN_VALUE && millis > Long.MIN_VALUE) || (newMillis > Long.MAX_VALUE && millis < Long.MAX_VALUE)) {\n+                throw new IllegalArgumentException(\"Provided date is out of range\");\n+            }\n+            millis = newMillis;\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}