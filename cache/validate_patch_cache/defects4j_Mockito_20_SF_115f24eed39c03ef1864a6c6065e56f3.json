{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        Class<? extends T> typeToMock = (Class<? extends T>) settings.getTypeToMock();\n        Object mockedObject = classInstantiator.instantiate(mockedProxyType);\n        if (!typeToMock.isAssignableFrom(mockedObject.getClass())) {\n            throw new MockitoException(join(\n                    \"Type to mock is not assignable from generated instance\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ));\n        }\n        mockInstance = typeToMock.cast(mockedObject);\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockedObject;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        Class<?> superclass = mockedProxyType.getSuperclass();\n        throw new MockitoException(\"Unable to create mock instance of type '\" + (superclass != null ? superclass.getSimpleName() : mockedProxyType.getSimpleName()) + \"'\", e);\n    }\n    return mockInstance;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..2d1a3dfe9 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,24 +21,21 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    T mockInstance = null;\n+    try {\n+        Class<? extends T> typeToMock = (Class<? extends T>) settings.getTypeToMock();\n+        Object mockedObject = classInstantiator.instantiate(mockedProxyType);\n+        if (!typeToMock.isAssignableFrom(mockedObject.getClass())) {\n             throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n+                    \"Type to mock is not assignable from generated instance\",\n                     \"  class to mock : \" + describeClass(mockedProxyType),\n                     \"  created class : \" + describeClass(settings.getTypeToMock()),\n                     \"  proxy instance class : \" + describeClass(mockInstance),\n@@ -46,11 +43,28 @@ public class ByteBuddyMockMaker implements MockMaker {\n                     \"\",\n                     \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                     \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+            ));\n         }\n+        mockInstance = typeToMock.cast(mockedObject);\n+        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockedObject;\n+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+    } catch (ClassCastException cce) {\n+        throw new MockitoException(join(\n+                \"ClassCastException occurred while creating the mockito mock :\",\n+                \"  class to mock : \" + describeClass(mockedProxyType),\n+                \"  created class : \" + describeClass(settings.getTypeToMock()),\n+                \"  proxy instance class : \" + describeClass(mockInstance),\n+                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+                \"\",\n+                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n+                \"\"\n+        ),cce);\n+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n+        Class<?> superclass = mockedProxyType.getSuperclass();\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + (superclass != null ? superclass.getSimpleName() : mockedProxyType.getSimpleName()) + \"'\", e);\n     }\n+    return mockInstance;\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[inner] strength> but was:<[null] strength>",
    "test_result": "FAIL"
}