{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    \n    // use Cholesky decomposition for small matrices\n    if (n < 500) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n    \n    // use partial pivoting for large matrices\n    final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n    for (int j = 0; j < n; j++) {\n        for (int i = j+1; i < n; i++) {\n            final double s = m.getEntry(i, j) / m.getEntry(j, j);\n            for (int k = j+1; k < n; k++) {\n                m.setEntry(i, k, m.getEntry(i, k) - s*m.getEntry(j, k));\n            }\n            m.setEntry(i, j, s);\n        }\n    }\n    final RealMatrix l = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            l.setEntry(i, j, m.getEntry(i, j));\n        }\n        double sum = 0.0;\n        for (int k = 0; k < i; k++) {\n            sum += l.getEntry(i, k) * l.getEntry(i, k);\n        }\n        l.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i) - sum));\n    }\n    return l;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ea24af510 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    \n+    // use Cholesky decomposition for small matrices\n+    if (n < 500) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n+    \n+    // use partial pivoting for large matrices\n+    final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n+    for (int j = 0; j < n; j++) {\n+        for (int i = j+1; i < n; i++) {\n+            final double s = m.getEntry(i, j) / m.getEntry(j, j);\n+            for (int k = j+1; k < n; k++) {\n+                m.setEntry(i, k, m.getEntry(i, k) - s*m.getEntry(j, k));\n+            }\n+            m.setEntry(i, j, s);\n+        }\n+    }\n+    final RealMatrix l = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < i; j++) {\n+            l.setEntry(i, j, m.getEntry(i, j));\n+        }\n+        double sum = 0.0;\n+        for (int k = 0; k < i; k++) {\n+            sum += l.getEntry(i, k) * l.getEntry(i, k);\n+        }\n+        l.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i) - sum));\n+    }\n+    return l;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}