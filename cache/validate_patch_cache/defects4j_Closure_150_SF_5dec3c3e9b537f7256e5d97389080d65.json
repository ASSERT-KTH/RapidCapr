{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.NAME:\n          if (NodeUtil.isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.FUNCTION:\n          if (parent != null && parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.SCRIPT:\n          if (NodeUtil.isCallTo(n.getFirstChild(), \"goog.provide\")) {\n            handleProvide(n.getFirstChild());\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node expr = n.getFirstChild();\n          if (NodeUtil.isCallTo(expr, \"goog.provide\")) {\n            handleProvide(expr);\n          } else if (NodeUtil.isCallTo(expr, \"goog.require\")) {\n            handleRequire(expr);\n          }\n          break;\n        case Token.CALL:\n          Node callee = n.getFirstChild();\n          if (NodeUtil.isCallTo(callee, \"goog.inherits\")) {\n            handleInherits(n);\n          } else if (NodeUtil.isCallTo(callee, \"goog.module\")) {\n            handleModule(n, t.getInput());\n          } else if (NodeUtil.isCallTo(callee, \"goog.module.declareLegacyNamespace\")) {\n            handleLegacyNamespace(n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..0f91eb0d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1450,18 +1450,48 @@ final class TypedScopeCreator implements ScopeCreator {\n \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n+        case Token.NAME:\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+          break;\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (parent != null && parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.SCRIPT:\n+          if (NodeUtil.isCallTo(n.getFirstChild(), \"goog.provide\")) {\n+            handleProvide(n.getFirstChild());\n+          }\n+          break;\n+        case Token.EXPR_RESULT:\n+          Node expr = n.getFirstChild();\n+          if (NodeUtil.isCallTo(expr, \"goog.provide\")) {\n+            handleProvide(expr);\n+          } else if (NodeUtil.isCallTo(expr, \"goog.require\")) {\n+            handleRequire(expr);\n+          }\n+          break;\n+        case Token.CALL:\n+          Node callee = n.getFirstChild();\n+          if (NodeUtil.isCallTo(callee, \"goog.inherits\")) {\n+            handleInherits(n);\n+          } else if (NodeUtil.isCallTo(callee, \"goog.module\")) {\n+            handleModule(n, t.getInput());\n+          } else if (NodeUtil.isCallTo(callee, \"goog.module.declareLegacyNamespace\")) {\n+            handleLegacyNamespace(n);\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}