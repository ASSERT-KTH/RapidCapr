{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        while (true) {\n            incrementIterationsCounter();\n\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = replaceWorstPoint(original, expanded, comparator);\n                } else {\n                    simplex = replaceWorstPoint(original, reflected, comparator);\n                }\n\n            } else {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = replaceWorstPoint(original, contracted, comparator);\n                } else {\n                    simplex = shrinkSimplex(original, comparator);\n                }\n            }\n\n            final RealPointValuePair currentBest = simplex[0];\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; i++) {\n                converged &= Math.abs(simplex[i].getValue() - currentBest.getValue()) <= getRelativeThreshold() * (Math.abs(simplex[i].getValue()) + getAbsoluteThreshold());\n            }\n\n            if (converged || getIterations() >= getMaxIterations()) {\n                return;\n            }\n        }\n    }\n\n    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] originalSimplex, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n        final RealPointValuePair best = originalSimplex[0];\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[originalSimplex.length];\n\n        for (int i = 1; i < originalSimplex.length; i++) {\n            final double[] x = originalSimplex[i].getPoint();\n            final double[] newX = new double[x.length];\n            for (int j = 0; j < x.length; j++) {\n                newX[j] = beta * x[j] + (1 - beta) * best.getPoint()[j];\n            }\n            final RealPointValuePair point = new RealPointValuePair(newX, computeObjectiveValue(newX));\n            newSimplex[i] = point;\n        }\n        return sortSimplex(newSimplex, comparator);\n    }\n\n    private RealPointValuePair[] replaceWorstPoint(final RealPointValuePair[] originalSimplex, final RealPointValuePair newPoint, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n        final int dim = originalSimplex.length;\n        final RealPointValuePair[] simplex = new RealPointValuePair[dim];\n        int pos = -1;\n        double max = Double.NEGATIVE_INFINITY;\n        for (int i = 0; i < dim; ++i) {\n            final RealPointValuePair vertex = originalSimplex[i];\n            final double evaluation = vertex.getValue();\n            if (evaluation > max) {\n                max = evaluation;\n                pos = i;\n            }\n            simplex[i] = vertex;\n        }\n        if (comparator.compare(newPoint, simplex[pos]) < 0) {\n            simplex[pos] = newPoint;\n        } else {\n            for (int i = 0; i < dim; ++i) {\n                if (i != 0) {\n                    simplex[i] = evaluateNewSimplex(simplex, gamma, i, comparator);\n                }\n            }\n        }\n        return sortSimplex(simplex, comparator);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6de1e2b9c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,88 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n         while (true) {\n-\n             incrementIterationsCounter();\n \n-            // save the original vertex\n             final RealPointValuePair[] original = simplex;\n             final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = replaceWorstPoint(original, expanded, comparator);\n+                } else {\n+                    simplex = replaceWorstPoint(original, reflected, comparator);\n                 }\n \n-                return;\n+            } else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n \n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = replaceWorstPoint(original, contracted, comparator);\n+                } else {\n+                    simplex = shrinkSimplex(original, comparator);\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            final RealPointValuePair currentBest = simplex[0];\n+            boolean converged = true;\n+            for (int i = 0; i < simplex.length; i++) {\n+                converged &= Math.abs(simplex[i].getValue() - currentBest.getValue()) <= getRelativeThreshold() * (Math.abs(simplex[i].getValue()) + getAbsoluteThreshold());\n+            }\n \n-            // check convergence\n+            if (converged || getIterations() >= getMaxIterations()) {\n                 return;\n             }\n-\n         }\n+    }\n+\n+    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] originalSimplex, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n+        final RealPointValuePair best = originalSimplex[0];\n+        final RealPointValuePair[] newSimplex = new RealPointValuePair[originalSimplex.length];\n \n+        for (int i = 1; i < originalSimplex.length; i++) {\n+            final double[] x = originalSimplex[i].getPoint();\n+            final double[] newX = new double[x.length];\n+            for (int j = 0; j < x.length; j++) {\n+                newX[j] = beta * x[j] + (1 - beta) * best.getPoint()[j];\n+            }\n+            final RealPointValuePair point = new RealPointValuePair(newX, computeObjectiveValue(newX));\n+            newSimplex[i] = point;\n+        }\n+        return sortSimplex(newSimplex, comparator);\n     }\n \n+    private RealPointValuePair[] replaceWorstPoint(final RealPointValuePair[] originalSimplex, final RealPointValuePair newPoint, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n+        final int dim = originalSimplex.length;\n+        final RealPointValuePair[] simplex = new RealPointValuePair[dim];\n+        int pos = -1;\n+        double max = Double.NEGATIVE_INFINITY;\n+        for (int i = 0; i < dim; ++i) {\n+            final RealPointValuePair vertex = originalSimplex[i];\n+            final double evaluation = vertex.getValue();\n+            if (evaluation > max) {\n+                max = evaluation;\n+                pos = i;\n+            }\n+            simplex[i] = vertex;\n+        }\n+        if (comparator.compare(newPoint, simplex[pos]) < 0) {\n+            simplex[pos] = newPoint;\n+        } else {\n+            for (int i = 0; i < dim; ++i) {\n+                if (i != 0) {\n+                    simplex[i] = evaluateNewSimplex(simplex, gamma, i, comparator);\n+                }\n+            }\n+        }\n+        return sortSimplex(simplex, comparator);\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}