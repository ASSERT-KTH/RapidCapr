{
    "patch": "private void updateBounds(TimePeriod period, int index) {\n\n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    long middle = start + ((end - start) / 2);\n\n    if (minStartIndex >= 0) {\n        long minStart = getDataItem(minStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start < minStart) {\n            minStartIndex = index;\n        }\n    } \n    else {\n        minStartIndex = index;\n    }\n\n    if (maxStartIndex >= 0) {\n        long maxStart = getDataItem(maxStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start > maxStart) {\n            maxStartIndex = index;\n        }\n    } \n    else {\n        maxStartIndex = index;\n    }\n\n    if (minMiddleIndex >= 0) {\n        TimePeriod minMiddlePeriod = getDataItem(minMiddleIndex).getPeriod();\n        long s = minMiddlePeriod.getStart().getTime();\n        long e = minMiddlePeriod.getEnd().getTime();\n        long minMiddle = s + (e - s) / 2;\n        if (middle < minMiddle) {\n            minMiddleIndex = index;\n        }\n    } \n    else {\n        minMiddleIndex = index;\n    }\n\n    if (maxMiddleIndex >= 0) {\n        TimePeriod maxMiddlePeriod = getDataItem(maxMiddleIndex).getPeriod();\n        long s = maxMiddlePeriod.getStart().getTime();\n        long e = maxMiddlePeriod.getEnd().getTime();\n        long maxMiddle = s + (e - s) / 2;\n        if (middle > maxMiddle) {\n            maxMiddleIndex = index;\n        }\n    } \n    else {\n        maxMiddleIndex = index;\n    }\n\n    if (minEndIndex >= 0) {\n        long minEnd = getDataItem(minEndIndex).getPeriod().getEnd()\n                .getTime();\n        if (end < minEnd) {\n            minEndIndex = index;\n        }\n    } \n    else {\n        minEndIndex = index;\n    }\n\n    if (maxEndIndex >= 0) {\n        long maxEnd = getDataItem(maxEndIndex).getPeriod().getEnd().getTime();\n        if (end > maxEnd) {\n            maxEndIndex = index;\n        }\n    } \n    else {\n        maxEndIndex = index;\n    }\n\n    // Ensure that min and max middle index are not the same\n    if (minMiddleIndex == maxMiddleIndex && getDataItem(minMiddleIndex) != null) {\n        // If we have the same middle index for both, we need to ensure that\n        // it is either the leftmost or the rightmost middle index.\n        long s = getDataItem(minMiddleIndex).getPeriod().getStart().getTime();\n        long e = getDataItem(minMiddleIndex).getPeriod().getEnd().getTime();\n        long middlePoint = s + (e - s) / 2;\n\n        if (middle > middlePoint) {\n            minMiddleIndex = maxMiddleIndex;\n        }\n        else if (middle < middlePoint) {\n            maxMiddleIndex = minMiddleIndex;\n        }\n        else {\n            // If the middle index is exactly in the middle, randomly choose one\n            if (Math.random() < 0.5) {\n                minMiddleIndex = maxMiddleIndex;\n            }\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..925da16 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -254,85 +254,104 @@ public class TimePeriodValues extends Series implements Serializable {\n      * @param period  the time period.\n      * @param index  the index of the time period.\n      */\n-    private void updateBounds(TimePeriod period, int index) {\n-        \n-        long start = period.getStart().getTime();\n-        long end = period.getEnd().getTime();\n-        long middle = start + ((end - start) / 2);\n-\n-        if (this.minStartIndex >= 0) {\n-            long minStart = getDataItem(this.minStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start < minStart) {\n-                this.minStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minStartIndex = index;\n-        }\n-        \n-        if (this.maxStartIndex >= 0) {\n-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start > maxStart) {\n-                this.maxStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxStartIndex = index;\n-        }\n-        \n-        if (this.minMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long minMiddle = s + (e - s) / 2;\n-            if (middle < minMiddle) {\n-                this.minMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minMiddleIndex = index;\n-        }\n-        \n-        if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long maxMiddle = s + (e - s) / 2;\n-            if (middle > maxMiddle) {\n-                this.maxMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxMiddleIndex = index;\n-        }\n-        \n-        if (this.minEndIndex >= 0) {\n-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end < minEnd) {\n-                this.minEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minEndIndex = index;\n-        }\n-       \n-        if (this.maxEndIndex >= 0) {\n-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end > maxEnd) {\n-                this.maxEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxEndIndex = index;\n-        }\n-        \n-    }\n+private void updateBounds(TimePeriod period, int index) {\n+\n+    long start = period.getStart().getTime();\n+    long end = period.getEnd().getTime();\n+    long middle = start + ((end - start) / 2);\n+\n+    if (minStartIndex >= 0) {\n+        long minStart = getDataItem(minStartIndex).getPeriod()\n+            .getStart().getTime();\n+        if (start < minStart) {\n+            minStartIndex = index;\n+        }\n+    } \n+    else {\n+        minStartIndex = index;\n+    }\n+\n+    if (maxStartIndex >= 0) {\n+        long maxStart = getDataItem(maxStartIndex).getPeriod()\n+            .getStart().getTime();\n+        if (start > maxStart) {\n+            maxStartIndex = index;\n+        }\n+    } \n+    else {\n+        maxStartIndex = index;\n+    }\n+\n+    if (minMiddleIndex >= 0) {\n+        TimePeriod minMiddlePeriod = getDataItem(minMiddleIndex).getPeriod();\n+        long s = minMiddlePeriod.getStart().getTime();\n+        long e = minMiddlePeriod.getEnd().getTime();\n+        long minMiddle = s + (e - s) / 2;\n+        if (middle < minMiddle) {\n+            minMiddleIndex = index;\n+        }\n+    } \n+    else {\n+        minMiddleIndex = index;\n+    }\n+\n+    if (maxMiddleIndex >= 0) {\n+        TimePeriod maxMiddlePeriod = getDataItem(maxMiddleIndex).getPeriod();\n+        long s = maxMiddlePeriod.getStart().getTime();\n+        long e = maxMiddlePeriod.getEnd().getTime();\n+        long maxMiddle = s + (e - s) / 2;\n+        if (middle > maxMiddle) {\n+            maxMiddleIndex = index;\n+        }\n+    } \n+    else {\n+        maxMiddleIndex = index;\n+    }\n+\n+    if (minEndIndex >= 0) {\n+        long minEnd = getDataItem(minEndIndex).getPeriod().getEnd()\n+                .getTime();\n+        if (end < minEnd) {\n+            minEndIndex = index;\n+        }\n+    } \n+    else {\n+        minEndIndex = index;\n+    }\n+\n+    if (maxEndIndex >= 0) {\n+        long maxEnd = getDataItem(maxEndIndex).getPeriod().getEnd().getTime();\n+        if (end > maxEnd) {\n+            maxEndIndex = index;\n+        }\n+    } \n+    else {\n+        maxEndIndex = index;\n+    }\n+\n+    // Ensure that min and max middle index are not the same\n+    if (minMiddleIndex == maxMiddleIndex && getDataItem(minMiddleIndex) != null) {\n+        // If we have the same middle index for both, we need to ensure that\n+        // it is either the leftmost or the rightmost middle index.\n+        long s = getDataItem(minMiddleIndex).getPeriod().getStart().getTime();\n+        long e = getDataItem(minMiddleIndex).getPeriod().getEnd().getTime();\n+        long middlePoint = s + (e - s) / 2;\n+\n+        if (middle > middlePoint) {\n+            minMiddleIndex = maxMiddleIndex;\n+        }\n+        else if (middle < middlePoint) {\n+            maxMiddleIndex = minMiddleIndex;\n+        }\n+        else {\n+            // If the middle index is exactly in the middle, randomly choose one\n+            if (Math.random() < 0.5) {\n+                minMiddleIndex = maxMiddleIndex;\n+            }\n+        }\n+    }\n+\n+}\n     \n     /**\n      * Recalculates the bounds for the collection of items.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}