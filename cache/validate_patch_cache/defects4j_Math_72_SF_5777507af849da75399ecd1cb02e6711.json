{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    double a = min;\n    double b = initial;\n    double c = max;\n    double fa = yMin;\n    double fb = yInitial;\n    double fc = yMax;\n\n    double prevD = 0.0;\n    double d = 0.0;\n    double e = 0.0;\n\n    for (int iter = 0; iter < maximalIterationCount; iter++) {\n\n        if (Math.abs(fc) < Math.abs(fb)) {\n            a = b;\n            b = c;\n            c = a;\n            fa = fb;\n            fb = fc;\n            fc = fa;\n        }\n\n        double tol = 2 * relativeAccuracy * Math.abs(b) + absoluteAccuracy;\n        double m = 0.5 * (c - b);\n\n        if (Math.abs(m) <= tol || Math.abs(fb) < functionValueAccuracy) {\n            setResult(b, iter);\n            return result;\n        }\n\n        if (Math.abs(prevD) >= tol && Math.abs(fa) > Math.abs(fb)) {\n\n            double p, q, r;\n            double s = fb / fa;\n\n            if (a == c) {\n                p = 2 * m * s;\n                q = 1 - s;\n            } else {\n                q = fa / fc;\n                r = fb / fc;\n                p = s * (2 * m * q * (q - r) - (b - a) * (r - 1));\n                q = (q - 1) * (r - 1) * (s - 1);\n            }\n\n            if (p > 0) {\n                q = -q;\n            }\n\n            p = Math.abs(p);\n            double min1 = 3 * m * q - Math.abs(tol * q);\n            double min2 = Math.abs(prevD * q);\n\n            if (2 * p < Math.min(min1, min2)) {\n                prevD = d;\n                d = p / q;\n            } else {\n                d = m;\n                prevD = d;\n            }\n\n        } else {\n            d = m;\n            prevD = d;\n        }\n\n        a = b;\n        fa = fb;\n\n        if (Math.abs(d) > tol) {\n            b += d;\n        } else {\n            b += m > 0 ? tol : -tol;\n        }\n\n        fb = f.value(b);\n\n        if ((fb > 0 && fc > 0) || (fb <= 0 && fc <= 0)) {\n            c = a;\n            fc = fa;\n            d = b - a;\n            e = d;\n        } else {\n            d = b - c;\n\n            if (Math.abs(d) > tol) {\n                e = d;\n            } else {\n                e = m;\n                d = e;\n            }\n\n            a = c;\n            fa = fc;\n            c = b;\n            fc = fb;\n        }\n    }\n\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..265ab4e1a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,54 +95,134 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n+\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n+\n+    double a = min;\n+    double b = initial;\n+    double c = max;\n+    double fa = yMin;\n+    double fb = yInitial;\n+    double fc = yMax;\n+\n+    double prevD = 0.0;\n+    double d = 0.0;\n+    double e = 0.0;\n+\n+    for (int iter = 0; iter < maximalIterationCount; iter++) {\n+\n+        if (Math.abs(fc) < Math.abs(fb)) {\n+            a = b;\n+            b = c;\n+            c = a;\n+            fa = fb;\n+            fb = fc;\n+            fc = fa;\n         }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+        double tol = 2 * relativeAccuracy * Math.abs(b) + absoluteAccuracy;\n+        double m = 0.5 * (c - b);\n+\n+        if (Math.abs(m) <= tol || Math.abs(fb) < functionValueAccuracy) {\n+            setResult(b, iter);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        if (Math.abs(prevD) >= tol && Math.abs(fa) > Math.abs(fb)) {\n+\n+            double p, q, r;\n+            double s = fb / fa;\n+\n+            if (a == c) {\n+                p = 2 * m * s;\n+                q = 1 - s;\n+            } else {\n+                q = fa / fc;\n+                r = fb / fc;\n+                p = s * (2 * m * q * (q - r) - (b - a) * (r - 1));\n+                q = (q - 1) * (r - 1) * (s - 1);\n+            }\n+\n+            if (p > 0) {\n+                q = -q;\n+            }\n+\n+            p = Math.abs(p);\n+            double min1 = 3 * m * q - Math.abs(tol * q);\n+            double min2 = Math.abs(prevD * q);\n+\n+            if (2 * p < Math.min(min1, min2)) {\n+                prevD = d;\n+                d = p / q;\n+            } else {\n+                d = m;\n+                prevD = d;\n+            }\n+\n+        } else {\n+            d = m;\n+            prevD = d;\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        a = b;\n+        fa = fb;\n+\n+        if (Math.abs(d) > tol) {\n+            b += d;\n+        } else {\n+            b += m > 0 ? tol : -tol;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        fb = f.value(b);\n+\n+        if ((fb > 0 && fc > 0) || (fb <= 0 && fc <= 0)) {\n+            c = a;\n+            fc = fa;\n+            d = b - a;\n+            e = d;\n+        } else {\n+            d = b - c;\n \n+            if (Math.abs(d) > tol) {\n+                e = d;\n+            } else {\n+                e = m;\n+                d = e;\n+            }\n+\n+            a = c;\n+            fa = fc;\n+            c = b;\n+            fc = fb;\n+        }\n     }\n \n+    throw new MaxIterationsExceededException(maximalIterationCount);\n+}\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "junit.framework.AssertionFailedError: Expecting IllegalArgumentException - non-bracketing",
    "test_result": "FAIL"
}