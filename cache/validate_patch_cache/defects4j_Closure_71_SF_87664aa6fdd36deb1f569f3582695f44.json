{
    "patch": "    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      Node owner = getprop.getFirstChild();\n      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(owner);\n      Visibility visibility = docInfo != null ? docInfo.getVisibility() : Visibility.INHERITED;\n\n      if (visibility == Visibility.PRIVATE) {\n        // Is this a normal property access, or are we trying to override an existing property?\n        boolean isOverride = t.inGlobalScope() &&\n            parent.getType() == Token.ASSIGN &&\n            parent.getFirstChild() == getprop;\n\n        if (isOverride) {\n          // If this is an override, drill all the way down to the property that's being overridden,\n          // and check its visibility.\n          Node target = getprop.getFirstChild();\n          while (target.getType() == Token.GETPROP) {\n            target = target.getFirstChild();\n            objectType = ObjectType.cast(dereference(target.getJSType()));\n            if (objectType == null) {\n              return;  // We don't have a valid object type for this property.\n            }\n          }\n          propertyName = target.getString();\n        }\n\n        ObjectType ownerType = ObjectType.cast(dereference(owner.getJSType()));\n        if (!isValidPrivateAccess(ownerType, objectType, propertyName, docInfo, t.getInput(), isOverride)) {\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName,\n                  validator.getReadableJSTypeName(owner, true)));\n        }\n      }\n    }\n  }\n\n  /**\n   * Determines whether it is valid to access a private property based on the property's visibility,\n   * the accessing object, the object owning the private property, and the name of the property being accessed.\n   *\n   * @return true if the access is valid, false if it is not.\n   */\n  private boolean isValidPrivateAccess(\n      ObjectType ownerType,\n      ObjectType accessingObjectType,\n      String propertyName,\n      JSDocInfo docInfo,\n      InputId inputId,\n      boolean isOverride) {\n\n    // Check if the accessing type is the same as the owner type.\n    if (ownerType.equals(accessingObjectType)) {\n      return true;\n    }\n\n    // Check if the accessing type is the constructor for the owner type.\n    ObjectType potentialOwnerType = accessingObjectType.getImplicitPrototype();\n    while (potentialOwnerType != null) {\n      if (potentialOwnerType.equals(ownerType)) {\n        if (docInfo.isConstructor()) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      potentialOwnerType = potentialOwnerType.getImplicitPrototype();\n    }\n\n    // Check if the accessing file is the same as the owner file.\n    if (inputId.equals(docInfo.getInputId())) {\n      return true;\n    }\n\n    // Check if the owner type is visible to the accessing type.\n    boolean isProtected = docInfo.getVisibility() == Visibility.PROTECTED;\n    JSDocInfo.Visibility childVisibility = isProtected ? Visibility.INHERITED : docInfo.getVisibility();\n    if (isOverride) {\n      return isPropertyOverrideAllowed(\n          ownerType, propertyName, docInfo.getSourceFileName(), childVisibility);\n    } else {\n      return isPropertyAccessAllowed(\n          ownerType, potentialOwnerType, childVisibility, isProtected);\n    }\n  }\n\n  /**\n   * Determines whether it is valid to access a private property based on the property's visibility,\n   * the object owning the private property, and the potential object accessing the private property.\n   *\n   * @return true if the access is valid, false if it is not.\n   */\n  private boolean isPropertyAccessAllowed(\n      ObjectType ownerType,\n      ObjectType potentialAccessingObjectType,\n      JSDocInfo.Visibility ownerVisibility,\n      boolean isProtected) {\n\n    if (ownerVisibility == Visibility.PRIVATE) {\n      return false;\n    }\n\n    // Check if the owner type is visible to the accessing type.\n    ObjectType currentObjectType = potentialAccessingObjectType;\n    while (currentObjectType != null) {\n      if (currentObjectType.equals(ownerType)) {\n        return true;\n      }\n      currentObjectType = currentObjectType.getImplicitPrototype();\n    }\n\n    // Check if the accessing type is a subclass of the owner type.\n    if (!isProtected) {\n      currentObjectType = potentialAccessingObjectType.getImplicitPrototype();\n      while (currentObjectType != null) {\n        if (ownerType.isSubtype(currentObjectType)) {\n          return true;\n        }\n        currentObjectType = currentObjectType.getImplicitPrototype();\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Determines whether it is valid to override a private property based on the property's visibility,\n   * the object owning the private property, and the name of the property being accessed.\n   *\n   * @return true if the override is valid, false if it is not.\n   */\n  private boolean isPropertyOverrideAllowed(\n      ObjectType ownerType,\n      String propertyName,\n      String ownerFileName,\n      JSDocInfo.Visibility ownerVisibility) {\n\n    if (ownerFileName == null || !compiler.getInput(ownerFileName).isExtern()) {\n      if (ownerVisibility == Visibility.PRIVATE) {\n        JSDocInfo thisDocInfo = ownerType.getOwnPropertyJSDocInfo(propertyName);\n        while (thisDocInfo != null) {\n          if (thisDocInfo.getVisibility() != Visibility.INHERITED) {\n            return false;\n          }\n          ownerType = ownerType.getImplicitPrototype();\n          thisDocInfo = ownerType.getOwnPropertyJSDocInfo(propertyName);\n        }\n      }\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..97b50763 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,100 +404,157 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n     if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n+      Node owner = getprop.getFirstChild();\n+      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(owner);\n+      Visibility visibility = docInfo != null ? docInfo.getVisibility() : Visibility.INHERITED;\n+\n+      if (visibility == Visibility.PRIVATE) {\n+        // Is this a normal property access, or are we trying to override an existing property?\n+        boolean isOverride = t.inGlobalScope() &&\n+            parent.getType() == Token.ASSIGN &&\n+            parent.getFirstChild() == getprop;\n+\n+        if (isOverride) {\n+          // If this is an override, drill all the way down to the property that's being overridden,\n+          // and check its visibility.\n+          Node target = getprop.getFirstChild();\n+          while (target.getType() == Token.GETPROP) {\n+            target = target.getFirstChild();\n+            objectType = ObjectType.cast(dereference(target.getJSType()));\n+            if (objectType == null) {\n+              return;  // We don't have a valid object type for this property.\n+            }\n+          }\n+          propertyName = target.getString();\n+        }\n+\n+        ObjectType ownerType = ObjectType.cast(dereference(owner.getJSType()));\n+        if (!isValidPrivateAccess(ownerType, objectType, propertyName, docInfo, t.getInput(), isOverride)) {\n+          compiler.report(\n+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName,\n+                  validator.getReadableJSTypeName(owner, true)));\n+        }\n       }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n+    }\n+  }\n+\n+  /**\n+   * Determines whether it is valid to access a private property based on the property's visibility,\n+   * the accessing object, the object owning the private property, and the name of the property being accessed.\n+   *\n+   * @return true if the access is valid, false if it is not.\n+   */\n+  private boolean isValidPrivateAccess(\n+      ObjectType ownerType,\n+      ObjectType accessingObjectType,\n+      String propertyName,\n+      JSDocInfo docInfo,\n+      InputId inputId,\n+      boolean isOverride) {\n+\n+    // Check if the accessing type is the same as the owner type.\n+    if (ownerType.equals(accessingObjectType)) {\n+      return true;\n+    }\n+\n+    // Check if the accessing type is the constructor for the owner type.\n+    ObjectType potentialOwnerType = accessingObjectType.getImplicitPrototype();\n+    while (potentialOwnerType != null) {\n+      if (potentialOwnerType.equals(ownerType)) {\n+        if (docInfo.isConstructor()) {\n+          return true;\n+        } else {\n+          return false;\n         }\n       }\n+      potentialOwnerType = potentialOwnerType.getImplicitPrototype();\n+    }\n+\n+    // Check if the accessing file is the same as the owner file.\n+    if (inputId.equals(docInfo.getInputId())) {\n+      return true;\n+    }\n+\n+    // Check if the owner type is visible to the accessing type.\n+    boolean isProtected = docInfo.getVisibility() == Visibility.PROTECTED;\n+    JSDocInfo.Visibility childVisibility = isProtected ? Visibility.INHERITED : docInfo.getVisibility();\n+    if (isOverride) {\n+      return isPropertyOverrideAllowed(\n+          ownerType, propertyName, docInfo.getSourceFileName(), childVisibility);\n+    } else {\n+      return isPropertyAccessAllowed(\n+          ownerType, potentialOwnerType, childVisibility, isProtected);\n+    }\n+  }\n+\n+  /**\n+   * Determines whether it is valid to access a private property based on the property's visibility,\n+   * the object owning the private property, and the potential object accessing the private property.\n+   *\n+   * @return true if the access is valid, false if it is not.\n+   */\n+  private boolean isPropertyAccessAllowed(\n+      ObjectType ownerType,\n+      ObjectType potentialAccessingObjectType,\n+      JSDocInfo.Visibility ownerVisibility,\n+      boolean isProtected) {\n+\n+    if (ownerVisibility == Visibility.PRIVATE) {\n+      return false;\n+    }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n-        return;\n+    // Check if the owner type is visible to the accessing type.\n+    ObjectType currentObjectType = potentialAccessingObjectType;\n+    while (currentObjectType != null) {\n+      if (currentObjectType.equals(ownerType)) {\n+        return true;\n       }\n+      currentObjectType = currentObjectType.getImplicitPrototype();\n+    }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+    // Check if the accessing type is a subclass of the owner type.\n+    if (!isProtected) {\n+      currentObjectType = potentialAccessingObjectType.getImplicitPrototype();\n+      while (currentObjectType != null) {\n+        if (ownerType.isSubtype(currentObjectType)) {\n+          return true;\n         }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n-          }\n+        currentObjectType = currentObjectType.getImplicitPrototype();\n+      }\n+    }\n \n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+    return false;\n+  }\n+\n+  /**\n+   * Determines whether it is valid to override a private property based on the property's visibility,\n+   * the object owning the private property, and the name of the property being accessed.\n+   *\n+   * @return true if the override is valid, false if it is not.\n+   */\n+  private boolean isPropertyOverrideAllowed(\n+      ObjectType ownerType,\n+      String propertyName,\n+      String ownerFileName,\n+      JSDocInfo.Visibility ownerVisibility) {\n+\n+    if (ownerFileName == null || !compiler.getInput(ownerFileName).isExtern()) {\n+      if (ownerVisibility == Visibility.PRIVATE) {\n+        JSDocInfo thisDocInfo = ownerType.getOwnPropertyJSDocInfo(propertyName);\n+        while (thisDocInfo != null) {\n+          if (thisDocInfo.getVisibility() != Visibility.INHERITED) {\n+            return false;\n           }\n+          ownerType = ownerType.getImplicitPrototype();\n+          thisDocInfo = ownerType.getOwnPropertyJSDocInfo(propertyName);\n         }\n       }\n     }\n-  }\n+    return true;\n \n   /**\n    * Whether the given access of a private constructor is legal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}