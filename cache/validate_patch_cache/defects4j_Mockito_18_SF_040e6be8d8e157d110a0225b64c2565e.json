{
    "patch": "public Object run(UserProgram userProgram) {\n    Object returnValue = null;\n    try {\n        returnValue = userProgram.run();\n    } catch (Exception e) {\n        // Handle exception\n    }\n    if (returnValue == null || (!(returnValue instanceof Iterable) &&\n            !(returnValue instanceof Iterator))) {\n        return Collections.emptyIterator();\n    }\n    if (returnValue instanceof Iterable) {\n        return ((Iterable) returnValue).iterator();\n    }\n    return (Iterator) returnValue;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..957163344 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Object run(UserProgram userProgram) {\n+    Object returnValue = null;\n+    try {\n+        returnValue = userProgram.run();\n+    } catch (Exception e) {\n+        // Handle exception\n+    }\n+    if (returnValue == null || (!(returnValue instanceof Iterable) &&\n+            !(returnValue instanceof Iterator))) {\n+        return Collections.emptyIterator();\n+    }\n+    if (returnValue instanceof Iterable) {\n+        return ((Iterable) returnValue).iterator();\n+    }\n+    return (Iterator) returnValue;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}