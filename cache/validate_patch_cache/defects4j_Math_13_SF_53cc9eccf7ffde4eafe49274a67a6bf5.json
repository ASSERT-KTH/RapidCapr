{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n    final RealMatrix sqrtM = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    final RealMatrix choleskyL = cholesky.getL();\n    final RealMatrix choleskyLT = choleskyL.transpose();\n    final SingularValueDecomposition svd = new SingularValueDecomposition(\n            choleskyL.multiply(choleskyLT).add(identity.scalarMultiply(1e-10)));\n    final RealMatrix u = svd.getU();\n    final RealMatrix s = svd.getS();\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        s.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n    }\n    final RealMatrix sqrtS = u.multiply(s).multiply(u.transpose());\n    return sqrtM.copy().multiply(sqrtS);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fde5f73b0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+    final RealMatrix sqrtM = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    final RealMatrix choleskyL = cholesky.getL();\n+    final RealMatrix choleskyLT = choleskyL.transpose();\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(\n+            choleskyL.multiply(choleskyLT).add(identity.scalarMultiply(1e-10)));\n+    final RealMatrix u = svd.getU();\n+    final RealMatrix s = svd.getS();\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        s.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n     }\n+    final RealMatrix sqrtS = u.multiply(s).multiply(u.transpose());\n+    return sqrtM.copy().multiply(sqrtS);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}