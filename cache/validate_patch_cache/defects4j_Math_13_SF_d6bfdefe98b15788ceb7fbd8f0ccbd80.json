{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix D = dec.getD();\n    RealMatrix V = dec.getV();\n\n    /* Compute the square root of the eigenvalues */\n    int n = m.getColumnDimension();\n    for (int i = 0; i < n; i++) {\n        double sqrt = FastMath.sqrt(D.getEntry(i, i));\n        D.setEntry(i, i, sqrt);\n    }\n\n    /* Compute the matrix exponential of D/2 */\n    RealMatrix expD = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        double exp = FastMath.exp(D.getEntry(i, i) / 2.0);\n        expD.setEntry(i, i, exp);\n    }\n\n    /* Compute the square root of the matrix: V * exp(D/2) * V^T */\n    RealMatrix sqrtM = V.multiply(expD).multiply(V.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..edd371366 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix D = dec.getD();\n+    RealMatrix V = dec.getV();\n+\n+    /* Compute the square root of the eigenvalues */\n+    int n = m.getColumnDimension();\n+    for (int i = 0; i < n; i++) {\n+        double sqrt = FastMath.sqrt(D.getEntry(i, i));\n+        D.setEntry(i, i, sqrt);\n     }\n+\n+    /* Compute the matrix exponential of D/2 */\n+    RealMatrix expD = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        double exp = FastMath.exp(D.getEntry(i, i) / 2.0);\n+        expD.setEntry(i, i, exp);\n+    }\n+\n+    /* Compute the square root of the matrix: V * exp(D/2) * V^T */\n+    RealMatrix sqrtM = V.multiply(expD).multiply(V.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}