{
    "patch": "if (cfa != null) {\n  List<Node> finallyNodes = cfa.finallyMap.get(parent);\n  if (finallyNodes != null && finallyNodes.contains(finallyNode)) {\n    Node targetNode = finallyNode.getNext();\n    while (targetNode != null && targetNode.isFunction()) {\n      targetNode = targetNode.getNext();\n    }\n    if (targetNode == null) {\n      targetNode = computeFollowNode(fromNode, finallyNode, cfa);\n    }\n    if (targetNode != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, targetNode);\n    }\n  }\n  else {\n    Node follow = computeFollowNode(fromNode, parent, cfa);\n    if (follow != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, follow);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..46df9a1c 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,27 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  List<Node> finallyNodes = cfa.finallyMap.get(parent);\n+  if (finallyNodes != null && finallyNodes.contains(finallyNode)) {\n+    Node targetNode = finallyNode.getNext();\n+    while (targetNode != null && targetNode.isFunction()) {\n+      targetNode = targetNode.getNext();\n+    }\n+    if (targetNode == null) {\n+      targetNode = computeFollowNode(fromNode, finallyNode, cfa);\n+    }\n+    if (targetNode != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, targetNode);\n+    }\n+  }\n+  else {\n+    Node follow = computeFollowNode(fromNode, parent, cfa);\n+    if (follow != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, follow);\n+    }\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}