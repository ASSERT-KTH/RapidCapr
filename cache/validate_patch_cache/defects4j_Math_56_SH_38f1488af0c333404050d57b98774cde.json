{
    "patch": "        int idx = 1;\n        count += uniCounterOffset[last];\n        while (count <= index) {\n            count += idx + uniCounterOffset[last - idx];\n            ++idx;\n        }\n        --idx;\n        count -= idx + uniCounterOffset[last - idx];\n        for (int i = 0; i < last; ++i) {\n            indices[i] = count % uniCounterOffset[i];\n            count /= uniCounterOffset[i];\n        }\n        indices[last] = idx;\n        for (int i = last - 1; i >= 0; --i) {\n            final int idx_i = indices[i];\n            for (int j = i + 1; j <= last; ++j) {\n                final int offset_j = uniCounterOffset[last - j];\n                indices[i] -= idx_i / offset_j * offset_j;\n                idx_i %= offset_j;\n                if (j <= i + idx_i + 1) {\n                    indices[i]++;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..9bab99cbe 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,29 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n-            count += idx;\n+        count += uniCounterOffset[last];\n+        while (count <= index) {\n+            count += idx + uniCounterOffset[last - idx];\n             ++idx;\n         }\n         --idx;\n+        count -= idx + uniCounterOffset[last - idx];\n+        for (int i = 0; i < last; ++i) {\n+            indices[i] = count % uniCounterOffset[i];\n+            count /= uniCounterOffset[i];\n+        }\n         indices[last] = idx;\n+        for (int i = last - 1; i >= 0; --i) {\n+            final int idx_i = indices[i];\n+            for (int j = i + 1; j <= last; ++j) {\n+                final int offset_j = uniCounterOffset[last - j];\n+                indices[i] -= idx_i / offset_j * offset_j;\n+                idx_i %= offset_j;\n+                if (j <= i + idx_i + 1) {\n+                    indices[i]++;\n+                }\n+            }\n+        }\n \n         return indices;\n     }",
    "result_reason": "error: cannot assign a value to final variable idx_i",
    "test_result": "ERROR"
}