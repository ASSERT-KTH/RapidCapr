{
    "patch": "    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int numArgsToRemove = 0;\n      for (Node parameter : argList.children()) {\n        if (!referenced.contains(fnScope.getVar(parameter.getString()))) {\n          numArgsToRemove++;\n        } else {\n          break;\n        }\n      }\n\n      for (int i = 0; i < numArgsToRemove; i++) {\n        Node lastArg = argList.getLastChild();\n        if (lastArg.isDefaultValue()) {\n          Node defaultValue = lastArg.getLastChild();\n          if (defaultValue.getBooleanProp(Node.FREE_CALL)\n              || NodeUtil.referencesThis(defaultValue)) {\n            // Don't remove a default value if it's a free call. Removing it\n            // might cause a runtime error.\n            return;\n          }\n        }\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0c47555f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int numArgsToRemove = 0;\n+      for (Node parameter : argList.children()) {\n+        if (!referenced.contains(fnScope.getVar(parameter.getString()))) {\n+          numArgsToRemove++;\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      for (int i = 0; i < numArgsToRemove; i++) {\n+        Node lastArg = argList.getLastChild();\n+        if (lastArg.isDefaultValue()) {\n+          Node defaultValue = lastArg.getLastChild();\n+          if (defaultValue.getBooleanProp(Node.FREE_CALL)\n+              || NodeUtil.referencesThis(defaultValue)) {\n+            // Don't remove a default value if it's a free call. Removing it\n+            // might cause a runtime error.\n+            return;\n+          }\n+        }\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}