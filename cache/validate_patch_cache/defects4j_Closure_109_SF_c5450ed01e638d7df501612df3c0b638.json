{
    "patch": "private Node parseContextTypeExpression(JsDocToken token) {\n    Node expression = parseTypeName(token);\n    if (expression == null) {\n        expression = parseTypeExpression(token);\n    }\n    if (expression == null) {\n        throw new IllegalArgumentException(\"Bad type annotation. type not recognized due to syntax error\");\n    }\n    return expression;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..a10b9bec 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1904,9 +1904,16 @@ public final class JsDocInfoParser {\n    * ContextTypeExpression := BasicTypeExpression | '?'\n    * For expressions on the right hand side of a this: or new:\n    */\n-  private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n-  }\n+private Node parseContextTypeExpression(JsDocToken token) {\n+    Node expression = parseTypeName(token);\n+    if (expression == null) {\n+        expression = parseTypeExpression(token);\n+    }\n+    if (expression == null) {\n+        throw new IllegalArgumentException(\"Bad type annotation. type not recognized due to syntax error\");\n+    }\n+    return expression;\n+}\n \n   /**\n    * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName",
    "result_reason": "junit.framework.AssertionFailedError: extra warning: Bad type annotation. type not recognized due to syntax error",
    "test_result": "FAIL"
}