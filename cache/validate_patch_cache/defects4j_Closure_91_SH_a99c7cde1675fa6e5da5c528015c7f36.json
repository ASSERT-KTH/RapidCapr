{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLValue(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n        Node target = NodeUtil.getBestLValue(parent.getFirstChild());\n        if (target != null) {\n          Node grandparent = parent.getParent();\n          while (grandparent != null && NodeUtil.isGet(grandparent)) {\n            grandparent = grandparent.getParent();\n          }\n          if (grandparent != null &&\n              NodeUtil.getEnclosingType(grandparent).isConstructor() &&\n              isPrototypeAssignment(target, grandparent)) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b57b7a78 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,21 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n+        Node target = NodeUtil.getBestLValue(parent.getFirstChild());\n+        if (target != null) {\n+          Node grandparent = parent.getParent();\n+          while (grandparent != null && NodeUtil.isGet(grandparent)) {\n+            grandparent = grandparent.getParent();\n+          }\n+          if (grandparent != null &&\n+              NodeUtil.getEnclosingType(grandparent).isConstructor() &&\n+              isPrototypeAssignment(target, grandparent)) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}