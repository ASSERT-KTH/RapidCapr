{
    "patch": "public String getProp(String key) {\n    String propValue = null;\n    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"myprops.properties\");\n    try {\n        Properties props = new Properties();\n\t\t    props.load(inputStream);\n        propValue = props.getProperty(key);\n        if (propValue == null || propValue.isEmpty()) {\n            System.err.println(\"Warning: No value found for key \" + key);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            inputStream.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return propValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b3efd9a3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String key) {\n+    String propValue = null;\n+    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"myprops.properties\");\n+    try {\n+        Properties props = new Properties();\n+\t\t    props.load(inputStream);\n+        propValue = props.getProperty(key);\n+        if (propValue == null || propValue.isEmpty()) {\n+            System.err.println(\"Warning: No value found for key \" + key);\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    } finally {\n+        try {\n+            inputStream.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    return propValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}