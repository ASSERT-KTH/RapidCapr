{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    List<Node> argumentsList = call.getChildren().subList(1);\n    int numArgs = argumentsList.size();\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    boolean var_args = false;\n    while (parameters.hasNext()) {\n      Node parameter = parameters.next();\n      ordinal++;\n      if (parameter.isVarArgs()) {\n        var_args = true;\n        validateVarArgs(functionType, t, argumentsList, ordinal);\n        break;\n      }\n      if (argumentsList.isEmpty()) {\n        reportParameterMismatch(t, call, functionType);\n        return;\n      }\n      Node argument = argumentsList.remove(0);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n        getJSType(parameter), call, ordinal);\n    }\n\n    if (!var_args && !argumentsList.isEmpty()) {\n      reportParameterMismatch(t, call, functionType);\n    }\n  }\n\nprivate void validateVarArgs(FunctionType functionType,\n      NodeTraversal t, List<Node> argumentsList, int ordinal) {\n    Node parameter = functionType.getParameters().get(ordinal - 1);\n    while (!argumentsList.isEmpty()) {\n      Node argument = argumentsList.remove(0);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), null, ordinal);\n      ordinal++;\n    }\n  }\n\nprivate void reportParameterMismatch(NodeTraversal t, Node call, FunctionType functionType) {\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    } else {\n      report(t, call, NULLABLE_DEREFERENCE, \"undefined parameter\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..63ddd12a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,27 +1396,47 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+    List<Node> argumentsList = call.getChildren().subList(1);\n+    int numArgs = argumentsList.size();\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+    boolean var_args = false;\n+    while (parameters.hasNext()) {\n+      Node parameter = parameters.next();\n       ordinal++;\n+      if (parameter.isVarArgs()) {\n+        var_args = true;\n+        validateVarArgs(functionType, t, argumentsList, ordinal);\n+        break;\n+      }\n+      if (argumentsList.isEmpty()) {\n+        reportParameterMismatch(t, call, functionType);\n+        return;\n+      }\n+      Node argument = argumentsList.remove(0);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+        getJSType(parameter), call, ordinal);\n+    }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    if (!var_args && !argumentsList.isEmpty()) {\n+      reportParameterMismatch(t, call, functionType);\n     }\n+  }\n \n+private void validateVarArgs(FunctionType functionType,\n+      NodeTraversal t, List<Node> argumentsList, int ordinal) {\n+    Node parameter = functionType.getParameters().get(ordinal - 1);\n+    while (!argumentsList.isEmpty()) {\n+      Node argument = argumentsList.remove(0);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), null, ordinal);\n+      ordinal++;\n+    }\n+  }\n+\n+private void reportParameterMismatch(NodeTraversal t, Node call, FunctionType functionType) {\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n@@ -1426,8 +1446,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+    } else {\n+      report(t, call, NULLABLE_DEREFERENCE, \"undefined parameter\");\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}