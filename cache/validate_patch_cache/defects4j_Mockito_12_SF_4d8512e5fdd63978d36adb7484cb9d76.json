{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof Class) {\n            return (Class<?>) actual;\n        } else if (actual instanceof ParameterizedType) {\n            return getGenericType((ParameterizedType) actual);\n        }\n    }\n    return Object.class;\n}\n\nprivate Class<?> getGenericType(ParameterizedType parameterizedType) {\n    Type rawType = parameterizedType.getRawType();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    Class<?>[] typeArguments = new Class<?>[actualTypeArguments.length];\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        if (actualTypeArguments[i] instanceof Class) {\n            typeArguments[i] = (Class<?>) actualTypeArguments[i];\n        } else if (actualTypeArguments[i] instanceof ParameterizedType) {\n            typeArguments[i] = getGenericType((ParameterizedType) actualTypeArguments[i]);\n        } else {\n            throw new IllegalArgumentException(\"Type argument should be either Class or ParameterizedType\");\n        }\n    }\n    try {\n        return Class.forName(rawType.getTypeName());\n    } catch (ClassNotFoundException e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..aa6eb339a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,36 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type generic = field.getGenericType();\n+    if (generic instanceof ParameterizedType) {\n+        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+        if (actual instanceof Class) {\n+            return (Class<?>) actual;\n+        } else if (actual instanceof ParameterizedType) {\n+            return getGenericType((ParameterizedType) actual);\n+        }\n+    }\n+    return Object.class;\n+}\n+\n+private Class<?> getGenericType(ParameterizedType parameterizedType) {\n+    Type rawType = parameterizedType.getRawType();\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    Class<?>[] typeArguments = new Class<?>[actualTypeArguments.length];\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        if (actualTypeArguments[i] instanceof Class) {\n+            typeArguments[i] = (Class<?>) actualTypeArguments[i];\n+        } else if (actualTypeArguments[i] instanceof ParameterizedType) {\n+            typeArguments[i] = getGenericType((ParameterizedType) actualTypeArguments[i]);\n+        } else {\n+            throw new IllegalArgumentException(\"Type argument should be either Class or ParameterizedType\");\n+        }\n+    }\n+    try {\n+        return Class.forName(rawType.getTypeName());\n+    } catch (ClassNotFoundException e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}