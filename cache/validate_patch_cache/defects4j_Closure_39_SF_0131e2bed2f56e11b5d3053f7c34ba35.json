{
    "patch": "    return isFunctionType() || isConstructor() || isInterface();\n  }\n\n  /**\n   * Returns a pretty-printed representation of this object, suitable for use in diagnostic\n   * messages. May or may not print the object's type. This method tries to match the return type\n   * of TypedVar.toString().\n   *\n   * @param forAnnotations Whether or not the resulting string should be formatted for inclusion\n   *     in an annotation.\n   */\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      if (!forAnnotations && canBeCalled() && isConstructor()) {\n        sb.append(\"new \");\n      }\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        i++;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..e8be0ad3 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,10 +345,17 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+    return isFunctionType() || isConstructor() || isInterface();\n   }\n \n+  /**\n+   * Returns a pretty-printed representation of this object, suitable for use in diagnostic\n+   * messages. May or may not print the object's type. This method tries to match the return type\n+   * of TypedVar.toString().\n+   *\n+   * @param forAnnotations Whether or not the resulting string should be formatted for inclusion\n+   *     in an annotation.\n+   */\n   @Override\n   String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n@@ -367,6 +374,9 @@ class PrototypeObjectType extends ObjectType {\n       }\n \n       StringBuilder sb = new StringBuilder();\n+      if (!forAnnotations && canBeCalled() && isConstructor()) {\n+        sb.append(\"new \");\n+      }\n       sb.append(\"{\");\n \n       int i = 0;\n@@ -379,21 +389,8 @@ class PrototypeObjectType extends ObjectType {\n         sb.append(\": \");\n         sb.append(getPropertyType(property).toString());\n \n-        ++i;\n+        i++;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n-      }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}