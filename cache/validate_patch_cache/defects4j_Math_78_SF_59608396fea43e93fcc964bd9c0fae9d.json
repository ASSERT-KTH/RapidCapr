{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t1;\n            double gb = handler.g(t1, interpolator.getInterpolatedState());\n            boolean g0Positive = (ga >= 0);\n            boolean gbPositive = (gb >= 0);\n\n            // Check if sign of function has changed within step\n            if (g0Positive ^ gbPositive) {\n                return handleEvent(ta, ga, tb, gb, interpolator);\n            }\n\n            // If not, subdivide step until sign change occurs\n            int count = 0;\n            while (count < maxIterationCount) {\n                count++;\n                final double tc = (ta + tb) / 2;\n                interpolator.setInterpolatedTime(tc);\n                final double gc = handler.g(tc, interpolator.getInterpolatedState());\n                if (Double.isNaN(gc)) {\n                    // function is NaN, exit loop with false\n                    break;\n                }\n                final boolean gcPositive = (gc >= 0);\n                if (g0Positive ^ gcPositive) {\n                    tb = tc;\n                    gb = gc;\n                    return handleEvent(ta, ga, tb, gb, interpolator);\n                } else {\n                    ta = tc;\n                    ga = gc;\n                }\n            }\n\n            // Could not find sign change within step\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }\n    \n    private boolean handleEvent(double ta, double ga, double tb, double gb, StepInterpolator interpolator)\n            throws EventException, DerivativeException {\n\n        // Compute decreasing bracketing interval for root-finding algorithm\n        final double eps = 1e-6 * convergence;\n        double tlo, thi, glo, ghi;\n        if (gb >= ga) {\n            tlo = ta;\n            glo = ga;\n            thi = tb;\n            ghi = gb;\n        } else {\n            tlo = tb;\n            glo = gb;\n            thi = ta;\n            ghi = ga;\n        }\n        boolean foundBracket = false;\n        double tmid = 0;\n        for (int i = 0; i < maxIterationCount && !foundBracket; i++) {\n            tmid = 0.5 * (tlo + thi);\n            interpolator.setInterpolatedTime(tmid);\n            final double gmid = handler.g(tmid, interpolator.getInterpolatedState());\n            if (Double.isNaN(gmid)) {\n                break;\n            }\n            if ((glo >= 0 && gmid <= 0 && ghi <= 0)\n                    || (glo <= 0 && gmid >= 0 && ghi >= 0)) {\n                foundBracket = true;\n            } else if (gmid >= 0) {\n                thi = tmid;\n                ghi = gmid;\n            } else {\n                tlo = tmid;\n                glo = gmid;\n            }\n        }\n\n        // Found bracketing interval or returned without success\n        if (foundBracket) {\n            pendingEventTime = tmid;\n            if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                // we were already waiting for this event which was\n                // found during a previous call for a step that was\n                // rejected, this step must now be accepted since it\n                // properly ends exactly at the event occurrence\n                return false;\n            }\n            pendingEvent = true;\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..8d2c55547 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,90 +164,49 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n         try {\n \n             forward = interpolator.isForward();\n             final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n \n             double ta = t0;\n             double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n-                    }\n+            double tb = t1;\n+            double gb = handler.g(t1, interpolator.getInterpolatedState());\n+            boolean g0Positive = (ga >= 0);\n+            boolean gbPositive = (gb >= 0);\n+\n+            // Check if sign of function has changed within step\n+            if (g0Positive ^ gbPositive) {\n+                return handleEvent(ta, ga, tb, gb, interpolator);\n+            }\n \n+            // If not, subdivide step until sign change occurs\n+            int count = 0;\n+            while (count < maxIterationCount) {\n+                count++;\n+                final double tc = (ta + tb) / 2;\n+                interpolator.setInterpolatedTime(tc);\n+                final double gc = handler.g(tc, interpolator.getInterpolatedState());\n+                if (Double.isNaN(gc)) {\n+                    // function is NaN, exit loop with false\n+                    break;\n+                }\n+                final boolean gcPositive = (gc >= 0);\n+                if (g0Positive ^ gcPositive) {\n+                    tb = tc;\n+                    gb = gc;\n+                    return handleEvent(ta, ga, tb, gb, interpolator);\n                 } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    ta = tc;\n+                    ga = gc;\n                 }\n-\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n+            // Could not find sign change within step\n             return false;\n \n         } catch (FunctionEvaluationException e) {\n@@ -261,6 +220,61 @@ public class EventState {\n         }\n \n     }\n+    \n+    private boolean handleEvent(double ta, double ga, double tb, double gb, StepInterpolator interpolator)\n+            throws EventException, DerivativeException {\n+\n+        // Compute decreasing bracketing interval for root-finding algorithm\n+        final double eps = 1e-6 * convergence;\n+        double tlo, thi, glo, ghi;\n+        if (gb >= ga) {\n+            tlo = ta;\n+            glo = ga;\n+            thi = tb;\n+            ghi = gb;\n+        } else {\n+            tlo = tb;\n+            glo = gb;\n+            thi = ta;\n+            ghi = ga;\n+        }\n+        boolean foundBracket = false;\n+        double tmid = 0;\n+        for (int i = 0; i < maxIterationCount && !foundBracket; i++) {\n+            tmid = 0.5 * (tlo + thi);\n+            interpolator.setInterpolatedTime(tmid);\n+            final double gmid = handler.g(tmid, interpolator.getInterpolatedState());\n+            if (Double.isNaN(gmid)) {\n+                break;\n+            }\n+            if ((glo >= 0 && gmid <= 0 && ghi <= 0)\n+                    || (glo <= 0 && gmid >= 0 && ghi >= 0)) {\n+                foundBracket = true;\n+            } else if (gmid >= 0) {\n+                thi = tmid;\n+                ghi = gmid;\n+            } else {\n+                tlo = tmid;\n+                glo = gmid;\n+            }\n+        }\n+\n+        // Found bracketing interval or returned without success\n+        if (foundBracket) {\n+            pendingEventTime = tmid;\n+            if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n+                // we were already waiting for this event which was\n+                // found during a previous call for a step that was\n+                // rejected, this step must now be accepted since it\n+                // properly ends exactly at the event occurrence\n+                return false;\n+            }\n+            pendingEvent = true;\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}