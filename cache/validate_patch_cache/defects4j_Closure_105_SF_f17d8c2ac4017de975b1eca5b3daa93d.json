{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  if (elem == null) {\n    // If the array is empty, replace the original node with an empty string.\n    parent.replaceChild(n, Node.newString(\"\"));\n    return;\n  } else if (!NodeUtil.isImmutableValue(elem)) {\n    // If the first element of the array is not a string literal, return.\n    return;\n  }\n\n  // Merges adjacent String nodes.\n  StringBuilder sb = new StringBuilder(NodeUtil.getStringValue(elem));\n  foldedSize += InlineCostEstimator.getCost(elem);\n  elem = elem.getNext();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(NodeUtil.getStringValue(right));\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n      sb = new StringBuilder();\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n\n  foldedSize += (arrayFoldedChildren.size() - 1) * NodeUtil.getStringValue(right).length();\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  if (arrayFoldedChildren.isEmpty()) {\n    parent.replaceChild(n, Node.newString(\"\"));\n    return;\n  } else if (arrayFoldedChildren.size() == 1\n      && foldedSize <= originalSize\n      && arrayFoldedChildren.get(0).getType() == Token.STRING) {\n    // If the array was just one element, fold it into a string concatenation.\n    Node foldedStringNode = arrayFoldedChildren.get(0);\n    Node leftOperand = Node.newString(\"\");\n    Node rightOperand = foldedStringNode;\n    Node addNode = new Node(Token.ADD, leftOperand, rightOperand);\n    parent.replaceChild(n, addNode);\n  } else if (foldedSize <= originalSize) {\n    // If the string concatenation size is less than the original node size, replace the original node.\n    Node joinStringNode = Node.newString(NodeUtil.getStringValue(right));\n    Node joinNode = new Node(Token.JOIN, joinStringNode, arrayNode);\n    parent.replaceChild(n, joinNode);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..855ec3d0 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,76 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n-    }\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  if (elem == null) {\n+    // If the array is empty, replace the original node with an empty string.\n+    parent.replaceChild(n, Node.newString(\"\"));\n+    return;\n+  } else if (!NodeUtil.isImmutableValue(elem)) {\n+    // If the first element of the array is not a string literal, return.\n+    return;\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n+  // Merges adjacent String nodes.\n+  StringBuilder sb = new StringBuilder(NodeUtil.getStringValue(elem));\n+  foldedSize += InlineCostEstimator.getCost(elem);\n+  elem = elem.getNext();\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (sb.length() > 0) {\n+        sb.append(NodeUtil.getStringValue(right));\n+      }\n+      sb.append(NodeUtil.getStringValue(elem));\n+    } else {\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n+      sb = new StringBuilder();\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+    elem = elem.getNext();\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  if (sb.length() > 0) {\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n+  foldedSize += (arrayFoldedChildren.size() - 1) * NodeUtil.getStringValue(right).length();\n+\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  if (arrayFoldedChildren.isEmpty()) {\n+    parent.replaceChild(n, Node.newString(\"\"));\n+    return;\n+  } else if (arrayFoldedChildren.size() == 1\n+      && foldedSize <= originalSize\n+      && arrayFoldedChildren.get(0).getType() == Token.STRING) {\n+    // If the array was just one element, fold it into a string concatenation.\n+    Node foldedStringNode = arrayFoldedChildren.get(0);\n+    Node leftOperand = Node.newString(\"\");\n+    Node rightOperand = foldedStringNode;\n+    Node addNode = new Node(Token.ADD, leftOperand, rightOperand);\n+    parent.replaceChild(n, addNode);\n+  } else if (foldedSize <= originalSize) {\n+    // If the string concatenation size is less than the original node size, replace the original node.\n+    Node joinStringNode = Node.newString(NodeUtil.getStringValue(right));\n+    Node joinNode = new Node(Token.JOIN, joinStringNode, arrayNode);\n+    parent.replaceChild(n, joinNode);\n   }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}