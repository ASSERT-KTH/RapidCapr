{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double epsilon = 1.0e-15;\n    double big = 4.503599627370496e15;\n    double bigInv = 2.22044604925031308085e-16;\n\n    if (x < 0.0 || a <= 0.0) {\n      throw new IllegalArgumentException(\"Invalid arguments in regularizedGamma\");\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        double b = x + 1.0;\n        double c = big;\n        double d = 1.0 / b;\n        double h = d;\n        double an;\n\n        for (int i = 1; true; i++) {\n            an = -i * (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) < epsilon) {\n                d = epsilon;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < epsilon) {\n                c = epsilon;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < epsilon) {\n                return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * h / a;\n            }\n        }\n    } else {\n        double b = x + 1.0 - a;\n        double c = 1.0 / big;\n        double d = 1.0 / b;\n        double h = d;\n        double an;\n\n        for (int i = 1; true; i++) {\n            an = i * (a - i);\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) < epsilon) {\n                d = epsilon;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < epsilon) {\n                c = epsilon;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < epsilon) {\n                return Math.exp(a * Math.log(x) - x - logGamma(a)) * h;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..955dbc55c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,69 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double epsilon = 1.0e-15;\n+    double big = 4.503599627370496e15;\n+    double bigInv = 2.22044604925031308085e-16;\n+\n+    if (x < 0.0 || a <= 0.0) {\n+      throw new IllegalArgumentException(\"Invalid arguments in regularizedGamma\");\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        double b = x + 1.0;\n+        double c = big;\n+        double d = 1.0 / b;\n+        double h = d;\n+        double an;\n+\n+        for (int i = 1; true; i++) {\n+            an = -i * (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) < epsilon) {\n+                d = epsilon;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) < epsilon) {\n+                c = epsilon;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < epsilon) {\n+                return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * h / a;\n+            }\n+        }\n+    } else {\n+        double b = x + 1.0 - a;\n+        double c = 1.0 / big;\n+        double d = 1.0 / b;\n+        double h = d;\n+        double an;\n+\n+        for (int i = 1; true; i++) {\n+            an = i * (a - i);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) < epsilon) {\n+                d = epsilon;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) < epsilon) {\n+                c = epsilon;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < epsilon) {\n+                return Math.exp(a * Math.log(x) - x - logGamma(a)) * h;\n+            }\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}