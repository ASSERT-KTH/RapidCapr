{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    boolean isAssignLhs = (parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);\n\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(n);\n        if (jsDocInfo != null && (jsDocInfo.isConstructor() || jsDocInfo.hasThisType() || jsDocInfo.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them.\n        // e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        if (!(parent.getType() == Token.SCRIPT || parent.getType() == Token.CATCH)) {\n            if (!isNamedFunction(parent) && (!isAssignLhs || !isFunctionExpression(parent))) {\n                return false;\n            }\n        }\n    }\n\n    // Only traverse the left side of an ASSIGN, not the right side.\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        if (!isAssignLhs) {\n            return false;\n        }\n\n        Node parentOfAssign = parent.getParent();\n        if (parentOfAssign != null && parentOfAssign.getType() == Token.EXPR_RESULT) {\n            Node grandParent = parentOfAssign.getParent();\n            if (grandParent != null && grandParent.getType() == Token.SCRIPT) {\n                Node greatGrandParent = grandParent.getParent();\n                if (greatGrandParent != null && greatGrandParent.getType() == Token.BLOCK) {\n                    Node fnNode = greatGrandParent.getParent();\n                    if (fnNode != null && fnNode.getType() == Token.FUNCTION) {\n                        if (!isFunctionExpressionInAssignment(fnNode)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Don't traverse `this` outside of a function.\n    if (n.getType() == Token.THIS && !NodeUtil.isFunctionBlock(parent)) {\n        t.report(n, CheckGlobalThis.GLOBAL_THIS, \"dangerous use of the global this object\");\n        return false;\n    }\n\n    return true;\n}\n\nprivate static boolean isNamedFunction(Node n) {\n    if (n == null || n.getType() != Token.ASSIGN) {\n        return false;\n    }\n    Node child = n.getFirstChild();\n    return child.getType() == Token.NAME || child.getType() == Token.GETPROP && child.getLastChild().getType() == Token.NAME;\n}\n\nprivate static boolean isFunctionExpression(Node n) {\n    if (n == null || n.getType() != Token.ASSIGN) {\n        return false;\n    }\n    Node child = n.getFirstChild();\n    return child.getType() == Token.FUNCTION || NodeUtil.isFunctionExpression(child);\n}\n\nprivate static boolean isFunctionExpressionInAssignment(Node n) {\n    Node child = n.getFirstChild();\n    if (child.getType() != Token.ASSIGN) {\n        return false;\n    }\n\n    Node lhs = child.getFirstChild();\n    return lhs != null && lhs.getLastChild() != null && lhs.getLastChild().getString().equals(\"prototype\") &&\n            NodeUtil.isFunctionExpression(child.getLastChild());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..855f28ab 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,88 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    boolean isAssignLhs = (parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);\n \n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDocInfo != null && (jsDocInfo.isConstructor() || jsDocInfo.hasThisType() || jsDocInfo.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them.\n+        // e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {};\n+        if (!(parent.getType() == Token.SCRIPT || parent.getType() == Token.CATCH)) {\n+            if (!isNamedFunction(parent) && (!isAssignLhs || !isFunctionExpression(parent))) {\n+                return false;\n+            }\n+        }\n     }\n \n+    // Only traverse the left side of an ASSIGN, not the right side.\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        if (!isAssignLhs) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n+        }\n+\n+        Node parentOfAssign = parent.getParent();\n+        if (parentOfAssign != null && parentOfAssign.getType() == Token.EXPR_RESULT) {\n+            Node grandParent = parentOfAssign.getParent();\n+            if (grandParent != null && grandParent.getType() == Token.SCRIPT) {\n+                Node greatGrandParent = grandParent.getParent();\n+                if (greatGrandParent != null && greatGrandParent.getType() == Token.BLOCK) {\n+                    Node fnNode = greatGrandParent.getParent();\n+                    if (fnNode != null && fnNode.getType() == Token.FUNCTION) {\n+                        if (!isFunctionExpressionInAssignment(fnNode)) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    // Don't traverse `this` outside of a function.\n+    if (n.getType() == Token.THIS && !NodeUtil.isFunctionBlock(parent)) {\n+        t.report(n, CheckGlobalThis.GLOBAL_THIS, \"dangerous use of the global this object\");\n+        return false;\n     }\n \n     return true;\n-  }\n+}\n+\n+private static boolean isNamedFunction(Node n) {\n+    if (n == null || n.getType() != Token.ASSIGN) {\n+        return false;\n+    }\n+    Node child = n.getFirstChild();\n+    return child.getType() == Token.NAME || child.getType() == Token.GETPROP && child.getLastChild().getType() == Token.NAME;\n+}\n+\n+private static boolean isFunctionExpression(Node n) {\n+    if (n == null || n.getType() != Token.ASSIGN) {\n+        return false;\n+    }\n+    Node child = n.getFirstChild();\n+    return child.getType() == Token.FUNCTION || NodeUtil.isFunctionExpression(child);\n+}\n+\n+private static boolean isFunctionExpressionInAssignment(Node n) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() != Token.ASSIGN) {\n+        return false;\n+    }\n+\n+    Node lhs = child.getFirstChild();\n+    return lhs != null && lhs.getLastChild() != null && lhs.getLastChild().getString().equals(\"prototype\") &&\n+            NodeUtil.isFunctionExpression(child.getLastChild());\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}