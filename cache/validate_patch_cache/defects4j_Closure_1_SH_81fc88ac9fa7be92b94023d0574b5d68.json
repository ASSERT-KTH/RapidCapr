{
    "patch": "      Node firstReferencedArg = null;\n      for (lastArg = argList.getFirstChild(); lastArg != null; lastArg = lastArg.getNext()) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          firstReferencedArg = lastArg;\n          break;\n        }\n      }\n\n      // Strip unreferenced args from the middle of the function declaration.\n      // If the first refernced argument is not the first argument in the\n      // argument list we need to make sure we leave the ones before it alone.\n      for (Node arg = firstReferencedArg; arg != null; arg = arg.getNext()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2cbea819 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node firstReferencedArg = null;\n+      for (lastArg = argList.getFirstChild(); lastArg != null; lastArg = lastArg.getNext()) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          firstReferencedArg = lastArg;\n+          break;\n+        }\n+      }\n+\n+      // Strip unreferenced args from the middle of the function declaration.\n+      // If the first refernced argument is not the first argument in the\n+      // argument list we need to make sure we leave the ones before it alone.\n+      for (Node arg = firstReferencedArg; arg != null; arg = arg.getNext()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}