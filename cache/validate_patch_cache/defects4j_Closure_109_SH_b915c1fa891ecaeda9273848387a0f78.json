{
    "patch": "private Node parseContextTypeExpression(JsDocToken token) {\n    // try to parse the type expression\n    Node typeExpression = parseTypeExpression(token);\n    \n    // if the type expression is not valid, try to parse it as a type name\n    if (typeExpression == null) {\n        typeExpression = parseTypeName(token);\n    }\n    \n    // return the parsed type expression or type name\n    return typeExpression;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..8719e4d8 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,18 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+private Node parseContextTypeExpression(JsDocToken token) {\n+    // try to parse the type expression\n+    Node typeExpression = parseTypeExpression(token);\n+    \n+    // if the type expression is not valid, try to parse it as a type name\n+    if (typeExpression == null) {\n+        typeExpression = parseTypeName(token);\n+    }\n+    \n+    // return the parsed type expression or type name\n+    return typeExpression;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}