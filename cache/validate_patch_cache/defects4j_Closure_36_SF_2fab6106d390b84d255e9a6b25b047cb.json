{
    "patch": "import com.google.javascript.rhino.*;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeCreator;\nimport com.google.javascript.jscomp.CodingConvention;\nimport com.google.javascript.jscomp.Compiler;\nimport com.google.javascript.jscomp.ControlFlowGraph;\nimport com.google.javascript.jscomp.JsAst;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.ReferenceMap;\nimport com.google.javascript.jscomp.Scope;\nimport com.google.javascript.jscomp.ScopeCreator;\nimport com.google.javascript.jscomp.Var;\nimport com.google.javascript.jscomp.VarInfo;\nimport com.google.javascript.jscomp.graph.DiGraph;\nimport com.google.javascript.jscomp.graph.LinkedDirectedGraph;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormatLevel;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SourceLocationFormatter;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SourceLocationFormatterImpl;\nimport com.google.javascript.jscomp.parsing.parser.util.format.UnknownSourceLocationFormatterImpl;\n\nprivate boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      || !isValidInitialization(initialization)\n      || !isValidReference(reference)) {\n    return false;\n  }\n\n  // If the value is read more than once, skip it.\n  // VAR declarations and EXPR_RESULT don't need the value, but other\n  // ASSIGN expressions parents do.\n  if (declaration != initialization &&\n      !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n\n  // Be very conservative and do no cross control structures or\n  // scope boundaries\n  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n    return false;\n  }\n\n  // Do not inline into a call node. This would change\n  // the context in which it was being called. For example,\n  //   var a = b.c;\n  //   a();\n  // should not be inlined, because it calls a in the context of b\n  // rather than the context of the window.\n  //   var a = b.c;\n  //   f(a)\n  // is ok.\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      // Bug 2388531: Don't inline subclass definitions into class defining\n      // calls as this confused class removing logic.\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n\n      // issue 668: Don't inline singleton getter methods\n      // calls as this confused class removing logic.\n\n      Node assignParent = reference.getAssignParent();\n      if (assignParent != null && assignParent.isVar()) {\n        Node grandparent = assignParent.getParent();\n        if (grandparent != null && grandparent.isBlock()) {\n          Node blockParent = grandparent.getParent();\n          if (blockParent != null && blockParent.isFunction()) {\n            if (blockParent.getLastChild() == grandparent) {\n              // Do not inline the last statement of a function if it's a variable declaration\n              return false;\n            }\n          }\n        }\n      }\n\n    }\n  }\n\n  return canMoveAggressively(value) ||\n      canMoveModerately(initialization, reference);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..0ac04a74 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -516,68 +516,104 @@ class InlineVariables implements CompilerPass {\n      * @return true if the provided reference and declaration can be safely\n      *         inlined according to our criteria\n      */\n-    private boolean canInline(\n-        Reference declaration,\n-        Reference initialization,\n-        Reference reference) {\n-      if (!isValidDeclaration(declaration)\n-          || !isValidInitialization(initialization)\n-          || !isValidReference(reference)) {\n-        return false;\n-      }\n+import com.google.javascript.rhino.*;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeCreator;\n+import com.google.javascript.jscomp.CodingConvention;\n+import com.google.javascript.jscomp.Compiler;\n+import com.google.javascript.jscomp.ControlFlowGraph;\n+import com.google.javascript.jscomp.JsAst;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.ReferenceMap;\n+import com.google.javascript.jscomp.Scope;\n+import com.google.javascript.jscomp.ScopeCreator;\n+import com.google.javascript.jscomp.Var;\n+import com.google.javascript.jscomp.VarInfo;\n+import com.google.javascript.jscomp.graph.DiGraph;\n+import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormatLevel;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SourceLocationFormatter;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SourceLocationFormatterImpl;\n+import com.google.javascript.jscomp.parsing.parser.util.format.UnknownSourceLocationFormatterImpl;\n+\n+private boolean canInline(\n+    Reference declaration,\n+    Reference initialization,\n+    Reference reference) {\n+  if (!isValidDeclaration(declaration)\n+      || !isValidInitialization(initialization)\n+      || !isValidReference(reference)) {\n+    return false;\n+  }\n \n-      // If the value is read more than once, skip it.\n-      // VAR declarations and EXPR_RESULT don't need the value, but other\n-      // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n-        return false;\n-      }\n+  // If the value is read more than once, skip it.\n+  // VAR declarations and EXPR_RESULT don't need the value, but other\n+  // ASSIGN expressions parents do.\n+  if (declaration != initialization &&\n+      !initialization.getGrandparent().isExprResult()) {\n+    return false;\n+  }\n \n-      // Be very conservative and do no cross control structures or\n-      // scope boundaries\n-      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n-          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n-        return false;\n-      }\n+  // Be very conservative and do no cross control structures or\n+  // scope boundaries\n+  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n+      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n+    return false;\n+  }\n \n-      // Do not inline into a call node. This would change\n-      // the context in which it was being called. For example,\n-      //   var a = b.c;\n-      //   a();\n-      // should not be inlined, because it calls a in the context of b\n-      // rather than the context of the window.\n-      //   var a = b.c;\n-      //   f(a)\n-      // is ok.\n-      Node value = initialization.getAssignedValue();\n-      Preconditions.checkState(value != null);\n-      if (value.isGetProp()\n-          && reference.getParent().isCall()\n-          && reference.getParent().getFirstChild() == reference.getNode()) {\n+  // Do not inline into a call node. This would change\n+  // the context in which it was being called. For example,\n+  //   var a = b.c;\n+  //   a();\n+  // should not be inlined, because it calls a in the context of b\n+  // rather than the context of the window.\n+  //   var a = b.c;\n+  //   f(a)\n+  // is ok.\n+  Node value = initialization.getAssignedValue();\n+  Preconditions.checkState(value != null);\n+  if (value.isGetProp()\n+      && reference.getParent().isCall()\n+      && reference.getParent().getFirstChild() == reference.getNode()) {\n+    return false;\n+  }\n+\n+  if (value.isFunction()) {\n+    Node callNode = reference.getParent();\n+    if (reference.getParent().isCall()) {\n+      CodingConvention convention = compiler.getCodingConvention();\n+      // Bug 2388531: Don't inline subclass definitions into class defining\n+      // calls as this confused class removing logic.\n+      SubclassRelationship relationship =\n+          convention.getClassesDefinedByCall(callNode);\n+      if (relationship != null) {\n         return false;\n       }\n \n-      if (value.isFunction()) {\n-        Node callNode = reference.getParent();\n-        if (reference.getParent().isCall()) {\n-          CodingConvention convention = compiler.getCodingConvention();\n-          // Bug 2388531: Don't inline subclass definitions into class defining\n-          // calls as this confused class removing logic.\n-          SubclassRelationship relationship =\n-              convention.getClassesDefinedByCall(callNode);\n-          if (relationship != null) {\n-            return false;\n+      // issue 668: Don't inline singleton getter methods\n+      // calls as this confused class removing logic.\n+\n+      Node assignParent = reference.getAssignParent();\n+      if (assignParent != null && assignParent.isVar()) {\n+        Node grandparent = assignParent.getParent();\n+        if (grandparent != null && grandparent.isBlock()) {\n+          Node blockParent = grandparent.getParent();\n+          if (blockParent != null && blockParent.isFunction()) {\n+            if (blockParent.getLastChild() == grandparent) {\n+              // Do not inline the last statement of a function if it's a variable declaration\n+              return false;\n+            }\n           }\n-\n-          // issue 668: Don't inline singleton getter methods\n-          // calls as this confused class removing logic.\n         }\n       }\n \n-      return canMoveAggressively(value) ||\n-          canMoveModerately(initialization, reference);\n     }\n+  }\n+\n+  return canMoveAggressively(value) ||\n+      canMoveModerately(initialization, reference);\n+}\n \n     /**\n      * If the value is a literal, we can cross more boundaries to inline it.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}