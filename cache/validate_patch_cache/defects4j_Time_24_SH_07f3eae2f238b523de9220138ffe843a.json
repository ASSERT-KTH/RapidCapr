{
    "patch": "            if (e.getDateTimeFieldType() != null && e.getDateTimeFieldType().equals(DateTimeFieldType.yearOfEra())) {\n                e.set(DateTimeFieldType.year(), Math.abs(e.getIllegalNumber()));\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].iField.getType().equals(DateTimeFieldType.yearOfEra())) {\n                        millis = savedFields[i].set(millis, resetFields);\n                    }\n                }\n                return computeMillis(resetFields, text);\n            }\n            throw e;\n        }        ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..edd2c656 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (e.getDateTimeFieldType() != null && e.getDateTimeFieldType().equals(DateTimeFieldType.yearOfEra())) {\n+                e.set(DateTimeFieldType.year(), Math.abs(e.getIllegalNumber()));\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].iField.getType().equals(DateTimeFieldType.yearOfEra())) {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    }\n+                }\n+                return computeMillis(resetFields, text);\n+            }\n+            throw e;\n+        }        \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}