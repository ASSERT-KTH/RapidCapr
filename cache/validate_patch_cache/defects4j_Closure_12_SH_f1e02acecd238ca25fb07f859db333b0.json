{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    NodeList tryBlocks = cfgNode.getChildNodes();\n    for (int i = 0; i < tryBlocks.getLength(); i++) {\n        Node tryBlock = tryBlocks.item(i);\n        if (tryBlock.getNodeName().equals(\"try\")) {\n            NodeList catchBlocks = tryBlock.getChildNodes();\n            for (int j = 0; j < catchBlocks.getLength(); j++) {\n                Node catchBlock = catchBlocks.item(j);\n                if (catchBlock.getNodeName().equals(\"catch\")) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..ae987bb0 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,22 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    NodeList tryBlocks = cfgNode.getChildNodes();\n+    for (int i = 0; i < tryBlocks.getLength(); i++) {\n+        Node tryBlock = tryBlocks.item(i);\n+        if (tryBlock.getNodeName().equals(\"try\")) {\n+            NodeList catchBlocks = tryBlock.getChildNodes();\n+            for (int j = 0; j < catchBlocks.getLength(); j++) {\n+                Node catchBlock = catchBlocks.item(j);\n+                if (catchBlock.getNodeName().equals(\"catch\")) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+  }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}