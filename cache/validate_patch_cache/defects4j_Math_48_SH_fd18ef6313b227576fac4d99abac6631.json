{
    "patch": "                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                             atol)) {\n                        throw new ConvergenceException(LocalizedFormats.REGULA_FALSI_FAILED,\n                                                       getMaximalIterationCount());\n                    } else {\n                        f0 *= f1 / (f1 + fx);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..d19a070d6 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,13 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+                                                             atol)) {\n+                        throw new ConvergenceException(LocalizedFormats.REGULA_FALSI_FAILED,\n+                                                       getMaximalIterationCount());\n+                    } else {\n+                        f0 *= f1 / (f1 + fx);\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}