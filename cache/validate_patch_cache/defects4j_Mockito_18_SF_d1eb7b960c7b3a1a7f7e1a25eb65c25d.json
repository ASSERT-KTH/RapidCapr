{
    "patch": "public class MyClass {\n\n    private Map<Integer, String> myMap;\n\n    public MyClass() {\n        myMap = new HashMap<>();\n    }\n\n    public String getValue(Integer key) {\n        return myMap.get(key);\n    }\n\n    public void addValue(Integer key, String value) {\n        if (key == null || value == null) {\n            throw new IllegalArgumentException(\"Key and value cannot be null\");\n        }\n        myMap.put(key, value);\n    }\n\n    public ReturnValueContainer getAllValues() {\n        List<String> valuesList = new ArrayList<>(myMap.values());\n        return new ReturnValueContainer(valuesList);\n    }\n\n    public static class ReturnValueContainer {\n\n        private final Object returnValue;\n\n        public ReturnValueContainer(Object returnValue) {\n            this.returnValue = returnValue;\n        }\n\n        public <T> T returnValueFor(Class<T> clazz) {\n            return clazz.cast(returnValue);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..b7522c9a4 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,43 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+\n+    private Map<Integer, String> myMap;\n+\n+    public MyClass() {\n+        myMap = new HashMap<>();\n+    }\n+\n+    public String getValue(Integer key) {\n+        return myMap.get(key);\n+    }\n+\n+    public void addValue(Integer key, String value) {\n+        if (key == null || value == null) {\n+            throw new IllegalArgumentException(\"Key and value cannot be null\");\n+        }\n+        myMap.put(key, value);\n+    }\n+\n+    public ReturnValueContainer getAllValues() {\n+        List<String> valuesList = new ArrayList<>(myMap.values());\n+        return new ReturnValueContainer(valuesList);\n+    }\n+\n+    public static class ReturnValueContainer {\n+\n+        private final Object returnValue;\n+\n+        public ReturnValueContainer(Object returnValue) {\n+            this.returnValue = returnValue;\n+        }\n+\n+        public <T> T returnValueFor(Class<T> clazz) {\n+            return clazz.cast(returnValue);\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}