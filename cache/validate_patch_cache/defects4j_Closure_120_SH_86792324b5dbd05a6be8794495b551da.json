{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        } else if (block.isAddedByControlFlowAnalysis()) {\n            // A Block may be added but not being part of the original control\n            // flow structure This could happen if block splitting is in use\n            // or if the block is added by optimizations.\n            // For now be conservative and treat these blocks like loops.\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..cfa99a2c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.isAddedByControlFlowAnalysis()) {\n+            // A Block may be added but not being part of the original control\n+            // flow structure This could happen if block splitting is in use\n+            // or if the block is added by optimizations.\n+            // For now be conservative and treat these blocks like loops.\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}