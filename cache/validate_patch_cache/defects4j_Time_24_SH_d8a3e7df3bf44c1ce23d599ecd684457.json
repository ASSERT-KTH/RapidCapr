{
    "patch": "try {\n    boolean roundFloor = false;\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n        DateTimeField first = savedFields[0].iField;\n        DurationField firstDurationField = first.getDurationField();\n        // alter base year for parsing if first field is weekyear (and week of weekyear) or year\n        if ((first.getType() == DateTimeFieldType.weekyear() || first.getType() == DateTimeFieldType.weekyearOfCentury() ||\n                first.getType() == DateTimeFieldType.year()) &&\n                compareReverse(firstDurationField, DurationFieldType.days().getField(iChrono)) > 0) {\n            roundFloor = true;\n            break;\n        }\n    }\n\n    if (roundFloor) {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].iField.roundFloor(millis);\n        }\n        for (int i = count - 1; i >= 0; i--) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c8807c72 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,41 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    boolean roundFloor = false;\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+        DateTimeField first = savedFields[0].iField;\n+        DurationField firstDurationField = first.getDurationField();\n+        // alter base year for parsing if first field is weekyear (and week of weekyear) or year\n+        if ((first.getType() == DateTimeFieldType.weekyear() || first.getType() == DateTimeFieldType.weekyearOfCentury() ||\n+                first.getType() == DateTimeFieldType.year()) &&\n+                compareReverse(firstDurationField, DurationFieldType.days().getField(iChrono)) > 0) {\n+            roundFloor = true;\n+            break;\n+        }\n+    }\n+\n+    if (roundFloor) {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].iField.roundFloor(millis);\n+        }\n+        for (int i = count - 1; i >= 0; i--) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}