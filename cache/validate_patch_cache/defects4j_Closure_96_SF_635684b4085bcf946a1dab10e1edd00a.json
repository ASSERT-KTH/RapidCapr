{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n                    \" and no more than \" + (maxArgs - minArgs) + \" argument(s)\" : \"\");\n    throw new RuntimeException(\"Invalid argument count: \" + call);\n  }\n\n  Iterator<Node> arguments = call.children().iterator();\n  // Skip the function name.\n  arguments.next();\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  Node parameter;\n  Node argument = null;\n  boolean varargsSeen = false;\n\n  for (int argIndex = 1; argIndex <= numArgs; argIndex++) {\n    parameter = parameters.hasNext() ? parameters.next() : null;\n    if (varargsSeen && parameter != null) {\n      parameter = parameter.getLastChild();\n    }\n    argument = arguments.next();\n    validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, argIndex);\n    if (parameter == null || !parameter.isVarArgs()) {\n      varargsSeen = false;\n    } else {\n      varargsSeen = true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..34e937e8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (minArgs > numArgs || maxArgs < numArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            maxArgs != Integer.MAX_VALUE ?\n+                    \" and no more than \" + (maxArgs - minArgs) + \" argument(s)\" : \"\");\n+    throw new RuntimeException(\"Invalid argument count: \" + call);\n+  }\n+\n+  Iterator<Node> arguments = call.children().iterator();\n+  // Skip the function name.\n+  arguments.next();\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  Node parameter;\n+  Node argument = null;\n+  boolean varargsSeen = false;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  for (int argIndex = 1; argIndex <= numArgs; argIndex++) {\n+    parameter = parameters.hasNext() ? parameters.next() : null;\n+    if (varargsSeen && parameter != null) {\n+      parameter = parameter.getLastChild();\n+    }\n+    argument = arguments.next();\n+    validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, argIndex);\n+    if (parameter == null || !parameter.isVarArgs()) {\n+      varargsSeen = false;\n+    } else {\n+      varargsSeen = true;\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<-2>",
    "test_result": "FAIL"
}