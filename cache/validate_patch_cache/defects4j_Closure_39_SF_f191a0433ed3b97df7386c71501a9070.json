{
    "patch": "public boolean canBeCalled() {\n  return isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    Set<String> printedProperties = new HashSet<>();\n    StringBuilder sb = new StringBuilder();\n\n    sb.append(\"{\");\n\n    ObjectType current = this;\n    int numPropertiesPrinted = 0;\n    while (current != null && !current.isNativeObjectType() &&\n           numPropertiesPrinted < MAX_PRETTY_PRINTED_PROPERTIES) {\n      for (String property : current.getOwnPropertyNames()) {\n        if (printedProperties.contains(property)) {\n          continue;\n        }\n\n        if (numPropertiesPrinted > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(current.getPropertyType(property).toString());\n\n        printedProperties.add(property);\n        ++numPropertiesPrinted;\n\n        if (numPropertiesPrinted >= MAX_PRETTY_PRINTED_PROPERTIES) {\n          break;\n        }\n      }\n      current = current.getImplicitPrototype();\n    }\n\n    if (numPropertiesPrinted >= MAX_PRETTY_PRINTED_PROPERTIES) {\n      sb.append(\", ...\");\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..a1a7033b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,62 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n+public boolean canBeCalled() {\n+  return isRegexpType();\n+}\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  } else if (prettyPrint) {\n+    // Don't pretty print recursively.\n+    prettyPrint = false;\n+\n+    Set<String> printedProperties = new HashSet<>();\n+    StringBuilder sb = new StringBuilder();\n+\n+    sb.append(\"{\");\n+\n+    ObjectType current = this;\n+    int numPropertiesPrinted = 0;\n+    while (current != null && !current.isNativeObjectType() &&\n+           numPropertiesPrinted < MAX_PRETTY_PRINTED_PROPERTIES) {\n+      for (String property : current.getOwnPropertyNames()) {\n+        if (printedProperties.contains(property)) {\n+          continue;\n+        }\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n+        if (numPropertiesPrinted > 0) {\n           sb.append(\", \");\n         }\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        sb.append(current.getPropertyType(property).toString());\n+\n+        printedProperties.add(property);\n+        ++numPropertiesPrinted;\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n+        if (numPropertiesPrinted >= MAX_PRETTY_PRINTED_PROPERTIES) {\n           break;\n         }\n       }\n+      current = current.getImplicitPrototype();\n+    }\n \n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n+    if (numPropertiesPrinted >= MAX_PRETTY_PRINTED_PROPERTIES) {\n+      sb.append(\", ...\");\n     }\n+\n+    sb.append(\"}\");\n+\n+    prettyPrint = true;\n+    return sb.toString();\n+  } else {\n+    return \"{...}\";\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}