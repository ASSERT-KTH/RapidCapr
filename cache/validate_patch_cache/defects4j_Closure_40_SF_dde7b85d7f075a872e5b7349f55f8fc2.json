{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // Record global variable and function declarations\n    if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n            NameInformation ns = createNameInformation(t, n, parent);\n            Preconditions.checkNotNull(ns);\n            recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n            Node nameNode = n.getFirstChild();\n            NameInformation ns = createNameInformation(t, nameNode, n);\n            if (ns != null) {\n                JsName nameInfo = getName(nameNode.getString(), true);\n                recordSet(nameInfo.name, nameNode);\n            }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n            NameInformation ns = createNameInformation(t, n, parent);\n            if (ns != null) {\n                recordSet(ns.name, n);\n            }\n        }\n    }\n\n    // Record assignments and call sites\n    if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n            if (ns.isPrototype) {\n                recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n            } else {\n                if (nameNode.isName()) {\n                    recordSet(ns.name, nameNode);\n                } else {\n                    // The code contains an expression on the left-hand-side of the assignment,\n                    // so we need to visit that expression to record any assignments to its inner names.\n                    NodeTraversal.traverseEs6(compiler, nameNode.getFirstChild(), new InnerNameVisitor(t, ns.name));\n                }\n            }\n        }\n    } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n            JsName name = getName(ns.name, false);\n            if (name != null) {\n                refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n            }\n        }\n    }\n}\n\nprivate class InnerNameVisitor extends NodeTraversal.AbstractShallowCallback {\n    private final NodeTraversal outerTraversal;\n    private final String outerName;\n\n    InnerNameVisitor(NodeTraversal outerTraversal, String outerName) {\n        this.outerTraversal = outerTraversal;\n        this.outerName = outerName;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName()) {\n            String innerName = n.getString();\n            String fullName = outerName + \".\" + innerName;\n            recordSet(fullName, n.cloneTree());\n            outerTraversal.getCompiler().reportCodeChange();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..7f27c189 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,77 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Record global variable and function declarations\n+    if (t.inGlobalScope()) {\n         if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n+            NameInformation ns = createNameInformation(t, n, parent);\n+            Preconditions.checkNotNull(ns);\n+            recordSet(ns.name, n);\n         } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n+            Node nameNode = n.getFirstChild();\n+            NameInformation ns = createNameInformation(t, nameNode, n);\n+            if (ns != null) {\n+                JsName nameInfo = getName(nameNode.getString(), true);\n+                recordSet(nameInfo.name, nameNode);\n+            }\n         } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+            NameInformation ns = createNameInformation(t, n, parent);\n+            if (ns != null) {\n+                recordSet(ns.name, n);\n+            }\n         }\n-      }\n+    }\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n+    // Record assignments and call sites\n+    if (n.isAssign()) {\n         Node nameNode = n.getFirstChild();\n \n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+            if (ns.isPrototype) {\n+                recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+            } else {\n+                if (nameNode.isName()) {\n+                    recordSet(ns.name, nameNode);\n+                } else {\n+                    // The code contains an expression on the left-hand-side of the assignment,\n+                    // so we need to visit that expression to record any assignments to its inner names.\n+                    NodeTraversal.traverseEs6(compiler, nameNode.getFirstChild(), new InnerNameVisitor(t, ns.name));\n+                }\n+            }\n         }\n-      } else if (n.isCall()) {\n+    } else if (n.isCall()) {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+            JsName name = getName(ns.name, false);\n+            if (name != null) {\n+                refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n+            }\n         }\n-      }\n     }\n+}\n+\n+private class InnerNameVisitor extends NodeTraversal.AbstractShallowCallback {\n+    private final NodeTraversal outerTraversal;\n+    private final String outerName;\n+\n+    InnerNameVisitor(NodeTraversal outerTraversal, String outerName) {\n+        this.outerTraversal = outerTraversal;\n+        this.outerName = outerName;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName()) {\n+            String innerName = n.getString();\n+            String fullName = outerName + \".\" + innerName;\n+            recordSet(fullName, n.cloneTree());\n+            outerTraversal.getCompiler().reportCodeChange();\n+        }\n+    }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}