{
    "patch": "          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n            Node thenExpr = thenOp.removeFirstChild();\n            Node elseExpr = elseOp.getLastChild().detachFromParent();\n            if (!NodeUtil.mayHaveSideEffects(lhs)) {\n              n.removeChild(cond);\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n              Node assign = IR.assign(lhs.cloneTree(), hookNode).srcref(thenOp);\n              Node expr = NodeUtil.newExpr(assign);\n              parent.replaceChild(n, expr);\n              reportCodeChange();\n\n              return expr;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..53f75a09 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,20 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n+            Node thenExpr = thenOp.removeFirstChild();\n+            Node elseExpr = elseOp.getLastChild().detachFromParent();\n+            if (!NodeUtil.mayHaveSideEffects(lhs)) {\n+              n.removeChild(cond);\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+              Node assign = IR.assign(lhs.cloneTree(), hookNode).srcref(thenOp);\n+              Node expr = NodeUtil.newExpr(assign);\n+              parent.replaceChild(n, expr);\n+              reportCodeChange();\n+\n+              return expr;\n+            }\n+          }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}