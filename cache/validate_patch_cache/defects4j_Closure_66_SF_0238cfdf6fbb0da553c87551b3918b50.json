{
    "patch": "public static double getTypedPercent(double[][] js) {\n    double total = 0.0;\n    double correct = 0.0;\n    for (int i = 0; i < js.length; i++) {\n        for (int j = 0; j < js[0].length; j++) {\n            if (j == 0) {\n                total++;\n                if (js[i][j] == 1.0) {\n                    correct++;\n                }\n            }\n        }\n    }\n    return (correct / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ef47f52c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(double[][] js) {\n+    double total = 0.0;\n+    double correct = 0.0;\n+    for (int i = 0; i < js.length; i++) {\n+        for (int j = 0; j < js[0].length; j++) {\n+            if (j == 0) {\n+                total++;\n+                if (js[i][j] == 1.0) {\n+                    correct++;\n+                }\n+            }\n+        }\n+    }\n+    return (correct / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}