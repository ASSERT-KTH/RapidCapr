{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // Parse the text into a temporary instant\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    long parsedInstantLocal = bucket.computeMillis(true, text);\n\n    // Only update the input instant if the parsed value is different\n    // and is not outside the allowed range\n    if (parsedInstantLocal != instantLocal) {\n        DurationField rangeField = chrono.dayOfMonth();\n        DurationField field = bucket.extractField(rangeField);\n        int fieldValue = bucket.getFieldValue(field);\n\n        int range = safeGetMaximumValue(rangeField);\n        if (fieldValue >= 1 && fieldValue <= range) {\n            // Use the parsed instant, adjusting the chronology's time zone\n            instantLocal = parsedInstantLocal;\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            instant.setMillis(instantLocal - chrono.getZone().getOffset(instantLocal));\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n    }\n    return newPos;\n}\n\nprivate static int safeGetMaximumValue(DurationField field) {\n    try {\n        return field.getMaximumValue();\n    } catch (ArithmeticException e) {\n        // Fall back to a safe maximum value\n        return Integer.MAX_VALUE;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..5e7cdfbd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,60 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    // Parse the text into a temporary instant\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    long parsedInstantLocal = bucket.computeMillis(true, text);\n+\n+    // Only update the input instant if the parsed value is different\n+    // and is not outside the allowed range\n+    if (parsedInstantLocal != instantLocal) {\n+        DurationField rangeField = chrono.dayOfMonth();\n+        DurationField field = bucket.extractField(rangeField);\n+        int fieldValue = bucket.getFieldValue(field);\n+\n+        int range = safeGetMaximumValue(rangeField);\n+        if (fieldValue >= 1 && fieldValue <= range) {\n+            // Use the parsed instant, adjusting the chronology's time zone\n+            instantLocal = parsedInstantLocal;\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setChronology(chrono);\n+            instant.setMillis(instantLocal - chrono.getZone().getOffset(instantLocal));\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n         }\n-        return newPos;\n     }\n+    return newPos;\n+}\n+\n+private static int safeGetMaximumValue(DurationField field) {\n+    try {\n+        return field.getMaximumValue();\n+    } catch (ArithmeticException e) {\n+        // Fall back to a safe maximum value\n+        return Integer.MAX_VALUE;\n+    }\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}