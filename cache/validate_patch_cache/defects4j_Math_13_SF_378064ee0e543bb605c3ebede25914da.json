{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxEigenvalueCount = 1000; // Set a limit for the number of eigenvalues\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec;\n    if (n > maxEigenvalueCount) {\n        // For large matrices, use another algorithm for decomposition\n        dec = new EigenDecomposition(new QRDecomposition(m).getR());\n    } else {\n        // For smaller matrices, use EigenDecomposition\n        dec = new EigenDecomposition(m);\n    }\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    final boolean hasNegativeEigenvalues = Arrays.stream(realEigenvalues)\n        .anyMatch(e -> Double.compare(e, 0.0) < 0);\n    final boolean hasNonRealEigenvalues = Arrays.stream(realEigenvalues)\n        .anyMatch(e -> Double.compare(e, 0.0) == 0 && Double.compare(dec.getImagEigenvalue(0), 0.0) != 0);\n    if (hasNegativeEigenvalues || hasNonRealEigenvalues) {\n        throw new MathUnsupportedOperationException(\"Matrix square root is not defined for matrices \" +\n                                                      \"with non-positive real eigenvalues or non-real eigenvalues\");\n    }\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8f99264ef 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxEigenvalueCount = 1000; // Set a limit for the number of eigenvalues\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec;\n+    if (n > maxEigenvalueCount) {\n+        // For large matrices, use another algorithm for decomposition\n+        dec = new EigenDecomposition(new QRDecomposition(m).getR());\n+    } else {\n+        // For smaller matrices, use EigenDecomposition\n+        dec = new EigenDecomposition(m);\n     }\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    final boolean hasNegativeEigenvalues = Arrays.stream(realEigenvalues)\n+        .anyMatch(e -> Double.compare(e, 0.0) < 0);\n+    final boolean hasNonRealEigenvalues = Arrays.stream(realEigenvalues)\n+        .anyMatch(e -> Double.compare(e, 0.0) == 0 && Double.compare(dec.getImagEigenvalue(0), 0.0) != 0);\n+    if (hasNegativeEigenvalues || hasNonRealEigenvalues) {\n+        throw new MathUnsupportedOperationException(\"Matrix square root is not defined for matrices \" +\n+                                                      \"with non-positive real eigenvalues or non-real eigenvalues\");\n+    }\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}