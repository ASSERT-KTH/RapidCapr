{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    if (cfgNode == null) {\n        return false;\n    }\n    List<Node> children = cfgNode.getChildren();\n    for (Node child : children) {\n        if (child.isTry()) {\n            Node tryNode = child;\n            List<Node> tryChildren = tryNode.getChildren();\n            for (Node tryChild : tryChildren) {\n                if (tryChild.isCatch()) {\n                    return true;\n                }\n            }\n        } else {\n            if (hasExceptionHandler(child)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..58aa9894 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -156,9 +156,28 @@ class MaybeReachingVariableUse extends\n     return output;\n   }\n \n-  private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    if (cfgNode == null) {\n+        return false;\n+    }\n+    List<Node> children = cfgNode.getChildren();\n+    for (Node child : children) {\n+        if (child.isTry()) {\n+            Node tryNode = child;\n+            List<Node> tryChildren = tryNode.getChildren();\n+            for (Node tryChild : tryChildren) {\n+                if (tryChild.isCatch()) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            if (hasExceptionHandler(child)) {\n+                return true;\n+            }\n+        }\n+    }\n     return false;\n-  }\n+}\n \n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}