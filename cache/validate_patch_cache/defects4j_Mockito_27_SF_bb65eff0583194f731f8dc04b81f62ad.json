{
    "patch": "import org.mockito.cglib.proxy.Callback;\nimport org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\nimport org.mockito.internal.creation.cglib.MockHandlerImpl;\nimport org.mockito.internal.creation.cglib.MockitoMethodProxy;\n\nimport java.lang.reflect.Method;\n\npublic class MockHandler<T> implements org.mockito.internal.creation.cglib.MethodInterceptor {\n    MockHandlerInterface<T> mockHandler;\n\n    public MockHandler(MockHandlerInterface<T> mockHandler) {\n        this.mockHandler = mockHandler;\n    }\n\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy)\n            throws Throwable {\n        MockitoMethodProxy mockitoProxy = new MockitoMethodProxy(proxy);\n\n        boolean exceptionThrown = false;\n        // save the throwable\n        Throwable throwable = null;\n        try {\n            T mock = mockHandler.getMock();\n            // get the actual mock method by searching for the implementation method on the mock object\n            Method mockMethod = mock.getClass().getMethod(method.getName(), method.getParameterTypes());\n            mockHandler.handle(mockMethod, args);\n            // Proxy method call to the mock instance. Apply any of the Mockito mocks when necessary\n            Object result = mockitoProxy.invokeSuper(obj, args);\n            return mockHandler.handleResult(mockMethod, result);\n        } catch (Throwable t) {\n            throwable = t;\n            exceptionThrown = true;\n            throw t;\n        } finally {\n            if (!exceptionThrown) {\n                mockHandler.verify(method, args);\n            }\n            mockHandler.clear(method);\n            // if we get here, the mock object should be passed to monitor and it'll do its thing\n            MockMonitor monitor = GlobalConfiguration.getMockMonitor();\n            if (monitor != null) {\n                if (throwable != null) {\n                    monitor.onMethodCallError(args, throwable);\n                } else {\n                    monitor.onMethodCall(args);\n                }\n            }\n\n        }\n    }\n\n    public static <T> MockHandlerImpl<T> createMockHandler(T mock) {\n        return MockHandlerImpl.createMockHandler(mock);\n    }\n\n    public static <T> MockHandlerImpl<T> createMockHandler(T mock, MockCreationSettings<T> settings) {\n        return MockHandlerImpl.createMockHandler(mock, settings);\n    }\n\n    public static <T> MockHandlerImpl<T> createMockHandler(T mock, MockCreationSettings<T> settings, MockName name) {\n        return MockHandlerImpl.createMockHandler(mock, settings, name);\n    }\n\n    public static <T> MockHandlerImpl<T> createStaticMockHandler(Class<T> type, MockCreationSettings<T> settings, MockName name) {\n        return MockHandlerImpl.createStaticMockHandler(type, settings, name);\n    }\n\n    public static <T> MockHandlerImpl<T> createDelegatingMockHandler(T mock) {\n        return MockHandlerImpl.createDelegatingMockHandler(mock);\n    }\n\n    public static <T> MockHandlerImpl<T> createDelegatingMockHandler(T mock, MockCreationSettings<T> settings) {\n        return MockHandlerImpl.createDelegatingMockHandler(mock, settings);\n    }\n    \n    // add the resetMock function to reset the mock's callback\n    public <T> void resetMock(T mock) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = factory.getCallbacks();\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptor) {\n                callbacks[i] = null;\n            }\n        }\n        factory.setCallbacks(callbacks);\n        factory.setCallbackType(MethodInterceptor.class);\n        factory.getCallbacks()[0] = new MockHandler<T>(MockHandlerImpl.getMockHandler(mock));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a30ce0c6f 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,98 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Callback;\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.internal.creation.cglib.MockHandlerImpl;\n+import org.mockito.internal.creation.cglib.MockitoMethodProxy;\n+\n+import java.lang.reflect.Method;\n+\n+public class MockHandler<T> implements org.mockito.internal.creation.cglib.MethodInterceptor {\n+    MockHandlerInterface<T> mockHandler;\n+\n+    public MockHandler(MockHandlerInterface<T> mockHandler) {\n+        this.mockHandler = mockHandler;\n+    }\n+\n+    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy)\n+            throws Throwable {\n+        MockitoMethodProxy mockitoProxy = new MockitoMethodProxy(proxy);\n+\n+        boolean exceptionThrown = false;\n+        // save the throwable\n+        Throwable throwable = null;\n+        try {\n+            T mock = mockHandler.getMock();\n+            // get the actual mock method by searching for the implementation method on the mock object\n+            Method mockMethod = mock.getClass().getMethod(method.getName(), method.getParameterTypes());\n+            mockHandler.handle(mockMethod, args);\n+            // Proxy method call to the mock instance. Apply any of the Mockito mocks when necessary\n+            Object result = mockitoProxy.invokeSuper(obj, args);\n+            return mockHandler.handleResult(mockMethod, result);\n+        } catch (Throwable t) {\n+            throwable = t;\n+            exceptionThrown = true;\n+            throw t;\n+        } finally {\n+            if (!exceptionThrown) {\n+                mockHandler.verify(method, args);\n+            }\n+            mockHandler.clear(method);\n+            // if we get here, the mock object should be passed to monitor and it'll do its thing\n+            MockMonitor monitor = GlobalConfiguration.getMockMonitor();\n+            if (monitor != null) {\n+                if (throwable != null) {\n+                    monitor.onMethodCallError(args, throwable);\n+                } else {\n+                    monitor.onMethodCall(args);\n+                }\n+            }\n+\n+        }\n+    }\n+\n+    public static <T> MockHandlerImpl<T> createMockHandler(T mock) {\n+        return MockHandlerImpl.createMockHandler(mock);\n+    }\n+\n+    public static <T> MockHandlerImpl<T> createMockHandler(T mock, MockCreationSettings<T> settings) {\n+        return MockHandlerImpl.createMockHandler(mock, settings);\n+    }\n+\n+    public static <T> MockHandlerImpl<T> createMockHandler(T mock, MockCreationSettings<T> settings, MockName name) {\n+        return MockHandlerImpl.createMockHandler(mock, settings, name);\n+    }\n+\n+    public static <T> MockHandlerImpl<T> createStaticMockHandler(Class<T> type, MockCreationSettings<T> settings, MockName name) {\n+        return MockHandlerImpl.createStaticMockHandler(type, settings, name);\n+    }\n+\n+    public static <T> MockHandlerImpl<T> createDelegatingMockHandler(T mock) {\n+        return MockHandlerImpl.createDelegatingMockHandler(mock);\n+    }\n+\n+    public static <T> MockHandlerImpl<T> createDelegatingMockHandler(T mock, MockCreationSettings<T> settings) {\n+        return MockHandlerImpl.createDelegatingMockHandler(mock, settings);\n+    }\n+    \n+    // add the resetMock function to reset the mock's callback\n+    public <T> void resetMock(T mock) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = factory.getCallbacks();\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptor) {\n+                callbacks[i] = null;\n+            }\n+        }\n+        factory.setCallbacks(callbacks);\n+        factory.setCallbackType(MethodInterceptor.class);\n+        factory.getCallbacks()[0] = new MockHandler<T>(MockHandlerImpl.getMockHandler(mock));\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}