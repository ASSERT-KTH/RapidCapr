{
    "patch": "      if (NodeUtil.mayHaveSideEffects(n) ||\n          NodeUtil.getEnclosingType(n) == Token.CLASS) {\n        // if this function definition may have side-effects (such as code\n        // generation), or it is inside a class/constructor, then don't traverse\n        // it as it cannot be turned into a static method. E.g., in\n        // var f = function() { return 1; };\n        // a(); f(); b();\n        // if we traverse f(), then we'll move its definition to the top\n        // level, and we'll end up with\n        // var f; a(); f(); b(); f=function(){return1};\n        // f will be invoked prematurely.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..41978ae8 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.mayHaveSideEffects(n) ||\n+          NodeUtil.getEnclosingType(n) == Token.CLASS) {\n+        // if this function definition may have side-effects (such as code\n+        // generation), or it is inside a class/constructor, then don't traverse\n+        // it as it cannot be turned into a static method. E.g., in\n+        // var f = function() { return 1; };\n+        // a(); f(); b();\n+        // if we traverse f(), then we'll move its definition to the top\n+        // level, and we'll end up with\n+        // var f; a(); f(); b(); f=function(){return1};\n+        // f will be invoked prematurely.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}