{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double SMALL = 1e-12; // small value to prevent numerical issues\n\n    // rescale both vectors without losing precision\n    double s1 = v1.getNorm();\n    double s2 = v2.getNorm();\n\n    // if one vector has a norm of zero, return zero vector\n    if (s1 < SMALL || s2 < SMALL) {\n        return Vector3D.ZERO;\n    }\n\n    // reduce cancellation errors and avoid divide-by-zero errors\n    double rho = 0.25 * ((v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) / s1) / s2;\n\n    Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(), v1.getY() - rho * v2.getY(), v1.getZ() - rho * v2.getZ());\n\n    // calculate cross product\n    double x = v3.getY() * v2.getZ() - v3.getZ() * v2.getY();\n    double y = v3.getZ() * v2.getX() - v3.getX() * v2.getZ();\n    double z = v3.getX() * v2.getY() - v3.getY() * v2.getX();\n\n    // if cross product is zero, return zero vector\n    if (x < SMALL && x > -SMALL && y < SMALL && y > -SMALL && z < SMALL && z > -SMALL) {\n        return Vector3D.ZERO;\n    }\n\n    return new Vector3D(x, y, z);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..b5ddf107c 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,35 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double SMALL = 1e-12; // small value to prevent numerical issues\n \n+    // rescale both vectors without losing precision\n+    double s1 = v1.getNorm();\n+    double s2 = v2.getNorm();\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    // if one vector has a norm of zero, return zero vector\n+    if (s1 < SMALL || s2 < SMALL) {\n+        return Vector3D.ZERO;\n+    }\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    // reduce cancellation errors and avoid divide-by-zero errors\n+    double rho = 0.25 * ((v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) / s1) / s2;\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(), v1.getY() - rho * v2.getY(), v1.getZ() - rho * v2.getZ());\n \n+    // calculate cross product\n+    double x = v3.getY() * v2.getZ() - v3.getZ() * v2.getY();\n+    double y = v3.getZ() * v2.getX() - v3.getX() * v2.getZ();\n+    double z = v3.getX() * v2.getY() - v3.getY() * v2.getX();\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // if cross product is zero, return zero vector\n+    if (x < SMALL && x > -SMALL && y < SMALL && y > -SMALL && z < SMALL && z > -SMALL) {\n+        return Vector3D.ZERO;\n+    }\n \n-  }\n+    return new Vector3D(x, y, z);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}