{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      Node parent = n.getParent();\n      if (!parent.isGetProp() && !parent.isGetElem() &&\n          !NodeUtil.isNameDeclaration(parent) &&\n          !NodeUtil.isEnhancedFor(parent)) {\n        report(t, n, FUNCTION_CALL_NON_GET_NON_CALLABLE, childType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..5fd95aa5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      Node parent = n.getParent();\n+      if (!parent.isGetProp() && !parent.isGetElem() &&\n+          !NodeUtil.isNameDeclaration(parent) &&\n+          !NodeUtil.isEnhancedFor(parent)) {\n+        report(t, n, FUNCTION_CALL_NON_GET_NON_CALLABLE, childType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}