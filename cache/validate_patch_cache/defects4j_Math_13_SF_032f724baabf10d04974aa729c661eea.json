{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n        RealMatrix s = svd.getS();\n        RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n\n        for (int i = 0; i < s.getRowDimension(); i++) {\n            for (int j = 0; j < s.getColumnDimension(); j++) {\n                if (i == j) {\n                    sRoot.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n                } else {\n                    sRoot.setEntry(i, j, 0);\n                }\n            }\n        }\n\n        RealMatrix u = svd.getU();\n        RealMatrix v = svd.getVT();\n\n        return u.multiply(sRoot).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bc03dbb9d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        RealMatrix s = svd.getS();\n+        RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n+\n+        for (int i = 0; i < s.getRowDimension(); i++) {\n+            for (int j = 0; j < s.getColumnDimension(); j++) {\n+                if (i == j) {\n+                    sRoot.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n+                } else {\n+                    sRoot.setEntry(i, j, 0);\n+                }\n+            }\n+        }\n+\n+        RealMatrix u = svd.getU();\n+        RealMatrix v = svd.getVT();\n+\n+        return u.multiply(sRoot).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}