{
    "patch": "                int diff = offsetLocal - offsetAdjusted;\n                if (diff < 0) {\n                    // we just adjusted the offset downwards so need to ensure\n                    // that we're on or after the next transition\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                } else if (diff > 0) {\n                    // we just adjusted the offset upwards so need to ensure\n                    // that we're before the last transition\n                    long lastLocal = previousTransition(instantAdjusted);\n                    long lastAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                    if (lastLocal >= lastAdjusted) {\n                        return offsetLocal;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..739a3aa0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                int diff = offsetLocal - offsetAdjusted;\n+                if (diff < 0) {\n+                    // we just adjusted the offset downwards so need to ensure\n+                    // that we're on or after the next transition\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                } else if (diff > 0) {\n+                    // we just adjusted the offset upwards so need to ensure\n+                    // that we're before the last transition\n+                    long lastLocal = previousTransition(instantAdjusted);\n+                    long lastAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                    if (lastLocal >= lastAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}