{
    "patch": "        MockHandler<T> oldMockHandler = getMockHandler(mock);\n        if(oldMockHandler != null) {\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n            MockitoSession mockitoSession = Mockito.mockitoSession()\n                    .initMocks(newMockHandler.getMock())\n                    .startMocking();\n            try {\n                ((MockitoMock) mock).setMockitoSession(mockitoSession);\n                \n                if (mock instanceof Factory) {\n                    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(oldMockHandler, (MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n                    ((Factory)mock).setCallback(0, newFilter);\n                }\n                \n                MethodInvocationReport report = new MethodInvocationReportBuilder()\n                        .mockName(newMockHandler.getMockName().toString())\n                        .methodName(\"reset\")\n                        .build();\n                Invocation invocation = new InvocationBuilder().reporting(this).mock(newMockHandler.getMock()).toInvocation();\n                report.setInvocation(invocation);\n            } finally {\n                mockitoSession.finishMocking();\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c5cd035ed 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,33 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> oldMockHandler = getMockHandler(mock);\n+        if(oldMockHandler != null) {\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+            MockitoSession mockitoSession = Mockito.mockitoSession()\n+                    .initMocks(newMockHandler.getMock())\n+                    .startMocking();\n+            try {\n+                ((MockitoMock) mock).setMockitoSession(mockitoSession);\n+                \n+                if (mock instanceof Factory) {\n+                    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(oldMockHandler, (MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+                    ((Factory)mock).setCallback(0, newFilter);\n+                }\n+                \n+                MethodInvocationReport report = new MethodInvocationReportBuilder()\n+                        .mockName(newMockHandler.getMockName().toString())\n+                        .methodName(\"reset\")\n+                        .build();\n+                Invocation invocation = new InvocationBuilder().reporting(this).mock(newMockHandler.getMock()).toInvocation();\n+                report.setInvocation(invocation);\n+            } finally {\n+                mockitoSession.finishMocking();\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: variable oldMockHandler is already defined in method <T>resetMock(T)",
    "test_result": "ERROR"
}