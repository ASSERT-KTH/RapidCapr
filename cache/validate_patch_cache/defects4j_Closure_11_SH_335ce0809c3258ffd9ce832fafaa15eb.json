{
    "patch": "  @Override\n  public Node maybeSkipFunction(NodeTraversal t, Node n, Node parent) {\n    if (parent == null || n.isStringKey() || n.isMemberFunctionDef()) {\n      return n;\n    } else if (parent.isVar()) {\n      Node gramps = parent.getParent();\n      if (gramps.isForOf() || gramps.isForAwaitOf()) {\n        // for (let x of arr) { } or for await (let x of arr) { }\n        // let x = arr[some_index_variable];\n        return n;\n      }\n    } else if (parent instanceof NodeUtil.ImmutableResult) {\n      return null;\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      return null;\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}