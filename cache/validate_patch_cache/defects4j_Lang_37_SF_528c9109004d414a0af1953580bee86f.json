{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null && array2 != null) {\n        return array2.clone();\n    } else if (array1 != null && array2 == null) {\n        return array1.clone();\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (type1 == null && type2 == null) {\n        throw new IllegalArgumentException(\"Cannot add arrays of unknown type\");\n    } else if (type1 == null) {\n        final T[] joinedArray = (T[]) Array.newInstance(type2, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else if (type2 == null) {\n        final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n    }\n\n    final int length1 = array1.length;\n    final int length2 = array2.length;\n\n    @SuppressWarnings(\"unchecked\")\n    final T[] result = (T[])Array.newInstance(type1, length1 + length2);\n\n    System.arraycopy(array1, 0, result, 0, length1);\n    System.arraycopy(array2, 0, result, length1, length2);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..22f52ff0 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,46 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n-        }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null && array2 == null) {\n+        return null;\n+    } else if (array1 == null && array2 != null) {\n+        return array2.clone();\n+    } else if (array1 != null && array2 == null) {\n+        return array1.clone();\n+    }\n+\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+\n+    if (type1 == null && type2 == null) {\n+        throw new IllegalArgumentException(\"Cannot add arrays of unknown type\");\n+    } else if (type1 == null) {\n+        final T[] joinedArray = (T[]) Array.newInstance(type2, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n         return joinedArray;\n+    } else if (type2 == null) {\n+        final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    } else if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n     }\n \n+    final int length1 = array1.length;\n+    final int length2 = array2.length;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    final T[] result = (T[])Array.newInstance(type1, length1 + length2);\n+\n+    System.arraycopy(array1, 0, result, 0, length1);\n+    System.arraycopy(array2, 0, result, length1, length2);\n+\n+    return result;\n+}\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}