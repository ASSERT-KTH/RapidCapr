{
    "patch": "        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            int index = 0;\n            while (index < this.data.size() && ((TimeSeriesDataItem) this.data.get(index)).getPeriod().compareTo(startPeriod) < 0) {\n                ++index; // skip items that are before the interval range\n            }\n\n            while (index < this.data.size() && ((TimeSeriesDataItem) this.data.get(index)).getPeriod().compareTo(endPeriod) <= 0) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index++);\n                if (copy.getDataItem(item.getPeriod()) == null) {\n                    copy.add((TimeSeriesDataItem) item.clone());\n                }\n            }\n        }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..7740db8 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,20 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        copy.data = new java.util.ArrayList();\n+        if (this.data.size() > 0) {\n+            int index = 0;\n+            while (index < this.data.size() && ((TimeSeriesDataItem) this.data.get(index)).getPeriod().compareTo(startPeriod) < 0) {\n+                ++index; // skip items that are before the interval range\n+            }\n+\n+            while (index < this.data.size() && ((TimeSeriesDataItem) this.data.get(index)).getPeriod().compareTo(endPeriod) <= 0) {\n+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index++);\n+                if (copy.getDataItem(item.getPeriod()) == null) {\n+                    copy.add((TimeSeriesDataItem) item.clone());\n+                }\n+            }\n+        }\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}