{
    "patch": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (NodeUtil.isEnhancedFor(parent)) {\n          // The iteration variable of a for-of loop can use the values of the symbols\n          // defined in the for-loop so we mark them as dependency scope.\n          recordDepScope(parent.getFirstChild(), ns);\n        } else if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // The iteration of a for-loop can use the values of the symbols\n          // defined in the for-loop so we mark them as dependency scope.\n          if ((parent.getFirstChild() == n && NodeUtil.isNameDeclaration(parent.getParent()))\n              || parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..93123cb5 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -560,17 +560,15 @@ final class NameAnalyzer implements CompilerPass {\n       Node parent = n.getParent();\n       NameInformation ns = createNameInformation(t, nameNode);\n       if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n+        if (NodeUtil.isEnhancedFor(parent)) {\n+          // The iteration variable of a for-of loop can use the values of the symbols\n+          // defined in the for-loop so we mark them as dependency scope.\n+          recordDepScope(parent.getFirstChild(), ns);\n+        } else if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+          // The iteration of a for-loop can use the values of the symbols\n+          // defined in the for-loop so we mark them as dependency scope.\n+          if ((parent.getFirstChild() == n && NodeUtil.isNameDeclaration(parent.getParent()))\n+              || parent.getFirstChild().getNext() != n) {\n             recordDepScope(recordNode, ns);\n           } else {\n             recordDepScope(nameNode, ns);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}