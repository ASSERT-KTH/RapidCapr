{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n  \n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n  \n  String joinString = NodeUtil.getStringValue(right);\n  \n  if (joinString == null) {\n    return;\n  }\n  \n  Node foldedNode;\n  Node commaNode = Node.newString(\",\");\n  int childCount = arrayNode.getChildCount();\n  \n  // If there are no children, replace with empty string\n  if (childCount == 0) {\n    foldedNode = Node.newString(\"\");\n  }\n  // If there is only one child, replace with the child itself\n  else if (childCount == 1) {\n    Node firstChild = arrayNode.getFirstChild();\n    // If the child is a string, simply replace with the child itself\n    if (NodeUtil.isStringLiteral(firstChild)) {\n      foldedNode = firstChild.cloneNode();\n    }\n    // Otherwise, convert the child to a string and add quotes\n    else {\n      foldedNode = Node.newString(\n          NodeUtil.getStringValue(firstChild),\n          firstChild);\n    }\n  }\n  // Otherwise, iterate through the children and join them with the separator\n  else {\n    StringBuilder foldedString = new StringBuilder();\n    for (Node child : arrayNode.children()) {\n      // If the child is not a string, bail out\n      if (!NodeUtil.isStringLiteral(child)) {\n        return;\n      }\n      if (foldedString.length() > 0) {\n        foldedString.append(joinString);\n      }\n      foldedString.append(NodeUtil.getStringValue(child));\n    }\n    // Convert the folded string to a string node\n    foldedNode = Node.newString(foldedString.toString());\n  }\n  \n  // Replace the original node with the folded node\n  parent.replaceChild(n, foldedNode);\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..a137280f 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,69 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n-\n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n+  \n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n+  \n+  String joinString = NodeUtil.getStringValue(right);\n+  \n+  if (joinString == null) {\n+    return;\n+  }\n+  \n+  Node foldedNode;\n+  Node commaNode = Node.newString(\",\");\n+  int childCount = arrayNode.getChildCount();\n+  \n+  // If there are no children, replace with empty string\n+  if (childCount == 0) {\n+    foldedNode = Node.newString(\"\");\n+  }\n+  // If there is only one child, replace with the child itself\n+  else if (childCount == 1) {\n+    Node firstChild = arrayNode.getFirstChild();\n+    // If the child is a string, simply replace with the child itself\n+    if (NodeUtil.isStringLiteral(firstChild)) {\n+      foldedNode = firstChild.cloneNode();\n+    }\n+    // Otherwise, convert the child to a string and add quotes\n+    else {\n+      foldedNode = Node.newString(\n+          NodeUtil.getStringValue(firstChild),\n+          firstChild);\n     }\n-\n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  }\n+  // Otherwise, iterate through the children and join them with the separator\n+  else {\n+    StringBuilder foldedString = new StringBuilder();\n+    for (Node child : arrayNode.children()) {\n+      // If the child is not a string, bail out\n+      if (!NodeUtil.isStringLiteral(child)) {\n+        return;\n       }\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+      if (foldedString.length() > 0) {\n+        foldedString.append(joinString);\n+      }\n+      foldedString.append(NodeUtil.getStringValue(child));\n     }\n-    t.getCompiler().reportCodeChange();\n+    // Convert the folded string to a string node\n+    foldedNode = Node.newString(foldedString.toString());\n   }\n+  \n+  // Replace the original node with the folded node\n+  parent.replaceChild(n, foldedNode);\n+  t.getCompiler().reportCodeChange();\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}