{
    "patch": "            // special check to see if the missed transition is at midnight\n            DateMidnight nextLocal = new DateMidnight(instantAdjusted + DateTimeConstants.MILLIS_PER_DAY, this);\n            if (nextLocal.getZone().getOffset(nextLocal) == offsetLocal) {\n                return offsetAdjusted;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..669ec1c9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,11 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // special check to see if the missed transition is at midnight\n+            DateMidnight nextLocal = new DateMidnight(instantAdjusted + DateTimeConstants.MILLIS_PER_DAY, this);\n+            if (nextLocal.getZone().getOffset(nextLocal) == offsetLocal) {\n+                return offsetAdjusted;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}