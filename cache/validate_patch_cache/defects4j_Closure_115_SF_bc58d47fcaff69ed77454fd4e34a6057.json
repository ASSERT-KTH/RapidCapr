{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node paramNode = NodeUtil.getFunctionParameters(fnNode);\n  if (paramNode == null) {\n    return CanInlineResult.NO;\n  }\n\n  Node cArg = callNode.getFirstChild().getNext();\n  Node fnParam = paramNode.getFirstChild();\n  boolean hasThis = !callNode.getFirstChild().isName();\n\n  // Skip the this object if there is one.\n  if (hasThis) {\n    cArg = cArg.getNext();\n  }\n\n  while (cArg != null && fnParam != null) {\n    // If a named argument is side-effect with a mutable reference, don't inline.\n    if (fnParam.isName() && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    // If a named argument is evaluated more than once, don't inline.\n    if (fnParam.isName()\n        && NodeUtil.getNameReferenceCount(fnNode.getLastChild(), fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n\n    cArg = cArg.getNext();\n    fnParam = fnParam.getNext();\n  }\n\n  // If there are too many arguments, don't inline.\n  if (cArg != null) {\n    return CanInlineResult.NO;\n  }\n\n  // If there are too few arguments and this function references \"arguments\".\n  if (fnParam != null) {\n    boolean referencesArguments = false;\n    NodeTraversal.traverseEs6(\n        compiler,\n        fnNode,\n        new NodeTraversal.Callback() {\n          @Override\n          public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n            // Don't traverse into nested functions.\n            return n.isFunction() ? n == fnNode : true;\n          }\n\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (referencesArguments) {\n              return;\n            }\n\n            if (n.matchesQualifiedName(\"arguments\")) {\n              referencesArguments = true;\n            }\n          }\n        });\n    if (referencesArguments) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..ceed4b5e 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,78 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node paramNode = NodeUtil.getFunctionParameters(fnNode);\n+  if (paramNode == null) {\n+    return CanInlineResult.NO;\n+  }\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+  Node cArg = callNode.getFirstChild().getNext();\n+  Node fnParam = paramNode.getFirstChild();\n+  boolean hasThis = !callNode.getFirstChild().isName();\n+\n+  // Skip the this object if there is one.\n+  if (hasThis) {\n+    cArg = cArg.getNext();\n+  }\n+\n+  while (cArg != null && fnParam != null) {\n+    // If a named argument is side-effect with a mutable reference, don't inline.\n+    if (fnParam.isName() && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      return CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    // If a named argument is evaluated more than once, don't inline.\n+    if (fnParam.isName()\n+        && NodeUtil.getNameReferenceCount(fnNode.getLastChild(), fnParam.getString()) > 1) {\n+      return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+    cArg = cArg.getNext();\n+    fnParam = fnParam.getNext();\n+  }\n+\n+  // If there are too many arguments, don't inline.\n+  if (cArg != null) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  // If there are too few arguments and this function references \"arguments\".\n+  if (fnParam != null) {\n+    boolean referencesArguments = false;\n+    NodeTraversal.traverseEs6(\n+        compiler,\n+        fnNode,\n+        new NodeTraversal.Callback() {\n+          @Override\n+          public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+            // Don't traverse into nested functions.\n+            return n.isFunction() ? n == fnNode : true;\n           }\n-        }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (referencesArguments) {\n+              return;\n+            }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+            if (n.matchesQualifiedName(\"arguments\")) {\n+              referencesArguments = true;\n+            }\n+          }\n+        });\n+    if (referencesArguments) {\n+      return CanInlineResult.NO;\n     }\n-\n-    return CanInlineResult.YES;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: local variable fnNode is accessed from within inner class; needs to be declared final",
    "test_result": "ERROR"
}