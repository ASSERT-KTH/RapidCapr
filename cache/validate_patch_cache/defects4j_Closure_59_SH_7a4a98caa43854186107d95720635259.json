{
    "patch": "if (options.checkGlobalThisLevel != CheckLevel.OFF &&\n        options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n      if (options.checkGlobalThisLevel == CheckLevel.WARNING ||\n          options.checkGlobalThisLevel == CheckLevel.ERROR) {\n        options.setWarningLevel(\n            DiagnosticGroups.GLOBAL_THIS,\n            options.checkGlobalThisLevel);\n      } else {\n        errorManager.report(\n            JSError.make(\n                RhinoErrorReporter.UNRECOGNIZED_CHECK_GLOBAL_THIS_LEVEL,\n                options.checkGlobalThisLevel.toString()));\n      }\n    } else {\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..bc2448ec 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,21 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != CheckLevel.OFF &&\n+        options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n+      if (options.checkGlobalThisLevel == CheckLevel.WARNING ||\n+          options.checkGlobalThisLevel == CheckLevel.ERROR) {\n+        options.setWarningLevel(\n+            DiagnosticGroups.GLOBAL_THIS,\n+            options.checkGlobalThisLevel);\n+      } else {\n+        errorManager.report(\n+            JSError.make(\n+                RhinoErrorReporter.UNRECOGNIZED_CHECK_GLOBAL_THIS_LEVEL,\n+                options.checkGlobalThisLevel.toString()));\n+      }\n+    } else {\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}