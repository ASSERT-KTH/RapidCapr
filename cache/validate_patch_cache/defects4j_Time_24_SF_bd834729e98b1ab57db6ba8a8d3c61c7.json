{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    // adjust base year for week year field\n    if (count > 0) {\n        DateTimeFieldType firstType = savedFields[0].iField.getType();\n\n        if (firstType == DateTimeFieldType.weekyear()) {\n            int year = findParsedValue(savedFields, DateTimeFieldType.yearOfEra(), 0);\n            int weekyear = findParsedValue(savedFields, DateTimeFieldType.weekyear(), year);\n\n            if (weekyear > year) {\n                int weeks = ISOChronology.getInstanceUTC().weekOfWeekyear().getMaximumValue();\n                if (weeks < 53 && ISOChronology.getInstanceUTC().weekYears().isLeap(weekyear)) {\n                    weeks = 52;\n                }\n\n                DateTimeField firstField = savedFields[0].iField;\n                long instant = firstField.set(0, year, weeks);\n                iSavedFields = savedFields;\n                iSavedFieldsCount = count;\n                iDefaultYear = year;\n                iMillis = instant;\n                count = 0;\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\nprivate int findParsedValue(SavedField[] savedFields, DateTimeFieldType type, int defaultValue) {\n    for (SavedField savedField : savedFields) {\n        if (savedField.iField.getType() == type) {\n            return savedField.iValue;\n        }\n    }\n    return defaultValue;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f50a466f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,78 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+\n+    // adjust base year for week year field\n+    if (count > 0) {\n+        DateTimeFieldType firstType = savedFields[0].iField.getType();\n+\n+        if (firstType == DateTimeFieldType.weekyear()) {\n+            int year = findParsedValue(savedFields, DateTimeFieldType.yearOfEra(), 0);\n+            int weekyear = findParsedValue(savedFields, DateTimeFieldType.weekyear(), year);\n+\n+            if (weekyear > year) {\n+                int weeks = ISOChronology.getInstanceUTC().weekOfWeekyear().getMaximumValue();\n+                if (weeks < 53 && ISOChronology.getInstanceUTC().weekYears().isLeap(weekyear)) {\n+                    weeks = 52;\n+                }\n+\n+                DateTimeField firstField = savedFields[0].iField;\n+                long instant = firstField.set(0, year, weeks);\n+                iSavedFields = savedFields;\n+                iSavedFieldsCount = count;\n+                iDefaultYear = year;\n+                iMillis = instant;\n+                count = 0;\n             }\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw e;\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n-            }\n+    }\n+\n+    return millis;\n+}\n+\n+private int findParsedValue(SavedField[] savedFields, DateTimeFieldType type, int defaultValue) {\n+    for (SavedField savedField : savedFields) {\n+        if (savedField.iField.getType() == type) {\n+            return savedField.iValue;\n         }\n-        \n-        return millis;\n     }\n+    return defaultValue;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}