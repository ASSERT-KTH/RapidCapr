{
    "patch": "else if (maybeInit != null && maybeInit.isSimpleAssignmentToName()) {\n  for (int i = index + 1; i < references.size(); i++) {\n    Reference maybeRereference = references.get(i);\n    if (maybeRereference.getKind() == Reference.Kind.READ && maybeRereference.getName().equals(maybeDecl.getName())) {\n      return maybeInit;\n    } else if (maybeRereference.isWrite() && !maybeRereference.isCompoundAssignment()) {\n      break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..358e125b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+else if (maybeInit != null && maybeInit.isSimpleAssignmentToName()) {\n+  for (int i = index + 1; i < references.size(); i++) {\n+    Reference maybeRereference = references.get(i);\n+    if (maybeRereference.getKind() == Reference.Kind.READ && maybeRereference.getName().equals(maybeDecl.getName())) {\n+      return maybeInit;\n+    } else if (maybeRereference.isWrite() && !maybeRereference.isCompoundAssignment()) {\n+      break;\n+    }\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}