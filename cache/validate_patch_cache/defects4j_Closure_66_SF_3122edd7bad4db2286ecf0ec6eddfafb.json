{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    JsonReader reader = new JsonReader(new StringReader(jsonStr));\n    reader.setLenient(true);\n    double typedCount = 0;\n    double totalCount = 0;\n    try {\n        reader.beginObject();\n        while (reader.hasNext()) {\n            String name = reader.nextName();\n            if (name.equals(\"values\")) {\n                reader.beginArray();\n                while (reader.hasNext()) {\n                    reader.beginObject();\n                    boolean isTyped = false;\n                    while (reader.hasNext()) {\n                        String childName = reader.nextName();\n                        if (childName.equals(\"typed\")) {\n                            isTyped = reader.nextBoolean();\n                        } else {\n                            reader.skipValue();\n                        }\n                    }\n                    reader.endObject();\n                    if (isTyped) {\n                        typedCount++;\n                    }\n                    totalCount++;\n                }\n                reader.endArray();\n            } else {\n                reader.skipValue();\n            }\n        }\n        reader.endObject();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return (typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2f345506 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    JsonReader reader = new JsonReader(new StringReader(jsonStr));\n+    reader.setLenient(true);\n+    double typedCount = 0;\n+    double totalCount = 0;\n+    try {\n+        reader.beginObject();\n+        while (reader.hasNext()) {\n+            String name = reader.nextName();\n+            if (name.equals(\"values\")) {\n+                reader.beginArray();\n+                while (reader.hasNext()) {\n+                    reader.beginObject();\n+                    boolean isTyped = false;\n+                    while (reader.hasNext()) {\n+                        String childName = reader.nextName();\n+                        if (childName.equals(\"typed\")) {\n+                            isTyped = reader.nextBoolean();\n+                        } else {\n+                            reader.skipValue();\n+                        }\n+                    }\n+                    reader.endObject();\n+                    if (isTyped) {\n+                        typedCount++;\n+                    }\n+                    totalCount++;\n+                }\n+                reader.endArray();\n+            } else {\n+                reader.skipValue();\n+            }\n+        }\n+        reader.endObject();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return (typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}