{
    "patch": "private void readTypeVariables() {\n    if (typeVariable instanceof TypeVariable) {\n        Type[] bounds = ((TypeVariable) typeVariable).getBounds();\n        for (Type bound : bounds) {\n            if (bound instanceof WildcardType) {\n                Type upperBound = ((WildcardType) bound).getUpperBounds()[0];\n                registerTypeVariablesOn(getActualTypeArgumentFor(upperBound));\n            } else if (bound instanceof ParameterizedType) {\n                Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n                if (typeArgs.length > 0) {\n                    registerTypeVariablesOn(typeArgs[0]);\n                }\n            } else if (bound instanceof TypeVariable) {\n                Type actualTypeArg = getActualTypeArgumentFor(bound);\n                if (actualTypeArg != null) {\n                    registerTypeVariablesOn(actualTypeArg);\n                }\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate Type getActualTypeArgumentFor(Type type) {\n    if (type instanceof TypeVariable) {\n        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n        for (Type boundType : bounds) {\n            Type actualTypeArgument = getActualTypeArgumentFor(boundType);\n            if (actualTypeArgument != null) {\n                return actualTypeArgument;\n            }\n        }\n    } else if (type instanceof ParameterizedType) {\n        Type[] typeArgs = ((ParameterizedType) type).getActualTypeArguments();\n        if (typeArgs.length > 0) {\n            Type actualTypeArgument = getActualTypeArgumentFor(typeArgs[0]);\n            if (actualTypeArgument != null) {\n                return actualTypeArgument;\n            }\n            return typeArgs[0];\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..47e54bff7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,56 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable instanceof TypeVariable) {\n+        Type[] bounds = ((TypeVariable) typeVariable).getBounds();\n+        for (Type bound : bounds) {\n+            if (bound instanceof WildcardType) {\n+                Type upperBound = ((WildcardType) bound).getUpperBounds()[0];\n+                registerTypeVariablesOn(getActualTypeArgumentFor(upperBound));\n+            } else if (bound instanceof ParameterizedType) {\n+                Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n+                if (typeArgs.length > 0) {\n+                    registerTypeVariablesOn(typeArgs[0]);\n+                }\n+            } else if (bound instanceof TypeVariable) {\n+                Type actualTypeArg = getActualTypeArgumentFor(bound);\n+                if (actualTypeArg != null) {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                }\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private Type getActualTypeArgumentFor(Type type) {\n+    if (type instanceof TypeVariable) {\n+        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n+        for (Type boundType : bounds) {\n+            Type actualTypeArgument = getActualTypeArgumentFor(boundType);\n+            if (actualTypeArgument != null) {\n+                return actualTypeArgument;\n+            }\n+        }\n+    } else if (type instanceof ParameterizedType) {\n+        Type[] typeArgs = ((ParameterizedType) type).getActualTypeArguments();\n+        if (typeArgs.length > 0) {\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeArgs[0]);\n+            if (actualTypeArgument != null) {\n+                return actualTypeArgument;\n+            }\n+            return typeArgs[0];\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}