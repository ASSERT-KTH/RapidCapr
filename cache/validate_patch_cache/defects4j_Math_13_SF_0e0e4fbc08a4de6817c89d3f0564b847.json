{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxTries = 5;\n    int tries = 0;\n    while (tries < maxTries) {\n        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            RealMatrix sqrt = dec.getSquareRoot();\n            if (sqrt == null) {\n                sqrt = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n            } else {\n                double norm = sqrt.getFrobeniusNorm();\n                if (norm > 1.0) {\n                    sqrt = sqrt.scalarMultiply(1.0 / norm);\n                }\n            }\n            return sqrt;\n        } catch (OutOfMemoryError e) {\n            // Log the error message and try again\n            System.err.println(\"Out of memory error: \" + e.getMessage());\n            // Reduce memory usage by running garbage collection\n            System.gc();\n            tries++;\n        }\n    }\n    // If all tries failed, return input matrix\n    return m;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e8cbed973 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxTries = 5;\n+    int tries = 0;\n+    while (tries < maxTries) {\n+        try {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+            RealMatrix sqrt = dec.getSquareRoot();\n+            if (sqrt == null) {\n+                sqrt = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+            } else {\n+                double norm = sqrt.getFrobeniusNorm();\n+                if (norm > 1.0) {\n+                    sqrt = sqrt.scalarMultiply(1.0 / norm);\n+                }\n+            }\n+            return sqrt;\n+        } catch (OutOfMemoryError e) {\n+            // Log the error message and try again\n+            System.err.println(\"Out of memory error: \" + e.getMessage());\n+            // Reduce memory usage by running garbage collection\n+            System.gc();\n+            tries++;\n+        }\n     }\n+    // If all tries failed, return input matrix\n+    return m;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3496978.1837704973> but was:<3496978.1842644885>",
    "test_result": "FAIL"
}