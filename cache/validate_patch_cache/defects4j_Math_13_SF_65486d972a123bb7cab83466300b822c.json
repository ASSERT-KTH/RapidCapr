{
    "patch": "import org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenValues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n    for (int i = 0; i < n; i++) {\n        eigenValues.setEntry(i, i, Math.sqrt(eigenValues.getEntry(i, i)));\n    }\n    final RealMatrix eigenVects = dec.getV();\n    return eigenVects.multiply(eigenValues).multiply(eigenVects.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bfd853e88 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenValues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+    for (int i = 0; i < n; i++) {\n+        eigenValues.setEntry(i, i, Math.sqrt(eigenValues.getEntry(i, i)));\n     }\n+    final RealMatrix eigenVects = dec.getV();\n+    return eigenVects.multiply(eigenValues).multiply(eigenVects.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}