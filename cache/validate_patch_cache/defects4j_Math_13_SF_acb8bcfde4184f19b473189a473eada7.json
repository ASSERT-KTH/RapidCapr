{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n\n    for (int i = 0; i < d.getRowDimension(); i++) {\n        final double value = d.getEntry(i, i);\n        if (value < 0.0) {\n            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n        } else if (value == 0.0) {\n            d.setEntry(i, i, 0.0);\n        } else {\n            d.setEntry(i, i, Math.sqrt(value));\n        }\n    }\n\n    return v.multiply(d).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..18461a6c8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+\n+    for (int i = 0; i < d.getRowDimension(); i++) {\n+        final double value = d.getEntry(i, i);\n+        if (value < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n+        } else if (value == 0.0) {\n+            d.setEntry(i, i, 0.0);\n+        } else {\n+            d.setEntry(i, i, Math.sqrt(value));\n+        }\n     }\n+\n+    return v.multiply(d).multiply(v.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}