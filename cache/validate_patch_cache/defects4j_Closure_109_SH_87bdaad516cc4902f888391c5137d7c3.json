{
    "patch": "          JsDocToken nextToken = tokens.peek();\n          switch (nextToken.getType()) {\n              case OPEN_PAREN:\n              case VERTICAL_BAR:\n                  return parseTypeUnion(token);\n              case QUESTION_MARK:\n                  return parseOptionalType(token);\n              case EQUALS_SIGN:\n                  return parseNullableType(token);\n              case OPEN_SQUARE_BRACKET:\n                  return parseArrayType(token);\n              case NAME:\n                  if (\"function\".equals(nextToken.getText())) {\n                      return parseFunctionType(token);\n                  } else {\n                      return parseTypeName(token);\n                  }\n              default:\n                  String msg = String.format(\"%s is not a valid type annotation token\", nextToken.getText());\n                  throw new JsDocSyntaxException(msg, nextToken);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..af711121 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,27 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+          JsDocToken nextToken = tokens.peek();\n+          switch (nextToken.getType()) {\n+              case OPEN_PAREN:\n+              case VERTICAL_BAR:\n+                  return parseTypeUnion(token);\n+              case QUESTION_MARK:\n+                  return parseOptionalType(token);\n+              case EQUALS_SIGN:\n+                  return parseNullableType(token);\n+              case OPEN_SQUARE_BRACKET:\n+                  return parseArrayType(token);\n+              case NAME:\n+                  if (\"function\".equals(nextToken.getText())) {\n+                      return parseFunctionType(token);\n+                  } else {\n+                      return parseTypeName(token);\n+                  }\n+              default:\n+                  String msg = String.format(\"%s is not a valid type annotation token\", nextToken.getText());\n+                  throw new JsDocSyntaxException(msg, nextToken);\n+          }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}