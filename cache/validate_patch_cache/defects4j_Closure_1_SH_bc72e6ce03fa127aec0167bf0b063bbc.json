{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node curArg = argList.getFirstChild();\n    int index = 0;\n    while (curArg != null) {\n      Node nextArg = curArg.getNext();\n      if (index >= referenced.size()) {\n        argList.removeChild(curArg);\n        compiler.reportCodeChange();\n      }\n      index++;\n      curArg = nextArg;\n    }\n\n    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c5e67d32 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node curArg = argList.getFirstChild();\n+    int index = 0;\n+    while (curArg != null) {\n+      Node nextArg = curArg.getNext();\n+      if (index >= referenced.size()) {\n+        argList.removeChild(curArg);\n+        compiler.reportCodeChange();\n+      }\n+      index++;\n+      curArg = nextArg;\n+    }\n+\n+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}