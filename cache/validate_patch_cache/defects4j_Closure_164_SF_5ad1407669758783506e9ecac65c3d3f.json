{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Check return types\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Check parameter types\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  boolean hasVarArgs = false;\n  boolean hasOptionalParams = false;\n  int requiredParamCount = 0;\n  int expectedParamCount = 0;\n\n  while (thisParam != null && thatParam != null) {\n    hasVarArgs |= thisParam.isVarArgs() || thatParam.isVarArgs();\n\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    // Check for required parameters\n    if (!thisParam.isOptional()) {\n      if (!thatParam.isOptional() && !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n      requiredParamCount++;\n    } else {\n      // If this parameter is optional, that param if present must be a subtype\n      // and we can assume any missing parameters will be undefined.\n      if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n      hasOptionalParams = true;\n    }\n\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  // Handle varargs\n  if (thisParam != null) {\n    // This function has more parameters than that function\n    if (!thisParam.isVarArgs()) {\n      // Only allow extra parameters if this function has varargs\n      return false;\n    }\n  } else if (thatParam != null) {\n    // That function has more parameters than this function\n    if (!thatParam.isVarArgs() && !thatParam.isOptional()) {\n      // That function has an extra required parameter\n      return false;\n    }\n  }\n\n  // Count expected parameters, excluding optional ones and varargs.\n  while (parameters.hasChildren() && parameters.getLastChild().isOptional()) {\n    parameters = parameters.getLastChild();\n  }\n  Node firstVarArg = parameters.getFirstChild();\n  while (parameters.hasChildren()) {\n    parameters = parameters.getLastChild();\n    if (!parameters.isVarArgs()) {\n      expectedParamCount++;\n    }\n  }\n  // Include varargs if there are any.\n  if (firstVarArg != null && firstVarArg.isVarArgs()) {\n    expectedParamCount++;\n  }\n\n  // Return true if no required parameters are missing and\n  // there's no required parameter in that function which is not present in this function\n  return requiredParamCount <= expectedParamCount && (hasOptionalParams || thatParam == null);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..ba30bf34 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,87 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n-\n-    ArrowType that = (ArrowType) other;\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  ArrowType that = (ArrowType) other;\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+  // Check return types\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+  // Check parameter types\n+  Node thisParam = parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n+  boolean hasVarArgs = false;\n+  boolean hasOptionalParams = false;\n+  int requiredParamCount = 0;\n+  int expectedParamCount = 0;\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+  while (thisParam != null && thatParam != null) {\n+    hasVarArgs |= thisParam.isVarArgs() || thatParam.isVarArgs();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = thatParam.getJSType();\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n+    // Check for required parameters\n+    if (!thisParam.isOptional()) {\n+      if (!thatParam.isOptional() && !thatParamType.isSubtype(thisParamType)) {\n+        return false;\n       }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      requiredParamCount++;\n+    } else {\n+      // If this parameter is optional, that param if present must be a subtype\n+      // and we can assume any missing parameters will be undefined.\n+      if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n+        return false;\n       }\n+      hasOptionalParams = true;\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    thisParam = thisParam.getNext();\n+    thatParam = thatParam.getNext();\n+  }\n \n-    return true;\n+  // Handle varargs\n+  if (thisParam != null) {\n+    // This function has more parameters than that function\n+    if (!thisParam.isVarArgs()) {\n+      // Only allow extra parameters if this function has varargs\n+      return false;\n+    }\n+  } else if (thatParam != null) {\n+    // That function has more parameters than this function\n+    if (!thatParam.isVarArgs() && !thatParam.isOptional()) {\n+      // That function has an extra required parameter\n+      return false;\n+    }\n   }\n \n+  // Count expected parameters, excluding optional ones and varargs.\n+  while (parameters.hasChildren() && parameters.getLastChild().isOptional()) {\n+    parameters = parameters.getLastChild();\n+  }\n+  Node firstVarArg = parameters.getFirstChild();\n+  while (parameters.hasChildren()) {\n+    parameters = parameters.getLastChild();\n+    if (!parameters.isVarArgs()) {\n+      expectedParamCount++;\n+    }\n+  }\n+  // Include varargs if there are any.\n+  if (firstVarArg != null && firstVarArg.isVarArgs()) {\n+    expectedParamCount++;\n+  }\n+\n+  // Return true if no required parameters are missing and\n+  // there's no required parameter in that function which is not present in this function\n+  return requiredParamCount <= expectedParamCount && (hasOptionalParams || thatParam == null);\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}