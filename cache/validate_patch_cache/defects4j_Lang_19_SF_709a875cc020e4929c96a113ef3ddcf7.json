{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index >= seqEnd) {\n        return 0;\n    }\n\n    char c = input.charAt(index);\n    if (c == '&' && index < seqEnd - 2) {\n        int end = input.subSequence(index, seqEnd).toString().indexOf(';');\n        if (end != -1) {\n            String entity = input.subSequence(index + 1, index + end).toString();\n            boolean isHex = false;\n            int unicode = 0;\n\n            if (entity.charAt(0) == 'x') {\n                isHex = true;\n                try {\n                    unicode = Integer.parseInt(entity.substring(1), 16);\n                } catch (NumberFormatException ignored) {\n                    isHex = false;\n                }\n            } else {\n                try {\n                    unicode = Integer.parseInt(entity);\n                } catch (NumberFormatException ignored) {\n                }\n            }\n\n            if (isHex || (unicode >= 0 && unicode <= 0xFFFF)) {\n                out.write((char) unicode);\n            } else if (unicode > 0xFFFF) {\n                char[] surrogatePair = Character.toChars(unicode);\n                out.write(surrogatePair[0]);\n                out.write(surrogatePair[1]);\n            } else {\n                out.write('&');\n                out.write(entity);\n                out.write(';');\n                return end + 2;\n            }\n\n            return end + 2;\n        }\n    }\n\n    out.write(c);\n    return 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..41146504 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,52 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index >= seqEnd) {\n+        return 0;\n+    }\n+\n+    char c = input.charAt(index);\n+    if (c == '&' && index < seqEnd - 2) {\n+        int end = input.subSequence(index, seqEnd).toString().indexOf(';');\n+        if (end != -1) {\n+            String entity = input.subSequence(index + 1, index + end).toString();\n             boolean isHex = false;\n+            int unicode = 0;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n+            if (entity.charAt(0) == 'x') {\n                 isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+                try {\n+                    unicode = Integer.parseInt(entity.substring(1), 16);\n+                } catch (NumberFormatException ignored) {\n+                    isHex = false;\n+                }\n+            } else {\n+                try {\n+                    unicode = Integer.parseInt(entity);\n+                } catch (NumberFormatException ignored) {\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n             }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+            if (isHex || (unicode >= 0 && unicode <= 0xFFFF)) {\n+                out.write((char) unicode);\n+            } else if (unicode > 0xFFFF) {\n+                char[] surrogatePair = Character.toChars(unicode);\n+                out.write(surrogatePair[0]);\n+                out.write(surrogatePair[1]);\n             } else {\n-                out.write(entityValue);\n+                out.write('&');\n+                out.write(entity);\n+                out.write(';');\n+                return end + 2;\n             }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            return end + 2;\n         }\n-        return 0;\n     }\n+\n+    out.write(c);\n+    return 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<<P[&O>]> but was:<<P[]>",
    "test_result": "FAIL"
}