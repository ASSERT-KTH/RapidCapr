{
    "patch": "if (functionType.getTypeOfThis() != null) {\n    Node parent = n.getParent();\n    if (!NodeUtil.isGet(parent)\n            || !parent.getFirstChild().matchesQualifiedName(functionType.getTypeOfThis().getReferenceName())) {\n        report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..abc2f13d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null) {\n+    Node parent = n.getParent();\n+    if (!NodeUtil.isGet(parent)\n+            || !parent.getFirstChild().matchesQualifiedName(functionType.getTypeOfThis().getReferenceName())) {\n+        report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n+    }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}