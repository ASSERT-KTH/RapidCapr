{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    DecompositionSolver solver = new LUDecomposition(m).getSolver();\n    int n = m.getRowDimension();\n    double[][] bData = new double[n][n];\n    double[][] sqrtData = new double[n][n];\n    for (int j = 0; j < n; j++) {\n        for (int i = 0; i < n; i++) {\n            bData[i][j] = (i == j) ? 1.0 : 0.0;\n        }\n    }\n    RealMatrix B = new Array2DRowRealMatrix(bData);\n    RealMatrix X = solver.solve(B);\n    for (int j = 0; j < n; j++) {\n        for (int i = j; i < n; i++) {\n            double s = 0.0;\n            for (int k = j; k < i; k++) {\n                s += sqrtData[k][i] * sqrtData[k][j];\n            }\n            if (i == j) {\n                sqrtData[i][j] = Math.sqrt(X.getEntry(i, j) - s);\n            } else {\n                sqrtData[i][j] = 1.0 / sqrtData[j][j] * (X.getEntry(i, j) - s);\n            }\n        }\n    }\n    return new Array2DRowRealMatrix(sqrtData);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2b586ea96 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.DecompositionSolver;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    DecompositionSolver solver = new LUDecomposition(m).getSolver();\n+    int n = m.getRowDimension();\n+    double[][] bData = new double[n][n];\n+    double[][] sqrtData = new double[n][n];\n+    for (int j = 0; j < n; j++) {\n+        for (int i = 0; i < n; i++) {\n+            bData[i][j] = (i == j) ? 1.0 : 0.0;\n+        }\n     }\n+    RealMatrix B = new Array2DRowRealMatrix(bData);\n+    RealMatrix X = solver.solve(B);\n+    for (int j = 0; j < n; j++) {\n+        for (int i = j; i < n; i++) {\n+            double s = 0.0;\n+            for (int k = j; k < i; k++) {\n+                s += sqrtData[k][i] * sqrtData[k][j];\n+            }\n+            if (i == j) {\n+                sqrtData[i][j] = Math.sqrt(X.getEntry(i, j) - s);\n+            } else {\n+                sqrtData[i][j] = 1.0 / sqrtData[j][j] * (X.getEntry(i, j) - s);\n+            }\n+        }\n+    }\n+    return new Array2DRowRealMatrix(sqrtData);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}