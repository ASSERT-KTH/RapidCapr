{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    RealMatrix L = dec.getL();\n\n    /* Compute the square root of the lower triangular matrix */\n    int n = m.getColumnDimension();\n    for (int j = 0; j < n; j++) {\n        for (int i = j; i < n; i++) {\n            double sum = 0;\n            for (int k = 0; k < j; k++) {\n                sum += L.getEntry(i, k) * L.getEntry(j, k);\n            }\n            if (i == j) {\n                L.setEntry(i, j, FastMath.sqrt(L.getEntry(i, j) - sum));\n            } else {\n                L.setEntry(i, j, (L.getEntry(i, j) - sum) / L.getEntry(j, j));\n            }\n        }\n    }\n\n    /* Compute the square root of the matrix */\n    RealMatrix sqrtM = L.multiply(L.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..69c267189 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    RealMatrix L = dec.getL();\n+\n+    /* Compute the square root of the lower triangular matrix */\n+    int n = m.getColumnDimension();\n+    for (int j = 0; j < n; j++) {\n+        for (int i = j; i < n; i++) {\n+            double sum = 0;\n+            for (int k = 0; k < j; k++) {\n+                sum += L.getEntry(i, k) * L.getEntry(j, k);\n+            }\n+            if (i == j) {\n+                L.setEntry(i, j, FastMath.sqrt(L.getEntry(i, j) - sum));\n+            } else {\n+                L.setEntry(i, j, (L.getEntry(i, j) - sum) / L.getEntry(j, j));\n+            }\n+        }\n     }\n+\n+    /* Compute the square root of the matrix */\n+    RealMatrix sqrtM = L.multiply(L.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}