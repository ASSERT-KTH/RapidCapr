{
    "patch": "private void readTypeVariables() {\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            Type actualTypeArg = getActualTypeArgumentFor((TypeVariable<?>) bound);\n            if (actualTypeArg == null) {\n                // The bound may have further bounds to register\n                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n                for (Type furtherBound : typeVar.getBounds()) {\n                    registerTypeVariablesOn(furtherBound);\n                }\n            } else {\n                registerTypeVariablesOn(actualTypeArg);\n            }\n        } else {\n            // The bound is either a Class, ParameterizedType or WildcardType; register it\n            registerTypeVariablesOn(bound);\n        }\n    }\n\n    // Register the type variable itself if it has not already been registered\n    if (typeVariable.getBounds().length == 0) {\n        registerTypeVariablesOn(typeVariable);\n    } else {\n        boolean boundRegistered = false;\n        for (Type bound : typeVariable.getBounds()) {\n            if (typeVariable.equals(bound)) {\n                // Don't register the type variable if it has already been registered via a bound\n                boundRegistered = true;\n                break;\n            }\n        }\n        if (!boundRegistered) {\n            registerTypeVariablesOn(typeVariable);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f57765437 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,43 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            Type actualTypeArg = getActualTypeArgumentFor((TypeVariable<?>) bound);\n+            if (actualTypeArg == null) {\n+                // The bound may have further bounds to register\n+                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+                for (Type furtherBound : typeVar.getBounds()) {\n+                    registerTypeVariablesOn(furtherBound);\n+                }\n+            } else {\n+                registerTypeVariablesOn(actualTypeArg);\n+            }\n+        } else {\n+            // The bound is either a Class, ParameterizedType or WildcardType; register it\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+\n+    // Register the type variable itself if it has not already been registered\n+    if (typeVariable.getBounds().length == 0) {\n+        registerTypeVariablesOn(typeVariable);\n+    } else {\n+        boolean boundRegistered = false;\n+        for (Type bound : typeVariable.getBounds()) {\n+            if (typeVariable.equals(bound)) {\n+                // Don't register the type variable if it has already been registered via a bound\n+                boundRegistered = true;\n+                break;\n+            }\n+        }\n+        if (!boundRegistered) {\n+            registerTypeVariablesOn(typeVariable);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}