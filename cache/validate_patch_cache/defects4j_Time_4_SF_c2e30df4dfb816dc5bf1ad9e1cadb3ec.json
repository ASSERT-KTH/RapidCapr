{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n\n    int index = indexOf(fieldType);\n    int[] newValues = getValues();\n\n    if (index == -1) {\n        // field type not present\n        DateTimeFieldType[] newTypes = Arrays.copyOf(iTypes, iTypes.length + 1);\n        newValues = Arrays.copyOf(newValues, newTypes.length);\n        int insertionIndex = findInsertionIndex(newTypes, fieldType);\n        System.arraycopy(newTypes, insertionIndex, newTypes, insertionIndex + 1, newTypes.length - insertionIndex - 1);\n        System.arraycopy(newValues, insertionIndex, newValues, insertionIndex + 1, newValues.length - insertionIndex - 1);\n        newTypes[insertionIndex] = fieldType;\n        newValues[insertionIndex] = value;\n\n        // use public constructor to ensure full validation\n        // this isn't overly efficient, but is safe\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    } else if (newValues[index] != value) {\n        // field type already present and value is different\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    } else {\n        // field type already present and value is the same, return the same instance\n        return this;\n    }\n}\n\nprivate int findInsertionIndex(DateTimeFieldType[] types, DateTimeFieldType type) {\n    DurationFieldType unitType = type.getDurationType().getField(iChronology).getType();\n    int index = Arrays.binarySearch(types, type);\n\n    if (index >= 0) {\n        // field type already present\n        return index;\n    } else {\n        index = -(index + 1); // index of the first element greater than type\n        while (index < types.length) {\n            DateTimeFieldType fieldType = types[index];\n            DurationFieldType unitFieldType = fieldType.getDurationType().getField(iChronology).getType();\n            \n            // if the current field type has a larger unit than type\n            if (unitFieldType.compareTo(unitType) > 0) {\n                break;\n            }\n            \n            // if the current field type has the same unit as type but a larger range\n            if (unitFieldType == unitType) {\n                DurationFieldType rangeType = type.getRangeDurationType().getField(iChronology).getType();\n                DurationFieldType currentRangeType = fieldType.getRangeDurationType().getField(iChronology).getType();\n                if (rangeType.compareTo(currentRangeType) > 0) {\n                    break;\n                }\n            }\n            \n            index++;\n        }\n\n        return index;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..acfb45fb 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,55 +423,72 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+\n+    int index = indexOf(fieldType);\n+    int[] newValues = getValues();\n+\n+    if (index == -1) {\n+        // field type not present\n+        DateTimeFieldType[] newTypes = Arrays.copyOf(iTypes, iTypes.length + 1);\n+        newValues = Arrays.copyOf(newValues, newTypes.length);\n+        int insertionIndex = findInsertionIndex(newTypes, fieldType);\n+        System.arraycopy(newTypes, insertionIndex, newTypes, insertionIndex + 1, newTypes.length - insertionIndex - 1);\n+        System.arraycopy(newValues, insertionIndex, newValues, insertionIndex + 1, newValues.length - insertionIndex - 1);\n+        newTypes[insertionIndex] = fieldType;\n+        newValues[insertionIndex] = value;\n+\n+        // use public constructor to ensure full validation\n+        // this isn't overly efficient, but is safe\n+        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        iChronology.validate(newPartial, newValues);\n+        return newPartial;\n+    } else if (newValues[index] != value) {\n+        // field type already present and value is different\n+        newValues = getField(index).set(this, index, newValues, value);\n+        return new Partial(this, newValues);\n+    } else {\n+        // field type already present and value is the same, return the same instance\n+        return this;\n+    }\n+}\n+\n+private int findInsertionIndex(DateTimeFieldType[] types, DateTimeFieldType type) {\n+    DurationFieldType unitType = type.getDurationType().getField(iChronology).getType();\n+    int index = Arrays.binarySearch(types, type);\n+\n+    if (index >= 0) {\n+        // field type already present\n+        return index;\n+    } else {\n+        index = -(index + 1); // index of the first element greater than type\n+        while (index < types.length) {\n+            DateTimeFieldType fieldType = types[index];\n+            DurationFieldType unitFieldType = fieldType.getDurationType().getField(iChronology).getType();\n             \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n+            // if the current field type has a larger unit than type\n+            if (unitFieldType.compareTo(unitType) > 0) {\n+                break;\n+            }\n+            \n+            // if the current field type has the same unit as type but a larger range\n+            if (unitFieldType == unitType) {\n+                DurationFieldType rangeType = type.getRangeDurationType().getField(iChronology).getType();\n+                DurationFieldType currentRangeType = fieldType.getRangeDurationType().getField(iChronology).getType();\n+                if (rangeType.compareTo(currentRangeType) > 0) {\n+                    break;\n                 }\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n-        }\n-        if (value == getValue(index)) {\n-            return this;\n+            \n+            index++;\n         }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+\n+        return index;\n     }\n+}\n \n     /**\n      * Gets a copy of this date with the specified field removed.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}