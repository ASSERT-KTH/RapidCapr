{
    "patch": "private static Map<Integer, Integer> memo = new HashMap<>();\n\npublic static int fib(int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    }\n    if (memo.containsKey(n)) {\n        return memo.get(n);\n    }\n    int fibN;\n    if (n <= 1) {\n        fibN = n;\n    } else {\n        fibN = fib(n - 1) + fib(n - 2);\n    }\n    memo.put(n, fibN);\n    return fibN;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIB.java b/src/main/java/humaneval/buggy/FIB.java\nindex fdc9c32..c2317bb 100644\n--- a/src/main/java/humaneval/buggy/FIB.java\n+++ b/src/main/java/humaneval/buggy/FIB.java\n@@ -10,6 +10,24 @@ package humaneval.buggy;\n \n public class FIB {\n     public static int fib(int n) {\n+private static Map<Integer, Integer> memo = new HashMap<>();\n+\n+public static int fib(int n) {\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"n must be non-negative\");\n+    }\n+    if (memo.containsKey(n)) {\n+        return memo.get(n);\n+    }\n+    int fibN;\n+    if (n <= 1) {\n+        fibN = n;\n+    } else {\n+        fibN = fib(n - 1) + fib(n - 2);\n+    }\n+    memo.put(n, fibN);\n+    return fibN;\n+}\n         return fib(n - 1) + fib(n - 2);\n     }\n }",
    "result_reason": " /tmp/humaneval-FIB/src/main/java/humaneval/buggy/FIB.java:[13,1] illegal start of expression",
    "test_result": "ERROR"
}