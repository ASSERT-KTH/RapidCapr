{
    "patch": "        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        Arrays.fill(coefficients, 0.0);\n        for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n            basicRow = getBasicRow(i);\n            if (basicRow == null) continue;\n\n            double value = getEntry(basicRow, getRhsOffset());\n            for (int j = 0; j < getNumObjectiveFunctions(); j++) {\n                if (j == i) continue;\n\n                value -= getEntry(basicRow, getArtificialVariableOffset() + j) * coefficients[j];\n            }\n\n            int pivotCol = getBasicColumn(basicRow);\n            if (pivotCol < getNumObjectiveFunctions()) {\n                coefficients[pivotCol] = value;\n            }\n        }\n        for (int i = 0; i < coefficients.length; i++) {\n            if (!restrictToNonNegative) {\n                coefficients[i] -= mostNegative;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..e2fa8ad4b 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,28 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n-                    }\n-                }\n+        Arrays.fill(coefficients, 0.0);\n+        for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n+            basicRow = getBasicRow(i);\n+            if (basicRow == null) continue;\n+\n+            double value = getEntry(basicRow, getRhsOffset());\n+            for (int j = 0; j < getNumObjectiveFunctions(); j++) {\n+                if (j == i) continue;\n+\n+                value -= getEntry(basicRow, getArtificialVariableOffset() + j) * coefficients[j];\n+            }\n+\n+            int pivotCol = getBasicColumn(basicRow);\n+            if (pivotCol < getNumObjectiveFunctions()) {\n+                coefficients[pivotCol] = value;\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n-    }\n+        for (int i = 0; i < coefficients.length; i++) {\n+            if (!restrictToNonNegative) {\n+                coefficients[i] -= mostNegative;\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}