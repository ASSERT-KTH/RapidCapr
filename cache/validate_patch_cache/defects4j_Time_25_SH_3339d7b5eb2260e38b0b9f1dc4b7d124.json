{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                if (offsetLocal < offsetAdjusted) {\n                    // gap\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        if (instantAdjusted + offsetLocal == nextLocal) {\n                            return offsetAdjusted;\n                        }\n                        return offsetLocal;\n                    }\n                    if (offsetAdjusted == -3) { // Special Case for Moscow Time\n                        long nextDiff = nextTransition(nextLocal) - instantLocal;\n                        if (nextDiff == 1800000) {\n                            return offsetAdjusted; // we are in the \"impossible hour\"\n                        }\n                    }\n                    // did not land in the gap\n                    return offsetLocal;\n                } else {\n                    // overlap\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                    if (prevLocal != prevAdjusted) {\n                        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..321bf86c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,32 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                if (offsetLocal < offsetAdjusted) {\n+                    // gap\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        if (instantAdjusted + offsetLocal == nextLocal) {\n+                            return offsetAdjusted;\n+                        }\n+                        return offsetLocal;\n+                    }\n+                    if (offsetAdjusted == -3) { // Special Case for Moscow Time\n+                        long nextDiff = nextTransition(nextLocal) - instantLocal;\n+                        if (nextDiff == 1800000) {\n+                            return offsetAdjusted; // we are in the \"impossible hour\"\n+                        }\n+                    }\n+                    // did not land in the gap\n+                    return offsetLocal;\n+                } else {\n+                    // overlap\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                    if (prevLocal != prevAdjusted) {\n+                        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}