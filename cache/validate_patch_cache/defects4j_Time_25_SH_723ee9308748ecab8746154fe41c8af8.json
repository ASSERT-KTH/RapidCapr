{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetAdjusted < offsetLocal && offsetLocal - offsetAdjusted > 1) {\n        // We are near a DST gap\n        instantAdjusted += DateTimeConstants.MILLIS_PER_HOUR;\n        int offsetNew = getOffset(instantAdjusted);\n        if (offsetNew < offsetAdjusted) {\n            // Adding an hour took us into a new gap\n            offsetNew = offsetAdjusted;\n        }\n        return offsetNew;\n    } else if (offsetAdjusted > offsetLocal && offsetAdjusted - offsetLocal < -1) {\n        // We are near a DST overlap\n        instantAdjusted -= DateTimeConstants.MILLIS_PER_HOUR;\n        int offsetNew = getOffset(instantAdjusted);\n        if (offsetNew > offsetAdjusted) {\n            // Subtracting an hour took us into a new overlap\n            offsetNew = offsetAdjusted;\n        }\n        return offsetNew;\n    } else {\n        // still near the boundary, just return the earlier offset\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..68f224a7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,30 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetAdjusted < offsetLocal && offsetLocal - offsetAdjusted > 1) {\n+        // We are near a DST gap\n+        instantAdjusted += DateTimeConstants.MILLIS_PER_HOUR;\n+        int offsetNew = getOffset(instantAdjusted);\n+        if (offsetNew < offsetAdjusted) {\n+            // Adding an hour took us into a new gap\n+            offsetNew = offsetAdjusted;\n+        }\n+        return offsetNew;\n+    } else if (offsetAdjusted > offsetLocal && offsetAdjusted - offsetLocal < -1) {\n+        // We are near a DST overlap\n+        instantAdjusted -= DateTimeConstants.MILLIS_PER_HOUR;\n+        int offsetNew = getOffset(instantAdjusted);\n+        if (offsetNew > offsetAdjusted) {\n+            // Subtracting an hour took us into a new overlap\n+            offsetNew = offsetAdjusted;\n+        }\n+        return offsetNew;\n+    } else {\n+        // still near the boundary, just return the earlier offset\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot assign a value to final variable instantAdjusted",
    "test_result": "ERROR"
}