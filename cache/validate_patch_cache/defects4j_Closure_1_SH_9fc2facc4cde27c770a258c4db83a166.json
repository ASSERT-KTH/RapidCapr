{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    int numArgs = 0;\n    List<Node> argsToRemove = new ArrayList<Node>();\n    for (Node arg : argList.children()) {\n      if (!arg.isName()) {\n        // Some arguments may be non-name expressions. Bail out in this case.\n        // (Note that all J2CL source positions in the function expression AST are\n        // the same for any of the argument nodes).\n        return;\n      }\n      String argName = arg.getString();\n      if (fnScope.getDeclaredVars().containsKey(argName) && !referenced.contains(fnScope.getVar(argName))) {\n        argsToRemove.add(arg);\n      } else {\n        numArgs = argList.getIndexOfChild(arg) + 1;\n      }\n    }\n\n    if (numArgs == argList.getChildCount() && !modifyCallers) {\n      return;\n    }\n\n    NodeUtil.removeChildrenFromNodes(argsToRemove);\n    this.compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a0a8f433 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    int numArgs = 0;\n+    List<Node> argsToRemove = new ArrayList<Node>();\n+    for (Node arg : argList.children()) {\n+      if (!arg.isName()) {\n+        // Some arguments may be non-name expressions. Bail out in this case.\n+        // (Note that all J2CL source positions in the function expression AST are\n+        // the same for any of the argument nodes).\n+        return;\n+      }\n+      String argName = arg.getString();\n+      if (fnScope.getDeclaredVars().containsKey(argName) && !referenced.contains(fnScope.getVar(argName))) {\n+        argsToRemove.add(arg);\n+      } else {\n+        numArgs = argList.getIndexOfChild(arg) + 1;\n+      }\n+    }\n+\n+    if (numArgs == argList.getChildCount() && !modifyCallers) {\n+      return;\n+    }\n+\n+    NodeUtil.removeChildrenFromNodes(argsToRemove);\n+    this.compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}