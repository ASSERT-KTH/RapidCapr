{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int totalMonths = getYears() * 12 + getMonths();\n    int totalWeeks = getWeeks();\n    int totalDays = getDays();\n\n    totalMonths += totalWeeks / 4;\n    totalWeeks = totalWeeks % 4;\n\n    totalDays += totalWeeks * 7;\n\n    int years = totalMonths / 12;\n    int months = totalMonths % 12;\n    int weeks = totalDays / 7;\n    int days = totalDays % 7;\n\n    long millis = getMillis();\n    millis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += days * DateTimeConstants.MILLIS_PER_DAY;\n    millis += weeks * DateTimeConstants.MILLIS_PER_WEEK;\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (years != 0) {\n        result = result.withYears(years);\n    }\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n    if (weeks != 0) {\n        result = result.withWeeks(weeks);\n    }\n    if (days != 0) {\n        result = result.withDays(days);\n    }\n\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..17f47694 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,45 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int totalMonths = getYears() * 12 + getMonths();\n+    int totalWeeks = getWeeks();\n+    int totalDays = getDays();\n+\n+    totalMonths += totalWeeks / 4;\n+    totalWeeks = totalWeeks % 4;\n+\n+    totalDays += totalWeeks * 7;\n+\n+    int years = totalMonths / 12;\n+    int months = totalMonths % 12;\n+    int weeks = totalDays / 7;\n+    int days = totalDays % 7;\n+\n+    long millis = getMillis();\n+    millis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n+    millis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n+    millis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n+    millis += days * DateTimeConstants.MILLIS_PER_DAY;\n+    millis += weeks * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    if (years != 0) {\n+        result = result.withYears(years);\n     }\n+    if (months != 0) {\n+        result = result.withMonths(months);\n+    }\n+    if (weeks != 0) {\n+        result = result.withWeeks(weeks);\n+    }\n+    if (days != 0) {\n+        result = result.withDays(days);\n+    }\n+\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}