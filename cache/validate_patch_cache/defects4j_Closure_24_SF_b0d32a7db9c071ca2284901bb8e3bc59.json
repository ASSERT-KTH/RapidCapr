{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    boolean containsAnonymousFunction = false; // check if goog.scope contains an anonymous function\n    for (Node child : t.getScopeRoot().children()) {\n        if (child.isCall()\n                && child.getFirstChild().matchesQualifiedName(\"goog.scope\")\n                && child.getSecondChild().isFunction()) {\n            Node fn = child.getSecondChild();\n            if (fn.getFirstChild().isParamList()\n                    && !fn.getFirstChild().hasChildren()) {\n                containsAnonymousFunction = true;\n                for (Node param : NodeUtil.getFunctionParameters(fn)) {\n                    if (param.isName()) {\n                        Var aliasVar = scope.getVar(param.getString());\n                        if (aliasVar != null && aliasVar.getInitialValue() != null \n                                && aliasVar.getInitialValue().isQualifiedName()) {\n                            String name = param.getString();\n                            aliases.put(name, aliasVar);\n                            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                            transformation.addAlias(name, qualifiedName);\n                        } else {\n                            report(t, param, GOOG_SCOPE_NON_ALIAS_LOCAL, param.getString());\n                        }\n                    } else {\n                        report(t, param, GOOG_SCOPE_NON_ALIAS_LOCAL, param.getString());\n                    }\n                }\n                break; // Function parameters are already executed.\n            } else {\n                report(t, fn, GOOG_SCOPE_MUST_BE_IN_FUNCTION_SCOPE);\n            }\n        }\n    }\n    if (!containsAnonymousFunction) {\n        report(t.getScopeRoot(), GOOG_SCOPE_MUST_HAVE_FUNCTION_PARAM);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..32ea8a15 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,43 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    boolean containsAnonymousFunction = false; // check if goog.scope contains an anonymous function\n+    for (Node child : t.getScopeRoot().children()) {\n+        if (child.isCall()\n+                && child.getFirstChild().matchesQualifiedName(\"goog.scope\")\n+                && child.getSecondChild().isFunction()) {\n+            Node fn = child.getSecondChild();\n+            if (fn.getFirstChild().isParamList()\n+                    && !fn.getFirstChild().hasChildren()) {\n+                containsAnonymousFunction = true;\n+                for (Node param : NodeUtil.getFunctionParameters(fn)) {\n+                    if (param.isName()) {\n+                        Var aliasVar = scope.getVar(param.getString());\n+                        if (aliasVar != null && aliasVar.getInitialValue() != null \n+                                && aliasVar.getInitialValue().isQualifiedName()) {\n+                            String name = param.getString();\n+                            aliases.put(name, aliasVar);\n+                            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                            transformation.addAlias(name, qualifiedName);\n+                        } else {\n+                            report(t, param, GOOG_SCOPE_NON_ALIAS_LOCAL, param.getString());\n+                        }\n+                    } else {\n+                        report(t, param, GOOG_SCOPE_NON_ALIAS_LOCAL, param.getString());\n+                    }\n+                }\n+                break; // Function parameters are already executed.\n+            } else {\n+                report(t, fn, GOOG_SCOPE_MUST_BE_IN_FUNCTION_SCOPE);\n+            }\n         }\n-      }\n     }\n+    if (!containsAnonymousFunction) {\n+        report(t.getScopeRoot(), GOOG_SCOPE_MUST_HAVE_FUNCTION_PARAM);\n+    }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}