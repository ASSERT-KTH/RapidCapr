{
    "patch": "    if (token.getTokenType() == JsDocToken.Type.IDENTIFIER) {\n      return parseTypeName(token);\n    }\n    // type expression is enclosed in parentheses\n    expect(JsDocToken.Type.OPEN_PAREN, \"Expected '(' before type expression\");\n    Node result = parseTypeExpression();\n    expect(JsDocToken.Type.CLOSE_PAREN, \"Expected ')' after type expression\");\n    return result;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..6a0054f2 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,14 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token.getTokenType() == JsDocToken.Type.IDENTIFIER) {\n+      return parseTypeName(token);\n+    }\n+    // type expression is enclosed in parentheses\n+    expect(JsDocToken.Type.OPEN_PAREN, \"Expected '(' before type expression\");\n+    Node result = parseTypeExpression();\n+    expect(JsDocToken.Type.CLOSE_PAREN, \"Expected ')' after type expression\");\n+    return result;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}