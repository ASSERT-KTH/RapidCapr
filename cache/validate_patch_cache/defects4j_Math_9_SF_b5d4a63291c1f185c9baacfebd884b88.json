{
    "patch": "    public Line revert() {\n        final Vector3D zero = Vector3D.ZERO;\n        final Vector3D negDirection = direction.negate();\n        final double[] roundedNegDirection = {Math.round(negDirection.getX()*1000.0)/1000.0, Math.round(negDirection.getY()*1000.0)/1000.0, Math.round(negDirection.getZ()*1000.0)/1000.0};\n        final Vector3D roundedDirection = new Vector3D(roundedNegDirection[0], roundedNegDirection[1], roundedNegDirection[2]);\n        return new Line(zero, roundedDirection);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..db6d197d9 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,8 +84,11 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+        final Vector3D zero = Vector3D.ZERO;\n+        final Vector3D negDirection = direction.negate();\n+        final double[] roundedNegDirection = {Math.round(negDirection.getX()*1000.0)/1000.0, Math.round(negDirection.getY()*1000.0)/1000.0, Math.round(negDirection.getZ()*1000.0)/1000.0};\n+        final Vector3D roundedDirection = new Vector3D(roundedNegDirection[0], roundedNegDirection[1], roundedNegDirection[2]);\n+        return new Line(zero, roundedDirection);\n     }\n \n     /** Get the normalized direction vector.",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028995274155437612>",
    "test_result": "FAIL"
}