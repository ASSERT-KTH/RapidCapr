{
    "patch": "switch (n.getType()) {\n    case Token.VAR:\n        attachLiteralTypes(n);\n        defineVar(n, parent);\n        break;\n    case Token.FUNCTION:\n        Node firstChild = n.getFirstChild();\n        boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n        if (isAnonymousFunction) {\n            boolean isDeclaration = parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == n;\n            boolean isNested = parent != null && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION;\n            boolean isCatchParam = parent != null && parent.getType() == Token.CATCH;\n\n            if (isDeclaration || isNested || isCatchParam) {\n                defineDeclaredFunction(n, parent);\n                break;\n            }\n        } else {\n            if (parent != null && parent.getType() == Token.NAME) {\n                return;\n            }\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    default:\n        break;\n}\nattachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1909f077 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,37 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+switch (n.getType()) {\n+    case Token.VAR:\n+        attachLiteralTypes(n);\n+        defineVar(n, parent);\n+        break;\n+    case Token.FUNCTION:\n+        Node firstChild = n.getFirstChild();\n+        boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n+        if (isAnonymousFunction) {\n+            boolean isDeclaration = parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == n;\n+            boolean isNested = parent != null && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION;\n+            boolean isCatchParam = parent != null && parent.getType() == Token.CATCH;\n+\n+            if (isDeclaration || isNested || isCatchParam) {\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            }\n+        } else {\n+            if (parent != null && parent.getType() == Token.NAME) {\n+                return;\n+            }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    default:\n+        break;\n+}\n+attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}