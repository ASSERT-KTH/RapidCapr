{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        int monthIndex = -1;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                monthIndex = i;\n                extraMonths = (values[i] + valueToAdd) % 12;\n                extraYears = (values[i] + valueToAdd) / 12;\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, extraMonths + 1);\n            } else {\n                if (monthIndex != -1 && i == monthIndex + 1) {\n                    // We also need to adjust the year if we've changed the value of the month\n                    int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                    int curDay = Math.min(maxDay, iChronology.dayOfMonth().get(instant));\n                    instant = iChronology.dayOfMonth().set(instant, curDay);\n                    values[i] += extraYears;\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..fca30d1b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        int monthIndex = -1;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                monthIndex = i;\n+                extraMonths = (values[i] + valueToAdd) % 12;\n+                extraYears = (values[i] + valueToAdd) / 12;\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, extraMonths + 1);\n+            } else {\n+                if (monthIndex != -1 && i == monthIndex + 1) {\n+                    // We also need to adjust the year if we've changed the value of the month\n+                    int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    int curDay = Math.min(maxDay, iChronology.dayOfMonth().get(instant));\n+                    instant = iChronology.dayOfMonth().set(instant, curDay);\n+                    values[i] += extraYears;\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}