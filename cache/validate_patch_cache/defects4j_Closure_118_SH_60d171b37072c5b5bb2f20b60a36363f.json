{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        switch (child.getToken()) {\n          case STRING:\n            T type = typeSystem.getType(getScope(), n, child.getString());\n            Property prop = getProperty(child.getString());\n            if (!prop.scheduleRenaming(child,\n                                       processProperty(t, prop, type, null))) { \n              if (propertiesToErrorFor.containsKey(child.getString())) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child, propertiesToErrorFor.get(child.getString()),\n                    Warnings.INVALIDATION, child.getString(),\n                    (type == null ? \"null\" : type.toString()),\n                    n.toString(),\n                    \"\"));\n              }\n            }\n            break;\n          case GETPROP:\n            // handle the GET token\n            break;\n          case SETPROP:\n            // handle the SET token\n            break;\n          default:\n            break;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..d92802a3 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,37 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        switch (child.getToken()) {\n+          case STRING:\n+            T type = typeSystem.getType(getScope(), n, child.getString());\n+            Property prop = getProperty(child.getString());\n+            if (!prop.scheduleRenaming(child,\n+                                       processProperty(t, prop, type, null))) { \n+              if (propertiesToErrorFor.containsKey(child.getString())) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child, propertiesToErrorFor.get(child.getString()),\n+                    Warnings.INVALIDATION, child.getString(),\n+                    (type == null ? \"null\" : type.toString()),\n+                    n.toString(),\n+                    \"\"));\n+              }\n+            }\n+            break;\n+          case GETPROP:\n+            // handle the GET token\n+            break;\n+          case SETPROP:\n+            // handle the SET token\n+            break;\n+          default:\n+            break;\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}