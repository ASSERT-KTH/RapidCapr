{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = null;\n    if (m instanceof OpenMapRealMatrix) {\n        // use sparse eigen decomposition if matrix is sparse\n        final SparseRealMatrix sm = new SparseRealMatrix(m.getData());\n        dec = new EigenDecomposition(sm);\n    } else {\n        // use dense eigen decomposition if matrix is not sparse\n        dec = new EigenDecomposition(m);\n    }\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5409bf6bd 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = null;\n+    if (m instanceof OpenMapRealMatrix) {\n+        // use sparse eigen decomposition if matrix is sparse\n+        final SparseRealMatrix sm = new SparseRealMatrix(m.getData());\n+        dec = new EigenDecomposition(sm);\n+    } else {\n+        // use dense eigen decomposition if matrix is not sparse\n+        dec = new EigenDecomposition(m);\n     }\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}