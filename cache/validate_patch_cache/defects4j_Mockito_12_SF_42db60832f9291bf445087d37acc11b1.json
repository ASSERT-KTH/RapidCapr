{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type type = field.getGenericType();\n    if (type instanceof ParameterizedType) {\n        ParameterizedType paramType = (ParameterizedType) type;\n      \n        if (paramType.getRawType() == Set.class) {\n            Type[] actualTypeArguments = paramType.getActualTypeArguments();\n          \n            if (actualTypeArguments.length > 0) {\n                Type actualType = actualTypeArguments[0];\n              \n                if (actualType instanceof ParameterizedType) {\n                    ParameterizedType actualParamType = (ParameterizedType) actualType;\n                    return (Class<?>) actualParamType.getRawType();\n                } else if (actualType instanceof Class) {\n                    return (Class<?>) actualType;\n                }\n            }\n        }\n    }\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..d502362a2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,26 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type type = field.getGenericType();\n+    if (type instanceof ParameterizedType) {\n+        ParameterizedType paramType = (ParameterizedType) type;\n+      \n+        if (paramType.getRawType() == Set.class) {\n+            Type[] actualTypeArguments = paramType.getActualTypeArguments();\n+          \n+            if (actualTypeArguments.length > 0) {\n+                Type actualType = actualTypeArguments[0];\n+              \n+                if (actualType instanceof ParameterizedType) {\n+                    ParameterizedType actualParamType = (ParameterizedType) actualType;\n+                    return (Class<?>) actualParamType.getRawType();\n+                } else if (actualType instanceof Class) {\n+                    return (Class<?>) actualType;\n+                }\n+            }\n+        }\n+    }\n+    return Object.class;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}