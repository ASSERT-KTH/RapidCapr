{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        setEquals(false);\n        return this;\n    }\n    Class<?> lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        isEquals = lhs.equals(rhs);\n    } else if (lhsClass != rhs.getClass()) {\n        setEquals(false);\n    } else if (lhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof char[]) {\n        append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof double[]) {\n        append((double[]) lhs, (double[]) rhs);\n    } else if (lhs instanceof float[]) {\n        append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof boolean[]) {\n        append((boolean[]) lhs, (boolean[]) rhs);\n    } else {\n        // The lhs and rhs are array of some reference type\n        // Check if they are of same length\n        int lhsLength = Array.getLength(lhs);\n        if (lhsLength != Array.getLength(rhs)) {\n            setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhsLength && isEquals; i++) {\n            Object lhsElement = Array.get(lhs, i);\n            Object rhsElement = Array.get(rhs, i);\n            append(lhsElement, rhsElement);\n        }\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(long[] lhs, long[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        isEquals = lhs[i] == rhs[i];\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(int[] lhs, int[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        isEquals = lhs[i] == rhs[i];\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(short[] lhs, short[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        isEquals = lhs[i] == rhs[i];\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(char[] lhs, char[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        isEquals = lhs[i] == rhs[i];\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(byte[] lhs, byte[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        isEquals = lhs[i] == rhs[i];\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(double[] lhs, double[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        long lhsBits = Double.doubleToLongBits(lhs[i]);\n        long rhsBits = Double.doubleToLongBits(rhs[i]);\n        isEquals = lhsBits == rhsBits;\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(float[] lhs, float[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        int lhsBits = Float.floatToIntBits(lhs[i]);\n        int rhsBits = Float.floatToIntBits(rhs[i]);\n        isEquals = lhsBits == rhsBits;\n    }\n    return this;\n}\n\nprivate EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    int lhsLength = lhs.length;\n    if (lhsLength != rhs.length) {\n        setEquals(false);\n        return this;\n    }\n    for (int i = 0; i < lhsLength && isEquals; i++) {\n        isEquals = lhs[i] == rhs[i];\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..ba9aa9d6 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,178 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        setEquals(false);\n+        return this;\n+    }\n+    Class<?> lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        isEquals = lhs.equals(rhs);\n+    } else if (lhsClass != rhs.getClass()) {\n+        setEquals(false);\n+    } else if (lhs instanceof long[]) {\n+        append((long[]) lhs, (long[]) rhs);\n+    } else if (lhs instanceof int[]) {\n+        append((int[]) lhs, (int[]) rhs);\n+    } else if (lhs instanceof short[]) {\n+        append((short[]) lhs, (short[]) rhs);\n+    } else if (lhs instanceof char[]) {\n+        append((char[]) lhs, (char[]) rhs);\n+    } else if (lhs instanceof byte[]) {\n+        append((byte[]) lhs, (byte[]) rhs);\n+    } else if (lhs instanceof double[]) {\n+        append((double[]) lhs, (double[]) rhs);\n+    } else if (lhs instanceof float[]) {\n+        append((float[]) lhs, (float[]) rhs);\n+    } else if (lhs instanceof boolean[]) {\n+        append((boolean[]) lhs, (boolean[]) rhs);\n+    } else {\n+        // The lhs and rhs are array of some reference type\n+        // Check if they are of same length\n+        int lhsLength = Array.getLength(lhs);\n+        if (lhsLength != Array.getLength(rhs)) {\n+            setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength && isEquals; i++) {\n+            Object lhsElement = Array.get(lhs, i);\n+            Object rhsElement = Array.get(rhs, i);\n+            append(lhsElement, rhsElement);\n         }\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(long[] lhs, long[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        isEquals = lhs[i] == rhs[i];\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(int[] lhs, int[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        isEquals = lhs[i] == rhs[i];\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(short[] lhs, short[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        isEquals = lhs[i] == rhs[i];\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(char[] lhs, char[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        isEquals = lhs[i] == rhs[i];\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(byte[] lhs, byte[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        isEquals = lhs[i] == rhs[i];\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(double[] lhs, double[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        long lhsBits = Double.doubleToLongBits(lhs[i]);\n+        long rhsBits = Double.doubleToLongBits(rhs[i]);\n+        isEquals = lhsBits == rhsBits;\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(float[] lhs, float[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n         return this;\n     }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        int lhsBits = Float.floatToIntBits(lhs[i]);\n+        int rhsBits = Float.floatToIntBits(rhs[i]);\n+        isEquals = lhsBits == rhsBits;\n+    }\n+    return this;\n+}\n+\n+private EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    int lhsLength = lhs.length;\n+    if (lhsLength != rhs.length) {\n+        setEquals(false);\n+        return this;\n+    }\n+    for (int i = 0; i < lhsLength && isEquals; i++) {\n+        isEquals = lhs[i] == rhs[i];\n+    }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}