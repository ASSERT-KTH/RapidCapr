{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node parameterList = function.getSecondChild();\n    boolean isSetterOrGetter = NodeUtil.isGetOrSetKey(function.getNext());\n    boolean isArrowFunction = function.isArrowFunction();\n    if (isSetterOrGetter) {\n      parameterList = function.getNext().getSecondChild();\n    }\n\n    Node currentElement = parameterList.getFirstChild();\n    Node lastReferencedParam = null;\n\n    while (currentElement != null) {\n      Node nextElement = currentElement.getNext();\n      String paramName = currentElement.getString();\n      if (!referenced.contains(fnScope.getSlot(paramName))) {\n        // This parameter is unreferenced.\n        if (lastReferencedParam == null) {\n          // The first parameter is unreferenced, so we must update the function's body.\n          if (currentElement.getNext() != null\n              && currentElement.getNext().isDefaultValue()) {\n            // If the first unused parameter has a default value, null out\n            // its value so that the rest of the defaults are correctly\n            // preserved.\n            // For example, f1(x, y = 2, z = 3, p = 4) --> f1(x, y, z, null) --> f1(x).\n            Node defaultValue = currentElement.getNext().getFirstChild();\n            Node nullNode = new Node(Token.NULL);\n            nullNode.setOriginalEncoding(defaultValue.getOriginalEncoding());\n            nullNode.setLineno(defaultValue.getLineno());\n            nullNode.setCharno(defaultValue.getCharno());\n            currentElement.getNext().removeChild(defaultValue);\n            currentElement.getNext().addChildToFront(nullNode);\n          }\n          if (!isSetterOrGetter) {\n            function.replaceChild(function.getLastChild(), new Node(Token.EMPTY));\n          }\n          currentElement.detach();\n          if (!isArrowFunction) {\n            compiler.reportCodeChange();\n          }\n        } else {\n          // Some parameter(s) after the first are unreferenced.\n          // Simply remove these parameters themselves. Do not update the function body.\n          parameterList.removeChild(currentElement);\n        }\n      } else {\n        lastReferencedParam = currentElement;\n      }\n      currentElement = nextElement;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..648dbca3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,55 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node parameterList = function.getSecondChild();\n+    boolean isSetterOrGetter = NodeUtil.isGetOrSetKey(function.getNext());\n+    boolean isArrowFunction = function.isArrowFunction();\n+    if (isSetterOrGetter) {\n+      parameterList = function.getNext().getSecondChild();\n+    }\n+\n+    Node currentElement = parameterList.getFirstChild();\n+    Node lastReferencedParam = null;\n+\n+    while (currentElement != null) {\n+      Node nextElement = currentElement.getNext();\n+      String paramName = currentElement.getString();\n+      if (!referenced.contains(fnScope.getSlot(paramName))) {\n+        // This parameter is unreferenced.\n+        if (lastReferencedParam == null) {\n+          // The first parameter is unreferenced, so we must update the function's body.\n+          if (currentElement.getNext() != null\n+              && currentElement.getNext().isDefaultValue()) {\n+            // If the first unused parameter has a default value, null out\n+            // its value so that the rest of the defaults are correctly\n+            // preserved.\n+            // For example, f1(x, y = 2, z = 3, p = 4) --> f1(x, y, z, null) --> f1(x).\n+            Node defaultValue = currentElement.getNext().getFirstChild();\n+            Node nullNode = new Node(Token.NULL);\n+            nullNode.setOriginalEncoding(defaultValue.getOriginalEncoding());\n+            nullNode.setLineno(defaultValue.getLineno());\n+            nullNode.setCharno(defaultValue.getCharno());\n+            currentElement.getNext().removeChild(defaultValue);\n+            currentElement.getNext().addChildToFront(nullNode);\n+          }\n+          if (!isSetterOrGetter) {\n+            function.replaceChild(function.getLastChild(), new Node(Token.EMPTY));\n+          }\n+          currentElement.detach();\n+          if (!isArrowFunction) {\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          // Some parameter(s) after the first are unreferenced.\n+          // Simply remove these parameters themselves. Do not update the function body.\n+          parameterList.removeChild(currentElement);\n+        }\n+      } else {\n+        lastReferencedParam = currentElement;\n+      }\n+      currentElement = nextElement;\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}