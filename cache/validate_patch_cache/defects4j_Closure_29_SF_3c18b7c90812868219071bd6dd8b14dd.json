{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n    Set<Node> refParents = new HashSet<>();\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            // A call target maybe using the object as a 'this' value.\n            if (gramps.isCall()\n                    && gramps.getFirstChild() == parent) {\n                return false;\n            }\n\n            // NOTE(nicksantos): This pass's object-splitting algorithm has\n            // a blind spot. It assumes that if a property isn't defined on an\n            // object, then the value is undefined. This is not true, because\n            // Object.prototype can have arbitrary properties on it.\n            //\n            // We short-circuit this problem by bailing out if we see a reference\n            // to a property that isn't defined on the object literal. This\n            // isn't a perfect algorithm, but it should catch most cases.\n            continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements.\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // A var with no assignment.\n            continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n            return false;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n            if (child.isGetterDef() ||\n                    child.isSetterDef()) {\n                // ES5 get/set not supported.\n                return false;\n            }\n\n            Node childVal = child.getFirstChild();\n            // Check if childVal is the parent of any of the passed in\n            // references, as that is how self-referential assignments\n            // will happen.\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        // There's a self-referential assignment, or the assignment\n                        // is not orderable.\n                        return false;\n                    }\n                    refNode = refNode.getParent();\n                }\n            }\n        }\n\n        // We have found an acceptable object literal assignment. As long as\n        // there are no other assignments that mess things up, we can inline.\n        ret = true;\n        refParents.add(parent);\n    }\n\n    // Check that no other assignments to any of the variables being inlined\n    // exist in the code.\n    for (Node parent : refParents) {\n        Node grandparent = parent.getParent();\n        if (grandparent.isExprResult()) {\n            Node greatGrandparent = grandparent.getParent();\n            if (greatGrandparent.isBlock()\n                    && greatGrandparent.getParent().isFunction()) {\n                // Inside a function, check that there are no other assignments\n                // to the variable.\n                String name = parent.getString();\n                Node function = greatGrandparent.getParent();\n                VisitorState state = new VisitorState();\n                NodeUtil.visitPostOrder(\n                        function,\n                        new NodeUtil.MatchNameNode(name),\n                        state);\n                if (state.foundAssignment()) {\n                    return false;\n                }\n            } else {\n                // Not inside a function, failing to inline.\n                return false;\n            }\n        } else {\n            throw new RuntimeException(\"Unexpected parent node type!\");\n        }\n    }\n\n    return ret;\n}\n\nprivate static class VisitorState {\n    boolean foundAssignment;\n\n    boolean foundAssignment() {\n        return foundAssignment;\n    }\n\n    void setFoundAssignment(boolean foundAssignment) {\n        this.foundAssignment = foundAssignment;\n    }\n}\n\nprivate static class MatchNameNode implements NodeUtil.MatchFunction {\n    private final String name;\n\n    MatchNameNode(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n        if (n.isName() && n.getString().equals(name)) {\n            Node grandparent = parent.getParent();\n            if (!grandparent.isVar() && !parent.isFunction()) {\n                VisitorState state = (VisitorState) t.getCallbackData();\n                state.setFoundAssignment(true);\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..5bf14133 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,148 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+    boolean ret = false;\n+    Set<Node> refParents = new HashSet<>();\n+    for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n         Node gramps = ref.getGrandparent();\n \n         // Ignore indirect references, like x.y (except x.y(), since\n         // the function referenced by y might reference 'this').\n-        //\n         if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+            Preconditions.checkState(parent.getFirstChild() == name);\n+            // A call target maybe using the object as a 'this' value.\n+            if (gramps.isCall()\n+                    && gramps.getFirstChild() == parent) {\n+                return false;\n+            }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n+            // NOTE(nicksantos): This pass's object-splitting algorithm has\n+            // a blind spot. It assumes that if a property isn't defined on an\n+            // object, then the value is undefined. This is not true, because\n+            // Object.prototype can have arbitrary properties on it.\n+            //\n+            // We short-circuit this problem by bailing out if we see a reference\n+            // to a property that isn't defined on the object literal. This\n+            // isn't a perfect algorithm, but it should catch most cases.\n+            continue;\n         }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n+        // Only rewrite VAR declarations or simple assignment statements.\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+            return false;\n         }\n \n         Node val = ref.getAssignedValue();\n         if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+            // A var with no assignment.\n+            continue;\n         }\n \n         // We're looking for object literal assignments only.\n         if (!val.isObjectLit()) {\n-          return false;\n+            return false;\n         }\n \n         // Make sure that the value is not self-refential. IOW,\n         // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n         for (Node child = val.getFirstChild(); child != null;\n              child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+            if (child.isGetterDef() ||\n+                    child.isSetterDef()) {\n+                // ES5 get/set not supported.\n+                return false;\n+            }\n+\n+            Node childVal = child.getFirstChild();\n+            // Check if childVal is the parent of any of the passed in\n+            // references, as that is how self-referential assignments\n+            // will happen.\n+            for (Reference t : refs) {\n+                Node refNode = t.getParent();\n+                while (!NodeUtil.isStatementBlock(refNode)) {\n+                    if (refNode == childVal) {\n+                        // There's a self-referential assignment, or the assignment\n+                        // is not orderable.\n+                        return false;\n+                    }\n+                    refNode = refNode.getParent();\n+                }\n+            }\n+        }\n \n+        // We have found an acceptable object literal assignment. As long as\n+        // there are no other assignments that mess things up, we can inline.\n+        ret = true;\n+        refParents.add(parent);\n+    }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n+    // Check that no other assignments to any of the variables being inlined\n+    // exist in the code.\n+    for (Node parent : refParents) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent.isExprResult()) {\n+            Node greatGrandparent = grandparent.getParent();\n+            if (greatGrandparent.isBlock()\n+                    && greatGrandparent.getParent().isFunction()) {\n+                // Inside a function, check that there are no other assignments\n+                // to the variable.\n+                String name = parent.getString();\n+                Node function = greatGrandparent.getParent();\n+                VisitorState state = new VisitorState();\n+                NodeUtil.visitPostOrder(\n+                        function,\n+                        new NodeUtil.MatchNameNode(name),\n+                        state);\n+                if (state.foundAssignment()) {\n+                    return false;\n+                }\n+            } else {\n+                // Not inside a function, failing to inline.\n                 return false;\n-              }\n-              refNode = refNode.getParent();\n             }\n-          }\n+        } else {\n+            throw new RuntimeException(\"Unexpected parent node type!\");\n         }\n+    }\n \n+    return ret;\n+}\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n+private static class VisitorState {\n+    boolean foundAssignment;\n+\n+    boolean foundAssignment() {\n+        return foundAssignment;\n+    }\n+\n+    void setFoundAssignment(boolean foundAssignment) {\n+        this.foundAssignment = foundAssignment;\n+    }\n+}\n+\n+private static class MatchNameNode implements NodeUtil.MatchFunction {\n+    private final String name;\n+\n+    MatchNameNode(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName() && n.getString().equals(name)) {\n+            Node grandparent = parent.getParent();\n+            if (!grandparent.isVar() && !parent.isFunction()) {\n+                VisitorState state = (VisitorState) t.getCallbackData();\n+                state.setFoundAssignment(true);\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}