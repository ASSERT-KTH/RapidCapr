{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    // If right is not a number or if it's NaN, we have nothing to fold.\n    if (!right.isNumber() || Double.isNaN(right.getDouble())) {\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // negative index is not a valid array element.\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        // If current element is empty this means undefined for javascript.\n        if (current.isEmpty()) {\n          elem = NodeUtil.newUndefinedNode(current);\n        } else {\n          elem = current;\n        }\n\n      current = current.getNext();\n    }\n\n    // Out of bounds index where index is > length of array.\n    if (elem == null || (intIndex > 0 && elem.isEmpty())) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..bc785283 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1428,9 +1428,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n+    // If right is not a number or if it's NaN, we have nothing to fold.\n+    if (!right.isNumber() || Double.isNaN(right.getDouble())) {\n       return n;\n     }\n \n@@ -1441,6 +1440,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n+    // negative index is not a valid array element.\n     if (intIndex < 0) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n@@ -1449,12 +1449,18 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     Node current = left.getFirstChild();\n     Node elem = null;\n     for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+        // If current element is empty this means undefined for javascript.\n+        if (current.isEmpty()) {\n+          elem = NodeUtil.newUndefinedNode(current);\n+        } else {\n+          elem = current;\n+        }\n \n       current = current.getNext();\n     }\n \n-    if (elem == null) {\n+    // Out of bounds index where index is > length of array.\n+    if (elem == null || (intIndex > 0 && elem.isEmpty())) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 0.0 1 [source_file: testcode] at testcode line 1 : 10 expected:<0> but was:<1>",
    "test_result": "FAIL"
}