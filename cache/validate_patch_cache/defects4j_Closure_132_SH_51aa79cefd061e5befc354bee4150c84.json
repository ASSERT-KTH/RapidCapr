{
    "patch": "          if (NodeUtil.isAssignmentOp(thenOp)) {\n            Node lhs = thenOp.getFirstChild();\n            Node elseLhs = elseOp.getFirstChild();\n            if (lhs.isName() && elseLhs.isName() &&\n                areNodesEqualForInlining(lhs, elseLhs) &&\n                // if LHS has side effects, don't proceed [since the optimization\n                // evaluates LHS before cond]\n                !mayHaveSideEffects(lhs.getFirstChild())) {\n\n              n.removeChild(cond);\n              Node assignName = thenOp.removeFirstChild();\n              Node thenExpr = thenOp.removeFirstChild();\n              Node elseExpr = elseOp.getLastChild();\n              elseOp.removeChild(elseExpr);\n\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                                .srcref(thenOp);\n              Node expr = NodeUtil.newExpr(assign);\n              parent.replaceChild(n, expr);\n              reportCodeChange();\n\n              return expr;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..67e74783 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,30 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+          if (NodeUtil.isAssignmentOp(thenOp)) {\n+            Node lhs = thenOp.getFirstChild();\n+            Node elseLhs = elseOp.getFirstChild();\n+            if (lhs.isName() && elseLhs.isName() &&\n+                areNodesEqualForInlining(lhs, elseLhs) &&\n+                // if LHS has side effects, don't proceed [since the optimization\n+                // evaluates LHS before cond]\n+                !mayHaveSideEffects(lhs.getFirstChild())) {\n+\n+              n.removeChild(cond);\n+              Node assignName = thenOp.removeFirstChild();\n+              Node thenExpr = thenOp.removeFirstChild();\n+              Node elseExpr = elseOp.getLastChild();\n+              elseOp.removeChild(elseExpr);\n+\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                                .srcref(thenOp);\n+              Node expr = NodeUtil.newExpr(assign);\n+              parent.replaceChild(n, expr);\n+              reportCodeChange();\n+\n+              return expr;\n+            }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}