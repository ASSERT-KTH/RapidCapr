{
    "patch": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"+\")) {\n        val = val.substring(1);\n    }\n    if (val.startsWith(\"--\")) {\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n    char lastChar = val.charAt(val.length() - 1);\n    int decPos = val.indexOf('.');\n    int expPos = indexOfExponent(val);\n    int numDecimals = countDecimals(val);\n\n    if (expPos == -1 && (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L')) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    if (decPos == -1 && expPos == -1) {\n        return createInteger(val);\n    }\n\n    // Check if there is more than one decimal point.\n    if (numDecimals > 1) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n\n    // Check if decimal point and exponent share the same suffix.\n    if (expPos > -1 && decPos > -1 && expPos < val.length() - 1 &&\n            decPos > expPos) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n\n    if (expPos < 0) {\n        try {\n            if (lastChar == 'f' || lastChar == 'F') {\n                Float f = createFloat(val);\n                if (!f.isInfinite() && !(f.floatValue() == 0.0F && !isAllZeros(val))) {\n                    return f;\n                }\n            } else if (lastChar == 'd' || lastChar == 'D') {\n                Double d = createDouble(val);\n                if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n                    return d;\n                }\n            } else if (lastChar == 'l' || lastChar == 'L') {\n                return createLong(val.substring(0, val.length() - 1));\n            } else {\n                //Type unknown so let's do double by default.\n                try {\n                    Double d = createDouble(val);\n                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch for TENThs and HUNDREDTHs compatibility\n                }\n                return createBigDecimal(val);\n            }\n\n        } catch (NumberFormatException e) {\n            // empty catch statement\n        }\n    } else {//(expPos >= 0)\n\n        // Cases where 'E' or 'e' is followed by nothing.\n        if ((expPos == val.length() - 1)) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n\n        try {\n            if (lastChar == 'f' || lastChar == 'F') {\n                Float f = createFloat(val);\n                if (!f.isInfinite() && !(f.floatValue() == 0.0F && !isAllZeros(val))) {\n                    return f;\n                }\n            } else if (lastChar == 'd' || lastChar == 'D') {\n                Double d = createDouble(val);\n                if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n                    return d;\n                }\n            } else if (lastChar == 'l' || lastChar == 'L') {\n                return createLong(val.substring(0, val.length() - 1));\n            } else {\n                //Type unknown so let's do double by default.\n                try {\n                    Double d = createDouble(val);\n                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch for TENThs and HUNDREDTHs compatibility\n                }\n                return createBigDecimal(val);\n            }\n\n        } catch (NumberFormatException e) {\n            // empty catch statement\n        }\n    }\n\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\n\nprivate static int indexOfExponent(String val) {\n    int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n    if (expPos <= 0 || expPos >= val.length()) {\n        return -1;\n    }\n    if (expPos < val.length() && (val.charAt(expPos) == '+' || val.charAt(expPos) == '-')) {\n        expPos++;\n    }\n    try {\n        Integer.parseInt(val.substring(expPos));\n        return expPos;\n    } catch (NumberFormatException e) {\n        // empty catch statement\n    }\n    return -1;\n}\n\nprivate static int countDecimals(String val) {\n    int count = 0;\n    for (int i = 0; i < val.length(); i++) {\n        if (val.charAt(i) == '.') {\n            count++;\n        }\n    }\n    return count;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..2f451316 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -135,156 +135,143 @@ public final class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n-            return null;\n-        }\n-        if (val.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n-        }\n-        if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n-        }   \n-        char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n+public static Number createNumber(String val) throws NumberFormatException {\n+    if (val == null) {\n+        return null;\n+    }\n+    if (val.length() == 0) {\n+        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+    }\n+    if (val.startsWith(\"+\")) {\n+        val = val.substring(1);\n+    }\n+    if (val.startsWith(\"--\")) {\n+        return null;\n+    }\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        return createInteger(val);\n+    }\n+    char lastChar = val.charAt(val.length() - 1);\n+    int decPos = val.indexOf('.');\n+    int expPos = indexOfExponent(val);\n+    int numDecimals = countDecimals(val);\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n-            }\n-            mant = val.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+    if (expPos == -1 && (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L')) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    if (decPos == -1 && expPos == -1) {\n+        return createInteger(val);\n+    }\n \n-                    }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+    // Check if there is more than one decimal point.\n+    if (numDecimals > 1) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n \n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // empty catch\n-                    }\n-                    //Fall through\n-                default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+    // Check if decimal point and exponent share the same suffix.\n+    if (expPos > -1 && decPos > -1 && expPos < val.length() - 1 &&\n+            decPos > expPos) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n \n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n+    if (expPos < 0) {\n+        try {\n+            if (lastChar == 'f' || lastChar == 'F') {\n+                Float f = createFloat(val);\n+                if (!f.isInfinite() && !(f.floatValue() == 0.0F && !isAllZeros(val))) {\n+                    return f;\n                 }\n-                try {\n-                    return createLong(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n+            } else if (lastChar == 'd' || lastChar == 'D') {\n+                Double d = createDouble(val);\n+                if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n+                    return d;\n                 }\n-                return createBigInteger(val);\n-\n+            } else if (lastChar == 'l' || lastChar == 'L') {\n+                return createLong(val.substring(0, val.length() - 1));\n             } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                //Type unknown so let's do double by default.\n                 try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n+                    Double d = createDouble(val);\n+                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n+                        return d;\n                     }\n                 } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                    // empty catch for TENThs and HUNDREDTHs compatibility\n+                }\n+                return createBigDecimal(val);\n+            }\n+\n+        } catch (NumberFormatException e) {\n+            // empty catch statement\n+        }\n+    } else {//(expPos >= 0)\n+\n+        // Cases where 'E' or 'e' is followed by nothing.\n+        if ((expPos == val.length() - 1)) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+\n+        try {\n+            if (lastChar == 'f' || lastChar == 'F') {\n+                Float f = createFloat(val);\n+                if (!f.isInfinite() && !(f.floatValue() == 0.0F && !isAllZeros(val))) {\n+                    return f;\n                 }\n+            } else if (lastChar == 'd' || lastChar == 'D') {\n+                Double d = createDouble(val);\n+                if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n+                    return d;\n+                }\n+            } else if (lastChar == 'l' || lastChar == 'L') {\n+                return createLong(val.substring(0, val.length() - 1));\n+            } else {\n+                //Type unknown so let's do double by default.\n                 try {\n                     Double d = createDouble(val);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                    // empty catch for TENThs and HUNDREDTHs compatibility\n                 }\n-\n                 return createBigDecimal(val);\n-\n             }\n \n+        } catch (NumberFormatException e) {\n+            // empty catch statement\n         }\n     }\n \n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+\n+private static int indexOfExponent(String val) {\n+    int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+    if (expPos <= 0 || expPos >= val.length()) {\n+        return -1;\n+    }\n+    if (expPos < val.length() && (val.charAt(expPos) == '+' || val.charAt(expPos) == '-')) {\n+        expPos++;\n+    }\n+    try {\n+        Integer.parseInt(val.substring(expPos));\n+        return expPos;\n+    } catch (NumberFormatException e) {\n+        // empty catch statement\n+    }\n+    return -1;\n+}\n+\n+private static int countDecimals(String val) {\n+    int count = 0;\n+    for (int i = 0; i < val.length(); i++) {\n+        if (val.charAt(i) == '.') {\n+            count++;\n+        }\n+    }\n+    return count;\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 1 failed expected:<1234.5> but was:<1234.5>",
    "test_result": "FAIL"
}