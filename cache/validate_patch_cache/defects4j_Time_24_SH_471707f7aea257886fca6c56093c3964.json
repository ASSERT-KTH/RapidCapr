{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n\n        // Check that all fields are consistent with each other up to this point\n        for (int j = 0; j <= i; j++) {\n            for (int k = j + 1; k <= i; k++) {\n                DurationField f1 = savedFields[j].iField.getDurationField();\n                DurationField f2 = savedFields[k].iField.getDurationField();\n                // Only check fields of the same type to avoid redundant checks\n                if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n                    continue;\n                }\n                int v1 = savedFields[j].iField.get(newMillis);\n                int v2 = savedFields[k].iField.get(newMillis);\n                if (v1 != v2) {\n                    throw new IllegalArgumentException(\"Conflict found: \" + savedFields[j].iField.getName() +\n                            \" \" + v1 + \" and \" + savedFields[k].iField.getName() + \" \" + v2);\n                }\n            }\n        }\n\n        // Validate newMillis value\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..70200667 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,37 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+\n+        // Check that all fields are consistent with each other up to this point\n+        for (int j = 0; j <= i; j++) {\n+            for (int k = j + 1; k <= i; k++) {\n+                DurationField f1 = savedFields[j].iField.getDurationField();\n+                DurationField f2 = savedFields[k].iField.getDurationField();\n+                // Only check fields of the same type to avoid redundant checks\n+                if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n+                    continue;\n+                }\n+                int v1 = savedFields[j].iField.get(newMillis);\n+                int v2 = savedFields[k].iField.get(newMillis);\n+                if (v1 != v2) {\n+                    throw new IllegalArgumentException(\"Conflict found: \" + savedFields[j].iField.getName() +\n+                            \" \" + v1 + \" and \" + savedFields[k].iField.getName() + \" \" + v2);\n+                }\n+            }\n+        }\n+\n+        // Validate newMillis value\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Conflict found: dayOfMonth 24 and dayOfWeek 6",
    "test_result": "FAIL"
}