{
    "patch": "    if (token.getType() == JsDocTokenType.OPEN_PAREN) {\n      // A parenthesized expression\n      Node exprNode = createNode(NodeType.EXPRESSION);\n      parseContextTypeExpressionSkipParens(); // Skip the open-paren\n      addToNodeAndAdvance(exprNode, JsDocTokenType.OPEN_PAREN);\n      parseContextTypeExpressionSkipParens(); // Parse and skip the expression\n      addToNodeAndAdvance(exprNode, JsDocTokenType.CLOSE_PAREN);\n      // Test if the expression is followed by a function arrow (=>)\n      if (getCurrentToken().getType() == JsDocTokenType.ARROW) {\n        addToNodeAndAdvance(exprNode, JsDocTokenType.ARROW);\n        parseContextTypeExpressionSkipParens();\n      }\n      return exprNode;\n    } else {\n      return parseTypeName(token);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..9f45f780 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,22 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token.getType() == JsDocTokenType.OPEN_PAREN) {\n+      // A parenthesized expression\n+      Node exprNode = createNode(NodeType.EXPRESSION);\n+      parseContextTypeExpressionSkipParens(); // Skip the open-paren\n+      addToNodeAndAdvance(exprNode, JsDocTokenType.OPEN_PAREN);\n+      parseContextTypeExpressionSkipParens(); // Parse and skip the expression\n+      addToNodeAndAdvance(exprNode, JsDocTokenType.CLOSE_PAREN);\n+      // Test if the expression is followed by a function arrow (=>)\n+      if (getCurrentToken().getType() == JsDocTokenType.ARROW) {\n+        addToNodeAndAdvance(exprNode, JsDocTokenType.ARROW);\n+        parseContextTypeExpressionSkipParens();\n+      }\n+      return exprNode;\n+    } else {\n+      return parseTypeName(token);\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}