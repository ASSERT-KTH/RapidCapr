{
    "patch": "Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArgument != null) {\n    if (actualTypeArgument instanceof Class) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else if (actualTypeArgument instanceof ParameterizedType) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n        Type[] bounds = tv.getBounds();\n        if (bounds.length == 0) {\n            registerTypeVariablesOn(Object.class);\n        } else {\n            for (Type bound : bounds) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    } else if (actualTypeArgument instanceof WildcardType) {\n        WildcardType wt = (WildcardType) actualTypeArgument;\n        Type[] upperBounds = wt.getUpperBounds();\n        if (upperBounds.length == 0) {\n            registerTypeVariablesOn(Object.class);\n        } else {\n            for (Type upperBound : upperBounds) {\n                registerTypeVariablesOn(upperBound);\n            }\n        }\n        Type[] lowerBounds = wt.getLowerBounds();\n        for (Type lowerBound : lowerBounds) {\n            registerTypeVariablesOn(lowerBound);\n        }\n    }\n} else {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) type;\n            Type[] bounds = tv.getBounds();\n            if (bounds.length == 0) {\n                registerTypeVariablesOn(Object.class);\n            } else {\n                for (Type bound : bounds) {\n                    registerTypeVariablesOn(bound);\n                }\n            }\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b492fc1f8 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,59 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArgument != null) {\n+    if (actualTypeArgument instanceof Class) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else if (actualTypeArgument instanceof ParameterizedType) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n+        Type[] bounds = tv.getBounds();\n+        if (bounds.length == 0) {\n+            registerTypeVariablesOn(Object.class);\n+        } else {\n+            for (Type bound : bounds) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    } else if (actualTypeArgument instanceof WildcardType) {\n+        WildcardType wt = (WildcardType) actualTypeArgument;\n+        Type[] upperBounds = wt.getUpperBounds();\n+        if (upperBounds.length == 0) {\n+            registerTypeVariablesOn(Object.class);\n+        } else {\n+            for (Type upperBound : upperBounds) {\n+                registerTypeVariablesOn(upperBound);\n+            }\n+        }\n+        Type[] lowerBounds = wt.getLowerBounds();\n+        for (Type lowerBound : lowerBounds) {\n+            registerTypeVariablesOn(lowerBound);\n+        }\n+    }\n+} else {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) type;\n+            Type[] bounds = tv.getBounds();\n+            if (bounds.length == 0) {\n+                registerTypeVariablesOn(Object.class);\n+            } else {\n+                for (Type bound : bounds) {\n+                    registerTypeVariablesOn(bound);\n+                }\n+            }\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}