{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  List<DiGraphEdge<Node, ExceptionHandler>> outEdges = getCfg().getOutEdges(cfgNode);\n  return outEdges.stream().anyMatch(e -> e.getValue() instanceof ExceptionHandler);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..52fa94b4 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,10 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  List<DiGraphEdge<Node, ExceptionHandler>> outEdges = getCfg().getOutEdges(cfgNode);\n+  return outEdges.stream().anyMatch(e -> e.getValue() instanceof ExceptionHandler);\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}