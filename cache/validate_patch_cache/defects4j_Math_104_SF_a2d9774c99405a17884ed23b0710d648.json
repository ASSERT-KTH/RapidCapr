{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class MathFunctions {\n    \n    /**\n     * Computes the regularized gamma function P(a, x).\n     * \n     * @param a     the parameter a of the gamma function.\n     * @param x     the value of x.\n     * @return      the value of P(a, x).\n     */\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"Parameter a for the gamma function must be positive.\");\n        }\n        if (x < 0) {\n            throw new IllegalArgumentException(\"The value of x must be non-negative.\");\n        }\n        \n        final double epsilon = 10e-15;\n        final double maxIterations = 1000;\n        \n        double sum = 0;\n        double term = 1;\n        int i = 0;\n        \n        while (i < maxIterations && FastMath.abs(term) > epsilon) {\n            term = (1 / Gamma.gamma(a)) * FastMath.pow(x, a) * FastMath.exp(-x) * \n                    FastMath.pow(x/i, 1 / a) / (1 + x/i);\n            sum += term;\n            i++;\n        }\n        \n        if (i == maxIterations) {\n            throw new RuntimeException(\"Maximum number of iterations exceeded.\");\n        }\n        \n        return sum;\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7d0e60b0c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,48 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class MathFunctions {\n+    \n+    /**\n+     * Computes the regularized gamma function P(a, x).\n+     * \n+     * @param a     the parameter a of the gamma function.\n+     * @param x     the value of x.\n+     * @return      the value of P(a, x).\n+     */\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0) {\n+            throw new IllegalArgumentException(\"Parameter a for the gamma function must be positive.\");\n+        }\n+        if (x < 0) {\n+            throw new IllegalArgumentException(\"The value of x must be non-negative.\");\n+        }\n+        \n+        final double epsilon = 10e-15;\n+        final double maxIterations = 1000;\n+        \n+        double sum = 0;\n+        double term = 1;\n+        int i = 0;\n+        \n+        while (i < maxIterations && FastMath.abs(term) > epsilon) {\n+            term = (1 / Gamma.gamma(a)) * FastMath.pow(x, a) * FastMath.exp(-x) * \n+                    FastMath.pow(x/i, 1 / a) / (1 + x/i);\n+            sum += term;\n+            i++;\n+        }\n+        \n+        if (i == maxIterations) {\n+            throw new RuntimeException(\"Maximum number of iterations exceeded.\");\n+        }\n+        \n+        return sum;\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}