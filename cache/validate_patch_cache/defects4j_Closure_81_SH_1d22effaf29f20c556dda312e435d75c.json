{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n    }\n\n    Node node = newNode(Token.FUNCTION);\n\n    Node newName = transform(name);\n    if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n\n    node.addChildToBack(newName);\n\n    Node lp = newNode(Token.LP);\n\n    Name fnName = functionNode.getFunctionName();\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setLineno(fnName == null ? functionNode.getLineno() : fnName.getLineno());\n    lp.setCharno(position2charno(lparenCharno));\n    node.addChildToBack(lp);\n\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a23e3fb6 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,48 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    Boolean isUnnamedFunction = false;\n+    if (name == null) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+    }\n+\n+    Node node = newNode(Token.FUNCTION);\n+\n+    Node newName = transform(name);\n+    if (isUnnamedFunction) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+    }\n+\n+    node.addChildToBack(newName);\n+\n+    Node lp = newNode(Token.LP);\n+\n+    Name fnName = functionNode.getFunctionName();\n+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+    lp.setLineno(fnName == null ? functionNode.getLineno() : fnName.getLineno());\n+    lp.setCharno(position2charno(lparenCharno));\n+    node.addChildToBack(lp);\n+\n+    for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+    }\n+\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+    return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}