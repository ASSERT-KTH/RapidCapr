{
    "patch": "try {\n    boolean adjusted = false;\n    for (int i = 0; i < count; i++) {\n        SavedField fieldToSet = savedFields[i];\n        DateTimeField currentField = fieldToSet.iField;\n        DateTimeField nextField = (i != count - 1) ? savedFields[i + 1].iField : null;\n        long newMillis = fieldToSet.set(millis, resetFields);\n        if (millis > 0 && newMillis < 0) {\n            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n        }\n        if (millis < 0 && newMillis > 0) {\n            throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n        }\n        if (!adjusted && millis != newMillis) {\n            adjusted = true;\n        }\n        millis = newMillis;\n        if (i == 0 && newMillis < millis) {\n            if (compareReverse(currentField.getDurationField(), nextField) < 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n        if (i != 0 && i != count - 1 && currentField.getDurationField().getType() == DurationFieldType.millis() && currentField.get(newMillis) != currentField.get(millis)) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9b48795d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,40 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    boolean adjusted = false;\n+    for (int i = 0; i < count; i++) {\n+        SavedField fieldToSet = savedFields[i];\n+        DateTimeField currentField = fieldToSet.iField;\n+        DateTimeField nextField = (i != count - 1) ? savedFields[i + 1].iField : null;\n+        long newMillis = fieldToSet.set(millis, resetFields);\n+        if (millis > 0 && newMillis < 0) {\n+            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+        }\n+        if (millis < 0 && newMillis > 0) {\n+            throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+        }\n+        if (!adjusted && millis != newMillis) {\n+            adjusted = true;\n+        }\n+        millis = newMillis;\n+        if (i == 0 && newMillis < millis) {\n+            if (compareReverse(currentField.getDurationField(), nextField) < 0) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                return computeMillis(resetFields, text);\n+            }\n+        }\n+        if (i != 0 && i != count - 1 && currentField.getDurationField().getType() == DurationFieldType.millis() && currentField.get(newMillis) != currentField.get(millis)) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: method compareReverse in class DateTimeParserBucket cannot be applied to given types;",
    "test_result": "ERROR"
}