{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    RealMatrix sMatrix = svd.getS();\n    for (int i = 0; i < sMatrix.getRowDimension(); i++) {\n        double val = Math.sqrt(sMatrix.getEntry(i, i));\n        sMatrix.setEntry(i, i, val);\n    }\n    RealMatrix sqrtMatrix = svd.getU().multiply(sMatrix).multiply(svd.getVT());\n    return sqrtMatrix;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ebcafc819 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    RealMatrix sMatrix = svd.getS();\n+    for (int i = 0; i < sMatrix.getRowDimension(); i++) {\n+        double val = Math.sqrt(sMatrix.getEntry(i, i));\n+        sMatrix.setEntry(i, i, val);\n     }\n+    RealMatrix sqrtMatrix = svd.getU().multiply(sMatrix).multiply(svd.getVT());\n+    return sqrtMatrix;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}