{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = null;\n    if (mock instanceof Factory) {\n        Callback[] callbacks = ((Factory) mock).getCallbacks();\n        MethodInterceptorFilter filter = null;\n        for (Callback callback : callbacks) {\n            if (callback instanceof MethodInterceptorFilter) {\n                filter = (MethodInterceptorFilter) callback;\n                break;\n            }\n        }\n        if (filter != null) {\n            oldMockHandler = filter.getMockHandler();\n        }\n    }\n    if (oldMockHandler != null) {\n        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        throw new IllegalArgumentException(\"Mock object is not a Mockito mock instance.\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..728cddebf 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = null;\n+    if (mock instanceof Factory) {\n+        Callback[] callbacks = ((Factory) mock).getCallbacks();\n+        MethodInterceptorFilter filter = null;\n+        for (Callback callback : callbacks) {\n+            if (callback instanceof MethodInterceptorFilter) {\n+                filter = (MethodInterceptorFilter) callback;\n+                break;\n+            }\n+        }\n+        if (filter != null) {\n+            oldMockHandler = filter.getMockHandler();\n+        }\n+    }\n+    if (oldMockHandler != null) {\n+        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        throw new IllegalArgumentException(\"Mock object is not a Mockito mock instance.\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}