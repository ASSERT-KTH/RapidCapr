{
    "patch": "public static String fixCode(String codeWithBug) {\n    Pattern pattern = Pattern.compile(\"(for\\\\s*\\\\(([^;]*);([^;]*);([^)]*)\\\\)\\\\s*\\\\{)([\\\\S\\\\s]*?)(?=\\\\})\");\n    Matcher matcher = pattern.matcher(codeWithBug);\n\n    StringBuffer sb = new StringBuffer();\n    while (matcher.find()) {\n        String init = matcher.group(2).trim().replaceAll(\"\\\\s+\", \" \");\n        String cond = matcher.group(3).trim().replaceAll(\"\\\\s+\", \" \");\n        String incr = matcher.group(4).trim().replaceAll(\"\\\\s+\", \" \");\n        String body = matcher.group(5).trim();\n\n        String fixedInit = fixExpression(init);\n        String fixedCond = fixExpression(cond);\n        String fixedIncr = fixExpression(incr);\n\n        String fixedBody = \"\";\n        if (!body.isEmpty()) {\n            fixedBody = \"{\\n\" + fixCode(body) + \"}\";\n        }\n\n        String forStmt = String.format(\"for (%s; %s; %s) %s\", fixedInit, fixedCond, fixedIncr, fixedBody);\n        matcher.appendReplacement(sb, forStmt);\n    }\n    matcher.appendTail(sb);\n\n    return sb.toString();\n}\n\nprivate static String fixExpression(String expression) {\n    if (expression.trim().isEmpty()) {\n        return expression;\n    }\n    if (!expression.endsWith(\";\")) {\n        expression += \";\";\n    }\n    return expression;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..20404abe 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,43 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String codeWithBug) {\n+    Pattern pattern = Pattern.compile(\"(for\\\\s*\\\\(([^;]*);([^;]*);([^)]*)\\\\)\\\\s*\\\\{)([\\\\S\\\\s]*?)(?=\\\\})\");\n+    Matcher matcher = pattern.matcher(codeWithBug);\n+\n+    StringBuffer sb = new StringBuffer();\n+    while (matcher.find()) {\n+        String init = matcher.group(2).trim().replaceAll(\"\\\\s+\", \" \");\n+        String cond = matcher.group(3).trim().replaceAll(\"\\\\s+\", \" \");\n+        String incr = matcher.group(4).trim().replaceAll(\"\\\\s+\", \" \");\n+        String body = matcher.group(5).trim();\n+\n+        String fixedInit = fixExpression(init);\n+        String fixedCond = fixExpression(cond);\n+        String fixedIncr = fixExpression(incr);\n+\n+        String fixedBody = \"\";\n+        if (!body.isEmpty()) {\n+            fixedBody = \"{\\n\" + fixCode(body) + \"}\";\n+        }\n+\n+        String forStmt = String.format(\"for (%s; %s; %s) %s\", fixedInit, fixedCond, fixedIncr, fixedBody);\n+        matcher.appendReplacement(sb, forStmt);\n+    }\n+    matcher.appendTail(sb);\n+\n+    return sb.toString();\n+}\n+\n+private static String fixExpression(String expression) {\n+    if (expression.trim().isEmpty()) {\n+        return expression;\n+    }\n+    if (!expression.endsWith(\";\")) {\n+        expression += \";\";\n+    }\n+    return expression;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}