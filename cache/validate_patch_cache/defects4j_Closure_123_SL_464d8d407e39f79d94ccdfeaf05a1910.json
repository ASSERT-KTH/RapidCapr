{
    "patch": "public String generateCode(Context context) {\n    if (operator.equals(Operator.IN)) {\n        String s = left.generateCode(Context.CONDITION);\n        String d = right.generateCode(Context.NORMAL);\n        boolean exists = false;\n        if(d.startsWith(\"[\") && d.endsWith(\"]\")) {\n            d = d.substring(1, d.length() - 1);\n            exists = true;\n        }\n        String c = \"\";\n        if (d.startsWith(\"new String[]\")) {\n            c = \"i < \" + d + \".length\";\n        } else {\n            c = \"i in \" + d;\n        }\n        return \"(\" + s + (exists ? \"\" : \".hasOwnProperty\") + \" && function() { for (var i in \" +\n                d + \") { if (\" + c + \") { return true; } }\" +\n                \"return false;}())\";\n    }\n    return left.generateCode(Context.NORMAL) + operator.representation() + right.generateCode(Context.NORMAL);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}