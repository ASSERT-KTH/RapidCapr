{
    "patch": "    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        \n        final UnivariateRealFunction g = new UnivariateRealFunction() {\n            public double value(double x) throws FunctionEvaluationException {\n                return f.value(x);\n            }\n        };\n        \n        final double fmin = g.value(min);\n        final double fmax = g.value(max);\n        final double finit = g.value(initial);\n        \n        final double m = (min + max) / 2.0;\n        final double fmid = g.value(m);\n        \n        if (initial < min || initial > max) {\n            throw new FunctionEvaluationException(initial,\n                    \"invalid interval, initial value parameters:  min={0} max={1} initial={2}\",\n                    min, max, initial);\n        }\n\n        if (fmin * fmax >= 0) {\n            throw new FunctionEvaluationException(min, max, fmin, fmax);\n        }\n\n        if (fmin == 0) {\n            return min;\n        }\n\n        if (fmax == 0) {\n            return max;\n        }\n\n        if (finit == 0) {\n            return initial;\n        }\n        \n        if ((fmin >= finit && fmax <= finit) || (fmax >= finit && fmin <= finit)) {\n            throw new FunctionEvaluationException(initial, \"Arguments are not bracketing any root, \"\n                    + \"min value is {0} and max value is {1}\", fmin, fmax);\n        }\n\n        if (Math.abs(max - min) <= solver.getAbsoluteAccuracy()) {\n            return (min + max) / 2.0;\n        }\n\n        if (Math.abs(fmid) < Math.abs(finit)) {\n            return solve(g, m, max, m);\n        } else {\n            return solve(g, min, m, m);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..f6e70e928 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,56 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        \n+        final UnivariateRealFunction g = new UnivariateRealFunction() {\n+            public double value(double x) throws FunctionEvaluationException {\n+                return f.value(x);\n+            }\n+        };\n+        \n+        final double fmin = g.value(min);\n+        final double fmax = g.value(max);\n+        final double finit = g.value(initial);\n+        \n+        final double m = (min + max) / 2.0;\n+        final double fmid = g.value(m);\n+        \n+        if (initial < min || initial > max) {\n+            throw new FunctionEvaluationException(initial,\n+                    \"invalid interval, initial value parameters:  min={0} max={1} initial={2}\",\n+                    min, max, initial);\n+        }\n+\n+        if (fmin * fmax >= 0) {\n+            throw new FunctionEvaluationException(min, max, fmin, fmax);\n+        }\n+\n+        if (fmin == 0) {\n+            return min;\n+        }\n+\n+        if (fmax == 0) {\n+            return max;\n+        }\n+\n+        if (finit == 0) {\n+            return initial;\n+        }\n+        \n+        if ((fmin >= finit && fmax <= finit) || (fmax >= finit && fmin <= finit)) {\n+            throw new FunctionEvaluationException(initial, \"Arguments are not bracketing any root, \"\n+                    + \"min value is {0} and max value is {1}\", fmin, fmax);\n+        }\n+\n+        if (Math.abs(max - min) <= solver.getAbsoluteAccuracy()) {\n+            return (min + max) / 2.0;\n+        }\n+\n+        if (Math.abs(fmid) < Math.abs(finit)) {\n+            return solve(g, m, max, m);\n+        } else {\n+            return solve(g, min, m, m);\n+        }\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: no suitable constructor found for FunctionEvaluationException(double,double,double,double)",
    "test_result": "ERROR"
}