{
    "patch": "    if (NodeUtil.isAssignmentOp(parent) && !NodeUtil.isExpressionResultUsed(parent)) {\n      // If GETPROP/GETELEM is used as assignment target the array literal is\n      // acting as a temporary we can't fold it here:\n      //    \"[][0] += 1\" --> \"undefined\"\n      n.replaceWith(IR.undefined());\n      reportCodeChange();\n      return null;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return null;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return null;\n    }\n\n    if (intIndex < 0) {\n      // return undefined for negative index.\n      n.replaceWith(IR.undefined());\n      reportCodeChange();\n      return null;\n    }\n\n    Node current = left;\n    for (int i = 0; current != null && i < intIndex; i++) {\n      if (current.isSpread()) {\n        // Can't fold spread args or else the array-like semantic would be turned\n        // into elements.\n        return null;\n      }\n      current = current.getNext();\n    }\n    if (current == null) {\n      // replace getelem with undefined.\n      n.replaceWith(IR.undefined());\n      reportCodeChange();\n      return null;\n    }\n\n    return current;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..bc1fcc77 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,52 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n+    if (NodeUtil.isAssignmentOp(parent) && !NodeUtil.isExpressionResultUsed(parent)) {\n+      // If GETPROP/GETELEM is used as assignment target the array literal is\n+      // acting as a temporary we can't fold it here:\n+      //    \"[][0] += 1\" --> \"undefined\"\n+      n.replaceWith(IR.undefined());\n+      reportCodeChange();\n+      return null;\n     }\n \n     if (!right.isNumber()) {\n       // Sometimes people like to use complex expressions to index into\n       // arrays, or strings to index into array methods.\n-      return n;\n+      return null;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n       error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+      return null;\n     }\n \n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+      // return undefined for negative index.\n+      n.replaceWith(IR.undefined());\n+      reportCodeChange();\n+      return null;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n+    Node current = left;\n     for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+      if (current.isSpread()) {\n+        // Can't fold spread args or else the array-like semantic would be turned\n+        // into elements.\n+        return null;\n+      }\n       current = current.getNext();\n     }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    if (current == null) {\n+      // replace getelem with undefined.\n+      n.replaceWith(IR.undefined());\n+      reportCodeChange();\n+      return null;\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+    return current;\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}