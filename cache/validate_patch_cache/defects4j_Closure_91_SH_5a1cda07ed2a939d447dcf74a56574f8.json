{
    "patch": "      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n        // Don't traverse exported functions getting assigned to obj.prototype.method.\n        Node parentNode = parent.getParent();\n        if (NodeUtil.isGet(parentNode) &&\n            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n          if (NodeUtil.isGet(parentNode.getParent())) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c3c5cd3a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n+        // Don't traverse exported functions getting assigned to obj.prototype.method.\n+        Node parentNode = parent.getParent();\n+        if (NodeUtil.isGet(parentNode) &&\n+            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n+          if (NodeUtil.isGet(parentNode.getParent())) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}