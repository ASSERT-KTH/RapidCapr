{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal = real + rhs.getReal();\n    double newImaginary = imaginary + rhs.getImaginary();\n    if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n        double sign = Math.signum(newReal + newImaginary);\n        return createComplex(sign * Double.POSITIVE_INFINITY, sign * Double.POSITIVE_INFINITY);\n    }\n    if (Double.isInfinite(newReal)) {\n        double newImaginary2 = newImaginary + imaginary;\n        double sign = Math.signum(newImaginary2);\n        return createComplex(newReal, sign * Double.POSITIVE_INFINITY);\n    }\n    if (Double.isInfinite(newImaginary)) {\n        double newReal2 = newReal + real;\n        double sign = Math.signum(newReal2);\n        return createComplex(sign * Double.POSITIVE_INFINITY, newImaginary);\n    }\n    return createComplex(newReal, newImaginary);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..142524fb9 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,29 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double newReal = real + rhs.getReal();\n+    double newImaginary = imaginary + rhs.getImaginary();\n+    if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n+        return createComplex(Double.NaN, Double.NaN);\n+    }\n+    if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n+        double sign = Math.signum(newReal + newImaginary);\n+        return createComplex(sign * Double.POSITIVE_INFINITY, sign * Double.POSITIVE_INFINITY);\n     }\n+    if (Double.isInfinite(newReal)) {\n+        double newImaginary2 = newImaginary + imaginary;\n+        double sign = Math.signum(newImaginary2);\n+        return createComplex(newReal, sign * Double.POSITIVE_INFINITY);\n+    }\n+    if (Double.isInfinite(newImaginary)) {\n+        double newReal2 = newReal + real;\n+        double sign = Math.signum(newReal2);\n+        return createComplex(sign * Double.POSITIVE_INFINITY, newImaginary);\n+    }\n+    return createComplex(newReal, newImaginary);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "junit.framework.AssertionFailedError: expected:<Infinity> but was:<1.0>",
    "test_result": "FAIL"
}