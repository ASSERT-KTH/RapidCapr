{
    "patch": "public static String getProperty(String key) {\n    Properties props = new Properties();\n    String filename = \"config.properties\";\n    try {\n        InputStream input = PropertyUtil.class.getClassLoader().getResourceAsStream(filename);\n        if (input == null) {\n            throw new FileNotFoundException(\"Unable to find \" + filename);\n        }\n        props.load(input);\n        input.close();\n    } catch (IOException ex) {\n        throw new RuntimeException(\"Error loading properties file\", ex);\n    }\n    return props.getProperty(key);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..e7f5f918 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) {\n+    Properties props = new Properties();\n+    String filename = \"config.properties\";\n+    try {\n+        InputStream input = PropertyUtil.class.getClassLoader().getResourceAsStream(filename);\n+        if (input == null) {\n+            throw new FileNotFoundException(\"Unable to find \" + filename);\n+        }\n+        props.load(input);\n+        input.close();\n+    } catch (IOException ex) {\n+        throw new RuntimeException(\"Error loading properties file\", ex);\n+    }\n+    return props.getProperty(key);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}