{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    if (n == 1) {\n        double sqrt = FastMath.sqrt(m.getEntry(0, 0));\n        return MatrixUtils.createRealMatrix(new double[][]{{sqrt}});\n    }\n\n    int half = n / 2;\n\n    RealMatrix a = m.getSubMatrix(0, half - 1, 0, half - 1);\n    RealMatrix b = m.getSubMatrix(0, half - 1, half, n - 1);\n    RealMatrix c = m.getSubMatrix(half, n - 1, 0, half - 1);\n    RealMatrix d = m.getSubMatrix(half, n - 1, half, n - 1);\n\n    RealMatrix sqrtA = squareRoot(a);\n    RealMatrix sqrtD = squareRoot(d);\n\n    RealMatrix bSqrtDInv = b.multiply(sqrtD).inverse();\n    RealMatrix cSqrtAInv = c.multiply(sqrtA).inverse();\n\n    RealMatrix m1 = sqrtA.add(b.multiply(bSqrtDInv).multiply(cSqrtAInv).multiply(sqrtA).scalarMultiply(-1));\n    RealMatrix m2 = b.multiply(bSqrtDInv).multiply(sqrtD).add(c.multiply(cSqrtAInv).multiply(sqrtA)).multiply(cSqrtAInv).scalarMultiply(sqrtD.getTrace() / (2 * n));\n\n    RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n    result.setSubMatrix(m1.getData(), 0, 0);\n    result.setSubMatrix(m2.getData(), 0, half);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ba3622b1f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,33 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    if (n == 1) {\n+        double sqrt = FastMath.sqrt(m.getEntry(0, 0));\n+        return MatrixUtils.createRealMatrix(new double[][]{{sqrt}});\n     }\n+\n+    int half = n / 2;\n+\n+    RealMatrix a = m.getSubMatrix(0, half - 1, 0, half - 1);\n+    RealMatrix b = m.getSubMatrix(0, half - 1, half, n - 1);\n+    RealMatrix c = m.getSubMatrix(half, n - 1, 0, half - 1);\n+    RealMatrix d = m.getSubMatrix(half, n - 1, half, n - 1);\n+\n+    RealMatrix sqrtA = squareRoot(a);\n+    RealMatrix sqrtD = squareRoot(d);\n+\n+    RealMatrix bSqrtDInv = b.multiply(sqrtD).inverse();\n+    RealMatrix cSqrtAInv = c.multiply(sqrtA).inverse();\n+\n+    RealMatrix m1 = sqrtA.add(b.multiply(bSqrtDInv).multiply(cSqrtAInv).multiply(sqrtA).scalarMultiply(-1));\n+    RealMatrix m2 = b.multiply(bSqrtDInv).multiply(sqrtD).add(c.multiply(cSqrtAInv).multiply(sqrtA)).multiply(cSqrtAInv).scalarMultiply(sqrtD.getTrace() / (2 * n));\n+\n+    RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n+    result.setSubMatrix(m1.getData(), 0, 0);\n+    result.setSubMatrix(m2.getData(), 0, half);\n+\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}