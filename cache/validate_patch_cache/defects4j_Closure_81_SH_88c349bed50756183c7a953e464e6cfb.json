{
    "patch": "       if (name == null) {\n         name = new Name();\n         name.setIdentifier(\"\");\n       }\n       Node node = newNode(Token.FUNCTION);\n       Node newName = transform(name);\n \n\n       if (name.getLineno() == -1) {\n         newName.setLineno(functionNode.getLineno());\n         int lpColumn = functionNode.getAbsolutePosition() +\n             functionNode.getLp();\n         newName.setCharno(position2charno(lpColumn));\n\n         // If the function name in an anonymous function, then the closing paren\n         // is on the same line as the last statement of the function body.\n         int rpColumn = functionNode.getAbsolutePosition() +\n             functionNode.getLength() - 1;\n         char c = source.charAt(rpColumn);\n         if (isNewline(c)) {\n           newName.setLength(rpColumn - newName.getCharno() + 1);\n         }\n       } else {\n         // Transform the line containing the opening curly brace of the function.\n         // Start from the child's position (which may not equal the parent's position\n         // due to comments within the function declaration).\n         int lcurlyPos = functionNode.getBody().getRelativePosition() +\n             functionNode.getBody().getLp() + 1;\n         int lineStart = positionToLineStart(lcurlyPos);\n         Node lcurlyNode = new Node(Token.LCURLY);\n         lcurlyNode.setLineno(lineNumber);\n         lcurlyNode.setCharno(lineStart - getLineStart(lineNumber - 1) + 1);\n         node.addChildToBack(newName);\n         node.addChildToBack(transform(functionNode.getParams()));\n         node.addChildToBack(lcurlyNode);\n         node.addChildToBack(transform(functionNode.getBody()));\n         node.addChildToBack(new Node(Token.RCURLY));\n         return node;\n       }\n\n       Node lp = newNode(Token.LP);\n       // The left paren's complicated because it's not represented by an\n       // AstNode, so there's nothing that has the actual line number that it\n       // appeared on.  We know the paren has to appear on the same line as the\n       // function name (or else a semicolon will be inserted.)  If there's no\n       // function name, assume the paren was on the same line as the function.\n       lp.setLineno(newName.getLineno());\n       int lparCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n       lp.setCharno(position2charno(lparCharno));\n\n       node.addChildToBack(newName);\n       node.addChildToBack(transform(functionNode.getParams()));\n       node.addChildToBack(lp);\n       node.addChildToBack(transform(functionNode.getBody()));\n       node.addChildToBack(new Node(Token.RCURLY));\n       return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a9100b21 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,62 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+       if (name == null) {\n+         name = new Name();\n+         name.setIdentifier(\"\");\n+       }\n+       Node node = newNode(Token.FUNCTION);\n+       Node newName = transform(name);\n+ \n+\n+       if (name.getLineno() == -1) {\n+         newName.setLineno(functionNode.getLineno());\n+         int lpColumn = functionNode.getAbsolutePosition() +\n+             functionNode.getLp();\n+         newName.setCharno(position2charno(lpColumn));\n+\n+         // If the function name in an anonymous function, then the closing paren\n+         // is on the same line as the last statement of the function body.\n+         int rpColumn = functionNode.getAbsolutePosition() +\n+             functionNode.getLength() - 1;\n+         char c = source.charAt(rpColumn);\n+         if (isNewline(c)) {\n+           newName.setLength(rpColumn - newName.getCharno() + 1);\n+         }\n+       } else {\n+         // Transform the line containing the opening curly brace of the function.\n+         // Start from the child's position (which may not equal the parent's position\n+         // due to comments within the function declaration).\n+         int lcurlyPos = functionNode.getBody().getRelativePosition() +\n+             functionNode.getBody().getLp() + 1;\n+         int lineStart = positionToLineStart(lcurlyPos);\n+         Node lcurlyNode = new Node(Token.LCURLY);\n+         lcurlyNode.setLineno(lineNumber);\n+         lcurlyNode.setCharno(lineStart - getLineStart(lineNumber - 1) + 1);\n+         node.addChildToBack(newName);\n+         node.addChildToBack(transform(functionNode.getParams()));\n+         node.addChildToBack(lcurlyNode);\n+         node.addChildToBack(transform(functionNode.getBody()));\n+         node.addChildToBack(new Node(Token.RCURLY));\n+         return node;\n+       }\n+\n+       Node lp = newNode(Token.LP);\n+       // The left paren's complicated because it's not represented by an\n+       // AstNode, so there's nothing that has the actual line number that it\n+       // appeared on.  We know the paren has to appear on the same line as the\n+       // function name (or else a semicolon will be inserted.)  If there's no\n+       // function name, assume the paren was on the same line as the function.\n+       lp.setLineno(newName.getLineno());\n+       int lparCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+       lp.setCharno(position2charno(lparCharno));\n+\n+       node.addChildToBack(newName);\n+       node.addChildToBack(transform(functionNode.getParams()));\n+       node.addChildToBack(lp);\n+       node.addChildToBack(transform(functionNode.getBody()));\n+       node.addChildToBack(new Node(Token.RCURLY));\n+       return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}