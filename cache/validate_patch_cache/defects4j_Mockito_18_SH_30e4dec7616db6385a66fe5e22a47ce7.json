{
    "patch": "public ReturnValue execute(Code code) {\n    ReturnValue values = new ReturnValue();\n    try {\n        long startTime = System.currentTimeMillis();\n        Object returnValue = code.run();\n        long endTime = System.currentTimeMillis();\n\n        values.setReturnValue(returnValue);\n        values.setTimeTaken(endTime - startTime);\n\n        if (returnValue instanceof Iterable) {\n            Iterable<?> iterable = (Iterable<?>) returnValue;\n            if (iterable.iterator().hasNext()) {\n                values.setType(ReturnValueType.ITERABLE_WITH_VALUES);\n            } else {\n                values.setType(ReturnValueType.EMPTY_ITERABLE);\n            }\n        } else if (returnValue == null) {\n            values.setType(ReturnValueType.NULL);\n        } else {\n            values.setType(ReturnValueType.NON_ITERABLE);\n        }\n    } catch (Exception e) {\n        values.setType(ReturnValueType.EXCEPTION);\n        values.setException(e);\n    }\n\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}