{
    "patch": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (candidate != null && isAssignableFrom(field.getType(), candidate.getClass())) {\n                setFieldValue(fieldInstance, field, candidate);\n                injectMockCandidate(candidate.getClass(), mocks, candidate);\n                break;\n            }\n        }\n    }\n    \n    private boolean isAssignableFrom(Class<?> fieldType, Class<?> candidateType) {\n        if (fieldType.isPrimitive()) {\n            fieldType = PRIMITIVE_TO_WRAPPER.get(fieldType);\n        }\n        if (candidateType.isPrimitive()) {\n            candidateType = PRIMITIVE_TO_WRAPPER.get(candidateType);\n        }\n        return fieldType.isAssignableFrom(candidateType);\n    }\n    \n    private void setFieldValue(Object fieldInstance, Field field, Object value) {\n        try {\n            field.setAccessible(true);\n            field.set(fieldInstance, value);\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Could not set field \" + field.getName() + \" value\", e);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..735b1b1de 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,36 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (candidate != null && isAssignableFrom(field.getType(), candidate.getClass())) {\n+                setFieldValue(fieldInstance, field, candidate);\n+                injectMockCandidate(candidate.getClass(), mocks, candidate);\n+                break;\n+            }\n+        }\n+    }\n+    \n+    private boolean isAssignableFrom(Class<?> fieldType, Class<?> candidateType) {\n+        if (fieldType.isPrimitive()) {\n+            fieldType = PRIMITIVE_TO_WRAPPER.get(fieldType);\n+        }\n+        if (candidateType.isPrimitive()) {\n+            candidateType = PRIMITIVE_TO_WRAPPER.get(candidateType);\n+        }\n+        return fieldType.isAssignableFrom(candidateType);\n+    }\n+    \n+    private void setFieldValue(Object fieldInstance, Field field, Object value) {\n+        try {\n+            field.setAccessible(true);\n+            field.set(fieldInstance, value);\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalArgumentException(\"Could not set field \" + field.getName() + \" value\", e);\n+        }\n+    }\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}