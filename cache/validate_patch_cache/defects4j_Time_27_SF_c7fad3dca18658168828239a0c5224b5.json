{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        }\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            List<Object> subList = elementPairs.subList(1, size);\n            int subSize = subList.size();\n            if ((subSize == 2) && (subList.get(0) instanceof Literal)) {\n                // Handle case where there is a single separator followed by a single non-literal.\n                PeriodFormatter formatter = toFormatter(subList.subList(1, subSize), notPrinter, notParser);\n                if ((formatter.getPrinter() != null) && (formatter.getParser() != null)) {\n                    sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n                }\n                return new PeriodFormatter(sep, sep);\n            }\n            // Recursive case.\n            PeriodFormatter formatter = toFormatter(subList, notPrinter, notParser);\n            if ((formatter.getPrinter() != null) && (formatter.getParser() != null)) {\n                sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n            }\n            return new PeriodFormatter(sep, sep);\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..53991dbb 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -796,20 +796,32 @@ public class PeriodFormatterBuilder {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+            Separator sep = (Separator) elementPairs.get(0);\n+            List<Object> subList = elementPairs.subList(1, size);\n+            int subSize = subList.size();\n+            if ((subSize == 2) && (subList.get(0) instanceof Literal)) {\n+                // Handle case where there is a single separator followed by a single non-literal.\n+                PeriodFormatter formatter = toFormatter(subList.subList(1, subSize), notPrinter, notParser);\n+                if ((formatter.getPrinter() != null) && (formatter.getParser() != null)) {\n+                    sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n+                }\n+                return new PeriodFormatter(sep, sep);\n+            }\n+            // Recursive case.\n+            PeriodFormatter formatter = toFormatter(subList, notPrinter, notParser);\n+            if ((formatter.getPrinter() != null) && (formatter.getParser() != null)) {\n+                sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n+            }\n+            return new PeriodFormatter(sep, sep);\n+        }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n \n     private static Object[] createComposite(List<Object> elementPairs) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}