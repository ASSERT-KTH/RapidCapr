{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.FOR ||\n            pType == Token.IF ||\n            pType == Token.WHILE ||\n            pType == Token.DO ||\n            pType == Token.TRY ||\n            pType == Token.CATCH ||\n            pType == Token.COLON ||\n            pType == Token.AND ||\n            pType == Token.OR ||\n            pType == Token.HOOK ||\n            pType == Token.OBJECTLIT ||\n            pType == Token.CLASS ||\n            pType == Token.METHOD ||\n            pType == Token.COMPUTED_PROP ||\n            pType == Token.COMMA)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION &&\n            NodeUtil.isGet(lhs) &&\n            lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\");\n\n        if (isFunctionAssignmentToPrototype) {\n          return false;\n        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n          // Don't traverse function expressions that are not assigned to an object\n          return false;\n        } else if (NodeUtil.isGet(lhs)) {\n          boolean isPrototypeAssignment = false;\n          boolean isObjectLiteralAssignment = false;\n\n          // Check if the function is being assigned to a prototype property\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n            // The function may be nested inside other assignments before the prototype assignment\n            // Traverse up the parent chain until the prototype assignment is found\n            Node curr = parent;\n            while (curr.getParent() != null) {\n              Node grandParent = curr.getParent();\n              if (NodeUtil.isGet(grandParent.getFirstChild()) &&\n                  grandParent.getFirstChild().getType() == Token.GETPROP &&\n                  grandParent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n                isPrototypeAssignment = false;\n                break;\n              }\n              curr = grandParent;\n            }\n          } else {\n            // Check if the function is being assigned to an object literal\n            Node ancestor = lhs;\n            while (ancestor.getParent() != null) {\n              ancestor = ancestor.getParent();\n              if (ancestor.getType() == Token.OBJECTLIT) {\n                isObjectLiteralAssignment = true;\n                break;\n              }\n            }\n          }\n\n          if (isPrototypeAssignment) {\n            return false;\n          } else if (!isObjectLiteralAssignment) {\n            return false;\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f45bae35 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,136 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+            pType == Token.FOR ||\n+            pType == Token.IF ||\n+            pType == Token.WHILE ||\n+            pType == Token.DO ||\n+            pType == Token.TRY ||\n+            pType == Token.CATCH ||\n+            pType == Token.COLON ||\n+            pType == Token.AND ||\n+            pType == Token.OR ||\n+            pType == Token.HOOK ||\n+            pType == Token.OBJECTLIT ||\n+            pType == Token.CLASS ||\n+            pType == Token.METHOD ||\n+            pType == Token.COMPUTED_PROP ||\n+            pType == Token.COMMA)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION &&\n+            NodeUtil.isGet(lhs) &&\n+            lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\");\n+\n+        if (isFunctionAssignmentToPrototype) {\n+          return false;\n+        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n+          // Don't traverse function expressions that are not assigned to an object\n+          return false;\n+        } else if (NodeUtil.isGet(lhs)) {\n+          boolean isPrototypeAssignment = false;\n+          boolean isObjectLiteralAssignment = false;\n+\n+          // Check if the function is being assigned to a prototype property\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeAssignment = true;\n+            // The function may be nested inside other assignments before the prototype assignment\n+            // Traverse up the parent chain until the prototype assignment is found\n+            Node curr = parent;\n+            while (curr.getParent() != null) {\n+              Node grandParent = curr.getParent();\n+              if (NodeUtil.isGet(grandParent.getFirstChild()) &&\n+                  grandParent.getFirstChild().getType() == Token.GETPROP &&\n+                  grandParent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+                isPrototypeAssignment = false;\n+                break;\n+              }\n+              curr = grandParent;\n+            }\n+          } else {\n+            // Check if the function is being assigned to an object literal\n+            Node ancestor = lhs;\n+            while (ancestor.getParent() != null) {\n+              ancestor = ancestor.getParent();\n+              if (ancestor.getType() == Token.OBJECTLIT) {\n+                isObjectLiteralAssignment = true;\n+                break;\n+              }\n+            }\n+          }\n+\n+          if (isPrototypeAssignment) {\n+            return false;\n+          } else if (!isObjectLiteralAssignment) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}