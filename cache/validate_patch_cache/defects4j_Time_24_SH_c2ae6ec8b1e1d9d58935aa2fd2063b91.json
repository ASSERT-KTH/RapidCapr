{
    "patch": "            long year = iDefaultYear;\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), year);\n            }\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n                if(savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {\n                    year = savedFields[i].getLongValue();\n                }\n            }\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), year);\n                millis = savedFields[0].set(millis, year, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b7b2beb0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,19 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            long year = iDefaultYear;\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                saveField(DateTimeFieldType.year(), year);\n+            }\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+                if(savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {\n+                    year = savedFields[i].getLongValue();\n+                }\n+            }\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                saveField(DateTimeFieldType.year(), year);\n+                millis = savedFields[0].set(millis, year, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}