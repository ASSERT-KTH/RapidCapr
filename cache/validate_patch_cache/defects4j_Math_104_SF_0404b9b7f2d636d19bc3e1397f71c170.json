{
    "patch": "public static double regularizedGammaQ(double a, double x) throws MaxIterationsExceededException {\n    double integrationTolerance = 10e-15;\n    double maxIterations = 1000;\n    double epsilon = 10e-15;\n    double ret = Double.NaN;\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        ret = Double.NaN;\n    } else if (x == 0.0) {\n        ret = 1.0;\n    } else if (x < a + 1.0) {\n        // calculate con. frac. representation\n        double cf = ContinuedFractionUtils.evaluate(new RegularizedGammaQFraction(a, x), epsilon, maxIterations);\n        ret = Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a)) / cf;\n    } else /* x >= a + 1.0 */ {\n        // use normal distribution, see Abramowitz and Stegun, 26.2.23, page 932\n        ret = 1.0 - new NormalDistribution(mean(a, x), dev(a, x)).cumulativeProbability(x);\n    }\n    return ret;\n}\n\nprivate static double mean(double a, double x) {\n    return a > 1.0 ? x : a == 1.0 ? 1.0 : x / (1.0 - a);\n}\n\nprivate static double dev(double a, double x) {\n    double mean = mean(a, x);\n    return Math.sqrt(mean * (1.0 - mean) / a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8f812f8c2 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) throws MaxIterationsExceededException {\n+    double integrationTolerance = 10e-15;\n+    double maxIterations = 1000;\n+    double epsilon = 10e-15;\n+    double ret = Double.NaN;\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        ret = Double.NaN;\n+    } else if (x == 0.0) {\n+        ret = 1.0;\n+    } else if (x < a + 1.0) {\n+        // calculate con. frac. representation\n+        double cf = ContinuedFractionUtils.evaluate(new RegularizedGammaQFraction(a, x), epsilon, maxIterations);\n+        ret = Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a)) / cf;\n+    } else /* x >= a + 1.0 */ {\n+        // use normal distribution, see Abramowitz and Stegun, 26.2.23, page 932\n+        ret = 1.0 - new NormalDistribution(mean(a, x), dev(a, x)).cumulativeProbability(x);\n+    }\n+    return ret;\n+}\n+\n+private static double mean(double a, double x) {\n+    return a > 1.0 ? x : a == 1.0 ? 1.0 : x / (1.0 - a);\n+}\n+\n+private static double dev(double a, double x) {\n+    double mean = mean(a, x);\n+    return Math.sqrt(mean * (1.0 - mean) / a);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}