{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n    Map<String, Object> map = gson.fromJson(jsonStr, type);\n    \n    double count = 0;\n    double typedCount = 0;\n    \n    for (String key : map.keySet()) {\n        count++;\n        Object value = map.get(key);\n        if (value instanceof String) {\n            String stringValue = (String) value;\n            if (!stringValue.isEmpty()) {\n                typedCount++;\n            }\n        } else if (value instanceof Number) {\n            Number numberValue = (Number) value;\n            if (numberValue.doubleValue() != 0.0) {\n                typedCount++;\n            }\n        } else if (value instanceof Boolean) {\n            if ((Boolean) value) {\n                typedCount++;\n            }\n        } else if (value instanceof Map) { \n            typedCount += getTypedPercent(gson.toJson(value));\n        }\n    }\n    \n    if (count == 0) {\n        return 100;\n    } else {\n        return (typedCount / count) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7d99d703 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n+    Map<String, Object> map = gson.fromJson(jsonStr, type);\n+    \n+    double count = 0;\n+    double typedCount = 0;\n+    \n+    for (String key : map.keySet()) {\n+        count++;\n+        Object value = map.get(key);\n+        if (value instanceof String) {\n+            String stringValue = (String) value;\n+            if (!stringValue.isEmpty()) {\n+                typedCount++;\n+            }\n+        } else if (value instanceof Number) {\n+            Number numberValue = (Number) value;\n+            if (numberValue.doubleValue() != 0.0) {\n+                typedCount++;\n+            }\n+        } else if (value instanceof Boolean) {\n+            if ((Boolean) value) {\n+                typedCount++;\n+            }\n+        } else if (value instanceof Map) { \n+            typedCount += getTypedPercent(gson.toJson(value));\n+        }\n+    }\n+    \n+    if (count == 0) {\n+        return 100;\n+    } else {\n+        return (typedCount / count) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}