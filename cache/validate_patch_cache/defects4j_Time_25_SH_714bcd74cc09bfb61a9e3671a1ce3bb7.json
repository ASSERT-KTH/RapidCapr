{
    "patch": "                if (offsetLocal <= offsetAdjusted) {\n                    // add a millisecond and try again\n                    long nextLocal = nextTransition(instantAdjusted + 1);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + 1);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n                else {\n                    // we are in a \"fall-back\" transition\n                    // look for the smallest local time larger than instantAdjusted\n                    long nextLocal = nextTransition(instantAdjusted);\n                    if ((nextLocal - instantAdjusted) >= (offsetLocal - offsetAdjusted)) {\n                        return offsetLocal;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d0b4f675 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetLocal <= offsetAdjusted) {\n+                    // add a millisecond and try again\n+                    long nextLocal = nextTransition(instantAdjusted + 1);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + 1);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                else {\n+                    // we are in a \"fall-back\" transition\n+                    // look for the smallest local time larger than instantAdjusted\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    if ((nextLocal - instantAdjusted) >= (offsetLocal - offsetAdjusted)) {\n+                        return offsetLocal;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}