{
    "patch": "public static <T> ReturnValue<T> returnValue(T value) {\n    return new ReturnValue<>(value);\n}\n\npublic static class ReturnValue<T> {\n    private final T value;\n\n    public ReturnValue(T value) {\n        this.value = value;\n    }\n\n    public T getReturnValue() {\n        return value;\n    }\n    \n    public <R> R returnValueFor(Class<R> clazz) {\n        if (clazz.isInstance(value)) {\n            return clazz.cast(value);\n\t     // unneeded code here\n        }\n        return null;\n    }\n    \n    public <R> Iterable<R> iterableReturnValueFor(Class<R> clazz) {\n        if (value instanceof Iterable) {\n            return (Iterable<R>) value;\n        }\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}