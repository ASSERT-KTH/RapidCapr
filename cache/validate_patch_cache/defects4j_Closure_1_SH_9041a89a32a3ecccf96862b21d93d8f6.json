{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction(), function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node arg = argList.getFirstChild();\n      Node lastArgNode = null;\n      for (Var var : fnScope.getVarIterable()) {\n        if (var.getParentNode() == arg.getParentNode()) {\n          lastArgNode = arg;\n          arg = arg.getNext();\n        }\n      }\n      while (arg != null) {\n        Node nextArg = arg.getNext();\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          if (arg == lastArgNode) {\n            argList.removeChild(lastArgNode);\n            compiler.reportCodeChange();\n            break;\n          }\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        }\n        arg = nextArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..73a57053 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction(), function);\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node arg = argList.getFirstChild();\n+      Node lastArgNode = null;\n+      for (Var var : fnScope.getVarIterable()) {\n+        if (var.getParentNode() == arg.getParentNode()) {\n+          lastArgNode = arg;\n+          arg = arg.getNext();\n+        }\n+      }\n+      while (arg != null) {\n+        Node nextArg = arg.getNext();\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          if (arg == lastArgNode) {\n+            argList.removeChild(lastArgNode);\n+            compiler.reportCodeChange();\n+            break;\n+          }\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        }\n+        arg = nextArg;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}