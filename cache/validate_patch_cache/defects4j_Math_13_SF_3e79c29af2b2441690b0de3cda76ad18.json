{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n        \n        RealMatrix s = dec.getS();\n        for (int i = 0; i < s.getRowDimension(); i++) {\n            s.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n        }\n        \n        RealMatrix v = dec.getV();\n        return v.multiply(s).multiply(v.transpose());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cac07c921 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+        \n+        RealMatrix s = dec.getS();\n+        for (int i = 0; i < s.getRowDimension(); i++) {\n+            s.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n+        }\n+        \n+        RealMatrix v = dec.getV();\n+        return v.multiply(s).multiply(v.transpose());\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}