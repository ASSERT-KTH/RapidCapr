{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition dec = new LUDecomposition(m);\n    final RealMatrix l = dec.getL();\n    final RealMatrix u = dec.getU();\n\n    // Calculate the square root of U matrix\n    final int n = u.getRowDimension();\n    final RealMatrix sqrtU = u.scalarMultiply(0.5);\n    for (int i = 0; i < n; i++) {\n        sqrtU.setEntry(i, i, FastMath.sqrt(sqrtU.getEntry(i, i)));\n        for (int j = i + 1; j < n; j++) {\n            sqrtU.setEntry(i, j, 0.0);\n        }\n    }\n\n    // Compute the square root of the matrix as L * sqrt(U)\n    return l.multiply(sqrtU);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6dc0c1917 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition dec = new LUDecomposition(m);\n+    final RealMatrix l = dec.getL();\n+    final RealMatrix u = dec.getU();\n+\n+    // Calculate the square root of U matrix\n+    final int n = u.getRowDimension();\n+    final RealMatrix sqrtU = u.scalarMultiply(0.5);\n+    for (int i = 0; i < n; i++) {\n+        sqrtU.setEntry(i, i, FastMath.sqrt(sqrtU.getEntry(i, i)));\n+        for (int j = i + 1; j < n; j++) {\n+            sqrtU.setEntry(i, j, 0.0);\n+        }\n     }\n+\n+    // Compute the square root of the matrix as L * sqrt(U)\n+    return l.multiply(sqrtU);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}