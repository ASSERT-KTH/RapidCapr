{
    "patch": "        // Maybe STRING, GET, SET\n        if (!(child.isStringKey() || child.isGetterDef() || child.isSetterDef())) {\n          throw new RuntimeException(\"Unexpected type of child node: \" + child);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..926efd8d 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,10 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        // Maybe STRING, GET, SET\n+        if (!(child.isStringKey() || child.isGetterDef() || child.isSetterDef())) {\n+          throw new RuntimeException(\"Unexpected type of child node: \" + child);\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>",
    "test_result": "FAIL"
}