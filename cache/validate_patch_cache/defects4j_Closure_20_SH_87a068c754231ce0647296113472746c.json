{
    "patch": "    Preconditions.checkState(callTarget.hasChildren());\n    Node arg = callTarget.getNext();\n    if (arg != null && NodeUtil.isImmutableValue(arg)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            arg.detachFromParent()).srcref(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..241673bc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,12 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+    Preconditions.checkState(callTarget.hasChildren());\n+    Node arg = callTarget.getNext();\n+    if (arg != null && NodeUtil.isImmutableValue(arg)) {\n+        Node addition = IR.add(\n+            IR.string(\"\").srcref(callTarget),\n+            arg.detachFromParent()).srcref(n);\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: variable addition is already defined in method tryFoldSimpleFunctionCall(Node)",
    "test_result": "ERROR"
}