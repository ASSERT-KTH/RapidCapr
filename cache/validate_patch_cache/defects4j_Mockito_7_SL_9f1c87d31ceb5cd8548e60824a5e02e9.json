{
    "patch": "Type genericDeclaration = typeVariable.getGenericDeclaration();\nif (genericDeclaration instanceof Class) {\n    Type[] interfaces = ((Class) genericDeclaration).getGenericInterfaces();\n    for (Type interfaze : interfaces) {\n        if (interfaze instanceof ParameterizedType) {\n            Type rawType = ((ParameterizedType) interfaze).getRawType();\n            if (genericDeclaration.equals(rawType)) {\n                for (Type argument : ((ParameterizedType) interfaze).getActualTypeArguments()) {\n                    if (argument instanceof TypeVariable<?>) {\n                        registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) argument));\n                    } else {\n                        registerTypeVariablesOn(argument);\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..481980c28 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,29 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type genericDeclaration = typeVariable.getGenericDeclaration();\n+if (genericDeclaration instanceof Class) {\n+    Type[] interfaces = ((Class) genericDeclaration).getGenericInterfaces();\n+    for (Type interfaze : interfaces) {\n+        if (interfaze instanceof ParameterizedType) {\n+            Type rawType = ((ParameterizedType) interfaze).getRawType();\n+            if (genericDeclaration.equals(rawType)) {\n+                for (Type argument : ((ParameterizedType) interfaze).getActualTypeArguments()) {\n+                    if (argument instanceof TypeVariable<?>) {\n+                        registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) argument));\n+                    } else {\n+                        registerTypeVariablesOn(argument);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}