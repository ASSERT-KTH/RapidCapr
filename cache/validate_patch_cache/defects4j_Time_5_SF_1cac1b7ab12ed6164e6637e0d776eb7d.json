{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    // Extract the period fields into individual variables.\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Normalize the fields using the period type.\n    boolean normalized = false;\n    while (!normalized) {\n        // Normalize years.\n        int yearMonths = years * 12 + months;\n        if (type.isSupported(DurationFieldType.years()) && yearMonths != 0) {\n            years = yearMonths / 12;\n            months = yearMonths % 12;\n        }\n\n        // Normalize weeks and days.\n        if (type.isSupported(DurationFieldType.weeks())) {\n            days += weeks * 7;\n            weeks = 0;\n        }\n        if (type.isSupported(DurationFieldType.days()) && days != 0) {\n            int factor = (days > 0 ? 1 : -1);\n            days += (factor * (Math.abs(days) / 7) * 7);\n            weeks += (factor * (Math.abs(days) / 7));\n            days %= 7;\n        }\n\n        // Normalize hours, minutes, seconds, and milliseconds.\n        int daySeconds = (days * 24 * 3600) + (hours * 3600) + (minutes * 60) + seconds;\n        if (type.isSupported(DurationFieldType.hours())) {\n            hours += daySeconds / 3600;\n            daySeconds %= 3600;\n        }\n        if (type.isSupported(DurationFieldType.minutes())) {\n            minutes += daySeconds / 60;\n            daySeconds %= 60;\n        }\n        if (type.isSupported(DurationFieldType.seconds())) {\n            seconds += daySeconds;\n        }\n        if (type.isSupported(DurationFieldType.millis())) {\n            millis += (daySeconds * 1000) + getMillisOfSecond();\n        }\n\n        // Check if the fields are now normalized.\n        normalized = (!type.isSupported(DurationFieldType.years()) || (years * 12 + months) == 0)\n                && (!type.isSupported(DurationFieldType.weeks()) || weeks == 0)\n                && (!type.isSupported(DurationFieldType.days()) || days >= 0)\n                && (!type.isSupported(DurationFieldType.hours()) || hours >= 0)\n                && (!type.isSupported(DurationFieldType.minutes()) || minutes >= 0)\n                && (!type.isSupported(DurationFieldType.seconds()) || seconds >= 0)\n                && (!type.isSupported(DurationFieldType.millis()) || millis >= 0);\n    }\n\n    // Construct a new normalized period with the normalized fields.\n    Period normalized = new Period(0, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(weeks)\n            .withDays(days)\n            .withHours(hours)\n            .withMinutes(minutes)\n            .withSeconds(seconds)\n            .withMillis(millis);\n\n    return normalized;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f28bb58e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,78 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    // Extract the period fields into individual variables.\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // Normalize the fields using the period type.\n+    boolean normalized = false;\n+    while (!normalized) {\n+        // Normalize years.\n+        int yearMonths = years * 12 + months;\n+        if (type.isSupported(DurationFieldType.years()) && yearMonths != 0) {\n+            years = yearMonths / 12;\n+            months = yearMonths % 12;\n         }\n-        return result;\n-    }\n+\n+        // Normalize weeks and days.\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            days += weeks * 7;\n+            weeks = 0;\n+        }\n+        if (type.isSupported(DurationFieldType.days()) && days != 0) {\n+            int factor = (days > 0 ? 1 : -1);\n+            days += (factor * (Math.abs(days) / 7) * 7);\n+            weeks += (factor * (Math.abs(days) / 7));\n+            days %= 7;\n+        }\n+\n+        // Normalize hours, minutes, seconds, and milliseconds.\n+        int daySeconds = (days * 24 * 3600) + (hours * 3600) + (minutes * 60) + seconds;\n+        if (type.isSupported(DurationFieldType.hours())) {\n+            hours += daySeconds / 3600;\n+            daySeconds %= 3600;\n+        }\n+        if (type.isSupported(DurationFieldType.minutes())) {\n+            minutes += daySeconds / 60;\n+            daySeconds %= 60;\n+        }\n+        if (type.isSupported(DurationFieldType.seconds())) {\n+            seconds += daySeconds;\n+        }\n+        if (type.isSupported(DurationFieldType.millis())) {\n+            millis += (daySeconds * 1000) + getMillisOfSecond();\n+        }\n+\n+        // Check if the fields are now normalized.\n+        normalized = (!type.isSupported(DurationFieldType.years()) || (years * 12 + months) == 0)\n+                && (!type.isSupported(DurationFieldType.weeks()) || weeks == 0)\n+                && (!type.isSupported(DurationFieldType.days()) || days >= 0)\n+                && (!type.isSupported(DurationFieldType.hours()) || hours >= 0)\n+                && (!type.isSupported(DurationFieldType.minutes()) || minutes >= 0)\n+                && (!type.isSupported(DurationFieldType.seconds()) || seconds >= 0)\n+                && (!type.isSupported(DurationFieldType.millis()) || millis >= 0);\n+    }\n+\n+    // Construct a new normalized period with the normalized fields.\n+    Period normalized = new Period(0, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(weeks)\n+            .withDays(days)\n+            .withHours(hours)\n+            .withMinutes(minutes)\n+            .withSeconds(seconds)\n+            .withMillis(millis);\n+\n+    return normalized;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}