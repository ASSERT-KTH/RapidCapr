{
    "patch": "      if (n.isFunction()) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.LP:\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e6f4362f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,13 +1448,17 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+      if (n.isFunction()) {\n+        defineDeclaredFunction(n, parent);\n+        return;\n+      }\n+\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+        case Token.LP:\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}