{
    "patch": "import jdk.nashorn.api.scripting.*;\n\npublic class Main {\n    public static void main(String[] args) {        \n\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"nashorn\");\n\n        try {\n            Context context = engine.getContext();\n            Context rhsContext = Context.newInstance(Context.class.getName());\n            context.setBindings(rhsContext.getBindings(ScriptContext.ENGINE_SCOPE),\n                    ScriptContext.ENGINE_SCOPE);\n            engine.eval(\"var d = [1, 2, 3];\\n\"\n                    + \"    var c = true;\\n\"\n                    + \"    for(var a in (c ? 0 : (0 in d))) {\\n\"\n                    + \"        print(a);\\n\"\n                    + \"    }\\n\"                    \n                    + \"function foo(){\\n\"\n                    + \" return \\\"foo\\\";\\n\"\n                    + \"}\"\n            );\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}