{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n    }\n    else if (org.mockito.internal.util.MockUtil.isSpy(mock)) {\n        Field initializedSpyField = MockitoSpyHelper.getInitializedSpyField(mock.getClass());\n        boolean wasAccessible = ReflectionUtils.makeAccessible(initializedSpyField);\n        try {\n            SpyInitializationReport initializationReport = (SpyInitializationReport) initializedSpyField.get(mock);\n            if (initializationReport.getWrappedDelegate() instanceof Factory) {\n                ((Factory) initializationReport.getWrappedDelegate()).setCallbacks(new Callback[] {newFilter});\n            }\n        } catch (IllegalAccessException e) {\n            throw new MockitoException(\"Problems initiating spied field \" + initializedSpyField.getName(), e);\n        } finally {\n            ReflectionUtils.setAccessible(initializedSpyField, wasAccessible);\n        }\n    }\n    else {\n        // simply replace the invocation handler\n        setMockHandler(mock, newMockHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..4278677f6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,35 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n+    }\n+    else if (org.mockito.internal.util.MockUtil.isSpy(mock)) {\n+        Field initializedSpyField = MockitoSpyHelper.getInitializedSpyField(mock.getClass());\n+        boolean wasAccessible = ReflectionUtils.makeAccessible(initializedSpyField);\n+        try {\n+            SpyInitializationReport initializationReport = (SpyInitializationReport) initializedSpyField.get(mock);\n+            if (initializationReport.getWrappedDelegate() instanceof Factory) {\n+                ((Factory) initializationReport.getWrappedDelegate()).setCallbacks(new Callback[] {newFilter});\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new MockitoException(\"Problems initiating spied field \" + initializedSpyField.getName(), e);\n+        } finally {\n+            ReflectionUtils.setAccessible(initializedSpyField, wasAccessible);\n+        }\n+    }\n+    else {\n+        // simply replace the invocation handler\n+        setMockHandler(mock, newMockHandler);\n+    }\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}