{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;\nimport org.apache.commons.math3.stat.inference.MannWhitneyUTest;\nimport org.apache.commons.math3.stat.inference.TTest;\nimport org.apache.commons.math3.stat.descriptive.rank.Percentile;\nimport org.apache.commons.math3.stat.descriptive.SummaryStatistics;\nimport org.apache.commons.math3.stat.descriptive.rank.Median;\nimport org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n\nimport java.util.Arrays;\n\npublic class StatisticsCalculator {\n    private static final int DEFAULT_PERCENTILE_SCALE = 100;\n    private static final double DEFAULT_CONFIDENCE_LEVEL = 0.95;\n\n    /**\n     * Private constructor to prevent instantiation of utility class.\n     */\n    private StatisticsCalculator() {}\n\n    /**\n     * Computes the Mann-Whitney U statistic between the two sets of observations.\n     *\n     * @param x the first set of observations\n     * @param y the second set of observations\n     * @return the Mann-Whitney U statistic\n     */\n    public static double mannWhitneyUTest(double[] x, double[] y) {\n        MannWhitneyUTest mannWhitneyUTest = new MannWhitneyUTest();\n        return mannWhitneyUTest.mannWhitneyU(x, y);\n    }\n\n    /**\n     * Computes the one-sample t-test to test if the mean of the sample is likely to come from a hypothesized population\n     * with the given mean.\n     *\n     * @param sample the sample\n     * @param populationMean the hypothesized population mean\n     * @return the t-statistic\n     */\n    public static double oneSampleTTest(double[] sample, double populationMean) {\n        TTest tTest = new TTest();\n        return tTest.t(sample, populationMean);\n    }\n\n    /**\n     * Computes the two-sample t-test to test if the means of the two samples are equal.\n     *\n     * @param x the first sample\n     * @param y the second sample\n     * @return the t-statistic\n     */\n    public static double twoSampleTTest(double[] x, double[] y) {\n        TTest tTest = new TTest();\n        return tTest.t(x, y);\n    }\n\n    /**\n     * Computes the Kolmogorov-Smirnov test statistic to test if the two sets of observations follow the same distribution.\n     *\n     * @param x the first set of observations\n     * @param y the second set of observations\n     * @return the test statistic\n     */\n    public static double kolmogorovSmirnovTest(double[] x, double[] y) {\n        KolmogorovSmirnovTest kolmogorovSmirnovTest = new KolmogorovSmirnovTest();\n        return kolmogorovSmirnovTest.kolmogorovSmirnovStatistic(x, y);\n    }\n\n    /**\n     * Computes the median of the input array.\n     *\n     * @param values the input array\n     * @return the median\n     */\n    public static double median(double[] values) {\n        Median median = new Median();\n        return median.evaluate(values);\n    }\n\n    /**\n     * Computes the percentile of the input array at the given percentile value (between 0 and 100).\n     *\n     * @param values the input array\n     * @param percentile the percentile value\n     * @return the percentile\n     */\n    public static double percentile(double[] values, double percentile) {\n        Percentile percentileEvaluator = new Percentile(percentile);\n        return percentileEvaluator.evaluate(values);\n    }\n\n    /**\n     * Computes the mean of the input array.\n     *\n     * @param values the input array\n     * @return the mean\n     */\n    public static double mean(double[] values) {\n        SummaryStatistics statistics = new SummaryStatistics();\n        for (double value : values) {\n            statistics.addValue(value);\n        }\n        return statistics.getMean();\n    }\n\n    /**\n     * Computes the standard deviation of the input array.\n     *\n     * @param values the input array\n     * @return the standard deviation\n     */\n    public static double standardDeviation(double[] values) {\n        SummaryStatistics statistics = new SummaryStatistics();\n        for (double value : values) {\n            statistics.addValue(value);\n        }\n        return statistics.getStandardDeviation();\n    }\n\n    /**\n     * Computes the standard error of the mean of the input array.\n     *\n     * @param values the input array\n     * @return the standard error of the mean\n     */\n    public static double standardError(double[] values) {\n        SummaryStatistics statistics = new SummaryStatistics();\n        for (double value : values) {\n            statistics.addValue(value);\n        }\n        double sd = statistics.getStandardDeviation();\n        return sd / Math.sqrt(values.length);\n    }\n\n    /**\n     * Computes the p-value of the test statistic from the one-sample t-test.\n     *\n     * @param sample the sample\n     * @param populationMean the hypothesized population mean\n     * @param alpha the significance level (e.g., 0.05 for a 95% confidence level)\n     * @param twoSided whether to use a two-tailed test or one-tailed test\n     * @return the p-value\n     */\n    public static double oneSampleTTestPValue(double[] sample, double populationMean, double alpha, boolean twoSided) {\n        TTest tTest = new TTest();\n        double t = tTest.t(sample, populationMean);\n        int degreesOfFreedom = sample.length - 1;\n        double pValue;\n        if (twoSided) {\n            pValue = 2.0 * tTest.tTest(populationMean, sample, alpha);\n        } else {\n            pValue = tTest.tTest(populationMean, sample);\n            if (t < 0) {\n                pValue /= 2.0;\n            }\n        }\n        return pValue;\n    }\n\n    /**\n     * Computes the p-value of the test statistic from the two-sample t-test.\n     *\n     * @param x the first sample\n     * @param y the second sample\n     * @param alpha the significance level (e.g., 0.05 for a 95% confidence level)\n     * @param twoSided whether to use a two-tailed test or one-tailed test\n     * @return the p-value\n     */\n    public static double twoSampleTTestPValue(double[] x, double[] y, double alpha, boolean twoSided) {\n        TTest tTest = new TTest();\n        double t = tTest.t(x, y);\n        int degreesOfFreedom = x.length + y.length - 2;\n        double pValue;\n        if (twoSided) {\n            pValue = 2.0 * tTest.tTest(x, y, alpha);\n        } else {\n            pValue = tTest.tTest(x, y);\n            if (t < 0) {\n                pValue /= 2.0;\n            }\n        }\n        return pValue;\n    }\n\n    /**\n     * Computes the p-value of the test statistic from the Mann-Whitney U test.\n     *\n     * @param x the first sample\n     * @param y the second sample\n     * @param alpha the significance level (e.g., 0.05 for a 95% confidence level)\n     * @param twoSided whether to use a two-tailed test or one-tailed test\n     * @return the p-value\n     */\n    public static double mannWhitneyUTestPValue(double[] x, double[] y, double alpha, boolean twoSided) {\n        MannWhitneyUTest mannWhitneyUTest = new MannWhitneyUTest();\n        double U = mannWhitneyUTest.mannWhitneyU(x, y);\n        int m = x.length;\n        int n = y.length;\n        double pValue;\n        if (twoSided) {\n            pValue = 2.0 * mannWhitneyUTest.mannWhitneyUTest(m, n, U, MannWhitneyUTest.TestType.TWO_SIDED);\n        } else {\n            pValue = mannWhitneyUTest.mannWhitneyUTest(m, n, U, MannWhitneyUTest.TestType.LESS_THAN);\n        }\n        return pValue;\n    }\n\n    /**\n     * Computes the confidence interval for the mean of the input array.\n     *\n     * @param values the input array\n     * @param confidenceLevel the confidence level (e.g., 0.95 for a 95% confidence interval)\n     * @return the confidence interval\n     */\n    public static double[] confidenceInterval(double[] values, double confidenceLevel) {\n        double alpha = 1.0 - confidenceLevel;\n        double mean = mean(values);\n        double standardError = standardError(values);\n        double criticalValue = Math.abs(Gamma.regularizedGammaQ(0.5 * alpha, 0.5));\n        double delta = criticalValue * standardError;\n        return new double[] { mean - delta, mean + delta };\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6a953ea33 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,232 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;\n+import org.apache.commons.math3.stat.inference.MannWhitneyUTest;\n+import org.apache.commons.math3.stat.inference.TTest;\n+import org.apache.commons.math3.stat.descriptive.rank.Percentile;\n+import org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n+import org.apache.commons.math3.stat.descriptive.rank.Median;\n+import org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n+\n+import java.util.Arrays;\n+\n+public class StatisticsCalculator {\n+    private static final int DEFAULT_PERCENTILE_SCALE = 100;\n+    private static final double DEFAULT_CONFIDENCE_LEVEL = 0.95;\n+\n+    /**\n+     * Private constructor to prevent instantiation of utility class.\n+     */\n+    private StatisticsCalculator() {}\n+\n+    /**\n+     * Computes the Mann-Whitney U statistic between the two sets of observations.\n+     *\n+     * @param x the first set of observations\n+     * @param y the second set of observations\n+     * @return the Mann-Whitney U statistic\n+     */\n+    public static double mannWhitneyUTest(double[] x, double[] y) {\n+        MannWhitneyUTest mannWhitneyUTest = new MannWhitneyUTest();\n+        return mannWhitneyUTest.mannWhitneyU(x, y);\n+    }\n+\n+    /**\n+     * Computes the one-sample t-test to test if the mean of the sample is likely to come from a hypothesized population\n+     * with the given mean.\n+     *\n+     * @param sample the sample\n+     * @param populationMean the hypothesized population mean\n+     * @return the t-statistic\n+     */\n+    public static double oneSampleTTest(double[] sample, double populationMean) {\n+        TTest tTest = new TTest();\n+        return tTest.t(sample, populationMean);\n+    }\n+\n+    /**\n+     * Computes the two-sample t-test to test if the means of the two samples are equal.\n+     *\n+     * @param x the first sample\n+     * @param y the second sample\n+     * @return the t-statistic\n+     */\n+    public static double twoSampleTTest(double[] x, double[] y) {\n+        TTest tTest = new TTest();\n+        return tTest.t(x, y);\n+    }\n+\n+    /**\n+     * Computes the Kolmogorov-Smirnov test statistic to test if the two sets of observations follow the same distribution.\n+     *\n+     * @param x the first set of observations\n+     * @param y the second set of observations\n+     * @return the test statistic\n+     */\n+    public static double kolmogorovSmirnovTest(double[] x, double[] y) {\n+        KolmogorovSmirnovTest kolmogorovSmirnovTest = new KolmogorovSmirnovTest();\n+        return kolmogorovSmirnovTest.kolmogorovSmirnovStatistic(x, y);\n+    }\n+\n+    /**\n+     * Computes the median of the input array.\n+     *\n+     * @param values the input array\n+     * @return the median\n+     */\n+    public static double median(double[] values) {\n+        Median median = new Median();\n+        return median.evaluate(values);\n+    }\n+\n+    /**\n+     * Computes the percentile of the input array at the given percentile value (between 0 and 100).\n+     *\n+     * @param values the input array\n+     * @param percentile the percentile value\n+     * @return the percentile\n+     */\n+    public static double percentile(double[] values, double percentile) {\n+        Percentile percentileEvaluator = new Percentile(percentile);\n+        return percentileEvaluator.evaluate(values);\n+    }\n+\n+    /**\n+     * Computes the mean of the input array.\n+     *\n+     * @param values the input array\n+     * @return the mean\n+     */\n+    public static double mean(double[] values) {\n+        SummaryStatistics statistics = new SummaryStatistics();\n+        for (double value : values) {\n+            statistics.addValue(value);\n+        }\n+        return statistics.getMean();\n+    }\n+\n+    /**\n+     * Computes the standard deviation of the input array.\n+     *\n+     * @param values the input array\n+     * @return the standard deviation\n+     */\n+    public static double standardDeviation(double[] values) {\n+        SummaryStatistics statistics = new SummaryStatistics();\n+        for (double value : values) {\n+            statistics.addValue(value);\n+        }\n+        return statistics.getStandardDeviation();\n+    }\n+\n+    /**\n+     * Computes the standard error of the mean of the input array.\n+     *\n+     * @param values the input array\n+     * @return the standard error of the mean\n+     */\n+    public static double standardError(double[] values) {\n+        SummaryStatistics statistics = new SummaryStatistics();\n+        for (double value : values) {\n+            statistics.addValue(value);\n+        }\n+        double sd = statistics.getStandardDeviation();\n+        return sd / Math.sqrt(values.length);\n+    }\n+\n+    /**\n+     * Computes the p-value of the test statistic from the one-sample t-test.\n+     *\n+     * @param sample the sample\n+     * @param populationMean the hypothesized population mean\n+     * @param alpha the significance level (e.g., 0.05 for a 95% confidence level)\n+     * @param twoSided whether to use a two-tailed test or one-tailed test\n+     * @return the p-value\n+     */\n+    public static double oneSampleTTestPValue(double[] sample, double populationMean, double alpha, boolean twoSided) {\n+        TTest tTest = new TTest();\n+        double t = tTest.t(sample, populationMean);\n+        int degreesOfFreedom = sample.length - 1;\n+        double pValue;\n+        if (twoSided) {\n+            pValue = 2.0 * tTest.tTest(populationMean, sample, alpha);\n+        } else {\n+            pValue = tTest.tTest(populationMean, sample);\n+            if (t < 0) {\n+                pValue /= 2.0;\n+            }\n+        }\n+        return pValue;\n+    }\n+\n+    /**\n+     * Computes the p-value of the test statistic from the two-sample t-test.\n+     *\n+     * @param x the first sample\n+     * @param y the second sample\n+     * @param alpha the significance level (e.g., 0.05 for a 95% confidence level)\n+     * @param twoSided whether to use a two-tailed test or one-tailed test\n+     * @return the p-value\n+     */\n+    public static double twoSampleTTestPValue(double[] x, double[] y, double alpha, boolean twoSided) {\n+        TTest tTest = new TTest();\n+        double t = tTest.t(x, y);\n+        int degreesOfFreedom = x.length + y.length - 2;\n+        double pValue;\n+        if (twoSided) {\n+            pValue = 2.0 * tTest.tTest(x, y, alpha);\n+        } else {\n+            pValue = tTest.tTest(x, y);\n+            if (t < 0) {\n+                pValue /= 2.0;\n+            }\n+        }\n+        return pValue;\n+    }\n+\n+    /**\n+     * Computes the p-value of the test statistic from the Mann-Whitney U test.\n+     *\n+     * @param x the first sample\n+     * @param y the second sample\n+     * @param alpha the significance level (e.g., 0.05 for a 95% confidence level)\n+     * @param twoSided whether to use a two-tailed test or one-tailed test\n+     * @return the p-value\n+     */\n+    public static double mannWhitneyUTestPValue(double[] x, double[] y, double alpha, boolean twoSided) {\n+        MannWhitneyUTest mannWhitneyUTest = new MannWhitneyUTest();\n+        double U = mannWhitneyUTest.mannWhitneyU(x, y);\n+        int m = x.length;\n+        int n = y.length;\n+        double pValue;\n+        if (twoSided) {\n+            pValue = 2.0 * mannWhitneyUTest.mannWhitneyUTest(m, n, U, MannWhitneyUTest.TestType.TWO_SIDED);\n+        } else {\n+            pValue = mannWhitneyUTest.mannWhitneyUTest(m, n, U, MannWhitneyUTest.TestType.LESS_THAN);\n+        }\n+        return pValue;\n+    }\n+\n+    /**\n+     * Computes the confidence interval for the mean of the input array.\n+     *\n+     * @param values the input array\n+     * @param confidenceLevel the confidence level (e.g., 0.95 for a 95% confidence interval)\n+     * @return the confidence interval\n+     */\n+    public static double[] confidenceInterval(double[] values, double confidenceLevel) {\n+        double alpha = 1.0 - confidenceLevel;\n+        double mean = mean(values);\n+        double standardError = standardError(values);\n+        double criticalValue = Math.abs(Gamma.regularizedGammaQ(0.5 * alpha, 0.5));\n+        double delta = criticalValue * standardError;\n+        return new double[] { mean - delta, mean + delta };\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}