{
    "patch": "    if (parent != null) {\n      int pType = parent.getType();\n      if (pType == Token.CALL &&\n          NodeUtil.isGet(parent.getFirstChild()) &&\n          parent.getFirstFirstChild().matchesQualifiedName(\"Object.freeze\") &&\n          parent.getFirstChild().getFirstChild().isQualifiedName() &&\n          parent.getFirstChild().getFirstChild().getQualifiedName().startsWith(\"goog.\")) {\n        return false;\n      }\n\n      if (pType == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (n == lhs) {\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else if (NodeUtil.isGet(lhs)) {\n          if (NodeUtil.isPrototypeProperty(lhs)) {\n            return false;\n          }\n          if (lhs.getType() == Token.GETPROP && (\n              lhs.getLastChild().getString().equals(\"prototype\") ||\n              lhs.getLastChild().getString().equals(\"constructor\"))) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP && (\n              llhs.getLastChild().getString().equals(\"prototype\") ||\n              llhs.getLastChild().getString().equals(\"constructor\"))) {\n            return false;\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9a4b83ed 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,40 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (parent != null) {\n+      int pType = parent.getType();\n+      if (pType == Token.CALL &&\n+          NodeUtil.isGet(parent.getFirstChild()) &&\n+          parent.getFirstFirstChild().matchesQualifiedName(\"Object.freeze\") &&\n+          parent.getFirstChild().getFirstChild().isQualifiedName() &&\n+          parent.getFirstChild().getFirstChild().getQualifiedName().startsWith(\"goog.\")) {\n+        return false;\n+      }\n+\n+      if (pType == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (n == lhs) {\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else if (NodeUtil.isGet(lhs)) {\n+          if (NodeUtil.isPrototypeProperty(lhs)) {\n+            return false;\n+          }\n+          if (lhs.getType() == Token.GETPROP && (\n+              lhs.getLastChild().getString().equals(\"prototype\") ||\n+              lhs.getLastChild().getString().equals(\"constructor\"))) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP && (\n+              llhs.getLastChild().getString().equals(\"prototype\") ||\n+              llhs.getLastChild().getString().equals(\"constructor\"))) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable pType is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}