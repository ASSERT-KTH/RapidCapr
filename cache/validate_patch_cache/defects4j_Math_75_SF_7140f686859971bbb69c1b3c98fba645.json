{
    "patch": "public double getPct(Object v) {\n    if (v instanceof Comparable) {\n        Comparable c = (Comparable) v;\n        List<Object> values = new ArrayList<>();\n        values.add(1);\n        values.add(2);\n        values.add(3);\n        Collections.sort(values);\n        int index = values.indexOf(c);\n        double size = values.size();\n        double rank = index + 1;\n        return rank / size;\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..901c3cb7e 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,22 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v instanceof Comparable) {\n+        Comparable c = (Comparable) v;\n+        List<Object> values = new ArrayList<>();\n+        values.add(1);\n+        values.add(2);\n+        values.add(3);\n+        Collections.sort(values);\n+        int index = values.indexOf(c);\n+        double size = values.size();\n+        double rank = index + 1;\n+        return rank / size;\n+    } else {\n+        return 0.0;\n     }\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}