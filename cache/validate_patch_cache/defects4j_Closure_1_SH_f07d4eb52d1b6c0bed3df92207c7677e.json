{
    "patch": "List<String> argNamesToRemove = new ArrayList<>();\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          argNamesToRemove.add(argName);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      \n      // Remove corresponding arguments in function call sites\n      NodeTraversal.traverse(compiler, function, new NodeTraversal.AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isCall() && n.getFirstChild().getString().equals(function.getSecondChild().getString())) {\n            Node argNode = n.getLastChild();\n            while (argNode != null) {\n              if (argNamesToRemove.contains(argNode.getString())) {\n                Node nextArg = argNode.getPrevious();\n                n.removeChild(argNode);\n                compiler.reportCodeChange();\n                argNode = nextArg;\n              } else {\n                argNode = argNode.getPrevious();\n              }\n            }\n          }\n        }\n      });\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a7959956 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,54 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+List<String> argNamesToRemove = new ArrayList<>();\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          argNamesToRemove.add(argName);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      \n+      // Remove corresponding arguments in function call sites\n+      NodeTraversal.traverse(compiler, function, new NodeTraversal.AbstractPostOrderCallback() {\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          if (n.isCall() && n.getFirstChild().getString().equals(function.getSecondChild().getString())) {\n+            Node argNode = n.getLastChild();\n+            while (argNode != null) {\n+              if (argNamesToRemove.contains(argNode.getString())) {\n+                Node nextArg = argNode.getPrevious();\n+                n.removeChild(argNode);\n+                compiler.reportCodeChange();\n+                argNode = nextArg;\n+              } else {\n+                argNode = argNode.getPrevious();\n+              }\n+            }\n+          }\n+        }\n+      });\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}