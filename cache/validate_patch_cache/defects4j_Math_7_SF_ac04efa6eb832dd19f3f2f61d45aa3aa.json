{
    "patch": "public int compare(EventState es0, EventState es1) {\n    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n}\n\nfor (final EventState state : eventsStates) {\n    if (state.evaluateStep(interpolator)) {\n        // the event occurs during the current step\n        occuringEvents.add(state);\n    }\n}\n\nwhile (!occuringEvents.isEmpty()) {\n\n\t// handle the chronologically first event\n\tfinal Iterator<EventState> iterator = occuringEvents.iterator();\n\tfinal EventState currentEvent = iterator.next();\n\titerator.remove();\n\t\n\t// restrict the interpolator to the first part of the step, up to the event\n\tfinal double eventT = currentEvent.getEventTime();\n\tinterpolator.setSoftPreviousTime(previousT);\n\tinterpolator.setSoftCurrentTime(eventT);\n\n\t// get state at event time\n\tinterpolator.setInterpolatedTime(eventT);\n\tfinal double[] eventY = interpolator.getInterpolatedState().clone();\n\n\t// advance all event states to current time\n\tcurrentEvent.stepAccepted(eventT, eventY);\n\tisLastStep = currentEvent.stop();\n\n\t// handle the first part of the step, up to the event\n\tfor (final StepHandler handler : stepHandlers) {\n\t\thandler.handleStep(interpolator, isLastStep);\n\t}\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..5ab0c402a 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,42 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+public int compare(EventState es0, EventState es1) {\n+    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+}\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+for (final EventState state : eventsStates) {\n+    if (state.evaluateStep(interpolator)) {\n+        // the event occurs during the current step\n+        occuringEvents.add(state);\n+    }\n+}\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+while (!occuringEvents.isEmpty()) {\n+\n+\t// handle the chronologically first event\n+\tfinal Iterator<EventState> iterator = occuringEvents.iterator();\n+\tfinal EventState currentEvent = iterator.next();\n+\titerator.remove();\n+\t\n+\t// restrict the interpolator to the first part of the step, up to the event\n+\tfinal double eventT = currentEvent.getEventTime();\n+\tinterpolator.setSoftPreviousTime(previousT);\n+\tinterpolator.setSoftCurrentTime(eventT);\n+\n+\t// get state at event time\n+\tinterpolator.setInterpolatedTime(eventT);\n+\tfinal double[] eventY = interpolator.getInterpolatedState().clone();\n+\n+\t// advance all event states to current time\n+\tcurrentEvent.stepAccepted(eventT, eventY);\n+\tisLastStep = currentEvent.stop();\n+\n+\t// handle the first part of the step, up to the event\n+\tfor (final StepHandler handler : stepHandlers) {\n+\t\thandler.handleStep(interpolator, isLastStep);\n+\t}\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}