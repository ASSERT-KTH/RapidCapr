{
    "patch": "        boolean inCondition = false;\n        if (conditionStack.peek() instanceof InfixExpression) {\n            InfixExpression infix = (InfixExpression) conditionStack.peek();\n            if (infix.getOperator() == InfixExpression.Operator.EQUALS) {\n                Expression left = infix.getLeftOperand();\n                Expression right = infix.getRightOperand();\n                if (right instanceof ArrayAccess && ((ArrayAccess) right).getArray() instanceof SimpleName && left instanceof NumberLiteral) {\n                    SimpleName name = (SimpleName) ((ArrayAccess) right).getArray();\n                    String variableName = name.getIdentifier();\n                    ArrayAccess arrayAccess = (ArrayAccess) right;\n                    Expression index = arrayAccess.getIndex();\n                    if (index instanceof NumberLiteral && ((NumberLiteral) left).getToken().equals(\"0\") && ((NumberLiteral) index).getToken().equals(\"0\")) {\n                        inCondition = true;\n                    }\n                }\n            }\n        }\n\n        Context rhsContext = inCondition ? Context.THIS : Context.OTHER;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}