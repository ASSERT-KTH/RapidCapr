{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int numRows = m.getRowDimension();\n    final int numCols = m.getColumnDimension();\n    final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n    final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n    final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n    final double normM = m.getFrobeniusNorm();\n    double normX;\n    double eps;\n    do {\n        xOld.setSubMatrix(x.getData(), 0, 0);\n        x.setSubMatrix(xOld.scalarMultiply(0.5).add(multiplyInverse(xOld)).getData(), 0, 0);\n        normX = x.getFrobeniusNorm();\n        eps = Math.abs(normX - normM) / normM;\n    } while (eps > 1e-9);\n    return x;\n}\n\nprivate RealMatrix multiplyInverse(RealMatrix m) {\n    final LUDecomposition lu = new LUDecomposition(m);\n    final RealMatrix inverse = lu.getSolver().getInverse();\n    return inverse.multiply(inverse.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..98c951a2d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int numRows = m.getRowDimension();\n+    final int numCols = m.getColumnDimension();\n+    final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n+    final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n+    final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n+    final double normM = m.getFrobeniusNorm();\n+    double normX;\n+    double eps;\n+    do {\n+        xOld.setSubMatrix(x.getData(), 0, 0);\n+        x.setSubMatrix(xOld.scalarMultiply(0.5).add(multiplyInverse(xOld)).getData(), 0, 0);\n+        normX = x.getFrobeniusNorm();\n+        eps = Math.abs(normX - normM) / normM;\n+    } while (eps > 1e-9);\n+    return x;\n+}\n+\n+private RealMatrix multiplyInverse(RealMatrix m) {\n+    final LUDecomposition lu = new LUDecomposition(m);\n+    final RealMatrix inverse = lu.getSolver().getInverse();\n+    return inverse.multiply(inverse.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}