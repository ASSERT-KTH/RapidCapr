{
    "patch": "package com.mycompany.myapp;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.ErrorManager;\nimport com.google.javascript.jscomp.ErrorReporter;\nimport com.google.javascript.jscomp.JSError;\nimport com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.jscomp.SourceFile;\nimport com.google.javascript.jscomp.TypedScope;\nimport com.google.javascript.jscomp.TypedVar;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormatException;\nimport com.google.javascript.jscomp.parsing.parser.util.format.UnexpectedTokenException;\nimport com.google.javascript.jscomp.parsing.parser.util.format.Warning;\nimport com.google.javascript.rhino.IR;\nimport com.google.javascript.rhino.JSType;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.StaticSourceFile;\nimport com.google.javascript.rhino.jstype.TemplateType;\nimport com.google.javascript.rhino.jstype.TemplateTypeBuilder;\nimport com.google.javascript.rhino.jstype.UnionTypeBuilder;\nimport com.google.javascript.rhino.jstype.UnknownType;\nimport com.google.javascript.rhino.jstype.VoidType;\nimport com.google.javascript.rhino.jstype.FunctionType.Parameter;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.jstype.RecordType.PropertyBuilder;\nimport com.google.javascript.rhino.jstype.RecordType.Property;\nimport com.google.javascript.rhino.jstype.TemplateType.TemplateTypeConstructor;\n\n/**\n * An AST rewrite pass that rewrites ES6 and Typescript constructs down to ES5 constructs, using\n * Closure Compiler's AST nodes.\n *\n * <p>This pass can be used as a preprocessing step prior to emitting Closure Compiler compatible\n * JavaScript.\n */\npublic class IRFactory implements NodeTraversal.Callback, ErrorReporter {\n\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\n          \"use strict\", \"use asm\");\n\n  private final AbstractCompiler compiler;\n  private final TypedScope globalScope;\n  private final SourceFile sourceFile;\n  private final ErrorManager errorManager;\n\n  public IRFactory(\n      AbstractCompiler compiler,\n      TypedScope globalScope,\n      SourceFile sourceFile,\n      ErrorManager errorManager) {\n    this.compiler = compiler;\n    this.globalScope = globalScope;\n    this.sourceFile = sourceFile;\n    this.errorManager = errorManager;\n  }\n\n  private void reportError(String message, int lineno, int charno) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), lineno, charno, message));\n  }\n\n  private void reportWarning(String message, int lineno, int charno) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), lineno, charno, Warning.format(message)));\n  }\n\n  @Override\n  public void error(String message) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), -1, -1, message));\n  }\n\n  @Override\n  public void warning(String message) {\n    errorManager.report(\n        JSError.make(sourceFile.getName(), -1, -1, Warning.format(message)));\n  }\n\n  @Override\n  public void report(CheckLevel level, JSError error) {\n    if (level == CheckLevel.ERROR) {\n      errorManager.report(error);\n    } else if (level == CheckLevel.WARNING) {\n      errorManager.report(\n          JSError.make(sourceFile.getName(), error.getLineNumber(),\n              error.getCharno(), Warning.format(error.getDescription())));\n    } else if (level == CheckLevel.OFF) {\n      // Do nothing.\n    }\n  }\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (isDirective(n)) {\n      // Ignore directives, since they will not be present in the output.\n    } else {\n      Node newNode = processNode(n);\n      if (newNode != null) {\n        parent.replaceChild(n, newNode);\n      }\n    }\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return nType == Token.EXPR_RESULT &&\n        n.getFirstChild().isString() &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  private Node processGeneric(Node n) {\n    List<Node> newChildren = new ArrayList<>();\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      Node newNode = processNode(child);\n      if (newNode != null) {\n        newChildren.add(newNode);\n      }\n    }\n    return newChildren.isEmpty() ? null : IR.block(newChildren);\n  }\n\n  private Node processNode(Node n) {\n    switch (n.getToken()) {\n      case ARRAYLIT:\n        n.putBooleanProp(Node.CONSTANT_PROPERTY, NodeUtil.isImmutableValue(n));\n        return n;\n\n      // ...\n      case BLOCK:\n      case SCRIPT:\n        return processGeneric(n);\n\n      case BREAK:\n        return processBreakStatement(n);\n\n      // ...\n\n      default:\n        if (n.hasChildren()) {\n          return processGeneric(n);\n        }\n        return null;\n    }\n  }\n\n  private Node processBreakStatement(Node n) {\n    Node breakNode = IR.breakNode();\n    if (n.hasChildren()) {\n      String labelName = n.getFirstChild().getString();\n      if (labelName != null) {\n        breakNode.setLabel(labelName);\n      }\n    }\n    return breakNode;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..a1f83288 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,177 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+package com.mycompany.myapp;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+import com.google.common.collect.ImmutableSet;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.ErrorManager;\n+import com.google.javascript.jscomp.ErrorReporter;\n+import com.google.javascript.jscomp.JSError;\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.jscomp.SourceFile;\n+import com.google.javascript.jscomp.TypedScope;\n+import com.google.javascript.jscomp.TypedVar;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormatException;\n+import com.google.javascript.jscomp.parsing.parser.util.format.UnexpectedTokenException;\n+import com.google.javascript.jscomp.parsing.parser.util.format.Warning;\n+import com.google.javascript.rhino.IR;\n+import com.google.javascript.rhino.JSType;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.StaticSourceFile;\n+import com.google.javascript.rhino.jstype.TemplateType;\n+import com.google.javascript.rhino.jstype.TemplateTypeBuilder;\n+import com.google.javascript.rhino.jstype.UnionTypeBuilder;\n+import com.google.javascript.rhino.jstype.UnknownType;\n+import com.google.javascript.rhino.jstype.VoidType;\n+import com.google.javascript.rhino.jstype.FunctionType.Parameter;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.jstype.RecordType.PropertyBuilder;\n+import com.google.javascript.rhino.jstype.RecordType.Property;\n+import com.google.javascript.rhino.jstype.TemplateType.TemplateTypeConstructor;\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+/**\n+ * An AST rewrite pass that rewrites ES6 and Typescript constructs down to ES5 constructs, using\n+ * Closure Compiler's AST nodes.\n+ *\n+ * <p>This pass can be used as a preprocessing step prior to emitting Closure Compiler compatible\n+ * JavaScript.\n+ */\n+public class IRFactory implements NodeTraversal.Callback, ErrorReporter {\n+\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\n+          \"use strict\", \"use asm\");\n+\n+  private final AbstractCompiler compiler;\n+  private final TypedScope globalScope;\n+  private final SourceFile sourceFile;\n+  private final ErrorManager errorManager;\n+\n+  public IRFactory(\n+      AbstractCompiler compiler,\n+      TypedScope globalScope,\n+      SourceFile sourceFile,\n+      ErrorManager errorManager) {\n+    this.compiler = compiler;\n+    this.globalScope = globalScope;\n+    this.sourceFile = sourceFile;\n+    this.errorManager = errorManager;\n+  }\n+\n+  private void reportError(String message, int lineno, int charno) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), lineno, charno, message));\n+  }\n+\n+  private void reportWarning(String message, int lineno, int charno) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), lineno, charno, Warning.format(message)));\n+  }\n+\n+  @Override\n+  public void error(String message) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), -1, -1, message));\n+  }\n+\n+  @Override\n+  public void warning(String message) {\n+    errorManager.report(\n+        JSError.make(sourceFile.getName(), -1, -1, Warning.format(message)));\n+  }\n+\n+  @Override\n+  public void report(CheckLevel level, JSError error) {\n+    if (level == CheckLevel.ERROR) {\n+      errorManager.report(error);\n+    } else if (level == CheckLevel.WARNING) {\n+      errorManager.report(\n+          JSError.make(sourceFile.getName(), error.getLineNumber(),\n+              error.getCharno(), Warning.format(error.getDescription())));\n+    } else if (level == CheckLevel.OFF) {\n+      // Do nothing.\n     }\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (isDirective(n)) {\n+      // Ignore directives, since they will not be present in the output.\n+    } else {\n+      Node newNode = processNode(n);\n+      if (newNode != null) {\n+        parent.replaceChild(n, newNode);\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n     }\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+    int nType = n.getType();\n+    return nType == Token.EXPR_RESULT &&\n+        n.getFirstChild().isString() &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  private Node processGeneric(Node n) {\n+    List<Node> newChildren = new ArrayList<>();\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      Node newNode = processNode(child);\n+      if (newNode != null) {\n+        newChildren.add(newNode);\n       }\n-      return node;\n     }\n+    return newChildren.isEmpty() ? null : IR.block(newChildren);\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  private Node processNode(Node n) {\n+    switch (n.getToken()) {\n+      case ARRAYLIT:\n+        n.putBooleanProp(Node.CONSTANT_PROPERTY, NodeUtil.isImmutableValue(n));\n+        return n;\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+      // ...\n+      case BLOCK:\n+      case SCRIPT:\n+        return processGeneric(n);\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+      case BREAK:\n+        return processBreakStatement(n);\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+      // ...\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+      default:\n+        if (n.hasChildren()) {\n+          return processGeneric(n);\n+        }\n+        return null;\n+    }\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+  private Node processBreakStatement(Node n) {\n+    Node breakNode = IR.breakNode();\n+    if (n.hasChildren()) {\n+      String labelName = n.getFirstChild().getString();\n+      if (labelName != null) {\n+        breakNode.setLabel(labelName);\n+      }\n     }\n+    return breakNode;\n+  }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}