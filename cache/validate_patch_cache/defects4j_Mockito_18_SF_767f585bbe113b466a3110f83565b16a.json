{
    "patch": "public Map<Class<?>, Object> computeWithFallback() {\n    Map<Class<?>, Object> result = new HashMap<>();\n    Throwable fail = null;\n    \n    for (ResponseWithFallback candidate : candidates) {\n        try {\n            Object value = candidate.execute();\n            result.put(candidate.getType(), value);\n            break;\n        } catch (Throwable ex) {\n            fail = ex;\n        }\n    }\n\n    if (result.isEmpty() || (!candidates.isEmpty() && fail != null)) {\n        throw new FallbackFailedException(fail);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..4f5b6780e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,26 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Map<Class<?>, Object> computeWithFallback() {\n+    Map<Class<?>, Object> result = new HashMap<>();\n+    Throwable fail = null;\n+    \n+    for (ResponseWithFallback candidate : candidates) {\n+        try {\n+            Object value = candidate.execute();\n+            result.put(candidate.getType(), value);\n+            break;\n+        } catch (Throwable ex) {\n+            fail = ex;\n+        }\n+    }\n+\n+    if (result.isEmpty() || (!candidates.isEmpty() && fail != null)) {\n+        throw new FallbackFailedException(fail);\n+    }\n+\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}