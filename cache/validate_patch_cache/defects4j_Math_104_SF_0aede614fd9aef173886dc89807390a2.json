{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        double b = regularizedGammaQ(a, x);\n        double lng = Gamma.logGamma(a);\n        double val = a * Math.log(x) - x - lng;\n        return Math.exp(val) * b;\n    }\n    double s = a;\n    double denom = a + 1.0;\n    double ans = 1.0 / denom;\n    while (s != denom) {\n        s += 1.0;\n        ans *= x / s;\n    }\n    double lng = Gamma.logGamma(a);\n    double val = a * Math.log(x) - x - lng;\n    return ans * Math.exp(val);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            if (n == 0) {\n                return 1.0;\n            }\n            if (n == 1) {\n                return 1.0 - a;\n            }\n            return 2 * (n - 1) - a + x;\n        }\n        @Override\n        protected double getB(int n, double x) {\n            return n - 1.0;\n        }\n    };\n    double g = fraction.evaluate(x / (a + 1.0));\n    double lng = Gamma.logGamma(a);\n    double val = a * Math.log(x) - x - lng;\n    return Math.exp(val) * g;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ad9509f20 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        double b = regularizedGammaQ(a, x);\n+        double lng = Gamma.logGamma(a);\n+        double val = a * Math.log(x) - x - lng;\n+        return Math.exp(val) * b;\n+    }\n+    double s = a;\n+    double denom = a + 1.0;\n+    double ans = 1.0 / denom;\n+    while (s != denom) {\n+        s += 1.0;\n+        ans *= x / s;\n+    }\n+    double lng = Gamma.logGamma(a);\n+    double val = a * Math.log(x) - x - lng;\n+    return ans * Math.exp(val);\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            if (n == 0) {\n+                return 1.0;\n+            }\n+            if (n == 1) {\n+                return 1.0 - a;\n+            }\n+            return 2 * (n - 1) - a + x;\n+        }\n+        @Override\n+        protected double getB(int n, double x) {\n+            return n - 1.0;\n+        }\n+    };\n+    double g = fraction.evaluate(x / (a + 1.0));\n+    double lng = Gamma.logGamma(a);\n+    double val = a * Math.log(x) - x - lng;\n+    return Math.exp(val) * g;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}