{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix v = dec.getV();\n        final RealMatrix d = dec.getD();\n\n        // Check if all eigenvalues are positive\n        final double[] realEigenvalues = d.getColumn(0);\n        for (double eigenvalue : realEigenvalues) {\n            if (eigenvalue <= 0.0) {\n                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n            }\n        }\n\n        // Compute square root of diagonal matrix D\n        final double[] modifiedEigenvalues = new double[realEigenvalues.length];\n        for (int i = 0; i < realEigenvalues.length; i++) {\n            modifiedEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n        }\n        final RealMatrix squareRootOfD = MatrixUtils.createRealDiagonalMatrix(modifiedEigenvalues);\n\n        // Compute square root of matrix M using V*D*V^T\n        final RealMatrix vT = v.transpose();\n        return v.multiply(squareRootOfD).multiply(vT);\n    } catch (Exception e) {\n\t        throw new RuntimeException(e);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..90ed08f0b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,33 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix d = dec.getD();\n+\n+        // Check if all eigenvalues are positive\n+        final double[] realEigenvalues = d.getColumn(0);\n+        for (double eigenvalue : realEigenvalues) {\n+            if (eigenvalue <= 0.0) {\n+                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+            }\n+        }\n+\n+        // Compute square root of diagonal matrix D\n+        final double[] modifiedEigenvalues = new double[realEigenvalues.length];\n+        for (int i = 0; i < realEigenvalues.length; i++) {\n+            modifiedEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n+        }\n+        final RealMatrix squareRootOfD = MatrixUtils.createRealDiagonalMatrix(modifiedEigenvalues);\n+\n+        // Compute square root of matrix M using V*D*V^T\n+        final RealMatrix vT = v.transpose();\n+        return v.multiply(squareRootOfD).multiply(vT);\n+    } catch (Exception e) {\n+\t        throw new RuntimeException(e);\n     }\n+\n+}\n }",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalArgumentException: Matrix must be positive definite",
    "test_result": "FAIL"
}