{
    "patch": "private void findAliases(NodeTraversal t) {\n  // Collects non-aliased local variables that are not functions.\n  Scope scope = t.getScope();\n  boolean hasError = false;\n  boolean hasFunctionWithParams = false;\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null || !n.isName()) {\n      // Skip variables that are not named values.\n      continue;\n    }\n    Node parent = n.getParent();\n    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n      String name = n.getString();\n      Var aliasVar = scope.getVar(name);\n      if (aliasVar == null || aliasVar.getInitialValue() == null) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        hasError = true;\n      } else {\n        aliases.put(name, aliasVar);\n\n        String qualifiedName =\n            aliasVar.getInitialValue().getQualifiedName();\n        transformation.addAlias(name, qualifiedName);\n      }\n    } else if (!parent.isFunction()) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      hasError = true;\n    } else {\n      hasFunctionWithParams |= parent.getChildCount() > 2;\n    }\n  }\n  if (hasFunctionWithParams) {\n    report(t, t.getAstRoot(), GOOG_SCOPE_FUNCTION_HAS_PARAM, \"\");\n  }\n  Node script = t.getAstRoot();\n  Node scopeRoot = NodeUtil.getEnclosingScript(script.getParent());\n  List<Node> children = NodeUtil.getFunctionBody(scopeRoot).children();\n  if (children.size() != 1 || !NodeUtil.isFunctionExpression(children.get(0))) {\n    // TODO(robbyw): Fix this to report on the actual goog.scope node.\n    report(t, script, GOOG_SCOPE_MISPLACED_ANNOTATION, \"\");\n  }\n  if (hasError) {\n    report(t, script, INVALID_USE_OF_GOOG_SCOPE, \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..7bb5fc4f 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,52 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  // Collects non-aliased local variables that are not functions.\n+  Scope scope = t.getScope();\n+  boolean hasError = false;\n+  boolean hasFunctionWithParams = false;\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null || !n.isName()) {\n+      // Skip variables that are not named values.\n+      continue;\n+    }\n+    Node parent = n.getParent();\n+    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+      String name = n.getString();\n+      Var aliasVar = scope.getVar(name);\n+      if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        hasError = true;\n+      } else {\n+        aliases.put(name, aliasVar);\n+\n+        String qualifiedName =\n+            aliasVar.getInitialValue().getQualifiedName();\n+        transformation.addAlias(name, qualifiedName);\n       }\n+    } else if (!parent.isFunction()) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      hasError = true;\n+    } else {\n+      hasFunctionWithParams |= parent.getChildCount() > 2;\n     }\n+  }\n+  if (hasFunctionWithParams) {\n+    report(t, t.getAstRoot(), GOOG_SCOPE_FUNCTION_HAS_PARAM, \"\");\n+  }\n+  Node script = t.getAstRoot();\n+  Node scopeRoot = NodeUtil.getEnclosingScript(script.getParent());\n+  List<Node> children = NodeUtil.getFunctionBody(scopeRoot).children();\n+  if (children.size() != 1 || !NodeUtil.isFunctionExpression(children.get(0))) {\n+    // TODO(robbyw): Fix this to report on the actual goog.scope node.\n+    report(t, script, GOOG_SCOPE_MISPLACED_ANNOTATION, \"\");\n+  }\n+  if (hasError) {\n+    report(t, script, INVALID_USE_OF_GOOG_SCOPE, \"\");\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}