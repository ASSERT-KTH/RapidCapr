{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double[][] resultData = new double[n][n];\n  \n    // Compute the Cholesky decomposition of the matrix\n    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    final RealMatrix l = cholesky.getL();\n  \n    // Compute the square root of each diagonal element of L\n    for (int i = 0; i < n; i++) {\n        final double root = FastMath.sqrt(l.getEntry(i, i));\n        for (int j = 0; j < n; j++) {\n            resultData[i][j] = l.getEntry(i, j) / root;\n        }\n    }\n  \n    // Return the product of R and R^T, where R is the matrix \n    // with the square root of the diagonal elements of L\n    final RealMatrix result = MatrixUtils.createRealMatrix(resultData);\n    return result.multiply(result.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7e5a64e9c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double[][] resultData = new double[n][n];\n+  \n+    // Compute the Cholesky decomposition of the matrix\n+    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    final RealMatrix l = cholesky.getL();\n+  \n+    // Compute the square root of each diagonal element of L\n+    for (int i = 0; i < n; i++) {\n+        final double root = FastMath.sqrt(l.getEntry(i, i));\n+        for (int j = 0; j < n; j++) {\n+            resultData[i][j] = l.getEntry(i, j) / root;\n+        }\n     }\n+  \n+    // Return the product of R and R^T, where R is the matrix \n+    // with the square root of the diagonal elements of L\n+    final RealMatrix result = MatrixUtils.createRealMatrix(resultData);\n+    return result.multiply(result.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}