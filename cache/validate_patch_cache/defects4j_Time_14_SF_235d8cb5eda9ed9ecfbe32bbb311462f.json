{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }        \n        boolean cont = DateTimeUtils.isContiguous(partial, DateTimeFieldType.monthOfYear());\n        int day = values[cont ? 1 : 0]; // if hasTime, then the month would be considered as the second field\n        int month = values[cont ? 0 : 1];\n        int year = values[2];\n        if (month == 2 && day == 29) {\n            // Special case: adding a year to a leap day might push the date AFTER February 29th. \n            // Instead of switching back to February 28th, we want to stay at the last possible moment of February.\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            int maxDaysInYear = iChronology.year().isLeap(year + valueToAdd) ? 366 : 365;\n            day = Math.min(maxDayOfMonth, day + (maxDaysInYear - 365 * valueToAdd));\n        }\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n        // if it's not a leap year and the current day of month > 28 after adding value, set to max day of month\n        if (!iChronology.year().isLeap(newValues[2]) && newValues[1] == 2 && newValues[2] > 28) {\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            newValues[2] = maxDayOfMonth;\n        }\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ae852b8a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }        \n+        boolean cont = DateTimeUtils.isContiguous(partial, DateTimeFieldType.monthOfYear());\n+        int day = values[cont ? 1 : 0]; // if hasTime, then the month would be considered as the second field\n+        int month = values[cont ? 0 : 1];\n+        int year = values[2];\n+        if (month == 2 && day == 29) {\n+            // Special case: adding a year to a leap day might push the date AFTER February 29th. \n+            // Instead of switching back to February 28th, we want to stay at the last possible moment of February.\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+            int maxDaysInYear = iChronology.year().isLeap(year + valueToAdd) ? 366 : 365;\n+            day = Math.min(maxDayOfMonth, day + (maxDaysInYear - 365 * valueToAdd));\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+        int[] newValues = iChronology.get(partial, instant);\n+        // if it's not a leap year and the current day of month > 28 after adding value, set to max day of month\n+        if (!iChronology.year().isLeap(newValues[2]) && newValues[1] == 2 && newValues[2] > 28) {\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+            newValues[2] = maxDayOfMonth;\n         }\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method isContiguous in class DateTimeUtils cannot be applied to given types;",
    "test_result": "ERROR"
}