{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n    if (n.isFunction()) {\n        defineDeclaredFunction(n, parent);\n        return;\n    }\n    if (n.isCatch()) {\n        defineCatch(n, parent);\n        return;\n    }\n    if (n.isVar()) {\n        defineVar(n, parent);\n        return;\n    }\n    if (n.isName() && n.getFirstChild().isFunction()) {\n        defineDeclaredFunction(n.getFirstChild(), n);\n        return;\n    }\n    if (n.isCall() && n.getFirstChild().isQualifiedName() &&\n            (n.getFirstChild().getQualifiedName().equals(\"goog.provide\") ||\n             n.getFirstChild().getQualifiedName().equals(\"goog.module\"))) {\n        handleProvideOrModuleCall(n);\n        return;\n    }\n    attachLiteralTypes(n);\n    if (n.isFunction()) {\n        if (parent.isVar() || parent.isAssign() || parent.isExprResult()) {\n            defineDeclaredFunction(n, parent);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..50113a70 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,40 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+        return;\n+    }\n+    if (n.isFunction()) {\n+        defineDeclaredFunction(n, parent);\n+        return;\n+    }\n+    if (n.isCatch()) {\n+        defineCatch(n, parent);\n+        return;\n+    }\n+    if (n.isVar()) {\n+        defineVar(n, parent);\n         return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n     }\n+    if (n.isName() && n.getFirstChild().isFunction()) {\n+        defineDeclaredFunction(n.getFirstChild(), n);\n+        return;\n+    }\n+    if (n.isCall() && n.getFirstChild().isQualifiedName() &&\n+            (n.getFirstChild().getQualifiedName().equals(\"goog.provide\") ||\n+             n.getFirstChild().getQualifiedName().equals(\"goog.module\"))) {\n+        handleProvideOrModuleCall(n);\n+        return;\n+    }\n+    attachLiteralTypes(n);\n+    if (n.isFunction()) {\n+        if (parent.isVar() || parent.isAssign() || parent.isExprResult()) {\n+            defineDeclaredFunction(n, parent);\n+        }\n+    }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}