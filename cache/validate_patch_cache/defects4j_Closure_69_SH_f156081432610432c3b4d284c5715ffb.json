{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null) {\n        Node parent = n.getParent();\n        if (NodeUtil.isGet(parent) ||\n            NodeUtil.isGetElem(parent) ||\n            NodeUtil.isCall(parent) || // outer function call\n            parent.isAssign()) {\n          visitParameterList(t, n, functionType);\n          ensureTyped(t, n, functionType.getReturnType());\n          return;\n        } else {\n          report(t, n, INCORRECT_THIS_TYPE, thisType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2f986c53 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null) {\n+        Node parent = n.getParent();\n+        if (NodeUtil.isGet(parent) ||\n+            NodeUtil.isGetElem(parent) ||\n+            NodeUtil.isCall(parent) || // outer function call\n+            parent.isAssign()) {\n+          visitParameterList(t, n, functionType);\n+          ensureTyped(t, n, functionType.getReturnType());\n+          return;\n+        } else {\n+          report(t, n, INCORRECT_THIS_TYPE, thisType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}