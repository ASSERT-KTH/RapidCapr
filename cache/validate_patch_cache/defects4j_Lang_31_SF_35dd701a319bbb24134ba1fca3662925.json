{
    "patch": "package com.example;\n\npublic class StringUtils {\n\n\tpublic static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n\t\tif (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfinal int csLength = sequence.length();\n\t\tfinal int searchLength = searchChars.length;\n\t\tfinal int csLast = csLength - 1;\n\t\tfinal int searchLast = searchLength - 1;\n\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tfinal char ch = sequence.charAt(i);\n\t\t\tif (Character.isHighSurrogate(ch)) {\n\t\t\t\tif (i == csLast) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfinal char ch2 = sequence.charAt(i + 1);\n\t\t\t\tif (Character.isLowSurrogate(ch2)) {\n\t\t\t\t\tfinal int codePoint = Character.toCodePoint(ch, ch2);\n\t\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\t\t\tif (Character.charCount(codePoint) == 2) {\n\t\t\t\t\t\t\tif (j == searchLast) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinal char[] surrogatePair = Character.toChars(codePoint);\n\t\t\t\t\t\t\tfinal char[] searchCharsClone = new char[2];\n\t\t\t\t\t\t\tsearchCharsClone[0] = searchChars[j];\n\t\t\t\t\t\t\tif (surrogatePair[0] == searchCharsClone[0] && surrogatePair[1] == searchCharsClone[1]) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t++j;\n\t\t\t\t\t\t\tif (j < searchLength) {\n\t\t\t\t\t\t\t\tsearchCharsClone[1] = searchChars[j];\n\t\t\t\t\t\t\t\tif (surrogatePair[0] == searchCharsClone[0] && surrogatePair[1] == searchCharsClone[1]) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (Character.toChars(codePoint)[0] == searchChars[j]) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == searchLast) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t++i;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\t\tif (searchChars[j] == ch) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate static boolean isEmpty(final CharSequence cs) {\n\t\treturn cs == null || cs.length() == 0;\n\t}\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..aca2a79b 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,74 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+package com.example;\n+\n+public class StringUtils {\n+\n+\tpublic static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n+\t\tif (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal int csLength = sequence.length();\n+\t\tfinal int searchLength = searchChars.length;\n+\t\tfinal int csLast = csLength - 1;\n+\t\tfinal int searchLast = searchLength - 1;\n+\n+\t\tfor (int i = 0; i < csLength; i++) {\n+\t\t\tfinal char ch = sequence.charAt(i);\n+\t\t\tif (Character.isHighSurrogate(ch)) {\n+\t\t\t\tif (i == csLast) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\tfinal char ch2 = sequence.charAt(i + 1);\n+\t\t\t\tif (Character.isLowSurrogate(ch2)) {\n+\t\t\t\t\tfinal int codePoint = Character.toCodePoint(ch, ch2);\n+\t\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n+\t\t\t\t\t\tif (Character.charCount(codePoint) == 2) {\n+\t\t\t\t\t\t\tif (j == searchLast) {\n+\t\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfinal char[] surrogatePair = Character.toChars(codePoint);\n+\t\t\t\t\t\t\tfinal char[] searchCharsClone = new char[2];\n+\t\t\t\t\t\t\tsearchCharsClone[0] = searchChars[j];\n+\t\t\t\t\t\t\tif (surrogatePair[0] == searchCharsClone[0] && surrogatePair[1] == searchCharsClone[1]) {\n+\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t++j;\n+\t\t\t\t\t\t\tif (j < searchLength) {\n+\t\t\t\t\t\t\t\tsearchCharsClone[1] = searchChars[j];\n+\t\t\t\t\t\t\t\tif (surrogatePair[0] == searchCharsClone[0] && surrogatePair[1] == searchCharsClone[1]) {\n+\t\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif (Character.toChars(codePoint)[0] == searchChars[j]) {\n+\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (j == searchLast) {\n+\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\t++i;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tfor (int j = 0; j < searchLength; j++) {\n+\t\t\t\t\tif (searchChars[j] == ch) {\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate static boolean isEmpty(final CharSequence cs) {\n+\t\treturn cs == null || cs.length() == 0;\n+\t}\n+\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}