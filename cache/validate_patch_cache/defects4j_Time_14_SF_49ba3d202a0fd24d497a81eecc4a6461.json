{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    int size = partial.size();\n    Chronology chrono = partial.getChronology();\n    DateTimeField field = partial.getField(fieldIndex);\n    if (size == 0) {\n        return field.addWrapField(chrono.getEmptyMutableDateTime(), valueToAdd);\n    }\n    if (size == 1) {\n        return field.addWrapField(chrono.set(partial, 0L), valueToAdd);\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0; i < partial.size(); i++) {\n            instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n        }\n        instant = field.addWrapField(instant, valueToAdd);\n        return chrono.get(partial, instant);\n    }\n    // remainder is best guess\n    DateTimeField[] fields = partial.getFields();\n    int[] newValues = new int[size];\n    System.arraycopy(values, 0, newValues, 0, size);\n    for (int i = 0; i < size; i++) {\n        if (partial.getFieldType(i).equals(field.getType())) {\n            DateTimeField sumField = new OffsetDateTimeField(\n                chrono.months(),\n                fields[i].getField(chrono),\n                field.getType());\n            newValues[i] = sumField.addWrapField(values[i], valueToAdd);\n            break;\n        }\n    }\n    return chrono.get(partial, newValues);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..90c0be7b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    int size = partial.size();\n+    Chronology chrono = partial.getChronology();\n+    DateTimeField field = partial.getField(fieldIndex);\n+    if (size == 0) {\n+        return field.addWrapField(chrono.getEmptyMutableDateTime(), valueToAdd);\n+    }\n+    if (size == 1) {\n+        return field.addWrapField(chrono.set(partial, 0L), valueToAdd);\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0; i < partial.size(); i++) {\n+            instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        instant = field.addWrapField(instant, valueToAdd);\n+        return chrono.get(partial, instant);\n+    }\n+    // remainder is best guess\n+    DateTimeField[] fields = partial.getFields();\n+    int[] newValues = new int[size];\n+    System.arraycopy(values, 0, newValues, 0, size);\n+    for (int i = 0; i < size; i++) {\n+        if (partial.getFieldType(i).equals(field.getType())) {\n+            DateTimeField sumField = new OffsetDateTimeField(\n+                chrono.months(),\n+                fields[i].getField(chrono),\n+                field.getType());\n+            newValues[i] = sumField.addWrapField(values[i], valueToAdd);\n+            break;\n         }\n     }\n+    return chrono.get(partial, newValues);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}