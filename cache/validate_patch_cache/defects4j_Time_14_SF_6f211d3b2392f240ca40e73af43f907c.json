{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            LocalDate date = LocalDate.from(partial);\n            int year = date.getYear();\n            int month = date.getMonthOfYear();\n            int day = date.getDayOfMonth();\n            int hour = 0, min = 0, sec = 0, mil = 0;\n            if(date instanceof LocalDateTime) {\n                hour = ((LocalDateTime) date).getHourOfDay();\n                min = ((LocalDateTime) date).getMinuteOfHour();\n                sec = ((LocalDateTime) date).getSecondOfMinute();\n                mil = ((LocalDateTime) date).getMillisOfSecond();\n            }\n            int newMonth = (month + (valueToAdd % 12) + 12) % 12;\n            int newYear = year + valueToAdd / 12;\n            if (newMonth < month) {\n                int daysInLastMonth = DateTimeConstants.monthsOfYear()[month - 1] -\n                                      date.dayOfMonth().getMaximumValue();\n                if (day > daysInLastMonth) {\n                    day = daysInLastMonth;\n                }\n            }\n            LocalDate newDate = new LocalDate(newYear, newMonth, day, date.getChronology());\n            if(date instanceof LocalDateTime) {\n                newDate.toLocalDateTime(new LocalTime(hour, min, sec, mil));\n            }\n            return newDate.getValues();\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a48b6d29 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            LocalDate date = LocalDate.from(partial);\n+            int year = date.getYear();\n+            int month = date.getMonthOfYear();\n+            int day = date.getDayOfMonth();\n+            int hour = 0, min = 0, sec = 0, mil = 0;\n+            if(date instanceof LocalDateTime) {\n+                hour = ((LocalDateTime) date).getHourOfDay();\n+                min = ((LocalDateTime) date).getMinuteOfHour();\n+                sec = ((LocalDateTime) date).getSecondOfMinute();\n+                mil = ((LocalDateTime) date).getMillisOfSecond();\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int newMonth = (month + (valueToAdd % 12) + 12) % 12;\n+            int newYear = year + valueToAdd / 12;\n+            if (newMonth < month) {\n+                int daysInLastMonth = DateTimeConstants.monthsOfYear()[month - 1] -\n+                                      date.dayOfMonth().getMaximumValue();\n+                if (day > daysInLastMonth) {\n+                    day = daysInLastMonth;\n+                }\n+            }\n+            LocalDate newDate = new LocalDate(newYear, newMonth, day, date.getChronology());\n+            if(date instanceof LocalDateTime) {\n+                newDate.toLocalDateTime(new LocalTime(hour, min, sec, mil));\n+            }\n+            return newDate.getValues();\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}