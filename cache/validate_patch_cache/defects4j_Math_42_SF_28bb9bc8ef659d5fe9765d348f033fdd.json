{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0.0d : getEntry(negativeVarBasicRow, getRhsOffset());\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n    int numUnboundedVariables = 0;\n    List<Integer> unboundedVariableRows = new ArrayList<Integer>();\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0.0d;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        if (basicRow == null) {\n            numUnboundedVariables++;\n            unboundedVariableRows.add(i);\n            continue;\n        }\n        if (basicRows.contains(basicRow)) {\n            coefficients[i] = 0.0d;\n            continue;\n        }\n        basicRows.add(basicRow);\n        double entry = getEntry(basicRow, colIndex);\n        if (negativeVarBasicRow != null && basicRow.equals(negativeVarBasicRow)) {\n            entry = 0.0d;\n        }\n        coefficients[i] = entry;\n    }\n\n    if (negativeVarBasicRow == null) {\n        return new RealPointValuePair(coefficients, 0.0d);\n    }\n\n    double[] solution = new double[getOriginalNumDecisionVariables()];\n    Arrays.fill(solution, Double.NaN);\n    if (numUnboundedVariables > 0) {\n        double[] upperBounds = getUpperBounds();\n        double[] lowerBounds = getLowerBounds();\n        int numConstraints = getNumEquations();\n        for (Integer unboundedVariableRow : unboundedVariableRows) {\n            int row = numConstraints + unboundedVariableRow;\n            // check if there is a single column with non-zero value\n            Integer pivotCol = null;\n            double entry = 0.0d;\n            for (int colIndex = 0; colIndex < getNumVariables(); colIndex++) {\n                double val = getEntry(row, colIndex);\n                if (Precision.compareTo(val, 0.0d, epsilon) != 0) {\n                    if (pivotCol == null) {\n                        entry = val;\n                        pivotCol = colIndex;\n                    } else {\n                        pivotCol = null;\n                        break;\n                    }\n                }\n            }\n            if (pivotCol != null && entry > 0.0d) {\n                double pivot = getEntry(row, pivotCol);\n                double rhs = getEntry(row, getRhsOffset());\n                if (Precision.compareTo(pivot, 0.0d, epsilon) != 0) {\n                    if (entry < 0.0d) {\n                        pivot = -pivot;\n                        entry = -entry;\n                    }\n                    if (Precision.compareTo(pivot, 0.0d, 10 * epsilon) == 1) {\n                        double candidate = (rhs - entry * upperBounds[unboundedVariableRow]) / pivot;\n                        if (Double.isNaN(solution[unboundedVariableRow])) {\n                            solution[unboundedVariableRow] = candidate;\n                        } else if (Precision.compareTo(candidate, solution[unboundedVariableRow], epsilon) != 0) {\n                            solution[unboundedVariableRow] = Double.NaN;\n                            break;\n                        }\n                    } else if (Precision.compareTo(pivot, 0.0d, 10 * epsilon) == -1) {\n                        pivot = -pivot;\n                        entry = -entry;\n                        double candidate = (rhs - entry * lowerBounds[unboundedVariableRow]) / pivot;\n                        if (Double.isNaN(solution[unboundedVariableRow])) {\n                            solution[unboundedVariableRow] = candidate;\n                        } else if (Precision.compareTo(candidate, solution[unboundedVariableRow], epsilon) != 0) {\n                            solution[unboundedVariableRow] = Double.NaN;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // check if the solution is feasible and/or optimal\n    double value = f.getValue(coefficients);\n    if (negativeVarBasicRow != null) {\n        if (restrictToNonNegative) {\n            for (double coefficient : coefficients) {\n                if (Precision.compareTo(coefficient, 0.0d, epsilon) < 0) {\n                    return new RealPointValuePair(coefficients, Double.NaN);\n                }\n            }\n            value += mostNegative;\n        } else {\n            value -= mostNegative;\n        }\n    }\n    for (int i = 0; i < solution.length; i++) {\n        if (Double.isNaN(solution[i])) {\n            return new RealPointValuePair(coefficients, Double.NaN);\n        }\n        if (restrictToNonNegative && Precision.compareTo(solution[i], 0.0d, epsilon) < 0) {\n            return new RealPointValuePair(coefficients, Double.NaN);\n        }\n        solution[i] = Precision.round(solution[i], maxUlps);\n        if (Precision.compareTo(solution[i], getLowerBound(i), epsilon) < 0 || Precision.compareTo(solution[i], getUpperBound(i), epsilon) > 0) {\n            return new RealPointValuePair(coefficients, Double.NaN);\n        }\n        value += solution[i] * coefficients[i];\n    }\n    return new RealPointValuePair(solution, value);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..0b6023abd 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,36 +393,127 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n+    double mostNegative = negativeVarBasicRow == null ? 0.0d : getEntry(negativeVarBasicRow, getRhsOffset());\n+    Set<Integer> basicRows = new HashSet<Integer>();\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+\n+    int numUnboundedVariables = 0;\n+    List<Integer> unboundedVariableRows = new ArrayList<Integer>();\n+    for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) {\n+            coefficients[i] = 0.0d;\n             continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n-      }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        }\n+        Integer basicRow = getBasicRow(colIndex);\n+        if (basicRow == null) {\n+            numUnboundedVariables++;\n+            unboundedVariableRows.add(i);\n+            continue;\n+        }\n+        if (basicRows.contains(basicRow)) {\n+            coefficients[i] = 0.0d;\n+            continue;\n+        }\n+        basicRows.add(basicRow);\n+        double entry = getEntry(basicRow, colIndex);\n+        if (negativeVarBasicRow != null && basicRow.equals(negativeVarBasicRow)) {\n+            entry = 0.0d;\n+        }\n+        coefficients[i] = entry;\n+    }\n+\n+    if (negativeVarBasicRow == null) {\n+        return new RealPointValuePair(coefficients, 0.0d);\n+    }\n+\n+    double[] solution = new double[getOriginalNumDecisionVariables()];\n+    Arrays.fill(solution, Double.NaN);\n+    if (numUnboundedVariables > 0) {\n+        double[] upperBounds = getUpperBounds();\n+        double[] lowerBounds = getLowerBounds();\n+        int numConstraints = getNumEquations();\n+        for (Integer unboundedVariableRow : unboundedVariableRows) {\n+            int row = numConstraints + unboundedVariableRow;\n+            // check if there is a single column with non-zero value\n+            Integer pivotCol = null;\n+            double entry = 0.0d;\n+            for (int colIndex = 0; colIndex < getNumVariables(); colIndex++) {\n+                double val = getEntry(row, colIndex);\n+                if (Precision.compareTo(val, 0.0d, epsilon) != 0) {\n+                    if (pivotCol == null) {\n+                        entry = val;\n+                        pivotCol = colIndex;\n+                    } else {\n+                        pivotCol = null;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (pivotCol != null && entry > 0.0d) {\n+                double pivot = getEntry(row, pivotCol);\n+                double rhs = getEntry(row, getRhsOffset());\n+                if (Precision.compareTo(pivot, 0.0d, epsilon) != 0) {\n+                    if (entry < 0.0d) {\n+                        pivot = -pivot;\n+                        entry = -entry;\n+                    }\n+                    if (Precision.compareTo(pivot, 0.0d, 10 * epsilon) == 1) {\n+                        double candidate = (rhs - entry * upperBounds[unboundedVariableRow]) / pivot;\n+                        if (Double.isNaN(solution[unboundedVariableRow])) {\n+                            solution[unboundedVariableRow] = candidate;\n+                        } else if (Precision.compareTo(candidate, solution[unboundedVariableRow], epsilon) != 0) {\n+                            solution[unboundedVariableRow] = Double.NaN;\n+                            break;\n+                        }\n+                    } else if (Precision.compareTo(pivot, 0.0d, 10 * epsilon) == -1) {\n+                        pivot = -pivot;\n+                        entry = -entry;\n+                        double candidate = (rhs - entry * lowerBounds[unboundedVariableRow]) / pivot;\n+                        if (Double.isNaN(solution[unboundedVariableRow])) {\n+                            solution[unboundedVariableRow] = candidate;\n+                        } else if (Precision.compareTo(candidate, solution[unboundedVariableRow], epsilon) != 0) {\n+                            solution[unboundedVariableRow] = Double.NaN;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    // check if the solution is feasible and/or optimal\n+    double value = f.getValue(coefficients);\n+    if (negativeVarBasicRow != null) {\n+        if (restrictToNonNegative) {\n+            for (double coefficient : coefficients) {\n+                if (Precision.compareTo(coefficient, 0.0d, epsilon) < 0) {\n+                    return new RealPointValuePair(coefficients, Double.NaN);\n+                }\n+            }\n+            value += mostNegative;\n+        } else {\n+            value -= mostNegative;\n+        }\n     }\n+    for (int i = 0; i < solution.length; i++) {\n+        if (Double.isNaN(solution[i])) {\n+            return new RealPointValuePair(coefficients, Double.NaN);\n+        }\n+        if (restrictToNonNegative && Precision.compareTo(solution[i], 0.0d, epsilon) < 0) {\n+            return new RealPointValuePair(coefficients, Double.NaN);\n+        }\n+        solution[i] = Precision.round(solution[i], maxUlps);\n+        if (Precision.compareTo(solution[i], getLowerBound(i), epsilon) < 0 || Precision.compareTo(solution[i], getUpperBound(i), epsilon) > 0) {\n+            return new RealPointValuePair(coefficients, Double.NaN);\n+        }\n+        value += solution[i] * coefficients[i];\n+    }\n+    return new RealPointValuePair(solution, value);\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}