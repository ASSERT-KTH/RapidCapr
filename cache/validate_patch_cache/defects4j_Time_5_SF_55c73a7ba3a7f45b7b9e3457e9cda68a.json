{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Calculate total duration in milliseconds\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Calculate total duration in days\n    int days = getDays();\n    days += (getWeeks() * 7);\n    days += (int) (millis / DateTimeConstants.MILLIS_PER_DAY);\n    millis %= DateTimeConstants.MILLIS_PER_DAY;\n\n    // Calculate total duration in months/years, if supported\n    int months = 0;\n    int years = 0;\n    int remainingDays = 0;\n\n    if (type.isSupported(DurationFieldType.months())) {\n        months = (getYears() * 12) + getMonths();\n        months += (days / 30);\n        days %= 30;\n\n        if (type.isSupported(DurationFieldType.years())) {\n            years = months / 12;\n            months %= 12;\n        }\n\n        if (type.isSupported(DurationFieldType.weeks())) {\n            int totalWeeks = days / 7;\n            remainingDays = days % 7;\n            months += (totalWeeks * 4);\n            if (remainingDays > 0) {\n                if (months < 12) {\n                    days = (months * 30) + remainingDays;\n                    months = 0;\n                } else {\n                    int extraMonths = (months - 10) % 12;\n                    months = 10 + extraMonths;\n                    years += ((months - 10) / 12);\n                    days = ((years * 365) + (months * 30) + remainingDays);\n                    years += (days / 365);\n                    int totalDays = years * 365;\n                    months = 0;\n                    int monthDays = 0;\n                    while (totalDays < days) {\n                        int mDays = DateTimeUtils.getDaysInYearMonth(years, months + 1);\n                        monthDays += mDays;\n                        totalDays += mDays;\n                        months++;\n                        if (months == 12) {\n                            years++;\n                            months = 0;\n                        }\n                    }\n                    totalDays -= monthDays;\n                    months--;\n                    remainingDays = days - totalDays;\n                }\n            }\n        } else {\n            years += (months / 12);\n            months %= 12;\n            remainingDays = days;\n        }\n    } else if (type.isSupported(DurationFieldType.years())) {\n        years = days / 365;\n        remainingDays = days % 365;\n        months = remainingDays / 30;\n        remainingDays %= 30;\n\n        if (type.isSupported(DurationFieldType.weeks())) {\n            int totalWeeks = remainingDays / 7;\n            remainingDays %= 7;\n            months += (totalWeeks * 4);\n            if (remainingDays > 0) {\n                int extraMonths = (months + 2) % 12;\n                months = 2 + extraMonths;\n                years += ((months + 2) / 12);\n                days = ((years * 365) + (months * 30) + remainingDays);\n                years += (days / 365);\n                int totalDays = years * 365;\n                months = 0;\n                int monthDays = 0;\n                while (totalDays < days) {\n                    int mDays = DateTimeUtils.getDaysInYearMonth(years, months + 1);\n                    monthDays += mDays;\n                    totalDays += mDays;\n                    months++;\n                    if (months == 12) {\n                        years++;\n                        months = 0;\n                    }\n                }\n                totalDays -= monthDays;\n                months--;\n                remainingDays = days - totalDays;\n            }\n        } else {\n            remainingDays += years * 365;\n        }\n    } else if (type.isSupported(DurationFieldType.weeks())) {\n        int totalWeeks = days / 7;\n        remainingDays = days % 7;\n        months += (totalWeeks * 4);\n        if (remainingDays > 0) {\n            remainingDays += (years * 365) + (months * 30);\n        }\n    }\n\n    // Create and return normalized period\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withDays(remainingDays);\n\n    if (type.isSupported(DurationFieldType.weeks())) {\n        result = result.withWeeks(result.getDays() / 7).withDays(result.getDays() % 7);\n    }\n\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..620659c4 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,131 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // Calculate total duration in milliseconds\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    // Calculate total duration in days\n+    int days = getDays();\n+    days += (getWeeks() * 7);\n+    days += (int) (millis / DateTimeConstants.MILLIS_PER_DAY);\n+    millis %= DateTimeConstants.MILLIS_PER_DAY;\n+\n+    // Calculate total duration in months/years, if supported\n+    int months = 0;\n+    int years = 0;\n+    int remainingDays = 0;\n+\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months = (getYears() * 12) + getMonths();\n+        months += (days / 30);\n+        days %= 30;\n+\n+        if (type.isSupported(DurationFieldType.years())) {\n+            years = months / 12;\n+            months %= 12;\n+        }\n+\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            int totalWeeks = days / 7;\n+            remainingDays = days % 7;\n+            months += (totalWeeks * 4);\n+            if (remainingDays > 0) {\n+                if (months < 12) {\n+                    days = (months * 30) + remainingDays;\n+                    months = 0;\n+                } else {\n+                    int extraMonths = (months - 10) % 12;\n+                    months = 10 + extraMonths;\n+                    years += ((months - 10) / 12);\n+                    days = ((years * 365) + (months * 30) + remainingDays);\n+                    years += (days / 365);\n+                    int totalDays = years * 365;\n+                    months = 0;\n+                    int monthDays = 0;\n+                    while (totalDays < days) {\n+                        int mDays = DateTimeUtils.getDaysInYearMonth(years, months + 1);\n+                        monthDays += mDays;\n+                        totalDays += mDays;\n+                        months++;\n+                        if (months == 12) {\n+                            years++;\n+                            months = 0;\n+                        }\n+                    }\n+                    totalDays -= monthDays;\n+                    months--;\n+                    remainingDays = days - totalDays;\n+                }\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+        } else {\n+            years += (months / 12);\n+            months %= 12;\n+            remainingDays = days;\n+        }\n+    } else if (type.isSupported(DurationFieldType.years())) {\n+        years = days / 365;\n+        remainingDays = days % 365;\n+        months = remainingDays / 30;\n+        remainingDays %= 30;\n+\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            int totalWeeks = remainingDays / 7;\n+            remainingDays %= 7;\n+            months += (totalWeeks * 4);\n+            if (remainingDays > 0) {\n+                int extraMonths = (months + 2) % 12;\n+                months = 2 + extraMonths;\n+                years += ((months + 2) / 12);\n+                days = ((years * 365) + (months * 30) + remainingDays);\n+                years += (days / 365);\n+                int totalDays = years * 365;\n+                months = 0;\n+                int monthDays = 0;\n+                while (totalDays < days) {\n+                    int mDays = DateTimeUtils.getDaysInYearMonth(years, months + 1);\n+                    monthDays += mDays;\n+                    totalDays += mDays;\n+                    months++;\n+                    if (months == 12) {\n+                        years++;\n+                        months = 0;\n+                    }\n+                }\n+                totalDays -= monthDays;\n+                months--;\n+                remainingDays = days - totalDays;\n             }\n+        } else {\n+            remainingDays += years * 365;\n         }\n-        return result;\n+    } else if (type.isSupported(DurationFieldType.weeks())) {\n+        int totalWeeks = days / 7;\n+        remainingDays = days % 7;\n+        months += (totalWeeks * 4);\n+        if (remainingDays > 0) {\n+            remainingDays += (years * 365) + (months * 30);\n+        }\n+    }\n+\n+    // Create and return normalized period\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withDays(remainingDays);\n+\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        result = result.withWeeks(result.getDays() / 7).withDays(result.getDays() % 7);\n     }\n \n+    return result.normalizedStandard();\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}