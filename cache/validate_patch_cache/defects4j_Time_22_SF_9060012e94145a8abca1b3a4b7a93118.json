{
    "patch": "    public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n        String str = text.substring(position);\n        String longestMatch = null;\n        for (String id : ALL_IDS) {\n            if (str.startsWith(id) && (longestMatch == null || id.length() > longestMatch.length())) {\n                longestMatch = id;\n            }\n        }\n        if (longestMatch != null) {\n            bucket.setZone(DateTimeZone.forID(longestMatch));\n            return position + longestMatch.length();\n        }\n        return ~position;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..8eb770a9 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,9 +218,19 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+    public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+        String str = text.substring(position);\n+        String longestMatch = null;\n+        for (String id : ALL_IDS) {\n+            if (str.startsWith(id) && (longestMatch == null || id.length() > longestMatch.length())) {\n+                longestMatch = id;\n+            }\n+        }\n+        if (longestMatch != null) {\n+            bucket.setZone(DateTimeZone.forID(longestMatch));\n+            return position + longestMatch.length();\n+        }\n+        return ~position;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}