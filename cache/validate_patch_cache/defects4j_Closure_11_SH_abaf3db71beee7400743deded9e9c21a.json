{
    "patch": " private static class MissingPropertyWarningsGuard {\n    private final NodeTraversal traversal;\n    private final AbstractCompiler compiler;\n    private final String warningMessage;\n\n    private Node parent;\n\n    private MissingPropertyWarningsGuard(NodeTraversal traversal, String warningMessage) {\n      this.traversal = traversal;\n      this.compiler = traversal.getCompiler();\n      this.warningMessage = warningMessage;\n    }\n\n    private void enterScope(NodeTraversal t) {\n      Node n = t.getCurrentNode();\n      switch (n.getToken()) {\n        case FUNCTION:\n        case SCRIPT:\n        case MODULE_BODY:\n        case CATCH:\n        case LOOP:\n        case FOR:\n        case FOR_OF:\n        case FOR_IN:\n        case CLASS:\n          parent = null;\n          break;\n        case BLOCK:\n        case CONST:\n        case LET:\n        case VAR:\n          if (n.hasChildren()) {\n            parent = n.getLastChild();\n          } else {\n            parent = null;\n          }\n          break;\n        default:\n          if (NodeUtil.isStatement(n)) {\n            parent = null;\n          } else {\n            parent = n.getParent();\n          }\n          break;\n      }\n    }\n\n    private void exitScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        removeGuard();\n      }\n    }\n\n    private void setGuard() {\n      traversal.addScopeCallback(new NodeTraversal.ScopedCallback() {\n        public void enterScope(NodeTraversal t) {\n          enterScope(t);\n        }\n\n        public void exitScope(NodeTraversal t) {\n          exitScope(t);\n        }\n      });\n\n      NodeUtil.getEnclosingScript(traversal.getScopeRoot())\n          .setChangeMark(compiler);\n\n      setGuardState(true);\n    }\n\n    private void removeGuard() {\n      setGuardState(false);\n    }\n\n    private void setGuardState(boolean state) {\n      Node script = NodeUtil.getEnclosingScript(traversal.getScopeRoot());\n      script.putBooleanProp(Node.MISSING_PROPERTIES_GUARD_STATE, state);\n    }\n\n    private boolean guardSet() {\n      Node script = NodeUtil.getEnclosingScript(traversal.getScopeRoot());\n      return script.getBooleanProp(Node.MISSING_PROPERTIES_GUARD_STATE);\n    }\n\n    private void warning(Node n, String reason) {\n      // Do not warn about missing properties in assignment expressions.\n      if (parent != null && parent.isAssign()) {\n        return;\n      }\n      // Get the JSDoc info for this node.\n      JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n      if (info == null || !info.isSuppressingWarnings(warningMessage)) {\n        compiler.report(traversal.makeError(n, MISSING_PROPERTIES_WARNING, reason));\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}