{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    \n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n    \n    int totalYears = years + (months / 12);\n    int totalMonths = months % 12;\n        \n    long totalMillis = millis\n            + (seconds * DateTimeConstants.MILLIS_PER_SECOND)\n            + (minutes * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (hours * DateTimeConstants.MILLIS_PER_HOUR)\n            + (days * DateTimeConstants.MILLIS_PER_DAY);\n            \n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        totalYears += totalMonths / 12;\n        totalMonths = totalMonths % 12;\n    }\n    \n    int totalWeeks = weeks + (days / 7);\n    int totalDays = days % 7;\n    \n    Period result = new Period(totalYears, totalMonths, totalWeeks, totalDays, hours, minutes, seconds, millis, type).normalizedStandard();\n    \n    if (type.isSupported(DurationFieldType.years())) {\n        result = result.withYears(totalYears);\n    }\n    \n    if (type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(totalMonths);\n    }\n    \n    if (type.isSupported(DurationFieldType.weeks())) {\n        result = result.withWeeks(totalWeeks);\n    }\n    \n    if (type.isSupported(DurationFieldType.days())) {\n        result = result.withDays(totalDays);\n    }\n    \n    if (type.isSupported(DurationFieldType.hours())) {\n        result = result.withHours(hours);\n    }\n    \n    if (type.isSupported(DurationFieldType.minutes())) {\n        result = result.withMinutes(minutes);\n    }\n    \n    if (type.isSupported(DurationFieldType.seconds())) {\n        result = result.withSeconds(seconds);\n    }\n    \n    if (type.isSupported(DurationFieldType.millis())) {\n        result = result.withMillis(millis);\n    }\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..88822038 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,70 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    \n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+    \n+    int totalYears = years + (months / 12);\n+    int totalMonths = months % 12;\n+        \n+    long totalMillis = millis\n+            + (seconds * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (minutes * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (hours * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (days * DateTimeConstants.MILLIS_PER_DAY);\n+            \n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+        totalYears += totalMonths / 12;\n+        totalMonths = totalMonths % 12;\n+    }\n+    \n+    int totalWeeks = weeks + (days / 7);\n+    int totalDays = days % 7;\n+    \n+    Period result = new Period(totalYears, totalMonths, totalWeeks, totalDays, hours, minutes, seconds, millis, type).normalizedStandard();\n+    \n+    if (type.isSupported(DurationFieldType.years())) {\n+        result = result.withYears(totalYears);\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.months())) {\n+        result = result.withMonths(totalMonths);\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        result = result.withWeeks(totalWeeks);\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.days())) {\n+        result = result.withDays(totalDays);\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.hours())) {\n+        result = result.withHours(hours);\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        result = result.withMinutes(minutes);\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        result = result.withSeconds(seconds);\n+    }\n+    \n+    if (type.isSupported(DurationFieldType.millis())) {\n+        result = result.withMillis(millis);\n+    }\n+    \n+    return result;\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}