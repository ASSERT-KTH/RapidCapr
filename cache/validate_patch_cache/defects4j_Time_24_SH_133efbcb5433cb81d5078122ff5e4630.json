{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n\n        // check that newMillis value is within valid range\n        DateTimeField field = savedFields[i].iField;\n        int value = field.get(newMillis);\n        if (value != savedFields[i].iValue) {\n            // The new value is different from the parsed value\n            // This could happen e.g. if the parsed value is too large/small for the field\n            // Attempt to repair by moving the excess/missing value to the next field\n            if (field.getType() == DurationFieldType.halfdays()) {\n                // Adjust the day field instead\n                DateTimeField dayField = savedFields[i-1].iField;\n                int dayValue = dayField.get(newMillis);\n                dayValue += (value - savedFields[i].iValue) * 12;\n                newMillis = savedFields[i-1].set(dayField.set(newMillis, dayValue), resetFields);\n            } else if (field.getType() == DurationFieldType.months() && savedFields[i].iValue > 12) {\n                // The parsed value is too large for a month. Expand year instead\n                DateTimeField yearField = DateTimeFieldType.year().getField(iChrono);\n                int year = yearField.get(newMillis);\n                int yearDelta = (savedFields[i].iValue - 1) / 12;\n                newMillis = savedFields[i].set(yearField.set(newMillis, year + yearDelta), resetFields);\n            } else {\n                // We don't know how to repair this. Throw exception\n                throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n            }\n\n            // Check that the field is still consistent with other fields\n            for (int j = 0; j < i; j++) {\n                DurationField f1 = savedFields[i].iField.getDurationField();\n                DurationField f2 = savedFields[j].iField.getDurationField();\n                // Only check fields of the same type\n                if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n                    continue;\n                }\n                int v1 = savedFields[i].iField.get(newMillis);\n                int v2 = savedFields[j].iField.get(newMillis);\n                if (v1 != v2) {\n                    throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i].iField.getName() +\n                            \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n                }\n            }\n        }\n\n        // Validate newMillis value\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c778d03b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,60 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+\n+        // check that newMillis value is within valid range\n+        DateTimeField field = savedFields[i].iField;\n+        int value = field.get(newMillis);\n+        if (value != savedFields[i].iValue) {\n+            // The new value is different from the parsed value\n+            // This could happen e.g. if the parsed value is too large/small for the field\n+            // Attempt to repair by moving the excess/missing value to the next field\n+            if (field.getType() == DurationFieldType.halfdays()) {\n+                // Adjust the day field instead\n+                DateTimeField dayField = savedFields[i-1].iField;\n+                int dayValue = dayField.get(newMillis);\n+                dayValue += (value - savedFields[i].iValue) * 12;\n+                newMillis = savedFields[i-1].set(dayField.set(newMillis, dayValue), resetFields);\n+            } else if (field.getType() == DurationFieldType.months() && savedFields[i].iValue > 12) {\n+                // The parsed value is too large for a month. Expand year instead\n+                DateTimeField yearField = DateTimeFieldType.year().getField(iChrono);\n+                int year = yearField.get(newMillis);\n+                int yearDelta = (savedFields[i].iValue - 1) / 12;\n+                newMillis = savedFields[i].set(yearField.set(newMillis, year + yearDelta), resetFields);\n+            } else {\n+                // We don't know how to repair this. Throw exception\n+                throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n+            }\n+\n+            // Check that the field is still consistent with other fields\n+            for (int j = 0; j < i; j++) {\n+                DurationField f1 = savedFields[i].iField.getDurationField();\n+                DurationField f2 = savedFields[j].iField.getDurationField();\n+                // Only check fields of the same type\n+                if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n+                    continue;\n+                }\n+                int v1 = savedFields[i].iField.get(newMillis);\n+                int v2 = savedFields[j].iField.get(newMillis);\n+                if (v1 != v2) {\n+                    throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i].iField.getName() +\n+                            \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+                }\n+            }\n+        }\n+\n+        // Validate newMillis value\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incomparable types: DateTimeFieldType and DurationFieldType",
    "test_result": "ERROR"
}