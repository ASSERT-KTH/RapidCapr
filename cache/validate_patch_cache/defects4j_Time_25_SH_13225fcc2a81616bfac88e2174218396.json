{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    int earlierOffset = Math.min(offsetLocal, offsetAdjusted);\n    int laterOffset = Math.max(offsetLocal, offsetAdjusted);\n    long nextTransitionTime = (offsetLocal < offsetAdjusted) ? nextTransition(instantAdjusted - earlierOffset) : previousTransition(instantAdjusted - earlierOffset);\n    if (nextTransitionTime == instantAdjusted - earlierOffset) {\n        \n        // In the middle of a transition, we should take the latest known offset and throw an exception\n        return laterOffset;\n    }\n\n    long nextLocal = (offsetLocal < offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    long nextAdjusted = (offsetLocal < offsetAdjusted) ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n\n    if ((instantAdjusted + earlierOffset) < nextTransition(instantAdjusted - earlierOffset)) {\n          earlierOffset = offsetAdjusted;\n          laterOffset = offsetLocal;\n    }\n\n    if (nextLocal == nextAdjusted) {\n        // There is no difference between nextLocal and nextAdjusted\n        return offsetAdjusted;\n    }\n\n    if (laterOffset == offsetAdjusted) {\n        if ((instantLocal + laterOffset) >= nextLocal) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    } else {\n        if ((instantLocal + earlierOffset) < nextAdjusted) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a81e36e9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,43 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    int earlierOffset = Math.min(offsetLocal, offsetAdjusted);\n+    int laterOffset = Math.max(offsetLocal, offsetAdjusted);\n+    long nextTransitionTime = (offsetLocal < offsetAdjusted) ? nextTransition(instantAdjusted - earlierOffset) : previousTransition(instantAdjusted - earlierOffset);\n+    if (nextTransitionTime == instantAdjusted - earlierOffset) {\n+        \n+        // In the middle of a transition, we should take the latest known offset and throw an exception\n+        return laterOffset;\n+    }\n+\n+    long nextLocal = (offsetLocal < offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    long nextAdjusted = (offsetLocal < offsetAdjusted) ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n+\n+    if ((instantAdjusted + earlierOffset) < nextTransition(instantAdjusted - earlierOffset)) {\n+          earlierOffset = offsetAdjusted;\n+          laterOffset = offsetLocal;\n+    }\n+\n+    if (nextLocal == nextAdjusted) {\n+        // There is no difference between nextLocal and nextAdjusted\n+        return offsetAdjusted;\n+    }\n+\n+    if (laterOffset == offsetAdjusted) {\n+        if ((instantLocal + laterOffset) >= nextLocal) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    } else {\n+        if ((instantLocal + earlierOffset) < nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}