{
    "patch": "            if (boundaries != null) {\n                for (int i = 0; i < init.length; i++) {\n                    if (Double.isInfinite(boundaries[0][i]) ||\n                        Double.isInfinite(boundaries[1][i])) {\n                        throw new MathUnsupportedOperationException();\n                    }\n                    if (Double.isNaN(boundaries[0][i]) ||\n                        Double.isNaN(boundaries[1][i])) {\n                        throw new MathUnsupportedOperationException();\n                    }\n                    if (init[i] < boundaries[0][i] ||\n                        init[i] > boundaries[1][i]) {\n                        throw new NumberIsTooLargeException(init[i], boundaries[0][i], boundaries[1][i], true);\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..c5322e305 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,22 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            if (boundaries != null) {\n+                for (int i = 0; i < init.length; i++) {\n+                    if (Double.isInfinite(boundaries[0][i]) ||\n+                        Double.isInfinite(boundaries[1][i])) {\n+                        throw new MathUnsupportedOperationException();\n+                    }\n+                    if (Double.isNaN(boundaries[0][i]) ||\n+                        Double.isNaN(boundaries[1][i])) {\n+                        throw new MathUnsupportedOperationException();\n+                    }\n+                    if (init[i] < boundaries[0][i] ||\n+                        init[i] > boundaries[1][i]) {\n+                        throw new NumberIsTooLargeException(init[i], boundaries[0][i], boundaries[1][i], true);\n+                    }\n+                }\n+            }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: no suitable constructor found for NumberIsTooLargeException(double,double,double,boolean)",
    "test_result": "ERROR"
}