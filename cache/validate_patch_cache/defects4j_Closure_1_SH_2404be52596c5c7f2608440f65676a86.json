{
    "patch": "    Node param = function.getSecondChild();\n    while (param != null) {\n      if (!param.isUnusedParameter()) {\n        break;\n      }\n      Node nextParam = param.getNext();\n      if (modifyCallSites) {\n        callSiteOptimizer.removeUnusedParameter(\n            fnScope, param, compiler);\n      }\n      param = nextParam;\n    }\n    if (argList.hasChildren()) {\n      Node lastArg;\n      for (lastArg = argList.getLastChild(); lastArg != null;\n           lastArg = lastArg.getPrevious()) {\n        if (!lastArg.isUnusedParameter()) {\n          break;\n        }\n        if (modifyCallSites) {\n          callSiteOptimizer.removeUnusedParameter(\n              fnScope, lastArg, compiler);\n        }\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3a24925d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node param = function.getSecondChild();\n+    while (param != null) {\n+      if (!param.isUnusedParameter()) {\n+        break;\n+      }\n+      Node nextParam = param.getNext();\n+      if (modifyCallSites) {\n+        callSiteOptimizer.removeUnusedParameter(\n+            fnScope, param, compiler);\n+      }\n+      param = nextParam;\n+    }\n+    if (argList.hasChildren()) {\n+      Node lastArg;\n+      for (lastArg = argList.getLastChild(); lastArg != null;\n+           lastArg = lastArg.getPrevious()) {\n+        if (!lastArg.isUnusedParameter()) {\n+          break;\n+        }\n+        if (modifyCallSites) {\n+          callSiteOptimizer.removeUnusedParameter(\n+              fnScope, lastArg, compiler);\n+        }\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}