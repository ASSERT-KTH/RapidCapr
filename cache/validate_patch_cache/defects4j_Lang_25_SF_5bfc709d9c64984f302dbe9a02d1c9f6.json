{
    "patch": "import java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\n\npublic class StringConversion {\n    \n    public static String toISO8859_1_ESCAPE(byte[] bytes) {\n        String isoString = new String(bytes, StandardCharsets.ISO_8859_1);\n        StringBuilder escapeString = new StringBuilder();\n        for (char c : isoString.toCharArray()) {\n            if (c <= 0xff) {\n                escapeString.append(String.format(\"\\\\x%02x\", (int) c));\n            } else {\n                escapeString.append(c);\n            }\n        }\n        return escapeString.toString();\n    }\n\n    public static byte[] fromISO8859_1_ESCAPE(String escapeString) {\n        byte[] bytes = new byte[escapeString.length() / 4];\n        int byteIndex = 0;\n        for (int i = 0; i < escapeString.length(); i += 4) {\n            String hexString = escapeString.substring(i + 2, i + 4);\n            int b = Integer.parseInt(hexString, 16);\n            bytes[byteIndex++] = (byte) b;\n        }\n        return bytes;\n    }\n\n    public static void main(String[] args) {\n        String originalString = \"Hello, world!\";\n        byte[] originalBytes = originalString.getBytes(StandardCharsets.ISO_8859_1);\n\n        String escapeString = toISO8859_1_ESCAPE(originalBytes);\n        System.out.println(escapeString);\n\n        byte[] escapedBytes = fromISO8859_1_ESCAPE(escapeString);\n        System.out.println(Arrays.equals(originalBytes, escapedBytes));\n        System.out.println(new String(escapedBytes, StandardCharsets.ISO_8859_1));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..94d415ce 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,48 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+public class StringConversion {\n+    \n+    public static String toISO8859_1_ESCAPE(byte[] bytes) {\n+        String isoString = new String(bytes, StandardCharsets.ISO_8859_1);\n+        StringBuilder escapeString = new StringBuilder();\n+        for (char c : isoString.toCharArray()) {\n+            if (c <= 0xff) {\n+                escapeString.append(String.format(\"\\\\x%02x\", (int) c));\n+            } else {\n+                escapeString.append(c);\n+            }\n+        }\n+        return escapeString.toString();\n+    }\n+\n+    public static byte[] fromISO8859_1_ESCAPE(String escapeString) {\n+        byte[] bytes = new byte[escapeString.length() / 4];\n+        int byteIndex = 0;\n+        for (int i = 0; i < escapeString.length(); i += 4) {\n+            String hexString = escapeString.substring(i + 2, i + 4);\n+            int b = Integer.parseInt(hexString, 16);\n+            bytes[byteIndex++] = (byte) b;\n+        }\n+        return bytes;\n+    }\n+\n+    public static void main(String[] args) {\n+        String originalString = \"Hello, world!\";\n+        byte[] originalBytes = originalString.getBytes(StandardCharsets.ISO_8859_1);\n+\n+        String escapeString = toISO8859_1_ESCAPE(originalBytes);\n+        System.out.println(escapeString);\n+\n+        byte[] escapedBytes = fromISO8859_1_ESCAPE(escapeString);\n+        System.out.println(Arrays.equals(originalBytes, escapedBytes));\n+        System.out.println(new String(escapedBytes, StandardCharsets.ISO_8859_1));\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}