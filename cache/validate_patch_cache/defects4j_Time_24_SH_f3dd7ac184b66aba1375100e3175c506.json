{
    "patch": "            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                int year = iDefaultYear;\n                // Observe leap year when month or day is parsed first\n                int month = 1;\n                int day = 1; // TODO: Make it a leap day if the year is a leap year\n                saveField(DateTimeFieldType.year(), year);\n                saveField(DateTimeFieldType.monthOfYear(), month);\n                saveField(DateTimeFieldType.dayOfMonth(), day);\n                return computeMillis(resetFields, text);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..45d66631 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                int year = iDefaultYear;\n+                // Observe leap year when month or day is parsed first\n+                int month = 1;\n+                int day = 1; // TODO: Make it a leap day if the year is a leap year\n+                saveField(DateTimeFieldType.year(), year);\n+                saveField(DateTimeFieldType.monthOfYear(), month);\n+                saveField(DateTimeFieldType.dayOfMonth(), day);\n+                return computeMillis(resetFields, text);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}