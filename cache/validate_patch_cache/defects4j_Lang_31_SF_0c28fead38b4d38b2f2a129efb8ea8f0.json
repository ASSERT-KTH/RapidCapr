{
    "patch": "public static boolean containsAny(String str, char[] chars) {\n    if (str == null || chars == null) {\n        return false;\n    }\n    int strLen = str.length();\n    int charsLen = chars.length;\n    if (strLen == 0 || charsLen == 0) {\n        return false;\n    }\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        for (int j = 0; j < charsLen; j++) {\n            if (chars[j] == ch) {\n                return true;\n            }\n        }\n        if (Character.isHighSurrogate(ch) && i < strLen - 1) {\n            i++;\n            char ch2 = str.charAt(i);\n            if (Character.isLowSurrogate(ch2)) {\n                int codePoint = Character.toCodePoint(ch, ch2);\n                for (int j = 0; j < charsLen; j++) {\n                    if (Character.isSupplementaryCodePoint(codePoint)\n                            && chars[j] == Character.highSurrogate(codePoint)) {\n                        if (j == charsLen - 1) {\n                            return false;\n                        }\n                        if (chars[j + 1] == Character.lowSurrogate(codePoint)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..1d999b66 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,43 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] chars) {\n+    if (str == null || chars == null) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int charsLen = chars.length;\n+    if (strLen == 0 || charsLen == 0) {\n+        return false;\n+    }\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        for (int j = 0; j < charsLen; j++) {\n+            if (chars[j] == ch) {\n+                return true;\n+            }\n+        }\n+        if (Character.isHighSurrogate(ch) && i < strLen - 1) {\n+            i++;\n+            char ch2 = str.charAt(i);\n+            if (Character.isLowSurrogate(ch2)) {\n+                int codePoint = Character.toCodePoint(ch, ch2);\n+                for (int j = 0; j < charsLen; j++) {\n+                    if (Character.isSupplementaryCodePoint(codePoint)\n+                            && chars[j] == Character.highSurrogate(codePoint)) {\n+                        if (j == charsLen - 1) {\n+                            return false;\n+                        }\n+                        if (chars[j + 1] == Character.lowSurrogate(codePoint)) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}