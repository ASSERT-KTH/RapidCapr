{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    int offset = zone.getOffset(instantMillis);\n    long instantLocal = instantMillis + offset;\n\n    // Set pivot year before parsing\n    int defaultYear = chrono.year().get(instantLocal);\n    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n\n    // Set up parser bucket\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, pivotYear, defaultYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (bucket.getOffsetInteger() != null) {\n        // Adjust chronology to parsed offset, and set zone to null\n        offset = bucket.getOffsetInteger().intValue();\n        zone = DateTimeZone.forOffsetMillis(offset);\n        chrono = chrono.withZone(zone);\n        instant.setChronology(chrono);\n        instant.setZone(null);\n    } else if (bucket.getZone() != null) {\n        // Set chronology to parsed zone, and set zone to null\n        Chronology parsedChrono = selectChronology(chrono).withZone(bucket.getZone());\n        instant.setChronology(parsedChrono);\n        instant.setZone(null);\n    } else {\n        // Set chronology and zone to default\n        instant.setChronology(selectChronology(chrono));\n        instant.setZone(selectChronology(chrono).getZone());\n    }\n\n    instant.setMillis(bucket.computeMillis(true, text));\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..aaf32394 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,50 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n     }\n \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    int offset = zone.getOffset(instantMillis);\n+    long instantLocal = instantMillis + offset;\n+\n+    // Set pivot year before parsing\n+    int defaultYear = chrono.year().get(instantLocal);\n+    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n+\n+    // Set up parser bucket\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantLocal, chrono, iLocale, pivotYear, defaultYear);\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (bucket.getOffsetInteger() != null) {\n+        // Adjust chronology to parsed offset, and set zone to null\n+        offset = bucket.getOffsetInteger().intValue();\n+        zone = DateTimeZone.forOffsetMillis(offset);\n+        chrono = chrono.withZone(zone);\n+        instant.setChronology(chrono);\n+        instant.setZone(null);\n+    } else if (bucket.getZone() != null) {\n+        // Set chronology to parsed zone, and set zone to null\n+        Chronology parsedChrono = selectChronology(chrono).withZone(bucket.getZone());\n+        instant.setChronology(parsedChrono);\n+        instant.setZone(null);\n+    } else {\n+        // Set chronology and zone to default\n+        instant.setChronology(selectChronology(chrono));\n+        instant.setZone(selectChronology(chrono).getZone());\n+    }\n+\n+    instant.setMillis(bucket.computeMillis(true, text));\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2004-04-30T16:00:00.000+01:00>",
    "test_result": "FAIL"
}