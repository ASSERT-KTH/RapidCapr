{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      double v1x = v1.getX();\n      double v1y = v1.getY();\n      double v1z = v1.getZ();\n      double v2x = v2.getX();\n      double v2y = v2.getY();\n      double v2z = v2.getZ();\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double maxV = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n      double maxU = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n      double normV = Math.sqrt(v1x * v1x + v1y * v1y + v1z * v1z) * maxU;\n      double normU = Math.sqrt(v2x * v2x + v2y * v2y + v2z * v2z) * maxV;\n      double krossVVU = v1x * v2x + v1y * v2y + v1z * v2z;\n      double rho = 0.125 * krossVVU * Math.sqrt(normV / normU);\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      double v3x = v1x - rho * v2x;\n      double v3y = v1y - rho * v2y;\n      double v3z = v1z - rho * v2z;\n      return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..cbbfeee4a 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,9 +456,21 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      double v1x = v1.getX();\n+      double v1y = v1.getY();\n+      double v1z = v1.getZ();\n+      double v2x = v2.getX();\n+      double v2y = v2.getY();\n+      double v2z = v2.getZ();\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      double maxV = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n+      double maxU = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n+      double normV = Math.sqrt(v1x * v1x + v1y * v1y + v1z * v1z) * maxU;\n+      double normU = Math.sqrt(v2x * v2x + v2y * v2y + v2z * v2z) * maxV;\n+      double krossVVU = v1x * v2x + v1y * v2y + v1z * v2z;\n+      double rho = 0.125 * krossVVU * Math.sqrt(normV / normU);\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -466,11 +478,11 @@ public class Vector3D implements Serializable {\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      double v3x = v1x - rho * v2x;\n+      double v3y = v1y - rho * v2y;\n+      double v3z = v1z - rho * v2z;\n+      return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<0.0>",
    "test_result": "FAIL"
}