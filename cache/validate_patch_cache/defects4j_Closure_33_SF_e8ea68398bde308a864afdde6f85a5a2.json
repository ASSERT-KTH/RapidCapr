{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  if (constraintObj != null && !constraintObj.isNominalConstructor()) {\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else if (constraintObj.isFunctionType()) {\n      FunctionType funcType = constraintObj.getFunTypeIfSingletonObj();\n      if (funcType != null) {\n        // Match the parameter and return types of the function.\n        matchConstraint(funcType.getTypeOfThis());\n        for (Node formal : funcType.getParameters()) {\n          String paramName = formal.getString();\n          JSType paramType = funcType.getTypeOfParameter(paramName);\n          matchConstraint(paramType);\n          if (!isDeclared(FunctionType.PARAM_LIST + paramName)) {\n            defineInferredProperty(FunctionType.PARAM_LIST + paramName, paramType, null);\n          }\n        }\n        JSType returnType = funcType.getReturnType();\n        matchConstraint(returnType);\n        if (!isDeclared(FunctionType.RETURN_TYPE_FIELD)) {\n          defineInferredProperty(FunctionType.RETURN_TYPE_FIELD, returnType, null);\n        }\n      }\n    } else if (constraintObj.isUnionType()) {\n      for (JSType alt : constraintObj.getAlternatesWithoutStructs()) {\n        matchConstraint(alt);\n      }\n      if (hasProperty(JSType.UNDEFINED_TYPE)) {\n        copyPropertyToDeclaredProps(JSType.UNDEFINED_TYPE, null, false);\n      }\n      if (hasProperty(JSType.NULL_TYPE)) {\n        copyPropertyToDeclaredProps(JSType.NULL_TYPE, null, false);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..7df88804 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,18 +552,8 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+public void matchConstraint(ObjectType constraintObj) {\n+  if (constraintObj != null && !constraintObj.isNominalConstructor()) {\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n@@ -576,6 +566,36 @@ class PrototypeObjectType extends ObjectType {\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n+    } else if (constraintObj.isFunctionType()) {\n+      FunctionType funcType = constraintObj.getFunTypeIfSingletonObj();\n+      if (funcType != null) {\n+        // Match the parameter and return types of the function.\n+        matchConstraint(funcType.getTypeOfThis());\n+        for (Node formal : funcType.getParameters()) {\n+          String paramName = formal.getString();\n+          JSType paramType = funcType.getTypeOfParameter(paramName);\n+          matchConstraint(paramType);\n+          if (!isDeclared(FunctionType.PARAM_LIST + paramName)) {\n+            defineInferredProperty(FunctionType.PARAM_LIST + paramName, paramType, null);\n+          }\n+        }\n+        JSType returnType = funcType.getReturnType();\n+        matchConstraint(returnType);\n+        if (!isDeclared(FunctionType.RETURN_TYPE_FIELD)) {\n+          defineInferredProperty(FunctionType.RETURN_TYPE_FIELD, returnType, null);\n+        }\n+      }\n+    } else if (constraintObj.isUnionType()) {\n+      for (JSType alt : constraintObj.getAlternatesWithoutStructs()) {\n+        matchConstraint(alt);\n+      }\n+      if (hasProperty(JSType.UNDEFINED_TYPE)) {\n+        copyPropertyToDeclaredProps(JSType.UNDEFINED_TYPE, null, false);\n+      }\n+      if (hasProperty(JSType.NULL_TYPE)) {\n+        copyPropertyToDeclaredProps(JSType.NULL_TYPE, null, false);\n+      }\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}