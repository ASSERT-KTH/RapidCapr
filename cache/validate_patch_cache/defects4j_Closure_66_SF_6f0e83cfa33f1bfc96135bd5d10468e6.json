{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Integer>>(){}.getType();\n    Map<String, Integer> map = gson.fromJson(json, type);\n    int sum = 0;\n    for (int value : map.values()) {\n        sum += value;\n    }\n    return (double) sum / getValueFromKey(map, \"total\") * 100;\n}\n\nprivate static int getValueFromKey(Map<String, Integer> map, String key) {\n    if (map.containsKey(key)) {\n        return map.get(key);\n    } else {\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b789e085 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Integer>>(){}.getType();\n+    Map<String, Integer> map = gson.fromJson(json, type);\n+    int sum = 0;\n+    for (int value : map.values()) {\n+        sum += value;\n+    }\n+    return (double) sum / getValueFromKey(map, \"total\") * 100;\n+}\n+\n+private static int getValueFromKey(Map<String, Integer> map, String key) {\n+    if (map.containsKey(key)) {\n+        return map.get(key);\n+    } else {\n+        return 0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}