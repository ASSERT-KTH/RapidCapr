{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  List<Node> arguments = call.children().subList(1);\n  List<Node> parameters = functionType.getParameters();\n\n  int numArgs = arguments.size(), numParams = parameters.size();\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  if (numParams <= numArgs) {\n    for (int i = 0; i < numParams; i++) {\n      Node parameter = parameters.get(i);\n      Node argument = arguments.get(i);\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, i + 1);\n    }\n    if (maxArgs != numParams) {\n      if (numArgs > numParams) {\n        for (int i = numParams; i < numArgs; i++) {\n          Node argument = arguments.get(i);\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), null, call, i + 1);\n        }\n      }\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          getNodeSrcFileName(call), String.valueOf(numArgs),\n          String.valueOf(minArgs),\n          maxArgs != Integer.MAX_VALUE ? \" and no more than \"\n              + maxArgs + \" argument(s)\" : \"\");\n    }\n  } else {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        getNodeSrcFileName(call), String.valueOf(numArgs),\n        String.valueOf(minArgs), maxArgs != Integer.MAX_VALUE ? \" and no more than \"\n            + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..ab10e74a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,43 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  List<Node> arguments = call.children().subList(1);\n+  List<Node> parameters = functionType.getParameters();\n+\n+  int numArgs = arguments.size(), numParams = parameters.size();\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  if (numParams <= numArgs) {\n+    for (int i = 0; i < numParams; i++) {\n+      Node parameter = parameters.get(i);\n+      Node argument = arguments.get(i);\n       validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+          getJSType(argument), getJSType(parameter), call, i + 1);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if (maxArgs != numParams) {\n+      if (numArgs > numParams) {\n+        for (int i = numParams; i < numArgs; i++) {\n+          Node argument = arguments.get(i);\n+          validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), null, call, i + 1);\n+        }\n+      }\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          getNodeSrcFileName(call), String.valueOf(numArgs),\n+          String.valueOf(minArgs),\n+          maxArgs != Integer.MAX_VALUE ? \" and no more than \"\n+              + maxArgs + \" argument(s)\" : \"\");\n     }\n+  } else {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        getNodeSrcFileName(call), String.valueOf(numArgs),\n+        String.valueOf(minArgs), maxArgs != Integer.MAX_VALUE ? \" and no more than \"\n+            + maxArgs + \" argument(s)\" : \"\");\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}