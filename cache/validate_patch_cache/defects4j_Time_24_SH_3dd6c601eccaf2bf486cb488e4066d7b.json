{
    "patch": "try {\n    long previousMillis = millis;\n    boolean isYearField = false;\n    \n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        \n        if (newMillis != millis && !isYearField) {\n            DateTimeField currentField = savedFields[i].iField;\n            isYearField = currentField.getType() == DateTimeFieldType.year();\n        }\n        \n        if (newMillis != millis && isYearField) {\n            // Check if the default year should be incremented or decremented\n            int parsedYear = savedFields[i].iField.get(newMillis);\n            int defaultYear = iDefaultYear;\n\n            if (parsedYear < iChrono.year().getMinimumValue()) {\n                defaultYear -= 100;\n            } else if (parsedYear > iChrono.year().getMaximumValue()) {\n                defaultYear += 100;\n            }\n\n            // Save the field with the modified default year and recompute the millis\n            saveField(DateTimeFieldType.year(), defaultYear);\n            return computeMillis(resetFields, text);\n        } else if (newMillis != millis && !isYearField) {\n            // If the problematic field is not a year field, throw an exception\n            throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n        }\n\n        previousMillis = millis;\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n} ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..aa64714f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,46 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    long previousMillis = millis;\n+    boolean isYearField = false;\n+    \n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        \n+        if (newMillis != millis && !isYearField) {\n+            DateTimeField currentField = savedFields[i].iField;\n+            isYearField = currentField.getType() == DateTimeFieldType.year();\n+        }\n+        \n+        if (newMillis != millis && isYearField) {\n+            // Check if the default year should be incremented or decremented\n+            int parsedYear = savedFields[i].iField.get(newMillis);\n+            int defaultYear = iDefaultYear;\n+\n+            if (parsedYear < iChrono.year().getMinimumValue()) {\n+                defaultYear -= 100;\n+            } else if (parsedYear > iChrono.year().getMaximumValue()) {\n+                defaultYear += 100;\n+            }\n+\n+            // Save the field with the modified default year and recompute the millis\n+            saveField(DateTimeFieldType.year(), defaultYear);\n+            return computeMillis(resetFields, text);\n+        } else if (newMillis != millis && !isYearField) {\n+            // If the problematic field is not a year field, throw an exception\n+            throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n+        }\n+\n+        previousMillis = millis;\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+} \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}