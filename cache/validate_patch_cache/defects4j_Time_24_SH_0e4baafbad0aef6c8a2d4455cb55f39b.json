{
    "patch": "                if (i == 0 && savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                    DurationField weekyearDuration = savedFields[i].iField.getDurationField();\n                    if (compareReverse(weekyearDuration, DurationFieldType.years().getField(iChrono)) != 0) {\n                        int weeks = ISOWeek.weeksIn(ISOWeek.yearOfWeekyear().get(millis));\n                        LocalDate localDate = new LocalDate(millis, this.getChronology());\n                        saveField(DateTimeFieldType.weekyear(), localDate.getWeekyear());\n                        saveField(DateTimeFieldType.weekOfWeekyear(), Math.min(weeks, localDate.getWeekOfWeekyear()));\n                        if (weeks <= localDate.getWeekOfWeekyear()) {\n                            return computeMillis(resetFields, text);\n                        } else {\n                            millis = iChrono.year().add(millis, 1);\n                            return computeMillis(resetFields, text);\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5f85eb61 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (i == 0 && savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n+                    DurationField weekyearDuration = savedFields[i].iField.getDurationField();\n+                    if (compareReverse(weekyearDuration, DurationFieldType.years().getField(iChrono)) != 0) {\n+                        int weeks = ISOWeek.weeksIn(ISOWeek.yearOfWeekyear().get(millis));\n+                        LocalDate localDate = new LocalDate(millis, this.getChronology());\n+                        saveField(DateTimeFieldType.weekyear(), localDate.getWeekyear());\n+                        saveField(DateTimeFieldType.weekOfWeekyear(), Math.min(weeks, localDate.getWeekOfWeekyear()));\n+                        if (weeks <= localDate.getWeekOfWeekyear()) {\n+                            return computeMillis(resetFields, text);\n+                        } else {\n+                            millis = iChrono.year().add(millis, 1);\n+                            return computeMillis(resetFields, text);\n+                        }\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}