{
    "patch": "      String functionName = functionType.getDisplayName();\n      JSType thisType = functionType.getTypeOfThis();\n      boolean calledWithThis = false;\n      if (thisType != null && thisType.isNoResolvedType()) {\n        calledWithThis = true;\n      } else {\n        Node parent = n.getParent();\n        while (!parent.isScript() && !parent.isBlock() && !parent.isEmpty()) {\n          if (parent.isGetProp() || parent.isGetElem()) {\n            calledWithThis = true;\n            break;\n          }\n          parent = parent.getParent();\n        }\n      }\n      if (calledWithThis && thisType == null) {\n        report(t, n, FUNCTION_WITHOUT_TYPE_ANNOTATION_WARNING,\n            functionName, \"this\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..b3c5c8a4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      String functionName = functionType.getDisplayName();\n+      JSType thisType = functionType.getTypeOfThis();\n+      boolean calledWithThis = false;\n+      if (thisType != null && thisType.isNoResolvedType()) {\n+        calledWithThis = true;\n+      } else {\n+        Node parent = n.getParent();\n+        while (!parent.isScript() && !parent.isBlock() && !parent.isEmpty()) {\n+          if (parent.isGetProp() || parent.isGetElem()) {\n+            calledWithThis = true;\n+            break;\n+          }\n+          parent = parent.getParent();\n+        }\n+      }\n+      if (calledWithThis && thisType == null) {\n+        report(t, n, FUNCTION_WITHOUT_TYPE_ANNOTATION_WARNING,\n+            functionName, \"this\");\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}