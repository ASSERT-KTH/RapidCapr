{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n    final int dimension = m.getRowDimension();\n    RealMatrix sqrt = MatrixUtils.createRealMatrix(dimension, dimension);\n    for ( int i = 0; i < dimension; i++) {\n        // Check if eigenvalue is non-negative.\n        if (realEigenvalues[i] < 0)\n            throw new IllegalArgumentException(\"Matrix not positive definite.\");\n        double root = Math.sqrt(realEigenvalues[i]);\n        for ( int j = 0; j < dimension; j++ ) {\n            sqrt.setEntry(j, i, eigenvectors.getEntry(j, i) * root);\n        }\n    }\n    return eigenvectors.multiply(sqrt).multiply(eigenvectors.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3fb135bb7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+    final int dimension = m.getRowDimension();\n+    RealMatrix sqrt = MatrixUtils.createRealMatrix(dimension, dimension);\n+    for ( int i = 0; i < dimension; i++) {\n+        // Check if eigenvalue is non-negative.\n+        if (realEigenvalues[i] < 0)\n+            throw new IllegalArgumentException(\"Matrix not positive definite.\");\n+        double root = Math.sqrt(realEigenvalues[i]);\n+        for ( int j = 0; j < dimension; j++ ) {\n+            sqrt.setEntry(j, i, eigenvectors.getEntry(j, i) * root);\n+        }\n     }\n+    return eigenvectors.multiply(sqrt).multiply(eigenvectors.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}