{
    "patch": "        final int initialOffset = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - initialOffset;\n        final int adjustedOffset = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (initialOffset != adjustedOffset) {\n            // check if we're in a gap or an overlap\n            long prevTransition = previousTransition(instantLocal);\n            long nextTransition = nextTransition(instantLocal);\n            if (prevTransition == nextTransition) {\n                // there is no transition at this local time, so we are in a gap\n                int gapOffset = getOffset(nextTransition);\n                if (initialOffset < gapOffset) {\n                    // we are in the gap, use the earlier offset\n                    return initialOffset;\n                } else {\n                    // we are in the \"late\" part of the time zone, use the gap offset\n                    return gapOffset;\n                }\n            } else {\n                // we are in an overlap\n                int prevOffset = getOffset(prevTransition);\n                int nextOffset = getOffset(nextTransition);\n                if (prevOffset == nextOffset) {\n                    // the overlap is only one hour\n                    if (initialOffset < prevOffset) {\n                        // we are in the first (earlier) offset, use it\n                        return prevOffset;\n                    } else {\n                        // we are in the second (later) offset, use it\n                        return nextOffset;\n                    }\n                } else if (prevOffset < nextOffset) {\n                    // the overlap is from a later offset to an earlier offset\n                    if (initialOffset >= nextOffset) {\n                        // we are in the pre-overlap offset, use it\n                        return nextOffset;\n                    } else if (initialOffset < prevOffset) {\n                        // we are in the post-overlap offset, use it\n                        return prevOffset;\n                    } else {\n                        // we are in the overlap, use the \"early\" offset\n                        long overlapMidpoint = prevTransition + (nextTransition - prevTransition) / 2;\n                        if (instantLocal >= overlapMidpoint) {\n                            return nextOffset;\n                        } else {\n                            return prevOffset;\n                        }\n                    }\n                } else {\n                    // the overlap is from an earlier offset to a later offset\n                    if (initialOffset < nextOffset) {\n                        // we are in the post-overlap offset, use it\n                        return nextOffset;\n                    } else if (initialOffset >= prevOffset) {\n                        // we are in the pre-overlap offset, use it\n                        return prevOffset;\n                    } else {\n                        // we are in the overlap, use the \"later\" offset\n                        long overlapMidpoint = prevTransition + (nextTransition - prevTransition) / 2;\n                        if (instantLocal >= overlapMidpoint) {\n                            return prevOffset;\n                        } else {\n                            return nextOffset;\n                        }\n                    }\n                }\n            }\n        }\n        return adjustedOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..69a4fe7e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,76 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n+        final int initialOffset = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n+        final long instantAdjusted = instantLocal - initialOffset;\n+        final int adjustedOffset = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        if (initialOffset != adjustedOffset) {\n+            // check if we're in a gap or an overlap\n+            long prevTransition = previousTransition(instantLocal);\n+            long nextTransition = nextTransition(instantLocal);\n+            if (prevTransition == nextTransition) {\n+                // there is no transition at this local time, so we are in a gap\n+                int gapOffset = getOffset(nextTransition);\n+                if (initialOffset < gapOffset) {\n+                    // we are in the gap, use the earlier offset\n+                    return initialOffset;\n+                } else {\n+                    // we are in the \"late\" part of the time zone, use the gap offset\n+                    return gapOffset;\n+                }\n+            } else {\n+                // we are in an overlap\n+                int prevOffset = getOffset(prevTransition);\n+                int nextOffset = getOffset(nextTransition);\n+                if (prevOffset == nextOffset) {\n+                    // the overlap is only one hour\n+                    if (initialOffset < prevOffset) {\n+                        // we are in the first (earlier) offset, use it\n+                        return prevOffset;\n+                    } else {\n+                        // we are in the second (later) offset, use it\n+                        return nextOffset;\n+                    }\n+                } else if (prevOffset < nextOffset) {\n+                    // the overlap is from a later offset to an earlier offset\n+                    if (initialOffset >= nextOffset) {\n+                        // we are in the pre-overlap offset, use it\n+                        return nextOffset;\n+                    } else if (initialOffset < prevOffset) {\n+                        // we are in the post-overlap offset, use it\n+                        return prevOffset;\n+                    } else {\n+                        // we are in the overlap, use the \"early\" offset\n+                        long overlapMidpoint = prevTransition + (nextTransition - prevTransition) / 2;\n+                        if (instantLocal >= overlapMidpoint) {\n+                            return nextOffset;\n+                        } else {\n+                            return prevOffset;\n+                        }\n+                    }\n+                } else {\n+                    // the overlap is from an earlier offset to a later offset\n+                    if (initialOffset < nextOffset) {\n+                        // we are in the post-overlap offset, use it\n+                        return nextOffset;\n+                    } else if (initialOffset >= prevOffset) {\n+                        // we are in the pre-overlap offset, use it\n+                        return prevOffset;\n+                    } else {\n+                        // we are in the overlap, use the \"later\" offset\n+                        long overlapMidpoint = prevTransition + (nextTransition - prevTransition) / 2;\n+                        if (instantLocal >= overlapMidpoint) {\n+                            return prevOffset;\n+                        } else {\n+                            return nextOffset;\n+                        }\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n-    }\n+        return adjustedOffset;\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}