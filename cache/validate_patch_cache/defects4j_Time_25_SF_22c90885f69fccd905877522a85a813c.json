{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n\n    // if the offset at instantLocal is not a \"simple\" offset, find the nearest transition\n    if (isTransition(initialOffset)) {\n        long transition = nextTransition(instantLocal);\n        int offsetAtTransition = getOffset(transition);\n\n        // if we jumped over a gap, or into an overlap, handle that\n        if (isGap(initialOffset, offsetAtTransition)) {\n            // we jumped over a gap, move back inside\n            return getOffset(transition - 1);\n        } else if (isOverlap(initialOffset, offsetAtTransition)) {\n            // we jumped into an overlap, move forward\n            return getOffset(transition + 1);\n        }\n    }\n\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - initialOffset;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    // if the adjusted offset is not a \"simple\" offset, find the nearest transition\n    if (isTransition(offsetAdjusted)) {\n        long transition = nextTransition(instantLocal);\n        int offsetAtTransition = getOffset(transition);\n\n        // if we jumped over a gap, or into an overlap, handle that\n        if (isGap(initialOffset, offsetAtTransition)) {\n            // we jumped over a gap, move back inside\n            return getOffset(transition - 1);\n        } else if (isOverlap(initialOffset, offsetAtTransition)) {\n            // we jumped into an overlap, choose the later offset to avoid moving into the gap\n            return offsetAtTransition;\n        }\n    }\n\n    // if we made it here, both the initial and adjusted offsets were \"simple\" offsets\n    // just return the adjusted offset\n    return offsetAdjusted;\n}\n\n/**\n * Determines if the given offset represents a transition.\n */\nprivate boolean isTransition(int offset) {\n    return (getNextOffset(Long.MIN_VALUE) != offset);\n}\n\n/**\n * Determines if the transition between the two offsets is a gap (skipped over) or overlap (double counted).\n */\nprivate boolean isGap(int offset1, int offset2) {\n    return (offset1 > offset2);\n}\n\nprivate boolean isOverlap(int offset1, int offset2) {\n    return (offset1 < offset2);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3bd4559d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,67 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // if the offset at instantLocal is not a \"simple\" offset, find the nearest transition\n+    if (isTransition(initialOffset)) {\n+        long transition = nextTransition(instantLocal);\n+        int offsetAtTransition = getOffset(transition);\n+\n+        // if we jumped over a gap, or into an overlap, handle that\n+        if (isGap(initialOffset, offsetAtTransition)) {\n+            // we jumped over a gap, move back inside\n+            return getOffset(transition - 1);\n+        } else if (isOverlap(initialOffset, offsetAtTransition)) {\n+            // we jumped into an overlap, move forward\n+            return getOffset(transition + 1);\n         }\n-        return offsetAdjusted;\n     }\n \n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - initialOffset;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // if the adjusted offset is not a \"simple\" offset, find the nearest transition\n+    if (isTransition(offsetAdjusted)) {\n+        long transition = nextTransition(instantLocal);\n+        int offsetAtTransition = getOffset(transition);\n+\n+        // if we jumped over a gap, or into an overlap, handle that\n+        if (isGap(initialOffset, offsetAtTransition)) {\n+            // we jumped over a gap, move back inside\n+            return getOffset(transition - 1);\n+        } else if (isOverlap(initialOffset, offsetAtTransition)) {\n+            // we jumped into an overlap, choose the later offset to avoid moving into the gap\n+            return offsetAtTransition;\n+        }\n+    }\n+\n+    // if we made it here, both the initial and adjusted offsets were \"simple\" offsets\n+    // just return the adjusted offset\n+    return offsetAdjusted;\n+}\n+\n+/**\n+ * Determines if the given offset represents a transition.\n+ */\n+private boolean isTransition(int offset) {\n+    return (getNextOffset(Long.MIN_VALUE) != offset);\n+}\n+\n+/**\n+ * Determines if the transition between the two offsets is a gap (skipped over) or overlap (double counted).\n+ */\n+private boolean isGap(int offset1, int offset2) {\n+    return (offset1 > offset2);\n+}\n+\n+private boolean isOverlap(int offset1, int offset2) {\n+    return (offset1 < offset2);\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}