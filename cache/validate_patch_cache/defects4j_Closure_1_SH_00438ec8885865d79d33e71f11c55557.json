{
    "patch": "      List<Node> references = Lists.newArrayList(referenced);\n      NodeUtil.reverseChildren(argList);\n      boolean foundUsed = false;\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        Var var = fnScope.getVar(arg.getString());\n        checkState(var != null, \"Variable not found for %s\", arg);\n        if (references.contains(var)) {\n          foundUsed = true;\n        } else {\n          if (foundUsed) {\n            // If there are unreferenced arguments after used arguments,\n            // we don't want to remove the referenced arguments.\n            break;\n          } else {\n            arg.detachFromParent();\n            compiler.reportCodeChange();\n          }\n        }\n      }\n      NodeUtil.reverseChildren(argList);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..75a493de 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      List<Node> references = Lists.newArrayList(referenced);\n+      NodeUtil.reverseChildren(argList);\n+      boolean foundUsed = false;\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        checkState(var != null, \"Variable not found for %s\", arg);\n+        if (references.contains(var)) {\n+          foundUsed = true;\n+        } else {\n+          if (foundUsed) {\n+            // If there are unreferenced arguments after used arguments,\n+            // we don't want to remove the referenced arguments.\n+            break;\n+          } else {\n+            arg.detachFromParent();\n+            compiler.reportCodeChange();\n+          }\n+        }\n+      }\n+      NodeUtil.reverseChildren(argList);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}