{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos < 0) {\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            return newPos;\n        }\n        \n        int parsedYear = bucket.year;\n        int parsedMonthOfYear = bucket.monthOfYear;\n        int parsedDayOfMonth = bucket.dayOfMonth;\n        int parsedHourOfDay = bucket.hourOfDay;\n        int parsedMinuteOfHour = bucket.minuteOfHour;\n        int parsedSecondOfMinute = bucket.secondOfMinute;\n        int parsedMillisOfSecond = bucket.millisOfSecond;\n\n        if (parsedYear <= 0 && bucket.yearName != null) {\n            parsedYear = defaultYear;\n            parsedDayOfMonth = bucket.year.getDayOfMonth(Year.of(defaultYear));\n            parsedMonthOfYear = bucket.monthOfYear;\n            if (!bucket.year.isLeap() && parsedMonthOfYear == 2 && parsedDayOfMonth > 28) {\n                parsedDayOfMonth = 28;\n            }\n        }\n        if (parsedMonthOfYear <= 0 && bucket.monthOfYearText != null) {\n            parsedMonthOfYear = 1;\n        }\n        if (parsedDayOfMonth <= 0 && bucket.dayOfWeek != null) {\n            int dow = bucket.dayOfWeek.intValue();\n            int offset = (dow - bucket.localDate.get(DateTimeFieldType.dayOfWeek())) % 7;\n            if (offset == 0) {\n                offset += 7;\n            }\n            parsedDayOfMonth = bucket.localDate.plusDays(offset).getDayOfMonth();\n        }\n\n        long millis = chrono.getDateTimeMillis(\n            parsedYear, parsedMonthOfYear, parsedDayOfMonth,\n            parsedHourOfDay, parsedMinuteOfHour, parsedSecondOfMinute, parsedMillisOfSecond);\n        instant.setMillis(millis);\n\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..63ebad77 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,17 +702,66 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        if (newPos < 0) {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            return newPos;\n+        }\n+        \n+        int parsedYear = bucket.year;\n+        int parsedMonthOfYear = bucket.monthOfYear;\n+        int parsedDayOfMonth = bucket.dayOfMonth;\n+        int parsedHourOfDay = bucket.hourOfDay;\n+        int parsedMinuteOfHour = bucket.minuteOfHour;\n+        int parsedSecondOfMinute = bucket.secondOfMinute;\n+        int parsedMillisOfSecond = bucket.millisOfSecond;\n+\n+        if (parsedYear <= 0 && bucket.yearName != null) {\n+            parsedYear = defaultYear;\n+            parsedDayOfMonth = bucket.year.getDayOfMonth(Year.of(defaultYear));\n+            parsedMonthOfYear = bucket.monthOfYear;\n+            if (!bucket.year.isLeap() && parsedMonthOfYear == 2 && parsedDayOfMonth > 28) {\n+                parsedDayOfMonth = 28;\n+            }\n+        }\n+        if (parsedMonthOfYear <= 0 && bucket.monthOfYearText != null) {\n+            parsedMonthOfYear = 1;\n+        }\n+        if (parsedDayOfMonth <= 0 && bucket.dayOfWeek != null) {\n+            int dow = bucket.dayOfWeek.intValue();\n+            int offset = (dow - bucket.localDate.get(DateTimeFieldType.dayOfWeek())) % 7;\n+            if (offset == 0) {\n+                offset += 7;\n+            }\n+            parsedDayOfMonth = bucket.localDate.plusDays(offset).getDayOfMonth();\n+        }\n+\n+        long millis = chrono.getDateTimeMillis(\n+            parsedYear, parsedMonthOfYear, parsedDayOfMonth,\n+            parsedHourOfDay, parsedMinuteOfHour, parsedSecondOfMinute, parsedMillisOfSecond);\n+        instant.setMillis(millis);\n+\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n@@ -724,6 +773,7 @@ public class DateTimeFormatter {\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n+\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}