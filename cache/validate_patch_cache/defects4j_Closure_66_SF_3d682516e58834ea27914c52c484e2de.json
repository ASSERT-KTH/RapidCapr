{
    "patch": "import com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MyClass {\n    public static double getTypedPercent(String jsonStr) {\n        Gson gson = new Gson();\n        Type type = new TypeToken<List<Map<String, String>>>() {}.getType();\n        List<Map<String, String>> list = null;\n        double typedCount = 0.0;\n        try {\n            list = gson.fromJson(jsonStr, type);\n            for (Map<String, String> map : list) {\n                if (map.containsKey(\"typed\") && isTrue(map.get(\"typed\"))) {\n                    typedCount++;\n                }\n            }\n        } catch (Exception e) {\n            System.out.println(\"Exception occurred: \" + e);\n        }\n        if (list != null && !list.isEmpty()) {\n            return Math.round((typedCount / list.size()) * 1000.0) / 10.0; // Round to 1 decimal place\n        } else {\n            return 0.0;\n        }\n    }\n    \n    private static boolean isTrue(String str) {\n        return str != null && str.equalsIgnoreCase(\"true\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..4de42ade 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class MyClass {\n+    public static double getTypedPercent(String jsonStr) {\n+        Gson gson = new Gson();\n+        Type type = new TypeToken<List<Map<String, String>>>() {}.getType();\n+        List<Map<String, String>> list = null;\n+        double typedCount = 0.0;\n+        try {\n+            list = gson.fromJson(jsonStr, type);\n+            for (Map<String, String> map : list) {\n+                if (map.containsKey(\"typed\") && isTrue(map.get(\"typed\"))) {\n+                    typedCount++;\n+                }\n+            }\n+        } catch (Exception e) {\n+            System.out.println(\"Exception occurred: \" + e);\n+        }\n+        if (list != null && !list.isEmpty()) {\n+            return Math.round((typedCount / list.size()) * 1000.0) / 10.0; // Round to 1 decimal place\n+        } else {\n+            return 0.0;\n+        }\n+    }\n+    \n+    private static boolean isTrue(String str) {\n+        return str != null && str.equalsIgnoreCase(\"true\");\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}