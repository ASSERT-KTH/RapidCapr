{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final SchurDecomposition dec = new SchurDecomposition(m);\n        final RealMatrix t = dec.getT();\n        final RealMatrix q = dec.getQ();\n        final int n = t.getRowDimension();\n        final double[][] s = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    s[i][j] = FastMath.sqrt(FastMath.abs(t.getEntry(i, j)));\n                } else {\n                    s[i][j] = 0.0;\n                }\n            }\n        }\n        final RealMatrix sMatrix = MatrixUtils.createRealMatrix(s);\n        return q.multiply(sMatrix).multiply(q.transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9c0bb6a99 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final SchurDecomposition dec = new SchurDecomposition(m);\n+        final RealMatrix t = dec.getT();\n+        final RealMatrix q = dec.getQ();\n+        final int n = t.getRowDimension();\n+        final double[][] s = new double[n][n];\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                if (i == j) {\n+                    s[i][j] = FastMath.sqrt(FastMath.abs(t.getEntry(i, j)));\n+                } else {\n+                    s[i][j] = 0.0;\n+                }\n+            }\n+        }\n+        final RealMatrix sMatrix = MatrixUtils.createRealMatrix(s);\n+        return q.multiply(sMatrix).multiply(q.transpose());\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}