{
    "patch": "          if (parent.getLastChild().isString()) {\n            // We're dealing with a property access using a constant\n            // string.\n            //\n            // Check it as a regular name, to see if it points to a\n            // extern.\n            String prop = parent.getLastChild().getString();\n            if (getScope().getVar(prop) != null\n                && getScope().getVar(prop).isExtern()) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..b59b4c58 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,18 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          if (parent.getLastChild().isString()) {\n+            // We're dealing with a property access using a constant\n+            // string.\n+            //\n+            // Check it as a regular name, to see if it points to a\n+            // extern.\n+            String prop = parent.getLastChild().getString();\n+            if (getScope().getVar(prop) != null\n+                && getScope().getVar(prop).isExtern()) {\n+              return false;\n+            }\n+          }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}