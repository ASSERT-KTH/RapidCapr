{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n        int newPos = parser.parseInto(bucket, text, position);\n\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else {\n                chrono = chrono.withUTC();\n            }\n        } else if (iZone != null) {\n            chrono = chrono.withZone(iZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        long newInstantMillis = bucket.computeMillis();\n        if (chrono.dayOfMonth().get(newInstantMillis) != bucket.getDayOfMonth()) {\n            throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), bucket.getDayOfMonth(), chrono.dayOfMonth().getMinimumValue(), chrono.dayOfMonth().getMaximumValue());\n        }\n        instant.setMillis(newInstantMillis);\n        instant.setChronology(chrono);\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..61f58186 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -711,19 +711,28 @@ public class DateTimeFormatter {\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else {\n+                chrono = chrono.withUTC();\n+            }\n+        } else if (iZone != null) {\n+            chrono = chrono.withZone(iZone);\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        long newInstantMillis = bucket.computeMillis();\n+        if (chrono.dayOfMonth().get(newInstantMillis) != bucket.getDayOfMonth()) {\n+            throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), bucket.getDayOfMonth(), chrono.dayOfMonth().getMinimumValue(), chrono.dayOfMonth().getMaximumValue());\n         }\n+        instant.setMillis(newInstantMillis);\n+        instant.setChronology(chrono);\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}