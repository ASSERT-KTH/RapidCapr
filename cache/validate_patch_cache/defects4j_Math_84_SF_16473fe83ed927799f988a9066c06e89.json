{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = evaluateNewSimplex(original, sigma, comparator);\n\n            } else if (comparator.compare(contracted, simplex[getDimension()]) < 0) {\n                // perform an outside contraction\n                simplex = evaluateNewSimplex(original, sigma, comparator);\n\n            } else {\n                // perform an inside contraction\n                final RealPointValuePair contractedSimplex = evaluateNewSimplex(original, chi, comparator);\n                if (comparator.compare(contractedSimplex, reflected) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex;\n\n                } else {\n                    // perform a shrink\n                    shrink(comparator);\n                }\n            }\n\n        }\n\n    }\n ```\nThank you for bringing this to my attention",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..02507dbe2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,8 +58,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -76,7 +76,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = evaluateNewSimplex(original, gamma, comparator);\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n@@ -86,17 +89,33 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = evaluateNewSimplex(original, sigma, comparator);\n+\n+            } else if (comparator.compare(contracted, simplex[getDimension()]) < 0) {\n+                // perform an outside contraction\n+                simplex = evaluateNewSimplex(original, sigma, comparator);\n+\n+            } else {\n+                // perform an inside contraction\n+                final RealPointValuePair contractedSimplex = evaluateNewSimplex(original, chi, comparator);\n+                if (comparator.compare(contractedSimplex, reflected) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contractedSimplex;\n+\n+                } else {\n+                    // perform a shrink\n+                    shrink(comparator);\n+                }\n             }\n \n         }\n \n     }\n+ ```\n+Thank you for bringing this to my attention\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}