{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors, have the @this or @override\n        // annotation, or are class definitions.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        if (NodeUtil.isClassDeclaration(n)) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally be able to have a @this\n        // annotation associated with them. e.g., var a = function() { }; // or function a() {}\n        // or a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME\n                || pType == Token.ASSIGN || pType == Token.VAR)) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle nested assignments\n            // properly (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (NodeUtil.isGet(lhs)) {\n                Node prop = lhs.getLastChild();\n                // Do not traverse properties of Object.prototype.\n                if (NodeUtil.isObjectPrototypeGetProperty(lhs)) {\n                    return false;\n                }\n                // Allow properties of methods on the prototype to be traversed.\n                if (prop.isString() && \"prototype\".equals(prop.getString())) {\n                    boolean isAssignPrototypeMethod = NodeUtil.isFunctionExpression(rhs);\n                    boolean isCallPrototypeMethod = NodeUtil.isPrototypeMethodCall(lhs, rhs);\n                    if (isAssignPrototypeMethod || isCallPrototypeMethod) {\n                        return true;\n                    }\n                }\n                // Do not traverse properties of built in objects, because they may not be\n                // accurately modeled with cloned types in our type system, leading to\n                // spurious warnings. For example, the 'match' property of RegExp object has\n                // a function type, and thus if a variable is assigned this property, we'll\n                // produce a spurious warning when the variable is used in an expression\n                // that expects a string type.\n                if (NodeUtil.isBuiltInPrototypeMethod(lhs)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..1a38141a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,68 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors, have the @this or @override\n+        // annotation, or are class definitions.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n+        if (NodeUtil.isClassDeclaration(n)) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally be able to have a @this\n+        // annotation associated with them. e.g., var a = function() { }; // or function a() {}\n+        // or a.x = function() {};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME\n+                || pType == Token.ASSIGN || pType == Token.VAR)) {\n+            return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle nested assignments\n+            // properly (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            if (NodeUtil.isGet(lhs)) {\n+                Node prop = lhs.getLastChild();\n+                // Do not traverse properties of Object.prototype.\n+                if (NodeUtil.isObjectPrototypeGetProperty(lhs)) {\n+                    return false;\n+                }\n+                // Allow properties of methods on the prototype to be traversed.\n+                if (prop.isString() && \"prototype\".equals(prop.getString())) {\n+                    boolean isAssignPrototypeMethod = NodeUtil.isFunctionExpression(rhs);\n+                    boolean isCallPrototypeMethod = NodeUtil.isPrototypeMethodCall(lhs, rhs);\n+                    if (isAssignPrototypeMethod || isCallPrototypeMethod) {\n+                        return true;\n+                    }\n+                }\n+                // Do not traverse properties of built in objects, because they may not be\n+                // accurately modeled with cloned types in our type system, leading to\n+                // spurious warnings. For example, the 'match' property of RegExp object has\n+                // a function type, and thus if a variable is assigned this property, we'll\n+                // produce a spurious warning when the variable is used in an expression\n+                // that expects a string type.\n+                if (NodeUtil.isBuiltInPrototypeMethod(lhs)) {\n+                    return false;\n+                }\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}