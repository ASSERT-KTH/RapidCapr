{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if ((notPrinter && notParser) || elementPairs.isEmpty()) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Separator sep = null;\n    if (!elementPairs.isEmpty() && elementPairs.get(0) instanceof Separator) {\n        sep = (Separator) elementPairs.get(0);\n        elementPairs = elementPairs.subList(1, elementPairs.size());\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    for (Object element : elementPairs) {\n        if (element instanceof PeriodPrinter) {\n            printer = (printer == null) ? (PeriodPrinter) element : printer.withPrinter((PeriodPrinter) element);\n        } else if (element instanceof PeriodParser) {\n            parser = (parser == null) ? (PeriodParser) element : parser.withParser((PeriodParser) element);\n        } else {\n            throw new IllegalArgumentException(\"Invalid configuration: \" + element.getClass().getName());\n        }\n    }\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, parser);\n    } else if (notParser) {\n        return new PeriodFormatter(printer, null);\n    } else if (sep != null) {\n        return new PeriodFormatter(sep.finish(printer, null), parser);\n    } else {\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..071756da 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,41 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if ((notPrinter && notParser) || elementPairs.isEmpty()) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Separator sep = null;\n+    if (!elementPairs.isEmpty() && elementPairs.get(0) instanceof Separator) {\n+        sep = (Separator) elementPairs.get(0);\n+        elementPairs = elementPairs.subList(1, elementPairs.size());\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    for (Object element : elementPairs) {\n+        if (element instanceof PeriodPrinter) {\n+            printer = (printer == null) ? (PeriodPrinter) element : printer.withPrinter((PeriodPrinter) element);\n+        } else if (element instanceof PeriodParser) {\n+            parser = (parser == null) ? (PeriodParser) element : parser.withParser((PeriodParser) element);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalArgumentException(\"Invalid configuration: \" + element.getClass().getName());\n         }\n     }\n \n+    if (notPrinter) {\n+        return new PeriodFormatter(null, parser);\n+    } else if (notParser) {\n+        return new PeriodFormatter(printer, null);\n+    } else if (sep != null) {\n+        return new PeriodFormatter(sep.finish(printer, null), parser);\n+    } else {\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}