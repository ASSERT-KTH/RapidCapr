{
    "patch": "if (name.globalSets == 1 && name.localSets == 0 && (name.aliasingGets == 0 || name.isGetOrSetDefinition()) && (name.props == null || name.props.isEmpty()) && (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)) {\n  // Try to inline local aliases and the chain of global aliases of the single\n  // definition of this name.\n  Name-definition defn = name.getDefinition();\n  if (defn != null && defn.defType != Name.DefinitionType.INSTANCE_PROPERTY) {\n    List<Ref> refs = Lists.newArrayList(name.getRefs());\n    for (Ref ref : refs) {\n      if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n        // Try to inline an alias of the single definition of {@code name}.\n        if (inlineAliasIfPossible(ref, namespace)) {\n          name.removeRef(ref);\n        }\n      }\n    }\n    if (name.getRefs().isEmpty()) {\n      defn.removeRef(name);\n    }\n  }\n  workList.addAll(name.props);\n  name.props.clear();\n  break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..6c89244d 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,28 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.globalSets == 1 && name.localSets == 0 && (name.aliasingGets == 0 || name.isGetOrSetDefinition()) && (name.props == null || name.props.isEmpty()) && (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)) {\n+  // Try to inline local aliases and the chain of global aliases of the single\n+  // definition of this name.\n+  Name-definition defn = name.getDefinition();\n+  if (defn != null && defn.defType != Name.DefinitionType.INSTANCE_PROPERTY) {\n+    List<Ref> refs = Lists.newArrayList(name.getRefs());\n+    for (Ref ref : refs) {\n+      if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+        // Try to inline an alias of the single definition of {@code name}.\n+        if (inlineAliasIfPossible(ref, namespace)) {\n+          name.removeRef(ref);\n+        }\n+      }\n+    }\n+    if (name.getRefs().isEmpty()) {\n+      defn.removeRef(name);\n+    }\n+  }\n+  workList.addAll(name.props);\n+  name.props.clear();\n+  break;\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}