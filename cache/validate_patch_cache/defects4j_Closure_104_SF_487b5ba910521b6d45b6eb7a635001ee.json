{
    "patch": "public class UnionType extends JSType {\n\n  private final ImmutableList<JSType> alternates;\n\n  private UnionType(ImmutableList<JSType> alternates) {\n    this.alternates = alternates;\n  }\n\n  public static JSType makeUnion(ImmutableList<JSType> types) {\n    return makeUnionHelper(types, false);\n  }\n\n  public static JSType makeUnionSupertype(ImmutableList<JSType> types) {\n    return makeUnionHelper(types, true);\n  }\n\n  /**\n   * This helper method creates a UnionType of the given types, removing undefined types if it sees\n   * one. If allowSupertype is true, non-interfaces are upcast if they become the only member of the\n   * new Union.\n   *\n   * This method is flexible enough to be used in the top-level JSType.createUnionType factories.\n   * @param types types to combine\n   * @param allowSupertype if true, a single non-interface alternate is upcast to its supertype\n   */\n  private static JSType makeUnionHelper(ImmutableList<JSType> types, boolean allowSupertype) {\n    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n    for (JSType type : types) {\n      if (!type.isUnknownType() && !type.isUndefinedType()) {\n        builder.add(type);\n      }\n    }\n    List<JSType> list = builder.build();\n    if (list.isEmpty()) {\n      return JSTypeNative.NO_TYPE;\n    }\n    if (list.size() == 1) {\n      return allowSupertype ? list.get(0).autobox() : list.get(0);\n    }\n    for (int i = 0; i < list.size(); i++) {\n      if (list.get(i).isAllType()) {\n        return list.get(i);\n      }\n    }\n    if (list.contains(JSTypeNative.ALL_TYPE)) {\n      return JSTypeNative.ALL_TYPE;\n    }\n\n    builder = ImmutableList.builder();\n    for (JSType type : list) {\n      if (!type.isSubtype(JSTypeNative.NULL_TYPE)) {\n        builder.add(type);\n      }\n    }\n    ImmutableList<JSType> deduped = JSType.dedup(builder.build());\n    if (deduped.size() == 1) {\n      // Union of one type.\n      return allowSupertype ? deduped.get(0).autobox() : deduped.get(0);\n    }\n\n    ImmutableList<JSType> original = deduped;\n    boolean tryAgain;\n    do {\n      tryAgain = false;\n      for (int i = 0; i < deduped.size(); i++) {\n        boolean changedList = false;\n        JSType iType = deduped.get(i);\n        if (iType.equals(JSTypeNative.UNKNOWN_TYPE)) {\n          if (deduped.size() > 2) {\n            builder = ImmutableList.builder();\n            for (int j = 0; j < deduped.size(); j++) {\n              if (j != i) {\n                builder.add(deduped.get(j));\n              }\n            }\n            deduped = builder.build();\n            tryAgain = true;\n            break;\n          } else {\n            return JSTypeNative.ALL_TYPE;\n          }\n        }\n        if (iType.equals(JSTypeNative.OBJECT_TYPE) || iType.equals(JSTypeNative.FUNCTION_INSTANCE_TYPE) ||\n            iType.equals(JSTypeNative.FUNCTION_PROTOTYPE)) {\n          continu",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..bdb24baa 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,55 +279,92 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n+public class UnionType extends JSType {\n \n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n-    }\n+  private final ImmutableList<JSType> alternates;\n+\n+  private UnionType(ImmutableList<JSType> alternates) {\n+    this.alternates = alternates;\n   }\n \n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n+  public static JSType makeUnion(ImmutableList<JSType> types) {\n+    return makeUnionHelper(types, false);\n   }\n \n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n+  public static JSType makeUnionSupertype(ImmutableList<JSType> types) {\n+    return makeUnionHelper(types, true);\n   }\n \n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n+  /**\n+   * This helper method creates a UnionType of the given types, removing undefined types if it sees\n+   * one. If allowSupertype is true, non-interfaces are upcast if they become the only member of the\n+   * new Union.\n+   *\n+   * This method is flexible enough to be used in the top-level JSType.createUnionType factories.\n+   * @param types types to combine\n+   * @param allowSupertype if true, a single non-interface alternate is upcast to its supertype\n+   */\n+  private static JSType makeUnionHelper(ImmutableList<JSType> types, boolean allowSupertype) {\n+    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+    for (JSType type : types) {\n+      if (!type.isUnknownType() && !type.isUndefinedType()) {\n+        builder.add(type);\n+      }\n+    }\n+    List<JSType> list = builder.build();\n+    if (list.isEmpty()) {\n+      return JSTypeNative.NO_TYPE;\n+    }\n+    if (list.size() == 1) {\n+      return allowSupertype ? list.get(0).autobox() : list.get(0);\n+    }\n+    for (int i = 0; i < list.size(); i++) {\n+      if (list.get(i).isAllType()) {\n+        return list.get(i);\n       }\n     }\n+    if (list.contains(JSTypeNative.ALL_TYPE)) {\n+      return JSTypeNative.ALL_TYPE;\n+    }\n+\n+    builder = ImmutableList.builder();\n+    for (JSType type : list) {\n+      if (!type.isSubtype(JSTypeNative.NULL_TYPE)) {\n+        builder.add(type);\n+      }\n+    }\n+    ImmutableList<JSType> deduped = JSType.dedup(builder.build());\n+    if (deduped.size() == 1) {\n+      // Union of one type.\n+      return allowSupertype ? deduped.get(0).autobox() : deduped.get(0);\n+    }\n+\n+    ImmutableList<JSType> original = deduped;\n+    boolean tryAgain;\n+    do {\n+      tryAgain = false;\n+      for (int i = 0; i < deduped.size(); i++) {\n+        boolean changedList = false;\n+        JSType iType = deduped.get(i);\n+        if (iType.equals(JSTypeNative.UNKNOWN_TYPE)) {\n+          if (deduped.size() > 2) {\n+            builder = ImmutableList.builder();\n+            for (int j = 0; j < deduped.size(); j++) {\n+              if (j != i) {\n+                builder.add(deduped.get(j));\n+              }\n+            }\n+            deduped = builder.build();\n+            tryAgain = true;\n+            break;\n+          } else {\n+            return JSTypeNative.ALL_TYPE;\n+          }\n+        }\n+        if (iType.equals(JSTypeNative.OBJECT_TYPE) || iType.equals(JSTypeNative.FUNCTION_INSTANCE_TYPE) ||\n+            iType.equals(JSTypeNative.FUNCTION_PROTOTYPE)) {\n+          continu\n+    }\n     return true;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}