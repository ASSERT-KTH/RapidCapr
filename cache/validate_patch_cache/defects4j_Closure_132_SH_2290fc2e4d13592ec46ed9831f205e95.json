{
    "patch": "              // NOTE: assignments to 'this' may change the value of 'this' and\n              // should be treated as an external effect.\n              (!NodeUtil.mayHaveSideEffects(lhs, compiler) ||\n              !mayEffectMutableState(lhs) ||\n              lhs.isThis())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..48188fe4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,11 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE: assignments to 'this' may change the value of 'this' and\n+              // should be treated as an external effect.\n+              (!NodeUtil.mayHaveSideEffects(lhs, compiler) ||\n+              !mayEffectMutableState(lhs) ||\n+              lhs.isThis())) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: compiler has private access in AbstractPeepholeOptimization",
    "test_result": "ERROR"
}