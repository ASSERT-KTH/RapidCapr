{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n\n    int initialOffset = getOffset(instantLocal);\n    long nextTransition, nextTransitionWithInitialOffset, nextTransitionWithNewOffset;\n    \n    // get the next transition and corresponding offsets\n    try {\n        nextTransitionWithNewOffset = nextTransition(instantLocal - initialOffset);\n        nextTransition = nextTransitionWithNewOffset + initialOffset;\n        nextTransitionWithInitialOffset = nextTransition(instantLocal - initialOffset + initialOffset);\n    } catch (IllegalArgumentException e) {\n        // If the instantLocal is within a gap or overlap\n        // find the before and after offsets\n        int offsetBeforeGap = getOffset(nextTransition(instantLocal - initialOffset - 1L));\n        int offsetAfterGap = getOffset(nextTransition(instantLocal - initialOffset + 1L));\n\n        if(offsetBeforeGap == offsetAfterGap) {\n            // overlapping interval, choose the offset closer to the requested instant\n            boolean isBeforeTransition = instantLocal < nextTransition(instantLocal - initialOffset + 1L);\n            return isBeforeTransition ? offsetBeforeGap : offsetAfterGap;\n        } else {\n            // gap interval\n            return offsetBeforeGap;         \n        }\n    }\n    \n    // case1: instantLocal is exactly at the next transition\n    if(nextTransition == instantLocal) {\n        int offsetBeforeTransition = getOffset(nextTransition - 1L);\n        return initialOffset < offsetBeforeTransition ? getOffset(nextTransition - 1L) : offsetBeforeTransition;\n    }\n    \n    // case2: instantLocal is between two transitions \n    if(nextTransition == nextTransitionWithNewOffset) {\n        int offsetBeforeOverlap = getOffset(nextTransition - 1L);\n        int offsetAfterOverlap = getOffset(nextTransition);\n        boolean isBeforeTransition = instantLocal < nextTransition;\n        return isBeforeTransition ? offsetBeforeOverlap : offsetAfterOverlap;\n    }\n    \n    // case3: instantLocal's offset changes from initial offset to new offset\n    if(nextTransition == nextTransitionWithInitialOffset) {\n        int offsetBeforeInitialTransition = getOffset(nextTransitionWithInitialOffset - 1L);\n\n        // handling gap, get Before Gap offset\n        if(initialOffset < offsetBeforeInitialTransition) {\n            return initialOffset;\n        }\n\n        // handling overlap,i.e., instantLocal >= nextTransition\n        if(nextTransitionWithInitialOffset < nextTransitionWithNewOffset) {\n            return getOffset(nextTransitionWithInitialOffset - 1L);\n        }\n        \n        else {\n            int offsetBeforeNewTransition = getOffset(nextTransitionWithNewOffset - 1L);\n            return initialOffset < offsetBeforeNewTransition ? offsetBeforeInitialTransition : offsetBeforeNewTransition;\n        }   \n    }\n    return getOffset(nextTransitionWithNewOffset - 1L);    // case4: instantLocal's offset changes from new offset to next offset\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..502c63a6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,67 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+\n+    int initialOffset = getOffset(instantLocal);\n+    long nextTransition, nextTransitionWithInitialOffset, nextTransitionWithNewOffset;\n+    \n+    // get the next transition and corresponding offsets\n+    try {\n+        nextTransitionWithNewOffset = nextTransition(instantLocal - initialOffset);\n+        nextTransition = nextTransitionWithNewOffset + initialOffset;\n+        nextTransitionWithInitialOffset = nextTransition(instantLocal - initialOffset + initialOffset);\n+    } catch (IllegalArgumentException e) {\n+        // If the instantLocal is within a gap or overlap\n+        // find the before and after offsets\n+        int offsetBeforeGap = getOffset(nextTransition(instantLocal - initialOffset - 1L));\n+        int offsetAfterGap = getOffset(nextTransition(instantLocal - initialOffset + 1L));\n+\n+        if(offsetBeforeGap == offsetAfterGap) {\n+            // overlapping interval, choose the offset closer to the requested instant\n+            boolean isBeforeTransition = instantLocal < nextTransition(instantLocal - initialOffset + 1L);\n+            return isBeforeTransition ? offsetBeforeGap : offsetAfterGap;\n+        } else {\n+            // gap interval\n+            return offsetBeforeGap;         \n         }\n-        return offsetAdjusted;\n     }\n+    \n+    // case1: instantLocal is exactly at the next transition\n+    if(nextTransition == instantLocal) {\n+        int offsetBeforeTransition = getOffset(nextTransition - 1L);\n+        return initialOffset < offsetBeforeTransition ? getOffset(nextTransition - 1L) : offsetBeforeTransition;\n+    }\n+    \n+    // case2: instantLocal is between two transitions \n+    if(nextTransition == nextTransitionWithNewOffset) {\n+        int offsetBeforeOverlap = getOffset(nextTransition - 1L);\n+        int offsetAfterOverlap = getOffset(nextTransition);\n+        boolean isBeforeTransition = instantLocal < nextTransition;\n+        return isBeforeTransition ? offsetBeforeOverlap : offsetAfterOverlap;\n+    }\n+    \n+    // case3: instantLocal's offset changes from initial offset to new offset\n+    if(nextTransition == nextTransitionWithInitialOffset) {\n+        int offsetBeforeInitialTransition = getOffset(nextTransitionWithInitialOffset - 1L);\n+\n+        // handling gap, get Before Gap offset\n+        if(initialOffset < offsetBeforeInitialTransition) {\n+            return initialOffset;\n+        }\n+\n+        // handling overlap,i.e., instantLocal >= nextTransition\n+        if(nextTransitionWithInitialOffset < nextTransitionWithNewOffset) {\n+            return getOffset(nextTransitionWithInitialOffset - 1L);\n+        }\n+        \n+        else {\n+            int offsetBeforeNewTransition = getOffset(nextTransitionWithNewOffset - 1L);\n+            return initialOffset < offsetBeforeNewTransition ? offsetBeforeInitialTransition : offsetBeforeNewTransition;\n+        }   \n+    }\n+    return getOffset(nextTransitionWithNewOffset - 1L);    // case4: instantLocal's offset changes from new offset to next offset\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}