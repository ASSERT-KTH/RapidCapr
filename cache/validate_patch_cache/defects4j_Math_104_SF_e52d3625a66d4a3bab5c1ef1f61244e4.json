{
    "patch": "public static double regularizedGammaPBySeries(double a, double x, double epsilon, int maxIterations) {\n    double s = 1 / a;\n    double sum = s;\n    for (int k = 1; k <= maxIterations; k++) {\n        double term = x / (a + k);\n        s *= term;\n        sum += s;\n        if (Math.abs(s) < Math.abs(sum) * epsilon) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n    throw new ArithmeticException(\"Max iterations exceeded in regularizedGammaPBySeries\");\n}\n\npublic static double regularizedGammaQByContinuedFraction(double a, double x, double epsilon, int maxIterations) {\n    double tiny = 1e-30;\n    double b = x + 1 - a;\n    double c = 1 / tiny;\n    double d = 1 / b;\n    double h = d;\n    double an;\n    for (int i = 1; i <= maxIterations; i++) {\n        an = -i * (i - a);\n        b += 2;\n        d = an * d + b;\n        if (Math.abs(d) < tiny) {\n            d = tiny;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < tiny) {\n            c = tiny;\n        }\n        d = 1 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) <= epsilon) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n        }\n    }\n    throw new ArithmeticException(\"Max iterations exceeded in regularizedGammaQByContinuedFraction\");\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0\n            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}\n\npublic static double regularizedGammaP(double a, double x) {\n    double epsilon = 10e-15;\n    int maxIterations = 1000;\n    if (a < 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments for Gamma.regularizedGammaP\");\n    }\n    if (x == 0.0) {\n        if (a > 0.0) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n    if (x < a + 1.0) {\n        return regularizedGammaPBySeries(a, x, epsilon, maxIterations);\n    } else {\n        return 1 - regularizedGammaQByContinuedFraction(a, x, epsilon, maxIterations);\n    }\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    return 1 - regularizedGammaP(a, x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b1736ee98 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,80 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaPBySeries(double a, double x, double epsilon, int maxIterations) {\n+    double s = 1 / a;\n+    double sum = s;\n+    for (int k = 1; k <= maxIterations; k++) {\n+        double term = x / (a + k);\n+        s *= term;\n+        sum += s;\n+        if (Math.abs(s) < Math.abs(sum) * epsilon) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+    throw new ArithmeticException(\"Max iterations exceeded in regularizedGammaPBySeries\");\n+}\n+\n+public static double regularizedGammaQByContinuedFraction(double a, double x, double epsilon, int maxIterations) {\n+    double tiny = 1e-30;\n+    double b = x + 1 - a;\n+    double c = 1 / tiny;\n+    double d = 1 / b;\n+    double h = d;\n+    double an;\n+    for (int i = 1; i <= maxIterations; i++) {\n+        an = -i * (i - a);\n+        b += 2;\n+        d = an * d + b;\n+        if (Math.abs(d) < tiny) {\n+            d = tiny;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < tiny) {\n+            c = tiny;\n+        }\n+        d = 1 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) <= epsilon) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n+        }\n+    }\n+    throw new ArithmeticException(\"Max iterations exceeded in regularizedGammaQByContinuedFraction\");\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0\n+            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n+\n+public static double regularizedGammaP(double a, double x) {\n+    double epsilon = 10e-15;\n+    int maxIterations = 1000;\n+    if (a < 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for Gamma.regularizedGammaP\");\n+    }\n+    if (x == 0.0) {\n+        if (a > 0.0) {\n+            return 0.0;\n+        } else {\n+            return 1.0;\n+        }\n+    }\n+    if (x < a + 1.0) {\n+        return regularizedGammaPBySeries(a, x, epsilon, maxIterations);\n+    } else {\n+        return 1 - regularizedGammaQByContinuedFraction(a, x, epsilon, maxIterations);\n+    }\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    return 1 - regularizedGammaP(a, x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}