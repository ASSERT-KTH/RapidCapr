{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(n)) {\n            defineFunctionExpression(n, parent);\n          } else if (NodeUtil.isFunctionDeclaration(n)) {\n            defineFunctionDeclaration(n, parent);\n          } else {\n            checkState(false, \"Unexpected function type\");\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n        case Token.LET:\n        case Token.CONST:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..47d0c83d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,15 +1451,20 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            defineFunctionExpression(n, parent);\n+          } else if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineFunctionDeclaration(n, parent);\n+          } else {\n+            checkState(false, \"Unexpected function type\");\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n+        case Token.LET:\n+        case Token.CONST:\n           defineVar(n, parent);\n           break;\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}