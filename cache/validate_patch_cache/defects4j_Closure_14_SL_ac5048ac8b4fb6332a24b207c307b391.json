{
    "patch": "case Token.TRY:\n    // If we are coming out of the TRY block...\n    if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n        } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n        }\n    // CATCH block.\n    } else if (NodeUtil.getCatchBlock(parent) == node){\n        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n        } else {\n            return computeFollowNode(fromNode, parent, cfa);\n        }\n    // If we are coming out of the FINALLY block...\n    } else if (parent.getLastChild() == node){\n        if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n        }\n        // The instructions following the finally block belongs to the follow of the parent.\n        return computeFollowNode(fromNode, parent, cfa);\n        // Edge from parent to siblings of finally block.\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(parent.getNext()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..c464928a 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,32 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+case Token.TRY:\n+    // If we are coming out of the TRY block...\n+    if (parent.getFirstChild() == node) {\n+        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+            return computeFallThrough(parent.getLastChild());\n+        } else { // and have no FINALLY.\n+            return computeFollowNode(fromNode, parent, cfa);\n+        }\n+    // CATCH block.\n+    } else if (NodeUtil.getCatchBlock(parent) == node){\n+        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+            return computeFallThrough(node.getNext());\n+        } else {\n+            return computeFollowNode(fromNode, parent, cfa);\n+        }\n+    // If we are coming out of the FINALLY block...\n+    } else if (parent.getLastChild() == node){\n+        if (cfa != null) {\n+            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            }\n+        }\n+        // The instructions following the finally block belongs to the follow of the parent.\n+        return computeFollowNode(fromNode, parent, cfa);\n+        // Edge from parent to siblings of finally block.\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(parent.getNext()));\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}