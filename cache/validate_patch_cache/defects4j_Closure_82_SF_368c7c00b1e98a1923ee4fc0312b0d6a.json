{
    "patch": "import java.lang.reflect.Type;\nimport java.lang.reflect.WildcardType;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.GenericArrayType;\n\npublic final boolean isEmptyType(Type type) {\n    if (type == null) {\n        return true;\n    } else if (type == void.class || type == Void.class) {\n        return true;\n    } else if (type == Object.class) {\n        return true;\n    } else if (type instanceof Class) {\n        Class<?> clazz = (Class<?>) type;\n        return clazz.isArray() && isEmptyType(clazz.getComponentType());\n    } else if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n        for (Type typeArgument : typeArguments) {\n            if (!isEmptyType(typeArgument)) {\n                return false;\n            }\n        }\n        return isEmptyType(parameterizedType.getRawType());\n    } else if (type instanceof WildcardType) {\n        WildcardType wildcardType = (WildcardType) type;\n        Type[] upperBounds = wildcardType.getUpperBounds();\n        Type[] lowerBounds = wildcardType.getLowerBounds();\n        for (Type upperBound : upperBounds) {\n            if (!isEmptyType(upperBound)) {\n                return false;\n            }\n        }\n        for (Type lowerBound : lowerBounds) {\n            if (!isEmptyType(lowerBound)) {\n                return false;\n            }\n        }\n        return true;\n    } else if (type instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) type;\n        return isEmptyType(genericArrayType.getGenericComponentType());\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..37143ace 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -159,9 +159,52 @@ public abstract class JSType implements Serializable {\n     return false;\n   }\n \n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.GenericArrayType;\n+\n+public final boolean isEmptyType(Type type) {\n+    if (type == null) {\n+        return true;\n+    } else if (type == void.class || type == Void.class) {\n+        return true;\n+    } else if (type == Object.class) {\n+        return true;\n+    } else if (type instanceof Class) {\n+        Class<?> clazz = (Class<?>) type;\n+        return clazz.isArray() && isEmptyType(clazz.getComponentType());\n+    } else if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+        for (Type typeArgument : typeArguments) {\n+            if (!isEmptyType(typeArgument)) {\n+                return false;\n+            }\n+        }\n+        return isEmptyType(parameterizedType.getRawType());\n+    } else if (type instanceof WildcardType) {\n+        WildcardType wildcardType = (WildcardType) type;\n+        Type[] upperBounds = wildcardType.getUpperBounds();\n+        Type[] lowerBounds = wildcardType.getLowerBounds();\n+        for (Type upperBound : upperBounds) {\n+            if (!isEmptyType(upperBound)) {\n+                return false;\n+            }\n+        }\n+        for (Type lowerBound : lowerBounds) {\n+            if (!isEmptyType(lowerBound)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    } else if (type instanceof GenericArrayType) {\n+        GenericArrayType genericArrayType = (GenericArrayType) type;\n+        return isEmptyType(genericArrayType.getGenericComponentType());\n+    } else {\n+        return false;\n+    }\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}