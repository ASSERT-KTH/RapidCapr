{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    if (typeVariable instanceof TypeVariableImpl) {\n        Type[] upperBounds = ((TypeVariableImpl<?>) typeVariable).getUpperBounds();\n        for (Type bound : upperBounds) {\n            if (bound instanceof ParameterizedType) {\n                return ((ParameterizedType) bound).getActualTypeArguments()[0];\n            }\n        }\n        return typeVariable;\n    } else {\n        Type[] bounds = typeVariable.getBounds();\n        if (bounds.length > 0) {\n            return bounds[0];\n        } else {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c83d048ae 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,29 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    if (typeVariable instanceof TypeVariableImpl) {\n+        Type[] upperBounds = ((TypeVariableImpl<?>) typeVariable).getUpperBounds();\n+        for (Type bound : upperBounds) {\n+            if (bound instanceof ParameterizedType) {\n+                return ((ParameterizedType) bound).getActualTypeArguments()[0];\n+            }\n+        }\n+        return typeVariable;\n+    } else {\n+        Type[] bounds = typeVariable.getBounds();\n+        if (bounds.length > 0) {\n+            return bounds[0];\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}