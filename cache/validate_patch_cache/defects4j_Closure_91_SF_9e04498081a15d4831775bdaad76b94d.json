{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface()\n                || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {}; // or\n        // var a = {x: function() {}};\n        if (!isFunctionParent(parent)) {\n            return false;\n        }\n\n        // Don't traverse functions that are getting lent to a prototype or $jscomp.global scope.\n        if (NodeUtil.isGet(parent)) {\n            Node lhs = parent.getFirstChild();\n            String propertyName = lhs.getLastChild().getString();\n            if ((lhs.getType() == Token.GETPROP && propertyName.equals(\"prototype\"))\n                    || (lhs.getType() == Token.NAME && propertyName.equals(\"$jscomp$global\"))) {\n                return false;\n            }\n            // Check if the parent is an assignment to another getprop.\n            if (parent.getParent() != null && parent.getParent().getType() == Token.ASSIGN\n                    && NodeUtil.isGet(parent.getParent().getFirstChild())\n                    && NodeUtil.isGet(parent.getParent().getFirstChild().getFirstChild())) {\n                return false;\n            }\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (NodeUtil.isGet(lhs)) {\n                if (lhs.getType() == Token.GETPROP &&\n                        lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                Node llhs = lhs.getFirstChild();\n                if (llhs.getType() == Token.GETPROP &&\n                        llhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isFunctionParent(Node parent) {\n    while (parent != null) {\n        switch (parent.getType()) {\n            case Token.SCRIPT:\n            case Token.BLOCK:\n            case Token.FUNCTION:\n            case Token.CATCH:\n                return true;\n            case Token.NAME:\n            case Token.VAR:\n            case Token.LET:\n            case Token.CONST:\n                parent = parent.getParent();\n                break;\n            default:\n                return false;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..709da52d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,94 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface()\n+                || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {}; // or\n+        // var a = {x: function() {}};\n+        if (!isFunctionParent(parent)) {\n+            return false;\n+        }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+        // Don't traverse functions that are getting lent to a prototype or $jscomp.global scope.\n+        if (NodeUtil.isGet(parent)) {\n+            Node lhs = parent.getFirstChild();\n+            String propertyName = lhs.getLastChild().getString();\n+            if ((lhs.getType() == Token.GETPROP && propertyName.equals(\"prototype\"))\n+                    || (lhs.getType() == Token.NAME && propertyName.equals(\"$jscomp$global\"))) {\n+                return false;\n+            }\n+            // Check if the parent is an assignment to another getprop.\n+            if (parent.getParent() != null && parent.getParent().getType() == Token.ASSIGN\n+                    && NodeUtil.isGet(parent.getParent().getFirstChild())\n+                    && NodeUtil.isGet(parent.getParent().getFirstChild().getFirstChild())) {\n+                return false;\n+            }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (NodeUtil.isGet(lhs)) {\n+                if (lhs.getType() == Token.GETPROP &&\n+                        lhs.getLastChild().getString().equals(\"prototype\")) {\n+                    return false;\n+                }\n+                Node llhs = lhs.getFirstChild();\n+                if (llhs.getType() == Token.GETPROP &&\n+                        llhs.getLastChild().getString().equals(\"prototype\")) {\n+                    return false;\n+                }\n+            }\n         }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean isFunctionParent(Node parent) {\n+    while (parent != null) {\n+        switch (parent.getType()) {\n+            case Token.SCRIPT:\n+            case Token.BLOCK:\n+            case Token.FUNCTION:\n+            case Token.CATCH:\n+                return true;\n+            case Token.NAME:\n+            case Token.VAR:\n+            case Token.LET:\n+            case Token.CONST:\n+                parent = parent.getParent();\n+                break;\n+            default:\n+                return false;\n+        }\n+    }\n+    return false;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}