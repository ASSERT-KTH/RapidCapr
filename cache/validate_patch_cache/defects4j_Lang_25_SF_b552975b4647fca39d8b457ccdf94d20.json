{
    "patch": "public static String iso8859_1_ESCAPE(String input) {\n    if (input == null) {\n        return null;\n    }\n    int len = input.length();\n    StringBuilder out = new StringBuilder(len * 2);\n    for (int x = 0; x < len; x++) {\n        char aChar = input.charAt(x);\n        if (aChar < 32 || aChar > 126) {\n            out.append('\\\\');\n            out.append('u');\n            out.append(toHex((aChar >> 12) & 0xF));\n            out.append(toHex((aChar >> 8) & 0xF));\n            out.append(toHex((aChar >> 4) & 0xF));\n            out.append(toHex(aChar & 0xF));\n        } else {\n            switch (aChar) {\n                case '\\\"':\n                    out.append('\\\\');\n                    out.append('\\\"');\n                    break;\n                case '\\\\':\n                    out.append('\\\\');\n                    out.append('\\\\');\n                    break;\n                case '\\b':\n                    out.append('\\\\');\n                    out.append('b');\n                    break;\n                case '\\f':\n                    out.append('\\\\');\n                    out.append('f');\n                    break;\n                case '\\n':\n                    out.append('\\\\');\n                    out.append('n');\n                    break;\n                case '\\r':\n                    out.append('\\\\');\n                    out.append('r');\n                    break;\n                case '\\t':\n                    out.append('\\\\');\n                    out.append('t');\n                    break;\n                default:\n                    out.append(aChar);\n                    break;\n            }\n        }\n    }\n    return out.toString();\n}\n\nprivate static char toHex(int nibble) {\n    return hexDigit[(nibble & 0xF)];\n}\n\nprivate static final char[] hexDigit = {\n        '0', '1', '2', '3', '4', '5', '6', '7',\n        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n};",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..9bb5b22d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,68 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String iso8859_1_ESCAPE(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int len = input.length();\n+    StringBuilder out = new StringBuilder(len * 2);\n+    for (int x = 0; x < len; x++) {\n+        char aChar = input.charAt(x);\n+        if (aChar < 32 || aChar > 126) {\n+            out.append('\\\\');\n+            out.append('u');\n+            out.append(toHex((aChar >> 12) & 0xF));\n+            out.append(toHex((aChar >> 8) & 0xF));\n+            out.append(toHex((aChar >> 4) & 0xF));\n+            out.append(toHex(aChar & 0xF));\n+        } else {\n+            switch (aChar) {\n+                case '\\\"':\n+                    out.append('\\\\');\n+                    out.append('\\\"');\n+                    break;\n+                case '\\\\':\n+                    out.append('\\\\');\n+                    out.append('\\\\');\n+                    break;\n+                case '\\b':\n+                    out.append('\\\\');\n+                    out.append('b');\n+                    break;\n+                case '\\f':\n+                    out.append('\\\\');\n+                    out.append('f');\n+                    break;\n+                case '\\n':\n+                    out.append('\\\\');\n+                    out.append('n');\n+                    break;\n+                case '\\r':\n+                    out.append('\\\\');\n+                    out.append('r');\n+                    break;\n+                case '\\t':\n+                    out.append('\\\\');\n+                    out.append('t');\n+                    break;\n+                default:\n+                    out.append(aChar);\n+                    break;\n+            }\n+        }\n+    }\n+    return out.toString();\n+}\n+\n+private static char toHex(int nibble) {\n+    return hexDigit[(nibble & 0xF)];\n+}\n+\n+private static final char[] hexDigit = {\n+        '0', '1', '2', '3', '4', '5', '6', '7',\n+        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n+};\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}