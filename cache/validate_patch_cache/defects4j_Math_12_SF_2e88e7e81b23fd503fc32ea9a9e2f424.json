{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    int stateCount = 1 << D;\n    int[][] transitions = new int[stateCount][stateCount];\n\n    for (int i = 0; i < stateCount; i++) {\n        for (int j = 0; j < stateCount; j++) {\n            int dominant = getDominant(i, j);\n            transitions[i][j] = dominant;\n        }\n    }\n\n    double[][] probabilities = new double[2][stateCount];\n    probabilities[0][stateCount - 1] = 1.0;\n\n    for (int i = 0; i < D; i++) {\n        int curr = i % 2;\n        int next = 1 - curr;\n        Arrays.fill(probabilities[next], 0);\n\n        for (int j = 0; j < stateCount; j++) {\n            for (int k = 0; k < stateCount; k++) {\n                probabilities[next][j] += probabilities[curr][k] * genotypeProbabilities[transitions[j][k]];\n            }\n        }\n    }\n\n    double[] result = new double[N + 1];\n    Arrays.fill(result, 0d);\n\n    for (int i = 0; i < stateCount; i++) {\n        int popCount = populationCount(i);\n        result[popCount] += probabilities[D % 2][i];\n    }\n\n    for (int i = 0; i < N + 1; i++) {\n        result[i] /= Math.pow(M, D);\n    }\n\n    return result;\n}\n\nprivate int getDominant(int a, int b) {\n    if (a > b) {\n        return getDominant(b, a);\n    }\n\n    int dominant = 0;\n\n    for (int i = 0; i < D; i++) {\n        int bit = 1 << i;\n        if ((b & bit) != 0) {\n            dominant += ((a & bit) == 0 ? 1 : 2);\n        }\n    }\n\n    return dominant;\n}\n\nprivate int populationCount(int i) {\n    int count = 0;\n\n    while (i > 0) {\n        count++;\n        i &= i - 1;\n    }\n\n    return count;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}