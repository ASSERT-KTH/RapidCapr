{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          } else if (n.getFirstChild().getType() == Token.NAME) {\n            defineDeclaredFunction(n.getFirstChild(), n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LET:\n        case Token.CONST:\n          defineBlockScopedDeclaration(n, parent);\n          break;\n      }\n      if (n.isFunction() && parent.getType() == Token.EXPR_RESULT) {\n        handleFunctionInputs(parent);\n      } else if (n.isClass()) {\n        // handle class inputs for class expressions\n        Node inputs = n.getSecondChild();\n        if (inputs != null) {\n          handleInputs(inputs);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f0303cff 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,10 +1451,11 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (n.getFirstChild().getType() == Token.NAME) {\n+            defineDeclaredFunction(n.getFirstChild(), n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1462,7 +1463,19 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LET:\n+        case Token.CONST:\n+          defineBlockScopedDeclaration(n, parent);\n+          break;\n       }\n+      if (n.isFunction() && parent.getType() == Token.EXPR_RESULT) {\n+        handleFunctionInputs(parent);\n+      } else if (n.isClass()) {\n+        // handle class inputs for class expressions\n+        Node inputs = n.getSecondChild();\n+        if (inputs != null) {\n+          handleInputs(inputs);\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}