{
    "patch": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        Class<?> rhsClass = rhs.getClass();\n\n        if (lhsClass.isArray()) {\n            if (!rhsClass.isArray()) {\n                this.setEquals(false);\n                return this;\n            }\n            int lhsLen = Array.getLength(lhs);\n            int rhsLen = Array.getLength(rhs);\n            if (lhsLen != rhsLen) {\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0; i < lhsLen; i++) {\n                Object lhsVal = Array.get(lhs, i);\n                Object rhsVal = Array.get(rhs, i);\n                boolean bothNull = lhsVal == null && rhsVal == null;\n                if (!bothNull && (lhsVal == null || rhsVal == null || !append(lhsVal, rhsVal).isEquals())) {\n                    this.setEquals(false);\n                    return this;\n                }\n            }\n        } else {\n            isEquals = lhs.equals(rhs);\n        }\n        return this;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..d0e5a43c 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -375,35 +375,31 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+        Class<?> lhsClass = lhs.getClass();\n+        Class<?> rhsClass = rhs.getClass();\n+\n+        if (lhsClass.isArray()) {\n+            if (!rhsClass.isArray()) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            int lhsLen = Array.getLength(lhs);\n+            int rhsLen = Array.getLength(rhs);\n+            if (lhsLen != rhsLen) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0; i < lhsLen; i++) {\n+                Object lhsVal = Array.get(lhs, i);\n+                Object rhsVal = Array.get(rhs, i);\n+                boolean bothNull = lhsVal == null && rhsVal == null;\n+                if (!bothNull && (lhsVal == null || rhsVal == null || !append(lhsVal, rhsVal).isEquals())) {\n+                    this.setEquals(false);\n+                    return this;\n+                }\n+            }\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            isEquals = lhs.equals(rhs);\n         }\n         return this;\n     }",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}