{
    "patch": "    Object[] args = invocation.getRawArguments();\n    for (int i = 0; i < args.length; i++) {\n        Object arg = args[i];\n        boolean matched = false;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (position == i && !(m instanceof VarargMatcher)) {\n                    ((CapturesArguments) m).captureFrom(arg);\n                    matched = true;\n                } else if (position < args.length - 1 && position < i && m instanceof VarargMatcher) {\n                    ((CapturesArguments) m).captureFrom(Arrays.copyOfRange(args, i, args.length));\n                    matched = true;\n                }\n            }\n            if (matched) {\n                break;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..a5fb5fc71 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,26 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] args = invocation.getRawArguments();\n+    for (int i = 0; i < args.length; i++) {\n+        Object arg = args[i];\n+        boolean matched = false;\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                if (position == i && !(m instanceof VarargMatcher)) {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                    matched = true;\n+                } else if (position < args.length - 1 && position < i && m instanceof VarargMatcher) {\n+                    ((CapturesArguments) m).captureFrom(Arrays.copyOfRange(args, i, args.length));\n+                    matched = true;\n+                }\n+            }\n+            if (matched) {\n+                break;\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}