{
    "patch": "        // Maybe STRING, GET, SET\n        if (child.isString()) {\n          // We should never see a mix of numbers and strings.\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        } else {\n          Preconditions.checkState(\n              child.isGetterDef() || child.isSetterDef(),\n              \"expected GET or SET def, but was %s\", child);\n          Node functionName = child.getFirstChild();\n          String name = functionName.getString();\n          T type = getEmptyType(AbstractTypedScopeCreator.RT_VALUE);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(functionName,\n                                     processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), functionName, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name, \"function\", n.toString(), \"\"));\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..c4c7e47a 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,44 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        // Maybe STRING, GET, SET\n+        if (child.isString()) {\n+          // We should never see a mix of numbers and strings.\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+                                     processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION, name,\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+          }\n+        } else {\n+          Preconditions.checkState(\n+              child.isGetterDef() || child.isSetterDef(),\n+              \"expected GET or SET def, but was %s\", child);\n+          Node functionName = child.getFirstChild();\n+          String name = functionName.getString();\n+          T type = getEmptyType(AbstractTypedScopeCreator.RT_VALUE);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(functionName,\n+                                     processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), functionName, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION, name, \"function\", n.toString(), \"\"));\n+            }\n+          }\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}