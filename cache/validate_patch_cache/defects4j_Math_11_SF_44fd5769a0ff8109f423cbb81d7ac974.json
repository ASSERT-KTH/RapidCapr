{
    "patch": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        double sqrtDet = FastMath.sqrt(Math.abs(covarianceMatrixDeterminant));\n        double factor = 1 / (FastMath.pow(2 * FastMath.PI, dim / 2) * sqrtDet);\n        double exponent = getExponentTerm(vals);\n\n        return factor * exponent;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..b23c70e23 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -180,9 +180,11 @@ public class MultivariateNormalDistribution\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+        double sqrtDet = FastMath.sqrt(Math.abs(covarianceMatrixDeterminant));\n+        double factor = 1 / (FastMath.pow(2 * FastMath.PI, dim / 2) * sqrtDet);\n+        double exponent = getExponentTerm(vals);\n+\n+        return factor * exponent;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.016586852690035857> but was:<0.041577073939983146>",
    "test_result": "FAIL"
}