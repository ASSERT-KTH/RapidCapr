{
    "patch": "      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n        // Set the line number of the function node to the line number of the\n        // opening token of the block in which the anonymous function appears.\n        if (functionNode.getParent() != null) {\n          Name anonName = new Name();\n          anonName.setIdentifier(\"\");\n          Node parent = functionNode.getParent();\n          anonName.setLineno(parent.getLineno());\n          anonName.setCharno(parent.getCharno());\n          functionNode.setFunctionName(anonName);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..3b2dab0f 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,21 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+        // Set the line number of the function node to the line number of the\n+        // opening token of the block in which the anonymous function appears.\n+        if (functionNode.getParent() != null) {\n+          Name anonName = new Name();\n+          anonName.setIdentifier(\"\");\n+          Node parent = functionNode.getParent();\n+          anonName.setLineno(parent.getLineno());\n+          anonName.setCharno(parent.getCharno());\n+          functionNode.setFunctionName(anonName);\n+        }\n+      }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}