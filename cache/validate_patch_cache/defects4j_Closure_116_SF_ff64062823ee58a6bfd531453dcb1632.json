{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  List<Node> args = new ArrayList<>();\n  for (Node arg = callNode.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {\n    args.add(arg);\n  }\n\n  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  for (Node arg : args) {\n    if (arg == null) {\n      // If there are more parameters than arguments, return NO.\n      return CanInlineResult.NO;\n    }\n\n    // Handle functions called via 'call' or 'apply' that have a this-object as the first\n    // parameter, which is not part of the called function's parameters.\n    boolean isThis = !callNode.getFirstChild().isName() && arg.isThis();\n    if (!isThis) {\n      if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n        // If the argument has side effects, return NO.\n        return CanInlineResult.NO;\n      }\n\n      if (param.isName()) {\n        // If the parameter is a simple name, the argument must not be used more than once in the\n        // current block.\n        String paramName = param.getString();\n        if (NodeUtil.getNameReferenceCount(fnNode.getLastChild(), paramName) > 1\n            && NodeUtil.mayEffectMutableState(arg.getNext(), compiler)) {\n          return CanInlineResult.NO;\n        }\n      } else {\n        // If the parameter is not a simple name, it may be referenced in an expression so we can't\n        // inline the argument directly.\n        return CanInlineResult.NO;\n      }\n    }\n\n    param = param.getNext();\n  }\n\n  // If there are more arguments than parameters, return NO.\n  if (param != null) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..d897a7f0 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,58 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  List<Node> args = new ArrayList<>();\n+  for (Node arg = callNode.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {\n+    args.add(arg);\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  for (Node arg : args) {\n+    if (arg == null) {\n+      // If there are more parameters than arguments, return NO.\n+      return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    // Handle functions called via 'call' or 'apply' that have a this-object as the first\n+    // parameter, which is not part of the called function's parameters.\n+    boolean isThis = !callNode.getFirstChild().isName() && arg.isThis();\n+    if (!isThis) {\n+      if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+        // If the argument has side effects, return NO.\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      if (param.isName()) {\n+        // If the parameter is a simple name, the argument must not be used more than once in the\n+        // current block.\n+        String paramName = param.getString();\n+        if (NodeUtil.getNameReferenceCount(fnNode.getLastChild(), paramName) > 1\n+            && NodeUtil.mayEffectMutableState(arg.getNext(), compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+      } else {\n+        // If the parameter is not a simple name, it may be referenced in an expression so we can't\n+        // inline the argument directly.\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    param = param.getNext();\n+  }\n+\n+  // If there are more arguments than parameters, return NO.\n+  if (param != null) {\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}