{
    "patch": "    \n    // For setter methods in object literals or if function is arrow\n    // don't remove parameters.\n    Preconditions.checkState(\n        function.isFunction() || function.isArrowFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Check if the function is invoked with name of formal parameter.\n    // For example: (function(a) {alert(a)})(\"Test\")\n    // Not optimizing this call will rename parameter 'a' and break the code.\n    // So, if the function is called anonymously and passed argument to a\n    // formal parameter, then return;without optimization for the sake of safety.\n    if (function.getFirstChild().isEmpty()) {\n      List<Var> params = fnScope.getVarList();\n      Node callNode = function.getParent();\n      if (NodeUtil.isCall(callNode)) {\n        for (int i = 1; i < callNode.getChildCount(); i++) {\n          Node argumentNode = callNode.getChildAtIndex(i);\n          if (argumentNode.isName()) {\n            String argumentName = argumentNode.getString();\n            for (Var param : params) {\n              if (argumentName.equals(param.getName())) {\n                // Do not optimize.\n                return;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f3e2482d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    // For setter methods in object literals or if function is arrow\n+    // don't remove parameters.\n+    Preconditions.checkState(\n+        function.isFunction() || function.isArrowFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // Check if the function is invoked with name of formal parameter.\n+    // For example: (function(a) {alert(a)})(\"Test\")\n+    // Not optimizing this call will rename parameter 'a' and break the code.\n+    // So, if the function is called anonymously and passed argument to a\n+    // formal parameter, then return;without optimization for the sake of safety.\n+    if (function.getFirstChild().isEmpty()) {\n+      List<Var> params = fnScope.getVarList();\n+      Node callNode = function.getParent();\n+      if (NodeUtil.isCall(callNode)) {\n+        for (int i = 1; i < callNode.getChildCount(); i++) {\n+          Node argumentNode = callNode.getChildAtIndex(i);\n+          if (argumentNode.isName()) {\n+            String argumentName = argumentNode.getString();\n+            for (Var param : params) {\n+              if (argumentName.equals(param.getName())) {\n+                // Do not optimize.\n+                return;\n+              }\n+            }\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}