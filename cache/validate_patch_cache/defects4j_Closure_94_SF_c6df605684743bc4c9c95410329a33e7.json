{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITNOT:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.ADD:\n        case Token.SUB:\n        case Token.MUL:\n        case Token.DIV:\n        case Token.MOD:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n        case Token.LT:\n        case Token.LE:\n        case Token.GT:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n            return isValidDefineValue(val.getFirstChild(), defines)\n                    && isValidDefineValue(val.getLastChild(), defines);\n        // Uniary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n            return isValidDefineValue(val.getFirstChild(), defines);\n        // Variables and property names are valid if they are defines.\n        case Token.NAME:\n        case Token.GETPROP:\n            String name = val.getString();\n            if (defines.contains(name)) {\n                return true;\n            }\n            if (!val.isQualifiedName()) {\n                return false;\n            }\n            // Check the name components.\n            String[] parts = name.split(\"\\\\.\");\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < parts.length; i++) {\n                if (i > 0) {\n                    sb.append('.');\n                }\n                sb.append(parts[i]);\n                if (defines.contains(sb.toString())) {\n                    return true;\n                }\n            }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..be2921ac 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,63 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n     switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n-\n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n-        }\n+        case Token.STRING:\n+        case Token.NUMBER:\n+        case Token.TRUE:\n+        case Token.FALSE:\n+            return true;\n+        // Binary operators are only valid if both children are valid.\n+        case Token.BITAND:\n+        case Token.BITNOT:\n+        case Token.BITOR:\n+        case Token.BITXOR:\n+        case Token.ADD:\n+        case Token.SUB:\n+        case Token.MUL:\n+        case Token.DIV:\n+        case Token.MOD:\n+        case Token.LSH:\n+        case Token.RSH:\n+        case Token.URSH:\n+        case Token.LT:\n+        case Token.LE:\n+        case Token.GT:\n+        case Token.GE:\n+        case Token.EQ:\n+        case Token.NE:\n+            return isValidDefineValue(val.getFirstChild(), defines)\n+                    && isValidDefineValue(val.getLastChild(), defines);\n+        // Uniary operators are valid if the child is valid.\n+        case Token.NOT:\n+        case Token.NEG:\n+            return isValidDefineValue(val.getFirstChild(), defines);\n+        // Variables and property names are valid if they are defines.\n+        case Token.NAME:\n+        case Token.GETPROP:\n+            String name = val.getString();\n+            if (defines.contains(name)) {\n+                return true;\n+            }\n+            if (!val.isQualifiedName()) {\n+                return false;\n+            }\n+            // Check the name components.\n+            String[] parts = name.split(\"\\\\.\");\n+            StringBuilder sb = new StringBuilder();\n+            for (int i = 0; i < parts.length; i++) {\n+                if (i > 0) {\n+                    sb.append('.');\n+                }\n+                sb.append(parts[i]);\n+                if (defines.contains(sb.toString())) {\n+                    return true;\n+                }\n+            }\n     }\n     return false;\n-  }\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}