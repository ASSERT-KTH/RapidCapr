{
    "patch": "public static double regularizedGammaPositivePositive(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        // Use the series representation.\n        double sum = 1.0 / a;\n        double term = sum;\n        for (int i = 1; i < maxIterations && Math.abs(term) > epsilon; i++) {\n            term *= x / (a + i);\n            sum += term;\n        }\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    } else {\n        // Use the continued fraction representation.\n        double b = x + 1.0 - a;\n        double c = Double.POSITIVE_INFINITY;\n        double d = 1.0 / b;\n        double h = d;\n        for (int i = 1; i < maxIterations; i++) {\n            double an = -i * (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) < epsilon) {\n                d = epsilon;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < epsilon) {\n                c = epsilon;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < epsilon) {\n                break;\n            }\n        }\n        return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n    }\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a8d757f44 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,59 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaPositivePositive(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        // Use the series representation.\n+        double sum = 1.0 / a;\n+        double term = sum;\n+        for (int i = 1; i < maxIterations && Math.abs(term) > epsilon; i++) {\n+            term *= x / (a + i);\n+            sum += term;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    } else {\n+        // Use the continued fraction representation.\n+        double b = x + 1.0 - a;\n+        double c = Double.POSITIVE_INFINITY;\n+        double d = 1.0 / b;\n+        double h = d;\n+        for (int i = 1; i < maxIterations; i++) {\n+            double an = -i * (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) < epsilon) {\n+                d = epsilon;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) < epsilon) {\n+                c = epsilon;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < epsilon) {\n+                break;\n+            }\n+        }\n+        return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n+    }\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}