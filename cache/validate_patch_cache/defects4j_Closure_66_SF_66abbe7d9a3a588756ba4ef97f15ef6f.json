{
    "patch": "public double getTypedPercent(String jsonStr) {\n    int totalFields = 0;\n    int typedFields = 0;\n    try {\n        JSONObject obj = new JSONObject(jsonStr);\n        JSONArray fields = obj.getJSONArray(\"fields\");\n        for (int i = 0; i < fields.length(); i++) {\n            JSONObject field = fields.getJSONObject(i);\n            String typeStr = field.optString(\"type\", \"\");\n            if (!\"\".equals(typeStr)) {\n                totalFields++;\n                if (typeStr.equals(\"typed\")) {\n                    typedFields++;\n                }\n            }\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    if (totalFields == 0) {\n        return 0.0;\n    }\n    double percent = 100.0 * typedFields / totalFields;\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f312347e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String jsonStr) {\n+    int totalFields = 0;\n+    int typedFields = 0;\n+    try {\n+        JSONObject obj = new JSONObject(jsonStr);\n+        JSONArray fields = obj.getJSONArray(\"fields\");\n+        for (int i = 0; i < fields.length(); i++) {\n+            JSONObject field = fields.getJSONObject(i);\n+            String typeStr = field.optString(\"type\", \"\");\n+            if (!\"\".equals(typeStr)) {\n+                totalFields++;\n+                if (typeStr.equals(\"typed\")) {\n+                    typedFields++;\n+                }\n+            }\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    if (totalFields == 0) {\n+        return 0.0;\n+    }\n+    double percent = 100.0 * typedFields / totalFields;\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}