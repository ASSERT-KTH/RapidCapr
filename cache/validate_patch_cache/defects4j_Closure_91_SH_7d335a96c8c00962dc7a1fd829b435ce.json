{
    "patch": "if (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle\n    // nested assignments properly (e.g., (a = this).property = c;),\n    // assignLhsChild should not be overridden.\n\n    // Don't traverse assignments to prototype properties/subproperties and defined in object literals\n    if (NodeUtil.isGet(lhs)) {\n      if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n    } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n      return false;\n    }\n\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs;\n    }\n  } else {\n    // Only traverse the right side if it's not an assignment to a prototype\n    // property or subproperty.\n\n    // Don't traverse assignments to prototype properties/subproperties that are object literal keys\n    if (NodeUtil.isGet(lhs)) {\n      if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n    } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n      return false; \n    }\n\n    if (n != parent.getLastChild()) {\n      // Only traverse the right side of the assignment once.\n      return false;\n    }\n\n    // Only traverse functions and variables on the right side of the assignment\n    int type = n.getType();\n    if (type != Token.FUNCTION && !NodeUtil.isName(n)) {\n      return false;\n    }\n  }\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8b2b75a1 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,65 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle\n+    // nested assignments properly (e.g., (a = this).property = c;),\n+    // assignLhsChild should not be overridden.\n+\n+    // Don't traverse assignments to prototype properties/subproperties and defined in object literals\n+    if (NodeUtil.isGet(lhs)) {\n+      if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+    } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+      return false;\n+    }\n+\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs;\n+    }\n+  } else {\n+    // Only traverse the right side if it's not an assignment to a prototype\n+    // property or subproperty.\n+\n+    // Don't traverse assignments to prototype properties/subproperties that are object literal keys\n+    if (NodeUtil.isGet(lhs)) {\n+      if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+    } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+      return false; \n+    }\n+\n+    if (n != parent.getLastChild()) {\n+      // Only traverse the right side of the assignment once.\n+      return false;\n+    }\n+\n+    // Only traverse functions and variables on the right side of the assignment\n+    int type = n.getType();\n+    if (type != Token.FUNCTION && !NodeUtil.isName(n)) {\n+      return false;\n+    }\n+  }\n+}\n+\n+return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}