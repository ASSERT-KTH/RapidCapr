{
    "patch": "public static double regularizedGamma(double a, double x, double accuracy) {\n\n    double g = incompleteGamma(a, x, accuracy);\n\n    return g / gamma(a);\n}\n\npublic static double incompleteGamma(double a, double x, double accuracy) {\n\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n\n    if (x == 0) {\n        return 0;\n    }\n\n    if (x >= a + 1) {\n        return 1 - incompleteGammaComplement(a, x, accuracy);\n    }\n\n    double term = 1 / a;\n    double sum = term;\n    int i = 1;\n\n    do {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n    } while (term > sum * accuracy);\n\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double incompleteGammaComplement(double a, double x, double accuracy) {\n\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n\n    if (x == 0) {\n        return 1;\n    }\n\n    if (x < a + 1) {\n        return 1 - incompleteGamma(a, x, accuracy);\n    }\n\n    double term = 1 / (a + 1);\n    double sum = term;\n    int i = 1;\n\n    do {\n        term *= x / (a + 1 - i);\n        sum += term;\n        i++;\n    } while (term > sum * accuracy);\n\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a + 1));\n}\n\npublic static double gamma(double x) {\n\n    double[] p = {\n            0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n            771.32342877765313, -176.61502916214059, 12.507343278686905,\n            -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7\n    };\n\n    int g = 7;\n\n    if (x < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n    }\n\n    x -= 1;\n    double a = p[0];\n    double t = x + g + 0.5;\n    for (int i = 1; i < p.length; i++) {\n        a += p[i] / (x + i);\n    }\n\n    return Math.sqrt(2 * Math.PI) * Math.pow(t, x + 0.5) * Math.exp(-t) * a;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 101.19539853003;\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ee132241c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,96 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x, double accuracy) {\n+\n+    double g = incompleteGamma(a, x, accuracy);\n+\n+    return g / gamma(a);\n+}\n+\n+public static double incompleteGamma(double a, double x, double accuracy) {\n+\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    if (x == 0) {\n+        return 0;\n+    }\n+\n+    if (x >= a + 1) {\n+        return 1 - incompleteGammaComplement(a, x, accuracy);\n+    }\n+\n+    double term = 1 / a;\n+    double sum = term;\n+    int i = 1;\n+\n+    do {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+    } while (term > sum * accuracy);\n+\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double incompleteGammaComplement(double a, double x, double accuracy) {\n+\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    if (x == 0) {\n+        return 1;\n+    }\n+\n+    if (x < a + 1) {\n+        return 1 - incompleteGamma(a, x, accuracy);\n+    }\n+\n+    double term = 1 / (a + 1);\n+    double sum = term;\n+    int i = 1;\n+\n+    do {\n+        term *= x / (a + 1 - i);\n+        sum += term;\n+        i++;\n+    } while (term > sum * accuracy);\n+\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a + 1));\n+}\n+\n+public static double gamma(double x) {\n+\n+    double[] p = {\n+            0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n+            771.32342877765313, -176.61502916214059, 12.507343278686905,\n+            -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7\n+    };\n+\n+    int g = 7;\n+\n+    if (x < 0.5) {\n+        return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n+    }\n+\n+    x -= 1;\n+    double a = p[0];\n+    double t = x + g + 0.5;\n+    for (int i = 1; i < p.length; i++) {\n+        a += p[i] / (x + i);\n+    }\n+\n+    return Math.sqrt(2 * Math.PI) * Math.pow(t, x + 0.5) * Math.exp(-t) * a;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 101.19539853003;\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}