{
    "patch": "if (rvalInt < 0 || rvalInt >= 32) {\n   error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n   return n;\n}\n\nlong result;\nswitch (n.getType()) {\n   case Token.LSH:\n       result = ((long) lvalInt) << rvalInt;\n       break;\n   case Token.RSH:\n       result = ((long) lvalInt) >> rvalInt;\n       break;\n   case Token.URSH:\n       result = Integer.toUnsignedLong(lvalInt) >>> rvalInt;\n       break;\n   default:\n       throw new AssertionError(\"Unknown shift operator: \" +\n           Node.tokenToName(n.getType()));\n}\n\nNode newNumber = Node.newNumber(result);\nn.getParent().replaceChild(n, newNumber);\nreportCodeChange();\n\nreturn newNumber;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..cbb5e846 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,32 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (rvalInt < 0 || rvalInt >= 32) {\n+   error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+   return n;\n+}\n+\n+long result;\n+switch (n.getType()) {\n+   case Token.LSH:\n+       result = ((long) lvalInt) << rvalInt;\n+       break;\n+   case Token.RSH:\n+       result = ((long) lvalInt) >> rvalInt;\n+       break;\n+   case Token.URSH:\n+       result = Integer.toUnsignedLong(lvalInt) >>> rvalInt;\n+       break;\n+   default:\n+       throw new AssertionError(\"Unknown shift operator: \" +\n+           Node.tokenToName(n.getType()));\n+}\n+\n+Node newNumber = Node.newNumber(result);\n+n.getParent().replaceChild(n, newNumber);\n+reportCodeChange();\n+\n+return newNumber;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: variable result is already defined in method tryFoldShift(Node,Node,Node)",
    "test_result": "ERROR"
}