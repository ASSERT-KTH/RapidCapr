{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        return;\n    }\n    Factory factory = (Factory) mock;\n    try {\n        Class<?> mockClass = factory.getClass().getSuperclass();\n        Constructor<?> constructor = mockClass.getDeclaredConstructor(MockHandler.class);\n        constructor.setAccessible(true);\n        Constructor<?> oldConstructor = mockClass.getDeclaredConstructor(MockHandlerInterface.class);\n        oldConstructor.setAccessible(true);\n        MockHandler<T> oldMockHandler = (MockHandler<T>) oldConstructor.newInstance(factory.getCallback(0));\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        factory.setCallback(0, newFilter);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..504abd127 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        return;\n+    }\n+    Factory factory = (Factory) mock;\n+    try {\n+        Class<?> mockClass = factory.getClass().getSuperclass();\n+        Constructor<?> constructor = mockClass.getDeclaredConstructor(MockHandler.class);\n+        constructor.setAccessible(true);\n+        Constructor<?> oldConstructor = mockClass.getDeclaredConstructor(MockHandlerInterface.class);\n+        oldConstructor.setAccessible(true);\n+        MockHandler<T> oldMockHandler = (MockHandler<T>) oldConstructor.newInstance(factory.getCallback(0));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        factory.setCallback(0, newFilter);\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}