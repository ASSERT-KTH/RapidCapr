{
    "patch": "    private static Object[] createComposite(List<Object> elementPairs) {\n        int size = elementPairs.size();\n        if (size == 0) {\n            return new Object[]{null, null};\n        } else if (size == 1) {\n            Object[] comp = new Object[2];\n            comp[0] = elementPairs.get(0);\n            comp[1] = elementPairs.get(0);\n            checkUnsupported((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            return comp;\n        } else {\n            Object first = elementPairs.get(0);\n            if (first instanceof Separator) {\n                Object[] comp = createComposite(elementPairs.subList(2, size));\n                Separator sep = (Separator) first;\n                if (comp[0] != null) {\n                    sep = sep.start((PeriodPrinter) comp[0]);\n                }\n                if (comp[1] != null) {\n                    sep = sep.start((PeriodParser) comp[1]);\n                }\n                checkUnsupported((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n                return new Object[]{sep, sep};\n            } else {\n                Object[] comp = createComposite(elementPairs.subList(1, size));\n                checkUnsupported((PeriodPrinter) first, (PeriodParser) comp[1]);\n                if (comp[0] == null) {\n                    comp[0] = first;\n                    comp[1] = first;\n                } else {\n                    comp[0] = new Composite((PeriodPrinter) first, (PeriodPrinter) comp[0]);\n                    comp[1] = new Composite((PeriodParser) first, (PeriodParser) comp[1]);\n                }\n                return comp;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..83b76db4 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,41 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n+    private static Object[] createComposite(List<Object> elementPairs) {\n         int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        if (size == 0) {\n+            return new Object[]{null, null};\n+        } else if (size == 1) {\n+            Object[] comp = new Object[2];\n+            comp[0] = elementPairs.get(0);\n+            comp[1] = elementPairs.get(0);\n+            checkUnsupported((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return comp;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            Object first = elementPairs.get(0);\n+            if (first instanceof Separator) {\n+                Object[] comp = createComposite(elementPairs.subList(2, size));\n+                Separator sep = (Separator) first;\n+                if (comp[0] != null) {\n+                    sep = sep.start((PeriodPrinter) comp[0]);\n+                }\n+                if (comp[1] != null) {\n+                    sep = sep.start((PeriodParser) comp[1]);\n+                }\n+                checkUnsupported((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+                return new Object[]{sep, sep};\n+            } else {\n+                Object[] comp = createComposite(elementPairs.subList(1, size));\n+                checkUnsupported((PeriodPrinter) first, (PeriodParser) comp[1]);\n+                if (comp[0] == null) {\n+                    comp[0] = first;\n+                    comp[1] = first;\n+                } else {\n+                    comp[0] = new Composite((PeriodPrinter) first, (PeriodPrinter) comp[0]);\n+                    comp[1] = new Composite((PeriodParser) first, (PeriodParser) comp[1]);\n+                }\n+                return comp;\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}