{
    "patch": "private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 1) {\n        return bounds[0];\n    } else {\n        for (Type bound : bounds) {\n            if (Object.class != bound) {\n                return bound;\n            }\n        }\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..811a7e993 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 1) {\n+        return bounds[0];\n+    } else {\n+        for (Type bound : bounds) {\n+            if (Object.class != bound) {\n+                return bound;\n+            }\n+        }\n+        return null;\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}