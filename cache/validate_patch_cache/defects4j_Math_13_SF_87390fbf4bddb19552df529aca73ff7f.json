{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final int n = m.getRowDimension();\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        if (!dec.getEigenvector(0).isNaN()) {\n            final double[] realEigenvalues = dec.getRealEigenvalues();\n            final RealMatrix v = dec.getV();\n            final RealMatrix vT = v.transpose();\n            final RealMatrix sqrtLambda = MatrixUtils.createRealDiagonalMatrix(\n                    Arrays.stream(realEigenvalues).map(Math::sqrt).toArray());\n\n            final RealMatrix sqrtM = v.multiply(sqrtLambda).multiply(vT);\n            return sqrtM.scalarMultiply(2.0 * n / (n + 1));\n        } else {\n            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n        }\n    } catch (OutOfMemoryError e) {\n        System.gc();\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1482cdcb5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        if (!dec.getEigenvector(0).isNaN()) {\n+            final double[] realEigenvalues = dec.getRealEigenvalues();\n+            final RealMatrix v = dec.getV();\n+            final RealMatrix vT = v.transpose();\n+            final RealMatrix sqrtLambda = MatrixUtils.createRealDiagonalMatrix(\n+                    Arrays.stream(realEigenvalues).map(Math::sqrt).toArray());\n+\n+            final RealMatrix sqrtM = v.multiply(sqrtLambda).multiply(vT);\n+            return sqrtM.scalarMultiply(2.0 * n / (n + 1));\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+        }\n+    } catch (OutOfMemoryError e) {\n+        System.gc();\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}