{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())\n        || !NodeUtil.isFunctionExpression(function) && !function.getFirstChild().isName()) {\n      // The parameters object literal setters and function declarations with\n      // computed names can not be transformed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    if (!modifyCallSites || !callSiteOptimizer.canModifyCallers(function)) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      Node prevArg = null;\n      while (lastArg != null) {\n        String name = getFunctionParameterName(lastArg);\n        if (name == null) { // cannot remove destructuring patterns\n          return;\n        }\n        Var var = fnScope.getVar(name);\n        if (var == null || !referenced.contains(var)) {\n          if (argList.getOptionalArity() == 0) {\n            return;\n          }\n          argList.removeChild(lastArg);\n          if (prevArg == null) {\n            function.removeFirstChild(); // clear the name from a named function\n          }\n          compiler.reportCodeChange();\n          if (lastArg.isDefaultValue() && lastArg.getFirstChild().isName()\n              && var != null && !fnScope.isDeclared(var.getName(), false)) {\n            // Don't remove the default value if its corresponding name refers to an\n            // undeclared variable; doing so changes where the global would be\n            // declared.\n            argList.addChildToFront(lastArg.detach());\n            return;\n          }\n          lastArg = argList.getLastChild(); // move to next-to-last arg\n        } else {\n          return;\n        }\n        prevArg = lastArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6c314e49 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,66 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())\n+        || !NodeUtil.isFunctionExpression(function) && !function.getFirstChild().isName()) {\n+      // The parameters object literal setters and function declarations with\n+      // computed names can not be transformed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    if (!modifyCallSites || !callSiteOptimizer.canModifyCallers(function)) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      Node prevArg = null;\n+      while (lastArg != null) {\n+        String name = getFunctionParameterName(lastArg);\n+        if (name == null) { // cannot remove destructuring patterns\n+          return;\n+        }\n+        Var var = fnScope.getVar(name);\n+        if (var == null || !referenced.contains(var)) {\n+          if (argList.getOptionalArity() == 0) {\n+            return;\n+          }\n+          argList.removeChild(lastArg);\n+          if (prevArg == null) {\n+            function.removeFirstChild(); // clear the name from a named function\n+          }\n+          compiler.reportCodeChange();\n+          if (lastArg.isDefaultValue() && lastArg.getFirstChild().isName()\n+              && var != null && !fnScope.isDeclared(var.getName(), false)) {\n+            // Don't remove the default value if its corresponding name refers to an\n+            // undeclared variable; doing so changes where the global would be\n+            // declared.\n+            argList.addChildToFront(lastArg.detach());\n+            return;\n+          }\n+          lastArg = argList.getLastChild(); // move to next-to-last arg\n+        } else {\n+          return;\n+        }\n+        prevArg = lastArg;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}