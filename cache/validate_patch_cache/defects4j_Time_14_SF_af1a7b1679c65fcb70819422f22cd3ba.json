{
    "patch": "        // the added field is month\n        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n            Chronology chrono = partial.getChronology();\n            int year = chrono.getYear(partial, values[fieldIndex]);\n            int month = values[fieldIndex] + valueToAdd;\n            int day = Math.min(values[partial.getFieldIndex(DateTimeFieldType.dayOfMonth())], \n                               chrono.getDaysInMonth(year, month));\n            int[] newValues = ArrayUtils.clone(values);\n            newValues[fieldIndex] = month;\n            newValues[partial.getFieldIndex(DateTimeFieldType.dayOfMonth())] = day;\n            return newValues;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..88cf63f5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,17 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+        // the added field is month\n+        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n+            Chronology chrono = partial.getChronology();\n+            int year = chrono.getYear(partial, values[fieldIndex]);\n+            int month = values[fieldIndex] + valueToAdd;\n+            int day = Math.min(values[partial.getFieldIndex(DateTimeFieldType.dayOfMonth())], \n+                               chrono.getDaysInMonth(year, month));\n+            int[] newValues = ArrayUtils.clone(values);\n+            newValues[fieldIndex] = month;\n+            newValues[partial.getFieldIndex(DateTimeFieldType.dayOfMonth())] = day;\n+            return newValues;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}