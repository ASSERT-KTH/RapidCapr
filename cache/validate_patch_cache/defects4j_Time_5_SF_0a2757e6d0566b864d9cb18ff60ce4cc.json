{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        boolean conversionMonthUsed = (type.getFieldIndex(DurationFieldType.months()) >= 0);\n        boolean conversionYearUsed = (type.getFieldIndex(DurationFieldType.years()) >= 0);\n\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        long newMillis =  ISOChronology.getInstanceUTC().add(null, millis, years, months);\n        years = 0;\n        months = 0;\n\n        Period result = new Period(newMillis, type, ISOChronology.getInstanceUTC());\n\n        if (conversionMonthUsed || conversionYearUsed) {\n            int years = getYears();\n            int months = getMonths();\n            if (years != 0 || months != 0) {\n                years = FieldUtils.safeAdd(years, months / 12);\n                months = months % 12;\n                if (years != 0 && conversionYearUsed) {\n                    result = result.withYears(years);\n                }\n                if (months != 0 && conversionMonthUsed) {\n                    result = result.withMonths(months);\n                }\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..a2255ec5 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,23 +1615,34 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n+        boolean conversionMonthUsed = (type.getFieldIndex(DurationFieldType.months()) >= 0);\n+        boolean conversionYearUsed = (type.getFieldIndex(DurationFieldType.years()) >= 0);\n+\n         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+\n+        long newMillis =  ISOChronology.getInstanceUTC().add(null, millis, years, months);\n+        years = 0;\n+        months = 0;\n+\n+        Period result = new Period(newMillis, type, ISOChronology.getInstanceUTC());\n+\n+        if (conversionMonthUsed || conversionYearUsed) {\n+            int years = getYears();\n+            int months = getMonths();\n+            if (years != 0 || months != 0) {\n+                years = FieldUtils.safeAdd(years, months / 12);\n+                months = months % 12;\n+                if (years != 0 && conversionYearUsed) {\n+                    result = result.withYears(years);\n+                }\n+                if (months != 0 && conversionMonthUsed) {\n+                    result = result.withMonths(months);\n+                }\n             }\n         }\n         return result;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}