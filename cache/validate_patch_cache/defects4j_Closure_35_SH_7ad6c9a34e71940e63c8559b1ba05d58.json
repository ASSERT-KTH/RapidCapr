{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n        if (this.currentScope != null) {\n          // Report warnings for inferred properties.\n          JSErrorReporter warningReporter = this.currentScope.getErrorReporter().getTyped();\n          for (String inferredProp : objType.getInferredPropertyNames()) {\n            JSType inferredType =\n                objType.getOwnPropertyJSType(inferredProp).withLocation(null);\n            warningReporter.warning(\n                JSError.make(\n                    INFERRED_PROPERTY,\n                    inferredProp,\n                    objType.getSourceForInferredProperty(inferredProp)),\n                null,\n                inferredType);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2b9748c4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1132,7 +1132,21 @@ class TypeInference\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n+        if (this.currentScope != null) {\n+          // Report warnings for inferred properties.\n+          JSErrorReporter warningReporter = this.currentScope.getErrorReporter().getTyped();\n+          for (String inferredProp : objType.getInferredPropertyNames()) {\n+            JSType inferredType =\n+                objType.getOwnPropertyJSType(inferredProp).withLocation(null);\n+            warningReporter.warning(\n+                JSError.make(\n+                    INFERRED_PROPERTY,\n+                    inferredProp,\n+                    objType.getSourceForInferredProperty(inferredProp)),\n+                null,\n+                inferredType);\n+          }\n+        }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}