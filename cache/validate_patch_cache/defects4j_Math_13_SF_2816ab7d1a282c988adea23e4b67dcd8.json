{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    if (m.getRowDimension() <= 1000) {\n        return dec.getSquareRoot();\n    } else {\n        final RealMatrix p = dec.getV();\n        final RealMatrix d = new Array2DRowRealMatrix(dec.getRealEigenvalues());\n        final RealMatrix invP = new LUDecomposition(p).getSolver().getInverse();\n        final RealMatrix sqrtD = new Array2DRowRealMatrix(d.getRowDimension(), d.getColumnDimension());\n        for (int i = 0; i < d.getRowDimension(); i++) {\n            sqrtD.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n        }\n        return p.multiply(sqrtD).multiply(invP);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b97c28c0d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    if (m.getRowDimension() <= 1000) {\n+        return dec.getSquareRoot();\n+    } else {\n+        final RealMatrix p = dec.getV();\n+        final RealMatrix d = new Array2DRowRealMatrix(dec.getRealEigenvalues());\n+        final RealMatrix invP = new LUDecomposition(p).getSolver().getInverse();\n+        final RealMatrix sqrtD = new Array2DRowRealMatrix(d.getRowDimension(), d.getColumnDimension());\n+        for (int i = 0; i < d.getRowDimension(); i++) {\n+            sqrtD.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n+        }\n+        return p.multiply(sqrtD).multiply(invP);\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}