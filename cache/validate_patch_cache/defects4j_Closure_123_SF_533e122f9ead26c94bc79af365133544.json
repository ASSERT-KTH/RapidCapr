{
    "patch": "import java.util.*;\n\npublic String fixCode(String code) {\n    String fixedCode = code;\n\n    // Find all for loops with \"in\"\n    int forLoopIndex = -1;\n    boolean inFound = false;\n    while (true) {\n        forLoopIndex = fixedCode.indexOf(\"for\", forLoopIndex + 1);\n        if (forLoopIndex == -1) {\n            break;\n        }\n        int leftParenIndex = fixedCode.indexOf(\"(\", forLoopIndex);\n        int rightParenIndex = -1;\n        int numOpenParens = 0;\n        for (int i = leftParenIndex; i < fixedCode.length(); i++) {\n            if (fixedCode.charAt(i) == '(') {\n                numOpenParens++;\n            } else if (fixedCode.charAt(i) == ')') {\n                numOpenParens--;\n            }\n            if (numOpenParens == 0) {\n                rightParenIndex = i;\n                break;\n            }\n        }\n        if (!fixedCode.substring(leftParenIndex + 1, rightParenIndex).contains(\"in\")) {\n            continue;\n        }\n        int leftCurlyBraceIndex = fixedCode.indexOf(\"{\", rightParenIndex);\n        int rightCurlyBraceIndex = -1;\n        numOpenParens = 0;\n        for (int i = leftCurlyBraceIndex; i < fixedCode.length(); i++) {\n            if (fixedCode.charAt(i) == '{') {\n                numOpenParens++;\n            } else if (fixedCode.charAt(i) == '}') {\n                numOpenParens--;\n            }\n            if (numOpenParens == 0) {\n                rightCurlyBraceIndex = i;\n                break;\n            }\n        }\n        if (!inFound) {\n            inFound = true;\n        } else {\n            inFound = false;\n        }\n\n        if (inFound) {\n            String iterable = fixedCode.substring(leftParenIndex + 1, rightParenIndex);\n            String[] components = iterable.split(\" in \");\n            String variable = components[0].trim();\n            String expression = components[1].trim();\n            String replacement = \"for (\" + variable + \" : Arrays.asList(\" + expression + \").toArray())\";\n            fixedCode = fixedCode.substring(0, leftParenIndex) + replacement + fixedCode.substring(rightCurlyBraceIndex + 1);\n            forLoopIndex = -1;\n        }\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..fab0c7f0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,68 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+import java.util.*;\n+\n+public String fixCode(String code) {\n+    String fixedCode = code;\n+\n+    // Find all for loops with \"in\"\n+    int forLoopIndex = -1;\n+    boolean inFound = false;\n+    while (true) {\n+        forLoopIndex = fixedCode.indexOf(\"for\", forLoopIndex + 1);\n+        if (forLoopIndex == -1) {\n+            break;\n+        }\n+        int leftParenIndex = fixedCode.indexOf(\"(\", forLoopIndex);\n+        int rightParenIndex = -1;\n+        int numOpenParens = 0;\n+        for (int i = leftParenIndex; i < fixedCode.length(); i++) {\n+            if (fixedCode.charAt(i) == '(') {\n+                numOpenParens++;\n+            } else if (fixedCode.charAt(i) == ')') {\n+                numOpenParens--;\n+            }\n+            if (numOpenParens == 0) {\n+                rightParenIndex = i;\n+                break;\n+            }\n+        }\n+        if (!fixedCode.substring(leftParenIndex + 1, rightParenIndex).contains(\"in\")) {\n+            continue;\n+        }\n+        int leftCurlyBraceIndex = fixedCode.indexOf(\"{\", rightParenIndex);\n+        int rightCurlyBraceIndex = -1;\n+        numOpenParens = 0;\n+        for (int i = leftCurlyBraceIndex; i < fixedCode.length(); i++) {\n+            if (fixedCode.charAt(i) == '{') {\n+                numOpenParens++;\n+            } else if (fixedCode.charAt(i) == '}') {\n+                numOpenParens--;\n+            }\n+            if (numOpenParens == 0) {\n+                rightCurlyBraceIndex = i;\n+                break;\n+            }\n+        }\n+        if (!inFound) {\n+            inFound = true;\n+        } else {\n+            inFound = false;\n+        }\n+\n+        if (inFound) {\n+            String iterable = fixedCode.substring(leftParenIndex + 1, rightParenIndex);\n+            String[] components = iterable.split(\" in \");\n+            String variable = components[0].trim();\n+            String expression = components[1].trim();\n+            String replacement = \"for (\" + variable + \" : Arrays.asList(\" + expression + \").toArray())\";\n+            fixedCode = fixedCode.substring(0, leftParenIndex) + replacement + fixedCode.substring(rightCurlyBraceIndex + 1);\n+            forLoopIndex = -1;\n+        }\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}