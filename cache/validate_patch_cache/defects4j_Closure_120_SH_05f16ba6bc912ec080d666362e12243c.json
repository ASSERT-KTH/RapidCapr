{
    "patch": "        FunctionType functionType = JSType.toMaybeFunctionType(ownerType);\n        if (functionType == null || !functionType.isConstructor()) {\n          return false;\n        }\n        boolean found = false;\n        Set<String> uninitializedNames = functionType.getUninitializedInstanceFields().keySet();\n        for (String uninitializedName : uninitializedNames) {\n          if (lhs.matchesQualifiedName(uninitializedName)) {\n            found = true;\n            break;\n          }\n        }\n        return found;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a1cbb641 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        FunctionType functionType = JSType.toMaybeFunctionType(ownerType);\n+        if (functionType == null || !functionType.isConstructor()) {\n+          return false;\n+        }\n+        boolean found = false;\n+        Set<String> uninitializedNames = functionType.getUninitializedInstanceFields().keySet();\n+        for (String uninitializedName : uninitializedNames) {\n+          if (lhs.matchesQualifiedName(uninitializedName)) {\n+            found = true;\n+            break;\n+          }\n+        }\n+        return found;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}