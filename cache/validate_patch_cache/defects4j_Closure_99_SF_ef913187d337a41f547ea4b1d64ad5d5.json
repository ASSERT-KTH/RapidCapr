{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n      }\n    } else if (parent != null && parent.getType() == Token.CLASS) {\n      // Don't traverse class members.\n      return false;\n    } else if (parent != null && parent.getType() == Token.MEMBER_FUNCTION_DEF) {\n      // Don't traverse class members.\n      return false;\n    } else if (parent != null && parent.getType() == Token.CALL) {\n      Node callee = parent.getFirstChild();\n\n      // Handle function calls that return an object, like goog.define, Object.create, etc.\n      if ((callee.getType() == Token.LP && callee.getFirstChild().getType() == Token.FUNCTION) ||\n          callee.getType() == Token.GETPROP ||\n          callee.getType() == Token.CALL) {\n        return true;\n      }\n\n      // Handle calls to functions stored in object properties.\n      if (callee.getType() == Token.NAME && callee.getNext().getType() == Token.STRING) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.GETPROP) {\n          Node greatGrandparent = grandparent.getParent();\n          if (greatGrandparent != null && greatGrandparent.getType() == Token.ASSIGN) {\n            Node gggParent = greatGrandparent.getParent();\n            if (gggParent != null && gggParent.getType() == Token.EXPR_RESULT) {\n              Node gggGrandparent = gggParent.getParent();\n              if (gggGrandparent != null && gggGrandparent.getType() == Token.SCRIPT) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..f9abdf43 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,8 +81,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n@@ -111,7 +110,7 @@ final class CheckGlobalThis implements Callback {\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-      \n+\n       if (n == lhs) {\n         // Always traverse the left side of the assignment. To handle\n         // nested assignments properly (e.g., (a = this).property = c;),\n@@ -122,13 +121,45 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+          return false;\n+        }\n+      }\n+    } else if (parent != null && parent.getType() == Token.CLASS) {\n+      // Don't traverse class members.\n+      return false;\n+    } else if (parent != null && parent.getType() == Token.MEMBER_FUNCTION_DEF) {\n+      // Don't traverse class members.\n+      return false;\n+    } else if (parent != null && parent.getType() == Token.CALL) {\n+      Node callee = parent.getFirstChild();\n+\n+      // Handle function calls that return an object, like goog.define, Object.create, etc.\n+      if ((callee.getType() == Token.LP && callee.getFirstChild().getType() == Token.FUNCTION) ||\n+          callee.getType() == Token.GETPROP ||\n+          callee.getType() == Token.CALL) {\n+        return true;\n+      }\n+\n+      // Handle calls to functions stored in object properties.\n+      if (callee.getType() == Token.NAME && callee.getNext().getType() == Token.STRING) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.GETPROP) {\n+          Node greatGrandparent = grandparent.getParent();\n+          if (greatGrandparent != null && greatGrandparent.getType() == Token.ASSIGN) {\n+            Node gggParent = greatGrandparent.getParent();\n+            if (gggParent != null && gggParent.getType() == Token.EXPR_RESULT) {\n+              Node gggGrandparent = gggParent.getParent();\n+              if (gggGrandparent != null && gggGrandparent.getType() == Token.SCRIPT) {\n+                return true;\n+              }\n+            }\n           }\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}