{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    double q = regularizedGammaP(a, x);\n    return 1.0 - q;\n}\n\npublic static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaQSeries(a, x);\n    } else {\n        return regularizedGammaContinuedFraction(a, x);\n    }\n}\n\nprivate static double regularizedGammaQSeries(double a, double x) {\n    final int MAX_ITERATIONS = 1000;\n    final double EPSILON = 10e-15;\n\n    double n = 1.0;\n    double an = a;\n    double sum = a;\n    double delta = sum;\n\n    for (int i = 0; delta > sum * EPSILON && i < MAX_ITERATIONS; i++) {\n        an *= -x / n;\n        sum += an;\n        delta = Math.abs(an / sum);\n        n++;\n    }\n\n    if (n >= MAX_ITERATIONS) {\n        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n    }\n\n    return Math.exp(-x + a * Math.log(x)) * sum;\n}\n\nprivate static double regularizedGammaContinuedFraction(double a, double x) {\n    final int MAX_ITERATIONS = 1000;\n    final double EPSILON = 10e-15;\n\n    double gln = gammaLog(a);\n    double b = x + 1.0 - a;\n    double c = 1.0 / EPSILON;\n    double d = 1.0 / b;\n    double h = d;\n\n    for (int i = 1; i < MAX_ITERATIONS; ++i) {\n        double an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < EPSILON) {\n            d = EPSILON;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < EPSILON) {\n            c = EPSILON;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < EPSILON) {\n            break;\n        }\n    }\n\n    if (h < 0.0) {\n        throw new RuntimeException(\"Regularized gamma fraction returned negative value\");\n    }\n\n    return 1.0 - Math.exp(-x + a * Math.log(x) - gln) * h;\n}\n\nprivate static double gammaLog(double x) {\n    return Gamma.logGamma(x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..63b67c0e1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,95 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    double q = regularizedGammaP(a, x);\n+    return 1.0 - q;\n+}\n+\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaQSeries(a, x);\n+    } else {\n+        return regularizedGammaContinuedFraction(a, x);\n+    }\n+}\n+\n+private static double regularizedGammaQSeries(double a, double x) {\n+    final int MAX_ITERATIONS = 1000;\n+    final double EPSILON = 10e-15;\n+\n+    double n = 1.0;\n+    double an = a;\n+    double sum = a;\n+    double delta = sum;\n+\n+    for (int i = 0; delta > sum * EPSILON && i < MAX_ITERATIONS; i++) {\n+        an *= -x / n;\n+        sum += an;\n+        delta = Math.abs(an / sum);\n+        n++;\n+    }\n+\n+    if (n >= MAX_ITERATIONS) {\n+        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x)) * sum;\n+}\n+\n+private static double regularizedGammaContinuedFraction(double a, double x) {\n+    final int MAX_ITERATIONS = 1000;\n+    final double EPSILON = 10e-15;\n+\n+    double gln = gammaLog(a);\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / EPSILON;\n+    double d = 1.0 / b;\n+    double h = d;\n+\n+    for (int i = 1; i < MAX_ITERATIONS; ++i) {\n+        double an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < EPSILON) {\n+            d = EPSILON;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < EPSILON) {\n+            c = EPSILON;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < EPSILON) {\n+            break;\n+        }\n+    }\n+\n+    if (h < 0.0) {\n+        throw new RuntimeException(\"Regularized gamma fraction returned negative value\");\n+    }\n+\n+    return 1.0 - Math.exp(-x + a * Math.log(x) - gln) * h;\n+}\n+\n+private static double gammaLog(double x) {\n+    return Gamma.logGamma(x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}