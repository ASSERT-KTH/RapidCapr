{
    "patch": "public static String getPropertyValue(Properties props, String propName, String defaultValue) {\n    String result = props.getProperty(propName);\n    if (result == null || result.isEmpty())\n        return defaultValue;\n    else\n        return result.replaceAll(\"\\\\\\\\:\", \":\").replaceAll(\"\\\\\\\\=\", \"=\").replaceAll(\"\\\\s+$\", \"\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..791075d6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getPropertyValue(Properties props, String propName, String defaultValue) {\n+    String result = props.getProperty(propName);\n+    if (result == null || result.isEmpty())\n+        return defaultValue;\n+    else\n+        return result.replaceAll(\"\\\\\\\\:\", \":\").replaceAll(\"\\\\\\\\=\", \"=\").replaceAll(\"\\\\s+$\", \"\");\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}