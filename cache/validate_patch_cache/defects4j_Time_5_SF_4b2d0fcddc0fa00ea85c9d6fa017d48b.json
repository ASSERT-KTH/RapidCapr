{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    long durationMillis = getMillis();\n    durationMillis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    durationMillis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    durationMillis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n    durationMillis += getDays() * DateTimeConstants.MILLIS_PER_DAY;\n    durationMillis += getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n\n    // Split the period into years, months, and days.\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n\n    // Normalize the months by adding years and reducing months as needed.\n    int normalizedYears = 0;\n    while (months >= 12) {\n        years++;\n        months -= 12;\n        normalizedYears++;\n    }\n    while (months < 0) {\n        years--;\n        months += 12;\n        normalizedYears--;\n    }\n    if (years != getYears() || normalizedYears != 0) {\n        // Rebuild the period with the normalized years and months.\n        Period rebuilt = new Period(durationMillis, type, ISOChronology.getInstanceUTC());\n        rebuilt = rebuilt.withYears(years).withMonths(months).withDays(0).normalizedStandard(type);\n        // Add the original days to the rebuilt period.\n        days = FieldUtils.safeAdd(days, rebuilt.getDays());\n        rebuilt = rebuilt.withDays(days);\n        return rebuilt;\n    }\n    else {\n        // All values are already normalized, so just return the original period.\n        return new Period(durationMillis, type, ISOChronology.getInstanceUTC());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..bbc422a6 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,44 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    long durationMillis = getMillis();\n+    durationMillis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n+    durationMillis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n+    durationMillis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n+    durationMillis += getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+    durationMillis += getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    // Split the period into years, months, and days.\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+\n+    // Normalize the months by adding years and reducing months as needed.\n+    int normalizedYears = 0;\n+    while (months >= 12) {\n+        years++;\n+        months -= 12;\n+        normalizedYears++;\n+    }\n+    while (months < 0) {\n+        years--;\n+        months += 12;\n+        normalizedYears--;\n+    }\n+    if (years != getYears() || normalizedYears != 0) {\n+        // Rebuild the period with the normalized years and months.\n+        Period rebuilt = new Period(durationMillis, type, ISOChronology.getInstanceUTC());\n+        rebuilt = rebuilt.withYears(years).withMonths(months).withDays(0).normalizedStandard(type);\n+        // Add the original days to the rebuilt period.\n+        days = FieldUtils.safeAdd(days, rebuilt.getDays());\n+        rebuilt = rebuilt.withDays(days);\n+        return rebuilt;\n+    }\n+    else {\n+        // All values are already normalized, so just return the original period.\n+        return new Period(durationMillis, type, ISOChronology.getInstanceUTC());\n     }\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}