{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    // Ensure that the first child is a name or a function call.\n    Node calleeNode = callNode.getFirstChild();\n    if (!calleeNode.isName() && !NodeUtil.isFunctionObjectCall(calleeNode)) {\n        return CanInlineResult.NO;\n    }\n\n    int callArity = functionCallArity(calleeNode);\n\n    // Compare the function parameters with the passed arguments.\n    Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    Node argNode = calleeNode.getNext();\n\n    while (paramNode != null && argNode != null) {\n        if (NodeUtil.getNameReferenceCount(block, paramNode.getString()) > 1\n                || NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n            return CanInlineResult.NO;\n        }\n        paramNode = paramNode.getNext();\n        argNode = argNode.getNext();\n        callArity--;\n    }\n\n    if (callArity == 0 && argNode == null && paramNode == null) {\n        return CanInlineResult.YES;\n    }\n\n    // The number of passed arguments doesn't match the number of parameters.\n    // double check that all skipped arguments were undefined or immutables\n    for (; argNode != null && callArity > 0; argNode = argNode.getNext(), callArity--) {\n        if (!NodeUtil.isImmutableValue(argNode)) {\n            return CanInlineResult.NO;\n        }\n    }\n\n    if (callArity != 0) {\n        // The number of passed arguments doesn't match the number of parameters.\n        return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n}\n\nprivate int functionCallArity(Node functionCall) {\n    int arity = 0;\n    for (Node argNode = functionCall.getNext(); argNode != null; argNode = argNode.getNext()) {\n        if (!NodeUtil.isImmutableValue(argNode)) {\n            arity += 1;\n        }\n    }\n    return arity;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..8e4c8ece 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,64 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+    if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n+        return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n \n+    // Ensure that the first child is a name or a function call.\n+    Node calleeNode = callNode.getFirstChild();\n+    if (!calleeNode.isName() && !NodeUtil.isFunctionObjectCall(calleeNode)) {\n+        return CanInlineResult.NO;\n+    }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    int callArity = functionCallArity(calleeNode);\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+    // Compare the function parameters with the passed arguments.\n+    Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    Node argNode = calleeNode.getNext();\n+\n+    while (paramNode != null && argNode != null) {\n+        if (NodeUtil.getNameReferenceCount(block, paramNode.getString()) > 1\n+                || NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+            return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+        paramNode = paramNode.getNext();\n+        argNode = argNode.getNext();\n+        callArity--;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n+    if (callArity == 0 && argNode == null && paramNode == null) {\n+        return CanInlineResult.YES;\n+    }\n \n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    // The number of passed arguments doesn't match the number of parameters.\n+    // double check that all skipped arguments were undefined or immutables\n+    for (; argNode != null && callArity > 0; argNode = argNode.getNext(), callArity--) {\n+        if (!NodeUtil.isImmutableValue(argNode)) {\n             return CanInlineResult.NO;\n-          }\n         }\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    if (callArity != 0) {\n+        // The number of passed arguments doesn't match the number of parameters.\n+        return CanInlineResult.NO;\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n+\n+private int functionCallArity(Node functionCall) {\n+    int arity = 0;\n+    for (Node argNode = functionCall.getNext(); argNode != null; argNode = argNode.getNext()) {\n+        if (!NodeUtil.isImmutableValue(argNode)) {\n+            arity += 1;\n+        }\n+    }\n+    return arity;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<YES> but was:<NO>",
    "test_result": "FAIL"
}