{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    int year = 2000; // default year to use when no year value in text\n    int pos = position;\n    if (text.length() > pos + 1 && text.charAt(pos) >= '0' && text.charAt(pos) <= '9' &&\n            text.charAt(pos + 1) >= '0' && text.charAt(pos + 1) <= '9') {\n        // extract day and month values from text\n        int dayOfMonth = text.charAt(pos++) - '0';\n        dayOfMonth = dayOfMonth * 10 + (text.charAt(pos++) - '0');\n        int monthOfYear = bucket.parseInt(text.substring(pos), pos);\n        // find the maximum day of month for the specified year and month\n        int daysInMonth = 31;\n        if (monthOfYear == 2) {\n            boolean isLeapYear = DateTimeUtils.isLeapYear(year);\n            daysInMonth = isLeapYear ? 29 : 28;\n        } else if (monthOfYear == 4 || monthOfYear == 6 || monthOfYear == 9 || monthOfYear == 11) {\n            daysInMonth = 30;\n        }\n        // adjust dayOfMonth to maximum day if it exceeds it\n        if (dayOfMonth > daysInMonth) {\n            dayOfMonth = daysInMonth;\n        }\n        // construct new text with adjusted day value\n        StringBuilder newText = new StringBuilder(text.length());\n        newText.append(dayOfMonth);\n        pos -= 2;\n        while (pos > position && text.charAt(pos - 1) == ' ') {\n            --pos;\n        }\n        newText.append(text.substring(pos));\n        text = newText.toString();\n    } else {\n        // no day and month values in text, use default year specified in instant\n        year = chrono.year().get(instantLocal);\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, year);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..8edb3035 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,67 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+\n+    int year = 2000; // default year to use when no year value in text\n+    int pos = position;\n+    if (text.length() > pos + 1 && text.charAt(pos) >= '0' && text.charAt(pos) <= '9' &&\n+            text.charAt(pos + 1) >= '0' && text.charAt(pos + 1) <= '9') {\n+        // extract day and month values from text\n+        int dayOfMonth = text.charAt(pos++) - '0';\n+        dayOfMonth = dayOfMonth * 10 + (text.charAt(pos++) - '0');\n+        int monthOfYear = bucket.parseInt(text.substring(pos), pos);\n+        // find the maximum day of month for the specified year and month\n+        int daysInMonth = 31;\n+        if (monthOfYear == 2) {\n+            boolean isLeapYear = DateTimeUtils.isLeapYear(year);\n+            daysInMonth = isLeapYear ? 29 : 28;\n+        } else if (monthOfYear == 4 || monthOfYear == 6 || monthOfYear == 9 || monthOfYear == 11) {\n+            daysInMonth = 30;\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        // adjust dayOfMonth to maximum day if it exceeds it\n+        if (dayOfMonth > daysInMonth) {\n+            dayOfMonth = daysInMonth;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        // construct new text with adjusted day value\n+        StringBuilder newText = new StringBuilder(text.length());\n+        newText.append(dayOfMonth);\n+        pos -= 2;\n+        while (pos > position && text.charAt(pos - 1) == ' ') {\n+            --pos;\n         }\n-        return newPos;\n-    }\n+        newText.append(text.substring(pos));\n+        text = newText.toString();\n+    } else {\n+        // no day and month values in text, use default year specified in instant\n+        year = chrono.year().get(instantLocal);\n+    }\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, year);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}