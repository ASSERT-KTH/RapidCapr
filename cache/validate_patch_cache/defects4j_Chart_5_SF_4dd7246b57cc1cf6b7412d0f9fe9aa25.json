{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem existing = getDataItem(x);\n    if (existing != null) {\n        // if we get to here, we know that duplicate X values are not permitted\n        XYDataItem overwritten;\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n\n        existing.setY(y);\n        fireSeriesChanged();\n        return overwritten;\n    } else {\n        XYDataItem newItem = new XYDataItem(x, y);\n        if (this.autoSort) {\n            int index = Collections.binarySearch(this.data, newItem);\n            if (index >= 0 && !this.allowDuplicateXValues) {\n                // if a matching X value is found and duplicates are not allowed, throw an exception\n                throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n            } else if (index < 0) {\n                // if a matching X value is not found, insert the new item at the calculated index\n                index = -index - 1;\n            }\n            this.data.add(index, newItem);\n        } else {\n            if (this.allowDuplicateXValues) {\n                // if duplicates are allowed, add the new item to the end of the list\n                this.data.add(newItem);\n            } else {\n                // if duplicates are not allowed, scan the list to ensure no matching X value exists\n                for (int i = 0; i < this.data.size(); i++) {\n                    XYDataItem item = (XYDataItem) this.data.get(i);\n                    if (newItem.getX().equals(item.getX())) {\n                        throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n                    }\n                }\n                // if no matching X value is found, add the new item to the end of the list\n                this.data.add(newItem);\n            }\n        }\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n        fireSeriesChanged();\n        return null; // return null to indicate no item was overwritten\n    }\n}\n\nprivate XYDataItem getDataItem(Number x) {\n    int index = indexOf(x);\n    if (index >= 0) {\n        return (XYDataItem) this.data.get(index);\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..97a89b1 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,67 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+\n+    XYDataItem existing = getDataItem(x);\n+    if (existing != null) {\n+        // if we get to here, we know that duplicate X values are not permitted\n+        XYDataItem overwritten;\n+        try {\n+            overwritten = (XYDataItem) existing.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+        }\n+\n+        existing.setY(y);\n+        fireSeriesChanged();\n+        return overwritten;\n+    } else {\n+        XYDataItem newItem = new XYDataItem(x, y);\n+        if (this.autoSort) {\n+            int index = Collections.binarySearch(this.data, newItem);\n+            if (index >= 0 && !this.allowDuplicateXValues) {\n+                // if a matching X value is found and duplicates are not allowed, throw an exception\n+                throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n+            } else if (index < 0) {\n+                // if a matching X value is not found, insert the new item at the calculated index\n+                index = -index - 1;\n+            }\n+            this.data.add(index, newItem);\n+        } else {\n+            if (this.allowDuplicateXValues) {\n+                // if duplicates are allowed, add the new item to the end of the list\n+                this.data.add(newItem);\n+            } else {\n+                // if duplicates are not allowed, scan the list to ensure no matching X value exists\n+                for (int i = 0; i < this.data.size(); i++) {\n+                    XYDataItem item = (XYDataItem) this.data.get(i);\n+                    if (newItem.getX().equals(item.getX())) {\n+                        throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n+                    }\n+                }\n+                // if no matching X value is found, add the new item to the end of the list\n+                this.data.add(newItem);\n+            }\n+        }\n+        if (getItemCount() > this.maximumItemCount) {\n+            this.data.remove(0);\n+        }\n+        fireSeriesChanged();\n+        return null; // return null to indicate no item was overwritten\n+    }\n+}\n+\n+private XYDataItem getDataItem(Number x) {\n+    int index = indexOf(x);\n+    if (index >= 0) {\n+        return (XYDataItem) this.data.get(index);\n+    }\n+    return null;\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<3.0>",
    "test_result": "FAIL"
}