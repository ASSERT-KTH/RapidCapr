{
    "patch": "public Dfp multiply(final int x) {\n    if (isNaN() || getField().getRadixDigits() == 0) {\n        return newInstance(this);\n    } else {\n        final Dfp result = newInstance(getField());\n        getField().getMultiplication().multiply(this, x, result);\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..34a3e7727 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,15 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+public Dfp multiply(final int x) {\n+    if (isNaN() || getField().getRadixDigits() == 0) {\n+        return newInstance(this);\n+    } else {\n+        final Dfp result = newInstance(getField());\n+        getField().getMultiplication().multiply(this, x, result);\n+        return result;\n     }\n+}\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: no suitable method found for newInstance(DfpField)",
    "test_result": "ERROR"
}