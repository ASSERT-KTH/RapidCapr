{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n         break;\n       }\n\n      if (NodeUtil.isFunctionDeclaration(n, parent)\n          || (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT)) {\n        checkFunction(n);\n      } else if (n.getType() == Token.LP && parent == scope.getRootNode()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..23f410f4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,7 +1462,14 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        default:\n+         break;\n+       }\n+\n+      if (NodeUtil.isFunctionDeclaration(n, parent)\n+          || (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT)) {\n+        checkFunction(n);\n+      } else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}