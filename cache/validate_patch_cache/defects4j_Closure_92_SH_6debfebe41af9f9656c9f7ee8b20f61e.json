{
    "patch": "      Node lastModule = null;\n      Node nextNode = null;\n      if (indexOfDot == -1) {\n        // Any old place is fine.\n        nextNode = compiler.getNodeForCodeInsertion(minimumModule);\n      } else {\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        lastModule = parentName.replacementNode.getParent();\n        nextNode = parentName.replacementNode.getNext();\n      }\n\n      for (ProvidedName name : sortedNames) {\n        Node newNode = name.replacementNode.cloneTree();\n        if (lastModule == null) {\n          nextNode.getParent().addChildBefore(newNode, nextNode);\n        } else {\n          lastModule.addChildAfter(newNode, lastModule.getLastChild());\n        }\n        lastModule = newNode;\n        nextNode = newNode.getNext();\n        compiler.reportCodeChange();\n      }\n\n      replacementNode = lastModule;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..4e67d96d 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,33 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+      Node lastModule = null;\n+      Node nextNode = null;\n+      if (indexOfDot == -1) {\n+        // Any old place is fine.\n+        nextNode = compiler.getNodeForCodeInsertion(minimumModule);\n+      } else {\n+        ProvidedName parentName =\n+            providedNames.get(namespace.substring(0, indexOfDot));\n+        Preconditions.checkNotNull(parentName);\n+        Preconditions.checkNotNull(parentName.replacementNode);\n+        lastModule = parentName.replacementNode.getParent();\n+        nextNode = parentName.replacementNode.getNext();\n+      }\n+\n+      for (ProvidedName name : sortedNames) {\n+        Node newNode = name.replacementNode.cloneTree();\n+        if (lastModule == null) {\n+          nextNode.getParent().addChildBefore(newNode, nextNode);\n+        } else {\n+          lastModule.addChildAfter(newNode, lastModule.getLastChild());\n+        }\n+        lastModule = newNode;\n+        nextNode = newNode.getNext();\n+        compiler.reportCodeChange();\n+      }\n+\n+      replacementNode = lastModule;\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}