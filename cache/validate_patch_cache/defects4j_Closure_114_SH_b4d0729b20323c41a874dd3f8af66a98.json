{
    "patch": "// If the assignment is used in a caller expression, record the dependency\n// scope for the callee instead of the assignment.\nif (NodeUtil.isExpressionResultUsed(n)) {\n  Node ancestor = NodeUtil.getEnclosingCallScope(n);\n  if (ancestor != null) {\n    recordDepScope(ancestor, ns);\n    return;\n  }\n}\n\n// Record the dependency scope for the assignment itself.\nrecordDepScope(recordNode, ns);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..7ceecd16 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,18 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+// If the assignment is used in a caller expression, record the dependency\n+// scope for the callee instead of the assignment.\n+if (NodeUtil.isExpressionResultUsed(n)) {\n+  Node ancestor = NodeUtil.getEnclosingCallScope(n);\n+  if (ancestor != null) {\n+    recordDepScope(ancestor, ns);\n+    return;\n+  }\n+}\n+\n+// Record the dependency scope for the assignment itself.\n+recordDepScope(recordNode, ns);\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}