{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    int diff = offsetAdjusted - offsetLocal;\n    long adjustedTime = instantLocal - offsetLocal;\n    if (diff > 0) {\n        long nextAdjust = nextTransition(adjustedTime);\n        long nextActual = nextTransition(instantLocal);\n        if (nextAdjust == nextActual) {\n            return offsetAdjusted;\n        } else {\n            return offsetLocal;\n        }\n    } else if (diff < 0) {\n        long prevAdjust = previousTransition(adjustedTime);\n        long prevActual = previousTransition(instantLocal);\n        if (prevAdjust == prevActual) {\n            return offsetAdjusted;\n        } else {\n            return offsetLocal;\n        }\n    } else {\n        long nextTransition = nextTransition(instantLocal);\n        long prevTransition = previousTransition(instantLocal);\n        if (instantLocal - prevTransition < nextTransition - instantLocal) {\n            return getOffset(prevTransition);\n        } else {\n            return getOffset(nextTransition);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..aa83db1c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    int diff = offsetAdjusted - offsetLocal;\n+    long adjustedTime = instantLocal - offsetLocal;\n+    if (diff > 0) {\n+        long nextAdjust = nextTransition(adjustedTime);\n+        long nextActual = nextTransition(instantLocal);\n+        if (nextAdjust == nextActual) {\n+            return offsetAdjusted;\n+        } else {\n+            return offsetLocal;\n+        }\n+    } else if (diff < 0) {\n+        long prevAdjust = previousTransition(adjustedTime);\n+        long prevActual = previousTransition(instantLocal);\n+        if (prevAdjust == prevActual) {\n+            return offsetAdjusted;\n+        } else {\n+            return offsetLocal;\n+        }\n+    } else {\n+        long nextTransition = nextTransition(instantLocal);\n+        long prevTransition = previousTransition(instantLocal);\n+        if (instantLocal - prevTransition < nextTransition - instantLocal) {\n+            return getOffset(prevTransition);\n+        } else {\n+            return getOffset(nextTransition);\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}