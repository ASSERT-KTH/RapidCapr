{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null || !val.isObjectLit()) {\n            return false;\n        }\n\n        // Check each key of the object literal for references to the original name.\n        for (Node objectChild = val.getFirstChild(); objectChild != null;\n                objectChild = objectChild.getNext()) {\n            if (objectChild.getFirstChild() == null) {\n                continue;\n            }\n\n            for (Node keyChild = objectChild.getFirstChild(); keyChild != null;\n                    keyChild = keyChild.getNext()) {\n                if (!keyChild.isString()) {\n                    continue;\n                }\n\n                if (!keyChild.getString().equals(name.getString())) {\n                    continue;\n                }\n\n                // Check if the key value is a reference to the name.\n                Node keyValue = keyChild.getNext();\n                if (keyValue != null && containsReference(refs, keyValue)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean containsReference(List<Reference> refs, Node node) {\n    for (Reference ref : refs) {\n        if (ref.getNode() == node) {\n            return true;\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..75cfac28 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,93 +152,57 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+    for (Reference ref : refs) {\n         Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n-\n-        // Only rewrite VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+            return false;\n         }\n \n         Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n-\n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n-\n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+        if (val == null || !val.isObjectLit()) {\n             return false;\n-          }\n+        }\n \n+        // Check each key of the object literal for references to the original name.\n+        for (Node objectChild = val.getFirstChild(); objectChild != null;\n+                objectChild = objectChild.getNext()) {\n+            if (objectChild.getFirstChild() == null) {\n+                continue;\n+            }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n+            for (Node keyChild = objectChild.getFirstChild(); keyChild != null;\n+                    keyChild = keyChild.getNext()) {\n+                if (!keyChild.isString()) {\n+                    continue;\n+                }\n+\n+                if (!keyChild.getString().equals(name.getString())) {\n+                    continue;\n+                }\n+\n+                // Check if the key value is a reference to the name.\n+                Node keyValue = keyChild.getNext();\n+                if (keyValue != null && containsReference(refs, keyValue)) {\n+                    return false;\n+                }\n             }\n-          }\n         }\n+    }\n \n+    return true;\n+}\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n+private boolean containsReference(List<Reference> refs, Node node) {\n+    for (Reference ref : refs) {\n+        if (ref.getNode() == node) {\n+            return true;\n+        }\n     }\n \n+    return false;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}