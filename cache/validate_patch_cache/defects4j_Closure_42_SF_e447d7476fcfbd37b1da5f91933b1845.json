{
    "patch": "import org.mozilla.javascript.ErrorReporter;\nimport org.mozilla.javascript.Node;\nimport org.mozilla.javascript.Token;\nimport org.mozilla.javascript.ast.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TransformDispatcher implements NodeVisitor {\n\n    private static final String ALLOWED_DIRECTIVES = \"__allow_directive__\";\n    private static final String SECRET_FLAG_PREFIX = \"zj\";\n\n    private final ErrorReporter errorReporter;\n    private final String sourceName;\n\n    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n        this.errorReporter = errorReporter;\n        this.sourceName = sourceName;\n    }\n\n    protected Node newNode(int type) {\n        return new Node(type);\n    }\n\n    protected Node newNode(int type, AstNode child) {\n        Node n = new Node(type);\n        n.addChildToBack(transform(child));\n        return n;\n    }\n\n    protected Node newNode(int type, AstNode child1, AstNode child2) {\n        Node n = new Node(type);\n        n.addChildToBack(transform(child1));\n        n.addChildToBack(transform(child2));\n        return n;\n    }\n\n    protected Node newNode(int type, AstNode child1, AstNode child2, AstNode child3) {\n        Node n = new Node(type);\n        n.addChildToBack(transform(child1));\n        n.addChildToBack(transform(child2));\n        n.addChildToBack(transform(child3));\n        return n;\n    }\n\n    protected Node transformGeneric(AstNode n) {\n        if (n == null) return newNode(Token.EMPTY);\n\n        if (n instanceof Name) {\n            Name name = (Name)n;\n            Node node = new Node(Token.NAME, name.getIdentifier());\n\n            if (isDirective(n.getParent())) {\n                node.putIntProp(Node.IS_DIRECTIVE, 1);\n            }\n            \n            return node;\n        }\n\n        if (n instanceof ParenthesizedExpression) {\n            return transform(((ParenthesizedExpression)n).getExpression());\n        }\n\n        if (n instanceof StringLiteral) return new Node(Token.STRING, n.getString());\n        if (n instanceof NumberLiteral) return Node.newNumber(n.getDouble());\n        if (n instanceof FunctionNode) return processFunction((FunctionNode) n);\n        if (n instanceof ReturnStatemen",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..b9350196 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,74 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+import org.mozilla.javascript.ErrorReporter;\n+import org.mozilla.javascript.Node;\n+import org.mozilla.javascript.Token;\n+import org.mozilla.javascript.ast.*;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+import java.util.ArrayList;\n+import java.util.List;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+class TransformDispatcher implements NodeVisitor {\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+    private static final String ALLOWED_DIRECTIVES = \"__allow_directive__\";\n+    private static final String SECRET_FLAG_PREFIX = \"zj\";\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+    private final ErrorReporter errorReporter;\n+    private final String sourceName;\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n+        this.errorReporter = errorReporter;\n+        this.sourceName = sourceName;\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    protected Node newNode(int type) {\n+        return new Node(type);\n     }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    protected Node newNode(int type, AstNode child) {\n+        Node n = new Node(type);\n+        n.addChildToBack(transform(child));\n+        return n;\n     }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    protected Node newNode(int type, AstNode child1, AstNode child2) {\n+        Node n = new Node(type);\n+        n.addChildToBack(transform(child1));\n+        n.addChildToBack(transform(child2));\n+        return n;\n     }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    protected Node newNode(int type, AstNode child1, AstNode child2, AstNode child3) {\n+        Node n = new Node(type);\n+        n.addChildToBack(transform(child1));\n+        n.addChildToBack(transform(child2));\n+        n.addChildToBack(transform(child3));\n+        return n;\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+    protected Node transformGeneric(AstNode n) {\n+        if (n == null) return newNode(Token.EMPTY);\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+        if (n instanceof Name) {\n+            Name name = (Name)n;\n+            Node node = new Node(Token.NAME, name.getIdentifier());\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+            if (isDirective(n.getParent())) {\n+                node.putIntProp(Node.IS_DIRECTIVE, 1);\n+            }\n+            \n+            return node;\n+        }\n+\n+        if (n instanceof ParenthesizedExpression) {\n+            return transform(((ParenthesizedExpression)n).getExpression());\n+        }\n+\n+        if (n instanceof StringLiteral) return new Node(Token.STRING, n.getString());\n+        if (n instanceof NumberLiteral) return Node.newNumber(n.getDouble());\n+        if (n instanceof FunctionNode) return processFunction((FunctionNode) n);\n+        if (n instanceof ReturnStatemen\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}