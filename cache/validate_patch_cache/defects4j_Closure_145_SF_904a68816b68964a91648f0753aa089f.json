{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (NodeUtil.isLabel(n)) {\n      Node child = n.getFirstChild();\n      if (child == null || NodeUtil.isBlock(child) && !child.hasMoreThanOneChild()) {\n        return isOneExactlyFunctionOrDo(child);\n      }\n      return false;\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..4e10a580 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,14 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+    if (NodeUtil.isLabel(n)) {\n+      Node child = n.getFirstChild();\n+      if (child == null || NodeUtil.isBlock(child) && !child.hasMoreThanOneChild()) {\n+        return isOneExactlyFunctionOrDo(child);\n+      }\n+      return false;\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}