{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = d.getRowDimension();\n    final double[] sqrtEigenValues = new double[n];\n    double tol = 1e-15;\n\n    // Compute the square root of the eigenvalues\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0 || Double.isNaN(eigenvalue)) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtEigenValues[i] = eigenvalue > tol ? Math.sqrt(eigenvalue) : 0.0;\n    }\n\n    // Build a diagonal matrix of square root of the eigenvalues\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n\n    // Compute the square root of the matrix by multiplying the matrices of eigenvectors and square root of the eigenvalues\n    RealMatrix squareRoot = v.multiply(sqrtD).multiply(v.transpose());\n\n    return squareRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ac9b1c560 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = d.getRowDimension();\n+    final double[] sqrtEigenValues = new double[n];\n+    double tol = 1e-15;\n+\n+    // Compute the square root of the eigenvalues\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0 || Double.isNaN(eigenvalue)) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtEigenValues[i] = eigenvalue > tol ? Math.sqrt(eigenvalue) : 0.0;\n     }\n+\n+    // Build a diagonal matrix of square root of the eigenvalues\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n+\n+    // Compute the square root of the matrix by multiplying the matrices of eigenvectors and square root of the eigenvalues\n+    RealMatrix squareRoot = v.multiply(sqrtD).multiply(v.transpose());\n+\n+    return squareRoot;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}