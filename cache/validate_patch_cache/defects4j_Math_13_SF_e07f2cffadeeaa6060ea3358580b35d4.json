{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int maxIterations = 1000;\n    final double tolerance = 1e-10;\n    RealMatrix guess = m;\n    RealMatrix result = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    EigenDecomposition ed = new EigenDecomposition(m);\n    RealMatrix eigenVectors = ed.getV();\n    RealMatrix eigenValues = (new Array2DRowRealMatrix(ed.getRealEigenvalues())).scalarAdd(tolerance);\n    for (int i = 0; i < maxIterations; i++) {\n        RealMatrix sqrtEigenValues = new Array2DRowRealMatrix(eigenValues.getRowDimension(), eigenValues.getColumnDimension());\n        for (int j = 0; j < eigenValues.getRowDimension(); j++) {\n            sqrtEigenValues.setEntry(j, j, Math.sqrt(eigenValues.getEntry(j, j)));\n        }\n        RealMatrix candidate = eigenVectors.multiply(sqrtEigenValues).multiply(eigenVectors.transpose());\n        double delta = 0.5 * (new Array2DRowRealMatrix(guess.add(candidate).getData())).subtract(result).getFrobeniusNorm();\n        result = guess.add(candidate);\n        guess = result.scalarMultiply(0.5);\n        if (delta < tolerance) {\n            break;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..671bfac69 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxIterations = 1000;\n+    final double tolerance = 1e-10;\n+    RealMatrix guess = m;\n+    RealMatrix result = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    EigenDecomposition ed = new EigenDecomposition(m);\n+    RealMatrix eigenVectors = ed.getV();\n+    RealMatrix eigenValues = (new Array2DRowRealMatrix(ed.getRealEigenvalues())).scalarAdd(tolerance);\n+    for (int i = 0; i < maxIterations; i++) {\n+        RealMatrix sqrtEigenValues = new Array2DRowRealMatrix(eigenValues.getRowDimension(), eigenValues.getColumnDimension());\n+        for (int j = 0; j < eigenValues.getRowDimension(); j++) {\n+            sqrtEigenValues.setEntry(j, j, Math.sqrt(eigenValues.getEntry(j, j)));\n+        }\n+        RealMatrix candidate = eigenVectors.multiply(sqrtEigenValues).multiply(eigenVectors.transpose());\n+        double delta = 0.5 * (new Array2DRowRealMatrix(guess.add(candidate).getData())).subtract(result).getFrobeniusNorm();\n+        result = guess.add(candidate);\n+        guess = result.scalarMultiply(0.5);\n+        if (delta < tolerance) {\n+            break;\n+        }\n     }\n+    return result;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}