{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(getField(), qnan);\n            }\n            if (x == 0) {\n                return newInstance(getField(), 0.0);\n            }\n\n            if (x == 1) {\n                return this;\n            }\n\n            Dfp result = newInstance(this);\n\n            boolean add = (x < 0);\n            int val = add ? -x : x;\n\n            int i = 1;\n            while (val != 0) {\n                if ((val & 1) != 0) {\n                    result = result.add(this.multiplyPowerOf10(i));\n                }\n                ++i;\n                val = val >>> 1;\n            }\n\n            if (add) {\n                result = result.negate();\n            }\n\n            return result;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..5fd1448dc 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,8 +1600,37 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n-    }\n+            if (isNaN()) {\n+                return newInstance(getField(), qnan);\n+            }\n+            if (x == 0) {\n+                return newInstance(getField(), 0.0);\n+            }\n+\n+            if (x == 1) {\n+                return this;\n+            }\n+\n+            Dfp result = newInstance(this);\n+\n+            boolean add = (x < 0);\n+            int val = add ? -x : x;\n+\n+            int i = 1;\n+            while (val != 0) {\n+                if ((val & 1) != 0) {\n+                    result = result.add(this.multiplyPowerOf10(i));\n+                }\n+                ++i;\n+                val = val >>> 1;\n+            }\n+\n+            if (add) {\n+                result = result.negate();\n+            }\n+\n+            return result;\n+        }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}