{
    "patch": "// iterate and collect all values matching the key\nList<Object> matchingValues = new ArrayList<>();\nfor (ReturnInstruction returnInstruction : returnInstructions) {\n    if (returnInstruction.isMatchingReturnValue(key)) {\n        matchingValues.add(returnInstruction.getReturnValue());\n    }\n}\n\n// check if any matching values were found\nif (matchingValues.isEmpty()) {\n    return ReturnValues.createEmptyIterable();\n}\n\n// combine the matching values into a single iterable\nIterable<Object> iterable = Iterables.concat(matchingValues);\n\nreturn ReturnValues.createIterable(iterable);",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}