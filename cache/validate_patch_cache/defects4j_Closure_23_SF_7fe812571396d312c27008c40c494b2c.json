{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0 || left.getChildCount() <= intIndex) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left.getChildAtIndex(intIndex);\n\n  if (elem.isEmpty()) {\n    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n    left.replaceChild(elem, undefinedNode);\n    if (parent.isExprResult()) {\n      parent.replaceChild(n, undefinedNode);\n    } else {\n      parent.replaceChild(left, undefinedNode);\n    }\n    reportCodeChange();\n    return undefinedNode;\n  }\n\n  left.removeChild(elem);\n\n  if (parent.isExprResult()) {\n    parent = parent.getParent();\n  }\n\n  if (parent.isNew()) {\n    parent = parent.getParent();\n  }\n\n  if (parent.isGetElem() && parent.getLastChild() == n && elem.isNumber()) {\n    // Allow the number to be folded with the parent.\n    parent.putBooleanProp(Node.FOLDABLE, true);\n  } else {\n    parent.replaceChild(n, elem);\n  }\n\n  reportCodeChange();\n\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..b3341bfe 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,66 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+  if (isAssignmentTarget(n)) {\n+    return n;\n+  }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  if (!right.isNumber()) {\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  if (intIndex != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-      current = current.getNext();\n-    }\n+  if (intIndex < 0 || left.getChildCount() <= intIndex) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  Node elem = left.getChildAtIndex(intIndex);\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+  if (elem.isEmpty()) {\n+    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+    left.replaceChild(elem, undefinedNode);\n+    if (parent.isExprResult()) {\n+      parent.replaceChild(n, undefinedNode);\n     } else {\n-      left.removeChild(elem);\n+      parent.replaceChild(left, undefinedNode);\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n-    return elem;\n+    return undefinedNode;\n+  }\n+\n+  left.removeChild(elem);\n+\n+  if (parent.isExprResult()) {\n+    parent = parent.getParent();\n+  }\n+\n+  if (parent.isNew()) {\n+    parent = parent.getParent();\n+  }\n+\n+  if (parent.isGetElem() && parent.getLastChild() == n && elem.isNumber()) {\n+    // Allow the number to be folded with the parent.\n+    parent.putBooleanProp(Node.FOLDABLE, true);\n+  } else {\n+    parent.replaceChild(n, elem);\n   }\n \n+  reportCodeChange();\n+\n+  return elem;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}