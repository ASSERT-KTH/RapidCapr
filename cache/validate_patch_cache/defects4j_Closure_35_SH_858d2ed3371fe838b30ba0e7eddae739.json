{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType() && type.isObject()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          // For a loose object type, we add inferred properties to the prototype object.\n          if (objType.isLoose()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredPropertyOnPrototypes(prop, typeToInfer, null);\n            continue;\n          }\n          // For a non-loose object type, we add the inferred properties only to the object.\n          if (objType.isPropertyTypeDeclared(prop)) {\n            continue;\n          }\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType typeToInfer =\n              propType.isUnknownType() ? getNativeType(UNKNOWN_TYPE) : propType;\n          if (objType.hasProperty(prop)) {\n            // This means there was an inferred property with the same name.\n            typeToInfer = typeToInfer.getLeastSupertype(objType.getPropertyType(prop));\n          } else if (objType.isDict()) {\n            typeToInfer = getNativeType(JSTypeNative.ALL_TYPE);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..f4788312 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,38 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (constraintObj != null && constraintObj.isRecordType() && type.isObject()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          // For a loose object type, we add inferred properties to the prototype object.\n+          if (objType.isLoose()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            objType.defineInferredPropertyOnPrototypes(prop, typeToInfer, null);\n+            continue;\n+          }\n+          // For a non-loose object type, we add the inferred properties only to the object.\n+          if (objType.isPropertyTypeDeclared(prop)) {\n+            continue;\n           }\n+          JSType propType = constraintObj.getPropertyType(prop);\n+          JSType typeToInfer =\n+              propType.isUnknownType() ? getNativeType(UNKNOWN_TYPE) : propType;\n+          if (objType.hasProperty(prop)) {\n+            // This means there was an inferred property with the same name.\n+            typeToInfer = typeToInfer.getLeastSupertype(objType.getPropertyType(prop));\n+          } else if (objType.isDict()) {\n+            typeToInfer = getNativeType(JSTypeNative.ALL_TYPE);\n+          }\n+          objType.defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}