{
    "patch": "        Matcher patternMatcher = formatPattern.matcher(pattern);\n        StringBuilder regex = new StringBuilder();\n        List<Strategy> collector = new ArrayList<>();\n\n        boolean currentAdded = false;\n        boolean nextAdded = false;\n        currentFormatField = null;\n        while (patternMatcher.find()) {\n            String formatField = patternMatcher.group();\n            Strategy strategy = getStrategy(formatField);\n\n            // First strategy should not be null.\n            if (currentFormatField == null) {\n                currentFormatField = formatField;\n                currentAdded = strategy.addRegex(this, regex);\n                collector.add(strategy);\n            } else {\n                nextAdded = strategy.addRegex(this, regex);\n                if (nextAdded && !currentAdded) {\n                    collector.add(strategy);\n                } else {\n                    currentAdded = nextAdded;\n                }\n            }\n            currentFormatField = formatField;\n        }\n\n        if (currentFormatField == null) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        strategies = collector.toArray(new Strategy[collector.size()]);\n        parsePattern = Pattern.compile(regex.toString());\n        currentFormatField = null;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..25bb210c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,39 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        Matcher patternMatcher = formatPattern.matcher(pattern);\n+        StringBuilder regex = new StringBuilder();\n+        List<Strategy> collector = new ArrayList<>();\n+\n+        boolean currentAdded = false;\n+        boolean nextAdded = false;\n+        currentFormatField = null;\n+        while (patternMatcher.find()) {\n+            String formatField = patternMatcher.group();\n+            Strategy strategy = getStrategy(formatField);\n+\n+            // First strategy should not be null.\n+            if (currentFormatField == null) {\n+                currentFormatField = formatField;\n+                currentAdded = strategy.addRegex(this, regex);\n+                collector.add(strategy);\n+            } else {\n+                nextAdded = strategy.addRegex(this, regex);\n+                if (nextAdded && !currentAdded) {\n+                    collector.add(strategy);\n+                } else {\n+                    currentAdded = nextAdded;\n+                }\n+            }\n+            currentFormatField = formatField;\n+        }\n+\n+        if (currentFormatField == null) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        strategies = collector.toArray(new Strategy[collector.size()]);\n+        parsePattern = Pattern.compile(regex.toString());\n+        currentFormatField = null;\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}