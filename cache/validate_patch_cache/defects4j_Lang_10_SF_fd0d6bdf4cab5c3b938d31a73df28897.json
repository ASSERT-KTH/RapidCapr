{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    StringBuilder eraRegex = null;\n    boolean inQuotes = false;\n    int i = 0;\n    while (i < value.length()) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (inQuotes || wasWhite) {\n                regex.append(c);\n            } else {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n        } else {\n            wasWhite = false;\n            switch (c) {\n                case '\\'':\n                    if (unquote) {\n                        if (++i < value.length()) {\n                            c = value.charAt(i);\n                        } else {\n                            return regex;\n                        }\n                    }\n                    regex.append('\\''); // append quote as is\n                    inQuotes = !inQuotes;\n                    break;\n                case '[':\n                case ']':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '\\\\':\n                case '|':\n                case '?':\n                case '*':\n                case '+':\n                case '^':\n                case '$':\n                case '.':\n                    regex.append('\\\\').append(c);\n                    break;\n                case 'G': // era handling\n                    if (i + 1 < value.length() && value.charAt(i + 1) == 'G') {\n                        int normCount = 0;\n                        while (i + normCount + 1 < value.length() && value.charAt(i + normCount + 1) == 'G') {\n                            normCount++;\n                        }\n                        if (eraRegex == null) {\n                            eraRegex = new StringBuilder(\"(AD|BC|\u043f\u0440\\\\. \u043d\\\\. \u0435\\\\.|\u043d\\\\. \u0435\\\\.)\"); // default era regex\n                        }\n                        if (normCount == 4) {\n                            eraRegex.append(\"(AD|BC)\");\n                            i += 4;\n                        } else if (normCount == 3) {\n                            eraRegex.append(\"(AD|BC)\");\n                            i += 3;\n                        } else {\n                            regex.append(c);\n                            i++;\n                        }\n                    } else {\n                        regex.append(c);\n                        i++;\n                    }\n                    break;\n                case '+': // timezone handling\n                    int count = 1;\n                    while (i + count < value.length() && value.charAt(i + count) == '+') {\n                        count++;\n                    }\n                    if (count > 2) {\n                        regex.append(\"\\\\+\");\n                        i += count;\n                    } else {\n                        regex.append(c);\n                        i++;\n                    }\n                    break;\n                case 'Z':\n                    if (i == value.length() - 1) {\n                        regex.append(\"\\\\+?\").append(c); // optional timezone 'Z'\n                        i++;\n                    } else {\n                        regex.append(c);\n                        i++;\n                    }\n                    break;\n                default:\n                    regex.append(c);\n                    i++;\n                    break;\n            }\n        }\n    }\n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n    if (eraRegex != null) {\n        regex.insert(0, eraRegex.toString());\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..3c859253 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,111 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    StringBuilder eraRegex = null;\n+    boolean inQuotes = false;\n+    int i = 0;\n+    while (i < value.length()) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (inQuotes || wasWhite) {\n+                regex.append(c);\n+            } else {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+        } else {\n+            wasWhite = false;\n+            switch (c) {\n+                case '\\'':\n+                    if (unquote) {\n+                        if (++i < value.length()) {\n+                            c = value.charAt(i);\n+                        } else {\n+                            return regex;\n+                        }\n                     }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                    regex.append('\\''); // append quote as is\n+                    inQuotes = !inQuotes;\n+                    break;\n+                case '[':\n+                case ']':\n+                case '(':\n+                case ')':\n+                case '{':\n+                case '}':\n+                case '\\\\':\n+                case '|':\n+                case '?':\n+                case '*':\n+                case '+':\n+                case '^':\n+                case '$':\n+                case '.':\n+                    regex.append('\\\\').append(c);\n+                    break;\n+                case 'G': // era handling\n+                    if (i + 1 < value.length() && value.charAt(i + 1) == 'G') {\n+                        int normCount = 0;\n+                        while (i + normCount + 1 < value.length() && value.charAt(i + normCount + 1) == 'G') {\n+                            normCount++;\n+                        }\n+                        if (eraRegex == null) {\n+                            eraRegex = new StringBuilder(\"(AD|BC|\u043f\u0440\\\\. \u043d\\\\. \u0435\\\\.|\u043d\\\\. \u0435\\\\.)\"); // default era regex\n+                        }\n+                        if (normCount == 4) {\n+                            eraRegex.append(\"(AD|BC)\");\n+                            i += 4;\n+                        } else if (normCount == 3) {\n+                            eraRegex.append(\"(AD|BC)\");\n+                            i += 3;\n+                        } else {\n+                            regex.append(c);\n+                            i++;\n+                        }\n+                    } else {\n+                        regex.append(c);\n+                        i++;\n+                    }\n+                    break;\n+                case '+': // timezone handling\n+                    int count = 1;\n+                    while (i + count < value.length() && value.charAt(i + count) == '+') {\n+                        count++;\n+                    }\n+                    if (count > 2) {\n+                        regex.append(\"\\\\+\");\n+                        i += count;\n+                    } else {\n+                        regex.append(c);\n+                        i++;\n+                    }\n+                    break;\n+                case 'Z':\n+                    if (i == value.length() - 1) {\n+                        regex.append(\"\\\\+?\").append(c); // optional timezone 'Z'\n+                        i++;\n+                    } else {\n+                        regex.append(c);\n+                        i++;\n+                    }\n+                    break;\n+                default:\n+                    regex.append(c);\n+                    i++;\n+                    break;\n             }\n-            regex.append(c);\n         }\n-        return regex;\n     }\n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n+    }\n+    if (eraRegex != null) {\n+        regex.insert(0, eraRegex.toString());\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}