{
    "patch": "public double getSumSquaredErrors() {\n   if (Double.isNaN(sumXY) || Double.isNaN(sumYY) || Double.isNaN(sumXX)) {\n       return Double.NaN; // to avoid returning NaN as SSE\n   } else if (sumXX == 0) {\n       return sumYY; // to avoid division by zero\n   } else {\n       double result = sumYY - sumXY * sumXY / sumXX;\n       return result < 0 ? 0 : result; // to avoid returning negative value\n   }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex dcf512b72..0bbc87081 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -260,9 +260,16 @@ public class SimpleRegression implements Serializable {\n      *\n      * @return sum of squared errors associated with the regression model\n      */\n-    public double getSumSquaredErrors() {\n-        return sumYY - sumXY * sumXY / sumXX;\n-    }\n+public double getSumSquaredErrors() {\n+   if (Double.isNaN(sumXY) || Double.isNaN(sumYY) || Double.isNaN(sumXX)) {\n+       return Double.NaN; // to avoid returning NaN as SSE\n+   } else if (sumXX == 0) {\n+       return sumYY; // to avoid division by zero\n+   } else {\n+       double result = sumYY - sumXY * sumXY / sumXX;\n+       return result < 0 ? 0 : result; // to avoid returning negative value\n+   }\n+}\n \n     /**\n      * Returns the sum of squared deviations of the y values about their mean.",
    "result_reason": "junit.framework.AssertionFailedError: SSE not NaN",
    "test_result": "FAIL"
}