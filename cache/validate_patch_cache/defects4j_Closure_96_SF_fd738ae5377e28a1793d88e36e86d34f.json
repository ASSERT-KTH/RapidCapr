{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  List<Node> arguments = call.children().subList(1, numArgs + 1);    \n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n\n  // Check each parameter against its corresponding argument.\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    ordinal++;\n    if (!arguments.isEmpty()) {\n      argument = arguments.remove(0);\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    } else {\n      validator.expectArgumentMatchesParameter(\n          t, null, null, getJSType(parameter), call, ordinal);\n    }\n  }\n\n  // Check varargs arguments.\n  if (functionType.isVarArgs()) {\n    while (!arguments.isEmpty()) {\n      argument = arguments.remove(0);\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(parameter), call, ++ordinal);\n    }\n  }\n\n  // Check argument count.\n  if (numArgs < minArgs ||\n      (maxArgs != -1 && numArgs > maxArgs)) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs), String.valueOf(minArgs),\n           maxArgs != Integer.MAX_VALUE ?\n           \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..095e057d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,53 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  List<Node> arguments = call.children().subList(1, numArgs + 1);    \n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+\n+  // Check each parameter against its corresponding argument.\n+  while (parameters.hasNext()) {\n+    parameter = parameters.next();\n+    ordinal++;\n+    if (!arguments.isEmpty()) {\n+      argument = arguments.remove(0);\n+      validator.expectArgumentMatchesParameter(\n+          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+    } else {\n+      validator.expectArgumentMatchesParameter(\n+          t, null, null, getJSType(parameter), call, ordinal);\n     }\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  // Check varargs arguments.\n+  if (functionType.isVarArgs()) {\n+    while (!arguments.isEmpty()) {\n+      argument = arguments.remove(0);\n+      validator.expectArgumentMatchesParameter(\n+          t, argument, getJSType(argument), getJSType(parameter), call, ++ordinal);\n     }\n   }\n \n+  // Check argument count.\n+  if (numArgs < minArgs ||\n+      (maxArgs != -1 && numArgs > maxArgs)) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+           validator.getReadableJSTypeName(call.getFirstChild(), false),\n+           String.valueOf(numArgs), String.valueOf(minArgs),\n+           maxArgs != Integer.MAX_VALUE ?\n+           \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}