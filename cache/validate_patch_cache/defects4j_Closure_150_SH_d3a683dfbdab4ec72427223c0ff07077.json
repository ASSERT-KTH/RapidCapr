{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.VAR:\n          if (!parent.isFunction()) { // This line has been changed.\n            defineVar(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..523fdfbc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1456,13 +1456,14 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.VAR:\n+          if (!parent.isFunction()) { // This line has been changed.\n+            defineVar(n, parent);\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}