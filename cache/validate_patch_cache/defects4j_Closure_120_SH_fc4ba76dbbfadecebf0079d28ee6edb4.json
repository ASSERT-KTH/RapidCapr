{
    "patch": "      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      Deque<BasicBlock> stack = new ArrayDeque<>();\n      BasicBlock block = ref.getBasicBlock();\n      while (block != null) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n        // add all predecessors to the stack\n        for (BasicBlock predecessor : block.getPredecessors()) {\n          if (!stack.contains(predecessor)) {\n            stack.push(predecessor);\n          }\n        }\n        // get next block from the stack\n        block = stack.poll();\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..fbf5599f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,31 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Reference ref = getOneAndOnlyAssignment();\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      // Make sure this assignment is not in a loop.\n+      Deque<BasicBlock> stack = new ArrayDeque<>();\n+      BasicBlock block = ref.getBasicBlock();\n+      while (block != null) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+        // add all predecessors to the stack\n+        for (BasicBlock predecessor : block.getPredecessors()) {\n+          if (!stack.contains(predecessor)) {\n+            stack.push(predecessor);\n+          }\n+        }\n+        // get next block from the stack\n+        block = stack.poll();\n+      }\n+\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}