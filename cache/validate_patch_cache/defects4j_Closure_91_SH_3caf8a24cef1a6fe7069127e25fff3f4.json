{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLhsOfAssign(node)) {\n        Node maybeGetProp = node.getParent();\n\n        // Don't traverse if the function is in a GOOG.inherits call.\n        if (maybeGetProp != null &&\n            maybeGetProp.getType() == Token.GETPROP &&\n            maybeGetProp.getLastChild().getString().equals(\"inherits\")) {\n          return false;\n        }\n\n        if (maybeGetProp != null &&\n            maybeGetProp.getType() == Token.GETPROP &&\n            maybeGetProp.getFirstChild().getType() == Token.NAME &&\n            \"prototype\".equals(maybeGetProp.getLastChild().getString())) {\n          return false;\n        }\n\n        maybeGetProp = maybeGetProp.getParent();\n        if (maybeGetProp != null &&\n            maybeGetProp.getType() == Token.GETPROP &&\n            maybeGetProp.getFirstChild().getType() == Token.NAME &&\n            \"prototype\".equals(maybeGetProp.getLastChild().getString())) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b83dddd7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,32 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLhsOfAssign(node)) {\n+        Node maybeGetProp = node.getParent();\n+\n+        // Don't traverse if the function is in a GOOG.inherits call.\n+        if (maybeGetProp != null &&\n+            maybeGetProp.getType() == Token.GETPROP &&\n+            maybeGetProp.getLastChild().getString().equals(\"inherits\")) {\n+          return false;\n+        }\n+\n+        if (maybeGetProp != null &&\n+            maybeGetProp.getType() == Token.GETPROP &&\n+            maybeGetProp.getFirstChild().getType() == Token.NAME &&\n+            \"prototype\".equals(maybeGetProp.getLastChild().getString())) {\n+          return false;\n+        }\n+\n+        maybeGetProp = maybeGetProp.getParent();\n+        if (maybeGetProp != null &&\n+            maybeGetProp.getType() == Token.GETPROP &&\n+            maybeGetProp.getFirstChild().getType() == Token.NAME &&\n+            \"prototype\".equals(maybeGetProp.getLastChild().getString())) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}