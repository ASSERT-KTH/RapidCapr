{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean viaRegistry = resolveViaRegistry(t, enclosing);\n  boolean viaProperties = !isResolved() && resolveViaProperties(t, enclosing);\n\n  if (viaRegistry && viaProperties) {\n    // If both mechanisms resolve the type, choose based on which one supports the prototype chain.\n    boolean registrySupportsPrototype = registry != null && registry.isSupportsProto();\n    if (registrySupportsPrototype) {\n      super.resolveInternal(t, enclosing);\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    } else {\n      reportWarning(JSError.make(protoChainWarningName));\n      finishPropertyContinuations();\n      return this;\n    }\n  } else if (viaRegistry) {\n    super.resolveInternal(t, enclosing);\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  } else if (viaProperties) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  } else {\n    return this;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..82731d6e 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,32 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean viaRegistry = resolveViaRegistry(t, enclosing);\n+  boolean viaProperties = !isResolved() && resolveViaProperties(t, enclosing);\n+\n+  if (viaRegistry && viaProperties) {\n+    // If both mechanisms resolve the type, choose based on which one supports the prototype chain.\n+    boolean registrySupportsPrototype = registry != null && registry.isSupportsProto();\n+    if (registrySupportsPrototype) {\n       super.resolveInternal(t, enclosing);\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    } else {\n+      reportWarning(JSError.make(protoChainWarningName));\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      return this;\n     }\n-\n+  } else if (viaRegistry) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  } else if (viaProperties) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  } else {\n+    return this;\n   }\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: 'void' type not allowed here",
    "test_result": "ERROR"
}