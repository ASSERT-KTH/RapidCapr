{
    "patch": "My apologies, here is a revised solution that should fix the issue:\n```\nint codePoint = Character.codePointAt(input, pos);\nif (Character.isSupplementaryCodePoint(codePoint)) {\n    // write the surrogate pair as 2 characters\n    out.write(Character.highSurrogate(codePoint));\n    out.write(Character.lowSurrogate(codePoint));\n    pos +=2;\n} else {\n    out.write(codePoint);\n    pos += 1;\n}\n```",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..8768b3c9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,19 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+My apologies, here is a revised solution that should fix the issue:\n+```\n+int codePoint = Character.codePointAt(input, pos);\n+if (Character.isSupplementaryCodePoint(codePoint)) {\n+    // write the surrogate pair as 2 characters\n+    out.write(Character.highSurrogate(codePoint));\n+    out.write(Character.lowSurrogate(codePoint));\n+    pos +=2;\n+} else {\n+    out.write(codePoint);\n+    pos += 1;\n+}\n+```\n             }\n         }\n     }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}