{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index >= seqEnd) {\n        return 0; // Input empty or index out of bounds\n    }\n\n    // Identify the entity\n    if (input.charAt(index) != '&' || index == seqEnd - 1) {\n        return 0; // Not an entity, or incomplete at end of input\n    }\n\n    int start = index + 1;\n    boolean isHex = false;\n    if (input.charAt(start) == '#') {\n        start++;\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            isHex = true;\n            start++;\n        }\n    } else {\n        return 0; // Entity incomplete or malformed\n    }\n\n    // Identify the end of the entity\n    int end = start;\n    while (end < seqEnd && input.charAt(end) != ';') {\n        end++;\n    }\n\n    if (end >= seqEnd || end == start) {\n        return 0; // Entity incomplete or malformed\n    }\n\n    // Parse the value and write to the output\n    int value;\n    try {\n        String entityValue = input.subSequence(start, end).toString();\n        value = isHex ? Integer.parseInt(entityValue, 16) : Integer.parseInt(entityValue);\n    } catch(NumberFormatException nfe) {\n        return 0; // Entity cannot be parsed as integer\n    }\n\n    if (isInvalid(value)) {\n        // Write the numeric entity\n        out.write(\"&#\");\n        if (isHex) {\n            out.write('x');\n        }\n        out.write(Integer.toString(value));\n        out.write(';');\n    } else {\n        // Write the character\n        out.write(value);\n    }\n\n    return end - index + 1;\n}\n\n// Determine if the given value is a printable character that should not be output directly\nprivate static boolean isInvalid(int value) {\n    return value < 0 || (value >= 0xD800 && value <= 0xDFFF) ||\n           (value > 0x7F && value < 0xA0) || (value > 0x9F && value < 0x20FFFE);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..c427d0b1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,67 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index >= seqEnd) {\n+        return 0; // Input empty or index out of bounds\n+    }\n \n-                // Check there's more than just an x after the &#\n-            }\n+    // Identify the entity\n+    if (input.charAt(index) != '&' || index == seqEnd - 1) {\n+        return 0; // Not an entity, or incomplete at end of input\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    int start = index + 1;\n+    boolean isHex = false;\n+    if (input.charAt(start) == '#') {\n+        start++;\n+        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            isHex = true;\n+            start++;\n+        }\n+    } else {\n+        return 0; // Entity incomplete or malformed\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+    // Identify the end of the entity\n+    int end = start;\n+    while (end < seqEnd && input.charAt(end) != ';') {\n+        end++;\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    if (end >= seqEnd || end == start) {\n+        return 0; // Entity incomplete or malformed\n+    }\n \n+    // Parse the value and write to the output\n+    int value;\n+    try {\n+        String entityValue = input.subSequence(start, end).toString();\n+        value = isHex ? Integer.parseInt(entityValue, 16) : Integer.parseInt(entityValue);\n+    } catch(NumberFormatException nfe) {\n+        return 0; // Entity cannot be parsed as integer\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+    if (isInvalid(value)) {\n+        // Write the numeric entity\n+        out.write(\"&#\");\n+        if (isHex) {\n+            out.write('x');\n         }\n-        return 0;\n+        out.write(Integer.toString(value));\n+        out.write(';');\n+    } else {\n+        // Write the character\n+        out.write(value);\n     }\n+\n+    return end - index + 1;\n+}\n+\n+// Determine if the given value is a printable character that should not be output directly\n+private static boolean isInvalid(int value) {\n+    return value < 0 || (value >= 0xD800 && value <= 0xDFFF) ||\n+           (value > 0x7F && value < 0xA0) || (value > 0x9F && value < 0x20FFFE);\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&#x128;&#x159;]>",
    "test_result": "FAIL"
}