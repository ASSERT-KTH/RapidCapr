{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    List<Map<String,Object>> list = gson.fromJson(jsonStr, new TypeToken<List<Map<String,Object>>>(){}.getType());\n    int totalCount = 0;\n    int typedCount = 0;\n    for(Map<String,Object> map : list) {\n        totalCount++;\n        if(map.containsKey(\"type\") && !map.get(\"type\").equals(\"\")) {\n            typedCount++;\n        }\n    }\n    return ((double)typedCount/(double)totalCount)*100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..53a77464 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    List<Map<String,Object>> list = gson.fromJson(jsonStr, new TypeToken<List<Map<String,Object>>>(){}.getType());\n+    int totalCount = 0;\n+    int typedCount = 0;\n+    for(Map<String,Object> map : list) {\n+        totalCount++;\n+        if(map.containsKey(\"type\") && !map.get(\"type\").equals(\"\")) {\n+            typedCount++;\n+        }\n+    }\n+    return ((double)typedCount/(double)totalCount)*100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}