{
    "patch": "public static String fixForLoop(String input) {\n    Pattern pattern = Pattern.compile(\"for\\\\s*\\\\(\\\\s*([^;]*;[^;]*;[^;]*)\\\\s*\\\\)\");\n    Matcher matcher = pattern.matcher(input);\n    StringBuffer sb = new StringBuffer();\n\n    while (matcher.find()) {\n        String forLoop = matcher.group(1);\n        String[] conditions = forLoop.split(\";\");\n        if (conditions.length == 3 && conditions[1].contains(\"in\")) {\n            String[] secondCondition = conditions[1].split(\" \");\n            sb.append(\"for(\");\n            sb.append(conditions[0]).append(\";\");\n            sb.append(secondCondition[0]).append(\".hasOwnProperty(\");\n            sb.append(secondCondition[2]).append(\")\");\n            sb.append(conditions[2]).append(\")\");\n        } else {\n            matcher.appendReplacement(sb, \"for($1)\");\n        }\n    }\n    matcher.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..f4085666 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,28 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixForLoop(String input) {\n+    Pattern pattern = Pattern.compile(\"for\\\\s*\\\\(\\\\s*([^;]*;[^;]*;[^;]*)\\\\s*\\\\)\");\n+    Matcher matcher = pattern.matcher(input);\n+    StringBuffer sb = new StringBuffer();\n+\n+    while (matcher.find()) {\n+        String forLoop = matcher.group(1);\n+        String[] conditions = forLoop.split(\";\");\n+        if (conditions.length == 3 && conditions[1].contains(\"in\")) {\n+            String[] secondCondition = conditions[1].split(\" \");\n+            sb.append(\"for(\");\n+            sb.append(conditions[0]).append(\";\");\n+            sb.append(secondCondition[0]).append(\".hasOwnProperty(\");\n+            sb.append(secondCondition[2]).append(\")\");\n+            sb.append(conditions[2]).append(\")\");\n+        } else {\n+            matcher.appendReplacement(sb, \"for($1)\");\n+        }\n+    }\n+    matcher.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}