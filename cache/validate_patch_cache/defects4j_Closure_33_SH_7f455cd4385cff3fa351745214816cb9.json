{
    "patch": "    if (!constraintObj.isNominalConstructor() && constraintObj.isAnObjectType()) {\n      ObjectType objType = constraintObj.toObjectType();\n      JSDocInfo jsDocInfo = (objType.isFunctionPrototypeType() || objType.isThisType())\n          ? null\n          : getJSDocInfo();\n      ObjectType instanceType = objType.ensureHasOwnPropertyPrototypes();\n      JSType targetType = instanceType.getPrototype();\n      if (!getJSType().isConstructor()) {\n        // We're inferring a constructor for the first time, declare 'this'.\n        if (jsDocInfo != null && jsDocInfo.getThisType() != null) {\n          defineDeclaredProperty(\"this\", jsDocInfo.getThisType(), null, true);\n        } else {\n          defineInferredProperty(\"this\",\n              getCommonTypes().createNullableInstanceType(targetType), null);\n        }\n        if (shouldUseUndeclaredPropertiesWarning()) {\n          undeclaredPropertiesOnThis.putAll(instanceType.getOwnPropertyNames());\n        }\n      } else if (!instanceType.isSubtype(getInstanceType())) {\n        // The constructor is already declared in this scope, just update the\n        // properties on 'this'.\n        getInstanceType().addPropertiesFrom(\n            instanceType.getProperties(), instanceType.getDeclaredProperties());\n        if (shouldUseUndeclaredPropertiesWarning()) {\n          putAllIfNotPresent(undeclaredPropertiesOnThis,\n              instanceType.getOwnPropertyNames(), typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n        }\n      }\n      if (jsDocInfo != null) {\n        ObjectType functionType = getFunctionTypeWithoutReceiver(\n            jsDocInfo, JSType.join(getJSType().getTemplateTypeMap().values()));\n        definePropertiesAndInferredParams(functionType, instanceType);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..a8b7094e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,40 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!constraintObj.isNominalConstructor() && constraintObj.isAnObjectType()) {\n+      ObjectType objType = constraintObj.toObjectType();\n+      JSDocInfo jsDocInfo = (objType.isFunctionPrototypeType() || objType.isThisType())\n+          ? null\n+          : getJSDocInfo();\n+      ObjectType instanceType = objType.ensureHasOwnPropertyPrototypes();\n+      JSType targetType = instanceType.getPrototype();\n+      if (!getJSType().isConstructor()) {\n+        // We're inferring a constructor for the first time, declare 'this'.\n+        if (jsDocInfo != null && jsDocInfo.getThisType() != null) {\n+          defineDeclaredProperty(\"this\", jsDocInfo.getThisType(), null, true);\n+        } else {\n+          defineInferredProperty(\"this\",\n+              getCommonTypes().createNullableInstanceType(targetType), null);\n+        }\n+        if (shouldUseUndeclaredPropertiesWarning()) {\n+          undeclaredPropertiesOnThis.putAll(instanceType.getOwnPropertyNames());\n+        }\n+      } else if (!instanceType.isSubtype(getInstanceType())) {\n+        // The constructor is already declared in this scope, just update the\n+        // properties on 'this'.\n+        getInstanceType().addPropertiesFrom(\n+            instanceType.getProperties(), instanceType.getDeclaredProperties());\n+        if (shouldUseUndeclaredPropertiesWarning()) {\n+          putAllIfNotPresent(undeclaredPropertiesOnThis,\n+              instanceType.getOwnPropertyNames(), typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n+        }\n+      }\n+      if (jsDocInfo != null) {\n+        ObjectType functionType = getFunctionTypeWithoutReceiver(\n+            jsDocInfo, JSType.join(getJSType().getTemplateTypeMap().values()));\n+        definePropertiesAndInferredParams(functionType, instanceType);\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}