{
    "patch": "\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        // check if parsing a leap day of february while current year is not a leap year and adjust to previous day\n        if (bucket.getOverflow() > 0 && isLeapDayWithNonLeapYear(bucket)) {\n            bucket.addOverflow(-1);\n        }\n        \n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n    \n    private boolean isLeapDayWithNonLeapYear(DateTimeParserBucket bucket) {\n        Integer year = bucket.getParsed(DateTimeFieldType.year());\n        if (year == null) {\n            year = bucket.getOffset().get(DateTimeFieldType.year());\n            if (year == null) {\n                return false;\n            }\n        }\n        return year % 4 != 0 && bucket.getOverflow() == 1 && bucket.getParsed(DateTimeFieldType.monthOfYear()) == 2 && bucket.getParsed(DateTimeFieldType.dayOfMonth()) == 29;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..3c3c0c8f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,21 +697,16 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n         int newPos = parser.parseInto(bucket, text, position);\n+        \n+        // check if parsing a leap day of february while current year is not a leap year and adjust to previous day\n+        if (bucket.getOverflow() > 0 && isLeapDayWithNonLeapYear(bucket)) {\n+            bucket.addOverflow(-1);\n+        }\n+        \n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n@@ -726,6 +721,16 @@ public class DateTimeFormatter {\n         }\n         return newPos;\n     }\n+    \n+    private boolean isLeapDayWithNonLeapYear(DateTimeParserBucket bucket) {\n+        Integer year = bucket.getParsed(DateTimeFieldType.year());\n+        if (year == null) {\n+            year = bucket.getOffset().get(DateTimeFieldType.year());\n+            if (year == null) {\n+                return false;\n+            }\n+        }\n+        return year % 4 != 0 && bucket.getOverflow() == 1 && bucket.getParsed(DateTimeFieldType.monthOfYear()) == 2 && bucket.getParsed(DateTimeFieldType.dayOfMonth()) == 29;\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}