{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchChars.length;\n    final int firstSupplementaryCodePoint = Character.MIN_SUPPLEMENTARY_CODE_POINT;\n\n    for (int i = 0; i < strLen; i++) {\n        final char ch = sequence.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i < strLen - 1) {\n                final char ch2 = sequence.charAt(i + 1);\n                final int codePoint = Character.toCodePoint(ch, ch2);\n                if (contains(searchChars, codePoint)) {\n                    return true;\n                }\n            }\n        } else if (searchLen <= firstSupplementaryCodePoint) {\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        } else {\n            final int codePoint = Character.codePointAt(sequence, i);\n            if (contains(searchChars, codePoint)) {\n                return true;\n            }\n            if (Character.isSupplementaryCodePoint(codePoint)) {\n                i++;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(final char[] array, final int ch) {\n    for (final char element : array) {\n        if (element == ch) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..82b3ccf8 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,51 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int firstSupplementaryCodePoint = Character.MIN_SUPPLEMENTARY_CODE_POINT;\n+\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < strLen - 1) {\n+                final char ch2 = sequence.charAt(i + 1);\n+                final int codePoint = Character.toCodePoint(ch, ch2);\n+                if (contains(searchChars, codePoint)) {\n+                    return true;\n+                }\n+            }\n+        } else if (searchLen <= firstSupplementaryCodePoint) {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            final int codePoint = Character.codePointAt(sequence, i);\n+            if (contains(searchChars, codePoint)) {\n+                return true;\n+            }\n+            if (Character.isSupplementaryCodePoint(codePoint)) {\n+                i++;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(final char[] array, final int ch) {\n+    for (final char element : array) {\n+        if (element == ch) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}