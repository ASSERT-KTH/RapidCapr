{
    "patch": "private static boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    if (isSimpleExpression(child)) {\n      Node parent = n.getParent();\n      if (parent != null) {\n        int parentType = parent.getType();\n        Node grandParent = parent.getParent();\n        int grandParentType = grandParent.getType();\n        if (parentType == Token.IF && grandParentType == Token.BLOCK\n            && grandParent.getParent().getType() == Token.EXPR_RESULT) {\n          // Handle special case where block is the consequence of an if statement\n          Node conditional = parent.getFirstChild();\n          Node alternative = conditional.getNext();\n          return (n == conditional.getLastChild() || n == alternative.getLastChild());\n        } else if (parentType == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n          Node grandGrandParent = grandParent.getParent();\n          if (grandGrandParent != null) {\n            int grandGrandParentType = grandGrandParent.getType();\n            if (parent == grandParent.getFirstChild() && (grandGrandParentType == Token.VAR\n                || grandGrandParentType == Token.ASSIGN || grandGrandParentType == Token.EXPR_RESULT)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate static boolean isSimpleExpression(Node n) {\n  int type = n.getType();\n  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER || type == Token.NULL\n      || type == Token.FALSE || type == Token.TRUE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..32f267a5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,42 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private static boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node child = n.getFirstChild();\n+    if (isSimpleExpression(child)) {\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        int parentType = parent.getType();\n+        Node grandParent = parent.getParent();\n+        int grandParentType = grandParent.getType();\n+        if (parentType == Token.IF && grandParentType == Token.BLOCK\n+            && grandParent.getParent().getType() == Token.EXPR_RESULT) {\n+          // Handle special case where block is the consequence of an if statement\n+          Node conditional = parent.getFirstChild();\n+          Node alternative = conditional.getNext();\n+          return (n == conditional.getLastChild() || n == alternative.getLastChild());\n+        } else if (parentType == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n+          Node grandGrandParent = grandParent.getParent();\n+          if (grandGrandParent != null) {\n+            int grandGrandParentType = grandGrandParent.getType();\n+            if (parent == grandParent.getFirstChild() && (grandGrandParentType == Token.VAR\n+                || grandGrandParentType == Token.ASSIGN || grandGrandParentType == Token.EXPR_RESULT)) {\n+              return true;\n+            }\n+          }\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n+\n+private static boolean isSimpleExpression(Node n) {\n+  int type = n.getType();\n+  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER || type == Token.NULL\n+      || type == Token.FALSE || type == Token.TRUE;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}