{
    "patch": "        if (n.isFunction()) {\n          // Skip function literals.\n          if (n.getParent().isCall() && n.getPrevious() != null && n.getPrevious().type == Token.GETPROP) {\n            return false;\n          }\n          if (n.getJSDocInfo() != null && n.getJSDocInfo().hasAnySuppressions()) {\n            if (n.getJSDocInfo().isSuppressingWarnings()\n                || n.getJSDocInfo().isSuppressingMissingOverride()) {\n              return false;\n            }\n          }\n\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n              return true;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..02cf5524 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,24 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isFunction()) {\n+          // Skip function literals.\n+          if (n.getParent().isCall() && n.getPrevious() != null && n.getPrevious().type == Token.GETPROP) {\n+            return false;\n+          }\n+          if (n.getJSDocInfo() != null && n.getJSDocInfo().hasAnySuppressions()) {\n+            if (n.getJSDocInfo().isSuppressingWarnings()\n+                || n.getJSDocInfo().isSuppressingMissingOverride()) {\n+              return false;\n+            }\n+          }\n+\n+          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+              return true;\n+            }\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}