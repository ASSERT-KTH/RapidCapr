{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node paramNode = argList.getFirstChild();\n      int i = 0;\n      while (paramNode != null) {\n        Var var = fnScope.getVar(paramNode.getString());\n        if (!referenced.contains(var)) {\n          if (i == 0) {\n            // The first param must be removed differently for arrow functions.\n            Node arrowFirstChild = function.getFirstChild();\n            Preconditions.checkState(\n                arrowFirstChild.getToken() == Token.PARAM_LIST);\n            Node firstArg = arrowFirstChild.getFirstChild();\n            if (firstArg.getNext() == null) {\n              // Given \"p => { ... }\", don't remove \"p\".\n              return;\n            } else {\n              function.removeChild(firstArg);\n            }\n          } else {\n            argList.removeChild(paramNode);\n            compiler.reportCodeChange();\n          }\n        } else {\n          ++i;\n        }\n        paramNode = paramNode.getNext();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f98ea017 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,48 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node paramNode = argList.getFirstChild();\n+      int i = 0;\n+      while (paramNode != null) {\n+        Var var = fnScope.getVar(paramNode.getString());\n+        if (!referenced.contains(var)) {\n+          if (i == 0) {\n+            // The first param must be removed differently for arrow functions.\n+            Node arrowFirstChild = function.getFirstChild();\n+            Preconditions.checkState(\n+                arrowFirstChild.getToken() == Token.PARAM_LIST);\n+            Node firstArg = arrowFirstChild.getFirstChild();\n+            if (firstArg.getNext() == null) {\n+              // Given \"p => { ... }\", don't remove \"p\".\n+              return;\n+            } else {\n+              function.removeChild(firstArg);\n+            }\n+          } else {\n+            argList.removeChild(paramNode);\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          ++i;\n+        }\n+        paramNode = paramNode.getNext();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}