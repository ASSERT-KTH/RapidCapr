{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        return new PeriodFormatter(sep, sep);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        List<Object> separatorPairs = new ArrayList<>();\n        List<Object> printerParserPairs = new ArrayList<>();\n        for (Object obj : elementPairs) {\n            if (obj instanceof Separator) {\n                separatorPairs.add(obj);\n            } else {\n                printerParserPairs.add(obj);\n            }\n        }\n        Composite[] nestedComposites = createNestedComposites(printerParserPairs, notPrinter, notParser);\n        PeriodPrinter printer = new CompositePrinter(nestedComposites);\n        PeriodParser parser = new CompositeParser(nestedComposites);\n        for (Object separatorPair : separatorPairs) {\n            Separator separator = (Separator) separatorPair;\n            printer = separator.finishPrinter(printer);\n            parser = separator.finishParser(parser);\n        }\n        return new PeriodFormatter(printer, parser);\n    }\n}\n\nprivate static Composite[] createNestedComposites(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    List<Object> nestedPairs = new ArrayList<>();\n    for (Object obj : elementPairs) {\n        if (obj instanceof List) {\n            List<?> list = (List<?>) obj;\n            PeriodFormatter formatter = toFormatter(list, notPrinter, notParser);\n            nestedPairs.add(formatter.getPrinter());\n            nestedPairs.add(formatter.getParser());\n        } else {\n            nestedPairs.add(obj);\n        }\n    }\n    return createComposite(nestedPairs);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b84ce76b 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,56 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        return new PeriodFormatter(sep, sep);\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        List<Object> separatorPairs = new ArrayList<>();\n+        List<Object> printerParserPairs = new ArrayList<>();\n+        for (Object obj : elementPairs) {\n+            if (obj instanceof Separator) {\n+                separatorPairs.add(obj);\n+            } else {\n+                printerParserPairs.add(obj);\n+            }\n+        }\n+        Composite[] nestedComposites = createNestedComposites(printerParserPairs, notPrinter, notParser);\n+        PeriodPrinter printer = new CompositePrinter(nestedComposites);\n+        PeriodParser parser = new CompositeParser(nestedComposites);\n+        for (Object separatorPair : separatorPairs) {\n+            Separator separator = (Separator) separatorPair;\n+            printer = separator.finishPrinter(printer);\n+            parser = separator.finishParser(parser);\n+        }\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n+\n+private static Composite[] createNestedComposites(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    List<Object> nestedPairs = new ArrayList<>();\n+    for (Object obj : elementPairs) {\n+        if (obj instanceof List) {\n+            List<?> list = (List<?>) obj;\n+            PeriodFormatter formatter = toFormatter(list, notPrinter, notParser);\n+            nestedPairs.add(formatter.getPrinter());\n+            nestedPairs.add(formatter.getParser());\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            nestedPairs.add(obj);\n         }\n     }\n+    return createComposite(nestedPairs);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}