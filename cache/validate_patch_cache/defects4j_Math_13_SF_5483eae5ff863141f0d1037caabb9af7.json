{
    "patch": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.SingularValueDecomposition;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    RealMatrix s = MatrixUtils.createRealMatrix(svd.getSingularValues());\n    RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        sRoot.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n    }\n    RealMatrix u = svd.getU();\n    RealMatrix vT = svd.getVT();\n    RealMatrix sRootU = sRoot.multiply(u.transpose());\n    return vT.transpose().multiply(sRootU);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5a9e42fa1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.SingularValueDecomposition;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    RealMatrix s = MatrixUtils.createRealMatrix(svd.getSingularValues());\n+    RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        sRoot.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n     }\n+    RealMatrix u = svd.getU();\n+    RealMatrix vT = svd.getVT();\n+    RealMatrix sRootU = sRoot.multiply(u.transpose());\n+    return vT.transpose().multiply(sRootU);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}