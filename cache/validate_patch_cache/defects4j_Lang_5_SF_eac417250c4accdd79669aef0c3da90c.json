{
    "patch": "    public static Locale toLocale(final String str) {\n        if (str == null || str.isEmpty()) {\n            return null;\n        }\n        final String[] parts = str.split(\"_\", -1);\n        final int len = parts.length;\n        if (len == 0 || len > 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final String language = parts[0];\n        if (!isValidCode(language)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final String country = (len >= 2 && isValidCode(parts[1])) ? parts[1] : \"\";\n        final String variant = (len == 3 && isValidCode(parts[2])) ? parts[2] : \"\";\n        return new Locale(language, country, variant);\n    }\n    \n    // Helper method to check if a string is valid language/country code\n    private static boolean isValidCode(String code) {\n        if (code.isEmpty() || code.length() > 2) {\n            return false;\n        }\n        for (int i = 0; i < code.length(); i++) {\n            if (!Character.isLowerCase(code.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..75e0fa08 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -86,45 +86,34 @@ public class LocaleUtils {\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n     public static Locale toLocale(final String str) {\n-        if (str == null) {\n+        if (str == null || str.isEmpty()) {\n             return null;\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        final String[] parts = str.split(\"_\", -1);\n+        final int len = parts.length;\n+        if (len == 0 || len > 3) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        final String language = parts[0];\n+        if (!isValidCode(language)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        final String country = (len >= 2 && isValidCode(parts[1])) ? parts[1] : \"\";\n+        final String variant = (len == 3 && isValidCode(parts[2])) ? parts[2] : \"\";\n+        return new Locale(language, country, variant);\n+    }\n+    \n+    // Helper method to check if a string is valid language/country code\n+    private static boolean isValidCode(String code) {\n+        if (code.isEmpty() || code.length() > 2) {\n+            return false;\n+        }\n+        for (int i = 0; i < code.length(); i++) {\n+            if (!Character.isLowerCase(code.charAt(i))) {\n+                return false;\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n+        return true;\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[P]> but was:<[]>",
    "test_result": "FAIL"
}