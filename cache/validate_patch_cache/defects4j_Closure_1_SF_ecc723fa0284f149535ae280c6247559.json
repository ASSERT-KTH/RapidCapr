{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    if (fnScope.getDepth() != 0) {\n      Node function = fnScope.getRootNode();\n\n      Preconditions.checkState(function.isFunction());\n      if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n      }\n\n      Node argList = NodeUtil.getFunctionParameters(function);\n      boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n      // Keep track of all default values so we can remove unused param with default\n      List<Node> defaults = Lists.newArrayList();\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (arg.getDefaultValue() != null) {\n          defaults.add(arg);\n        }\n      }\n      if (!modifyCallers) {\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n          if (!lastArg.isDefaultValue()) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (referenced.contains(var)) {\n              break;\n            }\n            argList.removeChild(lastArg);\n            compiler.reportChangeToEnclosingScope(argList);\n          } else {\n            defaults.remove(lastArg);\n            if (lastArg.isObjectPattern() || lastArg.isArrayPattern()) {\n              // in ES6 destructuring, default value could be a pattern (Array or Object)\n              List<Node> children = lastArg.children();\n              for (Node child : children) {\n                defaults.remove(child);\n              }\n            }\n          }\n        }\n      } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n      }\n      // Remove unused param with default\n      for (Node defaultArg : defaults) {\n        // Remove default value\n        if (defaultArg.getDefaultValue() != null) {\n          NodeUtil.removeChild(argList, defaultArg.getDefaultValue());\n        }\n        // Remove param\n        NodeUtil.removeChild(argList, defaultArg);\n        compiler.reportChangeToEnclosingScope(argList);\n        compiler.reportChangeToEnclosingScope(defaultArg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a7c3b9e5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,59 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n+    // Strip unreferenced args off the end of the function declaration.\n+    if (fnScope.getDepth() != 0) {\n+      Node function = fnScope.getRootNode();\n \n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+      Preconditions.checkState(function.isFunction());\n+      if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+      }\n+\n+      Node argList = NodeUtil.getFunctionParameters(function);\n+      boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+      // Keep track of all default values so we can remove unused param with default\n+      List<Node> defaults = Lists.newArrayList();\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (arg.getDefaultValue() != null) {\n+          defaults.add(arg);\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+      if (!modifyCallers) {\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+          if (!lastArg.isDefaultValue()) {\n+            Var var = fnScope.getVar(lastArg.getString());\n+            if (referenced.contains(var)) {\n+              break;\n+            }\n+            argList.removeChild(lastArg);\n+            compiler.reportChangeToEnclosingScope(argList);\n+          } else {\n+            defaults.remove(lastArg);\n+            if (lastArg.isObjectPattern() || lastArg.isArrayPattern()) {\n+              // in ES6 destructuring, default value could be a pattern (Array or Object)\n+              List<Node> children = lastArg.children();\n+              for (Node child : children) {\n+                defaults.remove(child);\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+      }\n+      // Remove unused param with default\n+      for (Node defaultArg : defaults) {\n+        // Remove default value\n+        if (defaultArg.getDefaultValue() != null) {\n+          NodeUtil.removeChild(argList, defaultArg.getDefaultValue());\n+        }\n+        // Remove param\n+        NodeUtil.removeChild(argList, defaultArg);\n+        compiler.reportChangeToEnclosingScope(argList);\n+        compiler.reportChangeToEnclosingScope(defaultArg);\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}