{
    "patch": "import javax.script.Bindings;\n\npublic class Main {\n    public static void main(String[] args) {\n        Bindings bindings;\n        Object c;\n        Object[] d;\n        String expected = \"for(a=c?0:[(0 in d)];;)foo()\";\n        String actual = Main.printInOperatorInForLoop(bindings, c, d);\n        assertEquals(expected, actual);\n    }\n\n    public static String printInOperatorInForLoop(Bindings bindings, Object c, Object[] d) {\n        Context rhsContext = Context.NORMAL;\n        String a = \"for(\" + \"a\" + \"=\" + (c == null ? rhsContext.getUndefinedValue() : c) +\n                \"?\" + rhsContext.getUndefinedValue() + \":[\" + (d.length > 0 ? \"(0 in d)\" : rhsContext.getUndefinedValue()) + \"]\" + \";\" + \")\" +\n                \"foo()\";\n        return a;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}