{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                               FunctionType functionType) {\n    List<Node> arguments = call.children().subList(1, call.getChildCount());\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.size() > 0 && parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.get(0);\n        arguments = arguments.subList(1, arguments.size());\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                                                  getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numParams = functionType.getParameters().size();\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (arguments.size() > 0 && !functionType.isVarArgs()) {\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numParams + arguments.size()), String.valueOf(numParams),\n               maxArgs != Integer.MAX_VALUE ?\n                 \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    } else if (arguments.size() < minArgs - numParams || arguments.size() > maxArgs - numParams) {\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numParams + arguments.size()), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n                 \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..f67127de 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+private void visitParameterList(NodeTraversal t, Node call,\n+                               FunctionType functionType) {\n+    List<Node> arguments = call.children().subList(1, call.getChildCount());\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (arguments.size() > 0 && parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        argument = arguments.get(0);\n+        arguments = arguments.subList(1, arguments.size());\n+        ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                                                  getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n+    int numParams = functionType.getParameters().size();\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (arguments.size() > 0 && !functionType.isVarArgs()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+               String.valueOf(numParams + arguments.size()), String.valueOf(numParams),\n+               maxArgs != Integer.MAX_VALUE ?\n+                 \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    } else if (arguments.size() < minArgs - numParams || arguments.size() > maxArgs - numParams) {\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+               String.valueOf(numParams + arguments.size()), String.valueOf(minArgs),\n+               maxArgs != Integer.MAX_VALUE ?\n+                 \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}