{
    "patch": "result = lvalInt;\nif (n.getType() == Token.URSH) {\n    result = result & 0xffffffffL;\n}\nresult >>>= rvalInt;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..ae368a30 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,11 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+result = lvalInt;\n+if (n.getType() == Token.URSH) {\n+    result = result & 0xffffffffL;\n+}\n+result >>>= rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: bad operand types for binary operator '&'",
    "test_result": "ERROR"
}