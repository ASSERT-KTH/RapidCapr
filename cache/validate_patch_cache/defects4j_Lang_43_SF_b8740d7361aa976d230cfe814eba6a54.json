{
    "patch": "private StringBuilder appendQuotedString(String pattern, ParsePosition pos, StringBuilder appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                    QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);\n            default:\n                next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}\n\npublic static final String PATTERN = \"d/M/yy\"; // fix\n\npublic static String formatDate(long date) {\n    SimpleDateFormat formatter = new SimpleDateFormat(PATTERN);\n    return formatter.format(new Date(date));\n}\n\npublic static StringMessageFormat replaceTypeToString(StringMessageFormat format, Object[] args) {\n    Object[] newArgs = new Object[args.length];\n    for (int i = 0; i < args.length; i++) {\n        Object arg = args[i];\n        if (arg instanceof Date) {\n            newArgs[i] = formatDate(((Date)arg).getTime());\n        } else {\n            newArgs[i] = arg;\n        }\n    }\n    return new StringMessageFormat(format.toPattern()).format(newArgs);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..2f59bb78 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,53 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+private StringBuilder appendQuotedString(String pattern, ParsePosition pos, StringBuilder appendTo, boolean escapingOn) {\n+    int start = pos.getIndex();\n+    char[] c = pattern.toCharArray();\n+    if (escapingOn && c[start] == QUOTE) {\n+        return appendTo == null ? null : appendTo.append(QUOTE);\n+    }\n+    int lastHold = start;\n+    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n+                    QUOTE);\n+            pos.setIndex(i + ESCAPED_QUOTE.length());\n+            lastHold = pos.getIndex();\n+            continue;\n         }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n-            }\n-            switch (c[pos.getIndex()]) {\n+        switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 next(pos);\n                 return appendTo == null ? null : appendTo.append(c, lastHold,\n                         pos.getIndex() - lastHold);\n             default:\n                 next(pos);\n-            }\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n     }\n+    throw new IllegalArgumentException(\n+            \"Unterminated quoted string at position \" + start);\n+}\n+\n+public static final String PATTERN = \"d/M/yy\"; // fix\n+\n+public static String formatDate(long date) {\n+    SimpleDateFormat formatter = new SimpleDateFormat(PATTERN);\n+    return formatter.format(new Date(date));\n+}\n+\n+public static StringMessageFormat replaceTypeToString(StringMessageFormat format, Object[] args) {\n+    Object[] newArgs = new Object[args.length];\n+    for (int i = 0; i < args.length; i++) {\n+        Object arg = args[i];\n+        if (arg instanceof Date) {\n+            newArgs[i] = formatDate(((Date)arg).getTime());\n+        } else {\n+            newArgs[i] = arg;\n+        }\n+    }\n+    return new StringMessageFormat(format.toPattern()).format(newArgs);\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}