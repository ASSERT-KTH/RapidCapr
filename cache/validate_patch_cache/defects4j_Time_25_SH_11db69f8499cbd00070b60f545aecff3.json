{
    "patch": "                    // We need to handle the case where the next transition is right at instantLocal\n                    // Otherwise we may end up with the wrong offset (one hour too large)\n                    long nextLocalPrev = previousTransition(instantLocal - offsetLocal);\n                    if (nextLocalPrev == instantLocal - offsetLocal) {\n                        return offsetLocal;\n                    }\n                    \n                    int newOffset = getOffset(nextAdjusted);\n                    long nextGapLocal = nextLocal + offsetLocal;\n                    long nextGapAdjusted = nextGapLocal - (newOffset - offsetLocal) * DateTimeConstants.MILLIS_PER_HOUR;\n                    \n                    if (instantLocal + (newOffset - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR < nextGapAdjusted) {\n                        return offsetLocal;\n                    } else if (instantLocal >= nextGapLocal) {\n                        return newOffset;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d3d2761d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                    // We need to handle the case where the next transition is right at instantLocal\n+                    // Otherwise we may end up with the wrong offset (one hour too large)\n+                    long nextLocalPrev = previousTransition(instantLocal - offsetLocal);\n+                    if (nextLocalPrev == instantLocal - offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                    \n+                    int newOffset = getOffset(nextAdjusted);\n+                    long nextGapLocal = nextLocal + offsetLocal;\n+                    long nextGapAdjusted = nextGapLocal - (newOffset - offsetLocal) * DateTimeConstants.MILLIS_PER_HOUR;\n+                    \n+                    if (instantLocal + (newOffset - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR < nextGapAdjusted) {\n+                        return offsetLocal;\n+                    } else if (instantLocal >= nextGapLocal) {\n+                        return newOffset;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}