{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    int maxDurationHours = 48; // maximum duration to search for overlap is 48 hours\n    int minDurationHours = 1; // minimum duration to search for overlap is 1 hour\n    int durationHours = minDurationHours;\n    long instantBefore = instant - durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n    long instantAfter = instant + durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n    long localBefore = convertUTCToLocal(instantBefore);\n    long localAfter = convertUTCToLocal(instantAfter);\n    \n    // Search for overlap duration by increasing duration until overlap is found or maximum duration is reached\n    while (instantBefore < instantAfter && localBefore != localAfter && durationHours <= maxDurationHours) {\n        durationHours *= 2;\n        instantBefore = instant - durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n        instantAfter = instant + durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n        localBefore = convertUTCToLocal(instantBefore);\n        localAfter = convertUTCToLocal(instantAfter);\n    }\n    \n    // If overlap was not found, return the original instant\n    if (localBefore != localAfter) {\n        return instant;\n    }\n    \n    // Use binary search to find the range of instants that have the same local time\n    long left = instantBefore;\n    long right = instantAfter;\n    while (right - left > DateTimeConstants.MILLIS_PER_HOUR) {\n        long mid = (left + right) / 2;\n        if (convertUTCToLocal(mid) == localBefore) {\n            left = mid;\n        } else {\n            right = mid;\n        }\n    }\n    \n    // Return the instant with the appropriate offset\n    return convertLocalToUTC(localBefore, false, earlierOrLater ? right : left);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..085318c7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,44 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    int maxDurationHours = 48; // maximum duration to search for overlap is 48 hours\n+    int minDurationHours = 1; // minimum duration to search for overlap is 1 hour\n+    int durationHours = minDurationHours;\n+    long instantBefore = instant - durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n+    long instantAfter = instant + durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n+    long localBefore = convertUTCToLocal(instantBefore);\n+    long localAfter = convertUTCToLocal(instantAfter);\n+    \n+    // Search for overlap duration by increasing duration until overlap is found or maximum duration is reached\n+    while (instantBefore < instantAfter && localBefore != localAfter && durationHours <= maxDurationHours) {\n+        durationHours *= 2;\n+        instantBefore = instant - durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n+        instantAfter = instant + durationHours * DateTimeConstants.MILLIS_PER_HOUR;\n+        localBefore = convertUTCToLocal(instantBefore);\n+        localAfter = convertUTCToLocal(instantAfter);\n+    }\n+    \n+    // If overlap was not found, return the original instant\n+    if (localBefore != localAfter) {\n+        return instant;\n+    }\n+    \n+    // Use binary search to find the range of instants that have the same local time\n+    long left = instantBefore;\n+    long right = instantAfter;\n+    while (right - left > DateTimeConstants.MILLIS_PER_HOUR) {\n+        long mid = (left + right) / 2;\n+        if (convertUTCToLocal(mid) == localBefore) {\n+            left = mid;\n+        } else {\n+            right = mid;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n+    \n+    // Return the instant with the appropriate offset\n+    return convertLocalToUTC(localBefore, false, earlierOrLater ? right : left);\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}