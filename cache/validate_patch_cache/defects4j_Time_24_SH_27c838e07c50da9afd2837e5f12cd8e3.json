{
    "patch": "  try {\n      for (int i = 0; i < count; i++) {\n          SavedField save = savedFields[i];\n          try {\n              long next = save.set(millis, resetFields);\n              if (next != millis) {\n                  // if (resetFields) {\n                  //   // reset, so the fields are internally consistent\n                  //   for (int j = 0; j <= i; j++) {\n                  //       savedFields[j].save();\n                  //   }\n                  // }\n                  if (i < count - 1) {\n                      DurationField nextFieldDuration = savedFields[i + 1].iField.getDurationField();\n                      if (i == 0 && nextFieldDuration != null && savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {\n                          int offset = savedFields[0].getField().getDurationField().getType().getField(chrono).set(savedFields[0].getValue(), iDefaultYear) - iDefaultYear;\n                          millis = next - offset;\n                      } else {\n                          millis = next;\n                      }\n                      for (int j = i + 1; j < count; j++) {\n                          savedFields[j].save();\n                      }\n                      i = -1; // restart loop\n                  } else {\n                      millis = next;\n                  }\n              }\n          } catch (IllegalFieldValueException e) {\n              if (text != null) {\n                  e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n              }\n              throw e;\n          }\n      }\n  } catch (RuntimeException e) {\n      if (text != null) {\n          throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n      } else {\n          throw e;\n      }\n  }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4b2cc2d2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+  try {\n+      for (int i = 0; i < count; i++) {\n+          SavedField save = savedFields[i];\n+          try {\n+              long next = save.set(millis, resetFields);\n+              if (next != millis) {\n+                  // if (resetFields) {\n+                  //   // reset, so the fields are internally consistent\n+                  //   for (int j = 0; j <= i; j++) {\n+                  //       savedFields[j].save();\n+                  //   }\n+                  // }\n+                  if (i < count - 1) {\n+                      DurationField nextFieldDuration = savedFields[i + 1].iField.getDurationField();\n+                      if (i == 0 && nextFieldDuration != null && savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {\n+                          int offset = savedFields[0].getField().getDurationField().getType().getField(chrono).set(savedFields[0].getValue(), iDefaultYear) - iDefaultYear;\n+                          millis = next - offset;\n+                      } else {\n+                          millis = next;\n+                      }\n+                      for (int j = i + 1; j < count; j++) {\n+                          savedFields[j].save();\n+                      }\n+                      i = -1; // restart loop\n+                  } else {\n+                      millis = next;\n+                  }\n+              }\n+          } catch (IllegalFieldValueException e) {\n+              if (text != null) {\n+                  e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+              }\n+              throw e;\n+          }\n+      }\n+  } catch (RuntimeException e) {\n+      if (text != null) {\n+          throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n+      } else {\n+          throw e;\n+      }\n+  }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}