{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedViaProps = false;\n    boolean cycleDetected = detectImplicitPrototypeCycle();\n    if (cycleDetected) {\n      handleTypeCycle(t);\n    }\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    if (resolvedViaRegistry) {\n      cycleDetected = false; // don't report cycle warning again\n      resolvedViaProps = true;\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n    } else {\n      resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        if (cycleDetected) {\n          // If the cycle was already detected and reported by registry resolution,\n          // don't report the same cycle again during property resolution.\n          // However, we still need to call super.resolveInternal to collect\n          // property-style warnings.\n          super.resolveInternal(t, enclosing);\n        } else {\n          handleTypeCycle(t);\n        }\n      } else {\n        resolvedViaProps = true;\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n      }\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : resolvedViaProps ? this : getUnknownType();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..2f050498 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,38 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolvedViaProps = false;\n+    boolean cycleDetected = detectImplicitPrototypeCycle();\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    if (resolvedViaRegistry) {\n+      cycleDetected = false; // don't report cycle warning again\n+      resolvedViaProps = true;\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    } else {\n+      resolveViaProperties(t, enclosing);\n+      if (detectImplicitPrototypeCycle()) {\n+        if (cycleDetected) {\n+          // If the cycle was already detected and reported by registry resolution,\n+          // don't report the same cycle again during property resolution.\n+          // However, we still need to call super.resolveInternal to collect\n+          // property-style warnings.\n+          super.resolveInternal(t, enclosing);\n+        } else {\n+          handleTypeCycle(t);\n+        }\n+      } else {\n+        resolvedViaProps = true;\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+      }\n     }\n     return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+        getReferencedType() : resolvedViaProps ? this : getUnknownType();\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}