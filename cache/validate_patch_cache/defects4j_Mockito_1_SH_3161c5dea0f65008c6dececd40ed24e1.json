{
    "patch": "            Object vararg = Array.newInstance(invocation.getMethod().getParameterTypes()[indexOfVararg].getComponentType(), 0);\n            ((CapturesArguments) matchers.get(indexOfVararg)).captureFrom(vararg);\n            for (int i = indexOfVararg; i < invocation.getRawArguments().length; i++) {\n                ((CapturesArguments) matchers.get(indexOfVararg)).captureFrom(invocation.getRawArguments()[i]);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..8b92e06a1 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,11 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object vararg = Array.newInstance(invocation.getMethod().getParameterTypes()[indexOfVararg].getComponentType(), 0);\n+            ((CapturesArguments) matchers.get(indexOfVararg)).captureFrom(vararg);\n+            for (int i = indexOfVararg; i < invocation.getRawArguments().length; i++) {\n+                ((CapturesArguments) matchers.get(indexOfVararg)).captureFrom(invocation.getRawArguments()[i]);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ClassCastException: org.mockito.internal.matchers.Equals cannot be cast to org.mockito.internal.matchers.CapturesArguments",
    "test_result": "FAIL"
}