{
    "patch": "private void readTypeVariables() {\n    Type type = typeVariable;\n    if (type == null) {\n        return;\n    }\n    // If the type variable has no bounds, register Object class\n    if (typeVariable.getBounds().length == 0) {\n        registerTypeVariablesOn(Object.class);\n    } else {\n        // Register the type variables of all bounds of the type variable\n        for (Type bound : typeVariable.getBounds()) {\n            registerTypeVariablesOn(bound);\n        }\n        // If the type variable has actual type arguments, register their type variables\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            if (actualTypeArgument instanceof ParameterizedType) {\n                type = ((ParameterizedType) actualTypeArgument).getRawType();\n            } else {\n                type = actualTypeArgument;\n            }\n            if (type instanceof TypeVariable) {\n                readTypeVariables((TypeVariable<?>) type);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..93e51aa05 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type type = typeVariable;\n+    if (type == null) {\n+        return;\n+    }\n+    // If the type variable has no bounds, register Object class\n+    if (typeVariable.getBounds().length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+    } else {\n+        // Register the type variables of all bounds of the type variable\n+        for (Type bound : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(bound);\n+        }\n+        // If the type variable has actual type arguments, register their type variables\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            if (actualTypeArgument instanceof ParameterizedType) {\n+                type = ((ParameterizedType) actualTypeArgument).getRawType();\n+            } else {\n+                type = actualTypeArgument;\n+            }\n+            if (type instanceof TypeVariable) {\n+                readTypeVariables((TypeVariable<?>) type);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}