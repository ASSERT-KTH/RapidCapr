{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final int n = m.getRowDimension();\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    RealMatrix eigenvectors = dec.getV();\n\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] < 0.0) { // If the matrix contains negative eigenvalues, the square root does not exist\n            throw new RuntimeException(\"Matrix does not have a square root.\");\n        }\n        eigenvalues[i] = Math.sqrt(eigenvalues[i]);\n    }\n\n    RealMatrix sqrtMat = eigenvectors.scalarMultiply(eigenvalues[0]).transpose();\n    for (int i = 1; i < n; i++) {\n        sqrtMat = sqrtMat.add(eigenvectors.getColumnMatrix(i).multiply(eigenvalues[i]).transpose());\n    }\n    return sqrtMat.multiply(eigenvectors);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4c1f06c8a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final int n = m.getRowDimension();\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    RealMatrix eigenvectors = dec.getV();\n+\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] < 0.0) { // If the matrix contains negative eigenvalues, the square root does not exist\n+            throw new RuntimeException(\"Matrix does not have a square root.\");\n+        }\n+        eigenvalues[i] = Math.sqrt(eigenvalues[i]);\n+    }\n+\n+    RealMatrix sqrtMat = eigenvectors.scalarMultiply(eigenvalues[0]).transpose();\n+    for (int i = 1; i < n; i++) {\n+        sqrtMat = sqrtMat.add(eigenvectors.getColumnMatrix(i).multiply(eigenvalues[i]).transpose());\n     }\n+    return sqrtMat.multiply(eigenvectors);\n+}\n }",
    "result_reason": "error: method multiply in interface RealMatrix cannot be applied to given types;",
    "test_result": "ERROR"
}