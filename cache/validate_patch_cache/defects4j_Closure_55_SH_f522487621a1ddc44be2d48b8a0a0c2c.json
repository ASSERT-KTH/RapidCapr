{
    "patch": "if (NodeUtil.isFunctionExpression(n)) {\n  String functionName = NodeUtil.getFunctionName(n);\n  Node functionBody = NodeUtil.getFunctionBody(n);\n  boolean hasParameters = !NodeUtil.isEmpty(NodeUtil.getFunctionParameters(n));\n  return functionName != null && functionBody != null && !hasParameters;\n} else {\n  return n.isCall() && !NodeUtil.hasArguments(n) ? false : true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..73873d86 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,14 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (NodeUtil.isFunctionExpression(n)) {\n+  String functionName = NodeUtil.getFunctionName(n);\n+  Node functionBody = NodeUtil.getFunctionBody(n);\n+  boolean hasParameters = !NodeUtil.isEmpty(NodeUtil.getFunctionParameters(n));\n+  return functionName != null && functionBody != null && !hasParameters;\n+} else {\n+  return n.isCall() && !NodeUtil.hasArguments(n) ? false : true;\n+}\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}