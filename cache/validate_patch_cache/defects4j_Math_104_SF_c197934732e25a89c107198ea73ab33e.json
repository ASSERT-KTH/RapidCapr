{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double epsilon = 10e-15;\n    double incompleteGammaP = incompleteGammaP(a, x);\n    double gammaValue = gamma(a);\n    double regularizedGammaP = incompleteGammaP / gammaValue;\n    double previousTerm = regularizedGammaP;\n    double currentTerm = 0;\n    double k = 1;\n    double factorial = 1;\n\n    while (true) {\n        factorial *= k;\n        currentTerm = Math.pow(x, k) / factorial;\n        regularizedGammaP += currentTerm;\n        k++;\n\n        if (Math.abs(currentTerm - previousTerm) <= epsilon * Math.abs(previousTerm)) {\n            break;\n        }\n\n        previousTerm = currentTerm;\n    }\n\n    return regularizedGammaP;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..70a2098ab 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,31 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 10e-15;\n+    double incompleteGammaP = incompleteGammaP(a, x);\n+    double gammaValue = gamma(a);\n+    double regularizedGammaP = incompleteGammaP / gammaValue;\n+    double previousTerm = regularizedGammaP;\n+    double currentTerm = 0;\n+    double k = 1;\n+    double factorial = 1;\n+\n+    while (true) {\n+        factorial *= k;\n+        currentTerm = Math.pow(x, k) / factorial;\n+        regularizedGammaP += currentTerm;\n+        k++;\n+\n+        if (Math.abs(currentTerm - previousTerm) <= epsilon * Math.abs(previousTerm)) {\n+            break;\n+        }\n+\n+        previousTerm = currentTerm;\n+    }\n+\n+    return regularizedGammaP;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}