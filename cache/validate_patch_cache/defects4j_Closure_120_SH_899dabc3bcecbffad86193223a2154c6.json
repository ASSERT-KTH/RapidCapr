{
    "patch": "        Reference ref = getOneAndOnlyAssignment();\n        if (ref == null) {\n            return false;\n        }\n\n        // Make sure this assignment is not in a loop.\n        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n            if (block.isFunction) {\n                break;\n            } else if (block.isLoop) {\n                Set<BasicBlock> seen = Sets.newHashSet();\n                seen.add(block);\n                int refs = 0;\n                for (BasicBlock succ : block.getSuccessors()) {\n                    refs += succ.getVarReads().indexOf(ref);\n                }\n\n                while (refs == 1 && block.isBackEdgeTaken()) {\n                    block = block.getBackEdgeTarget(seen);\n                    seen.add(block);\n                    refs = 0;\n                    for (BasicBlock succ : block.getSuccessors()) {\n                        refs += succ.getVarReads().indexOf(ref);\n                    }\n                }\n\n                return refs == 1;\n            }\n        }\n\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..134847d4 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,38 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        Reference ref = getOneAndOnlyAssignment();\n+        if (ref == null) {\n+            return false;\n+        }\n+\n+        // Make sure this assignment is not in a loop.\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+                break;\n+            } else if (block.isLoop) {\n+                Set<BasicBlock> seen = Sets.newHashSet();\n+                seen.add(block);\n+                int refs = 0;\n+                for (BasicBlock succ : block.getSuccessors()) {\n+                    refs += succ.getVarReads().indexOf(ref);\n+                }\n+\n+                while (refs == 1 && block.isBackEdgeTaken()) {\n+                    block = block.getBackEdgeTarget(seen);\n+                    seen.add(block);\n+                    refs = 0;\n+                    for (BasicBlock succ : block.getSuccessors()) {\n+                        refs += succ.getVarReads().indexOf(ref);\n+                    }\n+                }\n+\n+                return refs == 1;\n+            }\n+        }\n+\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}