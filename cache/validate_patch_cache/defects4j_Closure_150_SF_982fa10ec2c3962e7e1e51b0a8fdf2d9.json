{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Ignore root node.\n  if (n == t.getScopeRoot()) {\n    return;\n  }\n\n  // Define declared functions (except for function expressions assigned to a name).\n  if (n.getType() == Token.FUNCTION && parent != null && parent.getType() != Token.ASSIGN) {\n    defineDeclaredFunction(n, parent);\n  } else if (n.getType() == Token.VAR) {\n    // Define variables.\n    defineVar(n, parent);\n  } else if (n.getType() == Token.CATCH) {\n    // Define catch variables.\n    defineCatch(n, parent);\n  } else if (n.getType() == Token.LP && parent != null && NodeUtil.isFunctionExpression(parent)) {\n    // Handle function inputs.\n    handleFunctionInputs(n);\n  }\n\n  // Attach literal types.\n  attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..59f5c8ff 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,30 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // Ignore root node.\n+  if (n == t.getScopeRoot()) {\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  // Define declared functions (except for function expressions assigned to a name).\n+  if (n.getType() == Token.FUNCTION && parent != null && parent.getType() != Token.ASSIGN) {\n+    defineDeclaredFunction(n, parent);\n+  } else if (n.getType() == Token.VAR) {\n+    // Define variables.\n+    defineVar(n, parent);\n+  } else if (n.getType() == Token.CATCH) {\n+    // Define catch variables.\n+    defineCatch(n, parent);\n+  } else if (n.getType() == Token.LP && parent != null && NodeUtil.isFunctionExpression(parent)) {\n+    // Handle function inputs.\n+    handleFunctionInputs(n);\n+  }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+  // Attach literal types.\n+  attachLiteralTypes(n);\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}