{
    "patch": "            Object[] arguments = invocation.getRawArguments();\n            int varargsIndex = arguments.length - 1;\n            Object varargsArray = arguments[varargsIndex];\n            int varargsLength = Array.getLength(varargsArray);\n            for (int i = 0; i < varargsLength; i++) {\n                Object arg = Array.get(varargsArray, i);\n                for (int j = 0; j < varargsIndex; j++) {\n                    Matcher m = matchers.get(j);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(arguments[j]);\n                    }\n                }\n                Matcher m = matchers.get(varargsIndex);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..b85d91a6d 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,23 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] arguments = invocation.getRawArguments();\n+            int varargsIndex = arguments.length - 1;\n+            Object varargsArray = arguments[varargsIndex];\n+            int varargsLength = Array.getLength(varargsArray);\n+            for (int i = 0; i < varargsLength; i++) {\n+                Object arg = Array.get(varargsArray, i);\n+                for (int j = 0; j < varargsIndex; j++) {\n+                    Matcher m = matchers.get(j);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(arguments[j]);\n+                    }\n+                }\n+                Matcher m = matchers.get(varargsIndex);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}