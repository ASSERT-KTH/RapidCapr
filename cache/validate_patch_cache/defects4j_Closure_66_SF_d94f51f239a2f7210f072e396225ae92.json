{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double count = 0;\n    double total = 0;\n\n    try {\n        JSONObject jsonObj = new JSONObject(jsonStr);\n        JSONArray arr = jsonObj.getJSONArray(\"data\");\n        \n        for (int i = 0; i < arr.length(); i++) {\n            JSONObject obj = arr.getJSONObject(i);\n\n            if (obj.getString(\"type\").equals(\"typed\")) {\n                count++;\n            }\n\n            total++;\n        }\n\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n\n    return (count / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b8cd66dc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double count = 0;\n+    double total = 0;\n+\n+    try {\n+        JSONObject jsonObj = new JSONObject(jsonStr);\n+        JSONArray arr = jsonObj.getJSONArray(\"data\");\n+        \n+        for (int i = 0; i < arr.length(); i++) {\n+            JSONObject obj = arr.getJSONObject(i);\n+\n+            if (obj.getString(\"type\").equals(\"typed\")) {\n+                count++;\n+            }\n+\n+            total++;\n+        }\n+\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+\n+    return (count / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}