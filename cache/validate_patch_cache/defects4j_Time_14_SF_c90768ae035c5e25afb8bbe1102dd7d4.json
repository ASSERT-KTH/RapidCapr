{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // determine if the current month and day are valid\n        boolean isValidMonthDay = iChronology.monthOfYear().isValidValue(values[0]) &&\n                iChronology.dayOfMonth().isValidValue(instant);\n\n        int[] newValues;\n\n        // add months to the current instant and determine the resulting month and year\n        long newInstant = add(instant, valueToAdd);\n        int newMonthOfYear = iChronology.monthOfYear().get(newInstant);\n        int newYear = iChronology.year().get(newInstant);\n\n        // if the resulting month and year is invalid, adjust the year and month to get a valid date\n        if (!iChronology.monthOfYear().isValidValue(newMonthOfYear)) {\n            int maxMonthOfYear = iChronology.monthOfYear().getMaximumValue(newInstant);\n            newMonthOfYear = maxMonthOfYear;\n            newYear = iChronology.year().add(newYear, valueToAdd > 0 ? 1 : -1);\n        }\n\n        // if the resulting year is invalid and the current month and day are valid, use the current year\n        if (!iChronology.year().isValidValue(newYear) && isValidMonthDay) {\n            newYear = values[1] >= 3 ? values[0] : values[0] - 1;\n        }\n\n        // get the maximum valid day of month for the resulting year and month\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(iChronology.monthOfYear().set(newInstant, newMonthOfYear), newYear));\n\n        // if the day is out of range, adjust it to the maximum valid day of month\n        if (newValues[2] > maxDayOfMonth) {\n            newValues[2] = maxDayOfMonth;\n        }\n\n        // return the resulting values\n        newValues = new int[] {newYear, newMonthOfYear, newValues[2]};\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..0a33ae9b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,56 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        // determine if the current month and day are valid\n+        boolean isValidMonthDay = iChronology.monthOfYear().isValidValue(values[0]) &&\n+                iChronology.dayOfMonth().isValidValue(instant);\n+\n+        int[] newValues;\n+\n+        // add months to the current instant and determine the resulting month and year\n+        long newInstant = add(instant, valueToAdd);\n+        int newMonthOfYear = iChronology.monthOfYear().get(newInstant);\n+        int newYear = iChronology.year().get(newInstant);\n+\n+        // if the resulting month and year is invalid, adjust the year and month to get a valid date\n+        if (!iChronology.monthOfYear().isValidValue(newMonthOfYear)) {\n+            int maxMonthOfYear = iChronology.monthOfYear().getMaximumValue(newInstant);\n+            newMonthOfYear = maxMonthOfYear;\n+            newYear = iChronology.year().add(newYear, valueToAdd > 0 ? 1 : -1);\n+        }\n+\n+        // if the resulting year is invalid and the current month and day are valid, use the current year\n+        if (!iChronology.year().isValidValue(newYear) && isValidMonthDay) {\n+            newYear = values[1] >= 3 ? values[0] : values[0] - 1;\n         }\n+\n+        // get the maximum valid day of month for the resulting year and month\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(iChronology.monthOfYear().set(newInstant, newMonthOfYear), newYear));\n+\n+        // if the day is out of range, adjust it to the maximum valid day of month\n+        if (newValues[2] > maxDayOfMonth) {\n+            newValues[2] = maxDayOfMonth;\n+        }\n+\n+        // return the resulting values\n+        newValues = new int[] {newYear, newMonthOfYear, newValues[2]};\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}