{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      Var[] vars = scope.getVarArray();\n      for (Var var : vars) {\n        Node n = var.getNode();\n        if (n == null) {\n          continue;\n        }\n        Node parent = n.getParent();\n        if (!n.isName() || parent == null || !parent.isVar()) {\n          continue;\n        }\n        String name = n.getString();\n        if (!n.hasChildren() || !n.getFirstChild().isQualifiedName()) {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          continue;\n        }\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          aliases.put(name, aliasVar);\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..1524026c 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -271,27 +271,28 @@ class ScopedAliases implements HotSwapCompilerPass {\n \n     private void findAliases(NodeTraversal t) {\n       Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n+      Var[] vars = scope.getVarArray();\n+      for (Var var : vars) {\n+        Node n = var.getNode();\n+        if (n == null) {\n+          continue;\n+        }\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+        if (!n.isName() || parent == null || !parent.isVar()) {\n+          continue;\n+        }\n+        String name = n.getString();\n+        if (!n.hasChildren() || !n.getFirstChild().isQualifiedName()) {\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          continue;\n+        }\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}