{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    List<Object[]> composites = new ArrayList<Object[]>();\n\n    for (int i = 0, size = elementPairs.size(); i < size; i++) {\n        Object pair1 = elementPairs.get(i++);\n        Object pair2 = (i < size) ? elementPairs.get(i) : null;\n\n        if (pair2 == null || pair1 instanceof Separator) {\n            Object composite = createComposite(pair1, pair2);\n            composites.add((Object[]) composite);\n        } else {\n            throw new IllegalStateException(\"Bad pair combination: \" + pair1.getClass() + \", \" + pair2.getClass());\n        }\n    }\n\n    Object finalComposite = composites.size() == 1 ? composites.get(0) : createComposite(composites);\n    return createFormatter(finalComposite, notPrinter, notParser);\n}\n\nprivate static Object createComposite(Object first, Object second) {\n    if (first instanceof PeriodPrinter && second instanceof PeriodParser) {\n        return new Object[] {first, second};\n    } else if (first instanceof PeriodParser && second instanceof PeriodPrinter) {\n        return new Object[] {second, first};\n    } else {\n        throw new IllegalStateException(\"Invalid pair combination: \" + first.getClass() + \", \" + second.getClass());\n    }\n}\n\nprivate static Object createComposite(List<Object[]> composites) {\n    int size = composites.size();\n    Object[] objects = new Object[size * 2];\n    for (int i = 0; i < size; i++) {\n        objects[i * 2] = composites.get(i)[0];\n        objects[i * 2 + 1] = composites.get(i)[1];\n    }\n    return objects;\n}\n\nprivate static PeriodFormatter createFormatter(Object obj, boolean notPrinter, boolean notParser) {\n    if (obj instanceof Object[] && !notPrinter && !notParser) {\n        Object[] comp = (Object[]) obj;\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    } else if (obj instanceof PeriodPrinter && !notPrinter) {\n        return new PeriodFormatter((PeriodPrinter) obj, null);\n    } else if (obj instanceof PeriodParser && !notParser) {\n        return new PeriodFormatter(null, (PeriodParser) obj);\n    } else if (obj instanceof PeriodFormatter) {\n        return (PeriodFormatter) obj;\n    } else {\n        throw new IllegalStateException(\"Invalid object: \" + obj);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..5c1bcb94 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,64 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    List<Object[]> composites = new ArrayList<Object[]>();\n+\n+    for (int i = 0, size = elementPairs.size(); i < size; i++) {\n+        Object pair1 = elementPairs.get(i++);\n+        Object pair2 = (i < size) ? elementPairs.get(i) : null;\n+\n+        if (pair2 == null || pair1 instanceof Separator) {\n+            Object composite = createComposite(pair1, pair2);\n+            composites.add((Object[]) composite);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalStateException(\"Bad pair combination: \" + pair1.getClass() + \", \" + pair2.getClass());\n         }\n     }\n \n+    Object finalComposite = composites.size() == 1 ? composites.get(0) : createComposite(composites);\n+    return createFormatter(finalComposite, notPrinter, notParser);\n+}\n+\n+private static Object createComposite(Object first, Object second) {\n+    if (first instanceof PeriodPrinter && second instanceof PeriodParser) {\n+        return new Object[] {first, second};\n+    } else if (first instanceof PeriodParser && second instanceof PeriodPrinter) {\n+        return new Object[] {second, first};\n+    } else {\n+        throw new IllegalStateException(\"Invalid pair combination: \" + first.getClass() + \", \" + second.getClass());\n+    }\n+}\n+\n+private static Object createComposite(List<Object[]> composites) {\n+    int size = composites.size();\n+    Object[] objects = new Object[size * 2];\n+    for (int i = 0; i < size; i++) {\n+        objects[i * 2] = composites.get(i)[0];\n+        objects[i * 2 + 1] = composites.get(i)[1];\n+    }\n+    return objects;\n+}\n+\n+private static PeriodFormatter createFormatter(Object obj, boolean notPrinter, boolean notParser) {\n+    if (obj instanceof Object[] && !notPrinter && !notParser) {\n+        Object[] comp = (Object[]) obj;\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    } else if (obj instanceof PeriodPrinter && !notPrinter) {\n+        return new PeriodFormatter((PeriodPrinter) obj, null);\n+    } else if (obj instanceof PeriodParser && !notParser) {\n+        return new PeriodFormatter(null, (PeriodParser) obj);\n+    } else if (obj instanceof PeriodFormatter) {\n+        return (PeriodFormatter) obj;\n+    } else {\n+        throw new IllegalStateException(\"Invalid object: \" + obj);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: name clash: createComposite(List<Object>) and createComposite(List<Object[]>) have the same erasure",
    "test_result": "ERROR"
}