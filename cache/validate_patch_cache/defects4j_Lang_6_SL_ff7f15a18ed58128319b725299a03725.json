{
    "patch": "I apologize for the error. Here's the replacement line for the insert location that should correctly handle the test case that is failing:\n```\npos += consumed > 0 ? consumed : Character.charCount(Character.codePointAt(input, pos));\nif (pos < len && Character.isHighSurrogate(input.charAt(pos - 1)) && pos < len && Character.isLowSurrogate(input.charAt(pos))) {\n        pos += Character.charCount(Character.codePointAt(input, pos));\n}\n``` \nThis line checks whether the current character is a high surrogate and the next character is a low surrogate. If so, it skips over the low surrogate by incrementing `pos` by the number of code units in the surrogate pair. This should handle input strings that contain surrogate pairs and fix the `java.lang.StringIndexOutOfBoundsException` error.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ee5dfda0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,14 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+I apologize for the error. Here's the replacement line for the insert location that should correctly handle the test case that is failing:\n+```\n+pos += consumed > 0 ? consumed : Character.charCount(Character.codePointAt(input, pos));\n+if (pos < len && Character.isHighSurrogate(input.charAt(pos - 1)) && pos < len && Character.isLowSurrogate(input.charAt(pos))) {\n+        pos += Character.charCount(Character.codePointAt(input, pos));\n+}\n+``` \n+This line checks whether the current character is a high surrogate and the next character is a low surrogate. If so, it skips over the low surrogate by incrementing `pos` by the number of code units in the surrogate pair. This should handle input strings that contain surrogate pairs and fix the `java.lang.StringIndexOutOfBoundsException` error.\n             }\n         }\n     }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}