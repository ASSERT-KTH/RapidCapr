{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock instanceof MockitoSpy) {\n        MockitoMockHandler oldHandler = (MockitoMockHandler) ((MockitoSpy) mock).getSpiedInstance().getMockHandler();\n        MockitoMockHandler newHandler = new MockitoMockHandler(oldHandler.getMockSettings());\n        ((MockitoSpy) mock).setMockitoMockHandler(newHandler);\n    } else if (mock instanceof MockAccess) {\n        MockHandler oldHandler = ((MockAccess) mock).getMockHandler();\n        MockHandler newHandler = new MockHandler(oldHandler.getMockSettings());\n        ((MockAccess) mock).setMockHandler(newHandler);\n    } else {\n        throw new IllegalArgumentException(\"Mock object is not a valid Mockito mock or spy.\");\n    }\n }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b41b8e1d1 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock instanceof MockitoSpy) {\n+        MockitoMockHandler oldHandler = (MockitoMockHandler) ((MockitoSpy) mock).getSpiedInstance().getMockHandler();\n+        MockitoMockHandler newHandler = new MockitoMockHandler(oldHandler.getMockSettings());\n+        ((MockitoSpy) mock).setMockitoMockHandler(newHandler);\n+    } else if (mock instanceof MockAccess) {\n+        MockHandler oldHandler = ((MockAccess) mock).getMockHandler();\n+        MockHandler newHandler = new MockHandler(oldHandler.getMockSettings());\n+        ((MockAccess) mock).setMockHandler(newHandler);\n+    } else {\n+        throw new IllegalArgumentException(\"Mock object is not a valid Mockito mock or spy.\");\n+    }\n+ }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}