{
    "patch": "int remainingIndex = index;\nint dimIndex = 0;\nwhile (dimIndex < last && uniCounterOffset[dimIndex] <= remainingIndex) {\n    remainingIndex -= uniCounterOffset[dimIndex];\n    dimIndex++;\n}\nfor (int i = dimIndex; i < last; i++) {\n    final int offset = uniCounterOffset[i];\n    int idx = 0;\n    while ((idx + 1) * offset <= remainingIndex) {\n        idx++;\n    }\n    remainingIndex -= idx * offset;\n    indices[i] = idx;\n}\nindices[dimIndex] = remainingIndex;\nfor (int i = 0; i < dimIndex; i++) {\n    indices[i] = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..b2a8b30a1 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,25 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int remainingIndex = index;\n+int dimIndex = 0;\n+while (dimIndex < last && uniCounterOffset[dimIndex] <= remainingIndex) {\n+    remainingIndex -= uniCounterOffset[dimIndex];\n+    dimIndex++;\n+}\n+for (int i = dimIndex; i < last; i++) {\n+    final int offset = uniCounterOffset[i];\n+    int idx = 0;\n+    while ((idx + 1) * offset <= remainingIndex) {\n+        idx++;\n+    }\n+    remainingIndex -= idx * offset;\n+    indices[i] = idx;\n+}\n+indices[dimIndex] = remainingIndex;\n+for (int i = 0; i < dimIndex; i++) {\n+    indices[i] = 0;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][0] expected:<0> but was:<1>",
    "test_result": "FAIL"
}