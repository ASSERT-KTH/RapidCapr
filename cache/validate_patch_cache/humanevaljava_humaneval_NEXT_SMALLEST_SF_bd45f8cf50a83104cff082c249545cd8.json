{
    "patch": "    public static Integer next_smallest(int[] lst) {\n        Set<Integer> numbers = new HashSet<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n\n        List<Integer> no_duplicate = new ArrayList<Integer>(numbers);\n        Collections.sort(no_duplicate);\n\n        if (no_duplicate.size() < 2)\n            return null;\n\n        return no_duplicate.get(1);\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\nindex 7791efd..99ac29d 100644\n--- a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n+++ b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n@@ -13,14 +13,16 @@ next_smallest([1, 1]) == None */\n \n public class NEXT_SMALLEST {\n     public static Integer next_smallest(int[] lst) {\n-        List<Integer> numbers = new ArrayList<Integer>();\n+        Set<Integer> numbers = new HashSet<Integer>();\n         for (Integer n : lst)\n             numbers.add(n);\n-        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n-        Arrays.sort(no_duplicate);\n \n-        if (no_duplicate.length < 2)\n+        List<Integer> no_duplicate = new ArrayList<Integer>(numbers);\n+        Collections.sort(no_duplicate);\n+\n+        if (no_duplicate.size() < 2)\n             return null;\n-        return no_duplicate[1];\n+\n+        return no_duplicate.get(1);\n     }\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}