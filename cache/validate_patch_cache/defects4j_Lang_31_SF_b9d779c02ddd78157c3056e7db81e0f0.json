{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchChars.length;\n    final int strLast = strLen - 1;\n    final int searchLast = searchLen - 1;\n    outer:\n    for (int i = 0; i < strLen; i++) {\n        final char ch = sequence.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            final int codePoint = Character.codePointAt(sequence, i);\n            i++;\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch && j == searchLast) {\n                    // Found complete surrogate pair, so return true\n                    return true;\n                }\n                if (searchChars[j] == (char) codePoint) {\n                    if (Character.isLowSurrogate(searchChars[j]) && i < strLen) {\n                        // Check for valid low surrogate\n                        final char low = sequence.charAt(i);\n                        if (Character.isLowSurrogate(low)) {\n                            i++;\n                            if (j == searchLast) {\n                                // Found complete surrogate pair, so return true\n                                return true;\n                            } else if (i == strLen) {\n                                // String ends with an unmatched high surrogate\n                                return false;\n                            }\n                            // Matched low surrogate, continue search\n                            continue;\n                        }\n                    } else {\n                        // Found matching supplementary character, so return true\n                        return true;\n                    }\n                }\n            }\n        } else {\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    // Found character match, so return true\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..526960c5 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,58 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int strLast = strLen - 1;\n+    final int searchLast = searchLen - 1;\n+    outer:\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            final int codePoint = Character.codePointAt(sequence, i);\n+            i++;\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch && j == searchLast) {\n+                    // Found complete surrogate pair, so return true\n+                    return true;\n+                }\n+                if (searchChars[j] == (char) codePoint) {\n+                    if (Character.isLowSurrogate(searchChars[j]) && i < strLen) {\n+                        // Check for valid low surrogate\n+                        final char low = sequence.charAt(i);\n+                        if (Character.isLowSurrogate(low)) {\n+                            i++;\n+                            if (j == searchLast) {\n+                                // Found complete surrogate pair, so return true\n+                                return true;\n+                            } else if (i == strLen) {\n+                                // String ends with an unmatched high surrogate\n+                                return false;\n+                            }\n+                            // Matched low surrogate, continue search\n+                            continue;\n+                        }\n+                    } else {\n+                        // Found matching supplementary character, so return true\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    // Found character match, so return true\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}