{
    "patch": "// Check if the node itself may be a string\nif (MAY_BE_STRING_PREDICATE.apply(n)) {\n  return true;\n}\n\n// If not recurring, we're done\nif (!recurse) {\n  return false;\n}\n\n// Otherwise, check if any child node may be a string\nfor (Node child : n.children()) {\n  if (mayBeString(child, true)) {\n    return true;\n  }\n  if (child instanceof DefaultLiteral && ((DefaultLiteral) child).getValue() instanceof RegExpLiteral) {\n    if (RegExpParser.mayContainString(((RegExpLiteral) ((DefaultLiteral) child).getValue()))) {\n       return true;\n    }\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..d225f7d3 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,28 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+// Check if the node itself may be a string\n+if (MAY_BE_STRING_PREDICATE.apply(n)) {\n+  return true;\n+}\n+\n+// If not recurring, we're done\n+if (!recurse) {\n+  return false;\n+}\n+\n+// Otherwise, check if any child node may be a string\n+for (Node child : n.children()) {\n+  if (mayBeString(child, true)) {\n+    return true;\n+  }\n+  if (child instanceof DefaultLiteral && ((DefaultLiteral) child).getValue() instanceof RegExpLiteral) {\n+    if (RegExpParser.mayContainString(((RegExpLiteral) ((DefaultLiteral) child).getValue()))) {\n+       return true;\n+    }\n+  }\n+}\n+return false;\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}