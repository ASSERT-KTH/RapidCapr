{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = Character.codePointCount(input, 0, input.length());\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int cp = Character.codePointAt(input, pos);\n            char[] arr = Character.toChars(cp);\n            if (arr.length > 1) {\n                int remaining = arr.length - 1;\n                out.write(arr, 0, 1);\n                while (remaining-- > 0) {\n                    out.write(arr, arr.length - remaining - 1, 1);\n                }\n            } else {\n                out.write(arr);\n            }\n            pos += Character.charCount(cp);\n        } else {\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n                if (pos > len) {\n                    break;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..516fc9f8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,40 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = Character.codePointCount(input, 0, input.length());\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            int cp = Character.codePointAt(input, pos);\n+            char[] arr = Character.toChars(cp);\n+            if (arr.length > 1) {\n+                int remaining = arr.length - 1;\n+                out.write(arr, 0, 1);\n+                while (remaining-- > 0) {\n+                    out.write(arr, arr.length - remaining - 1, 1);\n+                }\n+            } else {\n+                out.write(arr);\n             }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n+            pos += Character.charCount(cp);\n+        } else {\n             for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n+                if (pos > len) {\n+                    break;\n                 }\n-                pos--;\n             }\n-            pos++;\n         }\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<\ud842\udfb7[A]> but was:<\ud842\udfb7[]>",
    "test_result": "FAIL"
}