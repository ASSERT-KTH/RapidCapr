{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    boolean rightIsImmutable = right != null && NodeUtil.isImmutableValue(right);\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    String joinString = \",\";\n    if (rightIsImmutable) {\n        joinString = NodeUtil.getStringValue(right);\n    }\n\n    StringBuilder sb = null;\n    boolean merged = false;\n    int foldedSize = 0;\n    int count = 0;\n    for (Node child = arrayNode.getFirstChild(), next; child != null; child = next) {\n        next = child.getNext();\n        if (!merged && NodeUtil.isImmutableValue(child)) {\n            // Initialize the merged StringBuilder.\n            sb = new StringBuilder(InlineCostEstimator.getCost(child));\n            sb.append(NodeUtil.getArrayElementStringValue(child));\n            merged = true;\n            count++;\n        } else if (merged && NodeUtil.isImmutableValue(child)) {\n            // Merge subsequent immutable nodes.\n            sb.append(joinString).append(NodeUtil.getArrayElementStringValue(child));\n            count++;\n        } else {\n            if (count > 0) {\n                // Subsequent immutable nodes were merged -- add the merged node to the array.\n                Node strLiteral = Node.newString(sb.toString()).copyInformationFrom(arrayNode);\n                arrayNode.addChildBefore(strLiteral, child);\n                foldedSize += InlineCostEstimator.getCost(strLiteral) - InlineCostEstimator.getCost(child) + 1;\n                ++foldedSize;\n                ++count;\n            } else if (right == null && NodeUtil.getStringValue(child).isEmpty()) {\n                // Node with an empty string can be safely removed.\n                arrayNode.removeChild(child);\n            } else {\n                ++count;\n            }\n            sb = null;\n            merged = false;\n            foldedSize += InlineCostEstimator.getCost(child) + 1;\n        }\n    }\n    // If the last node was merged, add it to the array.\n    if (sb != null) {\n        Node strLiteral = Node.newString(sb.toString()).copyInformationFrom(arrayNode.getLastChild());\n        arrayNode.addChildToBack(strLiteral);\n        foldedSize += InlineCostEstimator.getCost(strLiteral) - InlineCostEstimator.getCost(arrayNode.getLastChild());\n    } else if (right == null && nodeIsASCIIWhitespace(arrayNode.getLastChild())) {\n        // The last child is a whitespace node -- it can be safely removed.\n        arrayNode.removeChild(arrayNode.getLastChild());\n    }\n\n    if (arrayNode.getChildCount() == 0) {\n        // Replace empty array with an empty string.\n        Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n    }\n\n    if (arrayNode.getChildCount() == 1 && NodeUtil.isImmutableValue(arrayNode.getFirstChild())) {\n        Node child = arrayNode.getFirstChild();\n        Node strLiteral;\n        if (rightIsImmutable) {\n            // Concatenate joinString with the single immutable node.\n            strLiteral = Node.newString(NodeUtil.getArrayElementStringValue(child)).copyInformationFrom(arrayNode);\n            strLiteral.setString(linkStrings(joinString, strLiteral.getString()));\n            foldedSize += InlineCostEstimator.getCost(strLiteral) - InlineCostEstimator.getCost(child);\n        } else {\n            // Let the \"join\" operation be carried out by the runtime.\n            strLiteral = child;\n        }\n        n.getParent().replaceChild(n, strLiteral);\n        reportCodeChange();\n        return strLiteral;\n    }\n\n    if (rightIsImmutable) {\n        // Add one byte to account for the comma separator between all but the last element.\n        foldedSize += (arrayNode.getChildCount() - 1) * (joinString.length() + 1);\n    }\n\n    if (InlineCostEstimator.getCost(n) < foldedSize) {\n        return n;\n    }\n\n    Node joinCall = NodeUtil.newCallNode(\n            IR.getprop(\n                    IR.getelem(\n                            IR.arraylit(),\n                            IR.number(0)\n                    ),\n                    IR.string(\"join\")\n            ),\n            arrayNode\n    );\n    if (rightIsImmutable) {\n        joinString = NodeUtil.getStringValue(right);\n        Node joinStringLiteral = Node.newString(joinString).copyInformationFrom(right);\n        joinCall.addChildToBack(joinStringLiteral);\n    }\n    n.getParent().replaceChild(n, joinCall);\n    reportCodeChange();\n    return joinCall;\n}\n\nprivate static boolean nodeIsASCIIWhitespace(Node node) {\n    int type = node.getType();\n    return type == Token.EMPTY || type == Token.STRING && NodeUtil.isWhitespaceString(node) ||\n            type == Token.TEMPLATELIT_MID || type == Token.TEMPLATELIT_END;\n}\n\nprivate static String linkStrings(String str1, String str2) {\n    int str1len = str1.length();\n    if (str1len == 0) {\n        return str2;\n    }\n\n    char[] chars = new char[str1.length() + str2.length()];\n    str1.getChars(0, str1.length(), chars, 0);\n    str2.getChars(0, str2.length(), chars, str1.length());\n\n    return new String(chars);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..5f4be806 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,145 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n+        return n;\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+    boolean rightIsImmutable = right != null && NodeUtil.isImmutableValue(right);\n \n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+        return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (rightIsImmutable) {\n+        joinString = NodeUtil.getStringValue(right);\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = null;\n+    boolean merged = false;\n     int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+    int count = 0;\n+    for (Node child = arrayNode.getFirstChild(), next; child != null; child = next) {\n+        next = child.getNext();\n+        if (!merged && NodeUtil.isImmutableValue(child)) {\n+            // Initialize the merged StringBuilder.\n+            sb = new StringBuilder(InlineCostEstimator.getCost(child));\n+            sb.append(NodeUtil.getArrayElementStringValue(child));\n+            merged = true;\n+            count++;\n+        } else if (merged && NodeUtil.isImmutableValue(child)) {\n+            // Merge subsequent immutable nodes.\n+            sb.append(joinString).append(NodeUtil.getArrayElementStringValue(child));\n+            count++;\n         } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+            if (count > 0) {\n+                // Subsequent immutable nodes were merged -- add the merged node to the array.\n+                Node strLiteral = Node.newString(sb.toString()).copyInformationFrom(arrayNode);\n+                arrayNode.addChildBefore(strLiteral, child);\n+                foldedSize += InlineCostEstimator.getCost(strLiteral) - InlineCostEstimator.getCost(child) + 1;\n+                ++foldedSize;\n+                ++count;\n+            } else if (right == null && NodeUtil.getStringValue(child).isEmpty()) {\n+                // Node with an empty string can be safely removed.\n+                arrayNode.removeChild(child);\n+            } else {\n+                ++count;\n+            }\n+            sb = null;\n+            merged = false;\n+            foldedSize += InlineCostEstimator.getCost(child) + 1;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n     }\n-\n+    // If the last node was merged, add it to the array.\n     if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+        Node strLiteral = Node.newString(sb.toString()).copyInformationFrom(arrayNode.getLastChild());\n+        arrayNode.addChildToBack(strLiteral);\n+        foldedSize += InlineCostEstimator.getCost(strLiteral) - InlineCostEstimator.getCost(arrayNode.getLastChild());\n+    } else if (right == null && nodeIsASCIIWhitespace(arrayNode.getLastChild())) {\n+        // The last child is a whitespace node -- it can be safely removed.\n+        arrayNode.removeChild(arrayNode.getLastChild());\n+    }\n+\n+    if (arrayNode.getChildCount() == 0) {\n+        // Replace empty array with an empty string.\n+        Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n         n.getParent().replaceChild(n, emptyStringNode);\n         reportCodeChange();\n         return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+    }\n+\n+    if (arrayNode.getChildCount() == 1 && NodeUtil.isImmutableValue(arrayNode.getFirstChild())) {\n+        Node child = arrayNode.getFirstChild();\n+        Node strLiteral;\n+        if (rightIsImmutable) {\n+            // Concatenate joinString with the single immutable node.\n+            strLiteral = Node.newString(NodeUtil.getArrayElementStringValue(child)).copyInformationFrom(arrayNode);\n+            strLiteral.setString(linkStrings(joinString, strLiteral.getString()));\n+            foldedSize += InlineCostEstimator.getCost(strLiteral) - InlineCostEstimator.getCost(child);\n+        } else {\n+            // Let the \"join\" operation be carried out by the runtime.\n+            strLiteral = child;\n         }\n+        n.getParent().replaceChild(n, strLiteral);\n         reportCodeChange();\n-        break;\n+        return strLiteral;\n     }\n \n-    return n;\n-  }\n+    if (rightIsImmutable) {\n+        // Add one byte to account for the comma separator between all but the last element.\n+        foldedSize += (arrayNode.getChildCount() - 1) * (joinString.length() + 1);\n+    }\n+\n+    if (InlineCostEstimator.getCost(n) < foldedSize) {\n+        return n;\n+    }\n+\n+    Node joinCall = NodeUtil.newCallNode(\n+            IR.getprop(\n+                    IR.getelem(\n+                            IR.arraylit(),\n+                            IR.number(0)\n+                    ),\n+                    IR.string(\"join\")\n+            ),\n+            arrayNode\n+    );\n+    if (rightIsImmutable) {\n+        joinString = NodeUtil.getStringValue(right);\n+        Node joinStringLiteral = Node.newString(joinString).copyInformationFrom(right);\n+        joinCall.addChildToBack(joinStringLiteral);\n+    }\n+    n.getParent().replaceChild(n, joinCall);\n+    reportCodeChange();\n+    return joinCall;\n+}\n+\n+private static boolean nodeIsASCIIWhitespace(Node node) {\n+    int type = node.getType();\n+    return type == Token.EMPTY || type == Token.STRING && NodeUtil.isWhitespaceString(node) ||\n+            type == Token.TEMPLATELIT_MID || type == Token.TEMPLATELIT_END;\n+}\n+\n+private static String linkStrings(String str1, String str2) {\n+    int str1len = str1.length();\n+    if (str1len == 0) {\n+        return str2;\n+    }\n+\n+    char[] chars = new char[str1.length() + str2.length()];\n+    str1.getChars(0, str1.length(), chars, 0);\n+    str2.getChars(0, str2.length(), chars, str1.length());\n+\n+    return new String(chars);\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +671,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}