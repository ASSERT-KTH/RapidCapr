{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    \n    // Determine the length of the function before removing any args\n    int originalLength = NodeUtil.getFunctionParameters(function).getChildCount();\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node currArg = argList.getFirstChild();\n      Node lastArg = null;\n      while (currArg != null) {\n          boolean argsReferenced = false;\n          Var var = fnScope.getVar(currArg.getString());\n          if (var == null || !referenced.contains(var)) {\n              argList.removeChild(currArg);\n              lastArg = currArg;\n          } else {\n              argsReferenced = true;\n              // Since all unused parameters are at the end of the list, once we find a used\n              // parameter we can stop checking the rest.\n              break;\n          }\n          currArg = currArg.getNext();\n          if (!argsReferenced) {\n            compiler.reportCodeChange();\n          }\n      }\n      \n      // To avoid breaking the 'length' property of the function we have to take into account\n      // that the length of the parameter list has changed.\n      if (lastArg != null) {\n          int newLength = originalLength - NodeUtil.getFunctionParameters(function).getChildCount();\n          for (int i = 0; i < newLength; ++i) {\n              function.removeChild(function.getLastChild());\n          }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e2eb3241 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,54 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    \n+    // Determine the length of the function before removing any args\n+    int originalLength = NodeUtil.getFunctionParameters(function).getChildCount();\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node currArg = argList.getFirstChild();\n+      Node lastArg = null;\n+      while (currArg != null) {\n+          boolean argsReferenced = false;\n+          Var var = fnScope.getVar(currArg.getString());\n+          if (var == null || !referenced.contains(var)) {\n+              argList.removeChild(currArg);\n+              lastArg = currArg;\n+          } else {\n+              argsReferenced = true;\n+              // Since all unused parameters are at the end of the list, once we find a used\n+              // parameter we can stop checking the rest.\n+              break;\n+          }\n+          currArg = currArg.getNext();\n+          if (!argsReferenced) {\n+            compiler.reportCodeChange();\n+          }\n+      }\n+      \n+      // To avoid breaking the 'length' property of the function we have to take into account\n+      // that the length of the parameter list has changed.\n+      if (lastArg != null) {\n+          int newLength = originalLength - NodeUtil.getFunctionParameters(function).getChildCount();\n+          for (int i = 0; i < newLength; ++i) {\n+              function.removeChild(function.getLastChild());\n+          }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}