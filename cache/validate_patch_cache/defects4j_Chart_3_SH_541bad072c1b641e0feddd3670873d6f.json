{
    "patch": "        if (start < 0 || start >= this.data.size() || end < start) {\n            throw new IllegalArgumentException();\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        \n        double minY = Double.POSITIVE_INFINITY;\n        double maxY = Double.NEGATIVE_INFINITY;\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n                if (!Double.isNaN(clone.getValue().doubleValue())) {\n                    minY = Math.min(minY, clone.getValue().doubleValue());\n                    maxY = Math.max(maxY, clone.getValue().doubleValue());\n                }\n            } catch (SeriesException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        copy.minY = (minY == Double.POSITIVE_INFINITY) ? Double.NaN : minY;\n        copy.maxY = (maxY == Double.NEGATIVE_INFINITY) ? Double.NaN : maxY;\n        return copy;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..e04a768 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,30 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        if (start < 0 || start >= this.data.size() || end < start) {\n+            throw new IllegalArgumentException();\n+        }\n+        TimeSeries copy = (TimeSeries) super.clone();\n+        copy.data = new java.util.ArrayList();\n+        \n+        double minY = Double.POSITIVE_INFINITY;\n+        double maxY = Double.NEGATIVE_INFINITY;\n+        for (int index = start; index <= end; index++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+                if (!Double.isNaN(clone.getValue().doubleValue())) {\n+                    minY = Math.min(minY, clone.getValue().doubleValue());\n+                    maxY = Math.max(maxY, clone.getValue().doubleValue());\n+                }\n+            } catch (SeriesException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        copy.minY = (minY == Double.POSITIVE_INFINITY) ? Double.NaN : minY;\n+        copy.maxY = (maxY == Double.NEGATIVE_INFINITY) ? Double.NaN : maxY;\n+        return copy;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: variable copy is already defined in method createCopy(int,int)",
    "test_result": "ERROR"
}