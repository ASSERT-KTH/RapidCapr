{
    "patch": "public int getOffsetFromLocal(long inputMillis) {\n    int initialOffset = getOffset(inputMillis);\n    long localMillis = inputMillis + initialOffset;\n    int localOffset = getOffset(localMillis);\n    if (initialOffset == localOffset) {\n        return initialOffset;\n    }\n    long nextLocalTransition = nextTransition(localMillis);\n    long nextAdjustedTransition = nextTransition(inputMillis + initialOffset);\n    if (nextLocalTransition == nextAdjustedTransition) {\n        return initialOffset;\n    }\n    int futureOffset = getOffset(nextLocalTransition);\n    int pastOffset = getOffset(nextLocalTransition - 1);\n    if (futureOffset == pastOffset) {\n        return futureOffset;\n    }\n    long instantBefore = nextAdjustedTransition - initialOffset - 1;\n    long instantAfter = nextAdjustedTransition - adjustedOffset(instantBefore);\n    while (true) {\n        if (instantBefore < localMillis && localMillis < instantAfter) {\n            return initialOffset;\n        }\n        if (instantBefore > localMillis) {\n            futureOffset = adjustedOffset(instantBefore);\n            return (futureOffset == pastOffset ? futureOffset : initialOffset);\n        }\n        instantBefore = instantAfter;\n        instantAfter = nextAdjustedTransition - adjustedOffset(instantBefore);\n    }\n}\n\nprivate int adjustedOffset(long instantMillis) {\n    int rawBefore = getOffset(instantMillis - 1);\n    int rawAfter = getOffset(instantMillis);\n    if (rawBefore > rawAfter) {\n        long transition = nextTransition(instantMillis - rawBefore);\n        if (transition == (instantMillis - rawBefore)) {\n            return rawBefore;\n        }\n        transition = nextTransition(instantMillis - rawAfter);\n        if (transition == (instantMillis - rawAfter)) {\n            return rawAfter;\n        }\n    } else if (rawBefore < rawAfter) {\n        long transition = previousTransition(instantMillis - rawBefore);\n        if (transition == (instantMillis - rawBefore)) {\n            return rawBefore;\n        }\n        transition = previousTransition(instantMillis - rawAfter);\n        if (transition == (instantMillis - rawAfter)) {\n            return rawAfter;\n        }\n    }\n    return rawBefore;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2bddbae1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,62 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long inputMillis) {\n+    int initialOffset = getOffset(inputMillis);\n+    long localMillis = inputMillis + initialOffset;\n+    int localOffset = getOffset(localMillis);\n+    if (initialOffset == localOffset) {\n+        return initialOffset;\n+    }\n+    long nextLocalTransition = nextTransition(localMillis);\n+    long nextAdjustedTransition = nextTransition(inputMillis + initialOffset);\n+    if (nextLocalTransition == nextAdjustedTransition) {\n+        return initialOffset;\n+    }\n+    int futureOffset = getOffset(nextLocalTransition);\n+    int pastOffset = getOffset(nextLocalTransition - 1);\n+    if (futureOffset == pastOffset) {\n+        return futureOffset;\n+    }\n+    long instantBefore = nextAdjustedTransition - initialOffset - 1;\n+    long instantAfter = nextAdjustedTransition - adjustedOffset(instantBefore);\n+    while (true) {\n+        if (instantBefore < localMillis && localMillis < instantAfter) {\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n+        if (instantBefore > localMillis) {\n+            futureOffset = adjustedOffset(instantBefore);\n+            return (futureOffset == pastOffset ? futureOffset : initialOffset);\n+        }\n+        instantBefore = instantAfter;\n+        instantAfter = nextAdjustedTransition - adjustedOffset(instantBefore);\n     }\n+}\n+\n+private int adjustedOffset(long instantMillis) {\n+    int rawBefore = getOffset(instantMillis - 1);\n+    int rawAfter = getOffset(instantMillis);\n+    if (rawBefore > rawAfter) {\n+        long transition = nextTransition(instantMillis - rawBefore);\n+        if (transition == (instantMillis - rawBefore)) {\n+            return rawBefore;\n+        }\n+        transition = nextTransition(instantMillis - rawAfter);\n+        if (transition == (instantMillis - rawAfter)) {\n+            return rawAfter;\n+        }\n+    } else if (rawBefore < rawAfter) {\n+        long transition = previousTransition(instantMillis - rawBefore);\n+        if (transition == (instantMillis - rawBefore)) {\n+            return rawBefore;\n+        }\n+        transition = previousTransition(instantMillis - rawAfter);\n+        if (transition == (instantMillis - rawAfter)) {\n+            return rawAfter;\n+        }\n+    }\n+    return rawBefore;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}