{
    "patch": " JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaProperties(t, enclosing);\n    if (!resolved) {\n      resolved = resolveViaRegistry(t, enclosing);\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    if (resolved) {\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  boolean resolveViaProperties(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n    if (!resolved && !resolving && prototypeSlot != null && getPropHolder().mayHaveProp(\n        property)) {\n      String beforeResolution = getTypeDisplayName();\n      resolving = true; // avoid infinite recursion if property resolves back to myself\n      JSType resolvedType = null;\n      JSTypeRegistry registry = getRegistry();\n      try {\n        resolvedType = getProp(new QualifiedName(property), false).getType();\n        TypeValidator validator = getTypeValidator();\n        if (!validator.isEquivalentTo(resolvedType, UNKNOWN_TYPE)) {\n          // type the RHS with the type from the declared interface\n          // if it's a class but not an inner class or a namespace\n          if (resolvedType.isInterface() &&\n              !resolvedType.isAnonymousNamespace() &&\n              !resolvedType.isConstructor() &&\n              this.hasInstanceType()) {\n            ObjectType implicitInterfaceInstance = this.getInstanceType();\n            ObjectType interfaceType = resolvedType.toObjectType();\n            if (!implicitInterfaceInstance.isSubtype(interfaceType)) {\n              errorReporter.warning(JSError.make(this.getSourceName(), this.getLineno(),\n                  this.getCharno(), JSC_IMPLEMENTS_NON_INTERFACE,\n                  \"can only implement interfaces\"));\n            } else {\n              implicitInterfaceInstance.updateWithMixinProperties(\n                  interfaceType, this.getSourceName(), this.getLineno());\n            }\n          }\n          setType(resolvedType);\n          resolved = true;\n        }\n      } catch (Exception ex) {\n        resolvedType = registry.getNativeType(UNKNOWN_TYPE);\n      } finally {\n        resolving = false;\n        if (resolvedType != null) {\n          QualifiedName defsite = new QualifiedName(getName() + \".<resolver>\");\n          resolvedType = registry.createTemplatizedTypeWithOwner(resolvedType, enclosing, defsite);\n          setType(resolvedType);\n        }\n      }\n    }\n    return resolved;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..094d2a73 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,69 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolved = resolveViaProperties(t, enclosing);\n+    if (!resolved) {\n+      resolved = resolveViaRegistry(t, enclosing);\n+    }\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    super.resolveInternal(t, enclosing);\n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n+  boolean resolveViaProperties(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n+    if (!resolved && !resolving && prototypeSlot != null && getPropHolder().mayHaveProp(\n+        property)) {\n+      String beforeResolution = getTypeDisplayName();\n+      resolving = true; // avoid infinite recursion if property resolves back to myself\n+      JSType resolvedType = null;\n+      JSTypeRegistry registry = getRegistry();\n+      try {\n+        resolvedType = getProp(new QualifiedName(property), false).getType();\n+        TypeValidator validator = getTypeValidator();\n+        if (!validator.isEquivalentTo(resolvedType, UNKNOWN_TYPE)) {\n+          // type the RHS with the type from the declared interface\n+          // if it's a class but not an inner class or a namespace\n+          if (resolvedType.isInterface() &&\n+              !resolvedType.isAnonymousNamespace() &&\n+              !resolvedType.isConstructor() &&\n+              this.hasInstanceType()) {\n+            ObjectType implicitInterfaceInstance = this.getInstanceType();\n+            ObjectType interfaceType = resolvedType.toObjectType();\n+            if (!implicitInterfaceInstance.isSubtype(interfaceType)) {\n+              errorReporter.warning(JSError.make(this.getSourceName(), this.getLineno(),\n+                  this.getCharno(), JSC_IMPLEMENTS_NON_INTERFACE,\n+                  \"can only implement interfaces\"));\n+            } else {\n+              implicitInterfaceInstance.updateWithMixinProperties(\n+                  interfaceType, this.getSourceName(), this.getLineno());\n+            }\n+          }\n+          setType(resolvedType);\n+          resolved = true;\n+        }\n+      } catch (Exception ex) {\n+        resolvedType = registry.getNativeType(UNKNOWN_TYPE);\n+      } finally {\n+        resolving = false;\n+        if (resolvedType != null) {\n+          QualifiedName defsite = new QualifiedName(getName() + \".<resolver>\");\n+          resolvedType = registry.createTemplatizedTypeWithOwner(resolvedType, enclosing, defsite);\n+          setType(resolvedType);\n+        }\n+      }\n+    }\n+    return resolved;\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}