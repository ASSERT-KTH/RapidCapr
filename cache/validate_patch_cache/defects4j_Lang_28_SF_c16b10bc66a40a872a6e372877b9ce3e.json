{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (input.charAt(end) != ';') {\n            end++;\n        }\n\n        int entityValue;\n        try {\n            int radix = isHex ? 16 : 10;\n            String entity = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(entity, radix);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Detect and output the high surrogate of a surrogate pair if needed\n        if (entityValue >= 0xD800 && entityValue <= 0xDBFF) {\n            if (end + 2 >= input.length() || input.charAt(end + 1) != '&' || input.charAt(end + 2) != '#') {\n                return 0; // Not followed by another numeric entity, can't form a surrogate pair\n            }\n            int lowSurrogateStart = end + 3;\n            boolean lowSurrogateIsHex = false;\n            char lowSurrogateFirstChar = input.charAt(lowSurrogateStart);\n            if (lowSurrogateFirstChar == 'x' || lowSurrogateFirstChar == 'X') {\n                lowSurrogateStart++;\n                lowSurrogateIsHex = true;\n            }\n            int lowSurrogateEnd = lowSurrogateStart;\n            while (input.charAt(lowSurrogateEnd) != ';') {\n                lowSurrogateEnd++;\n            }\n            int lowSurrogateValue;\n            try {\n                int radix = lowSurrogateIsHex ? 16 : 10;\n                String entity = input.subSequence(lowSurrogateStart, lowSurrogateEnd).toString();\n                lowSurrogateValue = Integer.parseInt(entity, radix);\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n            if (lowSurrogateValue < 0xDC00 || lowSurrogateValue > 0xDFFF) {\n                return 0; // The second entity doesn't specify a valid surrogate pair, ignore it\n            }\n            char highSurrogate = (char) entityValue;\n            char lowSurrogate = (char) lowSurrogateValue;\n            out.write(highSurrogate);\n            out.write(lowSurrogate);\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1 + 2 + (lowSurrogateEnd - lowSurrogateStart) + (lowSurrogateIsHex ? 1 : 0) + 1;\n        }\n\n        // Output the character value directly\n        out.write(entityValue);\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..e1410b0e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,69 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+        char firstChar = input.charAt(start);\n+        if (firstChar == 'x' || firstChar == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+        int end = start;\n+        while (input.charAt(end) != ';') {\n+            end++;\n+        }\n \n-            int entityValue;\n+        int entityValue;\n+        try {\n+            int radix = isHex ? 16 : 10;\n+            String entity = input.subSequence(start, end).toString();\n+            entityValue = Integer.parseInt(entity, radix);\n+        } catch (NumberFormatException nfe) {\n+            return 0;\n+        }\n+\n+        // Detect and output the high surrogate of a surrogate pair if needed\n+        if (entityValue >= 0xD800 && entityValue <= 0xDBFF) {\n+            if (end + 2 >= input.length() || input.charAt(end + 1) != '&' || input.charAt(end + 2) != '#') {\n+                return 0; // Not followed by another numeric entity, can't form a surrogate pair\n+            }\n+            int lowSurrogateStart = end + 3;\n+            boolean lowSurrogateIsHex = false;\n+            char lowSurrogateFirstChar = input.charAt(lowSurrogateStart);\n+            if (lowSurrogateFirstChar == 'x' || lowSurrogateFirstChar == 'X') {\n+                lowSurrogateStart++;\n+                lowSurrogateIsHex = true;\n+            }\n+            int lowSurrogateEnd = lowSurrogateStart;\n+            while (input.charAt(lowSurrogateEnd) != ';') {\n+                lowSurrogateEnd++;\n+            }\n+            int lowSurrogateValue;\n             try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n+                int radix = lowSurrogateIsHex ? 16 : 10;\n+                String entity = input.subSequence(lowSurrogateStart, lowSurrogateEnd).toString();\n+                lowSurrogateValue = Integer.parseInt(entity, radix);\n+            } catch (NumberFormatException nfe) {\n                 return 0;\n             }\n-\n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            if (lowSurrogateValue < 0xDC00 || lowSurrogateValue > 0xDFFF) {\n+                return 0; // The second entity doesn't specify a valid surrogate pair, ignore it\n+            }\n+            char highSurrogate = (char) entityValue;\n+            char lowSurrogate = (char) lowSurrogateValue;\n+            out.write(highSurrogate);\n+            out.write(lowSurrogate);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1 + 2 + (lowSurrogateEnd - lowSurrogateStart) + (lowSurrogateIsHex ? 1 : 0) + 1;\n         }\n-        return 0;\n+\n+        // Output the character value directly\n+        out.write(entityValue);\n+        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n     }\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 55295 expected:<\ud7ff[?]> but was:<\ud7ff[&#xd800;]>",
    "test_result": "FAIL"
}