{
    "patch": "                final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[original.length];\n                reflectedSimplex[0] = reflected;\n                for (int i = 1; i < original.length; i++) {\n                    final RealPointValuePair old = original[i];\n                    final double[] newPos = new double[old.getPoint().length];\n                    for (int j = 0; j < newPos.length; j++) {\n                        newPos[j] = best.getPoint()[j] + gamma * (reflected.getPoint()[j] - best.getPoint()[j]);\n                    }\n                    reflectedSimplex[i] = new RealPointValuePair(newPos, Double.NaN, false);\n                }\n                final RealPointValuePair[] contractedSimplex = simplex;\n\n                // try a second, more aggressive reflection\n                final RealPointValuePair reflected2 = evaluateNewSimplex(reflectedSimplex, 1.0, comparator);\n                if (comparator.compare(reflected2, best) < 0) {\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = reflected;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : contracted.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], contracted} : new RealPointValuePair[] {best, contracted, original[1], original[0]};\n            } else {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b78a1fe33 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,27 +58,24 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+                final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[original.length];\n+                reflectedSimplex[0] = reflected;\n+                for (int i = 1; i < original.length; i++) {\n+                    final RealPointValuePair old = original[i];\n+                    final double[] newPos = new double[old.getPoint().length];\n+                    for (int j = 0; j < newPos.length; j++) {\n+                        newPos[j] = best.getPoint()[j] + gamma * (reflected.getPoint()[j] - best.getPoint()[j]);\n+                    }\n+                    reflectedSimplex[i] = new RealPointValuePair(newPos, Double.NaN, false);\n+                }\n+                final RealPointValuePair[] contractedSimplex = simplex;\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                // try a second, more aggressive reflection\n+                final RealPointValuePair reflected2 = evaluateNewSimplex(reflectedSimplex, 1.0, comparator);\n+                if (comparator.compare(reflected2, best) < 0) {\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = reflected;\n                 }\n \n                 return;\n@@ -88,15 +85,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+                simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : contracted.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], contracted} : new RealPointValuePair[] {best, contracted, original[1], original[0]};\n+            } else {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: ']' expected",
    "test_result": "ERROR"
}