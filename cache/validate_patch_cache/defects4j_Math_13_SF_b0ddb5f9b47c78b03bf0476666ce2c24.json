{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        EigenDecomposition dec = new EigenDecomposition(m);\n        if (dec.getEigenvector(0).isNaN()) {\n            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n        }\n        final double[] realEigenvalues = dec.getRealEigenvalues();\n        boolean isPositiveDefinite = true;\n        for (int i = 0; i < realEigenvalues.length; i++) {\n            if (realEigenvalues[i] < 0.0) {\n                realEigenvalues[i] = 0.0;\n            }\n            if (realEigenvalues[i] == 0.0) {\n                isPositiveDefinite = false;\n            }\n        }\n        if (!isPositiveDefinite) {\n            dec = new EigenDecomposition(MatrixUtils.createRealDiagonalMatrix(realEigenvalues));\n        }\n        final RealMatrix v = dec.getV();\n        final RealMatrix d = dec.getD();\n        final RealMatrix dRoot = MatrixUtils.createRealDiagonalMatrix(\n                Arrays.stream(d.getColumn(0)).map(Math::sqrt).toArray()\n        );\n        final RealMatrix vT = v.transpose();\n        return v.multiply(dRoot).multiply(vT);\n    } catch (OutOfMemoryError e) {\n        System.gc();\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..02e978d8b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        if (dec.getEigenvector(0).isNaN()) {\n+            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+        }\n+        final double[] realEigenvalues = dec.getRealEigenvalues();\n+        boolean isPositiveDefinite = true;\n+        for (int i = 0; i < realEigenvalues.length; i++) {\n+            if (realEigenvalues[i] < 0.0) {\n+                realEigenvalues[i] = 0.0;\n+            }\n+            if (realEigenvalues[i] == 0.0) {\n+                isPositiveDefinite = false;\n+            }\n+        }\n+        if (!isPositiveDefinite) {\n+            dec = new EigenDecomposition(MatrixUtils.createRealDiagonalMatrix(realEigenvalues));\n+        }\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix d = dec.getD();\n+        final RealMatrix dRoot = MatrixUtils.createRealDiagonalMatrix(\n+                Arrays.stream(d.getColumn(0)).map(Math::sqrt).toArray()\n+        );\n+        final RealMatrix vT = v.transpose();\n+        return v.multiply(dRoot).multiply(vT);\n+    } catch (OutOfMemoryError e) {\n+        System.gc();\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}