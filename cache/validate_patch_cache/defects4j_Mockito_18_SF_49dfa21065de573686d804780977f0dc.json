{
    "patch": "public boolean areAllCharactersUnique(String str) {\n    boolean[] charSet = new boolean[256];\n    \n    for(int i = 0; i < str.length(); i++) {\n        int val = str.charAt(i);\n        if(charSet[val]) {\n            return false;\n        }\n        charSet[val] = true;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..eb858b06c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public boolean areAllCharactersUnique(String str) {\n+    boolean[] charSet = new boolean[256];\n+    \n+    for(int i = 0; i < str.length(); i++) {\n+        int val = str.charAt(i);\n+        if(charSet[val]) {\n+            return false;\n+        }\n+        charSet[val] = true;\n+    }\n+    return true;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}