{
    "patch": "        } else if (maybeDecl.isCatch() && index == 1) {\n          // Catch clauses are like declarations with respect to their block-scoping.\n          Reference maybeInit = references.get(index);\n          if (maybeInit.isSimpleAssignmentToName()) {\n            return true;\n          }\n        }\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..46cd8d0e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (maybeDecl.isCatch() && index == 1) {\n+          // Catch clauses are like declarations with respect to their block-scoping.\n+          Reference maybeInit = references.get(index);\n+          if (maybeInit.isSimpleAssignmentToName()) {\n+            return true;\n+          }\n+        }\n+      }\n+      return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}