{
    "patch": "private void findAliases(NodeTraversal t) {\n  for (Var var : t.getScope().getVarIterable()) {\n    Node node = var.getNode();\n    if (isAliasableVar(node)) {\n      Node initializer = node.getFirstChild();\n      String varName = node.getString();\n      boolean isBleedingFunction = var.isBleedingFunction();\n      if (initializer == null || isBleedingFunction) {\n        // We don't deal with uninitialized vars or bleeding functions.\n        continue;\n      }\n      if (initializer.isQualifiedName()) {\n        String qualifiedName = checkQualifiedName(initializer);\n        if (qualifiedName == null) {\n          continue;\n        }\n        Var aliasVar = t.getScope().getVar(qualifiedName);\n        if (aliasVar == null) {\n          // This could happen if the qualified name is not declared in the\n          // current file/module.\n          continue;\n        }\n        addAlias(varName, aliasVar, qualifiedName);\n      } else {\n        // Non-qualified initializers are reported as errors.\n        reportAliasError(t, node, AliasErrorType.NON_QUALIFIED_ALIAS_LOCAL, varName);\n      }\n    }\n  }\n}\n\n/**\n* Determine if a given var node is an aliasable var declared within the\n* Body of a goog.scope\n*\n* @param node the var node\n* @return true iff the var is directly aliasable\n*/\nprivate boolean isAliasableVar(Node node) {\n  Node parent = node.getParent();\n  if (parent == null) {\n    return false;\n  }\n  Node grandparent = parent.getParent();\n  if (grandparent == null) {\n    return false;\n  }\n  return NodeUtil.isFunctionExpression(grandparent) && NodeUtil.isGoogScopeBlock(parent);\n}\n\n/**\n* Safely check the qualified name of a given node, returning null if it is\n* malformed.\n*\n* @param node the node\n* @return the qualified name or null, if the name is malformed\n*/\nprivate String checkQualifiedName(Node node) {\n  if (!node.isQualifiedName()) {\n    return null;\n  }\n  return node.getQualifiedName();\n}\n\n/**\n* Add alias information for a given node.\n*\n* @param name the name of the original variable\n* @param aliasVar the variable for the alias\n* @param qualifiedName the fully qualified name of the alias variable\n*/\nprivate void addAlias(String name, Var aliasVar, String qualifiedName) {\n  aliases.put(name, aliasVar);\n  transformation.addAlias(name, qualifiedName);\n}\n\n/**\n* Report an error when a given node is unable to be aliased.\n*\n* @param t the traversal\n* @param node the node\n* @param errorType the error type\n* @param name the name of the original variable\n*/\nprivate void reportAliasError(NodeTraversal t, Node node, AliasErrorType errorType, String name) {\n  t.report(node, errorType.error, name);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..105dd6d1 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,93 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+  for (Var var : t.getScope().getVarIterable()) {\n+    Node node = var.getNode();\n+    if (isAliasableVar(node)) {\n+      Node initializer = node.getFirstChild();\n+      String varName = node.getString();\n+      boolean isBleedingFunction = var.isBleedingFunction();\n+      if (initializer == null || isBleedingFunction) {\n+        // We don't deal with uninitialized vars or bleeding functions.\n+        continue;\n+      }\n+      if (initializer.isQualifiedName()) {\n+        String qualifiedName = checkQualifiedName(initializer);\n+        if (qualifiedName == null) {\n+          continue;\n         }\n+        Var aliasVar = t.getScope().getVar(qualifiedName);\n+        if (aliasVar == null) {\n+          // This could happen if the qualified name is not declared in the\n+          // current file/module.\n+          continue;\n         }\n+        addAlias(varName, aliasVar, qualifiedName);\n+      } else {\n+        // Non-qualified initializers are reported as errors.\n+        reportAliasError(t, node, AliasErrorType.NON_QUALIFIED_ALIAS_LOCAL, varName);\n       }\n     }\n+  }\n+}\n+\n+/**\n+* Determine if a given var node is an aliasable var declared within the\n+* Body of a goog.scope\n+*\n+* @param node the var node\n+* @return true iff the var is directly aliasable\n+*/\n+private boolean isAliasableVar(Node node) {\n+  Node parent = node.getParent();\n+  if (parent == null) {\n+    return false;\n+  }\n+  Node grandparent = parent.getParent();\n+  if (grandparent == null) {\n+    return false;\n+  }\n+  return NodeUtil.isFunctionExpression(grandparent) && NodeUtil.isGoogScopeBlock(parent);\n+}\n+\n+/**\n+* Safely check the qualified name of a given node, returning null if it is\n+* malformed.\n+*\n+* @param node the node\n+* @return the qualified name or null, if the name is malformed\n+*/\n+private String checkQualifiedName(Node node) {\n+  if (!node.isQualifiedName()) {\n+    return null;\n+  }\n+  return node.getQualifiedName();\n+}\n+\n+/**\n+* Add alias information for a given node.\n+*\n+* @param name the name of the original variable\n+* @param aliasVar the variable for the alias\n+* @param qualifiedName the fully qualified name of the alias variable\n+*/\n+private void addAlias(String name, Var aliasVar, String qualifiedName) {\n+  aliases.put(name, aliasVar);\n+  transformation.addAlias(name, qualifiedName);\n+}\n+\n+/**\n+* Report an error when a given node is unable to be aliased.\n+*\n+* @param t the traversal\n+* @param node the node\n+* @param errorType the error type\n+* @param name the name of the original variable\n+*/\n+private void reportAliasError(NodeTraversal t, Node node, AliasErrorType errorType, String name) {\n+  t.report(node, errorType.error, name);\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}