{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double x1 = v1.getX();\n    final double y1 = v1.getY();\n    final double z1 = v1.getZ();\n    final double x2 = v2.getX();\n    final double y2 = v2.getY();\n    final double z2 = v2.getZ();\n    final double crossX = y1 * z2 - y2 * z1;\n    final double crossY = z1 * x2 - z2 * x1;\n    final double crossZ = x1 * y2 - x2 * y1;\n    final double squaredNorm = crossX * crossX + crossY * crossY + crossZ * crossZ;\n    if (squaredNorm == 0) {\n        // The vectors are either parallel or one of them is a zero vector\n        if (Math.abs(x1 * x2 + y1 * y2 + z1 * z2) == norm(v1) * norm(v2)) {\n            // The vectors are parallel\n            return Vector3D.ZERO;\n        }\n        // One of the vectors is a zero vector, return the other vector\n        return norm(v1) == 0 ? v2.scalarMultiply(norm(v2) / 3) : v1.scalarMultiply(norm(v1) / 3);\n    }\n    final double invNorm = 1 / Math.sqrt(squaredNorm);\n    return new Vector3D(crossX * invNorm, crossY * invNorm, crossZ * invNorm);\n}\n\nprivate static double norm(Vector3D v) {\n    return Math.sqrt(v.getX() * v.getX() + v.getY() * v.getY() + v.getZ() * v.getZ());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..cc0ae4f4b 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,33 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double x1 = v1.getX();\n+    final double y1 = v1.getY();\n+    final double z1 = v1.getZ();\n+    final double x2 = v2.getX();\n+    final double y2 = v2.getY();\n+    final double z2 = v2.getZ();\n+    final double crossX = y1 * z2 - y2 * z1;\n+    final double crossY = z1 * x2 - z2 * x1;\n+    final double crossZ = x1 * y2 - x2 * y1;\n+    final double squaredNorm = crossX * crossX + crossY * crossY + crossZ * crossZ;\n+    if (squaredNorm == 0) {\n+        // The vectors are either parallel or one of them is a zero vector\n+        if (Math.abs(x1 * x2 + y1 * y2 + z1 * z2) == norm(v1) * norm(v2)) {\n+            // The vectors are parallel\n+            return Vector3D.ZERO;\n+        }\n+        // One of the vectors is a zero vector, return the other vector\n+        return norm(v1) == 0 ? v2.scalarMultiply(norm(v2) / 3) : v1.scalarMultiply(norm(v1) / 3);\n+    }\n+    final double invNorm = 1 / Math.sqrt(squaredNorm);\n+    return new Vector3D(crossX * invNorm, crossY * invNorm, crossZ * invNorm);\n+}\n \n-  }\n+private static double norm(Vector3D v) {\n+    return Math.sqrt(v.getX() * v.getX() + v.getY() * v.getY() + v.getZ() * v.getZ());\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.2860387767736777>",
    "test_result": "FAIL"
}