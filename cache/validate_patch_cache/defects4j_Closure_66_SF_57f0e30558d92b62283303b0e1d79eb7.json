{
    "patch": "public static double getTypedPercent(JSONArray js) {\n    int totalObjects = 0;\n    int typedObjects = 0;\n    for (int i = 0; i < js.length(); i++) {\n        Object object = js.get(i);\n        if (object instanceof JSONObject) {\n            totalObjects++;\n            JSONObject jsonObject = (JSONObject) object;\n            String type = jsonObject.optString(\"type\");\n            if (type != null && !type.isEmpty()) {\n                typedObjects++;\n            }\n        }\n    }\n    return totalObjects == 0 ? 0 : (double) typedObjects / totalObjects * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..aa55bbba 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONArray js) {\n+    int totalObjects = 0;\n+    int typedObjects = 0;\n+    for (int i = 0; i < js.length(); i++) {\n+        Object object = js.get(i);\n+        if (object instanceof JSONObject) {\n+            totalObjects++;\n+            JSONObject jsonObject = (JSONObject) object;\n+            String type = jsonObject.optString(\"type\");\n+            if (type != null && !type.isEmpty()) {\n+                typedObjects++;\n+            }\n+        }\n+    }\n+    return totalObjects == 0 ? 0 : (double) typedObjects / totalObjects * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}