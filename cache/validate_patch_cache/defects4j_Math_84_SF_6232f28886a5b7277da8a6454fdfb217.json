{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                final RealPointValuePair[] expandedSimplex = simplex;\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted;\n            final RealPointValuePair[] contractedSimplex;\n            if (comparator.compare(reflected, original[getWorst(original)]) > 0) {\n                // perform an inside contraction\n                contracted = evaluateNewSimplex(original, -gamma, comparator);\n                contractedSimplex = simplex;\n                if (comparator.compare(contracted, best) < 0) {\n                    // save the contracted simplex\n                    simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n                    return;\n                }\n            } else {\n                // perform an outside contraction\n                contracted = evaluateNewSimplex(original, sigma, comparator);\n                contractedSimplex = simplex;\n                if (comparator.compare(contracted, reflected) < 0) {\n                    // save the contracted simplex\n                    simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n                    return;\n                }\n            }\n\n            // shrink the simplex around the best vertex\n            final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n            shrinkedSimplex[0] = best;\n            for (int i = 1; i < shrinkedSimplex.length; ++i) {\n                shrinkedSimplex[i] = new RealPointValuePair(\n                        best.getPoint().add(original[i].getPoint().subtract(best.getPoint()).mapMultiply(sigma)),\n                        Double.NaN);\n            }\n            evaluateSimplex(shrinkedSimplex, comparator);\n            simplex = shrinkedSimplex;\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b8fa1b2df 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -75,24 +75,52 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                final RealPointValuePair[] expandedSimplex = simplex;\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n                 return;\n \n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            final RealPointValuePair contracted;\n+            final RealPointValuePair[] contractedSimplex;\n+            if (comparator.compare(reflected, original[getWorst(original)]) > 0) {\n+                // perform an inside contraction\n+                contracted = evaluateNewSimplex(original, -gamma, comparator);\n+                contractedSimplex = simplex;\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // save the contracted simplex\n+                    simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n+                    return;\n+                }\n+            } else {\n+                // perform an outside contraction\n+                contracted = evaluateNewSimplex(original, sigma, comparator);\n+                contractedSimplex = simplex;\n+                if (comparator.compare(contracted, reflected) < 0) {\n+                    // save the contracted simplex\n+                    simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n+                    return;\n+                }\n+            }\n \n-            // check convergence\n-                return;\n+            // shrink the simplex around the best vertex\n+            final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+            shrinkedSimplex[0] = best;\n+            for (int i = 1; i < shrinkedSimplex.length; ++i) {\n+                shrinkedSimplex[i] = new RealPointValuePair(\n+                        best.getPoint().add(original[i].getPoint().subtract(best.getPoint()).mapMultiply(sigma)),\n+                        Double.NaN);\n             }\n+            evaluateSimplex(shrinkedSimplex, comparator);\n+            simplex = shrinkedSimplex;\n \n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}