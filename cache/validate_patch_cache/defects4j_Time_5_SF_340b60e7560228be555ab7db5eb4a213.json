{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    ISOChronology chrono = ISOChronology.getInstanceUTC();\n    \n    // Calculate the total duration of the period in milliseconds\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Create a period from the total duration\n    Period result = new Period(millis, type, chrono);\n    \n    // Check if years and/or months are supported by the PeriodType\n    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n    \n    if (yearsSupported || monthsSupported) {\n        // Calculate total months in the period\n        int totalMonths = getYears() * 12 + getMonths();\n        totalMonths += (getWeeks() * 7 + getDays()) / 30;\n        int years = yearsSupported ? totalMonths / 12 : getYears();\n        int months = monthsSupported ? totalMonths % 12 : getMonths();\n        \n        // Add the total years and months to the period\n        if (years != getYears()) {\n            result = result.withYears(years);\n        }\n        if (months != getMonths()) {\n            result = result.withMonths(months);\n        }\n        \n        // Subtract the years and months from the total months\n        totalMonths -= (getYears() * 12);\n        totalMonths -= getMonths();\n        \n        // Calculate the remaining days, weeks, and months\n        int remainingDays = (getWeeks() * 7) + getDays();\n        int remainingWeeks = remainingDays / 7;\n        remainingDays %= 7;\n        remainingMonths = totalMonths % 12;\n        totalMonths -= remainingMonths;\n        remainingYears = totalMonths / 12;\n        \n        // Add or subtract the remaining years, months, weeks and daysto/from the period\n        if (remainingYears != 0) {\n            result = result.plusYears(remainingYears);\n        }\n        if (remainingMonths != 0) {\n            result = result.plusMonths(remainingMonths);\n        }\n        if (remainingWeeks != 0) {\n            result = result.plusWeeks(remainingWeeks);\n        }\n        if (remainingDays != 0) {\n            result = result.plusDays(remainingDays);\n        }\n    }\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..c0edda87 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,68 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    ISOChronology chrono = ISOChronology.getInstanceUTC();\n+    \n+    // Calculate the total duration of the period in milliseconds\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    \n+    // Create a period from the total duration\n+    Period result = new Period(millis, type, chrono);\n+    \n+    // Check if years and/or months are supported by the PeriodType\n+    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n+    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n+    \n+    if (yearsSupported || monthsSupported) {\n+        // Calculate total months in the period\n+        int totalMonths = getYears() * 12 + getMonths();\n+        totalMonths += (getWeeks() * 7 + getDays()) / 30;\n+        int years = yearsSupported ? totalMonths / 12 : getYears();\n+        int months = monthsSupported ? totalMonths % 12 : getMonths();\n+        \n+        // Add the total years and months to the period\n+        if (years != getYears()) {\n+            result = result.withYears(years);\n+        }\n+        if (months != getMonths()) {\n+            result = result.withMonths(months);\n+        }\n+        \n+        // Subtract the years and months from the total months\n+        totalMonths -= (getYears() * 12);\n+        totalMonths -= getMonths();\n+        \n+        // Calculate the remaining days, weeks, and months\n+        int remainingDays = (getWeeks() * 7) + getDays();\n+        int remainingWeeks = remainingDays / 7;\n+        remainingDays %= 7;\n+        remainingMonths = totalMonths % 12;\n+        totalMonths -= remainingMonths;\n+        remainingYears = totalMonths / 12;\n+        \n+        // Add or subtract the remaining years, months, weeks and daysto/from the period\n+        if (remainingYears != 0) {\n+            result = result.plusYears(remainingYears);\n+        }\n+        if (remainingMonths != 0) {\n+            result = result.plusMonths(remainingMonths);\n+        }\n+        if (remainingWeeks != 0) {\n+            result = result.plusWeeks(remainingWeeks);\n+        }\n+        if (remainingDays != 0) {\n+            result = result.plusDays(remainingDays);\n         }\n-        return result;\n     }\n+    \n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}