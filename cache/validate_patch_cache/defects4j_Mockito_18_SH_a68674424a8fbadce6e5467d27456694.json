{
    "patch": "public static <T> ReturnValues<T> of(final T value) {\n    //  returning new instance of ReturnValues with single value\n    return new ReturnValues<T>() {\n        @Override\n        public T returnValueFor(Class<T> returnType) {\n            //  checking if returnType is one of the supported types\n            if (returnType.equals(String.class)) {\n                return (T) value.toString();\n            } else if (returnType.equals(Integer.class) || returnType.equals(int.class)) {\n                return (T) Integer.valueOf(value.toString());\n            } else if (returnType.equals(Boolean.class) || returnType.equals(boolean.class)) {\n                return (T) Boolean.valueOf(value.toString());\n            } else if (Iterable.class.isAssignableFrom(returnType)) {\n                List<T> list = new ArrayList<>();\n                list.add(value);\n                // returning empty list if value is null\n                if (value == null) {\n                    return (T) Collections.emptyList();\n                } else {\n                    return (T) list;\n                }\n\n            } else {\n                return null;\n            }\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}