{
    "patch": "public void doEvents(StepInterpolator interpolator, Collection<EventState> eventsStates,\n                     List<StepHandler> stepHandlers, Collection<EventState> occuringEvents,\n                     final double previousT) throws MaxCountExceededException {\n    double tMin = Double.POSITIVE_INFINITY; // initialize tMin\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // the event occurs during the current step\n            occuringEvents.add(state);\n            tMin = Math.min(tMin, state.getEventTime()); // update tMin\n        }\n    }\n\n    while (!occuringEvents.isEmpty()) {\n        // handle the chronologically first event\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // skip current event if it occurs later than the end of the step\n        if (currentEvent.getEventTime() > interpolator.getMaxTime()) {\n            continue;\n        }\n\n        // restrict the interpolator to the first part of the step, up to the event\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(currentEvent.getEventTime());\n\n        // get state at event time\n        interpolator.setInterpolatedTime(currentEvent.getEventTime());\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to current time\n        boolean isLastStep = false;\n        currentEvent.stepAccepted(currentEvent.getEventTime(), eventY);\n        isLastStep = currentEvent.stop();\n\n        // handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        // handle events that occur during the step\n        tMin = Double.POSITIVE_INFINITY;\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                // the event occurs during the current step\n                occuringEvents.add(state);\n                tMin = Math.min(tMin, state.getEventTime()); // update tMin\n            }\n        }\n\n        // handle the second part of the step, after the event\n        if (currentEvent.actionOccurred(interpolator)) {\n            // the integration is not continued after event\n            for (final StepHandler handler : stepHandlers) {\n                handler.finish(interpolator, currentEvent.isForward(), isLastStep);\n            }\n            return;\n        } else {\n            // the integration is continued after event\n            interpolator.setSoftPreviousTime(currentEvent.getEventTime());\n            interpolator.setSoftCurrentTime(interpolator.getCurrentTime());\n            interpolator.setInterpolatedTime(interpolator.getCurrentTime());\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n        }\n\n        // restrict the interpolator for the next step, if necessary\n        if (tMin < interpolator.getMaxTime()) {\n            interpolator.setSoftNextTime(tMin);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..a4d6acc12 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,80 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public void doEvents(StepInterpolator interpolator, Collection<EventState> eventsStates,\n+                     List<StepHandler> stepHandlers, Collection<EventState> occuringEvents,\n+                     final double previousT) throws MaxCountExceededException {\n+    double tMin = Double.POSITIVE_INFINITY; // initialize tMin\n+    for (final EventState state : eventsStates) {\n+        if (state.evaluateStep(interpolator)) {\n+            // the event occurs during the current step\n+            occuringEvents.add(state);\n+            tMin = Math.min(tMin, state.getEventTime()); // update tMin\n+        }\n+    }\n \n-            });\n+    while (!occuringEvents.isEmpty()) {\n+        // handle the chronologically first event\n+        final Iterator<EventState> iterator = occuringEvents.iterator();\n+        final EventState currentEvent = iterator.next();\n+        iterator.remove();\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+        // skip current event if it occurs later than the end of the step\n+        if (currentEvent.getEventTime() > interpolator.getMaxTime()) {\n+            continue;\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n+        // restrict the interpolator to the first part of the step, up to the event\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(currentEvent.getEventTime());\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+        // get state at event time\n+        interpolator.setInterpolatedTime(currentEvent.getEventTime());\n+        final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+        // advance all event states to current time\n+        boolean isLastStep = false;\n+        currentEvent.stepAccepted(currentEvent.getEventTime(), eventY);\n+        isLastStep = currentEvent.stop();\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+        // handle the first part of the step, up to the event\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        // handle events that occur during the step\n+        tMin = Double.POSITIVE_INFINITY;\n+        for (final EventState state : eventsStates) {\n+            if (state.evaluateStep(interpolator)) {\n+                // the event occurs during the current step\n+                occuringEvents.add(state);\n+                tMin = Math.min(tMin, state.getEventTime()); // update tMin\n+            }\n+        }\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+        // handle the second part of the step, after the event\n+        if (currentEvent.actionOccurred(interpolator)) {\n+            // the integration is not continued after event\n+            for (final StepHandler handler : stepHandlers) {\n+                handler.finish(interpolator, currentEvent.isForward(), isLastStep);\n+            }\n+            return;\n+        } else {\n+            // the integration is continued after event\n+            interpolator.setSoftPreviousTime(currentEvent.getEventTime());\n+            interpolator.setSoftCurrentTime(interpolator.getCurrentTime());\n+            interpolator.setInterpolatedTime(interpolator.getCurrentTime());\n+            for (final StepHandler handler : stepHandlers) {\n+                handler.handleStep(interpolator, isLastStep);\n+            }\n+        }\n+\n+        // restrict the interpolator for the next step, if necessary\n+        if (tMin < interpolator.getMaxTime()) {\n+            interpolator.setSoftNextTime(tMin);\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}