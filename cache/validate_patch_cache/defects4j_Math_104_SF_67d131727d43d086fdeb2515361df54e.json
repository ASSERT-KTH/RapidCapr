{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    \n    if (x  == 0.0) {\n        return 0.0;\n    }\n    \n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n    \n    double sum = 1.0 / a;\n    double term = sum;\n    while (Math.abs(term/sum) > 1.5e-8) {\n        term *= x/(a + sum);\n        sum += term;\n    }\n    \n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2)\n            - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}\n\npublic static double regularizedGammaQ(final double a, final double x) {\n    if (a < 0.0 || x < 0.0)\n        throw new IllegalArgumentException(\"Arguments out of range.\");\n    if (x == 0.0)\n        return 1.0;\n    if (x < a + 1.0)\n        return  1.0 - regularizedGammaP(a,x);\n    final double NORMAL = 0.3989422804014327;\n    final double a1 = a - 1.0;\n    final double lna1 = Math.log(a1);\n    final double sqrta1 = Math.sqrt(a1);\n    final double gln = logGamma(a);\n    double G = sqrta1 * Math.exp(a1 * (Math.log(x) - lna1)) / NORMAL;\n    double sum = G / x;\n    double Gr = sum;\n    double Br = 0.0, Bt = 1.0, Bp = 0.0, a2 = 0.0;\n    int n;\n    for (n = 1; n <= 100; n++) {\n        a2 = n*(a-n);\n        Br = 1.0 + Br/a2;\n        Bp = 1.0 + Bp/a2;\n        double t = Br * Gr/Bp;\n        sum += t;\n        if (Math.abs(t/sum) < 1E-8) {\n            double result = 1.0 - (Math.exp(-x + a * Math.log(x) - gln) * sum);\n            return result;\n        }\n        Gr = sqrta1 * Math.exp(a1 * (Math.log(x) - lna1)) * Math.exp(-x) * Math.pow(x, n) / Gamma.gamma(n + 1);\n    }\n    throw new RuntimeException(\"Maximum number of iterations exceeded\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..068170a26 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,67 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    \n+    if (x  == 0.0) {\n+        return 0.0;\n+    }\n+    \n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+    \n+    double sum = 1.0 / a;\n+    double term = sum;\n+    while (Math.abs(term/sum) > 1.5e-8) {\n+        term *= x/(a + sum);\n+        sum += term;\n+    }\n+    \n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2)\n+            - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n+\n+public static double regularizedGammaQ(final double a, final double x) {\n+    if (a < 0.0 || x < 0.0)\n+        throw new IllegalArgumentException(\"Arguments out of range.\");\n+    if (x == 0.0)\n+        return 1.0;\n+    if (x < a + 1.0)\n+        return  1.0 - regularizedGammaP(a,x);\n+    final double NORMAL = 0.3989422804014327;\n+    final double a1 = a - 1.0;\n+    final double lna1 = Math.log(a1);\n+    final double sqrta1 = Math.sqrt(a1);\n+    final double gln = logGamma(a);\n+    double G = sqrta1 * Math.exp(a1 * (Math.log(x) - lna1)) / NORMAL;\n+    double sum = G / x;\n+    double Gr = sum;\n+    double Br = 0.0, Bt = 1.0, Bp = 0.0, a2 = 0.0;\n+    int n;\n+    for (n = 1; n <= 100; n++) {\n+        a2 = n*(a-n);\n+        Br = 1.0 + Br/a2;\n+        Bp = 1.0 + Bp/a2;\n+        double t = Br * Gr/Bp;\n+        sum += t;\n+        if (Math.abs(t/sum) < 1E-8) {\n+            double result = 1.0 - (Math.exp(-x + a * Math.log(x) - gln) * sum);\n+            return result;\n+        }\n+        Gr = sqrta1 * Math.exp(a1 * (Math.log(x) - lna1)) * Math.exp(-x) * Math.pow(x, n) / Gamma.gamma(n + 1);\n+    }\n+    throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}