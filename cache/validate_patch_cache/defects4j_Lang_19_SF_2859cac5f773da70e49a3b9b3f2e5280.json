{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int inputLength = input.length();\n\n    // if input does not contain '&' return 0\n    if(index >= inputLength - 1 || input.charAt(index) != '&') {\n        return 0;\n    }\n\n    int value = 0;\n    boolean isHex = false;\n    int nextIndex = index + 1;\n\n    // check hex value\n    if (nextIndex < inputLength && input.charAt(nextIndex) == '#' && nextIndex + 1 < inputLength) {\n        int radix = 10;\n        nextIndex++;\n        char ch = input.charAt(nextIndex);\n        if (ch == 'x' || ch == 'X') {\n            if (nextIndex + 1 == inputLength) {\n                return 0;\n            }\n            isHex = true;\n            radix = 16;\n            nextIndex++;\n        }\n        int endIndex = nextIndex;\n        while (endIndex < inputLength && input.charAt(endIndex) != ';') {\n            endIndex++;\n        }\n        if (endIndex == inputLength) {\n            return 0;\n        }\n        try {\n            String entity = input.subSequence(nextIndex, endIndex).toString();\n            value = Integer.parseInt(entity, radix);\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n    } else {\n        // named entity\n        int endIndex = nextIndex;\n        while (endIndex < inputLength && Character.isLetter(input.charAt(endIndex))) {\n            endIndex++;\n        }\n        if (endIndex - nextIndex == 0 || (endIndex < inputLength && input.charAt(endIndex) != ';')) {\n            return 0;\n        }\n        String entity = input.subSequence(nextIndex, endIndex).toString();\n        if (!entities.containsKey(entity)) {\n            return 0;\n        }\n        value = entities.get(entity).intValue();\n    }\n\n    // check for surrogate pairs\n    if (Character.isHighSurrogate((char)value) || Character.isLowSurrogate((char)value)) {\n        return 0;\n    }\n\n    // write the value to the writer\n    if (value > 0xFFFF) {\n        value -= 0x10000;\n        char[] surrogatePair = {(char)(0xD800 | (value >> 10)), (char)(0xDC00 | (value & 0x3FF))};\n        out.write(surrogatePair);\n    } else {\n        out.write((char)value);\n    }\n\n    // return the number of characters read\n    int entityLength = nextIndex - index;\n    if (isHex) {\n        entityLength += 2;\n    }\n    int length = inputLength - index;\n    if (length > entityLength && input.charAt(index + entityLength) == ';') {\n        entityLength++;\n    }\n    return entityLength;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..e747af45 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,83 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int inputLength = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n+    // if input does not contain '&' return 0\n+    if(index >= inputLength - 1 || input.charAt(index) != '&') {\n+        return 0;\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    int value = 0;\n+    boolean isHex = false;\n+    int nextIndex = index + 1;\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+    // check hex value\n+    if (nextIndex < inputLength && input.charAt(nextIndex) == '#' && nextIndex + 1 < inputLength) {\n+        int radix = 10;\n+        nextIndex++;\n+        char ch = input.charAt(nextIndex);\n+        if (ch == 'x' || ch == 'X') {\n+            if (nextIndex + 1 == inputLength) {\n                 return 0;\n             }\n+            isHex = true;\n+            radix = 16;\n+            nextIndex++;\n+        }\n+        int endIndex = nextIndex;\n+        while (endIndex < inputLength && input.charAt(endIndex) != ';') {\n+            endIndex++;\n+        }\n+        if (endIndex == inputLength) {\n+            return 0;\n+        }\n+        try {\n+            String entity = input.subSequence(nextIndex, endIndex).toString();\n+            value = Integer.parseInt(entity, radix);\n+        } catch(NumberFormatException nfe) {\n+            return 0;\n+        }\n+    } else {\n+        // named entity\n+        int endIndex = nextIndex;\n+        while (endIndex < inputLength && Character.isLetter(input.charAt(endIndex))) {\n+            endIndex++;\n+        }\n+        if (endIndex - nextIndex == 0 || (endIndex < inputLength && input.charAt(endIndex) != ';')) {\n+            return 0;\n+        }\n+        String entity = input.subSequence(nextIndex, endIndex).toString();\n+        if (!entities.containsKey(entity)) {\n+            return 0;\n+        }\n+        value = entities.get(entity).intValue();\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    // check for surrogate pairs\n+    if (Character.isHighSurrogate((char)value) || Character.isLowSurrogate((char)value)) {\n+        return 0;\n+    }\n \n+    // write the value to the writer\n+    if (value > 0xFFFF) {\n+        value -= 0x10000;\n+        char[] surrogatePair = {(char)(0xD800 | (value >> 10)), (char)(0xDC00 | (value & 0x3FF))};\n+        out.write(surrogatePair);\n+    } else {\n+        out.write((char)value);\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n-        return 0;\n+    // return the number of characters read\n+    int entityLength = nextIndex - index;\n+    if (isHex) {\n+        entityLength += 2;\n     }\n+    int length = inputLength - index;\n+    if (length > entityLength && input.charAt(index + entityLength) == ';') {\n+        entityLength++;\n+    }\n+    return entityLength;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}