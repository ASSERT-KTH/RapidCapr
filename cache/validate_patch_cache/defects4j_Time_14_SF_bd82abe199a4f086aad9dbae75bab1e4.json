{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        MutableDateTime dt = new MutableDateTime(values[0], values[1], 1, 0, 0, 0, 0, iChronology);\n        dt.addMonths(valueToAdd);\n        int newYear = dt.getYear();\n        int newMonth = dt.getMonthOfYear();\n        int newMaxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(dt.withDayOfMonth(1).getMillis());\n        int newDayOfMonth = Math.min(values[2], newMaxDayOfMonth); // If day of month is greater than max day of month in new month, set it to max day of month\n        if (newDayOfMonth < values[2]) {\n            // Day of month adjustments can cause month and/or year to change\n            dt = new MutableDateTime(newYear, newMonth, newDayOfMonth, 0, 0, 0, 0, iChronology);\n            newYear = dt.getYear();\n            newMonth = dt.getMonthOfYear();\n        }\n        boolean isLeapNewYear = iChronology.year().isLeap(newYear);\n        if (isLeapNewYear && newMonth == 2 && newDayOfMonth == 29 && values[2] == 29) {\n            // If new month is February and is a leap year and the original day of month was also 29, set it to Feb 28\n            newDayOfMonth = 28;\n        }\n        return new int[]{newYear, newMonth, newDayOfMonth, values[3], values[4], values[5], values[6]};\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..49b75fe9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        MutableDateTime dt = new MutableDateTime(values[0], values[1], 1, 0, 0, 0, 0, iChronology);\n+        dt.addMonths(valueToAdd);\n+        int newYear = dt.getYear();\n+        int newMonth = dt.getMonthOfYear();\n+        int newMaxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(dt.withDayOfMonth(1).getMillis());\n+        int newDayOfMonth = Math.min(values[2], newMaxDayOfMonth); // If day of month is greater than max day of month in new month, set it to max day of month\n+        if (newDayOfMonth < values[2]) {\n+            // Day of month adjustments can cause month and/or year to change\n+            dt = new MutableDateTime(newYear, newMonth, newDayOfMonth, 0, 0, 0, 0, iChronology);\n+            newYear = dt.getYear();\n+            newMonth = dt.getMonthOfYear();\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        boolean isLeapNewYear = iChronology.year().isLeap(newYear);\n+        if (isLeapNewYear && newMonth == 2 && newDayOfMonth == 29 && values[2] == 29) {\n+            // If new month is February and is a leap year and the original day of month was also 29, set it to Feb 28\n+            newDayOfMonth = 28;\n         }\n+        return new int[]{newYear, newMonth, newDayOfMonth, values[3], values[4], values[5], values[6]};\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}