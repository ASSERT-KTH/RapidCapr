{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      } else if (type.isAllType() && type.hasNonScalarMembers()) {\n        // This is the case where |type| may be an arbitrary depth of union and either\n        // every member of the union either is an Object that matches constraintObj, or is 'null',\n        // or every member of the union either is 'undefined' or matches the constraintObj.\n        // Either way, we want to narrow away the non-matching members of the union.\n        JSType narrowedUnion = getNativeType(VOID_TYPE);\n        for (JSType alt : type.getAlternatesWithoutStructuralTyping()) {\n          if (alt.isSubtypeOf(constraintObj)) {\n            narrowedUnion = narrowedUnion.getLeastSupertype(alt);\n          } else if (alt.isSubtypeOf(getNativeType(VOID_TYPE))) {\n            continue;\n          } else if (alt.restrictByNotNullOrUndefined().isSubtypeOf(constraintObj)) {\n            narrowedUnion =\n                narrowedUnion.getLeastSupertype(alt.restrictByNotNullOrUndefined());\n          }\n        }\n        objType = ObjectType.cast(narrowedUnion);\n        if (objType != null) {\n          for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n              JSType typeToInfer = propType;\n              if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              }\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n        if (objType != null) {\n          type = objType;\n        } else {\n          // Every member of the union was either 'null' or 'undefined'.\n          type = narrowedUnion;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..54a204ca 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1132,7 +1132,42 @@ class TypeInference\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n+      } else if (type.isAllType() && type.hasNonScalarMembers()) {\n+        // This is the case where |type| may be an arbitrary depth of union and either\n+        // every member of the union either is an Object that matches constraintObj, or is 'null',\n+        // or every member of the union either is 'undefined' or matches the constraintObj.\n+        // Either way, we want to narrow away the non-matching members of the union.\n+        JSType narrowedUnion = getNativeType(VOID_TYPE);\n+        for (JSType alt : type.getAlternatesWithoutStructuralTyping()) {\n+          if (alt.isSubtypeOf(constraintObj)) {\n+            narrowedUnion = narrowedUnion.getLeastSupertype(alt);\n+          } else if (alt.isSubtypeOf(getNativeType(VOID_TYPE))) {\n+            continue;\n+          } else if (alt.restrictByNotNullOrUndefined().isSubtypeOf(constraintObj)) {\n+            narrowedUnion =\n+                narrowedUnion.getLeastSupertype(alt.restrictByNotNullOrUndefined());\n+          }\n+        }\n+        objType = ObjectType.cast(narrowedUnion);\n+        if (objType != null) {\n+          for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (!objType.isPropertyTypeDeclared(prop)) {\n+              JSType typeToInfer = propType;\n+              if (!objType.hasProperty(prop)) {\n+                typeToInfer =\n+                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              }\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n+            }\n+          }\n+        }\n+        if (objType != null) {\n+          type = objType;\n+        } else {\n+          // Every member of the union was either 'null' or 'undefined'.\n+          type = narrowedUnion;\n+        }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}