{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final String[] parts = str.split(\"_\", -1);\n    final int len = parts.length;\n\n    if (len == 1) {\n        final String language = parts[0];\n        if (!isValidCode(language)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language);\n    }\n\n    if (len == 2) {\n        final String language = parts[0];\n        final String countryCode = parts[1];\n        if (!isValidCode(language) || !isValidCode(countryCode)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, countryCode);\n    }\n\n    if (len == 3) {\n        final String language = parts[0];\n        final String countryCode = parts[1];\n        final String variant = parts[2];\n        if (!isValidCode(language) || !isValidCode(countryCode) || !isValidCode(variant)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, countryCode, variant);\n    }\n\n    if (len > 3 && parts[0].isEmpty()) {\n        final String language = parts[1];\n        final String countryCode = parts[2];\n        final String variant = parts.length > 3 ? parts[3] : \"\";\n        if (!isValidCode(language) || !isValidCode(countryCode) || !isValidCode(variant)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, countryCode, variant);\n    }\n\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\n\nprivate static boolean isValidCode(final String code) {\n    if (code.isEmpty()) {\n        return false;\n    }\n    for (int i = 0; i < code.length(); i++) {\n        final char ch = code.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..665ffa93 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,67 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final String[] parts = str.split(\"_\", -1);\n+    final int len = parts.length;\n+\n+    if (len == 1) {\n+        final String language = parts[0];\n+        if (!isValidCode(language)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        return new Locale(language);\n+    }\n+\n+    if (len == 2) {\n+        final String language = parts[0];\n+        final String countryCode = parts[1];\n+        if (!isValidCode(language) || !isValidCode(countryCode)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        return new Locale(language, countryCode);\n     }\n \n+    if (len == 3) {\n+        final String language = parts[0];\n+        final String countryCode = parts[1];\n+        final String variant = parts[2];\n+        if (!isValidCode(language) || !isValidCode(countryCode) || !isValidCode(variant)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(language, countryCode, variant);\n+    }\n+\n+    if (len > 3 && parts[0].isEmpty()) {\n+        final String language = parts[1];\n+        final String countryCode = parts[2];\n+        final String variant = parts.length > 3 ? parts[3] : \"\";\n+        if (!isValidCode(language) || !isValidCode(countryCode) || !isValidCode(variant)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(language, countryCode, variant);\n+    }\n+\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+\n+private static boolean isValidCode(final String code) {\n+    if (code.isEmpty()) {\n+        return false;\n+    }\n+    for (int i = 0; i < code.length(); i++) {\n+        final char ch = code.charAt(i);\n+        if (!Character.isLetterOrDigit(ch)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}