{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            long nextTransition = nextTransition(instantAdjusted);\n            long prevTransition = previousTransition(instantAdjusted);\n            // If the current offset is ahead of the previous offset, check if the local instant is between the previous and current transitions, and return the previous offset\n            if (offsetLocal > offsetAdjusted) {\n                if (instantLocal >= prevTransition && instantLocal < instantAdjusted) {\n                    return getOffset(prevTransition);\n                } else {\n                    return offsetLocal;\n                }\n            // If the current offset is behind the previous offset, check if the local instant is between the current and next transitions, and return the next offset\n            } else {\n                if (instantLocal >= instantAdjusted && instantLocal < nextTransition) {\n                    return getOffset(nextTransition);\n                } else {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..225d90b4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            long nextTransition = nextTransition(instantAdjusted);\n+            long prevTransition = previousTransition(instantAdjusted);\n+            // If the current offset is ahead of the previous offset, check if the local instant is between the previous and current transitions, and return the previous offset\n+            if (offsetLocal > offsetAdjusted) {\n+                if (instantLocal >= prevTransition && instantLocal < instantAdjusted) {\n+                    return getOffset(prevTransition);\n+                } else {\n+                    return offsetLocal;\n+                }\n+            // If the current offset is behind the previous offset, check if the local instant is between the current and next transitions, and return the next offset\n+            } else {\n+                if (instantLocal >= instantAdjusted && instantLocal < nextTransition) {\n+                    return getOffset(nextTransition);\n+                } else {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}