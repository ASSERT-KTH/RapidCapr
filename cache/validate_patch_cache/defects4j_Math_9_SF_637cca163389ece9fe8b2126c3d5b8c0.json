{
    "patch": "public void testRevert() {\n    final Vector v = new Vector(1.234, 5.678);\n    final Point p = new Point(0.123, -4.567);\n    final Line line = new Line(p, v);\n    final Line reverted = line.revert();\n    final double delta = 0.00000001;\n    \n    assertEquals(-v.getX(), reverted.getDirection().getX(), delta);\n    assertEquals(-v.getY(), reverted.getDirection().getY(), delta);\n    assertEquals(p.getX(), reverted.getBase().getX(), delta);\n    assertEquals(p.getY(), reverted.getBase().getY(), delta);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..d80d9776c 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,18 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public void testRevert() {\n+    final Vector v = new Vector(1.234, 5.678);\n+    final Point p = new Point(0.123, -4.567);\n+    final Line line = new Line(p, v);\n+    final Line reverted = line.revert();\n+    final double delta = 0.00000001;\n+    \n+    assertEquals(-v.getX(), reverted.getDirection().getX(), delta);\n+    assertEquals(-v.getY(), reverted.getDirection().getY(), delta);\n+    assertEquals(p.getX(), reverted.getBase().getX(), delta);\n+    assertEquals(p.getY(), reverted.getBase().getY(), delta);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: Vector is abstract; cannot be instantiated",
    "test_result": "ERROR"
}