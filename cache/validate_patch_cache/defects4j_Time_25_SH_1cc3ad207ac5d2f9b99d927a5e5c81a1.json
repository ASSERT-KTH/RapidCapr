{
    "patch": "else {\n    // The next transition is outside the range of the time line,\n    // so it needs to be adjusted to either the start or the end of the time line\n    Long instant = instantAdjusted;\n    if (instant < getMinLocalMillis()) {\n        instant = getMinLocalMillis();\n    } else if (instant > getMaxLocalMillis()) {\n        instant = getMaxLocalMillis();\n    }\n    int offsetFrom = getOffset(instant - 1);\n    int offsetMax = Math.max(offsetFrom, offsetLocal);\n    int offsetMin = Math.min(offsetFrom, offsetLocal);\n    if (offsetMax > offsetMin) {\n        return offsetMin;\n    } else {\n        return offsetMax;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5aabed9f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+else {\n+    // The next transition is outside the range of the time line,\n+    // so it needs to be adjusted to either the start or the end of the time line\n+    Long instant = instantAdjusted;\n+    if (instant < getMinLocalMillis()) {\n+        instant = getMinLocalMillis();\n+    } else if (instant > getMaxLocalMillis()) {\n+        instant = getMaxLocalMillis();\n+    }\n+    int offsetFrom = getOffset(instant - 1);\n+    int offsetMax = Math.max(offsetFrom, offsetLocal);\n+    int offsetMin = Math.min(offsetFrom, offsetLocal);\n+    if (offsetMax > offsetMin) {\n+        return offsetMin;\n+    } else {\n+        return offsetMax;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}