{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int instantMonth = 0;\n        int instantYear = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int value = values[i];\n            DateTimeField field = partial.getField(i);\n            if (field.getDurationField().getType() == DurationFieldType.months()) {\n                value = valueToAdd + value;\n                int year = field.getField(iChronology).get(instantYear, instantMonth);\n                int month = value - 1;\n                if (month < 0) {\n                    year += month / 12 - 1;\n                    month = (month % 12 + 12) % 12 + 1;\n                } else {\n                    year += month / 12;\n                    month = month % 12 + 1;\n                }\n                int day = Math.min(field.getMaximumValue(iChronology.getDateTimeMillis(year, month, 1)), field.get(instantYear));\n                instantYear = year;\n                instantMonth = month;\n                values[i] = day;\n            } else {\n                values[i] = field.getField(iChronology).add(instant, valueToAdd);\n            }\n        }\n        return iChronology.get(partial, iChronology.getDateTimeMillis(instantYear, instantMonth, values[2], values[3], values[4], values[5], values[6]));\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..44293d5a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,43 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int instantMonth = 0;\n+        int instantYear = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int value = values[i];\n+            DateTimeField field = partial.getField(i);\n+            if (field.getDurationField().getType() == DurationFieldType.months()) {\n+                value = valueToAdd + value;\n+                int year = field.getField(iChronology).get(instantYear, instantMonth);\n+                int month = value - 1;\n+                if (month < 0) {\n+                    year += month / 12 - 1;\n+                    month = (month % 12 + 12) % 12 + 1;\n+                } else {\n+                    year += month / 12;\n+                    month = month % 12 + 1;\n+                }\n+                int day = Math.min(field.getMaximumValue(iChronology.getDateTimeMillis(year, month, 1)), field.get(instantYear));\n+                instantYear = year;\n+                instantMonth = month;\n+                values[i] = day;\n+            } else {\n+                values[i] = field.getField(iChronology).add(instant, valueToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, iChronology.getDateTimeMillis(instantYear, instantMonth, values[2], values[3], values[4], values[5], values[6]));\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}