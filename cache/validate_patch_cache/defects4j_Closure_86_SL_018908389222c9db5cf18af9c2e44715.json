{
    "patch": "The following fix line could also be a possible solution:\n\n```\nreturn locals.apply(value.getParent()) && (isImmutableValue(value) || !callHasLocalResult(value)) && NodeUtil.getSideEffectFlags(value.getFirstChild()) == 0;\n```\n\nThis fix line adds an additional check to ensure that the first child of the `NEW` expression does not have any side effects.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..bf8833a2 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,13 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+The following fix line could also be a possible solution:\n+\n+```\n+return locals.apply(value.getParent()) && (isImmutableValue(value) || !callHasLocalResult(value)) && NodeUtil.getSideEffectFlags(value.getFirstChild()) == 0;\n+```\n+\n+This fix line adds an additional check to ensure that the first child of the `NEW` expression does not have any side effects.\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}