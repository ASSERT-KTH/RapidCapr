{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        int[] offsets = getOffsetFromLocalInternal(instantLocal);\n        return offsets[0];\n    }\n\n    /**\n     * Internal method split out so that the offset and saving can be queried separately.\n     * Returns {offsetMillis, savingMillis}.\n     */\n    private int[] getOffsetFromLocalInternal(long instantLocal) {\n        int offsetLocal = getOffset(instantLocal);\n\n        // Check if the given local date-time is invalid due to a gap in the local time-line\n        long nextTransition = nextTransition(instantLocal);\n        if (nextTransition == instantLocal) {\n            throw new IllegalArgumentException(\"Local date-time does not exist in this time-zone due to a gap in the local time-line\");\n        }\n\n        // Check if the given local date-time overlaps with a transition in the local time-line\n        long previousTransition = previousTransition(instantLocal);\n        if (nextTransition > previousTransition + 1) {\n            // Get the offset before and after the transition\n            int offsetBeforeTransition = getOffset(previousTransition);\n            int offsetAfterTransition = getOffset(nextTransition);\n\n            if (offsetLocal < offsetAfterTransition) {\n                return new int[]{offsetLocal, offsetAfterTransition - offsetLocal};\n            } else if (offsetLocal > offsetBeforeTransition) {\n                return new int[]{offsetLocal, offsetBeforeTransition - offsetLocal};\n            } else {\n                return new int[]{offsetLocal, 0};\n            }\n        }\n\n        // The given local date-time is valid\n        return new int[]{offsetLocal, 0};\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..d54e1e23 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,41 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        int[] offsets = getOffsetFromLocalInternal(instantLocal);\n+        return offsets[0];\n+    }\n+\n+    /**\n+     * Internal method split out so that the offset and saving can be queried separately.\n+     * Returns {offsetMillis, savingMillis}.\n+     */\n+    private int[] getOffsetFromLocalInternal(long instantLocal) {\n+        int offsetLocal = getOffset(instantLocal);\n+\n+        // Check if the given local date-time is invalid due to a gap in the local time-line\n+        long nextTransition = nextTransition(instantLocal);\n+        if (nextTransition == instantLocal) {\n+            throw new IllegalArgumentException(\"Local date-time does not exist in this time-zone due to a gap in the local time-line\");\n+        }\n+\n+        // Check if the given local date-time overlaps with a transition in the local time-line\n+        long previousTransition = previousTransition(instantLocal);\n+        if (nextTransition > previousTransition + 1) {\n+            // Get the offset before and after the transition\n+            int offsetBeforeTransition = getOffset(previousTransition);\n+            int offsetAfterTransition = getOffset(nextTransition);\n+\n+            if (offsetLocal < offsetAfterTransition) {\n+                return new int[]{offsetLocal, offsetAfterTransition - offsetLocal};\n+            } else if (offsetLocal > offsetBeforeTransition) {\n+                return new int[]{offsetLocal, offsetBeforeTransition - offsetLocal};\n+            } else {\n+                return new int[]{offsetLocal, 0};\n             }\n         }\n-        return offsetAdjusted;\n+\n+        // The given local date-time is valid\n+        return new int[]{offsetLocal, 0};\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}