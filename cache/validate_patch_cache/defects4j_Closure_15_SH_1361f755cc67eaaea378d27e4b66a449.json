{
    "patch": "        if (n.isGetProp()) {\n          JSType typeBeforeProp = n.getFirstChild().getJSType();\n          String qualifiedName = NodeUtil.getBestLValueName(n);\n          SymbolType symbol = scope.getSymbolType(qualifiedName);\n          if (typeBeforeProp != null && symbol != null && symbol.isDependentOn(typeBeforeProp)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..dd1707bf 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,11 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isGetProp()) {\n+          JSType typeBeforeProp = n.getFirstChild().getJSType();\n+          String qualifiedName = NodeUtil.getBestLValueName(n);\n+          SymbolType symbol = scope.getSymbolType(qualifiedName);\n+          if (typeBeforeProp != null && symbol != null && symbol.isDependentOn(typeBeforeProp)) {\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}