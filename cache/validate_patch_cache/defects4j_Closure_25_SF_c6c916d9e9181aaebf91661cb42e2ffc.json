{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      // Check if the constructor type is an object type\n      ObjectType objType = constructorType.restrictByNotNullOrUndefined().autobox().toObjectType();\n      if (objType != null) {\n        type = objType;\n      } else {\n        // Check if the constructor type is a function type\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        } else {\n          // Constructor type is neither an object type nor a constructor function\n          type = getNativeType(UNKNOWN_TYPE);\n        }\n      }\n    }\n    if (type != null) {\n      n.setJSType(type);\n    }\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..2e663780 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,35 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+      // Check if the constructor type is an object type\n+      ObjectType objType = constructorType.restrictByNotNullOrUndefined().autobox().toObjectType();\n+      if (objType != null) {\n+        type = objType;\n       } else {\n+        // Check if the constructor type is a function type\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+        } else {\n+          // Constructor type is neither an object type nor a constructor function\n+          type = getNativeType(UNKNOWN_TYPE);\n         }\n       }\n     }\n-    n.setJSType(type);\n+    if (type != null) {\n+      n.setJSType(type);\n+    }\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_MISMATCH. inconsistent return type",
    "test_result": "FAIL"
}