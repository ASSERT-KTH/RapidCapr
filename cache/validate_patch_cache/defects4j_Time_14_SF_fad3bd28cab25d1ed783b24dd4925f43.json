{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        int instant = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        // Add the value to the current month\n        int currentMonth = iChronology.monthOfYear().get(instant);\n        int targetMonth = iChronology.monthOfYear().add(currentMonth, valueToAdd);\n        int daysInCurrentMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n        \n        // Ensure that the day of month is valid for the new month\n        int currentDay = iChronology.dayOfMonth().get(instant);\n        int targetDay = Math.min(currentDay, iChronology.dayOfMonth().getMaximumValue(instant.withMonthOfYear(targetMonth).withYear(iChronology.year().get(instant))));\n        int targetYear = iChronology.year().get(instant);\n        \n        Partial partialResult = new Partial().with(iChronology.monthOfYear(), targetMonth).with(iChronology.dayOfMonth(), targetDay);\n        if (iChronology.year().isSupported()) {\n            targetYear = adjustYear(partialResult, targetYear);\n            partialResult = partialResult.with(iChronology.year(), targetYear);\n        }\n        \n        return partialResult.getValues();\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate int adjustYear(Partial partial, int targetYear) {\n    try {\n        return partial.getFormatter().parseLocalDate(Integer.toString(targetYear)).getYear();\n    } catch (IllegalArgumentException e) {\n        if (e.getMessage().startsWith(\"Invalid format\")) {\n            // The target year was invalid for the current calendar system, so we adjust it to a valid year\n            return partial.getFieldType(0).getField(iChronology).getRangeDurationField().getMinimumValue(iChronology).getYear();\n        } else {\n            throw e;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..901e1f0d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,51 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int instant = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+        // Add the value to the current month\n+        int currentMonth = iChronology.monthOfYear().get(instant);\n+        int targetMonth = iChronology.monthOfYear().add(currentMonth, valueToAdd);\n+        int daysInCurrentMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+        \n+        // Ensure that the day of month is valid for the new month\n+        int currentDay = iChronology.dayOfMonth().get(instant);\n+        int targetDay = Math.min(currentDay, iChronology.dayOfMonth().getMaximumValue(instant.withMonthOfYear(targetMonth).withYear(iChronology.year().get(instant))));\n+        int targetYear = iChronology.year().get(instant);\n+        \n+        Partial partialResult = new Partial().with(iChronology.monthOfYear(), targetMonth).with(iChronology.dayOfMonth(), targetDay);\n+        if (iChronology.year().isSupported()) {\n+            targetYear = adjustYear(partialResult, targetYear);\n+            partialResult = partialResult.with(iChronology.year(), targetYear);\n+        }\n+        \n+        return partialResult.getValues();\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+}\n+\n+private int adjustYear(Partial partial, int targetYear) {\n+    try {\n+        return partial.getFormatter().parseLocalDate(Integer.toString(targetYear)).getYear();\n+    } catch (IllegalArgumentException e) {\n+        if (e.getMessage().startsWith(\"Invalid format\")) {\n+            // The target year was invalid for the current calendar system, so we adjust it to a valid year\n+            return partial.getFieldType(0).getField(iChronology).getRangeDurationField().getMinimumValue(iChronology).getYear();\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            throw e;\n         }\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}