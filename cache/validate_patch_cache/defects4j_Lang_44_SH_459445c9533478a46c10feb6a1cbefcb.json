{
    "patch": "if (val == null || val.trim().isEmpty()) {\n    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n}\nval = val.trim();\nif (val.charAt(0) == '+' || val.charAt(0) == '-') {\n    if (val.length() == 1 || !Character.isDigit(val.charAt(1))) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    if (val.length() == 2 && val.charAt(1) == '0') {\n        return createInteger(val);\n    }\n} else {\n    if (!Character.isDigit(val.charAt(0))) {\n        throw new NumberFormatException(val + \" i",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..b4681a82 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,20 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val == null || val.trim().isEmpty()) {\n+    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+}\n+val = val.trim();\n+if (val.charAt(0) == '+' || val.charAt(0) == '-') {\n+    if (val.length() == 1 || !Character.isDigit(val.charAt(1))) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    if (val.length() == 2 && val.charAt(1) == '0') {\n+        return createInteger(val);\n+    }\n+} else {\n+    if (!Character.isDigit(val.charAt(0))) {\n+        throw new NumberFormatException(val + \" i\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unclosed string literal",
    "test_result": "ERROR"
}