{
    "patch": "      boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n\n        // determine if the left paren of the parameters should be on a separate line\n        boolean separateLine = false;\n        if (!functionNode.getParams().isEmpty()) {\n          int paramsStart = functionNode.getParamtersStart();\n          for (int i = 0; i < functionNode.getParams().size(); i++) {\n            AstNode param = functionNode.getParams().get(i);\n            separateLine = separateLine || param.getPosition() >= paramsStart;\n          }\n        }\n\n        // determine the charno of the left paren of the parameters\n        int lparenCharno;\n        if (separateLine) {\n          // if the left paren is on a separate line, it goes to the end of the function definition\n          lparenCharno = functionNode.getPosition() + functionNode.getLength();\n        } else {\n          // otherwise, it goes after the function name\n          lparenCharno = name.getPosition() + name.getLength();\n        }\n\n        newName.setCharno(position2charno(lparenCharno));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      lp.setLineno(newName.getLineno());\n\n      // determine the charno of the left paren of the parameters\n      int lparenCharno;\n      if (!functionNode.getParams().isEmpty()) {\n        lparenCharno = functionNode.getParams().get(0).getPosition();\n      } else {\n        lparenCharno = functionNode.getPosition() + functionNode.getLength() - 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..085a83dc 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,50 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        newName.setLineno(functionNode.getLineno());\n+\n+        // determine if the left paren of the parameters should be on a separate line\n+        boolean separateLine = false;\n+        if (!functionNode.getParams().isEmpty()) {\n+          int paramsStart = functionNode.getParamtersStart();\n+          for (int i = 0; i < functionNode.getParams().size(); i++) {\n+            AstNode param = functionNode.getParams().get(i);\n+            separateLine = separateLine || param.getPosition() >= paramsStart;\n+          }\n+        }\n+\n+        // determine the charno of the left paren of the parameters\n+        int lparenCharno;\n+        if (separateLine) {\n+          // if the left paren is on a separate line, it goes to the end of the function definition\n+          lparenCharno = functionNode.getPosition() + functionNode.getLength();\n+        } else {\n+          // otherwise, it goes after the function name\n+          lparenCharno = name.getPosition() + name.getLength();\n+        }\n+\n+        newName.setCharno(position2charno(lparenCharno));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      lp.setLineno(newName.getLineno());\n+\n+      // determine the charno of the left paren of the parameters\n+      int lparenCharno;\n+      if (!functionNode.getParams().isEmpty()) {\n+        lparenCharno = functionNode.getParams().get(0).getPosition();\n+      } else {\n+        lparenCharno = functionNode.getPosition() + functionNode.getLength() - 1;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}