{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    try {\n        Field callbacksField = mock.getClass().getDeclaredField(\"callbacks\");\n        callbacksField.setAccessible(true);\n        Callback[] callbacks = (Callback[]) callbacksField.get(mock);\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptorFilter) {\n                callbacks[i] = newFilter;\n                callbacksField.set(mock, callbacks);\n                return;\n            }\n        }\n        List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n        callbackList.add(newFilter);\n        callbacks = callbackList.toArray(new Callback[callbackList.size()]);\n        callbacksField.set(mock, callbacks);\n    } catch (NoSuchFieldException | IllegalAccessException | IllegalArgumentException ex) {\n        ex.printStackTrace();\n        return;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..aab1a4065 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,33 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    try {\n+        Field callbacksField = mock.getClass().getDeclaredField(\"callbacks\");\n+        callbacksField.setAccessible(true);\n+        Callback[] callbacks = (Callback[]) callbacksField.get(mock);\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                callbacks[i] = newFilter;\n+                callbacksField.set(mock, callbacks);\n+                return;\n+            }\n+        }\n+        List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n+        callbackList.add(newFilter);\n+        callbacks = callbackList.toArray(new Callback[callbackList.size()]);\n+        callbacksField.set(mock, callbacks);\n+    } catch (NoSuchFieldException | IllegalAccessException | IllegalArgumentException ex) {\n+        ex.printStackTrace();\n+        return;\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}