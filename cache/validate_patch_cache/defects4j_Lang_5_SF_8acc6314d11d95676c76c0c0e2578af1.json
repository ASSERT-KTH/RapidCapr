{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    String[] parts = str.split(\"_\", -1);\n    final int len = parts.length;\n\n    if (len == 1) {\n        return new Locale(parts[0]);\n    } else if (len == 2) {\n        return new Locale(parts[0], parts[1]);\n    } else if (len >= 3) {\n        String language = parts[0];\n        String country = parts[1];\n        String variant = \"\";\n\n        if (str.charAt(2) == '_') {\n            variant = str.substring(3);\n        } else {\n            int variantStartIndex = str.indexOf('_', language.length() + 1);\n\n            if (variantStartIndex == -1) {\n                variant = str.substring(country.length() + language.length() + 2);\n            } else {\n                country = str.substring(language.length() + 1, variantStartIndex);\n                variant = str.substring(variantStartIndex + 1);\n            }\n        }\n\n        if (language.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (language.length() != 2) {\n            throw new IllegalArgumentException(\"Invalid language code: \" + language);\n        }\n\n        for (int i = 0; i < language.length(); i++) {\n            char ch = language.charAt(i);\n            if (!Character.isLowerCase(ch)) {\n                throw new IllegalArgumentException(\"Invalid language code: \" + language);\n            }\n        }\n\n        if (!country.isEmpty()) {\n            if (country.length() != 2) {\n                throw new IllegalArgumentException(\"Invalid country code: \" + country);\n            }\n\n            for (int i = 0; i < country.length(); i++) {\n                char ch = country.charAt(i);\n                if (!Character.isUpperCase(ch)) {\n                    throw new IllegalArgumentException(\"Invalid country code: \" + country);\n                }\n            }\n        }\n\n        if (!variant.isEmpty()) {\n            if (variant.startsWith(\"_\")) {\n                if (variant.length() < 3 || variant.charAt(1) == '_') {\n                    throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n                }\n            }\n\n            for (int i = 0; i < variant.length(); i++) {\n                char ch = variant.charAt(i);\n                if (!Character.isLetterOrDigit(ch) && ch != '_' && ch != '-') {\n                    throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n                }\n\n                if (ch == '_' && i < 2) {\n                    throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n                }\n            }\n        }\n\n        return new Locale(language, country, variant);\n    } else {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..1921648c 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,88 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    String[] parts = str.split(\"_\", -1);\n+    final int len = parts.length;\n+\n+    if (len == 1) {\n+        return new Locale(parts[0]);\n+    } else if (len == 2) {\n+        return new Locale(parts[0], parts[1]);\n+    } else if (len >= 3) {\n+        String language = parts[0];\n+        String country = parts[1];\n+        String variant = \"\";\n+\n+        if (str.charAt(2) == '_') {\n+            variant = str.substring(3);\n+        } else {\n+            int variantStartIndex = str.indexOf('_', language.length() + 1);\n+\n+            if (variantStartIndex == -1) {\n+                variant = str.substring(country.length() + language.length() + 2);\n+            } else {\n+                country = str.substring(language.length() + 1, variantStartIndex);\n+                variant = str.substring(variantStartIndex + 1);\n+            }\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+\n+        if (language.isEmpty()) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n+\n+        if (language.length() != 2) {\n+            throw new IllegalArgumentException(\"Invalid language code: \" + language);\n+        }\n+\n+        for (int i = 0; i < language.length(); i++) {\n+            char ch = language.charAt(i);\n+            if (!Character.isLowerCase(ch)) {\n+                throw new IllegalArgumentException(\"Invalid language code: \" + language);\n             }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        if (!country.isEmpty()) {\n+            if (country.length() != 2) {\n+                throw new IllegalArgumentException(\"Invalid country code: \" + country);\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n+\n+            for (int i = 0; i < country.length(); i++) {\n+                char ch = country.charAt(i);\n+                if (!Character.isUpperCase(ch)) {\n+                    throw new IllegalArgumentException(\"Invalid country code: \" + country);\n+                }\n             }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        if (!variant.isEmpty()) {\n+            if (variant.startsWith(\"_\")) {\n+                if (variant.length() < 3 || variant.charAt(1) == '_') {\n+                    throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n+                }\n             }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n+            for (int i = 0; i < variant.length(); i++) {\n+                char ch = variant.charAt(i);\n+                if (!Character.isLetterOrDigit(ch) && ch != '_' && ch != '-') {\n+                    throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n+                }\n+\n+                if (ch == '_' && i < 2) {\n+                    throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n+                }\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n+\n+        return new Locale(language, country, variant);\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid variant code: _P",
    "test_result": "FAIL"
}