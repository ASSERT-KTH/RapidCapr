{
    "patch": "      boolean firstAssignmentHasOutParams = false;\n      boolean firstAssignmentIsRecursive = false;\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref != null) {\n        if (ref.canThrowException()) {\n          return false;\n        }\n        // Make sure this assignment is not in a loop.\n        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            break;\n          } else if (block.isLoop) {\n            return false;\n          }\n        }\n        if (ref.isPropertyDeclaration()) {\n          firstAssignmentIsRecursive = true;\n          if (ref.getQualifier() != null) {\n            return false;\n          }\n          boolean allOutParams = true;\n          for (var r : ref.getChildReferences()) {\n            if (r.isVariable()) {\n              allOutParams = false;\n              break;\n            }\n          }\n          firstAssignmentHasOutParams = allOutParams;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..248261bc 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,37 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      boolean firstAssignmentHasOutParams = false;\n+      boolean firstAssignmentIsRecursive = false;\n+      Reference ref = getOneAndOnlyAssignment();\n+      if (ref != null) {\n+        if (ref.canThrowException()) {\n+          return false;\n+        }\n+        // Make sure this assignment is not in a loop.\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            break;\n+          } else if (block.isLoop) {\n+            return false;\n+          }\n+        }\n+        if (ref.isPropertyDeclaration()) {\n+          firstAssignmentIsRecursive = true;\n+          if (ref.getQualifier() != null) {\n+            return false;\n+          }\n+          boolean allOutParams = true;\n+          for (var r : ref.getChildReferences()) {\n+            if (r.isVariable()) {\n+              allOutParams = false;\n+              break;\n+            }\n+          }\n+          firstAssignmentHasOutParams = allOutParams;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}