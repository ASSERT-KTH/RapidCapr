{
    "patch": "      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        } else if (block.isConditionalBranch()) {\n          // All paths must lead to the same assignment.\n          List<BasicBlock> branches =\n              ((ConditionalBranch) block.getLastStatement()).getBranches();\n          Reference[] branchVals = new Reference[branches.size()];\n          for (int i = 0; i < branches.size(); i++) {\n            BasicBlock branch = branches.get(i);\n            if (branch == null) {\n              // One branch is unreachable.\n              return false;\n            }\n            branchVals[i] = branch.getAst().getCondition().getAssignedValue();\n          }\n          // All the branches must lead to the same value.\n          for (int i = 1; i < branchVals.length; i++) {\n            if (!branchVals[i].isEqual(branchVals[0])) {\n              return false;\n            }\n          }\n          break;\n        }\n      }\n\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0f137e63 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,43 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Reference ref = getOneAndOnlyAssignment();\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.isConditionalBranch()) {\n+          // All paths must lead to the same assignment.\n+          List<BasicBlock> branches =\n+              ((ConditionalBranch) block.getLastStatement()).getBranches();\n+          Reference[] branchVals = new Reference[branches.size()];\n+          for (int i = 0; i < branches.size(); i++) {\n+            BasicBlock branch = branches.get(i);\n+            if (branch == null) {\n+              // One branch is unreachable.\n+              return false;\n+            }\n+            branchVals[i] = branch.getAst().getCondition().getAssignedValue();\n+          }\n+          // All the branches must lead to the same value.\n+          for (int i = 1; i < branchVals.length; i++) {\n+            if (!branchVals[i].isEqual(branchVals[0])) {\n+              return false;\n+            }\n+          }\n+          break;\n+        }\n+      }\n+\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}