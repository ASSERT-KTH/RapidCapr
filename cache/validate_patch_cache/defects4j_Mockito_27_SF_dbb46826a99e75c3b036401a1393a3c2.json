{
    "patch": "import org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\nimport org.mockito.internal.creation.MockSettingsImpl;\n\nimport java.lang.reflect.Method;\n\npublic class ResetMock<T> {\n\n    interface MockHandlerInterface<T> extends java.io.Serializable {\n        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n    }\n\n    static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n        final MockHandlerInterface<T> delegateMockHandler;\n\n        MockHandler(MockHandlerInterface<T> mockHandler) {\n            this.delegateMockHandler = mockHandler;\n        }\n\n        @Override\n        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n        }\n    }\n\n    static class MockHandlerInvocation implements java.io.Serializable {\n        final Object object;\n        final Method method;\n        final Object[] args;\n        final MethodProxy methodProxy;\n\n        MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n            this.object = object;\n            this.method = method;\n            this.args = args;\n            this.methodProxy = methodProxy;\n        }\n    }\n\n    static class MockMethodInterceptor implements MethodInterceptor {\n        private MockHandlerInterface<?> mockHandler;\n\n        MockMethodInterceptor(MockHandlerInterface<?> mockHandler) {\n            this.mockHandler = mockHandler;\n        }\n\n        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n            Object result = mockHandler.handle(new MockHandlerInvocation(obj, method, args, proxy));\n            return result;\n        }\n\n        public MockHandlerInterface<?> getMockHandler() {\n            return mockHandler;\n        }\n    }\n\n    public void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        for (int i = 0; i < ((Factory) mock).getCallbackCount(); i++) {\n            if (((Factory) mock).getCallback(i) instanceof MockMethodInterceptor) {\n                ((Factory) mock).setCallback(i, null);\n            }\n        }\n        ((Factory) mock).setCallbackType(MockMethodInterceptor.class);\n        MockMethodInterceptor newInterceptor = new MockMethodInterceptor(newMockHandler);\n        ((Factory) mock).setCallback(0, newInterceptor);\n    }\n\n    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        Factory factory = (Factory) mock;\n        MockMethodInterceptor interceptor = (MockMethodInterceptor) factory.getCallback(0);\n        return interceptor.getMockHandler();\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..28cbcedd9 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,84 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+\n+import java.lang.reflect.Method;\n+\n+public class ResetMock<T> {\n+\n+    interface MockHandlerInterface<T> extends java.io.Serializable {\n+        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n+    }\n+\n+    static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n+        final MockHandlerInterface<T> delegateMockHandler;\n+\n+        MockHandler(MockHandlerInterface<T> mockHandler) {\n+            this.delegateMockHandler = mockHandler;\n+        }\n+\n+        @Override\n+        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n+            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n+        }\n+    }\n+\n+    static class MockHandlerInvocation implements java.io.Serializable {\n+        final Object object;\n+        final Method method;\n+        final Object[] args;\n+        final MethodProxy methodProxy;\n+\n+        MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n+            this.object = object;\n+            this.method = method;\n+            this.args = args;\n+            this.methodProxy = methodProxy;\n+        }\n+    }\n+\n+    static class MockMethodInterceptor implements MethodInterceptor {\n+        private MockHandlerInterface<?> mockHandler;\n+\n+        MockMethodInterceptor(MockHandlerInterface<?> mockHandler) {\n+            this.mockHandler = mockHandler;\n+        }\n+\n+        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+            Object result = mockHandler.handle(new MockHandlerInvocation(obj, method, args, proxy));\n+            return result;\n+        }\n+\n+        public MockHandlerInterface<?> getMockHandler() {\n+            return mockHandler;\n+        }\n+    }\n+\n+    public void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        for (int i = 0; i < ((Factory) mock).getCallbackCount(); i++) {\n+            if (((Factory) mock).getCallback(i) instanceof MockMethodInterceptor) {\n+                ((Factory) mock).setCallback(i, null);\n+            }\n+        }\n+        ((Factory) mock).setCallbackType(MockMethodInterceptor.class);\n+        MockMethodInterceptor newInterceptor = new MockMethodInterceptor(newMockHandler);\n+        ((Factory) mock).setCallback(0, newInterceptor);\n+    }\n+\n+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        Factory factory = (Factory) mock;\n+        MockMethodInterceptor interceptor = (MockMethodInterceptor) factory.getCallback(0);\n+        return interceptor.getMockHandler();\n+    }\n+\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}