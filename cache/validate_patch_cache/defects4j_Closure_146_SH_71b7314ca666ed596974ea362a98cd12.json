{
    "patch": "// restrict types by not null or undefined\nJSType thisRestricted = this.restrictByNotNullOrUndefined();\nJSType thatRestricted = that.restrictByNotNullOrUndefined();\n\n// check for unknown types\nif (thisRestricted == null || thatRestricted == null) {\n  return new TypePair(null, null);\n}\n\n// check for equivalent types\nif (thisRestricted.isSubtypeOf(thatRestricted)) {\n  return new TypePair(thisRestricted, thatRestricted);\n} else if (thatRestricted.isSubtypeOf(thisRestricted)) {\n  return new TypePair(thatRestricted, thisRestricted);\n} else {\n  return new TypePair(null, null);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..ccd7081d 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,23 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+// restrict types by not null or undefined\n+JSType thisRestricted = this.restrictByNotNullOrUndefined();\n+JSType thatRestricted = that.restrictByNotNullOrUndefined();\n+\n+// check for unknown types\n+if (thisRestricted == null || thatRestricted == null) {\n+  return new TypePair(null, null);\n+}\n+\n+// check for equivalent types\n+if (thisRestricted.isSubtypeOf(thatRestricted)) {\n+  return new TypePair(thisRestricted, thatRestricted);\n+} else if (thatRestricted.isSubtypeOf(thisRestricted)) {\n+  return new TypePair(thatRestricted, thisRestricted);\n+} else {\n+  return new TypePair(null, null);\n+}\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}