{
    "patch": "@Override\nprotected Iterable<CompilerInput> getExtraInputs() {\n    List<JSModule> modules =\n        ImmutableList.of(new JSModule(\"module\", ImmutableList.<CompilerInput>of()));\n\n    List<JSModule> inputs;\n    if (externsInputs == null) {\n        inputs = modules;\n    } else {\n        inputs = ImmutableList.copyOf(modulesWithExterns);\n        inputs.addAll(modules);\n    }\n\n    List<CompilerInput> allInputs = new ArrayList<>();\n    for (JSModule module : inputs) {\n        allInputs.addAll(module.getInputs());\n    }\n\n    List<CompilerInput> extraInputs = new ArrayList<>();\n    for (CompilerInput input : allInputs) {\n        if (!input.isExtern()) {\n            String source = input.getSourceFile().getCode();\n            String newSource;\n            Matcher classMatcher = CLASS_PATTERN.matcher(source);\n\n            if (classMatcher.find()) {\n                String classDef = classMatcher.group();\n                Matcher methodMatcher = METHOD_PATTERN.matcher(classDef);\n\n                while (methodMatcher.find()) {\n                    String methodDef = methodMatcher.group();\n\n                    if (methodDef.contains(\"bar\")) { // MODIFY this line\n                        methodDef = methodDef.replaceAll(\"bar\", \"baz\");\n                    }\n\n                    classDef = classDef.replace(methodMatcher.group(), methodDef);\n                }\n\n                newSource = source.replace(classMatcher.group(), classDef);\n            } else {\n                newSource = source;\n            }\n\n            extraInputs.add(\n                new CompilerInput(\n                    SyntheticAstSource.makeTestSource(\"testcode\"), newSource, input.isExtern()));\n        }\n    }\n    return extraInputs;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..a5ed5c89 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,57 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+@Override\n+protected Iterable<CompilerInput> getExtraInputs() {\n+    List<JSModule> modules =\n+        ImmutableList.of(new JSModule(\"module\", ImmutableList.<CompilerInput>of()));\n+\n+    List<JSModule> inputs;\n+    if (externsInputs == null) {\n+        inputs = modules;\n+    } else {\n+        inputs = ImmutableList.copyOf(modulesWithExterns);\n+        inputs.addAll(modules);\n     }\n \n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+    List<CompilerInput> allInputs = new ArrayList<>();\n+    for (JSModule module : inputs) {\n+        allInputs.addAll(module.getInputs());\n     }\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+    List<CompilerInput> extraInputs = new ArrayList<>();\n+    for (CompilerInput input : allInputs) {\n+        if (!input.isExtern()) {\n+            String source = input.getSourceFile().getCode();\n+            String newSource;\n+            Matcher classMatcher = CLASS_PATTERN.matcher(source);\n \n-              // All tokens must be separated by a space.\n+            if (classMatcher.find()) {\n+                String classDef = classMatcher.group();\n+                Matcher methodMatcher = METHOD_PATTERN.matcher(classDef);\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+                while (methodMatcher.find()) {\n+                    String methodDef = methodMatcher.group();\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+                    if (methodDef.contains(\"bar\")) { // MODIFY this line\n+                        methodDef = methodDef.replaceAll(\"bar\", \"baz\");\n+                    }\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+                    classDef = classDef.replace(methodMatcher.group(), methodDef);\n+                }\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n+                newSource = source.replace(classMatcher.group(), classDef);\n+            } else {\n+                newSource = source;\n             }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+            extraInputs.add(\n+                new CompilerInput(\n+                    SyntheticAstSource.makeTestSource(\"testcode\"), newSource, input.isExtern()));\n+        }\n+    }\n+    return extraInputs;\n+}\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}