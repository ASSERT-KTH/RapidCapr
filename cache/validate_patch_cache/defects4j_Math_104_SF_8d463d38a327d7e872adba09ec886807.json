{
    "patch": "import org.apache.commons.math3.special.ContinuedFraction;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.MaxIterationsExceededException;\nimport org.apache.commons.math3.util.Precision;\n\npublic class GammaUtils {\n\n    private static final double DEFAULT_EPSILON = 10e-15;\n    private static final int DEFAULT_MAX_ITERATIONS = 100000;\n\n    public static double regularizedGammaP(double a, double x) {\n        return regularizedGammaP(a, x, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        return regularizedGammaQ(a, x, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n    }\n\n    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        if (x >= a + 1.0) {\n            double b = regularizedGammaQ(a, x, epsilon, maxIterations);\n            return 1.0 - b;\n        }\n\n        double n = 0;\n        double an = 1.0 / a;\n        double sum = an;\n\n        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n            n++;\n            an *= x / (a + n);\n            sum += an;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxIterationsExceededException(maxIterations);\n        }\n\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n\n    public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n\n        if (x == 0.0) {\n            return 1.0;\n        }\n\n        if (x < a + 1.0) {\n            double b = regularizedGammaP(a, x, epsilon, maxIterations);\n            return 1.0 - b;\n        }\n\n        ContinuedFraction fraction = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                double ret;\n                if (n % 2 == 0) {\n                    ret = (n - 2.0) * (a + n - 2.0) * x;\n                    ret /= (((double) n - 1) * n);\n                    ret += a - 1.0;\n                } else {\n                    ret = -(a + n - 1.0);\n                    ret += x * (n - 1.0);\n                }\n                return ret;\n            }\n\n            @Override\n            protected double getB(int n, double x) {\n                return n;\n            }\n        };\n\n        double factor = Math.exp(-x + a * Math.log(x) - logGamma(a)) / a;\n        return factor / fraction.evaluate(x, epsilon, maxIterations);\n    }\n\n    public static double logGamma(double x) {\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n        return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..fae9e8ee1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,101 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.ContinuedFraction;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.MaxIterationsExceededException;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class GammaUtils {\n+\n+    private static final double DEFAULT_EPSILON = 10e-15;\n+    private static final int DEFAULT_MAX_ITERATIONS = 100000;\n+\n+    public static double regularizedGammaP(double a, double x) {\n+        return regularizedGammaP(a, x, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        return regularizedGammaQ(a, x, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n+    }\n+\n+    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        if (x >= a + 1.0) {\n+            double b = regularizedGammaQ(a, x, epsilon, maxIterations);\n+            return 1.0 - b;\n+        }\n+\n+        double n = 0;\n+        double an = 1.0 / a;\n+        double sum = an;\n+\n+        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+            n++;\n+            an *= x / (a + n);\n+            sum += an;\n+        }\n+\n+        if (n >= maxIterations) {\n+            throw new MaxIterationsExceededException(maxIterations);\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+\n+        if (x == 0.0) {\n+            return 1.0;\n+        }\n+\n+        if (x < a + 1.0) {\n+            double b = regularizedGammaP(a, x, epsilon, maxIterations);\n+            return 1.0 - b;\n+        }\n+\n+        ContinuedFraction fraction = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                double ret;\n+                if (n % 2 == 0) {\n+                    ret = (n - 2.0) * (a + n - 2.0) * x;\n+                    ret /= (((double) n - 1) * n);\n+                    ret += a - 1.0;\n+                } else {\n+                    ret = -(a + n - 1.0);\n+                    ret += x * (n - 1.0);\n+                }\n+                return ret;\n+            }\n+\n+            @Override\n+            protected double getB(int n, double x) {\n+                return n;\n+            }\n+        };\n+\n+        double factor = Math.exp(-x + a * Math.log(x) - logGamma(a)) / a;\n+        return factor / fraction.evaluate(x, epsilon, maxIterations);\n+    }\n+\n+    public static double logGamma(double x) {\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+        return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}