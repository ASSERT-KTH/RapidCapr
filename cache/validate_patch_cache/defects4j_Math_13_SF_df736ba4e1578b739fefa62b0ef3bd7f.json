{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvalues = dec.getD();\n    final RealMatrix eigenvectors = dec.getV();\n\n    // compute the square root of each eigenvalue\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = eigenvalues.getEntry(i, i);\n        eigenvalues.setEntry(i, i, FastMath.sqrt(eigenvalue));\n    }\n\n    // reconstruct the matrix using the square roots of the eigenvalues\n    RealMatrix result = eigenvectors.multiply(eigenvalues).multiply(eigenvectors.transpose());\n    \n    // ensure result is positive semi-definite\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(result);\n    result = cholesky.getL().multiply(cholesky.getLT());\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a04ecd0ad 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvalues = dec.getD();\n+    final RealMatrix eigenvectors = dec.getV();\n+\n+    // compute the square root of each eigenvalue\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = eigenvalues.getEntry(i, i);\n+        eigenvalues.setEntry(i, i, FastMath.sqrt(eigenvalue));\n     }\n+\n+    // reconstruct the matrix using the square roots of the eigenvalues\n+    RealMatrix result = eigenvectors.multiply(eigenvalues).multiply(eigenvectors.transpose());\n+    \n+    // ensure result is positive semi-definite\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(result);\n+    result = cholesky.getL().multiply(cholesky.getLT());\n+    \n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}