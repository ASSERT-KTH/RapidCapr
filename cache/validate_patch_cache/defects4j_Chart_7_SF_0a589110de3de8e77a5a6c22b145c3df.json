{
    "patch": "private double[] findTwoSmallest(double[] vals) {\n    double[] smallest = new double[2];\n    if (vals[0] < vals[1]) {\n        smallest[0] = vals[0];\n        smallest[1] = vals[1];\n    } else {\n        smallest[0] = vals[1];\n        smallest[1] = vals[0];\n    }\n    for (int i = 2; i < vals.length; i++) {\n        if (vals[i] < smallest[0]) {\n            smallest[1] = smallest[0];\n            smallest[0] = vals[i];\n        } else if (vals[i] < smallest[1]) {\n            smallest[1] = vals[i];\n        }\n    }\n    return smallest;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..d0e00d3 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -254,85 +254,25 @@ public class TimePeriodValues extends Series implements Serializable {\n      * @param period  the time period.\n      * @param index  the index of the time period.\n      */\n-    private void updateBounds(TimePeriod period, int index) {\n-        \n-        long start = period.getStart().getTime();\n-        long end = period.getEnd().getTime();\n-        long middle = start + ((end - start) / 2);\n-\n-        if (this.minStartIndex >= 0) {\n-            long minStart = getDataItem(this.minStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start < minStart) {\n-                this.minStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minStartIndex = index;\n-        }\n-        \n-        if (this.maxStartIndex >= 0) {\n-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start > maxStart) {\n-                this.maxStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxStartIndex = index;\n-        }\n-        \n-        if (this.minMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long minMiddle = s + (e - s) / 2;\n-            if (middle < minMiddle) {\n-                this.minMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minMiddleIndex = index;\n-        }\n-        \n-        if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long maxMiddle = s + (e - s) / 2;\n-            if (middle > maxMiddle) {\n-                this.maxMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxMiddleIndex = index;\n-        }\n-        \n-        if (this.minEndIndex >= 0) {\n-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end < minEnd) {\n-                this.minEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minEndIndex = index;\n-        }\n-       \n-        if (this.maxEndIndex >= 0) {\n-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end > maxEnd) {\n-                this.maxEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxEndIndex = index;\n-        }\n-        \n-    }\n+private double[] findTwoSmallest(double[] vals) {\n+    double[] smallest = new double[2];\n+    if (vals[0] < vals[1]) {\n+        smallest[0] = vals[0];\n+        smallest[1] = vals[1];\n+    } else {\n+        smallest[0] = vals[1];\n+        smallest[1] = vals[0];\n+    }\n+    for (int i = 2; i < vals.length; i++) {\n+        if (vals[i] < smallest[0]) {\n+            smallest[1] = smallest[0];\n+            smallest[0] = vals[i];\n+        } else if (vals[i] < smallest[1]) {\n+            smallest[1] = vals[i];\n+        }\n+    }\n+    return smallest;\n+}\n     \n     /**\n      * Recalculates the bounds for the collection of items.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}