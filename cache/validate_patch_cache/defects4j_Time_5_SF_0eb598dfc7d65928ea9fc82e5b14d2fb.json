{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n\n    int days = getDays() + (getWeeks() * 7);\n    int months = getMonths();\n    int years = getYears();\n\n    if (days >= 365) {\n        years += days / 365;\n        days = days % 365;\n    }\n\n    if (days <= -365) {\n        years += (days / 365) + 1;\n        days = days % 365;\n    }\n\n    DateTimeField field;\n\n    if (days != 0) {\n        field = type.getFieldType(DurationFieldType.days());\n        millis += ((long) days) * field.getUnitMillis();\n    }\n\n    if (years != 0) {\n        field = type.getFieldType(DurationFieldType.years());\n        millis += ((long) years) * field.getUnitMillis();\n    }\n\n    if (months != 0) {\n        field = type.getFieldType(DurationFieldType.months());\n        millis += ((long) months) * field.getUnitMillis();\n    }\n\n    return new Period(millis, type, ISOChronology.getInstanceUTC()).normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..df88aaa7 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,44 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+    int days = getDays() + (getWeeks() * 7);\n+    int months = getMonths();\n+    int years = getYears();\n+\n+    if (days >= 365) {\n+        years += days / 365;\n+        days = days % 365;\n     }\n \n+    if (days <= -365) {\n+        years += (days / 365) + 1;\n+        days = days % 365;\n+    }\n+\n+    DateTimeField field;\n+\n+    if (days != 0) {\n+        field = type.getFieldType(DurationFieldType.days());\n+        millis += ((long) days) * field.getUnitMillis();\n+    }\n+\n+    if (years != 0) {\n+        field = type.getFieldType(DurationFieldType.years());\n+        millis += ((long) years) * field.getUnitMillis();\n+    }\n+\n+    if (months != 0) {\n+        field = type.getFieldType(DurationFieldType.months());\n+        millis += ((long) months) * field.getUnitMillis();\n+    }\n+\n+    return new Period(millis, type, ISOChronology.getInstanceUTC()).normalizedStandard();\n+}\n+\n }",
    "result_reason": "error: method getFieldType in class PeriodType cannot be applied to given types;",
    "test_result": "ERROR"
}