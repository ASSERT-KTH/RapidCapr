{
    "patch": "        final Class<?> type2 = array2.getClass().getComponentType();\n        if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n            int size1 = array1.length;\n            int size2 = array2.length;\n            @SuppressWarnings(\"unchecked\")\n            T[] newArray = (T[]) Array.newInstance(type1, size1 + size2);\n            for (int i = 0; i < size1; i++) {\n                newArray[i] = array1[i];\n            }\n            for (int i = 0; i < size2; i++) {\n                newArray[size1 + i] = array2[i];\n            }\n            return newArray;\n        } else {\n            T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n            return joinedArray;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..47281063 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,24 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n-        }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        final Class<?> type2 = array2.getClass().getComponentType();\n+        if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+            int size1 = array1.length;\n+            int size2 = array2.length;\n+            @SuppressWarnings(\"unchecked\")\n+            T[] newArray = (T[]) Array.newInstance(type1, size1 + size2);\n+            for (int i = 0; i < size1; i++) {\n+                newArray[i] = array1[i];\n+            }\n+            for (int i = 0; i < size2; i++) {\n+                newArray[size1 + i] = array2[i];\n+            }\n+            return newArray;\n+        } else {\n+            T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n-    }\n+            return joinedArray;\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}