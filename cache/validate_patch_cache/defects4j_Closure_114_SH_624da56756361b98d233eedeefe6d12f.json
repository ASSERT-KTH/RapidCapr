{
    "patch": "if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n  // Fix for assignments that appear in the init,\n  // condition or iteration part of a FOR loop.\n  // Without this change, all 3 of those parts try to claim the for\n  // loop as their dependency scope. The last assignment in\n  // those three fields wins, which can result in incorrect\n  // reference edges between referenced and assigned variables.\n  //\n  // TODO(user): revisit the dependency scope calculation logic.\n  if (parent.getFirstChild().getNext() != n) {\n    recordDepScope(recordNode, ns);\n  } else {\n    Node rhs = n.getLastChild();\n    if (!rhs.isCall()) {\n      recordDepScope(rhs, ns);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..afa42ece 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,24 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+  // Fix for assignments that appear in the init,\n+  // condition or iteration part of a FOR loop.\n+  // Without this change, all 3 of those parts try to claim the for\n+  // loop as their dependency scope. The last assignment in\n+  // those three fields wins, which can result in incorrect\n+  // reference edges between referenced and assigned variables.\n+  //\n+  // TODO(user): revisit the dependency scope calculation logic.\n+  if (parent.getFirstChild().getNext() != n) {\n+    recordDepScope(recordNode, ns);\n+  } else {\n+    Node rhs = n.getLastChild();\n+    if (!rhs.isCall()) {\n+      recordDepScope(rhs, ns);\n+    }\n+  }\n+}\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}