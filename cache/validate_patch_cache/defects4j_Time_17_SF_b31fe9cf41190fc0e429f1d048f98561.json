{
    "patch": "```\npublic long adjustOffset(long instant, boolean earlierOrLater) {\n    // Evaluate 2 hours before and after to work out if anything is happening\n    long instantBefore = instant - 2 * DateTimeConstants.MILLIS_PER_HOUR;\n    long instantAfter = instant + 2 * DateTimeConstants.MILLIS_PER_HOUR;\n\n    // Convert instants to their local equivalents\n    long localBefore = convertUTCToLocal(instantBefore);\n    long localCurrent = convertUTCToLocal(instant);\n    long localAfter = convertUTCToLocal(instantAfter);\n\n    // Check if the current instant is in an overlap period\n    boolean isInOverlap = (localCurrent == localBefore || localCurrent == localAfter);\n\n    if (isInOverlap) {\n        // If in overlap, prefer the later offset if earlierOrLater is true\n        if (earlierOrLater) {\n            return convertLocalToUTC(localAfter, false, instantAfter);\n        } else {\n            // Otherwise, prefer the earlier offset\n            return convertLocalToUTC(localBefore, false, instantBefore);\n        }\n    } else {\n        // Not in overlap, either further into DST or out of DST\n        if (localCurrent == localBefore) {\n            // We're moving out of DST, so use instantBefore\n            return convertLocalToUTC(localCurrent, false, instantBefore);\n        } else {\n            // We're moving into DST, so use instantAfter\n            return convertLocalToUTC(localCurrent, false, instantAfter);\n        }\n    }\n}\n```\nThis fix first evaluates the local instants 2 hours before and after the given instant, and checks if the current instant is in an overlap period. If so, it returns the preferred offset based on the value of `earlierOrLater`. If not, it determines whether the instant is moving further into or out of DST and selects the appropriate offset accordingly.",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..e0078f07 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,41 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+```\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // Evaluate 2 hours before and after to work out if anything is happening\n+    long instantBefore = instant - 2 * DateTimeConstants.MILLIS_PER_HOUR;\n+    long instantAfter = instant + 2 * DateTimeConstants.MILLIS_PER_HOUR;\n+\n+    // Convert instants to their local equivalents\n+    long localBefore = convertUTCToLocal(instantBefore);\n+    long localCurrent = convertUTCToLocal(instant);\n+    long localAfter = convertUTCToLocal(instantAfter);\n+\n+    // Check if the current instant is in an overlap period\n+    boolean isInOverlap = (localCurrent == localBefore || localCurrent == localAfter);\n+\n+    if (isInOverlap) {\n+        // If in overlap, prefer the later offset if earlierOrLater is true\n+        if (earlierOrLater) {\n+            return convertLocalToUTC(localAfter, false, instantAfter);\n+        } else {\n+            // Otherwise, prefer the earlier offset\n+            return convertLocalToUTC(localBefore, false, instantBefore);\n+        }\n+    } else {\n+        // Not in overlap, either further into DST or out of DST\n+        if (localCurrent == localBefore) {\n+            // We're moving out of DST, so use instantBefore\n+            return convertLocalToUTC(localCurrent, false, instantBefore);\n+        } else {\n+            // We're moving into DST, so use instantAfter\n+            return convertLocalToUTC(localCurrent, false, instantAfter);\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n+}\n+```\n+This fix first evaluates the local instants 2 hours before and after the given instant, and checks if the current instant is in an overlap period. If so, it returns the preferred offset based on the value of `earlierOrLater`. If not, it determines whether the instant is moving further into or out of DST and selects the appropriate offset accordingly.\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}