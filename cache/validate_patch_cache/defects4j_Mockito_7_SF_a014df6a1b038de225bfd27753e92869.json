{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    // If the type variable has no bounds, register its actual type argument (if any) and return\n    if (typeVariable.getBounds().length == 0) {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n        return;\n    }\n\n    // Otherwise, iterate over the bounds and register the type variables on their bounds\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            readTypeVariables((TypeVariable<?>) bound);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n\n    // Finally, register the actual type argument (if any)\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..366c8a691 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,36 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    // If the type variable has no bounds, register its actual type argument (if any) and return\n+    if (typeVariable.getBounds().length == 0) {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+        return;\n+    }\n+\n+    // Otherwise, iterate over the bounds and register the type variables on their bounds\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            readTypeVariables((TypeVariable<?>) bound);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+\n+    // Finally, register the actual type argument (if any)\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}