{
    "patch": "    if (n.getType() != Token.FUNCTION) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent.getType() != Token.EXPR_RESULT && \n        parent.getType() != Token.ASSIGN &&\n        !NodeUtil.isNameDeclaration(parent) &&\n        (parent.getType() != Token.BLOCK || \n         parent.getParent().getType() != Token.FUNCTION)) {\n      return false;\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..022c164f 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,18 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (n.getType() != Token.FUNCTION) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    if (parent.getType() != Token.EXPR_RESULT && \n+        parent.getType() != Token.ASSIGN &&\n+        !NodeUtil.isNameDeclaration(parent) &&\n+        (parent.getType() != Token.BLOCK || \n+         parent.getParent().getType() != Token.FUNCTION)) {\n+      return false;\n+    }\n+    return true;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}