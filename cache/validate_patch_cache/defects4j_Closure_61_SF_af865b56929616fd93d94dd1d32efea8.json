{
    "patch": " static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n    // Check if the input node is a valid function call node.\n    if (callNode == null || callNode.getType() != Token.CALL) {\n        return false;\n    }\n\n    // Check if the function call node has no side effects.\n    if (callNode.isNoSideEffectsCall()) {\n        return false;\n    }\n\n    // Extract the name node of the function call.\n    Node nameNode = callNode.getFirstChild();\n    if (nameNode == null) {\n        return false;\n    }\n\n    if (nameNode.getType() == Token.NAME) {\n      // Check if the function call is a built-in function with no side effects.\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n          return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP && nameNode.getLastChild().getType() == Token.STRING) {\n      // Check if the function call is a property access of an object with methods without side effects.\n      String propertyName = nameNode.getLastChild().getString();\n      if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propertyName)) {\n          return false;\n      }\n      if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {\n          return false;\n      }\n      if (nameNode.getFirstChild().getType() == Token.NAME && \"Math\".equals(nameNode.getFirstChild().getString())) {\n          return false;\n      }\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n          if (nameNode.getFirstChild().getType() == Token.REGEXP\n                  && REGEXP_METHODS.contains(propertyName)) {\n              return false;\n          } else if (nameNode.getFirstChild().getType() == Token.STRING\n                  && STRING_REGEXP_METHODS.contains(propertyName)) {\n              Node param = nameNode.getNext();\n              if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n                  return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..d71ed07c 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,57 +923,50 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n-      Node callNode, @Nullable AbstractCompiler compiler) {\n-    if (callNode.getType() != Token.CALL) {\n-      throw new IllegalStateException(\n-          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+ static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n+    // Check if the input node is a valid function call node.\n+    if (callNode == null || callNode.getType() != Token.CALL) {\n+        return false;\n     }\n \n+    // Check if the function call node has no side effects.\n     if (callNode.isNoSideEffectsCall()) {\n-      return false;\n+        return false;\n     }\n \n+    // Extract the name node of the function call.\n     Node nameNode = callNode.getFirstChild();\n+    if (nameNode == null) {\n+        return false;\n+    }\n \n-    // Built-in functions with no side effects.\n     if (nameNode.getType() == Token.NAME) {\n+      // Check if the function call is a built-in function with no side effects.\n       String name = nameNode.getString();\n       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n-        return false;\n-      }\n-    } else if (nameNode.getType() == Token.GETPROP) {\n-      if (callNode.hasOneChild()\n-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n-                nameNode.getLastChild().getString())) {\n-        return false;\n+          return false;\n       }\n-\n-      if (callNode.isOnlyModifiesThisCall()\n-          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n-        return false;\n+    } else if (nameNode.getType() == Token.GETPROP && nameNode.getLastChild().getType() == Token.STRING) {\n+      // Check if the function call is a property access of an object with methods without side effects.\n+      String propertyName = nameNode.getLastChild().getString();\n+      if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propertyName)) {\n+          return false;\n       }\n-\n-      // Functions in the \"Math\" namespace have no side effects.\n-\n-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n-        if (nameNode.getFirstChild().getType() == Token.REGEXP\n-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+      if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {\n           return false;\n-        } else if (nameNode.getFirstChild().getType() == Token.STRING\n-            && STRING_REGEXP_METHODS.contains(\n-                nameNode.getLastChild().getString())) {\n-          Node param = nameNode.getNext();\n-          if (param != null &&\n-              (param.getType() == Token.STRING\n-                  || param.getType() == Token.REGEXP))\n+      }\n+      if (nameNode.getFirstChild().getType() == Token.NAME && \"Math\".equals(nameNode.getFirstChild().getString())) {\n           return false;\n-        }\n       }\n-    }\n-\n-    return true;\n-  }\n+      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+          if (nameNode.getFirstChild().getType() == Token.REGEXP\n+                  && REGEXP_METHODS.contains(propertyName)) {\n+              return false;\n+          } else if (nameNode.getFirstChild().getType() == Token.STRING\n+                  && STRING_REGEXP_METHODS.contains(propertyName)) {\n+              Node param = nameNode.getNext();\n+              if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n+                  return false;\n \n   /**\n    * @return Whether the call has a local result.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}