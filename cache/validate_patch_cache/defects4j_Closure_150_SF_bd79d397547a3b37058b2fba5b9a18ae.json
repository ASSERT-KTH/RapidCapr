{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) {\n            return;\n        }\n\n        attachLiteralTypes(n);\n\n        if (n.isFunction()) {\n            if (parent.isName()) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n        } else if (n.isCatch()) {\n            defineCatch(n, parent);\n        } else if (n.isVar()) {\n            defineVar(n, parent);\n        } else if (n.isParamList() && parent.isExprResult() &&\n                parent.getFirstChild().isGetProp() &&\n                \"stub\".equals(parent.getFirstChild().getLastChild().getString())) {\n            handleFunctionInputs(n.getNext());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a44e10f7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,28 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) {\n+            return;\n+        }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        attachLiteralTypes(n);\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+        if (n.isFunction()) {\n+            if (parent.isName()) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+        } else if (n.isCatch()) {\n+            defineCatch(n, parent);\n+        } else if (n.isVar()) {\n+            defineVar(n, parent);\n+        } else if (n.isParamList() && parent.isExprResult() &&\n+                parent.getFirstChild().isGetProp() &&\n+                \"stub\".equals(parent.getFirstChild().getLastChild().getString())) {\n+            handleFunctionInputs(n.getNext());\n+        }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}