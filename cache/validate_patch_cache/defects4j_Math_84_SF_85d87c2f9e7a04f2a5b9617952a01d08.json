{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected simplex\n                simplex = (reflected.getPoint() == best.getPoint()) ?\n                        reflectedSimplex :\n                        evaluateNewSimplex(original, rho, comparator);\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = (contracted.getPoint() == best.getPoint()) ?\n                        evaluateNewSimplex(original, sigmaC, comparator) :\n                        evaluateNewSimplex(original, sigmaS, comparator);\n            } else {\n                // perform a shrink\n                final RealPointValuePair[] shrinkedSimplex = evaluateNewSimplex(original, rhoS, comparator);\n                if (comparator.compare(shrinkedSimplex[0], best) >= 0) {\n                    // accept the shrinked simplex\n                    simplex = shrinkedSimplex;\n                } else {\n                    // do another iteration\n                    simplex = original;\n                }\n            }\n        }\n\n        // check convergence\n        final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n        final double centroidSpread = computeCentroidSpread();\n        final boolean minimumSpread = range < convergenceChecker.getRelativeThreshold() *\n                                            (Math.abs(simplex[simplex.length - 1].getValue()) +\n                                             Math.abs(simplex[0].getValue())) * 0.5 &&\n                                        centroidSpread < convergenceChecker.getAbsoluteThreshold();\n\n        if (minimumSpread) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b8e88e00c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,69 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected simplex\n+                simplex = (reflected.getPoint() == best.getPoint()) ?\n+                        reflectedSimplex :\n+                        evaluateNewSimplex(original, rho, comparator);\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = (contracted.getPoint() == best.getPoint()) ?\n+                        evaluateNewSimplex(original, sigmaC, comparator) :\n+                        evaluateNewSimplex(original, sigmaS, comparator);\n+            } else {\n+                // perform a shrink\n+                final RealPointValuePair[] shrinkedSimplex = evaluateNewSimplex(original, rhoS, comparator);\n+                if (comparator.compare(shrinkedSimplex[0], best) >= 0) {\n+                    // accept the shrinked simplex\n+                    simplex = shrinkedSimplex;\n+                } else {\n+                    // do another iteration\n+                    simplex = original;\n+                }\n             }\n-\n         }\n \n+        // check convergence\n+        final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n+        final double centroidSpread = computeCentroidSpread();\n+        final boolean minimumSpread = range < convergenceChecker.getRelativeThreshold() *\n+                                            (Math.abs(simplex[simplex.length - 1].getValue()) +\n+                                             Math.abs(simplex[0].getValue())) * 0.5 &&\n+                                        centroidSpread < convergenceChecker.getAbsoluteThreshold();\n+\n+        if (minimumSpread) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}