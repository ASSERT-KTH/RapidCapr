{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n  \n  Node functionNode = fnNode.getLastChild();\n  Node fnBlock = NodeUtil.getFunctionBody(functionNode);\n  \n  // Check that the function has a single statement which is a return statement.\n  if (fnBlock.getChildCount() != 1 || !fnBlock.getFirstChild().isReturn()) {\n    return CanInlineResult.NO;\n  }\n\n  Node returnValue = fnBlock.getFirstChild().getFirstChild();\n  \n  // Check that the return value is a simple immutable value.\n  if (!NodeUtil.isImmutableValue(returnValue)) {\n    return CanInlineResult.NO;\n  }\n\n  Node argsNode = callNode.getLastChild();\n  \n  // Check that all argument expressions are simple immutable values.\n  for (Node arg = argsNode.getFirstChild(); arg != null; arg = arg.getNext()) {\n    if (!NodeUtil.isImmutableValue(arg)) {\n      return CanInlineResult.NO;\n    }\n  }\n  \n  // Check that the function has no parameters.\n  if (NodeUtil.getFunctionParameters(fnNode).hasChildren()) {\n    return CanInlineResult.NO;\n  }\n  \n  // Check that the function body does not contain any assignments or method calls.\n  NodeTraversal traversal = new NodeTraversal(compiler, new NodeTraversal.Callback() {\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      switch (n.getToken()) {\n        case GETPROP:\n        case SETPROP:\n        case CALL:\n        case NEW:\n        case INC:\n        case DEC:\n        case ASSIGN:\n        case NAME:\n        case GETELEM:\n        case DESTRUCTURING_LHS:\n          // Expressions that has side effects\n          return false;\n        default:\n          return true;\n      }\n    }\n    \n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Do nothing\n    }\n  });\n  \n  traversal.traverse(fnBlock);\n  \n  return traversal.getCompiler().getErrorCount() > 0 ? CanInlineResult.NO : CanInlineResult.YES;\n}\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..397c9bb1 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,71 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+  \n+  Node functionNode = fnNode.getLastChild();\n+  Node fnBlock = NodeUtil.getFunctionBody(functionNode);\n+  \n+  // Check that the function has a single statement which is a return statement.\n+  if (fnBlock.getChildCount() != 1 || !fnBlock.getFirstChild().isReturn()) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  Node returnValue = fnBlock.getFirstChild().getFirstChild();\n+  \n+  // Check that the return value is a simple immutable value.\n+  if (!NodeUtil.isImmutableValue(returnValue)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  Node argsNode = callNode.getLastChild();\n+  \n+  // Check that all argument expressions are simple immutable values.\n+  for (Node arg = argsNode.getFirstChild(); arg != null; arg = arg.getNext()) {\n+    if (!NodeUtil.isImmutableValue(arg)) {\n+      return CanInlineResult.NO;\n     }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+  }\n+  \n+  // Check that the function has no parameters.\n+  if (NodeUtil.getFunctionParameters(fnNode).hasChildren()) {\n+    return CanInlineResult.NO;\n+  }\n+  \n+  // Check that the function body does not contain any assignments or method calls.\n+  NodeTraversal traversal = new NodeTraversal(compiler, new NodeTraversal.Callback() {\n+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+      switch (n.getToken()) {\n+        case GETPROP:\n+        case SETPROP:\n+        case CALL:\n+        case NEW:\n+        case INC:\n+        case DEC:\n+        case ASSIGN:\n+        case NAME:\n+        case GETELEM:\n+        case DESTRUCTURING_LHS:\n+          // Expressions that has side effects\n+          return false;\n+        default:\n+          return true;\n       }\n     }\n+    \n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      // Do nothing\n+    }\n+  });\n+  \n+  traversal.traverse(fnBlock);\n+  \n+  return traversal.getCompiler().getErrorCount() > 0 ? CanInlineResult.NO : CanInlineResult.YES;\n+}\n \n-    return CanInlineResult.YES;\n-  }\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}