{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (!NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n          }\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f5616335 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,10 +1451,9 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (!NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1462,7 +1461,11 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        default:\n+          if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}