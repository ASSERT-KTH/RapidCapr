{
    "patch": "import org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.internal.creation.MockSettingsImpl;\nimport org.mockito.internal.handler.MockHandler;\nimport org.mockito.internal.handler.MockHandlerInterface;\nimport org.mockito.internal.handler.MethodInterceptorFilter;\n\npublic class YourClassName {\n\n    public static <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        for (int i = 0; i < ((Factory) mock).getCallbackCount(); i++) {\n            if (((Factory) mock).getCallback(i) instanceof MethodInterceptorFilter) {\n                ((Factory) mock).setCallback(i, null);\n            }\n        }\n        ((Factory) mock).setCallbackType(MethodInterceptor.class);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n                (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(RETURNS_DEFAULTS));\n        ((Factory) mock).setCallback(0, newFilter);\n    }\n\n    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        return (MockHandlerInterface<T>) org.mockito.internal.util.MockUtil.getMockHandler(mock);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c0cf8531b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,34 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.handler.MockHandler;\n+import org.mockito.internal.handler.MockHandlerInterface;\n+import org.mockito.internal.handler.MethodInterceptorFilter;\n+\n+public class YourClassName {\n+\n+    public static <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        for (int i = 0; i < ((Factory) mock).getCallbackCount(); i++) {\n+            if (((Factory) mock).getCallback(i) instanceof MethodInterceptorFilter) {\n+                ((Factory) mock).setCallback(i, null);\n+            }\n+        }\n+        ((Factory) mock).setCallbackType(MethodInterceptor.class);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+                (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallback(0, newFilter);\n+    }\n+\n+    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        return (MockHandlerInterface<T>) org.mockito.internal.util.MockUtil.getMockHandler(mock);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}