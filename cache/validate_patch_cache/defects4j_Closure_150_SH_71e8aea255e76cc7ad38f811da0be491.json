{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  if (n.isFunction()) {\n    if (parent.isDelProp()) {\n      // Do not rename functions that are to be deleted.\n      return;\n    }\n    String oldName = n.getFirstChild().getString();\n    String newName = maybeRenameReference(oldName);\n    n.getFirstChild().setString(newName);\n    newToOriginalNameMap.put(newName, oldName);\n  } else if (n.isCall() && NodeUtil.isShortCircuitApply(n)) {\n    determineApplyFnName(n);\n  } else if (n.isGetProp()) {\n    String propName = n.getLastChild().getString();\n    if (isPrototypeProperty(n)) {\n      // Prototype properties are not renamed.\n      return;\n    }\n    if (!NodeUtil.isAssignmentOp(parent)) {\n      String newName = maybeRenameReference(propName);\n      if (!propName.equals(newName)) {\n        Node newNameNode = n.getLastChild().cloneNode();\n        newNameNode.setString(newName);\n        n.replaceChild(n.getLastChild(), newNameNode);\n      }\n    }\n  } else if (n.isName()) {\n    String oldName = n.getString();\n    String newName = maybeRenameReference(oldName);\n    if (!oldName.equals(newName)) {\n      n.setString(newName);\n      newToOriginalNameMap.put(newName, oldName);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2c338f2d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,47 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n+\n+  if (n.isFunction()) {\n+    if (parent.isDelProp()) {\n+      // Do not rename functions that are to be deleted.\n+      return;\n+    }\n+    String oldName = n.getFirstChild().getString();\n+    String newName = maybeRenameReference(oldName);\n+    n.getFirstChild().setString(newName);\n+    newToOriginalNameMap.put(newName, oldName);\n+  } else if (n.isCall() && NodeUtil.isShortCircuitApply(n)) {\n+    determineApplyFnName(n);\n+  } else if (n.isGetProp()) {\n+    String propName = n.getLastChild().getString();\n+    if (isPrototypeProperty(n)) {\n+      // Prototype properties are not renamed.\n+      return;\n+    }\n+    if (!NodeUtil.isAssignmentOp(parent)) {\n+      String newName = maybeRenameReference(propName);\n+      if (!propName.equals(newName)) {\n+        Node newNameNode = n.getLastChild().cloneNode();\n+        newNameNode.setString(newName);\n+        n.replaceChild(n.getLastChild(), newNameNode);\n       }\n     }\n+  } else if (n.isName()) {\n+    String oldName = n.getString();\n+    String newName = maybeRenameReference(oldName);\n+    if (!oldName.equals(newName)) {\n+      n.setString(newName);\n+      newToOriginalNameMap.put(newName, oldName);\n+    }\n+  }\n+}\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}