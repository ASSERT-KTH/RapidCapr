{
    "patch": "          // Adjust step size if next step is past endpoint\n          if (nextIsLast) {\n              hNew = t - stepStart;\n          } else {\n              hNew = scaledH;\n          }\n\n          // Adjust step size if it is too large\n          if (hNew > t - stepStart) {\n              hNew = t - stepStart;\n          }\n\n          // Filter step size\n          hNew = filterStep(hNew, forward, nextIsLast);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..992c88360 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,20 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+          // Adjust step size if next step is past endpoint\n+          if (nextIsLast) {\n+              hNew = t - stepStart;\n+          } else {\n+              hNew = scaledH;\n+          }\n+\n+          // Adjust step size if it is too large\n+          if (hNew > t - stepStart) {\n+              hNew = t - stepStart;\n+          }\n+\n+          // Filter step size\n+          hNew = filterStep(hNew, forward, nextIsLast);\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}