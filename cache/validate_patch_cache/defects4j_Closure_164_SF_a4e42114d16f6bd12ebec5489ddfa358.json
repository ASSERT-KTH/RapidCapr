{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Special case: If the function is a method, and the superclass defines\n    // a more precise type for its toString property, then we need to override\n    // toString() in the subclass to get subtyping.\n    boolean thisIsMethod = NodeUtil.isMethodDeclaration(this.getNode());\n    boolean thatIsMethod = NodeUtil.isMethodDeclaration(that.getNode());\n    if (thisIsMethod && !thatIsMethod) {\n      FunctionType superClassCtor =\n          ObjectType.cast(this.commonTypes().getSuperClass(this)).getConstructor();\n      if (superClassCtor != null) {\n        // If the superclass's toString method has a more specific type than\n        // the Object toString method, then we need to override it.\n        JSType toStringType = superClassCtor.getPrototype().getPropertyType(\"toString\");\n        JSType objectType = this.commonTypes().getObjectType();\n        if (toStringType != null &&\n            toStringType.isSubtype(objectType.getPropertyType(\"toString\"))) {\n          return false;\n        }\n      }\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    // In our type system, we use {function(...?)} and\n    // {function(...NoType)} to to indicate that arity should not be\n    // checked. Strictly speaking, this is not a correct formulation,\n    // because now a sub-function can required arguments that are var_args\n    // in the super-function. So we special-case this.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // If any parameters are missing, don't compare them\n      if (thisParamType != null && thatParamType != null) {\n        if (!thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If this is a required argument, the corresponding argument in `that`\n        // must also be required\n        if (!thisIsVarArgs && !thatIsVarArgs) {\n          thisParam = thisParam.getNext();\n          thatParam = thatParam.getNext();\n        } else if (thisIsVarArgs && thatIsVarArgs) {\n          // Both are var_args, so we can go straight to the end without\n          // comparing the remaining arguments.\n          break;\n        } else {\n          // If only one of them is var_args, then the other one is required, so\n          // don't advance that one.\n          if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n          }\n          if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n          }\n        }\n      } else if (thisParamType == null) {\n        // This is a missing parameter in `this`. If `thatParam` is a required\n        // parameter, then it can't be a subtype.\n        if (!thatParam.isVarArgs()) {\n          return false;\n        }\n        thatParam = thatParam.getNext();\n      } else { // thatParamType == null\n        // This is a missing parameter in `that`. If `thisParam` is required, then\n        // it can't be a subtype.\n        if (!thisParam.isVarArgs()) {\n          return false;\n        }\n        thisParam = thisParam.getNext();\n      }\n    }\n\n    // \"that\" can't be a supertype, because it's missing a required arguement.\n    if (thisParam != null || thatParam != null) {\n      return false;\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..be324672 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,7 +77,7 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n       return false;\n     }\n@@ -92,63 +92,90 @@ final class ArrowType extends JSType {\n       return false;\n     }\n \n+    // Special case: If the function is a method, and the superclass defines\n+    // a more precise type for its toString property, then we need to override\n+    // toString() in the subclass to get subtyping.\n+    boolean thisIsMethod = NodeUtil.isMethodDeclaration(this.getNode());\n+    boolean thatIsMethod = NodeUtil.isMethodDeclaration(that.getNode());\n+    if (thisIsMethod && !thatIsMethod) {\n+      FunctionType superClassCtor =\n+          ObjectType.cast(this.commonTypes().getSuperClass(this)).getConstructor();\n+      if (superClassCtor != null) {\n+        // If the superclass's toString method has a more specific type than\n+        // the Object toString method, then we need to override it.\n+        JSType toStringType = superClassCtor.getPrototype().getPropertyType(\"toString\");\n+        JSType objectType = this.commonTypes().getObjectType();\n+        if (toStringType != null &&\n+            toStringType.isSubtype(objectType.getPropertyType(\"toString\"))) {\n+          return false;\n+        }\n+      }\n+    }\n+\n     // that.paramType[i] <: this.paramType[i] (contravariant)\n     //\n     // If this.paramType[i] is required,\n     // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+    // In our type system, we use {function(...?)} and\n+    // {function(...NoType)} to to indicate that arity should not be\n+    // checked. Strictly speaking, this is not a correct formulation,\n+    // because now a sub-function can required arguments that are var_args\n+    // in the super-function. So we special-case this.\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+\n+      // If any parameters are missing, don't compare them\n+      if (thisParamType != null && thatParamType != null) {\n+        if (!thatParamType.isSubtype(thisParamType)) {\n           return false;\n         }\n-      }\n-\n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        boolean thisIsVarArgs = thisParam.isVarArgs();\n+        boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n+        // If this is a required argument, the corresponding argument in `that`\n+        // must also be required\n+        if (!thisIsVarArgs && !thatIsVarArgs) {\n+          thisParam = thisParam.getNext();\n+          thatParam = thatParam.getNext();\n+        } else if (thisIsVarArgs && thatIsVarArgs) {\n+          // Both are var_args, so we can go straight to the end without\n+          // comparing the remaining arguments.\n+          break;\n+        } else {\n+          // If only one of them is var_args, then the other one is required, so\n+          // don't advance that one.\n+          if (!thisIsVarArgs) {\n+            thisParam = thisParam.getNext();\n+          }\n+          if (!thatIsVarArgs) {\n+            thatParam = thatParam.getNext();\n+          }\n+        }\n+      } else if (thisParamType == null) {\n+        // This is a missing parameter in `this`. If `thatParam` is a required\n+        // parameter, then it can't be a subtype.\n+        if (!thatParam.isVarArgs()) {\n+          return false;\n+        }\n         thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      } else { // thatParamType == null\n+        // This is a missing parameter in `that`. If `thisParam` is required, then\n+        // it can't be a subtype.\n+        if (!thisParam.isVarArgs()) {\n+          return false;\n+        }\n+        thisParam = thisParam.getNext();\n       }\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n+    if (thisParam != null || thatParam != null) {\n+      return false;\n+    }\n \n     return true;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}