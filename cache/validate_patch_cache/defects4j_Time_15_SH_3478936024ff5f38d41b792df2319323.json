{
    "patch": "```\nif (val2 == 0) {\n    return 0L;\n} else if (val2 == 1) {\n    return val1;\n} else if (val2 == -1) {\n    if (val1 == Long.MIN_VALUE) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return -val1;\n} else {\n    try {\n        return Math.multiplyExact(val1, val2);\n    } catch (ArithmeticException e) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n}\n```\nThis hunk first checks for the zero, one and minus one cases separately, and then falls back to using Math.multiplyExact() for all other cases, throwing an exception if the multiplication overflows. This approach handles all cases correctly and concisely.",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..189a05be 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,25 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+```\n+if (val2 == 0) {\n+    return 0L;\n+} else if (val2 == 1) {\n+    return val1;\n+} else if (val2 == -1) {\n+    if (val1 == Long.MIN_VALUE) {\n+        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+    }\n+    return -val1;\n+} else {\n+    try {\n+        return Math.multiplyExact(val1, val2);\n+    } catch (ArithmeticException e) {\n+        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+    }\n+}\n+```\n+This hunk first checks for the zero, one and minus one cases separately, and then falls back to using Math.multiplyExact() for all other cases, throwing an exception if the multiplication overflows. This approach handles all cases correctly and concisely.\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}