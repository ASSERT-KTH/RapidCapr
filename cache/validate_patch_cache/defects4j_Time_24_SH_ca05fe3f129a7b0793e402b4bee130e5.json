{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is month or day\n    DateTimeField first = savedFields[0].iField;\n    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    } else {\n        int year = iDefaultYear;\n        for (int i = count - 1; i >= 0; i--) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if (type == DateTimeFieldType.year()) {\n                year = savedFields[i].iValue;\n                break;\n            }\n        }\n        try {\n            millis = iChrono.year().set(millis, year);\n        } catch (IllegalFieldValueException e2) {\n            // If we can't set the year, it's probably invalid, so we should return the original exception\n            throw e;\n        }\n        // parse remaining fields\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if (type != DateTimeFieldType.year()) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e2) {\n                    // If we can't set a field, it's probably invalid, so we should return the original exception\n                    throw e;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8c2ccd9d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is month or day\n+    DateTimeField first = savedFields[0].iField;\n+    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    } else {\n+        int year = iDefaultYear;\n+        for (int i = count - 1; i >= 0; i--) {\n+            DateTimeFieldType type = savedFields[i].iField.getType();\n+            if (type == DateTimeFieldType.year()) {\n+                year = savedFields[i].iValue;\n+                break;\n+            }\n+        }\n+        try {\n+            millis = iChrono.year().set(millis, year);\n+        } catch (IllegalFieldValueException e2) {\n+            // If we can't set the year, it's probably invalid, so we should return the original exception\n+            throw e;\n+        }\n+        // parse remaining fields\n+        for (int i = 0; i < count; i++) {\n+            DateTimeFieldType type = savedFields[i].iField.getType();\n+            if (type != DateTimeFieldType.year()) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e2) {\n+                    // If we can't set a field, it's probably invalid, so we should return the original exception\n+                    throw e;\n+                }\n+            }\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}