{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) return null;\n    if (result.isEmpty()) return \"\";\n    if (stream.hasPositionInformation()) {\n        checkState(sourcePositions != null);\n        int start = stream.getPosition();\n        int end = start + result.length();\n        sourcePositions.add(new Pair<>(start, end));\n    }\n    stream.advance(result.length());\n    return result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..384bd8d4 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,19 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null) return null;\n+    if (result.isEmpty()) return \"\";\n+    if (stream.hasPositionInformation()) {\n+        checkState(sourcePositions != null);\n+        int start = stream.getPosition();\n+        int end = start + result.length();\n+        sourcePositions.add(new Pair<>(start, end));\n+    }\n+    stream.advance(result.length());\n+    return result.trim();\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}