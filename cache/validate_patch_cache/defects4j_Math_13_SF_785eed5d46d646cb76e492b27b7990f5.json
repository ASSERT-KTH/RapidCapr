{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    boolean isPositiveSemiDefinite = true;\n    for (double eigenvalue : realEigenvalues) {\n        if (eigenvalue < 0.0) {\n            isPositiveSemiDefinite = false;\n            break;\n        }\n    }\n    if (!isPositiveSemiDefinite) {\n        m = m.scalarAdd(Double.MIN_VALUE); // Add a small amount to make the matrix positive semi-definite\n        return squareRoot(m);\n    }\n    final RealMatrix squareRoot = dec.getSquareRoot();\n    if (Double.isNaN(squareRoot.getEntry(0, 0))) {\n        throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n    }\n    return squareRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..63fc770bf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    boolean isPositiveSemiDefinite = true;\n+    for (double eigenvalue : realEigenvalues) {\n+        if (eigenvalue < 0.0) {\n+            isPositiveSemiDefinite = false;\n+            break;\n+        }\n+    }\n+    if (!isPositiveSemiDefinite) {\n+        m = m.scalarAdd(Double.MIN_VALUE); // Add a small amount to make the matrix positive semi-definite\n+        return squareRoot(m);\n     }\n+    final RealMatrix squareRoot = dec.getSquareRoot();\n+    if (Double.isNaN(squareRoot.getEntry(0, 0))) {\n+        throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+    }\n+    return squareRoot;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}