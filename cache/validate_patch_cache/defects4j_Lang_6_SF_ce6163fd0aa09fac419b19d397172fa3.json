{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed;\n        // Handle surrogates\n        if (Character.isHighSurrogate(input.charAt(pos))) {\n            if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                consumed = translate(input, pos, out);\n                pos += 2;\n            } else {\n                out.write(input.charAt(pos));\n                consumed = 1;\n                pos++;\n            }\n        } else {\n            consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char c = input.charAt(pos);\n                out.write(translateEscapedChar(c));\n                consumed = 1;\n            } else {\n                pos += consumed;\n            }\n        }\n    }\n}\n\nprivate char translateEscapedChar(char c) {\n    switch (c) {\n        case '\\n':\n            return 'n';\n        case '\\r':\n            return 'r';\n        case '\\t':\n            return 't';\n        case '\\b':\n            return 'b';\n        case '\\f':\n            return 'f';\n        case '\\\"':\n            return '\\\"';\n        case '\\'':\n            return '\\'';\n        case '\\\\':\n            return '\\\\';\n        default:\n            if (Character.isSupplementaryCodePoint(c)) {\n                return 'u' + String.format(\"%04X\", (int) c);\n            } else {\n                return c;\n            }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..da838400 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,66 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed;\n+        // Handle surrogates\n+        if (Character.isHighSurrogate(input.charAt(pos))) {\n+            if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                consumed = translate(input, pos, out);\n+                pos += 2;\n+            } else {\n+                out.write(input.charAt(pos));\n+                consumed = 1;\n+                pos++;\n             }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+        } else {\n+            consumed = translate(input, pos, out);\n+            if (consumed == 0) {\n+                char c = input.charAt(pos);\n+                out.write(translateEscapedChar(c));\n+                consumed = 1;\n+            } else {\n+                pos += consumed;\n             }\n         }\n     }\n+}\n+\n+private char translateEscapedChar(char c) {\n+    switch (c) {\n+        case '\\n':\n+            return 'n';\n+        case '\\r':\n+            return 'r';\n+        case '\\t':\n+            return 't';\n+        case '\\b':\n+            return 'b';\n+        case '\\f':\n+            return 'f';\n+        case '\\\"':\n+            return '\\\"';\n+        case '\\'':\n+            return '\\'';\n+        case '\\\\':\n+            return '\\\\';\n+        default:\n+            if (Character.isSupplementaryCodePoint(c)) {\n+                return 'u' + String.format(\"%04X\", (int) c);\n+            } else {\n+                return c;\n+            }\n+    }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}