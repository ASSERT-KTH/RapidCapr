{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    // We will use this counter for counting the number of parameters.\n    int paramCount = 0;\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        // If the this type is a template type then it cannot be compared. If we called isSubtype\n        // on a template type, we could end up in an infinite recursion loop because the type\n        // variables are links to other types.\n        if (thisParamType != null && thisParamType.isTemplateType()) {\n            thatParam = thatParam.getNext();\n            continue;\n        }\n\n        // If that parameter does not exist or its type is not a subtype of this parameter's type,\n        // then these functions are not a match.\n        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n            return false;\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If \"that\" is missing a required parameter, then these functions are not a match.\n        if (!thisIsVarArgs && !thatIsVarArgs && !thisParam.isOptionalArg() && !thatParam.isOptionalArg()) {\n            return false;\n        }\n\n        paramCount++;\n\n        // don't advance if we have variable arguments\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n\n        // both var_args indicates the end\n        if (thisIsVarArgs && thatIsVarArgs) {\n            // We skip the rest of the parameters in this case.\n            thisParam = null;\n            thatParam = null;\n        }\n    }\n\n    // Count the number of remaining parameters.\n    while (thatParam != null) {\n        if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n            return false;\n        }\n        thatParam = thatParam.getNext();\n        paramCount++;\n    }\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n    if (thisParam != null && !thisParam.isVarArgs()) {\n        return false;\n    }\n\n    // Check the arity of the functions.\n    int otherParamCount = that.parameters.getChildCount();\n    if (thisParam != null && thisParam.isVarArgs()) {\n        if (otherParamCount < paramCount - 1) {\n            return false;\n        }\n    } else if (otherParamCount != paramCount) {\n        return false;\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..44ba7746 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,9 +77,9 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n@@ -89,7 +89,7 @@ final class ArrowType extends JSType {\n \n     // this.returnType <: that.returnType (covariant)\n     if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+        return false;\n     }\n \n     // that.paramType[i] <: this.paramType[i] (contravariant)\n@@ -113,45 +113,79 @@ final class ArrowType extends JSType {\n     // So, in this case, g < f, but f !< g\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n+\n+    // We will use this counter for counting the number of parameters.\n+    int paramCount = 0;\n     while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+        JSType thisParamType = thisParam.getJSType();\n+        JSType thatParamType = thatParam.getJSType();\n+\n+        // If the this type is a template type then it cannot be compared. If we called isSubtype\n+        // on a template type, we could end up in an infinite recursion loop because the type\n+        // variables are links to other types.\n+        if (thisParamType != null && thisParamType.isTemplateType()) {\n+            thatParam = thatParam.getNext();\n+            continue;\n         }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        // If that parameter does not exist or its type is not a subtype of this parameter's type,\n+        // then these functions are not a match.\n+        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n+            return false;\n+        }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        boolean thisIsVarArgs = thisParam.isVarArgs();\n+        boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n+        // If \"that\" is missing a required parameter, then these functions are not a match.\n+        if (!thisIsVarArgs && !thatIsVarArgs && !thisParam.isOptionalArg() && !thatParam.isOptionalArg()) {\n+            return false;\n+        }\n+\n+        paramCount++;\n+\n+        // don't advance if we have variable arguments\n+        if (!thisIsVarArgs) {\n+            thisParam = thisParam.getNext();\n+        }\n+        if (!thatIsVarArgs) {\n+            thatParam = thatParam.getNext();\n+        }\n+\n+        // both var_args indicates the end\n+        if (thisIsVarArgs && thatIsVarArgs) {\n+            // We skip the rest of the parameters in this case.\n+            thisParam = null;\n+            thatParam = null;\n+        }\n+    }\n+\n+    // Count the number of remaining parameters.\n+    while (thatParam != null) {\n+        if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n+            return false;\n+        }\n         thatParam = thatParam.getNext();\n-      }\n+        paramCount++;\n+    }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+    // \"that\" can't be a supertype, because it's missing a required argument.\n+    if (thisParam != null && !thisParam.isVarArgs()) {\n+        return false;\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // Check the arity of the functions.\n+    int otherParamCount = that.parameters.getChildCount();\n+    if (thisParam != null && thisParam.isVarArgs()) {\n+        if (otherParamCount < paramCount - 1) {\n+            return false;\n+        }\n+    } else if (otherParamCount != paramCount) {\n+        return false;\n+    }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}