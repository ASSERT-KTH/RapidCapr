{
    "patch": "import org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class Gamma {\n\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive. Invalid value: \" + a);\n        }\n\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be non-negative. Invalid value: \" + x);\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        if (x >= a + 1) {\n            return 1.0 - regularizedGammaComplement(a, x);\n        }\n\n        double sum = 1.0 / a;\n        double term = 1.0 / a;\n        int n = 1;\n\n        while (FastMath.abs(term) > MathUtils.EPSILON) {\n            term *= x / (a + n);\n            sum += term;\n            n++;\n        }\n\n        return sum * FastMath.exp(-x + a * FastMath.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a));\n    }\n\n    public static double regularizedGammaComplement(double a, double x) {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive. Invalid value: \" + a);\n        }\n\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be non-negative. Invalid value: \" + x);\n        }\n\n        if (x == 0.0) {\n            return 1.0;\n        }\n\n        if (x < a + 1) {\n            return 1.0 - regularizedGamma(a, x);\n        }\n\n        return org.apache.commons.math3.special.Beta.regularizedBeta(a, x, Double.POSITIVE_INFINITY);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6b583f6ae 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,61 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class Gamma {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive. Invalid value: \" + a);\n+        }\n+\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"x must be non-negative. Invalid value: \" + x);\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        if (x >= a + 1) {\n+            return 1.0 - regularizedGammaComplement(a, x);\n+        }\n+\n+        double sum = 1.0 / a;\n+        double term = 1.0 / a;\n+        int n = 1;\n+\n+        while (FastMath.abs(term) > MathUtils.EPSILON) {\n+            term *= x / (a + n);\n+            sum += term;\n+            n++;\n+        }\n+\n+        return sum * FastMath.exp(-x + a * FastMath.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a));\n+    }\n+\n+    public static double regularizedGammaComplement(double a, double x) {\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive. Invalid value: \" + a);\n+        }\n+\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"x must be non-negative. Invalid value: \" + x);\n+        }\n+\n+        if (x == 0.0) {\n+            return 1.0;\n+        }\n+\n+        if (x < a + 1) {\n+            return 1.0 - regularizedGamma(a, x);\n+        }\n+\n+        return org.apache.commons.math3.special.Beta.regularizedBeta(a, x, Double.POSITIVE_INFINITY);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}