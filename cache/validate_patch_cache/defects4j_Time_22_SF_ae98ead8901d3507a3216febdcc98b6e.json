{
    "patch": "protected BasePeriod(long duration) {\n    PeriodType periodType = PeriodType.standard();\n    int days = 0;\n    \n    long remainingMillis = duration;\n    \n    if(duration > Integer.MAX_VALUE * 86400L) {\n        days = (int) (duration / (86400L * Integer.MAX_VALUE));\n        remainingMillis = duration % (86400L * Integer.MAX_VALUE);\n    }\n    \n    Period period = Period.days(days).plus(new Duration(remainingMillis).toPeriod(periodType));\n    \n    this(period, null, null);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..3c8c5dc4 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,21 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+protected BasePeriod(long duration) {\n+    PeriodType periodType = PeriodType.standard();\n+    int days = 0;\n+    \n+    long remainingMillis = duration;\n+    \n+    if(duration > Integer.MAX_VALUE * 86400L) {\n+        days = (int) (duration / (86400L * Integer.MAX_VALUE));\n+        remainingMillis = duration % (86400L * Integer.MAX_VALUE);\n+    }\n+    \n+    Period period = Period.days(days).plus(new Duration(remainingMillis).toPeriod(periodType));\n+    \n+    this(period, null, null);\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}