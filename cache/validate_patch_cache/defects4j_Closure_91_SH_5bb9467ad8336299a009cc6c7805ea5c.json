{
    "patch": "} else {\n    // Don't traverse functions that are getting lent to a prototype.\n    if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK) {\n      Node expr = parent.getFirstChild();\n      if (expr.getType() == Token.ASSIGN) {\n        Node lhs = expr.getFirstChild();\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1991db79 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,19 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+} else {\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK) {\n+      Node expr = parent.getFirstChild();\n+      if (expr.getType() == Token.ASSIGN) {\n+        Node lhs = expr.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+    }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}