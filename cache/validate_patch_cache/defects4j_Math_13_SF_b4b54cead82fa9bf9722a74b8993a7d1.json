{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        if (!dec.getEigenvector(0).isNaN()) {\n            final double[] realEigenvalues = dec.getRealEigenvalues();\n            boolean isPositiveDefinite = true;\n            for (double eigenvalue : realEigenvalues) {\n                if (eigenvalue <= 0.0) {\n                    isPositiveDefinite = false;\n                    break;\n                }\n            }\n            if (isPositiveDefinite) {\n                final int n = m.getRowDimension();\n                final RealMatrix squareRootOfD = MatrixUtils.createRealMatrix(n, n);\n                for (int i = 0; i < n; i++) {\n                    squareRootOfD.setEntry(i, i, Math.sqrt(realEigenvalues[i]));\n                }\n                return dec.getV().multiply(squareRootOfD).multiply(dec.getV().transpose());\n            } else {\n                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n        }\n    } catch (OutOfMemoryError e) {\n        System.gc();\n        throw new OutOfMemoryError(\"Java heap space limit reached\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f5d41eb78 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,34 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        if (!dec.getEigenvector(0).isNaN()) {\n+            final double[] realEigenvalues = dec.getRealEigenvalues();\n+            boolean isPositiveDefinite = true;\n+            for (double eigenvalue : realEigenvalues) {\n+                if (eigenvalue <= 0.0) {\n+                    isPositiveDefinite = false;\n+                    break;\n+                }\n+            }\n+            if (isPositiveDefinite) {\n+                final int n = m.getRowDimension();\n+                final RealMatrix squareRootOfD = MatrixUtils.createRealMatrix(n, n);\n+                for (int i = 0; i < n; i++) {\n+                    squareRootOfD.setEntry(i, i, Math.sqrt(realEigenvalues[i]));\n+                }\n+                return dec.getV().multiply(squareRootOfD).multiply(dec.getV().transpose());\n+            } else {\n+                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+        }\n+    } catch (OutOfMemoryError e) {\n+        System.gc();\n+        throw new OutOfMemoryError(\"Java heap space limit reached\");\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space limit reached",
    "test_result": "FAIL"
}