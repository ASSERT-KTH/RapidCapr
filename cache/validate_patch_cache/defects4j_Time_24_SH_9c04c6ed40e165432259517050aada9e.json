{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DateTimeField field = savedField.iField;\n            int value = savedField.iValue;\n            try {\n                millis = field.set(millis, value);\n            } catch (IllegalArgumentException ex) {\n                if (text == null) {\n                    throw ex;\n                }\n                ex.printStackTrace();\n            BlockPos pos = savedField.iErrorPos;\n            String message = \"Cannot parse \\\"\" + text + '\"';\n            if (pos != null) {\n                message = message + \" near index \" + pos.getIndex();\n            }\n            throw new IllegalArgumentException(message, ex);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..40f92f2c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,23 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            DateTimeField field = savedField.iField;\n+            int value = savedField.iValue;\n+            try {\n+                millis = field.set(millis, value);\n+            } catch (IllegalArgumentException ex) {\n+                if (text == null) {\n+                    throw ex;\n+                }\n+                ex.printStackTrace();\n+            BlockPos pos = savedField.iErrorPos;\n+            String message = \"Cannot parse \\\"\" + text + '\"';\n+            if (pos != null) {\n+                message = message + \" near index \" + pos.getIndex();\n+            }\n+            throw new IllegalArgumentException(message, ex);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}