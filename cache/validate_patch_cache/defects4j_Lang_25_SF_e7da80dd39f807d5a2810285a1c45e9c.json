{
    "patch": "public static String unescape(String string) {\n    int length = string.length();\n    StringBuffer stringBuffer = new StringBuffer(length);\n    boolean success = true;\n    for (int i = 0; i < length; i++) {\n        char c = string.charAt(i);\n        if (c == '\\\\') {\n            if (++i >= length) {\n                success = false;\n                break;\n            }\n            c = string.charAt(i);\n            switch (c) {\n                case 'n':\n                    c = '\\n';\n                    break;\n                case 'r':\n                    c = '\\r';\n                    break;\n                case 't':\n                    c = '\\t';\n                    break;\n                case 'f':\n                    c = '\\f';\n                    break;\n                case '\\\\':\n                    c = '\\\\';\n                    break;\n                case '\\\"':\n                    c = '\\\"';\n                    break;\n                case '\\'':\n                    c = '\\'';\n                    break;\n                case '3':\n                    if (i + 2 >= length) {\n                        success = false;\n                        break;\n                    }\n                    // octal escape\n                    try {\n                        c = (char) Integer.parseInt(string.substring(i, i + 3),8);\n                        i += 2;\n                    } catch (NumberFormatException e) {\n                        success = false;\n                    }\n                    break;\n                case 'x':\n                    if (i + 2 >= length) {\n                        success = false;\n                        break;\n                    }\n                    // hexadecimal escape\n                    try {\n                        c = (char) Integer.parseInt(string.substring(i + 1, i + 3), 16);\n                        i += 2;\n                    } catch (NumberFormatException e) {\n                        success = false;\n                    }\n                    break;\n                default:\n                    success = false;\n                    break;\n            }\n        }\n        stringBuffer.append(c);\n    }\n    assertTrue(\"One or more errors detected\", success);\n    return stringBuffer.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1c854e74 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,76 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String string) {\n+    int length = string.length();\n+    StringBuffer stringBuffer = new StringBuffer(length);\n+    boolean success = true;\n+    for (int i = 0; i < length; i++) {\n+        char c = string.charAt(i);\n+        if (c == '\\\\') {\n+            if (++i >= length) {\n+                success = false;\n+                break;\n+            }\n+            c = string.charAt(i);\n+            switch (c) {\n+                case 'n':\n+                    c = '\\n';\n+                    break;\n+                case 'r':\n+                    c = '\\r';\n+                    break;\n+                case 't':\n+                    c = '\\t';\n+                    break;\n+                case 'f':\n+                    c = '\\f';\n+                    break;\n+                case '\\\\':\n+                    c = '\\\\';\n+                    break;\n+                case '\\\"':\n+                    c = '\\\"';\n+                    break;\n+                case '\\'':\n+                    c = '\\'';\n+                    break;\n+                case '3':\n+                    if (i + 2 >= length) {\n+                        success = false;\n+                        break;\n+                    }\n+                    // octal escape\n+                    try {\n+                        c = (char) Integer.parseInt(string.substring(i, i + 3),8);\n+                        i += 2;\n+                    } catch (NumberFormatException e) {\n+                        success = false;\n+                    }\n+                    break;\n+                case 'x':\n+                    if (i + 2 >= length) {\n+                        success = false;\n+                        break;\n+                    }\n+                    // hexadecimal escape\n+                    try {\n+                        c = (char) Integer.parseInt(string.substring(i + 1, i + 3), 16);\n+                        i += 2;\n+                    } catch (NumberFormatException e) {\n+                        success = false;\n+                    }\n+                    break;\n+                default:\n+                    success = false;\n+                    break;\n+            }\n+        }\n+        stringBuffer.append(c);\n+    }\n+    assertTrue(\"One or more errors detected\", success);\n+    return stringBuffer.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}