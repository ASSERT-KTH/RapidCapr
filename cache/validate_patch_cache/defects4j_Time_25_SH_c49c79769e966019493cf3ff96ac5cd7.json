{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\nif (delta >= 0) {\n    final long nextTransition = nextTransition(instantAdjusted);\n    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNext != nextTransition) {\n        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n            return getOffset(nextTransition) + delta;\n        }\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n} else {\n    long lastLocal = previousTransition(instantLocal - offsetAdjusted) + 1;\n    long lastAdjusted = previousTransition(instantAdjusted) + 1;\n    int offsetBeforeLast = getOffset(lastLocal - 1);\n    int offsetLast = getOffset(lastLocal);\n    if (offsetLast < offsetAdjusted) {\n        lastLocal = previousTransition(lastLocal - 1) + 1;\n        lastAdjusted = previousTransition(lastAdjusted - 1) + 1;\n        offsetBeforeLast = getOffset(lastLocal - 1);\n        offsetLast = getOffset(lastLocal);\n    }\n    if (offsetBeforeLast >= offsetAdjusted) {\n        return offsetLocal;\n    }\n    final int minDelta = Math.min(delta, 0);\n    if (offsetBeforeLast >= offsetLocal + minDelta) {\n        return offsetAdjusted;\n    }\n    final int maxDelta = Math.max(delta, 0);\n    if (offsetLast >= offsetLocal + maxDelta) {\n        return offsetLocal + maxDelta;\n    }\n    final long nextLocal = nextTransition(lastLocal - 1) + 1;\n    final long nextAdjusted = nextTransition(lastAdjusted - 1) + 1;\n    final int offsetNext = getOffset(nextLocal);\n    if (offsetNext <= offsetLocal + maxDelta) {\n        return offsetNext;\n    }\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ab018e51 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,48 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+if (delta >= 0) {\n+    final long nextTransition = nextTransition(instantAdjusted);\n+    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNext != nextTransition) {\n+        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n+            return getOffset(nextTransition) + delta;\n+        }\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+} else {\n+    long lastLocal = previousTransition(instantLocal - offsetAdjusted) + 1;\n+    long lastAdjusted = previousTransition(instantAdjusted) + 1;\n+    int offsetBeforeLast = getOffset(lastLocal - 1);\n+    int offsetLast = getOffset(lastLocal);\n+    if (offsetLast < offsetAdjusted) {\n+        lastLocal = previousTransition(lastLocal - 1) + 1;\n+        lastAdjusted = previousTransition(lastAdjusted - 1) + 1;\n+        offsetBeforeLast = getOffset(lastLocal - 1);\n+        offsetLast = getOffset(lastLocal);\n+    }\n+    if (offsetBeforeLast >= offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+    final int minDelta = Math.min(delta, 0);\n+    if (offsetBeforeLast >= offsetLocal + minDelta) {\n+        return offsetAdjusted;\n+    }\n+    final int maxDelta = Math.max(delta, 0);\n+    if (offsetLast >= offsetLocal + maxDelta) {\n+        return offsetLocal + maxDelta;\n+    }\n+    final long nextLocal = nextTransition(lastLocal - 1) + 1;\n+    final long nextAdjusted = nextTransition(lastAdjusted - 1) + 1;\n+    final int offsetNext = getOffset(nextLocal);\n+    if (offsetNext <= offsetLocal + maxDelta) {\n+        return offsetNext;\n+    }\n+    return offsetLocal;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}