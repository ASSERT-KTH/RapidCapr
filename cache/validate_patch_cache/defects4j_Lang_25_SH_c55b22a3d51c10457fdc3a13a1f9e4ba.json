{
    "patch": "public static String unescapeISO8859_1(String str) {\n    if (str == null) {\n        return null;\n    }\n    char[] charArray = str.toCharArray();\n    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(charArray.length);\n    int i = 0;\n    while (i < charArray.length) {\n        int i2 = i + 1;\n        byte b = (byte) charArray[i];\n        if (b == 43) {\n            byteArrayOutputStream.write(32);\n        } else if (b == 37) {\n            try {\n                byte parseByte = (byte) ((parseHexDigit(charArray[i2]) << 4) + parseHexDigit(charArray[i2 + 1]));\n                    i2 += 2;\n                    byteArrayOutputStream.write(parseByte);\n            } catch (ArrayIndexOutOfBoundsException e) {\n                throw new IllegalArgumentException(\"Invalid encoded sequence: insufficient number of characters\", e);\n            } catch (NumberFormatException e2) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Invalid encoded sequence: bad hexadecimal digit '\");\n                sb.append(charArray[i2]);\n                sb.append(charArray[i2 + 1]);\n                sb.append(\"'\");\n                throw new IllegalArgumentException(sb.toString(), e2);\n            }\n        }\n            byteArrayOutputStream.write(b);\n        i = i2;\n    }\n    return new String(byteArrayOutputStream.toByteArray(), StandardCharsets.ISO_8859_1);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}