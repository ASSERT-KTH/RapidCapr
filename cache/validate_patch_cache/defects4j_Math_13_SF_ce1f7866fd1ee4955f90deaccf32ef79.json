{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // Use Cholesky decomposition method\n    CholeskyDecomposition cd = new CholeskyDecomposition(m);\n    RealMatrix l = cd.getL();\n    RealMatrix l_transpose = l.transpose();\n    RealMatrix l_sqrt = l.scalarMultiply(Math.sqrt(2.0));\n    return l_sqrt.multiply(l_transpose);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..73e9d1e8f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Use Cholesky decomposition method\n+    CholeskyDecomposition cd = new CholeskyDecomposition(m);\n+    RealMatrix l = cd.getL();\n+    RealMatrix l_transpose = l.transpose();\n+    RealMatrix l_sqrt = l.scalarMultiply(Math.sqrt(2.0));\n+    return l_sqrt.multiply(l_transpose);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}