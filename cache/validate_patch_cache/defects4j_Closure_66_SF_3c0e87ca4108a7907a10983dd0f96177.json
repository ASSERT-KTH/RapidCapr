{
    "patch": "public static double getTypedPercent(JsonSchema jsonSchema) {\n    double typedCount = 0.0;\n    double propertyCount = 0.0;\n    for(Map.Entry<String, JsonSchema> entry : jsonSchema.getProperties().entrySet()) {\n        JsonSchema property = entry.getValue();\n        propertyCount++;\n        if(property.getType() != null) {\n            typedCount++;\n        }\n    }\n    return (typedCount / propertyCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..02e03eea 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonSchema jsonSchema) {\n+    double typedCount = 0.0;\n+    double propertyCount = 0.0;\n+    for(Map.Entry<String, JsonSchema> entry : jsonSchema.getProperties().entrySet()) {\n+        JsonSchema property = entry.getValue();\n+        propertyCount++;\n+        if(property.getType() != null) {\n+            typedCount++;\n+        }\n+    }\n+    return (typedCount / propertyCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}