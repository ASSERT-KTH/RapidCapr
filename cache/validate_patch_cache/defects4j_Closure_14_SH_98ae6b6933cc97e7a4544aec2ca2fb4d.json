{
    "patch": "if (cfa != null) {\n  if (NodeUtil.getEnclosingFinally(parent) != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    return finallyNode;\n  } else if (NodeUtil.isFunctionBlock(parent)) {\n    Node exitNode = getCfg().getExit().getValue();\n    cfa.createEdge(fromNode, Branch.UNCOND, exitNode);\n    return exitNode;\n  } else {\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..f4c95544 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  if (NodeUtil.getEnclosingFinally(parent) != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    return finallyNode;\n+  } else if (NodeUtil.isFunctionBlock(parent)) {\n+    Node exitNode = getCfg().getExit().getValue();\n+    cfa.createEdge(fromNode, Branch.UNCOND, exitNode);\n+    return exitNode;\n+  } else {\n+    return computeFollowNode(fromNode, parent, cfa);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}