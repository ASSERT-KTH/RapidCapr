{
    "patch": "        for (int index = 0; index < this.data.size(); index++) {\n            if (index >= start && index <= end) {\n                try {\n                    TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n                    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                    copy.add(clone);\n                } catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        // Set minY and maxY of the new TimeSeries\n        if (copy.getItemCount() > 0) {\n            double minY = Double.POSITIVE_INFINITY;\n            double maxY = Double.NEGATIVE_INFINITY;\n            Iterator<TimeSeriesDataItem> iterator = copy.getDataItemIterator();\n            while (iterator.hasNext()) {\n                TimeSeriesDataItem item = iterator.next();\n                Number value = item.getValue();\n                if (value != null) {\n                    double y = value.doubleValue();\n                    if (!Double.isNaN(y)) {\n                        if (y < minY) {\n                            minY = y;\n                        }\n\n                        if (y > maxY) {\n                            maxY = y;\n                        }\n                    }\n                }\n            }\n            copy.minY = minY;\n            copy.maxY = maxY;\n        } else {\n            copy.minY = Double.NaN;\n            copy.maxY = Double.NaN;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..6c8def9 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,44 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        for (int index = 0; index < this.data.size(); index++) {\n+            if (index >= start && index <= end) {\n+                try {\n+                    TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+                    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                    copy.add(clone);\n+                } catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+\n+        // Set minY and maxY of the new TimeSeries\n+        if (copy.getItemCount() > 0) {\n+            double minY = Double.POSITIVE_INFINITY;\n+            double maxY = Double.NEGATIVE_INFINITY;\n+            Iterator<TimeSeriesDataItem> iterator = copy.getDataItemIterator();\n+            while (iterator.hasNext()) {\n+                TimeSeriesDataItem item = iterator.next();\n+                Number value = item.getValue();\n+                if (value != null) {\n+                    double y = value.doubleValue();\n+                    if (!Double.isNaN(y)) {\n+                        if (y < minY) {\n+                            minY = y;\n+                        }\n+\n+                        if (y > maxY) {\n+                            maxY = y;\n+                        }\n+                    }\n+                }\n+            }\n+            copy.minY = minY;\n+            copy.maxY = maxY;\n+        } else {\n+            copy.minY = Double.NaN;\n+            copy.maxY = Double.NaN;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}