{
    "patch": "public static double median(int[] list) {\n    if (list == null || list.length == 0) {\n        throw new IllegalArgumentException(\"List cannot be null or empty\");\n    }\n    \n    int n = list.length;\n    int middle = n / 2;\n    \n    if (n % 2 == 0) {\n        // If even length, average of middle two values\n        return (double) (findKthSmallestElement(list, middle - 1) + findKthSmallestElement(list, middle)) / 2.0;\n    } else {\n        // If odd length, middle value\n        return (double) findKthSmallestElement(list, middle);\n    }\n}\n\n/**\n * Helper method to find the kth smallest element in an integer array.\n * Uses quickselect algorithm with randomized pivot selection.\n */\nprivate static int findKthSmallestElement(int[] arr, int k) {\n    int left = 0;\n    int right = arr.length - 1;\n    \n    while (true) {\n        int pivotIndex = randomizedPartition(arr, left, right);\n        if (k == pivotIndex) {\n            return arr[k];\n        } else if (k < pivotIndex) {\n            right = pivotIndex - 1;\n        } else {\n            left = pivotIndex + 1;\n        }\n    }\n}\n\n/**\n * Helper method for quickselect algorithm to partition the array around a random pivot.\n * Returns the index of the pivot after the partition.\n */\nprivate static int randomizedPartition(int[] arr, int left, int right) {\n    int pivotIndex = (int) (Math.random() * (right - left + 1) + left);\n    int pivotValue = arr[pivotIndex];\n    int i = left - 1;\n    int j = right + 1;\n    \n    while (true) {\n        do {\n            i++;\n        } while (arr[i] < pivotValue);\n        do{\n            j--;\n        } while (arr[j] > pivotValue);\n        if (i >= j) {\n            return j;\n        }\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MEDIAN.java b/src/main/java/humaneval/buggy/MEDIAN.java\nindex 6ba9604..9cb1d72 100644\n--- a/src/main/java/humaneval/buggy/MEDIAN.java\n+++ b/src/main/java/humaneval/buggy/MEDIAN.java\n@@ -9,13 +9,66 @@ import java.util.Arrays;\n 15.0 */\n \n public class MEDIAN {\n-    public static double median(int[] list) {\n-        Arrays.sort(list);\n+public static double median(int[] list) {\n+    if (list == null || list.length == 0) {\n+        throw new IllegalArgumentException(\"List cannot be null or empty\");\n+    }\n+    \n+    int n = list.length;\n+    int middle = n / 2;\n+    \n+    if (n % 2 == 0) {\n+        // If even length, average of middle two values\n+        return (double) (findKthSmallestElement(list, middle - 1) + findKthSmallestElement(list, middle)) / 2.0;\n+    } else {\n+        // If odd length, middle value\n+        return (double) findKthSmallestElement(list, middle);\n+    }\n+}\n \n-        if (list.length % 2 == 1) {\n-            return list[(int) (list.length / 2)];\n+/**\n+ * Helper method to find the kth smallest element in an integer array.\n+ * Uses quickselect algorithm with randomized pivot selection.\n+ */\n+private static int findKthSmallestElement(int[] arr, int k) {\n+    int left = 0;\n+    int right = arr.length - 1;\n+    \n+    while (true) {\n+        int pivotIndex = randomizedPartition(arr, left, right);\n+        if (k == pivotIndex) {\n+            return arr[k];\n+        } else if (k < pivotIndex) {\n+            right = pivotIndex - 1;\n         } else {\n-            return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n+            left = pivotIndex + 1;\n+        }\n+    }\n+}\n+\n+/**\n+ * Helper method for quickselect algorithm to partition the array around a random pivot.\n+ * Returns the index of the pivot after the partition.\n+ */\n+private static int randomizedPartition(int[] arr, int left, int right) {\n+    int pivotIndex = (int) (Math.random() * (right - left + 1) + left);\n+    int pivotValue = arr[pivotIndex];\n+    int i = left - 1;\n+    int j = right + 1;\n+    \n+    while (true) {\n+        do {\n+            i++;\n+        } while (arr[i] < pivotValue);\n+        do{\n+            j--;\n+        } while (arr[j] > pivotValue);\n+        if (i >= j) {\n+            return j;\n         }\n+        int temp = arr[i];\n+        arr[i] = arr[j];\n+        arr[j] = temp;\n     }\n }\n+}",
    "result_reason": "",
    "test_result": "FAIL"
}