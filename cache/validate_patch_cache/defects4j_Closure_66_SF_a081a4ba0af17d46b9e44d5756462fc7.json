{
    "patch": "import org.json.JSONObject;\nimport org.json.JSONException;\n\npublic class MyClass {\n    public static double getTypedPercent(String jsonString) {\n        try {\n            JSONObject jsonObj = new JSONObject(jsonString);\n            int total = jsonObj.getInt(\"total\");\n            int typed = jsonObj.getInt(\"typed\");\n            if(total ==0){\n                return 100.0;\n            }\n            return ((double) typed / (double) total) * 100;\n        } catch (JSONException e) {\n            e.printStackTrace();\n            return -1.0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0bce1ea7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONObject;\n+import org.json.JSONException;\n+\n+public class MyClass {\n+    public static double getTypedPercent(String jsonString) {\n+        try {\n+            JSONObject jsonObj = new JSONObject(jsonString);\n+            int total = jsonObj.getInt(\"total\");\n+            int typed = jsonObj.getInt(\"typed\");\n+            if(total ==0){\n+                return 100.0;\n+            }\n+            return ((double) typed / (double) total) * 100;\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+            return -1.0;\n+        }\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}