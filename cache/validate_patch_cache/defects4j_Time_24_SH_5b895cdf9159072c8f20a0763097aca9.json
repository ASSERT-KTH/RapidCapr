{
    "patch": "            // Fix starts here\n            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && count >= 3 &&\n                    savedFields[1].iField.getType() == DateTimeFieldType.monthOfYear() &&\n                    savedFields[2].iField.getType() == DateTimeFieldType.dayOfMonth()) {\n                int year = savedFields[0].iValue + savedFields[1].iValue / 12;\n                year = iChrono.year().getSetValueDurationField().set(year, year);\n                SavedField yearField = savedFields[0];\n                savedFields[0] = new SavedField(iChrono.year(), yearField.iValue, true);\n                savedFields[1] = new SavedField(savedFields[1].iField, savedFields[1].iValue % 12 + 1, true);\n                millis = savedFields[2].set(savedFields[1].set(yearField.set(millis, resetFields), resetFields), resetFields);\n            } else {\n                throw e;\n            }\n            // Fix ends here",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d995b95b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // Fix starts here\n+            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && count >= 3 &&\n+                    savedFields[1].iField.getType() == DateTimeFieldType.monthOfYear() &&\n+                    savedFields[2].iField.getType() == DateTimeFieldType.dayOfMonth()) {\n+                int year = savedFields[0].iValue + savedFields[1].iValue / 12;\n+                year = iChrono.year().getSetValueDurationField().set(year, year);\n+                SavedField yearField = savedFields[0];\n+                savedFields[0] = new SavedField(iChrono.year(), yearField.iValue, true);\n+                savedFields[1] = new SavedField(savedFields[1].iField, savedFields[1].iValue % 12 + 1, true);\n+                millis = savedFields[2].set(savedFields[1].set(yearField.set(millis, resetFields), resetFields), resetFields);\n+            } else {\n+                throw e;\n+            }\n+            // Fix ends here\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}