{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) ||\n                                      (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n    boolean isJulianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) ||\n                                      (year == 1582 && monthOfYear == 10 && dayOfMonth < 5);\n\n    if (isGregorianAfterCutover) {\n        // Gregorian\n        long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            //Maybe it's Julian.\n            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if(julianInstant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return julianInstant;\n        }\n        return instant;\n    } else if (isJulianBeforeCutover) {\n        // Julian\n        if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n            throw new IllegalArgumentException(\"Invalid leap year day\");\n        }\n\n        long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            //Maybe it's Gregorian.\n            long gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if(gregorianInstant < iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return gregorianInstant;\n        }\n        return instant;\n    } else {\n        // Cutover period\n        if (monthOfYear == 10 && dayOfMonth >= 5 && dayOfMonth <= 14 && year == 1582) {\n            throw new IllegalArgumentException(\"Invalid date during cutover\");\n        }\n        long instant;\n        try {\n            // Try Gregorian first.\n            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\thourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..aa2995b2 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,28 +347,70 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour,\n+                              int secondOfMinute, int millisOfSecond)\n+    throws IllegalArgumentException\n+{\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) ||\n+                                      (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n+    boolean isJulianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) ||\n+                                      (year == 1582 && monthOfYear == 10 && dayOfMonth < 5);\n+\n+    if (isGregorianAfterCutover) {\n+        // Gregorian\n+        long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         if (instant < iCutoverMillis) {\n+            //Maybe it's Julian.\n+            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if(julianInstant >= iCutoverMillis) {\n+                // Okay, it's in the illegal cutover gap.\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            }\n+            return julianInstant;\n+        }\n+        return instant;\n+    } else if (isJulianBeforeCutover) {\n+        // Julian\n+        if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n+            throw new IllegalArgumentException(\"Invalid leap year day\");\n+        }\n+\n+        long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (instant >= iCutoverMillis) {\n+            //Maybe it's Gregorian.\n+            long gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if(gregorianInstant < iCutoverMillis) {\n+                // Okay, it's in the illegal cutover gap.\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            }\n+            return gregorianInstant;\n+        }\n+        return instant;\n+    } else {\n+        // Cutover period\n+        if (monthOfYear == 10 && dayOfMonth >= 5 && dayOfMonth <= 14 && year == 1582) {\n+            throw new IllegalArgumentException(\"Invalid date during cutover\");\n+        }\n+        long instant;\n+        try {\n+            // Try Gregorian first.\n+            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalArgumentException e) {\n             // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\thourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n             if (instant >= iCutoverMillis) {\n                 // Okay, it's in the illegal cutover gap.\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n@@ -376,6 +418,7 @@ public final class GJChronology extends AssembledChronology {\n         }\n         return instant;\n     }\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}