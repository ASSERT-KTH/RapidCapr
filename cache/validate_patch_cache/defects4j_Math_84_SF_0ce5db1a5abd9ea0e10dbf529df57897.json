{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final double contraction = reflected.equals(original[0]) ? rho : (reflected.equals(original[1]) ? sigma : psi);\n            final RealPointValuePair[] expanded = evaluateNewSimplex(original, contraction, comparator);\n            if (comparator.compare(expanded[0], reflected) < 0) {\n                // accept the expanded simplex\n                simplex = expanded;\n            } else {\n                // accept the reflected simplex\n                simplex = new RealPointValuePair[] {reflected,\n                        original[1], original[2]};\n            }\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] {contracted,\n                        original[1], original[2]};\n            } else {\n                // perform a reduction step\n                final RealPointValuePair[] reduced = new RealPointValuePair[original.length];\n                reduced[0] = best;\n                for (int i = 1; i < reduced.length; i++) {\n                    reduced[i] = new RealPointValuePair(\n                            original[i][0],\n                            original[0].getValue(),\n                            false);\n                }\n                simplex = reduced;\n            }\n        }\n\n        // check convergence\n        final RealPointValuePair currentBest = simplex[0];\n        final RealPointValuePair lastBest = iterations.isEmpty() ? null : iterations.get(iterations.size() - 1).getPoint();\n        if (lastBest != null &&\n                comparator.compare(currentBest, lastBest) == 0) {\n            if (getEvaluations() > lastConvergenceCount + N) {\n                // The function value is not improving anymore.\n                return;\n            }\n        } else {\n            lastConvergenceCount = getEvaluations();\n        }\n        iterations.add(new IterationManager.PointValuePairEvaluation<>(currentBest, getEvaluations()));\n        if (comparator.compare(currentBest, simplex[simplex.length - 1]) <= 0) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5b7a0d84c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,68 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final double contraction = reflected.equals(original[0]) ? rho : (reflected.equals(original[1]) ? sigma : psi);\n+            final RealPointValuePair[] expanded = evaluateNewSimplex(original, contraction, comparator);\n+            if (comparator.compare(expanded[0], reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = expanded;\n+            } else {\n+                // accept the reflected simplex\n+                simplex = new RealPointValuePair[] {reflected,\n+                        original[1], original[2]};\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        } else {\n+            // perform a contraction step\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = new RealPointValuePair[] {contracted,\n+                        original[1], original[2]};\n+            } else {\n+                // perform a reduction step\n+                final RealPointValuePair[] reduced = new RealPointValuePair[original.length];\n+                reduced[0] = best;\n+                for (int i = 1; i < reduced.length; i++) {\n+                    reduced[i] = new RealPointValuePair(\n+                            original[i][0],\n+                            original[0].getValue(),\n+                            false);\n+                }\n+                simplex = reduced;\n+            }\n+        }\n \n-            // check convergence\n+        // check convergence\n+        final RealPointValuePair currentBest = simplex[0];\n+        final RealPointValuePair lastBest = iterations.isEmpty() ? null : iterations.get(iterations.size() - 1).getPoint();\n+        if (lastBest != null &&\n+                comparator.compare(currentBest, lastBest) == 0) {\n+            if (getEvaluations() > lastConvergenceCount + N) {\n+                // The function value is not improving anymore.\n                 return;\n             }\n-\n+        } else {\n+            lastConvergenceCount = getEvaluations();\n+        }\n+        iterations.add(new IterationManager.PointValuePairEvaluation<>(currentBest, getEvaluations()));\n+        if (comparator.compare(currentBest, simplex[simplex.length - 1]) <= 0) {\n+            return;\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}