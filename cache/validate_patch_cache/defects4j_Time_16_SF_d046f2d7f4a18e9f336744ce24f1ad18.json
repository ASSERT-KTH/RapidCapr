{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = selectChronology(instant.getChronology());\n    DateTimeZone zone = instant.getZone();\n\n    int length = text.length();\n    if (length == 0) {\n        instant.setMillis(0L);\n        return 0;\n    }\n\n    char firstChar = text.charAt(position);\n    if (firstChar == '+' || firstChar == '-') {\n        zone = DateTimeZone.forID(text.substring(position));\n        if (zone.equals(DateTimeZone.UTC)) {\n            instant.setMillis(instant.getMillis());\n            instant.setChronology(chrono);\n            instant.setZone(DateTimeZone.UTC);\n            return length;\n        }\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instant.getMillis(),\n        chrono.withZone(zone),\n        iLocale,\n        iPivotYear,\n        iDefaultYear\n    );\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos < 0) {\n        instant.setMillis(0L);\n        return ~newPos;\n    }\n\n    if (bucket.getOffsetInteger() != null) {\n        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n    } else if (bucket.getZone() != null) {\n        zone = bucket.getZone();\n    }\n\n    instant.setChronology(chrono.withZone(zone));\n    instant.setZone(zone);\n    instant.setMillis(zone.convertLocalToUTC(bucket.computeMillis(), false));\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..40a82090 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,35 +694,59 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = selectChronology(instant.getChronology());\n+    DateTimeZone zone = instant.getZone();\n+\n+    int length = text.length();\n+    if (length == 0) {\n+        instant.setMillis(0L);\n+        return 0;\n+    }\n+\n+    char firstChar = text.charAt(position);\n+    if (firstChar == '+' || firstChar == '-') {\n+        zone = DateTimeZone.forID(text.substring(position));\n+        if (zone.equals(DateTimeZone.UTC)) {\n+            instant.setMillis(instant.getMillis());\n+            instant.setChronology(chrono);\n+            instant.setZone(DateTimeZone.UTC);\n+            return length;\n         }\n-        return newPos;\n     }\n \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instant.getMillis(),\n+        chrono.withZone(zone),\n+        iLocale,\n+        iPivotYear,\n+        iDefaultYear\n+    );\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos < 0) {\n+        instant.setMillis(0L);\n+        return ~newPos;\n+    }\n+\n+    if (bucket.getOffsetInteger() != null) {\n+        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+    } else if (bucket.getZone() != null) {\n+        zone = bucket.getZone();\n+    }\n+\n+    instant.setChronology(chrono.withZone(zone));\n+    instant.setZone(zone);\n+    instant.setMillis(zone.convertLocalToUTC(bucket.computeMillis(), false));\n+\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}