{
    "patch": "if (n.getType() == Token.URSH) {\n    // if the left-hand operand is negative, use a long to represent the unsigned value\n    // otherwise the value shift is performed as a signed operation on an int.\n    if (lvalInt < 0) {\n        long lvalLong = lvalInt & 0x7FFFFFFF;\n        lvalLong |= 0x80000000L;\n\n        // and shift as unsigned\n        result = lvalLong >>> rvalInt;\n    } else {\n        // otherwise unsigned shift can be done in the int range\n        result = lvalInt >>> rvalInt;\n    }\n} else {\n    result = lvalInt >> rvalInt;\n    if (n.getType() == Token.LSH) {\n        result = lvalInt << rvalInt;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..c7438d86 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,25 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (n.getType() == Token.URSH) {\n+    // if the left-hand operand is negative, use a long to represent the unsigned value\n+    // otherwise the value shift is performed as a signed operation on an int.\n+    if (lvalInt < 0) {\n+        long lvalLong = lvalInt & 0x7FFFFFFF;\n+        lvalLong |= 0x80000000L;\n+\n+        // and shift as unsigned\n+        result = lvalLong >>> rvalInt;\n+    } else {\n+        // otherwise unsigned shift can be done in the int range\n+        result = lvalInt >>> rvalInt;\n+    }\n+} else {\n+    result = lvalInt >> rvalInt;\n+    if (n.getType() == Token.LSH) {\n+        result = lvalInt << rvalInt;\n+    }\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}