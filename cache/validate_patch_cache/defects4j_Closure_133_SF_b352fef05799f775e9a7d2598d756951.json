{
    "patch": "private String getRemainingJSDocLine() {\n  String result = \"\";\n\n  try {\n    result = stream.getRemainingJSDocLine().trim();\n    result = result.replaceAll(\"[\\\\s\\\\t]+\", \" \");\n    result = result.replaceAll(\"(\\\\[[\\\\s]*\\\\])+\", \"[]\");\n  } catch (IllegalStateException e) {\n    result = \"\";\n  }\n\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..b0ea8c4c 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,11 +2396,20 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n+private String getRemainingJSDocLine() {\n+  String result = \"\";\n+\n+  try {\n+    result = stream.getRemainingJSDocLine().trim();\n+    result = result.replaceAll(\"[\\\\s\\\\t]+\", \" \");\n+    result = result.replaceAll(\"(\\\\[[\\\\s]*\\\\])+\", \"[]\");\n+  } catch (IllegalStateException e) {\n+    result = \"\";\n   }\n \n+  return result;\n+}\n+\n   /**\n    * Determines whether the parser has been populated with docinfo with a\n    * fileoverview tag.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}