{
    "patch": "public class IRFactory extends Parser {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use asm\", \"use strict\");\n\n  private String sourceName;\n  private ErrorReporter errorReporter;\n\n  public IRFactory() {\n    super(new CompilerEnvirons());\n    // Create an ErrorReporter that won't throw an exception for warnings\n    // and can record other information.\n    this.setErrorReporter(new ErrorReporter() {\n      private ArrayList<String> errors = new ArrayList<>();\n\n      @Override\n      public void warning(String message, String sourceName, int line, String lineSource,\n          int lineOffset) {}\n\n      @Override\n      public void error(String message, String sourceName, int line, String lineSource,\n          int lineOffset) {\n        errors.add(message);\n      }\n\n      @Override\n      public EvaluatorException runtimeError(String message, String sourceName, int line,\n          String lineSrc, int lineOffset) {\n        return null;\n      }\n\n      public String[] getErrors() {\n        return errors.toArray(new String[0]);\n      }\n    });\n    this.setRecordingComments(true);\n  }\n\n  private Node parse(String code) {\n    sourceName = \"irfactory\";\n    return super.parse(code, null, 0);\n  }\n\n  public String[] getErrors() {\n    return ((ErrorReporter) this.getErrorReporter()).getErrors();\n  }\n\n  void setErrorReporter(ErrorReporter errorReporter) {\n    this.errorReporter = errorReporter;\n  }\n\n  @Override\n  Node parseFunctionBody(String parameters) throws IOException, RecognitionException {\n    String params = (parameters == null) ? \"\" : parameters;\n    Node result = super.parseFunctionBody(params);\n    result.setStaticSourceFile(sourceName);\n    return result;\n  }\n\n  // Transforms a whole script.\n  public Node transformTree(Node tree) {\n    NodeTraversal.traverseEs6(compiler, tree, new InferJSType(compiler));\n    NodeTraversal.traverseEs6(compiler, tree, new CheckVars(compiler, true));\n    new DefaultPassConfig(null).process(null, tree);\n\n    return tree;\n  }\n\n  // Processes a functionNode.  Returns the transformed tree.\n  private Node processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null) {\n      name = new Name();\n      name.setIdentifier(\"\");\n      isUnnamedFunction = true;\n    }\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n\n    if (isUnnamedFunction) {\n      newName.setLineno(functionNode.getLineno());\n      int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n      newName.setCharno(position2charno(lpColumn));\n    }\n\n    node.addChildToBack(newName);\n    Node lp = newNode(Token.LP);\n\n    Name fnName = functionNode.getFunctionName();\n    if (fnName != null) {\n      lp.setLineno(fnName.getLineno());\n    } else {\n      lp.setLineno(functionNode.getLineno());\n    }\n\n    int lparenCharno = functionNode.getLp() +\n        functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n\n    for (AstNode param : functionNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n\n    return node;\n  }\n\n  // Convenience wrapper function.\n  public static Node buildAstFromString(String sourceCode) {\n    return new IRFactory().transformTree(new IRFactory().parse(sourceCode));\n  }\n\n  // Simplified version for testing.\n  public static Node buildMinimalAstFromString(String sourceCode) {\n    IRFactory factory = new IRFactory();\n    Node node = factory.parse(sourceCode);\n    factory.process(node);\n    return node;\n  }\n\n  private int position2CharNum(int absolutePosition) {\n    return new CharIterator(new StringReader(getSourceLine(absolutePosition))).next();\n  }\n\n  private void parseDirectives(Node n) {\n    if (!isDirective(n)) {\n      return;\n    }\n\n    int directiveType = n.getFirstChild().getType();\n    if (directiveType == Token.STRING) {\n      String directive = n.getFirstChild().getString();\n      if (directive.startsWith(\"use \")) {\n        if (!ALLOWED_DIRECTIVES.contains(directive)) {\n          errorReporter.error(\n              \"Illegal directive: \" + directive, sourceName, n.getLineno(), \"\", 0);\n        }\n      }\n    }\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n        n.getFirstChild().getType() == Token.STRING &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  private Node transform(AstNode root) {\n    return root == null ? null :\n        (Node) root.visit(new TransformDispatcher(), null);\n  }\n\n  private Node transformBlock(Block blockNode) {\n    Node result = newNode(Token.BLOCK);\n    for (Node n : blockNode) {\n      result.addChildToBack(transform(n));\n    }\n    return result;\n  }\n\n  private Node newNode(int type) {\n    return new Node(type);\n  }\n\n  private Node newNode(int type, Node first) {\n    Node result = new Node(type);\n    result.addChildToBack(first);\n    return result;\n  }\n\n  private Node newNode(int type, Node first, Node second) {\n    Node result = new Node(type);\n    result.addChildToBack(first);\n    result.addChildToBack(second);\n    return result;\n  }\n\n  private Node newNode(int type, Node first, Node second, Node third) {\n    Node result = new Node(type);\n    result.addChildToBack(first);\n    result.addChildToBack(second);\n    result.addChildToBack(third);\n    return result;\n  }\n\n  private Node processGeneric(Node node) {\n    if (node instanceof AstRoot) {\n      return process((AstRoot) node);\n    } else if (node instanceof Block) {\n      return processBlock((Block) node);\n    }\n    return null;\n  }\n\n  private Node process(AstRoot root) {\n    Node scriptNode = newNode(Token.SCRIPT);\n    for (Node kid : root) {\n      Node n = transform(kid);\n      if (n != null) {\n        parseDirectives(n);\n        scriptNode.addChildToBack(n);\n      }\n    }\n    return scriptNode;\n  }\n\n  private Node processBlock(Block blockNode) {\n    return transformBlock(blockNode);\n  }\n\n  private int position2charno(int position) {\n    return new CharIterator(new StringReader(getSourceLine(position))).next();\n  }\n\n  // A Handler that supports all the nodes that we care about.\n  private class TransformDispatcher implements NodeVisitor<Node> {\n    public Node visit(AstNode node) {\n      return node == null ? null : node.visit(this);\n    }\n\n    public Node defaultAction(AstNode node, Node parent) {\n      Node result = null;\n      for (AstNode kid : node) {\n        Node n = kid.visit(this);\n        if (n != null) {\n          if (result == null) {\n            result = newNode(transformTokenType(node.getType()));\n            if (parent != null) {\n              parent.addChildToBack(result);\n            }\n          }\n          result.addChildToBack(n);\n        }\n      }\n      return result;\n    }\n\n    @Override\n    public Node visitArrayComprehension(ArrayComprehension node) {\n      return null;\n    }\n\n    @Override\n    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n      return null;\n    }\n\n    @Override\n    public Node visitArrayLiteral(ArrayLiteral node) {\n      return defaultAction(node, null);\n    }\n\n    @Override\n    public Node visitAstRoot(AstRoot node) {\n      return process(node);\n    }\n\n    @Override\n    public Node visitBlock(Block node) {\n      return processBlock(node);\n    }\n\n    @Override\n    public Node visitBreakStatement(BreakStatement node) {\n      Node result = newNode(Token.BREAK);\n      if (node.getBreakLabel() != null) {\n        Node labelName = newNode(Token.LABEL_NAME, node.getBreakLabel().getIdentifier());\n        result.addChildToBack(labelName);\n      }\n      return result;\n    }\n\n    @Override\n    public Node visitName(Name node) {\n      return newNode(Token.NAME, node.getIdentifier());\n    }\n\n    @Override\n    public Node visitNumberLiteral(NumberLiteral node) {\n      return new NumberNode(node.getNumber());\n    }\n\n    @Override\n    public Node visitStringLiteral(StringLiteral node) {\n      return newNode(Token.STRING, node.getValue());\n    }\n\n    @Override\n    public Node visitRegExpLiteral(RegExpLiteral node) {\n      return new RegExpLiteral(\n          node.getJsDoc(), node.getValue(), node.getFlags());\n    }\n\n    @Override\n    public Node visitObjectLiteral(ObjectLiteral node) {\n      Node result = newNode(Token.OBJECTLIT);\n      for (ObjectProperty property : node.getObjectProps()) {\n        Node identifier = transform(property.getLeft());\n        Node value = transform(property.getRight());\n        if (identifier != null) {\n          identifier.addChildToFront(value);\n          result.addChildToBack(identifier);\n        }\n      }\n      return result;\n    }\n\n    @Override\n    public Node visitObjectProperty(ObjectProperty node) {\n      throw new RuntimeException(\"Unexpected visit of ObjectProperty\");\n    }\n\n    @Override\n    public Node visitPropertyGet(PropertyGet node) {\n      Node targetType = transform(node.getTarget());\n      Node propertyName = transform(node.getProperty());\n      return newNode(Token.GETPROP, targetType, propertyName);\n    }\n    \n    @Override\n    public Node visitParenthesizedExpression(ParenthesizedExpression node) {\n      return transform(node.getExpression());\n    }\n\n    @Override\n    public Node visitPropertySet(PropertySet node) {\n      Node targetType = transform(node.getTarget());\n      Node propertyName = transform(node.getProperty());\n      Node functionNode = transformFunction(node.getLineno(), false, node.getFunction());\n      return newNode(Token.SETPROP, targetType, propertyName, functionNode);\n    }\n\n    @Override\n    public Node visitFunctionCall(FunctionCall node) {\n      Node result = newNode(Token.CALL, transform(node.getTarget()));\n      for (AstNode arg : node.getArguments()) {\n        result.addChildToBack(transform(arg));\n      }\n\n      if (node.getArguments().size() == 0) {\n        Node lp = newNode(Token.LP);\n        lp.setLineno(node.getLineno());\n        int lparenCharno = node.getAbsolutePosition() + node.getTarget().getLength();\n        lp.setCharno(position2CharNum(lparenCharno));\n        result.addChildToBack(lp);\n      }\n\n      int leftParamPos = node.getAbsolutePosition() + node.getLp();\n      result.setLineno(node.getLineno());\n      result.setCharno(position2CharNum(leftParamPos));\n      return result;\n    }\n\n    @Override\n    public Node visitIfStatement(IfStatement node) {\n      Node conditionNode = transform(node.getCondition());\n      Node trueNode = transform(node.getThenPart());\n      Node falseNode = transform(node.getElsePart());\n      return newNode(Token.IF, conditionNode, trueNode, falseNode);\n    }\n\n    @Override\n    public Node visitReturnStatement(ReturnStatement node) {\n      if (node.getReturnValue() == null) {\n        return newNode(Token.RETURN);\n      } else {\n        return newNode(Token.RETURN, transform(node.getReturnValue()));\n      }\n    }\n\n    @Override\n    publi",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a910d68f 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,182 +385,387 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory extends Parser {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\"use asm\", \"use strict\");\n+\n+  private String sourceName;\n+  private ErrorReporter errorReporter;\n+\n+  public IRFactory() {\n+    super(new CompilerEnvirons());\n+    // Create an ErrorReporter that won't throw an exception for warnings\n+    // and can record other information.\n+    this.setErrorReporter(new ErrorReporter() {\n+      private ArrayList<String> errors = new ArrayList<>();\n+\n+      @Override\n+      public void warning(String message, String sourceName, int line, String lineSource,\n+          int lineOffset) {}\n+\n+      @Override\n+      public void error(String message, String sourceName, int line, String lineSource,\n+          int lineOffset) {\n+        errors.add(message);\n+      }\n+\n+      @Override\n+      public EvaluatorException runtimeError(String message, String sourceName, int line,\n+          String lineSrc, int lineOffset) {\n+        return null;\n+      }\n+\n+      public String[] getErrors() {\n+        return errors.toArray(new String[0]);\n+      }\n+    });\n+    this.setRecordingComments(true);\n+  }\n+\n+  private Node parse(String code) {\n+    sourceName = \"irfactory\";\n+    return super.parse(code, null, 0);\n+  }\n+\n+  public String[] getErrors() {\n+    return ((ErrorReporter) this.getErrorReporter()).getErrors();\n+  }\n+\n+  void setErrorReporter(ErrorReporter errorReporter) {\n+    this.errorReporter = errorReporter;\n+  }\n+\n+  @Override\n+  Node parseFunctionBody(String parameters) throws IOException, RecognitionException {\n+    String params = (parameters == null) ? \"\" : parameters;\n+    Node result = super.parseFunctionBody(params);\n+    result.setStaticSourceFile(sourceName);\n+    return result;\n+  }\n+\n+  // Transforms a whole script.\n+  public Node transformTree(Node tree) {\n+    NodeTraversal.traverseEs6(compiler, tree, new InferJSType(compiler));\n+    NodeTraversal.traverseEs6(compiler, tree, new CheckVars(compiler, true));\n+    new DefaultPassConfig(null).process(null, tree);\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    return tree;\n+  }\n+\n+  // Processes a functionNode.  Returns the transformed tree.\n+  private Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    Boolean isUnnamedFunction = false;\n+    if (name == null) {\n+      name = new Name();\n+      name.setIdentifier(\"\");\n+      isUnnamedFunction = true;\n+    }\n+    Node node = newNode(Token.FUNCTION);\n+    Node newName = transform(name);\n+\n+    if (isUnnamedFunction) {\n+      newName.setLineno(functionNode.getLineno());\n+      int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+      newName.setCharno(position2charno(lpColumn));\n+    }\n+\n+    node.addChildToBack(newName);\n+    Node lp = newNode(Token.LP);\n+\n+    Name fnName = functionNode.getFunctionName();\n+    if (fnName != null) {\n+      lp.setLineno(fnName.getLineno());\n+    } else {\n+      lp.setLineno(functionNode.getLineno());\n+    }\n+\n+    int lparenCharno = functionNode.getLp() +\n+        functionNode.getAbsolutePosition();\n+    lp.setCharno(position2charno(lparenCharno));\n+\n+    for (AstNode param : functionNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n+    }\n+\n+    node.addChildToBack(lp);\n+\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+\n+    return node;\n+  }\n+\n+  // Convenience wrapper function.\n+  public static Node buildAstFromString(String sourceCode) {\n+    return new IRFactory().transformTree(new IRFactory().parse(sourceCode));\n+  }\n+\n+  // Simplified version for testing.\n+  public static Node buildMinimalAstFromString(String sourceCode) {\n+    IRFactory factory = new IRFactory();\n+    Node node = factory.parse(sourceCode);\n+    factory.process(node);\n+    return node;\n+  }\n+\n+  private int position2CharNum(int absolutePosition) {\n+    return new CharIterator(new StringReader(getSourceLine(absolutePosition))).next();\n+  }\n+\n+  private void parseDirectives(Node n) {\n+    if (!isDirective(n)) {\n+      return;\n+    }\n+\n+    int directiveType = n.getFirstChild().getType();\n+    if (directiveType == Token.STRING) {\n+      String directive = n.getFirstChild().getString();\n+      if (directive.startsWith(\"use \")) {\n+        if (!ALLOWED_DIRECTIVES.contains(directive)) {\n+          errorReporter.error(\n+              \"Illegal directive: \" + directive, sourceName, n.getLineno(), \"\", 0);\n+        }\n+      }\n+    }\n+  }\n+\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+        n.getFirstChild().getType() == Token.STRING &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  private Node transform(AstNode root) {\n+    return root == null ? null :\n+        (Node) root.visit(new TransformDispatcher(), null);\n+  }\n+\n+  private Node transformBlock(Block blockNode) {\n+    Node result = newNode(Token.BLOCK);\n+    for (Node n : blockNode) {\n+      result.addChildToBack(transform(n));\n+    }\n+    return result;\n+  }\n+\n+  private Node newNode(int type) {\n+    return new Node(type);\n+  }\n+\n+  private Node newNode(int type, Node first) {\n+    Node result = new Node(type);\n+    result.addChildToBack(first);\n+    return result;\n+  }\n+\n+  private Node newNode(int type, Node first, Node second) {\n+    Node result = new Node(type);\n+    result.addChildToBack(first);\n+    result.addChildToBack(second);\n+    return result;\n+  }\n+\n+  private Node newNode(int type, Node first, Node second, Node third) {\n+    Node result = new Node(type);\n+    result.addChildToBack(first);\n+    result.addChildToBack(second);\n+    result.addChildToBack(third);\n+    return result;\n+  }\n+\n+  private Node processGeneric(Node node) {\n+    if (node instanceof AstRoot) {\n+      return process((AstRoot) node);\n+    } else if (node instanceof Block) {\n+      return processBlock((Block) node);\n+    }\n+    return null;\n+  }\n+\n+  private Node process(AstRoot root) {\n+    Node scriptNode = newNode(Token.SCRIPT);\n+    for (Node kid : root) {\n+      Node n = transform(kid);\n+      if (n != null) {\n+        parseDirectives(n);\n+        scriptNode.addChildToBack(n);\n+      }\n+    }\n+    return scriptNode;\n+  }\n+\n+  private Node processBlock(Block blockNode) {\n+    return transformBlock(blockNode);\n+  }\n+\n+  private int position2charno(int position) {\n+    return new CharIterator(new StringReader(getSourceLine(position))).next();\n+  }\n+\n+  // A Handler that supports all the nodes that we care about.\n+  private class TransformDispatcher implements NodeVisitor<Node> {\n+    public Node visit(AstNode node) {\n+      return node == null ? null : node.visit(this);\n+    }\n+\n+    public Node defaultAction(AstNode node, Node parent) {\n+      Node result = null;\n+      for (AstNode kid : node) {\n+        Node n = kid.visit(this);\n+        if (n != null) {\n+          if (result == null) {\n+            result = newNode(transformTokenType(node.getType()));\n+            if (parent != null) {\n+              parent.addChildToBack(result);\n+            }\n+          }\n+          result.addChildToBack(n);\n+        }\n+      }\n+      return result;\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    public Node visitArrayComprehension(ArrayComprehension node) {\n+      return null;\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n+      return null;\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    public Node visitArrayLiteral(ArrayLiteral node) {\n+      return defaultAction(node, null);\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    public Node visitAstRoot(AstRoot node) {\n+      return process(node);\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+    public Node visitBlock(Block node) {\n+      return processBlock(node);\n+    }\n+\n+    @Override\n+    public Node visitBreakStatement(BreakStatement node) {\n+      Node result = newNode(Token.BREAK);\n+      if (node.getBreakLabel() != null) {\n+        Node labelName = newNode(Token.LABEL_NAME, node.getBreakLabel().getIdentifier());\n+        result.addChildToBack(labelName);\n       }\n-      return node;\n+      return result;\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    public Node visitName(Name node) {\n+      return newNode(Token.NAME, node.getIdentifier());\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    public Node visitNumberLiteral(NumberLiteral node) {\n+      return new NumberNode(node.getNumber());\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    public Node visitStringLiteral(StringLiteral node) {\n+      return newNode(Token.STRING, node.getValue());\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    public Node visitRegExpLiteral(RegExpLiteral node) {\n+      return new RegExpLiteral(\n+          node.getJsDoc(), node.getValue(), node.getFlags());\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    public Node visitObjectLiteral(ObjectLiteral node) {\n+      Node result = newNode(Token.OBJECTLIT);\n+      for (ObjectProperty property : node.getObjectProps()) {\n+        Node identifier = transform(property.getLeft());\n+        Node value = transform(property.getRight());\n+        if (identifier != null) {\n+          identifier.addChildToFront(value);\n+          result.addChildToBack(identifier);\n+        }\n+      }\n+      return result;\n     }\n \n     @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    public Node visitObjectProperty(ObjectProperty node) {\n+      throw new RuntimeException(\"Unexpected visit of ObjectProperty\");\n     }\n \n     @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+    public Node visitPropertyGet(PropertyGet node) {\n+      Node targetType = transform(node.getTarget());\n+      Node propertyName = transform(node.getProperty());\n+      return newNode(Token.GETPROP, targetType, propertyName);\n+    }\n+    \n+    @Override\n+    public Node visitParenthesizedExpression(ParenthesizedExpression node) {\n+      return transform(node.getExpression());\n+    }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+    @Override\n+    public Node visitPropertySet(PropertySet node) {\n+      Node targetType = transform(node.getTarget());\n+      Node propertyName = transform(node.getProperty());\n+      Node functionNode = transformFunction(node.getLineno(), false, node.getFunction());\n+      return newNode(Token.SETPROP, targetType, propertyName, functionNode);\n     }\n \n     @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n+    public Node visitFunctionCall(FunctionCall node) {\n+      Node result = newNode(Token.CALL, transform(node.getTarget()));\n+      for (AstNode arg : node.getArguments()) {\n+        result.addChildToBack(transform(arg));\n       }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n+      if (node.getArguments().size() == 0) {\n+        Node lp = newNode(Token.LP);\n+        lp.setLineno(node.getLineno());\n+        int lparenCharno = node.getAbsolutePosition() + node.getTarget().getLength();\n+        lp.setCharno(position2CharNum(lparenCharno));\n+        result.addChildToBack(lp);\n       }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+      int leftParamPos = node.getAbsolutePosition() + node.getLp();\n+      result.setLineno(node.getLineno());\n+      result.setCharno(position2CharNum(leftParamPos));\n+      return result;\n+    }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    @Override\n+    public Node visitIfStatement(IfStatement node) {\n+      Node conditionNode = transform(node.getCondition());\n+      Node trueNode = transform(node.getThenPart());\n+      Node falseNode = transform(node.getElsePart());\n+      return newNode(Token.IF, conditionNode, trueNode, falseNode);\n     }\n \n+    @Override\n+    public Node visitReturnStatement(ReturnStatement node) {\n+      if (node.getReturnValue() == null) {\n+        return newNode(Token.RETURN);\n+      } else {\n+        return newNode(Token.RETURN, transform(node.getReturnValue()));\n+      }\n+    }\n+\n+    @Override\n+    publi\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}