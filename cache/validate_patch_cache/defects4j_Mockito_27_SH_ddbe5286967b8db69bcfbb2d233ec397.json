{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\nif (mock instanceof Factory) {\n    Factory factory = (Factory) mock;\n\n    Callback[] callbacks = ((Factory) mock).getCallbacks();\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof MockHandler) {\n            callbacks[i] = newFilter;\n        }\n    }\n    factory.setCallbacks(callbacks);\n} else if (mock instanceof MockitoSpy) {\n    MockitoCore mockitoCore = new MockitoCore();\n    MockitoFramework framework = mockitoCore.getMockitoFramework();\n    framework.clearInlineMocks();\n    framework.clearMockProgress();\n    framework.updateMockCreationSettings(mock, withSettings().defaultAnswer(RETURNS_SMART_NULLS));\n\n    Object spiedInstance = ((MockitoSpy) mock).getSpiedInstance();\n    Class<?> spiedInstanceClass = spiedInstance.getClass();\n\n    Field[] fields = getAllFields(spiedInstanceClass);\n    for (Field field : fields) {\n        if (field.getType().equals(mock.getClass())) {\n            field.setAccessible(true);\n            Object fieldValue = null;\n            try {\n                fieldValue = field.get(spiedInstance);\n            } catch (IllegalAccessException iae) {\n                iae.printStackTrace();\n            }\n            if (fieldValue != null) {\n                resetMock(fieldValue);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8b0e31687 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,48 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+if (mock instanceof Factory) {\n+    Factory factory = (Factory) mock;\n+\n+    Callback[] callbacks = ((Factory) mock).getCallbacks();\n+    for (int i = 0; i < callbacks.length; i++) {\n+        if (callbacks[i] instanceof MockHandler) {\n+            callbacks[i] = newFilter;\n+        }\n+    }\n+    factory.setCallbacks(callbacks);\n+} else if (mock instanceof MockitoSpy) {\n+    MockitoCore mockitoCore = new MockitoCore();\n+    MockitoFramework framework = mockitoCore.getMockitoFramework();\n+    framework.clearInlineMocks();\n+    framework.clearMockProgress();\n+    framework.updateMockCreationSettings(mock, withSettings().defaultAnswer(RETURNS_SMART_NULLS));\n+\n+    Object spiedInstance = ((MockitoSpy) mock).getSpiedInstance();\n+    Class<?> spiedInstanceClass = spiedInstance.getClass();\n+\n+    Field[] fields = getAllFields(spiedInstanceClass);\n+    for (Field field : fields) {\n+        if (field.getType().equals(mock.getClass())) {\n+            field.setAccessible(true);\n+            Object fieldValue = null;\n+            try {\n+                fieldValue = field.get(spiedInstance);\n+            } catch (IllegalAccessException iae) {\n+                iae.printStackTrace();\n+            }\n+            if (fieldValue != null) {\n+                resetMock(fieldValue);\n+            }\n+        }\n+    }\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}