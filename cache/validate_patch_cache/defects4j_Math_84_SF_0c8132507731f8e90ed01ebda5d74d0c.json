{
    "patch": "protected void iterateSimplex(final Comparator<PointValuePair> comparator)\n        throws TooManyEvaluationsException, EvaluationException, OptimizationException {\n    while (true) {\n        incrementIterationsCounter();\n        final PointValuePair[] vertices = simplex.getVertices();\n        final PointValuePair best = vertices[0];\n        final PointValuePair worst = vertices[vertices.length - 1];\n\n        // Perform a reflection\n        final PointValuePair reflected = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best,\n                ReflectionCoefficient.REFLECTION_COEFFICIENT_MULTIPLIER), comparator);\n        if (comparator.compare(reflected, worst) < 0) { // reflected point is better than the worst point\n            final PointValuePair expanded = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best,\n                    ReflectionCoefficient.EXPANSION_COEFFICIENT), comparator);\n            if (comparator.compare(reflected, expanded) <= 0) { // reflected point is better than (or equal to) the expanded point\n                simplex.setVertex(vertices.length - 1, expanded); // replace worst point with expanded point\n            } else {\n                simplex.setVertex(vertices.length - 1, reflected); // replace worst point with reflected point\n            }\n        } else {\n            final PointValuePair contracted = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best,\n                    ReflectionCoefficient.CONTRACTION_COEFFICIENT), comparator);\n            if (comparator.compare(contracted, worst) < 0) { // contracted point is better than worst point\n                simplex.setVertex(vertices.length - 1, contracted); // replace worst point with contracted point\n            } else {\n                // Shrink the simplex\n                final PointValuePair[] newPoints = AbstractSimplex.transformSimplex(vertices, best,\n                        ReflectionCoefficient.SHRINK_COEFFICIENT);\n                simplex.setVertices(newPoints); // reset the simplex to the new points (excluding the best point)\n            }\n        }\n\n        final PointValuePair newBest = simplex.getVertex(0);\n        if (isConverged(best, newBest)) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..62f30d865 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,44 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+protected void iterateSimplex(final Comparator<PointValuePair> comparator)\n+        throws TooManyEvaluationsException, EvaluationException, OptimizationException {\n+    while (true) {\n+        incrementIterationsCounter();\n+        final PointValuePair[] vertices = simplex.getVertices();\n+        final PointValuePair best = vertices[0];\n+        final PointValuePair worst = vertices[vertices.length - 1];\n+\n+        // Perform a reflection\n+        final PointValuePair reflected = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best,\n+                ReflectionCoefficient.REFLECTION_COEFFICIENT_MULTIPLIER), comparator);\n+        if (comparator.compare(reflected, worst) < 0) { // reflected point is better than the worst point\n+            final PointValuePair expanded = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best,\n+                    ReflectionCoefficient.EXPANSION_COEFFICIENT), comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) { // reflected point is better than (or equal to) the expanded point\n+                simplex.setVertex(vertices.length - 1, expanded); // replace worst point with expanded point\n+            } else {\n+                simplex.setVertex(vertices.length - 1, reflected); // replace worst point with reflected point\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        } else {\n+            final PointValuePair contracted = evaluateNewSimplex(AbstractSimplex.transformSimplex(vertices, best,\n+                    ReflectionCoefficient.CONTRACTION_COEFFICIENT), comparator);\n+            if (comparator.compare(contracted, worst) < 0) { // contracted point is better than worst point\n+                simplex.setVertex(vertices.length - 1, contracted); // replace worst point with contracted point\n+            } else {\n+                // Shrink the simplex\n+                final PointValuePair[] newPoints = AbstractSimplex.transformSimplex(vertices, best,\n+                        ReflectionCoefficient.SHRINK_COEFFICIENT);\n+                simplex.setVertices(newPoints); // reset the simplex to the new points (excluding the best point)\n             }\n-\n         }\n \n+        final PointValuePair newBest = simplex.getVertex(0);\n+        if (isConverged(best, newBest)) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}