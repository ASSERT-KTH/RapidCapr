{
    "patch": "        if (parent != null && parent.isVar()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getFirstChild().getQualifiedName();\n            // check if the variable is aliased\n            Var aliasVar = scope.getVar(name);\n            if (aliasVar != null) {\n              aliases.put(name, aliasVar);\n              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n              transformation.addAlias(name, qualifiedName);\n            } else {\n              if (isPrivateName(name)) {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n              }\n            }\n          } else {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n    }\n    \n    private boolean isPrivateName(String name) {\n      return name.startsWith(PRIVATE_PREFIX);\n    }\n    \n    private static final String PRIVATE_PREFIX = \"___\";",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..eb8048b2 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,32 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n+        if (parent != null && parent.isVar()) {\n           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+            String name = n.getFirstChild().getQualifiedName();\n+            // check if the variable is aliased\n+            Var aliasVar = scope.getVar(name);\n+            if (aliasVar != null) {\n+              aliases.put(name, aliasVar);\n+              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+              transformation.addAlias(name, qualifiedName);\n+            } else {\n+              if (isPrivateName(name)) {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+              }\n+            }\n+          } else {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          }\n         }\n       }\n     }\n+    \n+    private boolean isPrivateName(String name) {\n+      return name.startsWith(PRIVATE_PREFIX);\n+    }\n+    \n+    private static final String PRIVATE_PREFIX = \"___\";\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}