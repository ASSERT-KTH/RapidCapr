{
    "patch": "    public static Fraction getFraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"denominator must not be zero\");\n        }\n        if (numerator == 0) {\n            return ZERO;\n        }\n        if (denominator == 1) {\n            return Fraction.getFraction(numerator);\n        }\n        boolean negative = (numerator < 0 != denominator < 0);\n        numerator = Math.abs(numerator);\n        denominator = Math.abs(denominator);\n\n        // Reduce fraction if possible.\n        int gcd = greatestCommonDivisor(numerator, denominator);\n        numerator /= gcd;\n        denominator /= gcd;\n\n        return negative ? new Fraction(-numerator, denominator) : new Fraction(numerator, denominator);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..41dd0459 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,26 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+    public static Fraction getFraction(int numerator, int denominator) {\n+        if (denominator == 0) {\n+            throw new ArithmeticException(\"denominator must not be zero\");\n+        }\n+        if (numerator == 0) {\n+            return ZERO;\n+        }\n+        if (denominator == 1) {\n+            return Fraction.getFraction(numerator);\n+        }\n+        boolean negative = (numerator < 0 != denominator < 0);\n+        numerator = Math.abs(numerator);\n+        denominator = Math.abs(denominator);\n+\n+        // Reduce fraction if possible.\n+        int gcd = greatestCommonDivisor(numerator, denominator);\n+        numerator /= gcd;\n+        denominator /= gcd;\n+\n+        return negative ? new Fraction(-numerator, denominator) : new Fraction(numerator, denominator);\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}