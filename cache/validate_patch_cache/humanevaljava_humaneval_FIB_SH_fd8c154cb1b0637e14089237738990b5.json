{
    "patch": "    private static int[] memo; // global memoization array\n    \n    public static int fib(int n) {\n        memo = new int[n+1]; // initialize memoization array\n        return memoFib(n);\n    }\n    \n    private static int memoFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        if (memo[n] != 0) { // if result is memoized\n            return memo[n];\n        }\n        memo[n] = memoFib(n-1) + memoFib(n-2); // memoize result\n        return memo[n];\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIB.java b/src/main/java/humaneval/buggy/FIB.java\nindex fdc9c32..d98fd8a 100644\n--- a/src/main/java/humaneval/buggy/FIB.java\n+++ b/src/main/java/humaneval/buggy/FIB.java\n@@ -10,6 +10,23 @@ package humaneval.buggy;\n \n public class FIB {\n     public static int fib(int n) {\n+    private static int[] memo; // global memoization array\n+    \n+    public static int fib(int n) {\n+        memo = new int[n+1]; // initialize memoization array\n+        return memoFib(n);\n+    }\n+    \n+    private static int memoFib(int n) {\n+        if (n <= 1) {\n+            return n;\n+        }\n+        if (memo[n] != 0) { // if result is memoized\n+            return memo[n];\n+        }\n+        memo[n] = memoFib(n-1) + memoFib(n-2); // memoize result\n+        return memo[n];\n+    }\n         return fib(n - 1) + fib(n - 2);\n     }\n }",
    "result_reason": " /tmp/humaneval-FIB/src/main/java/humaneval/buggy/FIB.java:[13,5] illegal start of expression",
    "test_result": "ERROR"
}