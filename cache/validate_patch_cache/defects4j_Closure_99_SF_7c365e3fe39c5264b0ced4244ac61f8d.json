{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors, have the @this, or @override annotation, or are nested\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        Node gramps = parent.getParent();\n        // Don't traverse nested functions\n        if(gramps != null && gramps.getType() == Token.CALL) {\n            return false;\n        }\n        // Don't traverse functions not defined in the global scope, unless they are assigned to properties of objects\n        if((!t.getScope().isGlobal()) && !(parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.GETPROP)) {\n            return false;\n        }\n    }\n\n    if (n.getType() == Token.GETPROP || n.getType() == Token.CALL) {\n        // Don't traverse object properties or function calls outside of the global scope\n        if (!t.getScope().isGlobal()) {\n            return false;\n        }\n        Node ancestor = parent;\n        while (ancestor.getParent() != null) {\n            ancestor = ancestor.getParent();\n            if (ancestor.getType() == Token.CALL) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..af3d56b6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,41 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        // Don't traverse functions that are constructors, have the @this, or @override annotation, or are nested\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        Node gramps = parent.getParent();\n+        // Don't traverse nested functions\n+        if(gramps != null && gramps.getType() == Token.CALL) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+        // Don't traverse functions not defined in the global scope, unless they are assigned to properties of objects\n+        if((!t.getScope().isGlobal()) && !(parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.GETPROP)) {\n             return false;\n-          }\n-      }\n+        }\n+    }\n+\n+    if (n.getType() == Token.GETPROP || n.getType() == Token.CALL) {\n+        // Don't traverse object properties or function calls outside of the global scope\n+        if (!t.getScope().isGlobal()) {\n+            return false;\n+        }\n+        Node ancestor = parent;\n+        while (ancestor.getParent() != null) {\n+            ancestor = ancestor.getParent();\n+            if (ancestor.getType() == Token.CALL) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}