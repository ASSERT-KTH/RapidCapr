{
    "patch": "if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\nwhile (currentStrategy != null && patternMatcher.find()) {\n    currentFormatField = patternMatcher.group();\n    currentStrategy = getStrategy(currentFormatField);\n    if(currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n}\ncurrentFormatField = null;\nif(collector.isEmpty()){\n    throw new IllegalArgumentException(\"Empty pattern\");\n}\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..20aec8ef 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,22 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+while (currentStrategy != null && patternMatcher.find()) {\n+    currentFormatField = patternMatcher.group();\n+    currentStrategy = getStrategy(currentFormatField);\n+    if(currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+}\n+currentFormatField = null;\n+if(collector.isEmpty()){\n+    throw new IllegalArgumentException(\"Empty pattern\");\n+}\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}