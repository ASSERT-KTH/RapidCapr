{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)\n        && !parent.hasOneChild()) {\n      /*\n       * Patch for assignments that appear in the init, condition or\n       * iteration part of a FOR loop.  Without this change, all 3 of those\n       * parts try to claim the for loop as their dependency scope. The\n       * last assignment in those three fields wins, which can result in\n       * incorrect reference edges between referenced and assigned\n       * variables.\n       *\n       * Fix: Only the last statement of the parts are considered as\n       * dependency scopes to avoid the problems.\n       *\n       * TODO(user): revisit the dependency scope calculation logic.\n       */\n      if (n.getNext() != parent.getLastChild()) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else {\n      /*\n       * The rhs of the assignment is the caller, so it's used by the\n       * context. Don't associate it w/ the lhs.\n       *\n       * Unfortunately, this fixes only the specific case where the\n       * assignment is the caller expression.\n       *\n       * Also See testAssignWithCall2 for an example of this.\n       * It also does not handle chain assignment when the rhs is a\n       * function call.\n       */\n      if (NodeUtil.isExpressionParent(parent) &&\n          !NodeUtil.isCallOrNew(parent)) {\n        recordDepScope(recordNode, ns);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..51e4f4ec 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,37 +555,50 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n-        } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n-        }\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+  Node nameNode = n.getFirstChild();\n+  Node parent = n.getParent();\n+  NameInformation ns = createNameInformation(t, nameNode);\n+  if (ns != null) {\n+    if (parent.isFor() && !NodeUtil.isForIn(parent)\n+        && !parent.hasOneChild()) {\n+      /*\n+       * Patch for assignments that appear in the init, condition or\n+       * iteration part of a FOR loop.  Without this change, all 3 of those\n+       * parts try to claim the for loop as their dependency scope. The\n+       * last assignment in those three fields wins, which can result in\n+       * incorrect reference edges between referenced and assigned\n+       * variables.\n+       *\n+       * Fix: Only the last statement of the parts are considered as\n+       * dependency scopes to avoid the problems.\n+       *\n+       * TODO(user): revisit the dependency scope calculation logic.\n+       */\n+      if (n.getNext() != parent.getLastChild()) {\n+        recordDepScope(recordNode, ns);\n+      } else {\n+        recordDepScope(nameNode, ns);\n+      }\n+    } else {\n+      /*\n+       * The rhs of the assignment is the caller, so it's used by the\n+       * context. Don't associate it w/ the lhs.\n+       *\n+       * Unfortunately, this fixes only the specific case where the\n+       * assignment is the caller expression.\n+       *\n+       * Also See testAssignWithCall2 for an example of this.\n+       * It also does not handle chain assignment when the rhs is a\n+       * function call.\n+       */\n+      if (NodeUtil.isExpressionParent(parent) &&\n+          !NodeUtil.isCallOrNew(parent)) {\n+        recordDepScope(recordNode, ns);\n       }\n     }\n+  }\n+}\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}