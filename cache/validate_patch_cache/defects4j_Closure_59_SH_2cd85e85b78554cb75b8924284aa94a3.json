{
    "patch": "if (options.checkGlobalThisLevel != null) {\n      if (!options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n        options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel.isOn() ? options.checkGlobalThisLevel : CheckLevel.WARNING);\n      } else if (options.checkGlobalThisLevel.isOn()) {\n        errorManager.report(CheckLevel.WARNING, JSError.make(MISSING_GLOBAL_THIS_CONTEXT));\n      }\n    } else if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n      errorManager.report(CheckLevel.WARNING, JSError.make(MISSING_GLOBAL_THIS_LEVEL));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..392c2a50 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,16 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != null) {\n+      if (!options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n+        options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          options.checkGlobalThisLevel.isOn() ? options.checkGlobalThisLevel : CheckLevel.WARNING);\n+      } else if (options.checkGlobalThisLevel.isOn()) {\n+        errorManager.report(CheckLevel.WARNING, JSError.make(MISSING_GLOBAL_THIS_CONTEXT));\n+      }\n+    } else if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+      errorManager.report(CheckLevel.WARNING, JSError.make(MISSING_GLOBAL_THIS_LEVEL));\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}