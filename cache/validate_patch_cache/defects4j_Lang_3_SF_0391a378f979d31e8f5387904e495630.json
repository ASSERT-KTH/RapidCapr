{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tif (StringUtils.isBlank(str)) {\n\t\tthrow new NumberFormatException(\"A blank string is not a valid number\");\n\t}\n\n\t// Need to deal with all possible hex prefixes here\n\tfinal String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n\tint pfxLen = 0;\n\tfor(final String pfx : hex_prefixes) {\n\t\tif (str.startsWith(pfx)) {\n\t\t\tpfxLen += pfx.length();\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (pfxLen > 0) { // we have a hex number\n\t\tfinal int hexDigits = str.length() - pfxLen;\n\t\tif (hexDigits > 16) { // too many for Long\n\t\t\treturn createBigInteger(str);\n\t\t}\n\t\tif (hexDigits > 8) { // too many for an int\n\t\t\treturn createLong(str);\n\t\t}\n\t\treturn createInteger(str);\n\t}\n\n\tfinal char lastChar = str.charAt(str.length() - 1);\n\tString mant;\n\tString dec;\n\tString exp;\n\tfinal int decPos = str.indexOf('.');\n\tfinal int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n\t// if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n\t// and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n\tif (decPos > -1) { // there is a decimal point\n\n\t\tif (expPos > -1) { // there is an exponent\n\t\t\tif (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n\t\t\t}\n\t\t\tdec = str.substring(decPos + 1, expPos);\n\t\t} else {\n\t\t\tdec = str.substring(decPos + 1);\n\t\t}\n\t\tmant = str.substring(0, decPos);\n\n\t} else {\n\t\tif (expPos > -1) {\n\t\t\tif (expPos > str.length()) { // prevents double exponent causing IOOBE\n\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n\t\t\t}\n\t\t\tmant = str.substring(0, expPos);\n\t\t} else {\n\t\t\tmant = str;\n\t\t}\n\t\tdec = null;\n\t}\n\n\tif (!Character.isDigit(lastChar) && lastChar != '.') {\n\t\tif (expPos > -1 && expPos < str.length() - 1) {\n\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n\t\t} else {\n\t\t\texp = null;\n\t\t}\n\t\t//Requesting a specific type..\n\t\tfinal String numeric = str.substring(0, str.length() - 1);\n\t\tswitch (lastChar) {\n\t\t\tcase 'l' :\n\t\t\tcase 'L' :\n\t\t\t\tif (dec == null\n\t\t\t\t\t&& exp == null\n\t\t\t\t\t&& (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn createLong(numeric);\n\t\t\t\t\t} catch (final NumberFormatException nfe) { // NOPMD\n\t\t\t\t\t\t// Too big for a long\n\t\t\t\t\t}\n\t\t\t\t\treturn createBigInteger(numeric);\n\n\t\t\t\t}\n\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n\t\t\tcase 'f' :\n\t\t\tcase 'F' :\n\t\t\t\ttry {\n\t\t\t\t\tfinal Float f = NumberUtils.createFloat(numeric);\n\t\t\t\t\tif (!(f.isInfinite() || f.isNaN())) {\n\t\t\t\t\t\treturn f;\n\t\t\t\t\t}\n\n\t\t\t\t} catch (final NumberFormatException nfe) { // NOPMD\n\t\t\t\t\t// ignore the bad number\n\t\t\t\t}\n\t\t\t\t//$FALL-THROUGH$\n\t\t\tcase 'd' :\n\t\t\tcase 'D' :\n\t\t\t\ttry {\n\t\t\t\t\tfinal Double d = NumberUtils.createDouble(numeric);\n\t\t\t\t\tif (!(d.isInfinite() || d.isNaN())) {\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t}\n\t\t\t\t} catch (final NumberFormatException nfe) { // NOPMD\n\t\t\t\t\t// ignore the bad number\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\treturn createBigDecimal(numeric);\n\t\t\t\t} catch (final NumberFormatException e) { // NOPMD\n\t\t\t\t\t// ignore the bad number\n\t\t\t\t}\n\t\t\t\t//$FALL-THROUGH$\n\t\t\tdefault :\n\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n\n\t\t}\n\t}\n\t//User doesn't have a preference on the return type, so let's start\n\t//small and go from there...\n\tif (expPos > -1 && expPos < str.length() - 1) {\n\t\texp = str.substring(expPos + 1, str.length());\n\t} else {\n\t\texp = null;\n\t}\n\tif (dec == null &",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex c5840215..5d38ece0 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,167 +447,131 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n-        }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n-        }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-        try {\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-\n-        return createBigDecimal(str);\n-    }\n+public static Number createNumber(final String str) throws NumberFormatException {\n+\tif (str == null) {\n+\t\treturn null;\n+\t}\n+\tif (StringUtils.isBlank(str)) {\n+\t\tthrow new NumberFormatException(\"A blank string is not a valid number\");\n+\t}\n+\n+\t// Need to deal with all possible hex prefixes here\n+\tfinal String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n+\tint pfxLen = 0;\n+\tfor(final String pfx : hex_prefixes) {\n+\t\tif (str.startsWith(pfx)) {\n+\t\t\tpfxLen += pfx.length();\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\tif (pfxLen > 0) { // we have a hex number\n+\t\tfinal int hexDigits = str.length() - pfxLen;\n+\t\tif (hexDigits > 16) { // too many for Long\n+\t\t\treturn createBigInteger(str);\n+\t\t}\n+\t\tif (hexDigits > 8) { // too many for an int\n+\t\t\treturn createLong(str);\n+\t\t}\n+\t\treturn createInteger(str);\n+\t}\n+\n+\tfinal char lastChar = str.charAt(str.length() - 1);\n+\tString mant;\n+\tString dec;\n+\tString exp;\n+\tfinal int decPos = str.indexOf('.');\n+\tfinal int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n+\t// if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n+\t// and the parsing which will detect if e or E appear in a number due to using the wrong offset\n+\n+\tif (decPos > -1) { // there is a decimal point\n+\n+\t\tif (expPos > -1) { // there is an exponent\n+\t\t\tif (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tdec = str.substring(decPos + 1, expPos);\n+\t\t} else {\n+\t\t\tdec = str.substring(decPos + 1);\n+\t\t}\n+\t\tmant = str.substring(0, decPos);\n+\n+\t} else {\n+\t\tif (expPos > -1) {\n+\t\t\tif (expPos > str.length()) { // prevents double exponent causing IOOBE\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\tmant = str.substring(0, expPos);\n+\t\t} else {\n+\t\t\tmant = str;\n+\t\t}\n+\t\tdec = null;\n+\t}\n+\n+\tif (!Character.isDigit(lastChar) && lastChar != '.') {\n+\t\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\t\texp = str.substring(expPos + 1, str.length() - 1);\n+\t\t} else {\n+\t\t\texp = null;\n+\t\t}\n+\t\t//Requesting a specific type..\n+\t\tfinal String numeric = str.substring(0, str.length() - 1);\n+\t\tswitch (lastChar) {\n+\t\t\tcase 'l' :\n+\t\t\tcase 'L' :\n+\t\t\t\tif (dec == null\n+\t\t\t\t\t&& exp == null\n+\t\t\t\t\t&& (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\treturn createLong(numeric);\n+\t\t\t\t\t} catch (final NumberFormatException nfe) { // NOPMD\n+\t\t\t\t\t\t// Too big for a long\n+\t\t\t\t\t}\n+\t\t\t\t\treturn createBigInteger(numeric);\n+\n+\t\t\t\t}\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\t\t\tcase 'f' :\n+\t\t\tcase 'F' :\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal Float f = NumberUtils.createFloat(numeric);\n+\t\t\t\t\tif (!(f.isInfinite() || f.isNaN())) {\n+\t\t\t\t\t\treturn f;\n+\t\t\t\t\t}\n+\n+\t\t\t\t} catch (final NumberFormatException nfe) { // NOPMD\n+\t\t\t\t\t// ignore the bad number\n+\t\t\t\t}\n+\t\t\t\t//$FALL-THROUGH$\n+\t\t\tcase 'd' :\n+\t\t\tcase 'D' :\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal Double d = NumberUtils.createDouble(numeric);\n+\t\t\t\t\tif (!(d.isInfinite() || d.isNaN())) {\n+\t\t\t\t\t\treturn d;\n+\t\t\t\t\t}\n+\t\t\t\t} catch (final NumberFormatException nfe) { // NOPMD\n+\t\t\t\t\t// ignore the bad number\n+\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\treturn createBigDecimal(numeric);\n+\t\t\t\t} catch (final NumberFormatException e) { // NOPMD\n+\t\t\t\t\t// ignore the bad number\n+\t\t\t\t}\n+\t\t\t\t//$FALL-THROUGH$\n+\t\t\tdefault :\n+\t\t\t\tthrow new NumberFormatException(str + \" is not a valid number.\");\n+\n+\t\t}\n+\t}\n+\t//User doesn't have a preference on the return type, so let's start\n+\t//small and go from there...\n+\tif (expPos > -1 && expPos < str.length() - 1) {\n+\t\texp = str.substring(expPos + 1, str.length());\n+\t} else {\n+\t\texp = null;\n+\t}\n+\tif (dec == null &\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}