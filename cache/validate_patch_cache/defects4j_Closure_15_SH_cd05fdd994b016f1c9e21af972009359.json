{
    "patch": "        if (n.isCall() || n.isNew() || n.isDelProp()) {\n            return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Check for `getelem` and `getprop` operations that are not accessed with string literals.\n        if ((n.isGetElem() || n.isGetProp()) && !NodeUtil.isGetAccessWithLiteralKey(n)) {\n            return true;\n        }\n\n        // Recurse on child nodes\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n                return true;\n            }\n        }\n        ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..e8266d70 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,22 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isCall() || n.isNew() || n.isDelProp()) {\n+            return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Check for `getelem` and `getprop` operations that are not accessed with string literals.\n+        if ((n.isGetElem() || n.isGetProp()) && !NodeUtil.isGetAccessWithLiteralKey(n)) {\n+            return true;\n+        }\n+\n+        // Recurse on child nodes\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+                return true;\n+            }\n+        }\n+        \n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}