{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType existingPropType = objType.getPropertyType(prop);\n          if (existingPropType != null) {\n            // This infers a merge of the types on the property.\n            // See the \"merge type\" test.\n            JSType inferredType = existingPropType.getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, inferredType, /* jsdoc= */ null);\n          } else {\n            JSType inferredType =\n                propType.isUnknownType() ? getNativeType(VOID_TYPE)\n                    : getNativeType(NULL_TYPE).getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, inferredType, /* jsdoc= */ null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..7a456c89 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,17 +1123,22 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          JSType existingPropType = objType.getPropertyType(prop);\n+          if (existingPropType != null) {\n+            // This infers a merge of the types on the property.\n+            // See the \"merge type\" test.\n+            JSType inferredType = existingPropType.getLeastSupertype(propType);\n+            objType.defineInferredProperty(prop, inferredType, /* jsdoc= */ null);\n+          } else {\n+            JSType inferredType =\n+                propType.isUnknownType() ? getNativeType(VOID_TYPE)\n+                    : getNativeType(NULL_TYPE).getLeastSupertype(propType);\n+            objType.defineInferredProperty(prop, inferredType, /* jsdoc= */ null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}