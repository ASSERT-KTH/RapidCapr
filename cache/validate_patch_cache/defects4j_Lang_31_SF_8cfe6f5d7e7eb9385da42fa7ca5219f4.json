{
    "patch": "public static boolean containsAny(char[] arr1, char[] arr2) {\n    if (arr1 == null || arr2 == null) {\n        return false;\n    }\n    \n    boolean containsSupplementaryChars = containsSupplementaryChars(arr1) || containsSupplementaryChars(arr2);\n    if (!containsSupplementaryChars) {\n        return StringUtils.containsAny(new String(arr1), new String(arr2));\n    }\n    \n    Set<Integer> set2 = new HashSet<>();\n    for (int i = 0; i < arr2.length; i++) {\n        if (Character.isSurrogate(arr2[i])) {\n            if (i < arr2.length - 1 && Character.isSurrogatePair(arr2[i], arr2[i + 1])) {\n                set2.add(Character.toCodePoint(arr2[i], arr2[i + 1]));\n                i++;\n            } else {\n                throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + i + \" of arr2\");\n            }\n        } else {\n            set2.add((int) arr2[i]);\n        }\n    }\n\n    for (int i = 0; i < arr1.length; i++) {\n        if (Character.isSurrogate(arr1[i])) {\n            if (i < arr1.length - 1 && Character.isSurrogatePair(arr1[i], arr1[i + 1])) {\n                int codePoint = Character.toCodePoint(arr1[i], arr1[i + 1]);\n                if (set2.contains(codePoint)) {\n                    return true;\n                }\n                i++;\n            } else {\n                throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + i + \" of arr1\");\n            }\n        } else {\n            if (set2.contains((int) arr1[i])) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nprivate static boolean containsSupplementaryChars(char[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        if (Character.isHighSurrogate(arr[i])) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..ba9fcb2d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,59 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] arr1, char[] arr2) {\n+    if (arr1 == null || arr2 == null) {\n+        return false;\n+    }\n+    \n+    boolean containsSupplementaryChars = containsSupplementaryChars(arr1) || containsSupplementaryChars(arr2);\n+    if (!containsSupplementaryChars) {\n+        return StringUtils.containsAny(new String(arr1), new String(arr2));\n+    }\n+    \n+    Set<Integer> set2 = new HashSet<>();\n+    for (int i = 0; i < arr2.length; i++) {\n+        if (Character.isSurrogate(arr2[i])) {\n+            if (i < arr2.length - 1 && Character.isSurrogatePair(arr2[i], arr2[i + 1])) {\n+                set2.add(Character.toCodePoint(arr2[i], arr2[i + 1]));\n+                i++;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + i + \" of arr2\");\n+            }\n+        } else {\n+            set2.add((int) arr2[i]);\n+        }\n+    }\n+\n+    for (int i = 0; i < arr1.length; i++) {\n+        if (Character.isSurrogate(arr1[i])) {\n+            if (i < arr1.length - 1 && Character.isSurrogatePair(arr1[i], arr1[i + 1])) {\n+                int codePoint = Character.toCodePoint(arr1[i], arr1[i + 1]);\n+                if (set2.contains(codePoint)) {\n+                    return true;\n+                }\n+                i++;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + i + \" of arr1\");\n+            }\n+        } else {\n+            if (set2.contains((int) arr1[i])) {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+private static boolean containsSupplementaryChars(char[] arr) {\n+    for (int i = 0; i < arr.length; i++) {\n+        if (Character.isHighSurrogate(arr[i])) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}