{
    "patch": "          if (topType.isEnumType()) {\n              return caseEnumType(topType.toMaybeEnumType());\n          } else if (topType.isUnionType()) {\n              return caseUnionType(topType.toMaybeUnionType());\n          } else if (topType.isNominalType()) {\n              return caseNominalType(topType.toMaybeNominalType());\n          } else if (topType.isLiteralType()) {\n              return caseLiteralType(topType.toMaybeLiteralType());\n          } else if (topType.isTemplatizedType()) {\n              return caseTemplatizedType(topType.toMaybeTemplatizedType());\n          } else if (topType.isRecordType()) {\n              return caseRecordType(topType.toMaybeRecordType());\n          } else {\n              return topType;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..7040e062 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -51,7 +51,21 @@ public class ClosureReverseAbstractInterpreter\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n-          return topType;\n+          if (topType.isEnumType()) {\n+              return caseEnumType(topType.toMaybeEnumType());\n+          } else if (topType.isUnionType()) {\n+              return caseUnionType(topType.toMaybeUnionType());\n+          } else if (topType.isNominalType()) {\n+              return caseNominalType(topType.toMaybeNominalType());\n+          } else if (topType.isLiteralType()) {\n+              return caseLiteralType(topType.toMaybeLiteralType());\n+          } else if (topType.isTemplatizedType()) {\n+              return caseTemplatizedType(topType.toMaybeTemplatizedType());\n+          } else if (topType.isRecordType()) {\n+              return caseRecordType(topType.toMaybeRecordType());\n+          } else {\n+              return topType;\n+          }\n         }\n \n         @Override",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}