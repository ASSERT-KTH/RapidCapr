{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (x < 0 || a <= 0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (x >= 1 + a) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n    double sum = 1 / a;\n    double term = sum;\n    while (Math.abs(term) > PRECISION * Math.abs(sum)) {\n        term *= x / (a + sum);\n        sum += term;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1 + 76.18009173 / x - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    double igf = igf(a, x);\n    // igf is NaN iff a or x is NaN or negative\n    if (Double.isNaN(igf)) {\n        return Double.NaN;\n    }\n    return 1 - igf;\n}\n\npublic static double igf(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (a <= 0 || x < 0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 0;\n    }\n    double ans = 0;\n    double ax = a * Math.log(x) - x - logGamma(a);\n    if (ax < -MAX_LOG_VALUE) {\n        return 0;\n    }\n\n    ax = Math.exp(ax);\n    double t = 1;\n    double y = a;\n    double z = x + a + 1;\n    double c = 0;\n    double p1 = 1;\n    double q1 = x;\n    double p2 = x + 1;\n    double q2 = z * x;\n    ans = p2 / q2;\n\n    do {\n        c++;\n        y++;\n        z += 2;\n        double e = c * (a - c) * ans / ((p1 * q2) + (q1 * p2));\n        t *= e;\n        ans += t * (p2 + (c - a) * p1) / y;\n        p1 = p2;\n        p2 = ans;\n        q1 = q2;\n        q2 = z * ans;\n        if (Math.abs(ans) < PRECISION) {\n            return ans;\n        }\n    } while (true);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c1712eed1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,88 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    if (x < 0 || a <= 0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    if (x >= 1 + a) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+    double sum = 1 / a;\n+    double term = sum;\n+    while (Math.abs(term) > PRECISION * Math.abs(sum)) {\n+        term *= x / (a + sum);\n+        sum += term;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1 + 76.18009173 / x - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    double igf = igf(a, x);\n+    // igf is NaN iff a or x is NaN or negative\n+    if (Double.isNaN(igf)) {\n+        return Double.NaN;\n+    }\n+    return 1 - igf;\n+}\n+\n+public static double igf(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    if (a <= 0 || x < 0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    double ans = 0;\n+    double ax = a * Math.log(x) - x - logGamma(a);\n+    if (ax < -MAX_LOG_VALUE) {\n+        return 0;\n+    }\n+\n+    ax = Math.exp(ax);\n+    double t = 1;\n+    double y = a;\n+    double z = x + a + 1;\n+    double c = 0;\n+    double p1 = 1;\n+    double q1 = x;\n+    double p2 = x + 1;\n+    double q2 = z * x;\n+    ans = p2 / q2;\n+\n+    do {\n+        c++;\n+        y++;\n+        z += 2;\n+        double e = c * (a - c) * ans / ((p1 * q2) + (q1 * p2));\n+        t *= e;\n+        ans += t * (p2 + (c - a) * p1) / y;\n+        p1 = p2;\n+        p2 = ans;\n+        q1 = q2;\n+        q2 = z * ans;\n+        if (Math.abs(ans) < PRECISION) {\n+            return ans;\n+        }\n+    } while (true);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}