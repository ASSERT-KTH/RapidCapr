{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (String id : ALL_IDS) {\n        if (str.startsWith(id) && (str.length() == id.length() || str.charAt(id.length()) == '/' || Character.isWhitespace(str.charAt(id.length())))) {\n            bucket.setZone(DateTimeZone.forID(id));\n            return position + id.length();\n        } else if (str.contains(\"/\") && str.contains(id)) {\n            String[] split = str.split(\"/\");\n            for (int i = 0; i < split.length; i++) {\n                if (split[i].equals(id)) {\n                    bucket.setZone(DateTimeZone.forID(id));\n                    int slashIndex = str.indexOf(\"/\");\n                    return position + slashIndex + 1 + (id.length() * i);\n                }\n            }\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..5daf0d6e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,26 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    for (String id : ALL_IDS) {\n+        if (str.startsWith(id) && (str.length() == id.length() || str.charAt(id.length()) == '/' || Character.isWhitespace(str.charAt(id.length())))) {\n+            bucket.setZone(DateTimeZone.forID(id));\n+            return position + id.length();\n+        } else if (str.contains(\"/\") && str.contains(id)) {\n+            String[] split = str.split(\"/\");\n+            for (int i = 0; i < split.length; i++) {\n+                if (split[i].equals(id)) {\n                     bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+                    int slashIndex = str.indexOf(\"/\");\n+                    return position + slashIndex + 1 + (id.length() * i);\n                 }\n             }\n-            return ~position;\n         }\n     }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}