{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Object scopeRoot = scope.getRootNode().getProp(Node.GOOG_SCOPE);\n    if (scopeRoot == null) {\n        scopeRoot = scope.getRootNode().getProp(Node.GOOG_MODULE);\n    }\n\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n != null ? n.getParent() : null;\n        if (parent == null || !parent.isVar()) {\n            continue;\n        }\n\n        Node initializer = n.getFirstChild();\n        if (initializer == null || !initializer.isQualifiedName()) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            continue;\n        }\n\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar == null) {\n            continue;\n        }\n        aliases.put(name, aliasVar);\n\n        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n        if (qualifiedName == null) {\n            continue;\n        }\n\n        boolean isPrivate = n.getParent().isAssign() && n.getGrandparent().isExprResult();\n        boolean isNamespaceAlias = qualifiedName.equals(\"goog\") && v.getName().equals(\"namespace\");\n\n        if (isPrivate || isNamespaceAlias) {\n            if (!inFunction) {\n                report(t, n, PRIVATE_MEMBER_VARIABLE, qualifiedName);\n            } else if (!scopeRoot.equals(parent.getParent())) {\n                report(t, n, PRIVATE_MEMBER_VARIABLE, qualifiedName);\n            }\n        }\n\n        transformation.addAlias(name, qualifiedName);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..1f3b9aeb 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,52 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Object scopeRoot = scope.getRootNode().getProp(Node.GOOG_SCOPE);\n+    if (scopeRoot == null) {\n+        scopeRoot = scope.getRootNode().getProp(Node.GOOG_MODULE);\n+    }\n+\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        Node parent = n != null ? n.getParent() : null;\n+        if (parent == null || !parent.isVar()) {\n+            continue;\n+        }\n+\n+        Node initializer = n.getFirstChild();\n+        if (initializer == null || !initializer.isQualifiedName()) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            continue;\n         }\n+\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar == null) {\n+            continue;\n         }\n-      }\n+        aliases.put(name, aliasVar);\n+\n+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+        if (qualifiedName == null) {\n+            continue;\n+        }\n+\n+        boolean isPrivate = n.getParent().isAssign() && n.getGrandparent().isExprResult();\n+        boolean isNamespaceAlias = qualifiedName.equals(\"goog\") && v.getName().equals(\"namespace\");\n+\n+        if (isPrivate || isNamespaceAlias) {\n+            if (!inFunction) {\n+                report(t, n, PRIVATE_MEMBER_VARIABLE, qualifiedName);\n+            } else if (!scopeRoot.equals(parent.getParent())) {\n+                report(t, n, PRIVATE_MEMBER_VARIABLE, qualifiedName);\n+            }\n+        }\n+\n+        transformation.addAlias(name, qualifiedName);\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}