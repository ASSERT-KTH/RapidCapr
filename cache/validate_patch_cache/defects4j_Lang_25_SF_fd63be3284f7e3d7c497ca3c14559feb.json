{
    "patch": "public static String iso8859_1_escape(String input) {\n    StringBuilder output = new StringBuilder();\n\n    for (int i = 0; i < input.length(); i++) {\n        char ch = input.charAt(i);\n\n        // Check if the character needs to be escaped\n        if (ch >= '\\u0080') {\n            // Convert to ISO-8859-1 encoding\n            byte[] bytes = String.valueOf(ch).getBytes(Charset.forName(\"ISO-8859-1\"));\n\n            // Append encoded sequence to output string\n            for (byte b : bytes) {\n                output.append(String.format(\"\\\\x%02X\", b & 0xff));\n            }\n        } else {\n            // Append character as-is to output string\n            output.append(ch);\n        }\n    }\n\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..93a575d8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,29 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String iso8859_1_escape(String input) {\n+    StringBuilder output = new StringBuilder();\n+\n+    for (int i = 0; i < input.length(); i++) {\n+        char ch = input.charAt(i);\n+\n+        // Check if the character needs to be escaped\n+        if (ch >= '\\u0080') {\n+            // Convert to ISO-8859-1 encoding\n+            byte[] bytes = String.valueOf(ch).getBytes(Charset.forName(\"ISO-8859-1\"));\n+\n+            // Append encoded sequence to output string\n+            for (byte b : bytes) {\n+                output.append(String.format(\"\\\\x%02X\", b & 0xff));\n+            }\n+        } else {\n+            // Append character as-is to output string\n+            output.append(ch);\n+        }\n+    }\n+\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}