{
    "patch": "public static double getTypedPercent(JavaScriptObject js) {\n    int total = getTotal(js);\n    int typed = getTyped(js);\n    if (total == 0) {\n        return -1.0;\n    } else {\n        return ((double)typed / (double)total) * 100.0;\n    }\n}\n\npublic static native int getTotal(JavaScriptObject js)/*-{\n    return js.total;\n}-*/;\n\npublic static native int getTyped(JavaScriptObject js)/*-{\n    return js.typed;\n}-*/;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a37c97eb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JavaScriptObject js) {\n+    int total = getTotal(js);\n+    int typed = getTyped(js);\n+    if (total == 0) {\n+        return -1.0;\n+    } else {\n+        return ((double)typed / (double)total) * 100.0;\n+    }\n+}\n+\n+public static native int getTotal(JavaScriptObject js)/*-{\n+    return js.total;\n+}-*/;\n+\n+public static native int getTyped(JavaScriptObject js)/*-{\n+    return js.typed;\n+}-*/;\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}