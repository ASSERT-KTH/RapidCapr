{
    "patch": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class StringUtils {\n\n    public static boolean containsAny(String str, char[] chars) {\n        if (str == null || chars == null) {\n            return false;\n        }\n        int strLength = str.length();\n        int charsLength = chars.length;\n        if (strLength == 0 || charsLength == 0) {\n            return false;\n        }\n        Set<Integer> set = new HashSet<Integer>();\n        int index = 0;\n        while (index < strLength) {\n            int codePoint = str.codePointAt(index);\n            set.add(codePoint);\n            index += Character.charCount(codePoint);\n        }\n        for (int i = 0; i < charsLength; i++) {\n            int codePoint = chars[i];\n            if (set.contains(codePoint)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..760d2063 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,37 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(String str, char[] chars) {\n+        if (str == null || chars == null) {\n+            return false;\n+        }\n+        int strLength = str.length();\n+        int charsLength = chars.length;\n+        if (strLength == 0 || charsLength == 0) {\n+            return false;\n+        }\n+        Set<Integer> set = new HashSet<Integer>();\n+        int index = 0;\n+        while (index < strLength) {\n+            int codePoint = str.codePointAt(index);\n+            set.add(codePoint);\n+            index += Character.charCount(codePoint);\n+        }\n+        for (int i = 0; i < charsLength; i++) {\n+            int codePoint = chars[i];\n+            if (set.contains(codePoint)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}