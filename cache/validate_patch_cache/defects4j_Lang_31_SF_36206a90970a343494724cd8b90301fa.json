{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n        return false;\n    }\n    if (searchCharacters.length == 1 && CharacterUtils.isHighSurrogate(searchCharacters[0])) {\n        throw new IllegalArgumentException(\"Invalid high surrogate character at index 0\");\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchCharacters.length;\n    final int[] chars = toCodePoints(searchCharacters);\n    final boolean[] containsFlags = new boolean[Character.MAX_VALUE + 1];\n    for (int i = 0; i < searchLen; i++) {\n        containsFlags[chars[i]] = true;\n    }\n    for (int i = 0; i < strLen;) {\n        final int codepoint = Character.codePointAt(sequence, i);\n        if (containsFlags[codepoint]) {\n            return true;\n        }\n        i += Character.charCount(codepoint);\n    }\n    return false;\n}\n\nprivate static int[] toCodePoints(final char[] chars) {\n    if (ArrayUtils.isEmpty(chars)) {\n        return ArrayUtils.EMPTY_INT_ARRAY;\n    }\n    final CharBuffer buffer = CharBuffer.wrap(chars);\n    final ByteBuffer byteBuffer = Charset.forName(\"UTF-8\").encode(buffer);\n    final int[] codePoints = new int[byteBuffer.remaining()];\n    Charset.forName(\"UTF-8\").newDecoder().decode(byteBuffer.asReadOnlyBuffer(), IntBuffer.wrap(codePoints), true);\n    return codePoints;\n}\n\npublic static boolean isEmpty(CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..4e3dc4cd 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+        return false;\n+    }\n+    if (searchCharacters.length == 1 && CharacterUtils.isHighSurrogate(searchCharacters[0])) {\n+        throw new IllegalArgumentException(\"Invalid high surrogate character at index 0\");\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchCharacters.length;\n+    final int[] chars = toCodePoints(searchCharacters);\n+    final boolean[] containsFlags = new boolean[Character.MAX_VALUE + 1];\n+    for (int i = 0; i < searchLen; i++) {\n+        containsFlags[chars[i]] = true;\n+    }\n+    for (int i = 0; i < strLen;) {\n+        final int codepoint = Character.codePointAt(sequence, i);\n+        if (containsFlags[codepoint]) {\n+            return true;\n+        }\n+        i += Character.charCount(codepoint);\n+    }\n+    return false;\n+}\n+\n+private static int[] toCodePoints(final char[] chars) {\n+    if (ArrayUtils.isEmpty(chars)) {\n+        return ArrayUtils.EMPTY_INT_ARRAY;\n+    }\n+    final CharBuffer buffer = CharBuffer.wrap(chars);\n+    final ByteBuffer byteBuffer = Charset.forName(\"UTF-8\").encode(buffer);\n+    final int[] codePoints = new int[byteBuffer.remaining()];\n+    Charset.forName(\"UTF-8\").newDecoder().decode(byteBuffer.asReadOnlyBuffer(), IntBuffer.wrap(codePoints), true);\n+    return codePoints;\n+}\n+\n+public static boolean isEmpty(CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}