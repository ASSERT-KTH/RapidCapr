{
    "patch": "        double firstVal = Double.NaN;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            double entry = getEntry(i, col);\n            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                if (row == null) {\n                    row = i;\n                    firstVal = entry;\n                } else {\n                    if (MathUtils.compareTo(firstVal, entry, epsilon) == 0) {\n                        return null;\n                    }\n                }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..63e26be5b 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -269,19 +269,18 @@ class SimplexTableau implements Serializable {\n      * @param col index of the column to check\n      * @return the row that the variable is basic in.  null if the column is not basic\n      */\n-    private Integer getBasicRow(final int col) {\n-        Integer row = null;\n+        double firstVal = Double.NaN;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n+            double entry = getEntry(i, col);\n+            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                 if (row == null) {\n-                row = i;\n+                    row = i;\n+                    firstVal = entry;\n                 } else {\n-                return null;\n+                    if (MathUtils.compareTo(firstVal, entry, epsilon) == 0) {\n+                        return null;\n+                    }\n                 }\n-            }\n-        }\n-        return row;\n-    }\n \n     /**\n      * Removes the phase 1 objective function and artificial variables from this tableau.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}