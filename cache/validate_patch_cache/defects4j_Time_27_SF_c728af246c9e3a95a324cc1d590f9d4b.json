{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 1) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    boolean hasSeparator = false;\n    int separatorIndex = 0;\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            hasSeparator = true;\n            separatorIndex = i;\n            break;\n        }\n    }\n\n    if (!hasSeparator) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    Separator separator = (Separator) elementPairs.get(separatorIndex);\n    Object[] leftComp = createComposite(elementPairs.subList(0, separatorIndex));\n    Object[] rightComp = createComposite(elementPairs.subList(separatorIndex + 1, size));\n\n    PeriodFormatter formatter = null;\n    if (!notPrinter) {\n        formatter = new PeriodFormatter((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n    } else if (!notParser) {\n        formatter = new PeriodFormatter(null, (PeriodParser) rightComp[1]);\n    }\n\n    Separator finishedSep = separator.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n    if (notPrinter && !notParser) {\n        return new PeriodFormatter(null, finishedSep);\n    } else if (notParser && !notPrinter) {\n        return new PeriodFormatter(finishedSep, null);\n    }\n\n    List<Object> subList = new ArrayList<>(3);\n    subList.add(leftComp[0]);\n    subList.add(finishedSep);\n    subList.add(rightComp[1]);\n\n    PeriodFormatter innerFormatter = toFormatter(subList, false, false);\n    return new PeriodFormatter(formatter.getPrinter() == null ? innerFormatter.getPrinter() : formatter.getPrinter(),\n            formatter.getParser() == null ? innerFormatter.getParser() : formatter.getParser());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..a00e02c2 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,35 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 1) {\n+        Object[] comp = createComposite(elementPairs);\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+        } else if (notParser) {\n+            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        } else {\n+            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+    }\n+\n+    boolean hasSeparator = false;\n+    int separatorIndex = 0;\n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            hasSeparator = true;\n+            separatorIndex = i;\n+            break;\n         }\n+    }\n+\n+    if (!hasSeparator) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -812,6 +830,34 @@ public class PeriodFormatterBuilder {\n         }\n     }\n \n+    Separator separator = (Separator) elementPairs.get(separatorIndex);\n+    Object[] leftComp = createComposite(elementPairs.subList(0, separatorIndex));\n+    Object[] rightComp = createComposite(elementPairs.subList(separatorIndex + 1, size));\n+\n+    PeriodFormatter formatter = null;\n+    if (!notPrinter) {\n+        formatter = new PeriodFormatter((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n+    } else if (!notParser) {\n+        formatter = new PeriodFormatter(null, (PeriodParser) rightComp[1]);\n+    }\n+\n+    Separator finishedSep = separator.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n+    if (notPrinter && !notParser) {\n+        return new PeriodFormatter(null, finishedSep);\n+    } else if (notParser && !notPrinter) {\n+        return new PeriodFormatter(finishedSep, null);\n+    }\n+\n+    List<Object> subList = new ArrayList<>(3);\n+    subList.add(leftComp[0]);\n+    subList.add(finishedSep);\n+    subList.add(rightComp[1]);\n+\n+    PeriodFormatter innerFormatter = toFormatter(subList, false, false);\n+    return new PeriodFormatter(formatter.getPrinter() == null ? innerFormatter.getPrinter() : formatter.getPrinter(),\n+            formatter.getParser() == null ? innerFormatter.getParser() : formatter.getParser());\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}