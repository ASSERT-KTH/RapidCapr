{
    "patch": "protected BasePeriod(long duration) {\n    super();\n    iPeriodType = PeriodType.standard();\n    iValues = new int[8];\n\n    // Split the duration into fields\n    int[] values = new int[8];\n    DurationFieldType[] types = new DurationFieldType[8];\n    int fieldIndex = 0;\n    long totalMillis = 0;\n\n    // Split the duration into fields\n    for (DurationFieldType fieldType : DurationFieldType.values()) {\n        int index = fieldType.getRangeDurationType().ordinal();\n        int value;\n        if (index < 8) {\n            value = fieldType.getField(this.getPeriodType()).getDurationFieldType().getFieldType(duration);\n            values[index] = value;\n            types[index] = fieldType;\n            fieldIndex = index + 1;\n            totalMillis = fieldType.getField(this.getPeriodType()).addToDuration(totalMillis, value);\n        }\n    }\n\n    // Align the fields (eg. 63 hours -> 2 days, 15 hours)\n    for (int i = 6; i >= 0; i--) {\n        DurationField field = types[i].getField(this.getPeriodType());\n        int diff = field.getDifference(totalMillis, values[i]);\n        totalMillis = field.subtract(totalMillis, diff);\n        values[i] = diff;\n    }\n\n    // Calculate weeks from the remaining millis\n    int weeks = (int)(totalMillis / DateTimeConstants.MILLIS_PER_WEEK);\n    iValues[6] = weeks;\n    iValues[7] = (int)(totalMillis - (weeks * DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Copy to the super class\n    System.arraycopy(iValues, 0, super.iValues, 0, iValues.length);\n    super.setPeriodType(iPeriodType);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..25e90357 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,11 +218,48 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    super();\n+    iPeriodType = PeriodType.standard();\n+    iValues = new int[8];\n+\n+    // Split the duration into fields\n+    int[] values = new int[8];\n+    DurationFieldType[] types = new DurationFieldType[8];\n+    int fieldIndex = 0;\n+    long totalMillis = 0;\n+\n+    // Split the duration into fields\n+    for (DurationFieldType fieldType : DurationFieldType.values()) {\n+        int index = fieldType.getRangeDurationType().ordinal();\n+        int value;\n+        if (index < 8) {\n+            value = fieldType.getField(this.getPeriodType()).getDurationFieldType().getFieldType(duration);\n+            values[index] = value;\n+            types[index] = fieldType;\n+            fieldIndex = index + 1;\n+            totalMillis = fieldType.getField(this.getPeriodType()).addToDuration(totalMillis, value);\n+        }\n+    }\n+\n+    // Align the fields (eg. 63 hours -> 2 days, 15 hours)\n+    for (int i = 6; i >= 0; i--) {\n+        DurationField field = types[i].getField(this.getPeriodType());\n+        int diff = field.getDifference(totalMillis, values[i]);\n+        totalMillis = field.subtract(totalMillis, diff);\n+        values[i] = diff;\n     }\n \n+    // Calculate weeks from the remaining millis\n+    int weeks = (int)(totalMillis / DateTimeConstants.MILLIS_PER_WEEK);\n+    iValues[6] = weeks;\n+    iValues[7] = (int)(totalMillis - (weeks * DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    // Copy to the super class\n+    System.arraycopy(iValues, 0, super.iValues, 0, iValues.length);\n+    super.setPeriodType(iPeriodType);\n+}\n+\n     /**\n      * Creates a period from the given millisecond duration, which is only really\n      * suitable for durations less than one day.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}