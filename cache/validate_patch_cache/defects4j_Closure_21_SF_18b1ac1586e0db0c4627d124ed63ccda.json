{
    "patch": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma() ||\n        n.getBooleanProp(Node.GOOG_MODULE)) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove an expr result. We already handle these cases\n    // when we visit the child, and the peephole passes will fix up the\n    // tree in more clever ways when these are removed.\n    if (n.isExprResult() && !n.hasChildren()) {\n      return;\n    }\n\n    // Do not try to remove a block. We already handle these cases when we\n    // visit the child, and the peephole passes will fix up the tree in more\n    // clever ways when these are removed.\n    if (n.getType() == Token.BLOCK) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could be\n    // attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    if (parent.getType() == Token.COMMA) {\n      // If the node is in a comma expression and is not the first or second\n      // child, then return as it cannot be removed safely.\n      if (n != parent.getFirstChild() && n != parent.getFirstChild().getNext()) {\n        return;\n      }\n\n      // If the result is used, then keep the node.\n      if (isResultUsed) {\n        return;\n      }\n\n      // If there exists a previous sibling with the same value as this node,\n      // and its result is not used, then keep it.\n      for (Node prev = n.getPrevious(); prev != null; prev = prev.getPrevious()) {\n        if (NodeUtil.isEquivalentTo(prev, n) && !NodeUtil.isExpressionResultUsed(prev)) {\n          return;\n        }\n      }\n\n      // If removing the node would result in an empty expression (e.g. `a;;\n      // b`), keep the node.\n      if (n.getNext() == null && parent.isExprResult()) {\n        return;\n      }\n\n      // Otherwise, the node can be safely removed, and the removal can be made\n      // at the comma expression level.\n      problemNodes.add(parent);\n    } else if (parent.getType() != Token.EXPR_RESULT &&\n               parent.getType() != Token.BLOCK) {\n      // If the node is not an expression statement or a block, and is not one\n      // of the children of a \"for\" loop, then return as it cannot be removed\n      // safely.\n      if (parent.getType() != Token.FOR || parent.getChildCount() != 4) {\n        return;\n      }\n      Node grandParent = parent.getParent();\n      if (grandParent == null || grandParent.getType() != Token.FOR) {\n        return;\n      }\n      int grandParentChildrenCount = grandParent.getChildCount();\n      if (grandParentChildrenCount == 3) {\n        if (grandParent.getFirstChild() == parent) {\n          grandParent.replaceWith(parent.removeFirstChild());\n        }\n        if (grandParent.getLastChild() == parent) {\n          grandParent.replaceWith(parent.removeLastChild());\n        }\n      } else if (grandParentChildrenCount == 4) {\n        if (parent.getFirstChild() == n) {\n          parent.replaceWith(n.getNext());\n        } else if (parent.getLastChild() == n) {\n          parent.replaceWith(n.getPrevious());\n        } else {\n          return;\n        }\n        t.getCompiler().reportCodeChange();\n      } else {\n        return;\n      }\n    } else {\n      // If the node is an expression statement or a block, then only remove\n      // it if it has no children.\n      if (n.hasChildren()) {\n        return;\n      }\n      problemNodes.add(n);\n    }\n\n    // Report the removal of the node as a problem.\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR,\n                    UNNECESSARY_CODE_ERROR_MESSAGE));\n\n    // Protect the node from being removed by the peephole optimizer.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..d806969e 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -87,7 +87,8 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n     if (n.isEmpty() ||\n-        n.isComma()) {\n+        n.isComma() ||\n+        n.getBooleanProp(Node.GOOG_MODULE)) {\n       return;\n     }\n \n@@ -95,55 +96,107 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n+    // Do not try to remove an expr result. We already handle these cases\n+    // when we visit the child, and the peephole passes will fix up the\n+    // tree in more clever ways when these are removed.\n+    if (n.isExprResult() && !n.hasChildren()) {\n       return;\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n+    // Do not try to remove a block. We already handle these cases when we\n+    // visit the child, and the peephole passes will fix up the tree in more\n+    // clever ways when these are removed.\n+    if (n.getType() == Token.BLOCK) {\n+      return;\n+    }\n+\n+    // This no-op statement was there so that JSDoc information could be\n+    // attached to the name. This check should not complain about it.\n     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n       return;\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+\n     if (parent.getType() == Token.COMMA) {\n+      // If the node is in a comma expression and is not the first or second\n+      // child, then return as it cannot be removed safely.\n+      if (n != parent.getFirstChild() && n != parent.getFirstChild().getNext()) {\n+        return;\n+      }\n+\n+      // If the result is used, then keep the node.\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+\n+      // If there exists a previous sibling with the same value as this node,\n+      // and its result is not used, then keep it.\n+      for (Node prev = n.getPrevious(); prev != null; prev = prev.getPrevious()) {\n+        if (NodeUtil.isEquivalentTo(prev, n) && !NodeUtil.isExpressionResultUsed(prev)) {\n+          return;\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+\n+      // If removing the node would result in an empty expression (e.g. `a;;\n+      // b`), keep the node.\n+      if (n.getNext() == null && parent.isExprResult()) {\n         return;\n       }\n-    }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+      // Otherwise, the node can be safely removed, and the removal can be made\n+      // at the comma expression level.\n+      problemNodes.add(parent);\n+    } else if (parent.getType() != Token.EXPR_RESULT &&\n+               parent.getType() != Token.BLOCK) {\n+      // If the node is not an expression statement or a block, and is not one\n+      // of the children of a \"for\" loop, then return as it cannot be removed\n+      // safely.\n+      if (parent.getType() != Token.FOR || parent.getChildCount() != 4) {\n+        return;\n       }\n+      Node grandParent = parent.getParent();\n+      if (grandParent == null || grandParent.getType() != Token.FOR) {\n+        return;\n+      }\n+      int grandParentChildrenCount = grandParent.getChildCount();\n+      if (grandParentChildrenCount == 3) {\n+        if (grandParent.getFirstChild() == parent) {\n+          grandParent.replaceWith(parent.removeFirstChild());\n+        }\n+        if (grandParent.getLastChild() == parent) {\n+          grandParent.replaceWith(parent.removeLastChild());\n+        }\n+      } else if (grandParentChildrenCount == 4) {\n+        if (parent.getFirstChild() == n) {\n+          parent.replaceWith(n.getNext());\n+        } else if (parent.getLastChild() == n) {\n+          parent.replaceWith(n.getPrevious());\n+        } else {\n+          return;\n+        }\n+        t.getCompiler().reportCodeChange();\n+      } else {\n+        return;\n+      }\n+    } else {\n+      // If the node is an expression statement or a block, then only remove\n+      // it if it has no children.\n+      if (n.hasChildren()) {\n+        return;\n+      }\n+      problemNodes.add(n);\n+    }\n+\n+    // Report the removal of the node as a problem.\n+    t.getCompiler().report(\n+        t.makeError(n, level, USELESS_CODE_ERROR,\n+                    UNNECESSARY_CODE_ERROR_MESSAGE));\n+\n+    // Protect the node from being removed by the peephole optimizer.\n+    if (!NodeUtil.isStatement(n)) {\n+      problemNodes.add(n);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}