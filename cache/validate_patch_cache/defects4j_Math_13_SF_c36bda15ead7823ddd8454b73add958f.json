{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxRows = 10000; // maximum number of rows allowed for the matrix\n    final int maxCols = 10000; // maximum number of columns allowed for the matrix\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n\n    if (rows > maxRows || cols > maxCols) { // check the matrix size\n        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n    }\n\n    final int sizeInBytes = rows * cols * 16; // estimate the size in bytes\n    final long maxMemory = Runtime.getRuntime().maxMemory(); // get the maximum available memory\n    final long usedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory(); // get the used memory\n    final long freeMemory = maxMemory - usedMemory; // compute the available memory\n    final long maxMatrixSize = freeMemory / sizeInBytes; // compute the maximum size of the matrix that can be allocated\n\n    if (rows * cols > maxMatrixSize) { // check if the matrix can fit in the available memory\n        throw new RuntimeException(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n    }\n\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(getSqrtArray(dec.getRealEigenvalues()));\n    final RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n    return sqrtM;\n}\n\nprivate double[] getSqrtArray(double[] ar) {\n    double[] result = new double[ar.length];\n    for (int i = 0; i < ar.length; i++) {\n        result[i] = Math.sqrt(ar[i]);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3d989bd35 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxRows = 10000; // maximum number of rows allowed for the matrix\n+    final int maxCols = 10000; // maximum number of columns allowed for the matrix\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+\n+    if (rows > maxRows || cols > maxCols) { // check the matrix size\n+        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n     }\n+\n+    final int sizeInBytes = rows * cols * 16; // estimate the size in bytes\n+    final long maxMemory = Runtime.getRuntime().maxMemory(); // get the maximum available memory\n+    final long usedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory(); // get the used memory\n+    final long freeMemory = maxMemory - usedMemory; // compute the available memory\n+    final long maxMatrixSize = freeMemory / sizeInBytes; // compute the maximum size of the matrix that can be allocated\n+\n+    if (rows * cols > maxMatrixSize) { // check if the matrix can fit in the available memory\n+        throw new RuntimeException(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n+    }\n+\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(getSqrtArray(dec.getRealEigenvalues()));\n+    final RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n+    return sqrtM;\n+}\n+\n+private double[] getSqrtArray(double[] ar) {\n+    double[] result = new double[ar.length];\n+    for (int i = 0; i < ar.length; i++) {\n+        result[i] = Math.sqrt(ar[i]);\n+    }\n+    return result;\n+}\n }",
    "result_reason": "java.lang.RuntimeException: Matrix size exceeds available memory. Please use a smaller matrix.",
    "test_result": "FAIL"
}