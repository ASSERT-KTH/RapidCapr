{
    "patch": "import org.mockito.MockAccess;\nimport org.mockito.MockCreationSettings;\nimport org.mockito.MockHandler;\nimport org.mockito.exceptions.base.MockitoException;\nimport org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator;\nimport org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\nimport org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.MockAccess;\nimport org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.MockitoInterceptor;\nimport org.mockito.internal.creation.instance.DefaultInstantiatorProvider;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.MockHandlerInvocation;\nimport org.mockito.mock.MockCreationSettingsSerializable;\nimport org.mockito.plugins.MockMaker;\nimport org.mockito.plugins.MockMaker.TypeMockability;\n\nimport java.lang.reflect.Field;\nimport java.util.List;\n\nimport static org.mockito.Mockito.RETURNS_DEFAULTS;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.withSettings;\nimport static org.mockito.internal.util.StringUtil.join;\n\npublic class CustomMockMaker implements MockMaker {\n    private final CachingMockBytecodeGenerator cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n    private final DefaultInstantiatorProvider defaultInstantiatorProvider = new DefaultInstantiatorProvider();\n    private final ClassInstantiator classInstantiator = new ClassInstantiator(defaultInstantiatorProvider);\n\n    @Override\n    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == MockCreationSettingsSerializable.Mode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance = null;\n        try {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            MockAccess mockAccess = (MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            T assignableInstance = ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n            // Fix: Set default return values on a spied inner class\n            if (settings.isUsingConstructor() && (mockInstance.getClass().isLocalClass() || mockInstance.getClass().isAnonymousClass())) {\n                Object outerObj = extractOuterInstance(mockInstance);\n                if (outerObj != null && isMock(outerObj)) {\n                    MockAccess outerMockAccess = mock(outerObj, withSettings().defaultAnswer(RETURNS_DEFAULTS)).getMockAccess();\n                    Field outerField = findOuterClassField(mockInstance.getClass());\n                    outerField.set(mockInstance, outerMockAccess.getMock());\n                }\n            }\n\n            return assignableInstance;\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ),cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException | IllegalAccessException e) {\n            throw new MockitoException(\"Unable to create/access mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        }\n    }\n\n    private Object extractOuterInstance(Object mockedObj) throws IllegalAccessException {\n        for (Field field : mockedObj.getClass().getDeclaredFields()) {\n            if (field.isSynthetic() && field.getName().startsWith(\"this$\")) {\n                field.setAccessible(true);\n                return field.get(mockedObj);\n            }\n        }\n        return null;\n    }\n\n    private Field findOuterClassField(Class<?> mockedClass) {\n        for (Class<?> clazz = mockedClass; clazz != null; clazz = clazz.getSuperclass()) {\n            for (Field field : clazz.getDeclaredFields()) {\n                if (field.getName().startsWith(\"this$\")) {\n                    return field;\n                }\n            }\n        }\n        return null;\n    }\n\n    private boolean isMock(Object obj) {\n        return obj != null && MockUtil.isMock(obj);\n    }\n\n    @Override\n    public TypeMockability isTypeMockable(Class<?> type) {\n        return TypeMockability.MOCKABLE;\n    }\n\n    @Override\n    public MockHandler getHandler(Object mock) {\n        MockAccess mockAccess = ((MockAccess) mock);\n        MockitoInterceptor mockitoInterceptor = mockAccess.getMockitoInterceptor();\n        return mockitoInterceptor.mockHandler();\n    }\n\n    @Override\n    public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) {\n        MockAccess mockAccess = ((MockAccess) mock);\n        MockitoInterceptor oldInterceptor = mockAccess.getMockitoInterceptor();\n        MockitoInterceptor newInterceptor = new MockMethodInterceptor(asInternalMockHandler(newHandler), settings, oldInterceptor.mockHandler());\n        mockAccess.setMockitoInterceptor(newInterceptor);\n    }\n\n    @Override\n    public void setMockName(Object mock, String name) {\n        MockAccess mockAccess = ((MockAccess) mock);\n        mockAccess.setMockName(name);\n    }\n\n    @Override\n    public void clearMock(Object mock) {\n        MockAccess mockAccess = ((MockAccess) mock);\n        MockitoInterceptor mockitoInterceptor = mockAccess.getMockitoInterceptor();\n        Object mockInstance = mockitoInterceptor.mockHandler().getMockSettings().getMockInstance();\n        if (mockInstance instanceof AutoCloseable) {\n            try {\n                ((AutoCloseable) mockInstance).close();\n            } catch (Exception e) {\n                throw new MockitoException(\"Unable to clear mock\", e);\n            }\n        }\n    }\n\n    @Override\n    public boolean isMock(Object mock) {\n        return mock != null && MockUtil.isMock(mock);\n    }\n\n    @Override\n    public void maybeRedefineMock(Object mock, Class<?> newMockedType, List<Class<?>> newInterfaces) {\n        MockAccess mockAccess = ((MockAccess) mock);\n        MockMethodInterceptor.MethodInterceptorFilter filter = new MockMethodInterceptor.ToTypeSafeBytecodeBridgeFilter(getMockSettings(mock));\n        mockAccess.byteBuddyMockMaker().maybeRedefineMock(filter, newMockedType, newInterfaces);\n    }\n\n    private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, Object instance) {\n        Class<T> typeToMock = settings.getTypeToMock();\n        if (!typeToMock.isAssignableFrom(instance.getClass())) {\n            throw new MockitoException(join(\n                    \"Mockito cannot mock this class: \",\n                    \"ClassCastException occurred :\",\n                    \"    Class to mock does not implement given interface.\\n\",\n                    \"Interface to implement:\\n\",\n                    \"    \" + typeToMock.getSimpleName() + \"\\n\",\n                    \"Class to mock:\\n\",\n                    \"    \" + instance.getClass().getSimpleName() + \"\\n\",\n                    \"Might be helpful to include this exception message in bug reports.\"\n            ));\n        }\n        return typeToMock.cast(instance);\n    }\n\n    private InternalMockHandler asInternalMockHandler(final MockHandler handler) {\n        if (handler instanceof InternalMockHandler) {\n            return (InternalMockHandler) handler;\n        }\n        return new InternalMockHandler() {\n            @Override\n            public MockHandlerInvocation handle(MockHandlerInvocation invocation) throws Throwable {\n                return handler.handle(invocation);\n            }\n\n            @Override\n            public MockCreationSettings<?> getMockSettings() {\n                return null;\n            }\n        };\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..303561ba1 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,8 +21,37 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n+import org.mockito.MockAccess;\n+import org.mockito.MockCreationSettings;\n+import org.mockito.MockHandler;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator;\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.MockAccess;\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.MockitoInterceptor;\n+import org.mockito.internal.creation.instance.DefaultInstantiatorProvider;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockHandlerInvocation;\n+import org.mockito.mock.MockCreationSettingsSerializable;\n+import org.mockito.plugins.MockMaker;\n+import org.mockito.plugins.MockMaker.TypeMockability;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.RETURNS_DEFAULTS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.withSettings;\n+import static org.mockito.internal.util.StringUtil.join;\n+\n+public class CustomMockMaker implements MockMaker {\n+    private final CachingMockBytecodeGenerator cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n+    private final DefaultInstantiatorProvider defaultInstantiatorProvider = new DefaultInstantiatorProvider();\n+    private final ClassInstantiator classInstantiator = new ClassInstantiator(defaultInstantiatorProvider);\n+\n+    @Override\n     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        if (settings.getSerializableMode() == MockCreationSettingsSerializable.Mode.ACROSS_CLASSLOADERS) {\n             throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n         }\n         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n@@ -32,10 +61,22 @@ public class ByteBuddyMockMaker implements MockMaker {\n         T mockInstance = null;\n         try {\n             mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+            MockAccess mockAccess = (MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+            T assignableInstance = ensureMockIsAssignableToMockedType(settings, mockInstance);\n+\n+            // Fix: Set default return values on a spied inner class\n+            if (settings.isUsingConstructor() && (mockInstance.getClass().isLocalClass() || mockInstance.getClass().isAnonymousClass())) {\n+                Object outerObj = extractOuterInstance(mockInstance);\n+                if (outerObj != null && isMock(outerObj)) {\n+                    MockAccess outerMockAccess = mock(outerObj, withSettings().defaultAnswer(RETURNS_DEFAULTS)).getMockAccess();\n+                    Field outerField = findOuterClassField(mockInstance.getClass());\n+                    outerField.set(mockInstance, outerMockAccess.getMock());\n+                }\n+            }\n+\n+            return assignableInstance;\n         } catch (ClassCastException cce) {\n             throw new MockitoException(join(\n                     \"ClassCastException occurred while creating the mockito mock :\",\n@@ -47,11 +88,123 @@ public class ByteBuddyMockMaker implements MockMaker {\n                     \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                     \"\"\n             ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+        } catch (org.mockito.internal.creation.instance.InstantiationException | IllegalAccessException e) {\n+            throw new MockitoException(\"Unable to create/access mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+        }\n+    }\n+\n+    private Object extractOuterInstance(Object mockedObj) throws IllegalAccessException {\n+        for (Field field : mockedObj.getClass().getDeclaredFields()) {\n+            if (field.isSynthetic() && field.getName().startsWith(\"this$\")) {\n+                field.setAccessible(true);\n+                return field.get(mockedObj);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private Field findOuterClassField(Class<?> mockedClass) {\n+        for (Class<?> clazz = mockedClass; clazz != null; clazz = clazz.getSuperclass()) {\n+            for (Field field : clazz.getDeclaredFields()) {\n+                if (field.getName().startsWith(\"this$\")) {\n+                    return field;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private boolean isMock(Object obj) {\n+        return obj != null && MockUtil.isMock(obj);\n+    }\n+\n+    @Override\n+    public TypeMockability isTypeMockable(Class<?> type) {\n+        return TypeMockability.MOCKABLE;\n+    }\n+\n+    @Override\n+    public MockHandler getHandler(Object mock) {\n+        MockAccess mockAccess = ((MockAccess) mock);\n+        MockitoInterceptor mockitoInterceptor = mockAccess.getMockitoInterceptor();\n+        return mockitoInterceptor.mockHandler();\n+    }\n+\n+    @Override\n+    public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) {\n+        MockAccess mockAccess = ((MockAccess) mock);\n+        MockitoInterceptor oldInterceptor = mockAccess.getMockitoInterceptor();\n+        MockitoInterceptor newInterceptor = new MockMethodInterceptor(asInternalMockHandler(newHandler), settings, oldInterceptor.mockHandler());\n+        mockAccess.setMockitoInterceptor(newInterceptor);\n+    }\n+\n+    @Override\n+    public void setMockName(Object mock, String name) {\n+        MockAccess mockAccess = ((MockAccess) mock);\n+        mockAccess.setMockName(name);\n+    }\n+\n+    @Override\n+    public void clearMock(Object mock) {\n+        MockAccess mockAccess = ((MockAccess) mock);\n+        MockitoInterceptor mockitoInterceptor = mockAccess.getMockitoInterceptor();\n+        Object mockInstance = mockitoInterceptor.mockHandler().getMockSettings().getMockInstance();\n+        if (mockInstance instanceof AutoCloseable) {\n+            try {\n+                ((AutoCloseable) mockInstance).close();\n+            } catch (Exception e) {\n+                throw new MockitoException(\"Unable to clear mock\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isMock(Object mock) {\n+        return mock != null && MockUtil.isMock(mock);\n+    }\n+\n+    @Override\n+    public void maybeRedefineMock(Object mock, Class<?> newMockedType, List<Class<?>> newInterfaces) {\n+        MockAccess mockAccess = ((MockAccess) mock);\n+        MockMethodInterceptor.MethodInterceptorFilter filter = new MockMethodInterceptor.ToTypeSafeBytecodeBridgeFilter(getMockSettings(mock));\n+        mockAccess.byteBuddyMockMaker().maybeRedefineMock(filter, newMockedType, newInterfaces);\n+    }\n+\n+    private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, Object instance) {\n+        Class<T> typeToMock = settings.getTypeToMock();\n+        if (!typeToMock.isAssignableFrom(instance.getClass())) {\n+            throw new MockitoException(join(\n+                    \"Mockito cannot mock this class: \",\n+                    \"ClassCastException occurred :\",\n+                    \"    Class to mock does not implement given interface.\\n\",\n+                    \"Interface to implement:\\n\",\n+                    \"    \" + typeToMock.getSimpleName() + \"\\n\",\n+                    \"Class to mock:\\n\",\n+                    \"    \" + instance.getClass().getSimpleName() + \"\\n\",\n+                    \"Might be helpful to include this exception message in bug reports.\"\n+            ));\n         }\n+        return typeToMock.cast(instance);\n     }\n \n+    private InternalMockHandler asInternalMockHandler(final MockHandler handler) {\n+        if (handler instanceof InternalMockHandler) {\n+            return (InternalMockHandler) handler;\n+        }\n+        return new InternalMockHandler() {\n+            @Override\n+            public MockHandlerInvocation handle(MockHandlerInvocation invocation) throws Throwable {\n+                return handler.handle(invocation);\n+            }\n+\n+            @Override\n+            public MockCreationSettings<?> getMockSettings() {\n+                return null;\n+            }\n+        };\n+    }\n+}\n+\n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of\n         // relying on the JVM to implicitly cast on the client call site.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}