{
    "patch": "public static int largest_divisor(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be positive\");\n    }\n    int largest = 1;\n    int i = 2;\n    while (i <= Math.sqrt(n)) {\n        if (n % i == 0) {\n            largest = i;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        largest = n;\n    }\n    return largest;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\nindex e93b282..bf62021 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n@@ -1,11 +1,23 @@\n package humaneval.buggy;\n \n public class LARGEST_DIVISOR {\n-    public static int largest_divisor(int n) {\n-        for (int i = n; i >= 0; i -= 1){\n-            if (n % i == 0)\n-                return i;\n+public static int largest_divisor(int n) {\n+    if (n <= 0) {\n+        throw new IllegalArgumentException(\"Input must be positive\");\n+    }\n+    int largest = 1;\n+    int i = 2;\n+    while (i <= Math.sqrt(n)) {\n+        if (n % i == 0) {\n+            largest = i;\n+            n /= i;\n+        } else {\n+            i++;\n         }\n-        return 1;\n     }\n+    if (n > 1) {\n+        largest = n;\n+    }\n+    return largest;\n+}\n }",
    "result_reason": "   TEST_LARGEST_DIVISOR.test_0:7 expected:<3> but was:<1>",
    "test_result": "FAIL"
}