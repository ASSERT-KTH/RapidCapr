{
    "patch": "public static String escapeCsv(String input) {\n    if (StringUtils.containsNone(input, CSV_SEARCH_CHARS)) {\n        return input;\n    }\n    try {\n        StringWriter writer = new StringWriter();\n        translate(input, writer, true);\n        return writer.toString();\n    } catch (IOException ioe) {\n        // this should never ever happen while writing to a StringWriter\n        ioe.printStackTrace();\n        return null;\n    }\n}\n\npublic static void translate(CharSequence input, Writer out, boolean csv) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translateSingle(input, pos, out, csv);\n        if (consumed == 0) {\n            char c1 = input.charAt(pos);\n            if (csv && (c1 == CSV_DELIMITER || c1 == CSV_QUOTE)) {\n                out.write(CSV_QUOTE);\n                out.write(c1);\n                out.write(CSV_QUOTE);\n            } else {\n                out.write(c1);\n            }\n            pos++;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n\npublic static int translateSingle(CharSequence input, int index, Writer out, boolean csv) throws IOException {\n    char c1 = input.charAt(index);\n    if (INDEX_NOT_FOUND == StringUtils.indexOf(CSV_SEARCH_CHARS, c1)) {\n        out.write(c1);\n        return 0;\n    }\n    if (csv && (c1 == CSV_DELIMITER || c1 == CSV_QUOTE)) {\n        out.write(CSV_QUOTE);\n        out.write(c1);\n        out.write(CSV_QUOTE);\n        return 1;\n    }\n    if (Character.isHighSurrogate(c1) && index + 1 < input.length()) {\n        char c2 = input.charAt(index + 1);\n        if (Character.isLowSurrogate(c2)) {\n            out.write(c1);\n            out.write(c2);\n            return 1;\n        }\n    }\n    UnicodeEscaper escaper = new UnicodeEscaper();\n    escaper.translate(c1, out);\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..4201e868 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,74 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n+public static String escapeCsv(String input) {\n+    if (StringUtils.containsNone(input, CSV_SEARCH_CHARS)) {\n+        return input;\n+    }\n+    try {\n+        StringWriter writer = new StringWriter();\n+        translate(input, writer, true);\n+        return writer.toString();\n+    } catch (IOException ioe) {\n+        // this should never ever happen while writing to a StringWriter\n+        ioe.printStackTrace();\n+        return null;\n+    }\n+}\n+\n+public static void translate(CharSequence input, Writer out, boolean csv) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translateSingle(input, pos, out, csv);\n+        if (consumed == 0) {\n+            char c1 = input.charAt(pos);\n+            if (csv && (c1 == CSV_DELIMITER || c1 == CSV_QUOTE)) {\n+                out.write(CSV_QUOTE);\n+                out.write(c1);\n+                out.write(CSV_QUOTE);\n+            } else {\n+                out.write(c1);\n+            }\n+            pos++;\n+            continue;\n         }\n-        if (input == null) {\n-            return;\n+        for (int pt = 0; pt < consumed; pt++) {\n+            pos += Character.charCount(Character.codePointAt(input, pos));\n         }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n+    }\n+}\n+\n+public static int translateSingle(CharSequence input, int index, Writer out, boolean csv) throws IOException {\n+    char c1 = input.charAt(index);\n+    if (INDEX_NOT_FOUND == StringUtils.indexOf(CSV_SEARCH_CHARS, c1)) {\n+        out.write(c1);\n+        return 0;\n+    }\n+    if (csv && (c1 == CSV_DELIMITER || c1 == CSV_QUOTE)) {\n+        out.write(CSV_QUOTE);\n+        out.write(c1);\n+        out.write(CSV_QUOTE);\n+        return 1;\n+    }\n+    if (Character.isHighSurrogate(c1) && index + 1 < input.length()) {\n+        char c2 = input.charAt(index + 1);\n+        if (Character.isLowSurrogate(c2)) {\n+            out.write(c1);\n+            out.write(c2);\n+            return 1;\n         }\n     }\n+    UnicodeEscaper escaper = new UnicodeEscaper();\n+    escaper.translate(c1, out);\n+    return 0;\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}