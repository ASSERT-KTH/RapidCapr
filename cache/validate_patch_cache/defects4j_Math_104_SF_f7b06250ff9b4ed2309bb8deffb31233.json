{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        // Use regularizedGammaQ because it should converge faster in this case.\n        return 1 - regularizedGammaQ(a, x);\n    }\n\n    double sum = 1.0 / a;\n    double term = sum;\n\n    // Series expansion until convergence or max iterations.\n    final double epsilon = 10e-15;\n    final int maxIterations = 100;\n    int i = 1;\n    while (Math.abs(term) > epsilon * Math.abs(sum) && i < maxIterations) {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(final double a, final double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        // Use regularizedGammaP because it should converge faster in this case.\n        return 1 - regularizedGammaP(a, x);\n    }\n\n    final double b = x + 1.0 - a;\n    final double c = 1.0 / 10e-15;\n    final double d = 1.0 / b;\n    double h = d;\n    int i = 1;\n    while (d > h * c && i < 100) {\n        double an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < 10e-20) {\n            d = 10e-20;\n        }\n        h = 1.0 / d;\n        i++;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n}\n\npublic static double logGamma(final double x) {\n\n    if (x <= 0.0) {\n        return Double.NaN;\n    }\n\n    double z = x;\n    double sum = 0.0;\n    double tmp = z + 5.5;\n\n    tmp -= (z + 0.5) * Math.log(tmp);\n\n    sum += 0.99999999999980993;\n    sum -= 676.5203681218851 / (z + 1.0);\n    sum +=  -1259.1392167224028 / (z + 2.0);\n    sum +=   771.32342877765313 / (z + 3.0);\n    sum +=  -176.6150291498386 / (z + 4.0);\n    sum +=    12.50734324009056 / (z + 5.0);\n    sum +=   -0.13857109526572012 / (z + 6.0);\n    sum +=  9.9843695780195716e-6 / (z + 7.0);\n    sum +=  1.5056327351493116e-7 / (z + 8.0);\n\n    return tmp + Math.log(2.5066282746310007 * sum / x);\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..be448671c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,89 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        // Use regularizedGammaQ because it should converge faster in this case.\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+\n+    double sum = 1.0 / a;\n+    double term = sum;\n+\n+    // Series expansion until convergence or max iterations.\n+    final double epsilon = 10e-15;\n+    final int maxIterations = 100;\n+    int i = 1;\n+    while (Math.abs(term) > epsilon * Math.abs(sum) && i < maxIterations) {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(final double a, final double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        // Use regularizedGammaP because it should converge faster in this case.\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+\n+    final double b = x + 1.0 - a;\n+    final double c = 1.0 / 10e-15;\n+    final double d = 1.0 / b;\n+    double h = d;\n+    int i = 1;\n+    while (d > h * c && i < 100) {\n+        double an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < 10e-20) {\n+            d = 10e-20;\n+        }\n+        h = 1.0 / d;\n+        i++;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n+}\n+\n+public static double logGamma(final double x) {\n+\n+    if (x <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    double z = x;\n+    double sum = 0.0;\n+    double tmp = z + 5.5;\n+\n+    tmp -= (z + 0.5) * Math.log(tmp);\n+\n+    sum += 0.99999999999980993;\n+    sum -= 676.5203681218851 / (z + 1.0);\n+    sum +=  -1259.1392167224028 / (z + 2.0);\n+    sum +=   771.32342877765313 / (z + 3.0);\n+    sum +=  -176.6150291498386 / (z + 4.0);\n+    sum +=    12.50734324009056 / (z + 5.0);\n+    sum +=   -0.13857109526572012 / (z + 6.0);\n+    sum +=  9.9843695780195716e-6 / (z + 7.0);\n+    sum +=  1.5056327351493116e-7 / (z + 8.0);\n+\n+    return tmp + Math.log(2.5066282746310007 * sum / x);\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}