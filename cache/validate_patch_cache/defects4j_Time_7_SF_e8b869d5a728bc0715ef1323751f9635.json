{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n        Chronology selectedChrono = selectChronology(chrono);\n        long instantLocal = instantMillis + offsetMillis;\n        int defaultYear = selectedChrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n        bucket.setZone(chrono.getZone());\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(true, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            selectedChrono = selectedChrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            selectedChrono = selectedChrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(selectedChrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..bb0bdbe4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,25 +702,27 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        long instantMillis = instant.getMillis();\n+        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n+        Chronology selectedChrono = selectChronology(chrono);\n+        long instantLocal = instantMillis + offsetMillis;\n+        int defaultYear = selectedChrono.year().get(instantLocal);\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n+        bucket.setZone(chrono.getZone());\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        instant.setMillis(bucket.computeMillis(true, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            selectedChrono = selectedChrono.withZone(parsedZone);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            selectedChrono = selectedChrono.withZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n+        instant.setChronology(selectedChrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2004-05-01T00:00:00.000+09:00>",
    "test_result": "FAIL"
}