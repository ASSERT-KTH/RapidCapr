{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node block = function.getLastChild();\n    NodeUtil.forEachChild(block, new NodeUtil.Visitor() {\n      @Override\n      public void visit(Node node) {\n        if (!node.isName()) {\n          return;\n        }\n        String name = node.getString();\n        Var var = fnScope.getVar(name);\n        if (!referenced.contains(var)) {\n          NodeUtil.removeChild(node.getParent(), node);\n          compiler.reportCodeChange();\n        }\n      }\n    });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b0fe72f4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node block = function.getLastChild();\n+    NodeUtil.forEachChild(block, new NodeUtil.Visitor() {\n+      @Override\n+      public void visit(Node node) {\n+        if (!node.isName()) {\n+          return;\n+        }\n+        String name = node.getString();\n+        Var var = fnScope.getVar(name);\n+        if (!referenced.contains(var)) {\n+          NodeUtil.removeChild(node.getParent(), node);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: local variable fnScope is accessed from within inner class; needs to be declared final",
    "test_result": "ERROR"
}