{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    LinkedHashSet<String> referenced = new LinkedHashSet<>();\n    \n    // Collect all referenced parameter names in the function body\n    Node functionBody = NodeUtil.getFunctionBody(function);\n    NodeTraversal.traverse(compiler, functionBody, new NodeTraversal.AbstractShallowCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName() && parent != null && parent.isFunction()) {\n                String name = n.getString();\n                if (parent.getFirstChild().isParamList()) {\n                    // The parent is a function definition, so we add the parameter\n                    referenced.add(name);\n                }\n            }\n        }\n    });\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var.getName())) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d56aff7c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    LinkedHashSet<String> referenced = new LinkedHashSet<>();\n+    \n+    // Collect all referenced parameter names in the function body\n+    Node functionBody = NodeUtil.getFunctionBody(function);\n+    NodeTraversal.traverse(compiler, functionBody, new NodeTraversal.AbstractShallowCallback() {\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isName() && parent != null && parent.isFunction()) {\n+                String name = n.getString();\n+                if (parent.getFirstChild().isParamList()) {\n+                    // The parent is a function definition, so we add the parameter\n+                    referenced.add(name);\n+                }\n+            }\n+        }\n+    });\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+            Var var = fnScope.getVar(lastArg.getString());\n+            if (!referenced.contains(var.getName())) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}