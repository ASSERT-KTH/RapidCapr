{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final long instantBefore = instantLocal - MAX_MILLIS_DIFF;\n    final long instantAfter = instantLocal + MAX_MILLIS_DIFF;\n\n    // get offset before and after the specified instant\n    final int offsetBefore = getOffset(instantBefore);\n    final int offsetAfter = getOffset(instantAfter);\n\n    // if the offsets before and after the instant are the same, the instant lies within a transition\n    if (offsetBefore == offsetAfter) {\n        return offsetBefore;\n    }\n\n    // instant is near a transition, so we need to find the exact transition point\n    final long transition = nextTransition(instantBefore);\n\n    // if the moment after the transition has an offset of offsetAfter, then use that offset\n    if (getOffset(transition + 1) == offsetAfter) {\n        return offsetAfter;\n    }\n\n    // if the moment before the transition has an offset of offsetBefore, then use that offset\n    if (getOffset(transition - 1) == offsetBefore) {\n        return offsetBefore;\n    }\n\n    // transition is ambiguous, we need to use the \"closest\" offset\n    final int offsetTransition = getOffset(transition);\n    long diffBefore = transition - instantBefore;\n    long diffAfter = instantAfter - transition;\n    if (diffBefore < diffAfter) {\n        return offsetBefore;\n    } else if (diffAfter < diffBefore) {\n        return offsetAfter;\n    }\n\n    return (offsetBefore < offsetAfter) ? offsetBefore : offsetAfter;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b4f1206d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final long instantBefore = instantLocal - MAX_MILLIS_DIFF;\n+    final long instantAfter = instantLocal + MAX_MILLIS_DIFF;\n+\n+    // get offset before and after the specified instant\n+    final int offsetBefore = getOffset(instantBefore);\n+    final int offsetAfter = getOffset(instantAfter);\n+\n+    // if the offsets before and after the instant are the same, the instant lies within a transition\n+    if (offsetBefore == offsetAfter) {\n+        return offsetBefore;\n     }\n \n+    // instant is near a transition, so we need to find the exact transition point\n+    final long transition = nextTransition(instantBefore);\n+\n+    // if the moment after the transition has an offset of offsetAfter, then use that offset\n+    if (getOffset(transition + 1) == offsetAfter) {\n+        return offsetAfter;\n+    }\n+\n+    // if the moment before the transition has an offset of offsetBefore, then use that offset\n+    if (getOffset(transition - 1) == offsetBefore) {\n+        return offsetBefore;\n+    }\n+\n+    // transition is ambiguous, we need to use the \"closest\" offset\n+    final int offsetTransition = getOffset(transition);\n+    long diffBefore = transition - instantBefore;\n+    long diffAfter = instantAfter - transition;\n+    if (diffBefore < diffAfter) {\n+        return offsetBefore;\n+    } else if (diffAfter < diffBefore) {\n+        return offsetAfter;\n+    }\n+\n+    return (offsetBefore < offsetAfter) ? offsetBefore : offsetAfter;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}