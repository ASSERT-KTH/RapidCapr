{
    "patch": "private Type getActualTypeArgumentFor(ParameterizedType paramType, String typeVariableName) {\n    TypeVariable<?>[] typeVars = ((Class<?>) paramType.getRawType()).getTypeParameters();\n    Type[] typeArgs = paramType.getActualTypeArguments();\n    for (int i = 0; i < typeVars.length; i++) {\n        if (typeVars[i].getName().equals(typeVariableName)) {\n            return typeArgs[i];\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..645397b47 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,21 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(ParameterizedType paramType, String typeVariableName) {\n+    TypeVariable<?>[] typeVars = ((Class<?>) paramType.getRawType()).getTypeParameters();\n+    Type[] typeArgs = paramType.getActualTypeArguments();\n+    for (int i = 0; i < typeVars.length; i++) {\n+        if (typeVars[i].getName().equals(typeVariableName)) {\n+            return typeArgs[i];\n+        }\n+    }\n+    return null;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}