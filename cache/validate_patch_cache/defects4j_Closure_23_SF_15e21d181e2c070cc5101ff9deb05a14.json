{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    // Handle the case where the index is out of bounds\n    if (left.isArrayLit()) {\n        if (intIndex < 0 || intIndex >= left.getChildCount()) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n    } else {\n        Node fnCall = NodeUtil.getEnclosingFunction(n);\n        if (fnCall == null || !fnCall.isCall() || NodeUtil.isInvocationTarget(left.getParent())) {\n            // If there's no enclosing function or the left-hand side is not a function call or an invocation target,\n            // we can't determine the length of the array, so we can't fold this GETELEM node.\n            return n;\n        }\n        Node callee = left.cloneNode();\n        fnCall.setFirstChild(callee);\n\n        // Create a temporary variable to hold the array object\n        String arrVarName = \"___arr\";\n        Node varDecl = NodeUtil.newVarDeclaration(arrVarName, callee, fnCall);\n        fnCall.addChildToFront(varDecl);\n\n        // Create a statement to check if the index is out of bounds\n        Node indexCheck = IR.ifNode(\n                IR.or(\n                        IR.lt(IR.name(arrVarName + \".length\"), right),\n                        IR.lt(right, IR.number(\"0\"))\n                ),\n                error(INDEX_OUT_OF_BOUNDS_ERROR, right),\n                IR.empty()\n        ).srcrefTree(right);\n        fnCall.addChildToFront(indexCheck);\n\n        // Create a temporary variable to hold the array element\n        String elemVarName = \"___elem\";\n        Node elemVarDecl = NodeUtil.newVarDeclaration(elemVarName, IR.getelem(IR.name(arrVarName), right), fnCall);\n\n        // Handle the case where the index is out of bounds\n        Node ifIndexOutOfBounds = IR.ifNode(\n                IR.or(\n                        IR.eq(IR.name(elemVarName), IR.name(\"undefined\")),\n                        IR.eq(IR.name(elemVarName), IR.name(\"null\"))\n                ),\n                error(INDEX_OUT_OF_BOUNDS_ERROR, right),\n                IR.empty()\n        ).srcrefTree(right);\n\n        Node block = IR.block(elemVarDecl, ifIndexOutOfBounds).srcrefTree(n);\n        Node stmt = ir.replaceWithBlock(block, n);\n\n        // Replace the entire GETELEM with the temporary variable holding the array element\n        fnCall.before(stmt);\n        Node elem = IR.name(elemVarName).srcrefTree(n);\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n    }\n\n    // Handle the case where the array element is empty\n    Node elem = left.getChildAtIndex(intIndex);\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        elem.detachFromParent();\n    }\n\n    // Replace the entire GETELEM with the array element\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}\n\nprivate Node error(String message, Node node) {\n    return IR.throwNode(\n            IR.newNode(\n                    Token.ERROR,\n                    IR.string(message), IR.number(0)\n            ).srcrefTree(node)\n    ).srcrefTree(node);\n}\n\nprivate boolean isAssignmentTarget(Node n) {\n    Node parent = n.getParent();\n    if (parent.isGetElem() || parent.isGetProp()) {\n        return parent.getParent().isAssign() && parent == parent.getParent().getLastChild();\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..5afef4a5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,114 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    // Handle the case where the index is out of bounds\n+    if (left.isArrayLit()) {\n+        if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        }\n+    } else {\n+        Node fnCall = NodeUtil.getEnclosingFunction(n);\n+        if (fnCall == null || !fnCall.isCall() || NodeUtil.isInvocationTarget(left.getParent())) {\n+            // If there's no enclosing function or the left-hand side is not a function call or an invocation target,\n+            // we can't determine the length of the array, so we can't fold this GETELEM node.\n+            return n;\n+        }\n+        Node callee = left.cloneNode();\n+        fnCall.setFirstChild(callee);\n+\n+        // Create a temporary variable to hold the array object\n+        String arrVarName = \"___arr\";\n+        Node varDecl = NodeUtil.newVarDeclaration(arrVarName, callee, fnCall);\n+        fnCall.addChildToFront(varDecl);\n+\n+        // Create a statement to check if the index is out of bounds\n+        Node indexCheck = IR.ifNode(\n+                IR.or(\n+                        IR.lt(IR.name(arrVarName + \".length\"), right),\n+                        IR.lt(right, IR.number(\"0\"))\n+                ),\n+                error(INDEX_OUT_OF_BOUNDS_ERROR, right),\n+                IR.empty()\n+        ).srcrefTree(right);\n+        fnCall.addChildToFront(indexCheck);\n+\n+        // Create a temporary variable to hold the array element\n+        String elemVarName = \"___elem\";\n+        Node elemVarDecl = NodeUtil.newVarDeclaration(elemVarName, IR.getelem(IR.name(arrVarName), right), fnCall);\n+\n+        // Handle the case where the index is out of bounds\n+        Node ifIndexOutOfBounds = IR.ifNode(\n+                IR.or(\n+                        IR.eq(IR.name(elemVarName), IR.name(\"undefined\")),\n+                        IR.eq(IR.name(elemVarName), IR.name(\"null\"))\n+                ),\n+                error(INDEX_OUT_OF_BOUNDS_ERROR, right),\n+                IR.empty()\n+        ).srcrefTree(right);\n+\n+        Node block = IR.block(elemVarDecl, ifIndexOutOfBounds).srcrefTree(n);\n+        Node stmt = ir.replaceWithBlock(block, n);\n+\n+        // Replace the entire GETELEM with the temporary variable holding the array element\n+        fnCall.before(stmt);\n+        Node elem = IR.name(elemVarName).srcrefTree(n);\n+        n.getParent().replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n     }\n \n+    // Handle the case where the array element is empty\n+    Node elem = left.getChildAtIndex(intIndex);\n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+        elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n-      left.removeChild(elem);\n+        elem.detachFromParent();\n     }\n \n-    // Replace the entire GETELEM with the value\n+    // Replace the entire GETELEM with the array element\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n+\n+private Node error(String message, Node node) {\n+    return IR.throwNode(\n+            IR.newNode(\n+                    Token.ERROR,\n+                    IR.string(message), IR.number(0)\n+            ).srcrefTree(node)\n+    ).srcrefTree(node);\n+}\n+\n+private boolean isAssignmentTarget(Node n) {\n+    Node parent = n.getParent();\n+    if (parent.isGetElem() || parent.isGetProp()) {\n+        return parent.getParent().isAssign() && parent == parent.getParent().getLastChild();\n+    }\n+    return false;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: method isAssignmentTarget(Node) is already defined in class PeepholeFoldConstants",
    "test_result": "ERROR"
}