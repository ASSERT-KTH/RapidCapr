{
    "patch": "    // unions types\n    if (that instanceof UnionType) {\n        TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n        TypePair p = that.getTypesUnderInequality(this);\n        if (pair.typeA.isEquivalentTo(pair.typeB)) {\n            return new TypePair(p.typeB, p.typeA);\n        }\n        return new TypePair(pair.typeA, pair.typeB);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n        case TRUE:\n            TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n            if (pair.typeA.isEquivalentTo(pair.typeB)) {\n                return new TypePair(pair.typeA, pair.typeB);\n            }\n            return pair;\n\n        case FALSE:\n        case UNKNOWN:\n            return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..c56c8c46 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,32 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+    // unions types\n+    if (that instanceof UnionType) {\n+        TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+        TypePair p = that.getTypesUnderInequality(this);\n+        if (pair.typeA.isEquivalentTo(pair.typeB)) {\n+            return new TypePair(p.typeB, p.typeA);\n+        }\n+        return new TypePair(pair.typeA, pair.typeB);\n+    }\n+\n+    // other types\n+    switch (this.testForEquality(that)) {\n+        case TRUE:\n+            TypePair pair = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+            if (pair.typeA.isEquivalentTo(pair.typeB)) {\n+                return new TypePair(pair.typeA, pair.typeB);\n+            }\n+            return pair;\n+\n+        case FALSE:\n+        case UNKNOWN:\n+            return new TypePair(this, that);\n+    }\n+\n+    // switch case is exhaustive\n+    throw new IllegalStateException();\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}