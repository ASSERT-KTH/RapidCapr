{
    "patch": "public String fixCode(String code) {\n\n    String regex = \"(for\\\\([^;]+;)\\\\s*(\\\\d+)\\\\s*(in\\\\s+)([a-zA-Z]+)(\\\\s*\\\\))\";\n    Pattern pattern = Pattern.compile(regex);\n    Matcher matcher = pattern.matcher(code);\n\n    while (matcher.find()) {\n\n        String number = matcher.group(2);\n        String variable = matcher.group(4);\n\n        String replacement = matcher.group(1) + \" \" + variable + \".contains(\" + number + \")\" + \" \" + matcher.group(5);\n\n        code = code.replace(matcher.group(), replacement);\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..559a66e0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,23 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+\n+    String regex = \"(for\\\\([^;]+;)\\\\s*(\\\\d+)\\\\s*(in\\\\s+)([a-zA-Z]+)(\\\\s*\\\\))\";\n+    Pattern pattern = Pattern.compile(regex);\n+    Matcher matcher = pattern.matcher(code);\n+\n+    while (matcher.find()) {\n+\n+        String number = matcher.group(2);\n+        String variable = matcher.group(4);\n+\n+        String replacement = matcher.group(1) + \" \" + variable + \".contains(\" + number + \")\" + \" \" + matcher.group(5);\n+\n+        code = code.replace(matcher.group(), replacement);\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}