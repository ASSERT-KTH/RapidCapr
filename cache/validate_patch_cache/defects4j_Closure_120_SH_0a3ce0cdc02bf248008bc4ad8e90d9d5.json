{
    "patch": "      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          // Make sure the variable is only assigned within the loop.\n          int assignCount = 0;\n          for (BasicBlock loopBlock : block.getContainedBlocks()) {\n            for (Reference r : loopBlock.getReferences()) {\n              if (r.isInitializingDeclaration() || r.isSimpleAssignmentToName()) {\n                if (!name.equals(r.getTarget().getIdentifier())) {\n                  // The variable name was not assigned in this loop, so ignore the reference.\n                  continue;\n                }\n                if (++assignCount > 1) {\n                  return false;\n                }\n              }\n            }\n          }\n          return true;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4b3f1eee 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          // Make sure the variable is only assigned within the loop.\n+          int assignCount = 0;\n+          for (BasicBlock loopBlock : block.getContainedBlocks()) {\n+            for (Reference r : loopBlock.getReferences()) {\n+              if (r.isInitializingDeclaration() || r.isSimpleAssignmentToName()) {\n+                if (!name.equals(r.getTarget().getIdentifier())) {\n+                  // The variable name was not assigned in this loop, so ignore the reference.\n+                  continue;\n+                }\n+                if (++assignCount > 1) {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+          return true;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}