{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0 || a <= 0) {\n        throw new IllegalArgumentException(\"Arguments must satisfy x >= 0 && a > 0. Invalid input arguments: a= \" + a + \", x= \" + x);\n    }\n\n    if (x == 0) {\n        return 1.0;\n    }\n\n    double result = incompleteGammaFraction(a, x);\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * result;\n}\n\nprivate static double incompleteGammaFraction(double a, double x) {\n    double lh = 1;\n    double kh = 1;\n    double sum = 1;\n    double lng = logGamma(a);\n    double term = 1;\n    for (int i = 1; i <= 1000; i++) {\n        double z = 2 * i + a - 1;\n        double a1 = z * i * x;\n        double a2 = (z - 1) * i;\n        double a3 = i;\n        term *= (a1 / (a2 * a3));\n        lh = lh + term;\n        if (Math.abs(term) < Math.abs(lh) * 1e-15) {\n            double d = kh * x * Math.exp(-x) / (a + z);\n            sum += d;\n            break;\n        }\n        kh = kh * (-x) / i;\n    }\n    return sum * Math.exp(a * Math.log(x) - x - lng)/lh;\n}\n\nprivate static double logGamma(double x) {\n    return Gamma.logGamma(x);\n}\n    \npublic static void main(String[] args) {\n    double a = 1.5;\n    double x = 1.0;\n\n    double expected = 0.632120558828558;\n    double actualP = regularizedGammaP(a, x);\n\n    System.out.println(\"regularizedGammaP: a=\" + a + \", x=\" + x + \" -> expected=\" + expected + \", actual=\" + actualP);\n    TestUtils.assertEquals(expected, actualP, 10e-15);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..3ef091b4a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,56 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0 || a <= 0) {\n+        throw new IllegalArgumentException(\"Arguments must satisfy x >= 0 && a > 0. Invalid input arguments: a= \" + a + \", x= \" + x);\n+    }\n+\n+    if (x == 0) {\n+        return 1.0;\n+    }\n+\n+    double result = incompleteGammaFraction(a, x);\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * result;\n+}\n+\n+private static double incompleteGammaFraction(double a, double x) {\n+    double lh = 1;\n+    double kh = 1;\n+    double sum = 1;\n+    double lng = logGamma(a);\n+    double term = 1;\n+    for (int i = 1; i <= 1000; i++) {\n+        double z = 2 * i + a - 1;\n+        double a1 = z * i * x;\n+        double a2 = (z - 1) * i;\n+        double a3 = i;\n+        term *= (a1 / (a2 * a3));\n+        lh = lh + term;\n+        if (Math.abs(term) < Math.abs(lh) * 1e-15) {\n+            double d = kh * x * Math.exp(-x) / (a + z);\n+            sum += d;\n+            break;\n+        }\n+        kh = kh * (-x) / i;\n+    }\n+    return sum * Math.exp(a * Math.log(x) - x - lng)/lh;\n+}\n+\n+private static double logGamma(double x) {\n+    return Gamma.logGamma(x);\n+}\n+    \n+public static void main(String[] args) {\n+    double a = 1.5;\n+    double x = 1.0;\n+\n+    double expected = 0.632120558828558;\n+    double actualP = regularizedGammaP(a, x);\n+\n+    System.out.println(\"regularizedGammaP: a=\" + a + \", x=\" + x + \" -> expected=\" + expected + \", actual=\" + actualP);\n+    TestUtils.assertEquals(expected, actualP, 10e-15);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}