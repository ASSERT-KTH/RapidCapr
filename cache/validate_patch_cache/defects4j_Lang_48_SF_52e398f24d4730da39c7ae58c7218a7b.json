{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        // The simple case, not an array, just test the element\n        isEquals = lhs.equals(rhs);\n    } else if (lhs.getClass() != rhs.getClass()) {\n        // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n        this.setEquals(false);\n    } else if (lhs instanceof long[]) {\n        long[] lhsArray = (long[]) lhs;\n        long[] rhsArray = (long[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else if (lhs instanceof int[]) {\n        int[] lhsArray = (int[]) lhs;\n        int[] rhsArray = (int[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else if (lhs instanceof short[]) {\n        short[] lhsArray = (short[]) lhs;\n        short[] rhsArray = (short[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else if (lhs instanceof char[]) {\n        char[] lhsArray = (char[]) lhs;\n        char[] rhsArray = (char[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else if (lhs instanceof byte[]) {\n        byte[] lhsArray = (byte[]) lhs;\n        byte[] rhsArray = (byte[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else if (lhs instanceof double[]) {\n        double[] lhsArray = (double[]) lhs;\n        double[] rhsArray = (double[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else if (lhs instanceof float[]) {\n        float[] lhsArray = (float[]) lhs;\n        float[] rhsArray = (float[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else if (lhs instanceof boolean[]) {\n        boolean[] lhsArray = (boolean[]) lhs;\n        boolean[] rhsArray = (boolean[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    } else {\n        // Not an array of primitives\n        Object[] lhsArray = (Object[]) lhs;\n        Object[] rhsArray = (Object[]) rhs;\n        if (lhsArray.length != rhsArray.length) {\n            this.setEquals(false);\n            return this;\n        }\n        append(lhsArray, rhsArray);\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..222e02b8 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,100 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        // The simple case, not an array, just test the element\n+        isEquals = lhs.equals(rhs);\n+    } else if (lhs.getClass() != rhs.getClass()) {\n+        // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+        this.setEquals(false);\n+    } else if (lhs instanceof long[]) {\n+        long[] lhsArray = (long[]) lhs;\n+        long[] rhsArray = (long[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n+            this.setEquals(false);\n             return this;\n         }\n-        if (lhs == rhs) {\n+        append(lhsArray, rhsArray);\n+    } else if (lhs instanceof int[]) {\n+        int[] lhsArray = (int[]) lhs;\n+        int[] rhsArray = (int[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n+            this.setEquals(false);\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        append(lhsArray, rhsArray);\n+    } else if (lhs instanceof short[]) {\n+        short[] lhsArray = (short[]) lhs;\n+        short[] rhsArray = (short[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+        append(lhsArray, rhsArray);\n+    } else if (lhs instanceof char[]) {\n+        char[] lhsArray = (char[]) lhs;\n+        char[] rhsArray = (char[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n             this.setEquals(false);\n+            return this;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+        append(lhsArray, rhsArray);\n+    } else if (lhs instanceof byte[]) {\n+        byte[] lhsArray = (byte[]) lhs;\n+        byte[] rhsArray = (byte[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n+            this.setEquals(false);\n+            return this;\n         }\n-        return this;\n+        append(lhsArray, rhsArray);\n+    } else if (lhs instanceof double[]) {\n+        double[] lhsArray = (double[]) lhs;\n+        double[] rhsArray = (double[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        append(lhsArray, rhsArray);\n+    } else if (lhs instanceof float[]) {\n+        float[] lhsArray = (float[]) lhs;\n+        float[] rhsArray = (float[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        append(lhsArray, rhsArray);\n+    } else if (lhs instanceof boolean[]) {\n+        boolean[] lhsArray = (boolean[]) lhs;\n+        boolean[] rhsArray = (boolean[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        append(lhsArray, rhsArray);\n+    } else {\n+        // Not an array of primitives\n+        Object[] lhsArray = (Object[]) lhs;\n+        Object[] rhsArray = (Object[]) rhs;\n+        if (lhsArray.length != rhsArray.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        append(lhsArray, rhsArray);\n     }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}