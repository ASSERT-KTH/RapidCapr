{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(n);\n        return;\n      }\n\n      if (n.getType() == Token.FUNCTION) {\n        if (parent != null && parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a358db51 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1444,25 +1444,29 @@ final class TypedScopeCreator implements ScopeCreator {\n       if (n == scope.getRootNode()) return;\n \n       if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+        handleFunctionInputs(n);\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      if (n.getType() == Token.FUNCTION) {\n+        if (parent != null && parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n       }\n+\n+      if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+      }\n+\n+      attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}