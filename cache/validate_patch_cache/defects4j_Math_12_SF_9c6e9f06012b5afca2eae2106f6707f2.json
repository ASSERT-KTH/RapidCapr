{
    "patch": "public static double[] distributionClone(double[] a) {\n    int n = a.length;\n    double[] clone = new double[n];\n    double[] temp = new double[n];\n\n    // Scale the input distribution to sum to 1.\n    double total = 0.0;\n    for (double d : a) {\n        total += d;\n    }\n    for (int i = 0; i < n; i++) {\n        clone[i] = a[i] / total;\n    }\n\n    // Adjust the clone to match the given distribution.\n    for (int i = 0; i < n; i++) {\n        temp[i] = clone[i];\n    }\n    Arrays.sort(temp);\n    while (!isEqual(clone, a) && temp[0] != temp[n - 1]) {            \n        int j = findMax(clone);\n        int k = findMin(clone);\n        double diff1 = Math.min(a[j] - clone[j], clone[k] - a[k]);\n        clone[j] = clone[j] + diff1;\n        clone[k] = clone[k] - diff1;\n\n        for (int i = 0; i < n; i++) {\n            temp[i] = clone[i];\n        }\n        Arrays.sort(temp);\n    }\n\n    return clone;\n}\n\npublic static int findMax(double[] a) {\n    int maxIndex = 0;\n    for (int i = 1; i < a.length; i++) {\n        if (a[i] > a[maxIndex]) {\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\npublic static int findMin(double[] a) {\n    int minIndex = 0;\n    for (int i = 1; i < a.length; i++) {\n        if (a[i] < a[minIndex]) {\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\n\npublic static boolean isEqual(double[] a, double[] b) {\n    for (int i = 0; i < a.length; i++) {\n        if (Math.abs(a[i] - b[i]) > 0.00001) {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}