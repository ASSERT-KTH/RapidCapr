{
    "patch": "if (node.getType() == Token.CALL) {\n  Node child = node.getFirstChild();\n  if (child.getType() == Token.NAME) {\n    String functionName = child.getString();\n    if (functionName.startsWith(\"goog.\") || functionName.startsWith(\"$\") || functionName.isEmpty()) {\n      // Ignore built-in functions, empty function names and DOM apis\n      return;\n    }\n    changed.add(functionName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..d91e70a3 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,17 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+if (node.getType() == Token.CALL) {\n+  Node child = node.getFirstChild();\n+  if (child.getType() == Token.NAME) {\n+    String functionName = child.getString();\n+    if (functionName.startsWith(\"goog.\") || functionName.startsWith(\"$\") || functionName.isEmpty()) {\n+      // Ignore built-in functions, empty function names and DOM apis\n+      return;\n+    }\n+    changed.add(functionName);\n+  }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}