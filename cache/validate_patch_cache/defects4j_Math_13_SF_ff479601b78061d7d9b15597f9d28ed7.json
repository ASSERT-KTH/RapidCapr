{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix d = dec.getD();\n\n        // Find the square root of the diagonal matrix\n        for (int i = 0; i < n; i++) {\n            final double value = d.getEntry(i, i);\n            if (value < 0.) {\n                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n            }\n            d.setEntry(i, i, FastMath.sqrt(value));\n        }\n\n        // Compute the square root of the matrix\n        final RealMatrix v = dec.getV();\n        return v.multiply(d).multiply(v.transpose());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4aa7f8973 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix d = dec.getD();\n+\n+        // Find the square root of the diagonal matrix\n+        for (int i = 0; i < n; i++) {\n+            final double value = d.getEntry(i, i);\n+            if (value < 0.) {\n+                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+            }\n+            d.setEntry(i, i, FastMath.sqrt(value));\n+        }\n+\n+        // Compute the square root of the matrix\n+        final RealMatrix v = dec.getV();\n+        return v.multiply(d).multiply(v.transpose());\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}