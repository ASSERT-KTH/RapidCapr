{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Keep track of the last referenced parameter to compute number of useless parameters\n    Node lastReferencedParam = null;\n\n    Set<Var> visitedVars = new HashSet<>();\n    for (Var var : referenced) {\n      visitedVars.add(var);\n      if (!var.isParam() || var.getParentNode() != argList) {\n        continue;\n      }\n      Node argNode = var.getNameNode();\n      Preconditions.checkState(argNode.isName());\n\n      if (modifyCallers) {\n        if (callSiteOptimizer.shouldOptimizeCall(argNode)) {\n          lastReferencedParam = argNode;\n        }\n      } else {\n        lastReferencedParam = argNode;\n      }\n    }\n\n    // Try once to visit the arguments to handle the case where all are unused to avoid\n    // unnecessary complexity.\n    if (lastReferencedParam == null && !visitedVars.isEmpty()) {\n      Var first = visitedVars.iterator().next();\n      lastReferencedParam = first.getNameNode();\n    }\n\n    if (lastReferencedParam == null) {\n      // Remove all callee parameters\n      Node param = argList.getFirstChild();\n      while (param != null) {\n        Node nextParam = param.getNext();\n        Preconditions.checkState(param.isParam());\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n        param = nextParam;\n      }\n      return;\n    }\n\n    // Remove useless parameters\n    for (Node param = argList.getFirstChild(); param != null; param = param.getNext()) {\n      if (lastReferencedParam == param) {\n        break;\n      }\n      if (param.isParam()) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..16a9f1e9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,69 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Keep track of the last referenced parameter to compute number of useless parameters\n+    Node lastReferencedParam = null;\n+\n+    Set<Var> visitedVars = new HashSet<>();\n+    for (Var var : referenced) {\n+      visitedVars.add(var);\n+      if (!var.isParam() || var.getParentNode() != argList) {\n+        continue;\n+      }\n+      Node argNode = var.getNameNode();\n+      Preconditions.checkState(argNode.isName());\n+\n+      if (modifyCallers) {\n+        if (callSiteOptimizer.shouldOptimizeCall(argNode)) {\n+          lastReferencedParam = argNode;\n+        }\n+      } else {\n+        lastReferencedParam = argNode;\n+      }\n+    }\n+\n+    // Try once to visit the arguments to handle the case where all are unused to avoid\n+    // unnecessary complexity.\n+    if (lastReferencedParam == null && !visitedVars.isEmpty()) {\n+      Var first = visitedVars.iterator().next();\n+      lastReferencedParam = first.getNameNode();\n+    }\n+\n+    if (lastReferencedParam == null) {\n+      // Remove all callee parameters\n+      Node param = argList.getFirstChild();\n+      while (param != null) {\n+        Node nextParam = param.getNext();\n+        Preconditions.checkState(param.isParam());\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+        param = nextParam;\n+      }\n+      return;\n+    }\n+\n+    // Remove useless parameters\n+    for (Node param = argList.getFirstChild(); param != null; param = param.getNext()) {\n+      if (lastReferencedParam == param) {\n+        break;\n+      }\n+      if (param.isParam()) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}