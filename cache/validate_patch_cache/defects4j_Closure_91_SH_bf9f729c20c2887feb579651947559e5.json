{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nNode grandParent = parent.getParent();\nif (grandParent != null && grandParent.getType() == Token.ASSIGN) {\n  Node lhs = grandParent.getFirstChild();\n  boolean lhsIsPrototype = (lhs.getType() == Token.GETPROP &&\n                            lhs.getLastChild().getString()\n                                .equals(\"prototype\"));\n  if (lhsIsPrototype) {\n    Node grandParentParent = grandParent.getParent();\n    if (grandParentParent.getType() == Token.EXPR_RESULT) {\n      Node target = grandParentParent.getFirstChild();\n      boolean targetIsGetProp = NodeUtil.isGet(target);\n      if (targetIsGetProp && target.getFirstChild().isQualifiedName()) {\n        String basename = target.getFirstChild().getQualifiedName();\n        boolean basenameIsFunctionOrObject = basename.equals(\"Function\") ||\n                                              basename.equals(\"Object\");\n        if (!basenameIsFunctionOrObject) {\n          return false;\n        }\n      }\n    } else if (grandParentParent.getType() == Token.VAR) {\n      // `Var` nodes will always have an LHS of type `Name`.\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..660c3df1 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,32 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+Node grandParent = parent.getParent();\n+if (grandParent != null && grandParent.getType() == Token.ASSIGN) {\n+  Node lhs = grandParent.getFirstChild();\n+  boolean lhsIsPrototype = (lhs.getType() == Token.GETPROP &&\n+                            lhs.getLastChild().getString()\n+                                .equals(\"prototype\"));\n+  if (lhsIsPrototype) {\n+    Node grandParentParent = grandParent.getParent();\n+    if (grandParentParent.getType() == Token.EXPR_RESULT) {\n+      Node target = grandParentParent.getFirstChild();\n+      boolean targetIsGetProp = NodeUtil.isGet(target);\n+      if (targetIsGetProp && target.getFirstChild().isQualifiedName()) {\n+        String basename = target.getFirstChild().getQualifiedName();\n+        boolean basenameIsFunctionOrObject = basename.equals(\"Function\") ||\n+                                              basename.equals(\"Object\");\n+        if (!basenameIsFunctionOrObject) {\n+          return false;\n+        }\n+      }\n+    } else if (grandParentParent.getType() == Token.VAR) {\n+      // `Var` nodes will always have an LHS of type `Name`.\n+      return false;\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}