{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent.isVar()) {\n      Node initializer = n.getFirstChild().getNext();\n      if (initializer.isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null) {\n          aliases.put(name, aliasVar);\n          String qualifiedName = initializer.getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        }\n      }\n      // Non-alias vars must be in a function. If they are declared in a\n      // goog.scope block, report a warning.\n      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.isFunction()) {\n        Node block = grandparent.getLastChild();\n        Node type = block.getFirstChild();\n        if (type.isString()) {\n          String name = n.getString();\n          if (!aliases.containsKey(name)) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..734a08a7 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,38 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent.isVar()) {\n+      Node initializer = n.getFirstChild().getNext();\n+      if (initializer.isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null) {\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+          String qualifiedName = initializer.getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n+      }\n+      // Non-alias vars must be in a function. If they are declared in a\n+      // goog.scope block, report a warning.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.isFunction()) {\n+        Node block = grandparent.getLastChild();\n+        Node type = block.getFirstChild();\n+        if (type.isString()) {\n+          String name = n.getString();\n+          if (!aliases.containsKey(name)) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          }\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}