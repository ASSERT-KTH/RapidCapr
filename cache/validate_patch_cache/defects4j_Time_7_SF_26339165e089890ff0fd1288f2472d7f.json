{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    DateTimeFormatter formatter =\n            new DateTimeFormatterBuilder().append(parser).toFormatter();\n    Chronology chrono = selectChronology(instant.getChronology());\n\n    try {\n        // Try parsing the date/time as is\n        ReadableInstant result = formatter.withChronology(chrono)\n                .parseDateTime(text).toInstant();\n\n        // Set the instant's fields and offset\n        instant.setMillis(result.getMillis());\n        if (result instanceof ReadableInstantWithMillis) {\n            int offset = ((ReadableInstantWithMillis) result).getZoneOffset();\n            instant.setChronology(result.getChronology());\n            instant.setZone(DateTimeZone.forOffsetMillis(offset));\n        } else {\n            instant.setChronology(chrono);\n        }\n\n        return text.length();\n    } catch (IllegalArgumentException e) {\n        // Date/time is not valid, try again after adjusting timezone offset\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instant.getMillis(), chrono, iLocale, iPivotYear);\n\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Set the instant as proleptic, unless there was a timezone offset \n        // in the parsed text\n        boolean proleptic = bucket.extract(DateTimeFieldType.zone()) == null;\n        instant.setMillis(bucket.computeMillis(proleptic, text));\n\n        if (bucket.getOffsetInteger() != null) {\n            int offset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(offset);\n            // Adjust the instant's fields according to the timezone offset\n            instant.setChronology(chrono.withZone(parsedZone));\n            instant.setZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            // Set the instant's fields as-is if there is no timezone offset, \n            // but a timezone was parsed from the input text\n            instant.setChronology(chrono.withZone(bucket.getZone()));\n        } else {\n            // Set the instant's fields to UTC if no timezone info was found\n            instant.setChronology(chrono.withUTC());\n        }\n\n        return newPos;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..c5b6b957 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,62 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    DateTimeFormatter formatter =\n+            new DateTimeFormatterBuilder().append(parser).toFormatter();\n+    Chronology chrono = selectChronology(instant.getChronology());\n+\n+    try {\n+        // Try parsing the date/time as is\n+        ReadableInstant result = formatter.withChronology(chrono)\n+                .parseDateTime(text).toInstant();\n+\n+        // Set the instant's fields and offset\n+        instant.setMillis(result.getMillis());\n+        if (result instanceof ReadableInstantWithMillis) {\n+            int offset = ((ReadableInstantWithMillis) result).getZoneOffset();\n+            instant.setChronology(result.getChronology());\n+            instant.setZone(DateTimeZone.forOffsetMillis(offset));\n+        } else {\n+            instant.setChronology(chrono);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n+        return text.length();\n+    } catch (IllegalArgumentException e) {\n+        // Date/time is not valid, try again after adjusting timezone offset\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instant.getMillis(), chrono, iLocale, iPivotYear);\n+\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+\n+        // Set the instant as proleptic, unless there was a timezone offset \n+        // in the parsed text\n+        boolean proleptic = bucket.extract(DateTimeFieldType.zone()) == null;\n+        instant.setMillis(bucket.computeMillis(proleptic, text));\n+\n+        if (bucket.getOffsetInteger() != null) {\n+            int offset = bucket.getOffsetInteger();\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(offset);\n+            // Adjust the instant's fields according to the timezone offset\n+            instant.setChronology(chrono.withZone(parsedZone));\n+            instant.setZone(parsedZone);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+            // Set the instant's fields as-is if there is no timezone offset, \n+            // but a timezone was parsed from the input text\n+            instant.setChronology(chrono.withZone(bucket.getZone()));\n+        } else {\n+            // Set the instant's fields to UTC if no timezone info was found\n+            instant.setChronology(chrono.withUTC());\n         }\n+\n         return newPos;\n     }\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}