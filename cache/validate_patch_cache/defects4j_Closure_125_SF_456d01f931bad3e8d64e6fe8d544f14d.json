{
    "patch": "private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    if (type.isConstructor()) {\n        FunctionType fnType = type.toMaybeFunctionType();\n        if (fnType == null) {\n            // The type is a constructor, but not a function type.\n            report(t, constructor, NOT_A_CONSTRUCTOR);\n            ensureTyped(t, n);\n        } else {\n            // The type is a function type, so visit its parameters and ensure the\n            // type of its instance.\n            visitParameterList(t, n, fnType);\n            ensureTyped(t, n, fnType.getInstanceType());\n        }\n    } else if (type.isEmptyType() || type.isUnknownType()) {\n        // If the type is unknown or empty, then we cannot check that it's a\n        // constructor, so just ensure that it's typed and return.\n        ensureTyped(t, n);\n    } else {\n        // The type is not a constructor, so report the error and ensure that the\n        // node is typed.\n        report(t, constructor, NOT_A_CONSTRUCTOR);\n        ensureTyped(t, n);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..0a29ebe1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1653,22 +1653,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits a NEW node.\n    */\n-  private void visitNew(NodeTraversal t, Node n) {\n+private void visitNew(NodeTraversal t, Node n) {\n     Node constructor = n.getFirstChild();\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n-      FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n-        visitParameterList(t, n, fnType);\n-        ensureTyped(t, n, fnType.getInstanceType());\n-      } else {\n+    if (type.isConstructor()) {\n+        FunctionType fnType = type.toMaybeFunctionType();\n+        if (fnType == null) {\n+            // The type is a constructor, but not a function type.\n+            report(t, constructor, NOT_A_CONSTRUCTOR);\n+            ensureTyped(t, n);\n+        } else {\n+            // The type is a function type, so visit its parameters and ensure the\n+            // type of its instance.\n+            visitParameterList(t, n, fnType);\n+            ensureTyped(t, n, fnType.getInstanceType());\n+        }\n+    } else if (type.isEmptyType() || type.isUnknownType()) {\n+        // If the type is unknown or empty, then we cannot check that it's a\n+        // constructor, so just ensure that it's typed and return.\n         ensureTyped(t, n);\n-      }\n     } else {\n-      report(t, n, NOT_A_CONSTRUCTOR);\n-      ensureTyped(t, n);\n+        // The type is not a constructor, so report the error and ensure that the\n+        // node is typed.\n+        report(t, constructor, NOT_A_CONSTRUCTOR);\n+        ensureTyped(t, n);\n     }\n-  }\n+}\n \n   /**\n    * Check whether there's any property conflict for for a particular super",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}