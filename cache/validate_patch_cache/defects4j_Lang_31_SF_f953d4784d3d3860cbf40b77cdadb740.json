{
    "patch": "public static boolean containsAny(char[] arr1, char[] arr2) {\n    if (arr1 == null || arr2 == null) {\n        return false;\n    }\n\n    boolean arr1ContainsSupplementaryChars = containsSupplementaryChars(arr1);\n    boolean arr2ContainsSupplementaryChars = containsSupplementaryChars(arr2);\n\n    if (!arr1ContainsSupplementaryChars && !arr2ContainsSupplementaryChars) {\n        return StringUtils.containsAny(new String(arr1), new String(arr2));\n    }\n\n    IntStream codePoints1 = new String(arr1).codePoints();\n    IntStream codePoints2 = new String(arr2).codePoints();\n\n    if (!arr1ContainsSupplementaryChars && arr2ContainsSupplementaryChars) {\n        Set<Integer> set1 = Arrays.stream(arr1).mapToObj(c -> (int) c).collect(Collectors.toSet());\n        return codePoints2.anyMatch(set1::contains);\n    } else if (arr1ContainsSupplementaryChars && !arr2ContainsSupplementaryChars) {\n        Set<Integer> set2 = Arrays.stream(arr2).mapToObj(c -> (int) c).collect(Collectors.toSet());\n        return codePoints1.anyMatch(set2::contains);\n    } else {\n        Set<Integer> set2 = codePoints2.collect(HashSet::new, HashSet::add, HashSet::addAll);\n        return codePoints1.anyMatch(set2::contains);\n    }\n}\n\nprivate static boolean containsSupplementaryChars(char[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        if (Character.isHighSurrogate(arr[i])) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..90ffac02 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] arr1, char[] arr2) {\n+    if (arr1 == null || arr2 == null) {\n+        return false;\n+    }\n+\n+    boolean arr1ContainsSupplementaryChars = containsSupplementaryChars(arr1);\n+    boolean arr2ContainsSupplementaryChars = containsSupplementaryChars(arr2);\n+\n+    if (!arr1ContainsSupplementaryChars && !arr2ContainsSupplementaryChars) {\n+        return StringUtils.containsAny(new String(arr1), new String(arr2));\n+    }\n+\n+    IntStream codePoints1 = new String(arr1).codePoints();\n+    IntStream codePoints2 = new String(arr2).codePoints();\n+\n+    if (!arr1ContainsSupplementaryChars && arr2ContainsSupplementaryChars) {\n+        Set<Integer> set1 = Arrays.stream(arr1).mapToObj(c -> (int) c).collect(Collectors.toSet());\n+        return codePoints2.anyMatch(set1::contains);\n+    } else if (arr1ContainsSupplementaryChars && !arr2ContainsSupplementaryChars) {\n+        Set<Integer> set2 = Arrays.stream(arr2).mapToObj(c -> (int) c).collect(Collectors.toSet());\n+        return codePoints1.anyMatch(set2::contains);\n+    } else {\n+        Set<Integer> set2 = codePoints2.collect(HashSet::new, HashSet::add, HashSet::addAll);\n+        return codePoints1.anyMatch(set2::contains);\n+    }\n+}\n+\n+private static boolean containsSupplementaryChars(char[] arr) {\n+    for (int i = 0; i < arr.length; i++) {\n+        if (Character.isHighSurrogate(arr[i])) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}