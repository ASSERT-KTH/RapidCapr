{
    "patch": "public class TestClass {\n    public static <T> ReturnValue<T> returnValue(T value) {\n        return new ReturnValue<>(value);\n    }\n\n    private static class ReturnValue<T> {\n        private final T value;\n\n        private ReturnValue(T value) { this.value = value; }\n\n        public T returnValueFor(Class<T> clazz) {\n            return clazz.cast(value);\n        }\n    }\n\n    public static void main(String[] args) {\n        // Sample usage\n        ReturnValue<String> values = returnValue(null);\n        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a21146bf9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class TestClass {\n+    public static <T> ReturnValue<T> returnValue(T value) {\n+        return new ReturnValue<>(value);\n+    }\n+\n+    private static class ReturnValue<T> {\n+        private final T value;\n+\n+        private ReturnValue(T value) { this.value = value; }\n+\n+        public T returnValueFor(Class<T> clazz) {\n+            return clazz.cast(value);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        // Sample usage\n+        ReturnValue<String> values = returnValue(null);\n+        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}