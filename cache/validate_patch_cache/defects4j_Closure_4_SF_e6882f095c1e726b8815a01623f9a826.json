{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean isCycleDetected = detectImplicitPrototypeCycle();\n    JSType resolvedType = null;\n    if (resolveViaRegistry(t, enclosing)) {\n      resolvedType = isCycleDetected ? null : this;\n    } else {\n      resolveViaProperties(t, enclosing);\n      if (isCycleDetected) {\n        handleTypeCycle(t);\n      } else {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        resolvedType = isResolved() ? (registry.isLastGeneration() ?\n            getReferencedType() : this) : null;\n      }\n    }\n    if (resolvedType == null && isCycleDetected) {\n      handleTypeCycle(t);\n    }\n    return resolvedType;\n  }    ",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..c4f06a1d 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,34 +182,26 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    boolean isCycleDetected = detectImplicitPrototypeCycle();\n+    JSType resolvedType = null;\n+    if (resolveViaRegistry(t, enclosing)) {\n+      resolvedType = isCycleDetected ? null : this;\n+    } else {\n+      resolveViaProperties(t, enclosing);\n+      if (isCycleDetected) {\n+        handleTypeCycle(t);\n+      } else {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        resolvedType = isResolved() ? (registry.isLastGeneration() ?\n+            getReferencedType() : this) : null;\n+      }\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (resolvedType == null && isCycleDetected) {\n       handleTypeCycle(t);\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return resolvedType;\n+  }    \n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ong;",
    "test_result": "FAIL"
}