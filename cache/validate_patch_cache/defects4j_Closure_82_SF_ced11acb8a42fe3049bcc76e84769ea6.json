{
    "patch": "public final boolean isEmptyType() {\n    /*\n     * Type is empty if we have no useful information about it.\n     * That is, if it is a no-type, void-type, null-type,\n     * no-object-type, no-resolved-type, or unknown-type (if not supposed to be an array type).\n     */\n    return isNoType() || isVoidType() || isNullType() || \n           isNoObjectType() || isNoResolvedType() || \n           (isUnknownType() && !isArrayType());\n}\n\n@Override\npublic String toString() {\n    if (isVoidType()) {\n        return \"void\";\n    } else if (isPrimitive()) {\n        return getPrimitiveTypeAnnotation();\n    } else if (isTypeVariable()) {\n        return getName();\n    } else if (isArrayType()) {\n        return getArrayComponentType().toString() + \"[]\";\n    } else if (isWildcardType()) {\n        return capture().toString();\n    } else if (isEmptyType()) {\n        return \"empty\";\n    } else {\n        String result = getQualifiedName();\n        if (result.endsWith(\".<undefinedtype>\")) {\n            result = result.substring(0, result.length() - 15);\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..26a507eb 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -159,9 +159,39 @@ public abstract class JSType implements Serializable {\n     return false;\n   }\n \n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+public final boolean isEmptyType() {\n+    /*\n+     * Type is empty if we have no useful information about it.\n+     * That is, if it is a no-type, void-type, null-type,\n+     * no-object-type, no-resolved-type, or unknown-type (if not supposed to be an array type).\n+     */\n+    return isNoType() || isVoidType() || isNullType() || \n+           isNoObjectType() || isNoResolvedType() || \n+           (isUnknownType() && !isArrayType());\n+}\n+\n+@Override\n+public String toString() {\n+    if (isVoidType()) {\n+        return \"void\";\n+    } else if (isPrimitive()) {\n+        return getPrimitiveTypeAnnotation();\n+    } else if (isTypeVariable()) {\n+        return getName();\n+    } else if (isArrayType()) {\n+        return getArrayComponentType().toString() + \"[]\";\n+    } else if (isWildcardType()) {\n+        return capture().toString();\n+    } else if (isEmptyType()) {\n+        return \"empty\";\n+    } else {\n+        String result = getQualifiedName();\n+        if (result.endsWith(\".<undefinedtype>\")) {\n+            result = result.substring(0, result.length() - 15);\n+        }\n+        return result;\n+    }\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}