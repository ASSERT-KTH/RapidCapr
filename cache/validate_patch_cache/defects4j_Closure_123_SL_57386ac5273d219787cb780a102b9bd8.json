{
    "patch": "public static String processExpression(Context lhsContext, String exp, Context rhsContext, boolean isBinding) {\n\n        if (inArray) {\n            lhsContext = Context.START_OF_EXPR;\n        }\n\n        int precedence = getPrecedence(exp);\n        boolean lhsNeedsParens = lhsContext.compareTo(rhsContext) > 0;\n        boolean rhsNeedsParens = rhsContext == Context.ASSIGNMENT || rhsContext == Context.CONDITIONAL;\n        boolean shouldWrapRHSInParens = isBinding || (rhsContext.compareTo(lhsContext) > 0) || \n                (rhsContext == Context.ASSIGNMENT && lhsContext == Context.ASSIGNMENT);\n        boolean isArrayLiteral = lhsContext == Context.ARRAY_LITERAL || lhsContext == Context.START_OF_EXPR;\n        boolean isFunctionCall = lhsContext == Context.FUNCTION_CALL;\n        boolean isUnary = isUnary(exp, lhsContext, rhsContext);\n        boolean isUpdate = isUpdate(exp, lhsContext, rhsContext);\n\n        if (isUnary) {\n            rhsNeedsParens = true;\n        }\n\n        if (isUpdate) {\n            shouldWrapRHSInParens = false;\n        }\n\n        if (isArrayLiteral) {\n            lhsNeedsParens = true;\n            rhsNeedsParens = true;\n        }\n\n        if (isFunctionCall) {\n            rhsNeedsParens = false;\n        }\n\n        if (shouldWrapRHSInParens) {\n            exp = \"(\" + exp + \")\";\n        }\n\n        if (lhsNeedsParens) {\n            exp = \"(\" + exp;\n        }\n        if (rhsNeedsParens) {\n            exp = exp + \")\";\n        }\n\n        return maybeAddLHSOperator(lhsContext, exp, precedence) + exp + maybeAddRHSOperator(rhsContext, precedence, isBinding);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}