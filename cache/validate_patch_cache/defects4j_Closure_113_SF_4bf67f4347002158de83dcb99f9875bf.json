{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      boolean shouldRemove = false;\n      if (provided != null) {\n        shouldRemove = true;\n      } else if (options.removeUnusedModulesExport) {\n        Node argNode = n.getLastChild();\n        if (argNode.isString() && argNode.getNext() == null &&\n            parent.isExprResult()) {\n          String varName = left.getQualifiedName();\n          if (varName != null) {\n            Var v = t.getScope().getVar(varName);\n            if (v != null && (v.isExtern() ||\n                              v.getScope().isGlobal())) {\n              Node exported = NodeUtil.getEnclosingFunction(n);\n              if (exported != null &&\n                  exported.isFunction() &&\n                  NodeUtil.getFunctionParameters(exported).isEmpty() &&\n                  NodeUtil.doesFunctionReturn(exported, argNode.getString())) {\n                shouldRemove = true;\n              }\n            }\n          }\n        }\n      }\n      if (shouldRemove) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..cad81fda 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,7 +292,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n@@ -326,7 +326,30 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n+      boolean shouldRemove = false;\n       if (provided != null) {\n+        shouldRemove = true;\n+      } else if (options.removeUnusedModulesExport) {\n+        Node argNode = n.getLastChild();\n+        if (argNode.isString() && argNode.getNext() == null &&\n+            parent.isExprResult()) {\n+          String varName = left.getQualifiedName();\n+          if (varName != null) {\n+            Var v = t.getScope().getVar(varName);\n+            if (v != null && (v.isExtern() ||\n+                              v.getScope().isGlobal())) {\n+              Node exported = NodeUtil.getEnclosingFunction(n);\n+              if (exported != null &&\n+                  exported.isFunction() &&\n+                  NodeUtil.getFunctionParameters(exported).isEmpty() &&\n+                  NodeUtil.doesFunctionReturn(exported, argNode.getString())) {\n+                shouldRemove = true;\n+              }\n+            }\n+          }\n+        }\n+      }\n+      if (shouldRemove) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}