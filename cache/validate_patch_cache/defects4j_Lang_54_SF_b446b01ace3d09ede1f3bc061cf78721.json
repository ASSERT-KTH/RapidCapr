{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    String[] parts = str.split(\"_\");\n    if (parts.length < 1 || parts.length > 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = parts[0];\n    if (!language.matches(\"[a-z]{2}\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String country = \"\";\n    if (parts.length > 1) {\n        country = parts[1];\n    }\n    if (country.length() > 0 && !country.matches(\"[A-Z]{2}\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String variant = \"\";\n    if (parts.length > 2) {\n        variant = parts[2];\n    }\n    if (variant.length() > 0 && !variant.matches(\"[\\\\d\\\\w]+([_][\\\\d\\\\w]+)*\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(language, country, variant);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..58580f09 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,34 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-            }\n-        }\n+public static Locale toLocale(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    String[] parts = str.split(\"_\");\n+    if (parts.length < 1 || parts.length > 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String language = parts[0];\n+    if (!language.matches(\"[a-z]{2}\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String country = \"\";\n+    if (parts.length > 1) {\n+        country = parts[1];\n     }\n+    if (country.length() > 0 && !country.matches(\"[A-Z]{2}\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String variant = \"\";\n+    if (parts.length > 2) {\n+        variant = parts[2];\n+    }\n+    if (variant.length() > 0 && !variant.matches(\"[\\\\d\\\\w]+([_][\\\\d\\\\w]+)*\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    return new Locale(language, country, variant);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: Must be 3, 5 or 7+ in length",
    "test_result": "FAIL"
}