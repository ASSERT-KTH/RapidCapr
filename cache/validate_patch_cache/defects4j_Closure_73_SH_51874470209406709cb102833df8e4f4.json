{
    "patch": "          // No charsetEncoder provided - pass straight latin characters\n          // through, and escape the rest.  Doing the explicit character\n          // check is measurably faster than using the CharsetEncoder.\n          if (c > 0x1f && c <= 0x7e) {\n            // ASCII printable character\n            sb.append(c);\n          } else if (c == '\\n') {\n            sb.append(\"\\\\n\");\n          } else if (c == '\\r') {\n            sb.append(\"\\\\r\");\n          } else if (c == '\\t') {\n            sb.append(\"\\\\t\");\n          } else if (outputCharsetEncoder != null) {\n            // if outputCharsetEncoder is provided, check the character can be\n            // represented in the given character set\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // if the given character is not representable, escape it\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // if outputCharsetEncoder is not given, then escape all non-latin and\n            // non-ascii characters\n            appendHexJavaScriptRepresentation(sb, c);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..e8d4ffa0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,32 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+          // No charsetEncoder provided - pass straight latin characters\n+          // through, and escape the rest.  Doing the explicit character\n+          // check is measurably faster than using the CharsetEncoder.\n+          if (c > 0x1f && c <= 0x7e) {\n+            // ASCII printable character\n+            sb.append(c);\n+          } else if (c == '\\n') {\n+            sb.append(\"\\\\n\");\n+          } else if (c == '\\r') {\n+            sb.append(\"\\\\r\");\n+          } else if (c == '\\t') {\n+            sb.append(\"\\\\t\");\n+          } else if (outputCharsetEncoder != null) {\n+            // if outputCharsetEncoder is provided, check the character can be\n+            // represented in the given character set\n+            if (outputCharsetEncoder.canEncode(c)) {\n+              sb.append(c);\n+            } else {\n+              // if the given character is not representable, escape it\n+              appendHexJavaScriptRepresentation(sb, c);\n+            }\n+          } else {\n+            // if outputCharsetEncoder is not given, then escape all non-latin and\n+            // non-ascii characters\n+            appendHexJavaScriptRepresentation(sb, c);\n+          }\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}