{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    chrono = selectChronology(chrono); // this line was moved up\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    \n    // this section is updated\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        // if offset was parsed, use that zone\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else {\n        // if offset was not parsed, use bucket zone if available or default zone\n        TimeZone timeZone = bucket.getZone() == null ? chrono.getZone() : bucket.getZone().toTimeZone();\n        DateTimeZone defaultZone = DateTimeZone.forTimeZone(timeZone);\n        chrono = chrono.withZone(defaultZone);\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    \n    // this section is updated to check for Feb 29th\n    if (bucket.getOffsetInteger() == null && bucket.getZone() == null && !bucket.isFullyParsed()) {\n        long fixedMillis = instant.getMillis();\n        LocalDate localDate = new LocalDate(fixedMillis, chrono);\n        if (localDate.getMonthOfYear() == 2 && localDate.getDayOfMonth() == 29 && !localDate.year().isLeap()) {\n            throw new IllegalArgumentException(\"Invalid date: \" + text);\n        }\n    }\n    \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..9a83c44d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,49 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    chrono = selectChronology(chrono); // this line was moved up\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    \n+    // this section is updated\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        // if offset was parsed, use that zone\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else {\n+        // if offset was not parsed, use bucket zone if available or default zone\n+        TimeZone timeZone = bucket.getZone() == null ? chrono.getZone() : bucket.getZone().toTimeZone();\n+        DateTimeZone defaultZone = DateTimeZone.forTimeZone(timeZone);\n+        chrono = chrono.withZone(defaultZone);\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    \n+    // this section is updated to check for Feb 29th\n+    if (bucket.getOffsetInteger() == null && bucket.getZone() == null && !bucket.isFullyParsed()) {\n+        long fixedMillis = instant.getMillis();\n+        LocalDate localDate = new LocalDate(fixedMillis, chrono);\n+        if (localDate.getMonthOfYear() == 2 && localDate.getDayOfMonth() == 29 && !localDate.year().isLeap()) {\n+            throw new IllegalArgumentException(\"Invalid date: \" + text);\n         }\n-        return newPos;\n     }\n+    \n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}