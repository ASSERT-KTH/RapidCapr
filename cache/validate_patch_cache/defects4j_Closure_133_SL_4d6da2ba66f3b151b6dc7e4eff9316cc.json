{
    "patch": "result = stream.getRemainingJSDocLine();\nif (result == null) {\n    return null;\n}\nresult = result.replaceAll(\"\\\\{T\\\\}\", \"\").trim(); // trim after replacing {T}\n// Check for JSC_TYPE_PARSE_ERROR warnings\nif (result.contains(\"JSC_TYPE_PARSE_ERROR\")) {\n    throw new IllegalStateException(\"JSC_TYPE_PARSE_ERROR warning. \" + result);\n}\nif (result.isEmpty()) { // check if result is empty after trimming and replacing {T}\n    return null;\n}\nreturn result;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..95b87d28 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,19 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+result = stream.getRemainingJSDocLine();\n+if (result == null) {\n+    return null;\n+}\n+result = result.replaceAll(\"\\\\{T\\\\}\", \"\").trim(); // trim after replacing {T}\n+// Check for JSC_TYPE_PARSE_ERROR warnings\n+if (result.contains(\"JSC_TYPE_PARSE_ERROR\")) {\n+    throw new IllegalStateException(\"JSC_TYPE_PARSE_ERROR warning. \" + result);\n+}\n+if (result.isEmpty()) { // check if result is empty after trimming and replacing {T}\n+    return null;\n+}\n+return result;\n     return result;\n   }\n ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}