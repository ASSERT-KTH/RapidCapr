{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        // Use regularized gamma function complement when accuracy would be lost\n        double complement = regularizedGammaComplement(a, x);\n        if (complement == 0.0) {\n            return 1.0;\n        }\n        double regularizedGamma = 1.0 - complement;\n        if (regularizedGamma == 1.0) {\n            return 1.0;\n        }\n        return Gamma.gamma(a) * x * Math.pow(a + x, -a) * regularizedGamma;\n    }\n    // Series representation\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    while (Math.abs(an / sum) > 1e-15 && n < 1000) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n    }\n    double regularizedGamma = Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n    if (regularizedGamma == 1.0) {\n        return 1.0;\n    }\n    return regularizedGamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e4ec46e12 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,40 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        // Use regularized gamma function complement when accuracy would be lost\n+        double complement = regularizedGammaComplement(a, x);\n+        if (complement == 0.0) {\n+            return 1.0;\n+        }\n+        double regularizedGamma = 1.0 - complement;\n+        if (regularizedGamma == 1.0) {\n+            return 1.0;\n+        }\n+        return Gamma.gamma(a) * x * Math.pow(a + x, -a) * regularizedGamma;\n+    }\n+    // Series representation\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    while (Math.abs(an / sum) > 1e-15 && n < 1000) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+    double regularizedGamma = Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+    if (regularizedGamma == 1.0) {\n+        return 1.0;\n+    }\n+    return regularizedGamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}