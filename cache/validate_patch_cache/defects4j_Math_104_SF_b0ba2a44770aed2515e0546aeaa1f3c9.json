{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments.\");\n    }\n    if (x < a + 1.0) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n    double ret = incompleteGammaFraction(a, x);\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ret;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments.\");\n    }\n    if (x < a + 1.0) {\n        return 1 - regularizedGammaP(a, x);\n    }\n    double ret = incompleteGammaFraction(a, x);\n    return ret;\n}\n\nprivate static double incompleteGammaFraction(double a, double x) {\n    double eps = 10e-15;\n    double fpmin = 10e-30;\n    double gln = logGamma(a);\n    double b = x + 1.0 - a;\n    double c = 1.0 / fpmin;\n    double d = 1.0 / b;\n    double h = d;\n    double an;\n    double del;\n    int i = 1;\n    while (true) {\n        an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < fpmin) {\n            d = fpmin;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < fpmin) {\n            c = fpmin;\n        }\n        d = 1.0 / d;\n        del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < eps) {\n            break;\n        }\n        i++;\n    }\n    double res = Math.exp(-x + a * Math.log(x) - gln) * h;\n    return res;\n}\n\nprivate static double logGamma(double x) {\n    double[] cof = {76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n    double stp = 2.5066282746310005;\n    double halfLogTwoPi = 0.9189385332046727;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    double ser = 1.000000000190015;\n    for (int i = 0; i <= 5; i++) {\n        x++;\n        ser += cof[i] / x;\n    }\n    return -stp * tmp + Math.log(ser) - halfLogTwoPi;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..3f5ca11ab 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,75 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments.\");\n+    }\n+    if (x < a + 1.0) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+    double ret = incompleteGammaFraction(a, x);\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ret;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments.\");\n+    }\n+    if (x < a + 1.0) {\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+    double ret = incompleteGammaFraction(a, x);\n+    return ret;\n+}\n+\n+private static double incompleteGammaFraction(double a, double x) {\n+    double eps = 10e-15;\n+    double fpmin = 10e-30;\n+    double gln = logGamma(a);\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / fpmin;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an;\n+    double del;\n+    int i = 1;\n+    while (true) {\n+        an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < fpmin) {\n+            d = fpmin;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < fpmin) {\n+            c = fpmin;\n+        }\n+        d = 1.0 / d;\n+        del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < eps) {\n+            break;\n+        }\n+        i++;\n+    }\n+    double res = Math.exp(-x + a * Math.log(x) - gln) * h;\n+    return res;\n+}\n+\n+private static double logGamma(double x) {\n+    double[] cof = {76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n+    double stp = 2.5066282746310005;\n+    double halfLogTwoPi = 0.9189385332046727;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    double ser = 1.000000000190015;\n+    for (int i = 0; i <= 5; i++) {\n+        x++;\n+        ser += cof[i] / x;\n+    }\n+    return -stp * tmp + Math.log(ser) - halfLogTwoPi;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}