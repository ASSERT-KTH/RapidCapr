{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double total = 0;\n    double typed = 0;\n    JSONArray array = jsonObject.getJSONArray(\"Data\");\n\n    for (int i = 0; i < array.length(); i++) {\n        JSONObject item = array.getJSONObject(i);\n\n        if (item.getString(\"DataType\").equals(\"Typed\")) {\n            typed += item.getDouble(\"DataValue\");\n        }\n        total += item.getDouble(\"DataValue\");\n    }\n\n    double result = typed / total * 100.0;\n    return Math.round(result * 10) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..10a55906 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double total = 0;\n+    double typed = 0;\n+    JSONArray array = jsonObject.getJSONArray(\"Data\");\n+\n+    for (int i = 0; i < array.length(); i++) {\n+        JSONObject item = array.getJSONObject(i);\n+\n+        if (item.getString(\"DataType\").equals(\"Typed\")) {\n+            typed += item.getDouble(\"DataValue\");\n+        }\n+        total += item.getDouble(\"DataValue\");\n+    }\n+\n+    double result = typed / total * 100.0;\n+    return Math.round(result * 10) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}