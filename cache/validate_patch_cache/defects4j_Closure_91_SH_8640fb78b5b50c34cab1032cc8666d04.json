{
    "patch": "      Node grandparent = parent.getParent();\n      if (grandparent != null &&\n          (grandparent.getType() == Token.EXPR_RESULT ||\n          (grandparent.getType() == Token.VAR &&\n          grandparent.getParent() != null &&\n          grandparent.getParent().getType() == Token.SCRIPT))) {\n        return false;\n      }\n      if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n        lhs = grandparent.getFirstChild();\n        rhs = lhs.getNext();\n\n        if (n != lhs || !NodeUtil.isGet(lhs) || lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        grandparent = grandparent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n          grandparent = grandparent.getParent();\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..43e8e6dd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null &&\n+          (grandparent.getType() == Token.EXPR_RESULT ||\n+          (grandparent.getType() == Token.VAR &&\n+          grandparent.getParent() != null &&\n+          grandparent.getParent().getType() == Token.SCRIPT))) {\n+        return false;\n+      }\n+      if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n+        lhs = grandparent.getFirstChild();\n+        rhs = lhs.getNext();\n+\n+        if (n != lhs || !NodeUtil.isGet(lhs) || lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        grandparent = grandparent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n+          grandparent = grandparent.getParent();\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}