{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      } else {\n        // The first child of a CALL node should be NAME\n        throw new IllegalArgumentException(\"Invalid syntax tree - expected NAME node as first child of CALL node\");\n      }\n      child = child.getNext();\n      while (child != null) {\n        findCalledFunctions(child, changed);\n        child = child.getNext();\n      }\n    } else {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..ac2e520a 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,28 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(changed);\n     // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());\n+      } else {\n+        // The first child of a CALL node should be NAME\n+        throw new IllegalArgumentException(\"Invalid syntax tree - expected NAME node as first child of CALL node\");\n+      }\n+      child = child.getNext();\n+      while (child != null) {\n+        findCalledFunctions(child, changed);\n+        child = child.getNext();\n+      }\n+    } else {\n+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n       }\n     }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n-    }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "java.lang.IllegalArgumentException: Invalid syntax tree - expected NAME node as first child of CALL node",
    "test_result": "FAIL"
}