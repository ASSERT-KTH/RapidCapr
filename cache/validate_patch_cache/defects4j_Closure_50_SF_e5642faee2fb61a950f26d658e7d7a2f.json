{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n        return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (functionName == null || (arrayNode.getType() != Token.ARRAYLIT) || \n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // Investigating the join argument is more computationaly expensive than checking\n    // the length of the array. So, let's check if the array is empty first.\n    int arraySize = getListLength(arrayNode);\n    if (arraySize == 0) {\n      Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n      n.getParent().replaceChild(n, emptyStringNode);\n      return emptyStringNode;\n    }\n\n    String joinString = \",\";\n    if (right != null) {\n      joinString = NodeUtil.getStringValue(right);\n      if (joinString.length() > 1) {\n        // if the join string is more than one character, it will even be longer than\n        // re-joining the original array, so no folding is possible\n        return n;\n      }\n    }\n\n    Node prev = null;\n    StringBuilder sb = null;\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n\n    boolean canFoldArray = true;\n    int foldedSize = -1;  // to account for the separator at the beginning\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      if (sb != null && !NodeUtil.isImmutableValue(elem) && elem.getType() != Token.EMPTY) {\n        // we found a non-string Node after some strings - we cannot fold the array\n        canFoldArray = false;\n        break;\n      }\n\n      if (NodeUtil.isImmutableValue(elem)) {\n        String strValue = NodeUtil.getArrayElementStringValue(elem);\n        if (elem.getType() == Token.EMPTY) {\n          // We don't need to add anything to the folded array and we don't want to accumulate\n          // the current string in sb.\n          continue;\n        }\n\n        if (sb == null) {\n          sb = new StringBuilder(strValue.length());\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(strValue);\n      } else {\n        if (sb != null) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n          foldedSize += sb.length();\n          sb = null;\n        }\n        if (!NodeUtil.isExpressionResultUsed(elem)) {\n          // There is a reference to this node, so fold not possible\n          canFoldArray = false;\n          break;\n        }\n        int childCost = InlineCostEstimator.getCost(elem);\n        if (childCost == -1) {\n          // The child cost is dependent on its ancestors, and due to either recursively invoking\n          // inline functions, or removing casts, we are unable to determine its cost.\n          canFoldArray = false;\n          break;\n        }\n        foldedSize += childCost;\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n    }\n\n    if (!canFoldArray || sb != null) {\n      // cannot fold the array\n      return n;\n    }\n\n    // add the cost of separators\n    foldedSize += arrayFoldedChildren.size() - 1;\n    if (right != null) {\n      foldedSize += InlineCostEstimator.getCost(right);\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > originalSize) {\n        return n;\n    }\n\n    if (arrayFoldedChildren.size() == 1 && arraySize != 1) {\n      // collapsed to a single Node, remove the array reference\n      Node newNode = arrayFoldedChildren.get(0);\n      if (newNode.getType() != Token.STRING) {\n        newNode = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n), newNode);\n      }\n      n.getParent().replaceChild(n, newNode);\n    } else {\n      arrayNode.removeChildren();\n      for (Node newNode : arrayFoldedChildren) {\n        arrayNode.addChildToBack(newNode);\n      }\n      n.removeChild(callTarget);\n      n.putBooleanProp(Node.FREE_CALL, true);\n      reportCodeChange();\n    }\n\n    return n;\n  }\n\n  private static int getListLength(Node node) {\n    if (node.isEmpty()) {\n      return 0;\n    }\n\n    int length = 0;\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n      if (NodeUtil.isImmutableValue(child) && !NodeUtil.getArrayElementStringValue(child).isEmpty()) {\n        length++;\n      }\n    }\n\n    return length;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..a87415bc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -372,109 +372,139 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n         return n;\n-      }\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+    if (functionName == null || (arrayNode.getType() != Token.ARRAYLIT) || \n         !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    // Investigating the join argument is more computationaly expensive than checking\n+    // the length of the array. So, let's check if the array is empty first.\n+    int arraySize = getListLength(arrayNode);\n+    if (arraySize == 0) {\n+      Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n+      n.getParent().replaceChild(n, emptyStringNode);\n+      return emptyStringNode;\n+    }\n+\n+    String joinString = \",\";\n+    if (right != null) {\n+      joinString = NodeUtil.getStringValue(right);\n+      if (joinString.length() > 1) {\n+        // if the join string is more than one character, it will even be longer than\n+        // re-joining the original array, so no folding is possible\n+        return n;\n+      }\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n     Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+    StringBuilder sb = null;\n+    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+\n+    boolean canFoldArray = true;\n+    int foldedSize = -1;  // to account for the separator at the beginning\n+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n+      if (sb != null && !NodeUtil.isImmutableValue(elem) && elem.getType() != Token.EMPTY) {\n+        // we found a non-string Node after some strings - we cannot fold the array\n+        canFoldArray = false;\n+        break;\n+      }\n+\n+      if (NodeUtil.isImmutableValue(elem)) {\n+        String strValue = NodeUtil.getArrayElementStringValue(elem);\n+        if (elem.getType() == Token.EMPTY) {\n+          // We don't need to add anything to the folded array and we don't want to accumulate\n+          // the current string in sb.\n+          continue;\n+        }\n+\n         if (sb == null) {\n-          sb = new StringBuilder();\n+          sb = new StringBuilder(strValue.length());\n         } else {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        sb.append(strValue);\n       } else {\n         if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n+          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n+          foldedSize += sb.length();\n           sb = null;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n+        if (!NodeUtil.isExpressionResultUsed(elem)) {\n+          // There is a reference to this node, so fold not possible\n+          canFoldArray = false;\n+          break;\n+        }\n+        int childCost = InlineCostEstimator.getCost(elem);\n+        if (childCost == -1) {\n+          // The child cost is dependent on its ancestors, and due to either recursively invoking\n+          // inline functions, or removing casts, we are unable to determine its cost.\n+          canFoldArray = false;\n+          break;\n+        }\n+        foldedSize += childCost;\n         arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n-      elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (!canFoldArray || sb != null) {\n+      // cannot fold the array\n+      return n;\n     }\n-    // one for each comma.\n+\n+    // add the cost of separators\n     foldedSize += arrayFoldedChildren.size() - 1;\n+    if (right != null) {\n+      foldedSize += InlineCostEstimator.getCost(right);\n+    }\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    if (foldedSize > originalSize) {\n+        return n;\n+    }\n+\n+    if (arrayFoldedChildren.size() == 1 && arraySize != 1) {\n+      // collapsed to a single Node, remove the array reference\n+      Node newNode = arrayFoldedChildren.get(0);\n+      if (newNode.getType() != Token.STRING) {\n+        newNode = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n), newNode);\n+      }\n+      n.getParent().replaceChild(n, newNode);\n+    } else {\n+      arrayNode.removeChildren();\n+      for (Node newNode : arrayFoldedChildren) {\n+        arrayNode.addChildToBack(newNode);\n+      }\n+      n.removeChild(callTarget);\n+      n.putBooleanProp(Node.FREE_CALL, true);\n+      reportCodeChange();\n     }\n \n     return n;\n   }\n \n+  private static int getListLength(Node node) {\n+    if (node.isEmpty()) {\n+      return 0;\n+    }\n+\n+    int length = 0;\n+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+      if (NodeUtil.isImmutableValue(child) && !NodeUtil.getArrayElementStringValue(child).isEmpty()) {\n+        length++;\n+      }\n+    }\n+\n+    return length;\n+  }\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +672,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}