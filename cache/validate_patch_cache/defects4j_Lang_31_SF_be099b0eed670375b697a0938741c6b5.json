{
    "patch": "public static boolean containsAny(final char[] str, final char[] searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return false;\n    }\n    for (int i = 0; i < str.length; i++) {\n        final int high = Character.codePointAt(str, i);\n        if (high < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            for (final char searchChar : searchChars) {\n                if (searchChar == str[i]) {\n                    return true;\n                }\n            }\n        } else if (i < str.length - 1) {\n            final int low = Character.codePointAt(str, i+1);\n            final int codepoint = Character.toCodePoint((char)high, (char)low);\n            for (final char searchChar : searchChars) {\n                if (Character.charCount(codepoint) == 2 && searchChar == str[i] && searchChar == str[i+1]) {\n                    return true;\n                } else if (searchChar == (char)codepoint) {\n                    return true;\n                }\n            }\n            i++;\n        }\n    }\n    return false;\n}\n\npublic static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}\n\npublic static boolean isEmpty(final char[] array) {\n    return array == null || array.length == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..398b8424 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final char[] str, final char[] searchChars) {\n+    if (isEmpty(str) || isEmpty(searchChars)) {\n+        return false;\n+    }\n+    for (int i = 0; i < str.length; i++) {\n+        final int high = Character.codePointAt(str, i);\n+        if (high < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+            for (final char searchChar : searchChars) {\n+                if (searchChar == str[i]) {\n+                    return true;\n+                }\n+            }\n+        } else if (i < str.length - 1) {\n+            final int low = Character.codePointAt(str, i+1);\n+            final int codepoint = Character.toCodePoint((char)high, (char)low);\n+            for (final char searchChar : searchChars) {\n+                if (Character.charCount(codepoint) == 2 && searchChar == str[i] && searchChar == str[i+1]) {\n+                    return true;\n+                } else if (searchChar == (char)codepoint) {\n+                    return true;\n+                }\n+            }\n+            i++;\n+        }\n+    }\n+    return false;\n+}\n+\n+public static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n+\n+public static boolean isEmpty(final char[] array) {\n+    return array == null || array.length == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}