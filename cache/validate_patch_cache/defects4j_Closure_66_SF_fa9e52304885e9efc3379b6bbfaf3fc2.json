{
    "patch": "import org.json.JSONObject;\nimport java.util.Iterator;\n\npublic class MyUtils {\n    public static double getTypedPercent(JSONObject obj) {\n        double totalCount = obj.length();\n        double typedCount = 0;\n        \n        Iterator<String> keys = obj.keys();\n        while (keys.hasNext()) {\n            String key = keys.next();\n            boolean isTyped = obj.optBoolean(key, false);\n            if (isTyped) {\n                typedCount++;\n            }\n        }\n        \n        double result = (typedCount / totalCount) * 100.0;\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f02ef0f5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONObject;\n+import java.util.Iterator;\n+\n+public class MyUtils {\n+    public static double getTypedPercent(JSONObject obj) {\n+        double totalCount = obj.length();\n+        double typedCount = 0;\n+        \n+        Iterator<String> keys = obj.keys();\n+        while (keys.hasNext()) {\n+            String key = keys.next();\n+            boolean isTyped = obj.optBoolean(key, false);\n+            if (isTyped) {\n+                typedCount++;\n+            }\n+        }\n+        \n+        double result = (typedCount / totalCount) * 100.0;\n+        return result;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}