{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) { // changed from \"compare(reflected, expanded) <= 0\"\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = contractAndShrink(original, comparator);\n                }\n                return;\n\n            }\n\n            // compute the contracted simplex\n            simplex = contractAndShrink(original, comparator);\n            if (comparator.compare(simplex[0], best) >= 0) {\n                // check convergence\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..4cea7f9e9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -76,26 +76,24 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) { // changed from \"compare(reflected, expanded) <= 0\"\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = contractAndShrink(original, comparator);\n                 }\n-\n                 return;\n \n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            simplex = contractAndShrink(original, comparator);\n+            if (comparator.compare(simplex[0], best) >= 0) {\n+                // check convergence\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}