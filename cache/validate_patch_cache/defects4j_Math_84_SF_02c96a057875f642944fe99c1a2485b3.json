{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        final boolean reflectedIsBetter = comparator.compare(reflected, best) < 0;\n        if (reflectedIsBetter) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n            final boolean expandedIsBetter = comparator.compare(expanded, reflected) < 0;\n            if (expandedIsBetter) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex = evaluateNewSimplex(original, rho, gamma, comparator);\n            }\n        } else {\n            final boolean reflectedIsWorseThanSecondWorst = comparator.compare(reflected, original[original.length - 1]) > 0;\n            if (reflectedIsWorseThanSecondWorst) {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                final boolean contractedIsBetter = comparator.compare(contracted, best) < 0;\n                if (contractedIsBetter) {\n                    simplex = contracted;\n                } else {\n                    simplex = contractShrink(original, comparator);\n                }\n            } else {\n                simplex = evaluateNewSimplex(original, rho, comparator);\n            }\n        }\n\n        // check convergence\n        final RealPointValuePair current = simplex[0];\n        final double[] x = current.getPoint();\n        final double fx = current.getValue();\n        boolean stop = true;\n        for (int i = 0; i < simplex.length; ++i) {\n            final double[] xi = simplex[i].getPoint();\n            final double fxi = simplex[i].getValue();\n            final double[] distance = new double[x.length];\n            for (int j = 0; j < distance.length; ++j) {\n                final double d = xi[j] - x[j];\n                distance[j] = d * d;\n            }\n            stop &= Math.sqrt(sum(distance)) < getRelativeThreshold() * (Math.sqrt(sum(square(x))) + getAbsoluteThreshold());\n            stop &= Math.abs(fxi - fx) < getFunctionValueAccuracy();\n        }\n        if (stop) {\n            return;\n        }\n\n    }\n}\n\nprotected RealPointValuePair[] contractShrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n    final int dimension = best.getPoint().length;\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    contractedSimplex[0] = best;\n    for (int i = 1; i < contractedSimplex.length; ++i) {\n        final double[] contractedPoint = new double[dimension];\n        final double[] originalPoint = original[i].getPoint();\n        for (int j = 0; j < dimension; ++j) {\n            contractedPoint[j] = best.getPoint()[j] + psi * (originalPoint[j] - best.getPoint()[j]);\n        }\n        final double contractedValue = computeObjectiveValue(contractedPoint);\n        contractedSimplex[i] = new RealPointValuePair(contractedPoint, contractedValue);\n    }\n    Arrays.sort(contractedSimplex, comparator);\n    return contractedSimplex;\n}\n\nprotected double sum(double[] values) {\n    double sum = 0;\n    for (double value : values) {\n        sum += value;\n    }\n    return sum;\n}\n\nprotected double[] square(double[] values) {\n    final double[] squareValues = new double[values.length];\n    for (int i = 0; i < values.length; ++i) {\n        squareValues[i] = values[i] * values[i];\n    }\n    return squareValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..090333686 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,101 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        final boolean reflectedIsBetter = comparator.compare(reflected, best) < 0;\n+        if (reflectedIsBetter) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+            final boolean expandedIsBetter = comparator.compare(expanded, reflected) < 0;\n+            if (expandedIsBetter) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = evaluateNewSimplex(original, rho, gamma, comparator);\n+            }\n+        } else {\n+            final boolean reflectedIsWorseThanSecondWorst = comparator.compare(reflected, original[original.length - 1]) > 0;\n+            if (reflectedIsWorseThanSecondWorst) {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                final boolean contractedIsBetter = comparator.compare(contracted, best) < 0;\n+                if (contractedIsBetter) {\n+                    simplex = contracted;\n+                } else {\n+                    simplex = contractShrink(original, comparator);\n                 }\n-\n-                return;\n-\n+            } else {\n+                simplex = evaluateNewSimplex(original, rho, comparator);\n             }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        // check convergence\n+        final RealPointValuePair current = simplex[0];\n+        final double[] x = current.getPoint();\n+        final double fx = current.getValue();\n+        boolean stop = true;\n+        for (int i = 0; i < simplex.length; ++i) {\n+            final double[] xi = simplex[i].getPoint();\n+            final double fxi = simplex[i].getValue();\n+            final double[] distance = new double[x.length];\n+            for (int j = 0; j < distance.length; ++j) {\n+                final double d = xi[j] - x[j];\n+                distance[j] = d * d;\n             }\n+            stop &= Math.sqrt(sum(distance)) < getRelativeThreshold() * (Math.sqrt(sum(square(x))) + getAbsoluteThreshold());\n+            stop &= Math.abs(fxi - fx) < getFunctionValueAccuracy();\n+        }\n+        if (stop) {\n+            return;\n+        }\n \n+    }\n+}\n+\n+protected RealPointValuePair[] contractShrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+    final int dimension = best.getPoint().length;\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    contractedSimplex[0] = best;\n+    for (int i = 1; i < contractedSimplex.length; ++i) {\n+        final double[] contractedPoint = new double[dimension];\n+        final double[] originalPoint = original[i].getPoint();\n+        for (int j = 0; j < dimension; ++j) {\n+            contractedPoint[j] = best.getPoint()[j] + psi * (originalPoint[j] - best.getPoint()[j]);\n         }\n+        final double contractedValue = computeObjectiveValue(contractedPoint);\n+        contractedSimplex[i] = new RealPointValuePair(contractedPoint, contractedValue);\n+    }\n+    Arrays.sort(contractedSimplex, comparator);\n+    return contractedSimplex;\n+}\n \n+protected double sum(double[] values) {\n+    double sum = 0;\n+    for (double value : values) {\n+        sum += value;\n     }\n+    return sum;\n+}\n+\n+protected double[] square(double[] values) {\n+    final double[] squareValues = new double[values.length];\n+    for (int i = 0; i < values.length; ++i) {\n+        squareValues[i] = values[i] * values[i];\n+    }\n+    return squareValues;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}