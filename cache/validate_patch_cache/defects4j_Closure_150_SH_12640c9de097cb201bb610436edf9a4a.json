{
    "patch": "    if (n.getType() == Token.FUNCTION) {\n      if (parent.getType() == Token.NAME) {\n        return;\n      } else if (NodeUtil.isFunctionExpression(n) && parent.getType() == Token.EXPR_RESULT) {\n        // Function expressions in expression statements are executed immediately e.g.\n        // (function() {return 0})();. Here you cannot reference the function by its name.\n        if (t.getScopeRoot() == parent) {\n          varBeforeFunction(t, parent, n);\n        }\n      } else if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isExpressionOfNew(n)) {\n        defineDeclaredFunction(n, parent);\n      }\n    } else if (n.getType() == Token.VAR) {\n      defineVar(n, parent);\n    } else if (n.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n    } else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n      handleFunctionInputs(parent);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..75848f3e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,25 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    if (n.getType() == Token.FUNCTION) {\n+      if (parent.getType() == Token.NAME) {\n+        return;\n+      } else if (NodeUtil.isFunctionExpression(n) && parent.getType() == Token.EXPR_RESULT) {\n+        // Function expressions in expression statements are executed immediately e.g.\n+        // (function() {return 0})();. Here you cannot reference the function by its name.\n+        if (t.getScopeRoot() == parent) {\n+          varBeforeFunction(t, parent, n);\n+        }\n+      } else if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isExpressionOfNew(n)) {\n+        defineDeclaredFunction(n, parent);\n       }\n+    } else if (n.getType() == Token.VAR) {\n+      defineVar(n, parent);\n+    } else if (n.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+    } else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      handleFunctionInputs(parent);\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}