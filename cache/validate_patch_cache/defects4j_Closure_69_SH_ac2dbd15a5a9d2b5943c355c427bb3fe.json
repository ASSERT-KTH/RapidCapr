{
    "patch": " if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSDocInfo nJSDoc = NodeUtil.getBestJSDocInfo(n);\n      boolean callback = isCallback(n, nJSDoc, childType, functionType);\n      if (n.isNew() && functionType.isConstructor() &&\n          functionType.getTypeOfThis() == null &&\n          nJSDoc != null && nJSDoc.isConstructor() &&\n          nJSDoc.getImplementedInterfaces().isEmpty() &&\n          !functionType.isInterface() &&\n          !callback) {\n        report(t, n, WRONG_ARGUMENT_COUNT, childType.toString());\n      } else if (functionType.getTypeOfThis() != null &&\n          !NodeUtil.isGet(child.getParent())) {\n        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..457c67ee 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSDocInfo nJSDoc = NodeUtil.getBestJSDocInfo(n);\n+      boolean callback = isCallback(n, nJSDoc, childType, functionType);\n+      if (n.isNew() && functionType.isConstructor() &&\n+          functionType.getTypeOfThis() == null &&\n+          nJSDoc != null && nJSDoc.isConstructor() &&\n+          nJSDoc.getImplementedInterfaces().isEmpty() &&\n+          !functionType.isInterface() &&\n+          !callback) {\n+        report(t, n, WRONG_ARGUMENT_COUNT, childType.toString());\n+      } else if (functionType.getTypeOfThis() != null &&\n+          !NodeUtil.isGet(child.getParent())) {\n+        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}