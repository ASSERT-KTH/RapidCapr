{
    "patch": "                if (offsetAdjusted == offsetLocal) {\n                    return offsetAdjusted;\n                }\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal == nextAdjusted) {\n                    return offsetAdjusted;\n                } else {\n                    if (offsetLocal < offsetAdjusted) {\n                        long diff = nextLocal - instantLocal;\n                        if (diff >= TimeUnit.HOURS.toMillis(24)) {\n                            return offsetLocal;\n                        }\n                        return offsetAdjusted;\n                    } else {\n                        long diff = instantLocal - nextAdjusted;\n                        if (diff >= TimeUnit.HOURS.toMillis(24)) {\n                            return offsetLocal;\n                        }\n                        return offsetAdjusted;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3c6a1a91 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetAdjusted == offsetLocal) {\n+                    return offsetAdjusted;\n+                }\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal == nextAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n+                    if (offsetLocal < offsetAdjusted) {\n+                        long diff = nextLocal - instantLocal;\n+                        if (diff >= TimeUnit.HOURS.toMillis(24)) {\n+                            return offsetLocal;\n+                        }\n+                        return offsetAdjusted;\n+                    } else {\n+                        long diff = instantLocal - nextAdjusted;\n+                        if (diff >= TimeUnit.HOURS.toMillis(24)) {\n+                            return offsetLocal;\n+                        }\n+                        return offsetAdjusted;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: package TimeUnit does not exist",
    "test_result": "ERROR"
}