{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    long millis = getMillis();\n\n    DurationFieldType[] fieldTypes = type.getFieldTypes();\n    for (DurationFieldType fieldType : fieldTypes) {\n        if (!isSupported(fieldType)) {\n            throw new UnsupportedOperationException(\"Field is not supported: \" + fieldType);\n        }\n        switch (fieldType.getName()) {\n            case \"years\":\n                months += years * 12;\n                years = 0;\n                break;\n            case \"months\":\n                months += years * 12;\n                months %= 12;\n                years = 0;\n                break;\n            case \"weeks\":\n                days += weeks * 7;\n                weeks = 0;\n                break;\n            case \"days\":\n                millis += days * DateTimeConstants.MILLIS_PER_DAY;\n                days = 0;\n                break;\n            case \"hours\":\n                millis += hours * DateTimeConstants.MILLIS_PER_HOUR;\n                hours = 0;\n                break;\n            case \"minutes\":\n                millis += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n                minutes = 0;\n                break;\n            case \"seconds\":\n                millis += seconds * DateTimeConstants.MILLIS_PER_SECOND;\n                seconds = 0;\n                break;\n            default:\n                throw new UnsupportedOperationException(\"Unsupported field type: \" + fieldType.getName());\n        }\n    }\n\n    if (type.isSupported(DurationFieldType.years())) {\n        years = months / 12;\n        months %= 12;\n    }\n\n    Period result = new Period(millis, months, weeks, days, years, type, ISOChronology.getInstanceUTC());\n    if (type.isSupported(DurationFieldType.hours())) {\n        result = result.withHours(hours);\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        result = result.withMinutes(minutes);\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        result = result.withSeconds(seconds);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..de5af369 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,73 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    long millis = getMillis();\n+\n+    DurationFieldType[] fieldTypes = type.getFieldTypes();\n+    for (DurationFieldType fieldType : fieldTypes) {\n+        if (!isSupported(fieldType)) {\n+            throw new UnsupportedOperationException(\"Field is not supported: \" + fieldType);\n         }\n-        return result;\n+        switch (fieldType.getName()) {\n+            case \"years\":\n+                months += years * 12;\n+                years = 0;\n+                break;\n+            case \"months\":\n+                months += years * 12;\n+                months %= 12;\n+                years = 0;\n+                break;\n+            case \"weeks\":\n+                days += weeks * 7;\n+                weeks = 0;\n+                break;\n+            case \"days\":\n+                millis += days * DateTimeConstants.MILLIS_PER_DAY;\n+                days = 0;\n+                break;\n+            case \"hours\":\n+                millis += hours * DateTimeConstants.MILLIS_PER_HOUR;\n+                hours = 0;\n+                break;\n+            case \"minutes\":\n+                millis += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+                minutes = 0;\n+                break;\n+            case \"seconds\":\n+                millis += seconds * DateTimeConstants.MILLIS_PER_SECOND;\n+                seconds = 0;\n+                break;\n+            default:\n+                throw new UnsupportedOperationException(\"Unsupported field type: \" + fieldType.getName());\n+        }\n+    }\n+\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years = months / 12;\n+        months %= 12;\n+    }\n+\n+    Period result = new Period(millis, months, weeks, days, years, type, ISOChronology.getInstanceUTC());\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        result = result.withHours(hours);\n+    }\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        result = result.withMinutes(minutes);\n     }\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        result = result.withSeconds(seconds);\n+    }\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}