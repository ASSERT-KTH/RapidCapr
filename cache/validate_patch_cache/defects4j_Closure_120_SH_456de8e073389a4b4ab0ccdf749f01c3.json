{
    "patch": "boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n        return false;\n    }\n    BasicBlock containingBlock = ref.getBasicBlock();\n    if (!containingBlock.isFunction && !containingBlock.isGlobalBlock()) {\n        return false;\n    }\n    if (containingBlock.isFunction) {\n        for (BasicBlock block = containingBlock.getParent(); block != null; block = block.getParent()) {\n            if (block.isLoop) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d535bfbf 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+        return false;\n+    }\n+    BasicBlock containingBlock = ref.getBasicBlock();\n+    if (!containingBlock.isFunction && !containingBlock.isGlobalBlock()) {\n+        return false;\n+    }\n+    if (containingBlock.isFunction) {\n+        for (BasicBlock block = containingBlock.getParent(); block != null; block = block.getParent()) {\n+            if (block.isLoop) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}