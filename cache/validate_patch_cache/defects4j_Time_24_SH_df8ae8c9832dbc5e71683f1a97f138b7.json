{
    "patch": "        int i;\n        try {\n            for (i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalArgumentException e) {\n            String failedFieldDescription = savedFields[i].iField.getType().getName();\n            throw new IllegalFieldValueException(\n                    failedFieldDescription,\n                    savedFields[i].iValue.getAsString(),\n                    e.getMessage()\n            );\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e3d7c73d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,19 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        int i;\n+        try {\n+            for (i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalArgumentException e) {\n+            String failedFieldDescription = savedFields[i].iField.getType().getName();\n+            throw new IllegalFieldValueException(\n+                    failedFieldDescription,\n+                    savedFields[i].iValue.getAsString(),\n+                    e.getMessage()\n+            );\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: int cannot be dereferenced",
    "test_result": "ERROR"
}