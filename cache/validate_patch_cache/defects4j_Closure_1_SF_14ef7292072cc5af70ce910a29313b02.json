{
    "patch": "    Node fnRootNode = fnScope.getRootNode();\n    Preconditions.checkState(fnRootNode.isFunction());\n    // Parameters object literal setters can not be removed.\n    if (NodeUtil.isGetOrSetKey(fnRootNode.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(fnRootNode);\n    // Check if there are any callers to this function.\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnRootNode);\n\n    // If there are no callers, we can strip unreferenced arguments\n    // off the end of the function declaration.\n    if (!modifyCallers) {\n      // Remove unreferenced arguments from the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        // For each argument to the function declaration, check if it is unreferenced.\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          // If the argument is unreferenced, remove it.\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      // If there are any callers, optimize the function call sites.\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..59eca80e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,34 +366,27 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n+    Node fnRootNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnRootNode.isFunction());\n+    // Parameters object literal setters can not be removed.\n+    if (NodeUtil.isGetOrSetKey(fnRootNode.getParent())) {\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+    Node argList = getFunctionArgList(fnRootNode);\n+    // Check if there are any callers to this function.\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnRootNode);\n+\n+    // If there are no callers, we can strip unreferenced arguments\n+    // off the end of the function declaration.\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n+      // Remove unreferenced arguments from the end of the function declaration.\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n+        // For each argument to the function declaration, check if it is unreferenced.\n         Var var = fnScope.getVar(lastArg.getString());\n         if (!referenced.contains(var)) {\n+          // If the argument is unreferenced, remove it.\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n         } else {\n@@ -401,9 +394,9 @@ class RemoveUnusedVars\n         }\n       }\n     } else {\n+      // If there are any callers, optimize the function call sites.\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n \n \n   /**",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}