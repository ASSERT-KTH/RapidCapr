{
    "patch": "      int count = 0;\n      Reference found = null;\n      for (Reference ref : references) {\n        if (ref.isAssignmentToName()) {\n          found = ref;\n          count++;\n        }\n      }\n      return count == 1 ? found : null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..dc0646b3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int count = 0;\n+      Reference found = null;\n+      for (Reference ref : references) {\n+        if (ref.isAssignmentToName()) {\n+          found = ref;\n+          count++;\n+        }\n+      }\n+      return count == 1 ? found : null;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}