{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if(!MatrixUtils.isSymmetric(m)) {\n        throw new NonSymmetricMatrixException();\n    }\n    if(!MatrixUtils.isPositiveDefinite(m)) {\n        // add small positive offset to make matrix positive definite\n        final double offset = 1e-8;\n        m = MatrixUtils.createRealIdentityMatrix(m.getRowDimension()).scalarMultiply(offset).add(m);\n    }\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..679600e8f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if(!MatrixUtils.isSymmetric(m)) {\n+        throw new NonSymmetricMatrixException();\n     }\n+    if(!MatrixUtils.isPositiveDefinite(m)) {\n+        // add small positive offset to make matrix positive definite\n+        final double offset = 1e-8;\n+        m = MatrixUtils.createRealIdentityMatrix(m.getRowDimension()).scalarMultiply(offset).add(m);\n+    }\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "error: method isSymmetric in class MatrixUtils cannot be applied to given types;",
    "test_result": "ERROR"
}