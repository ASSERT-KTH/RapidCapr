{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      Node parent = n.getParent();\n      if (parent != null) {\n        if (parent.isFunction()) {\n          // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n          if (n.getFirstChild().getType() == Token.EXPR_RESULT\n              && n.getFirstChild().hasOneChild()\n              && n.getFirstChild().getFirstChild().getType() == Token.STRING) {\n            return false;\n          }\n        }\n        if (parent.getType() == Token.EXPR_VOID) {\n          // Do not fold EXPR_RESULT if parent is EXPR_VOID.\n          return false;\n        }\n      }\n      if (n.hasOneChild()) {\n        Node onlyChild = n.getFirstChild();\n        if (onlyChild.getType() == Token.EXPR_RESULT) {\n          Node maybeExpr = onlyChild.getFirstChild();\n\n          // try to flatten any nested blocks\n          while (maybeExpr.getType() == Token.BLOCK && maybeExpr.hasOneChild()) {\n            maybeExpr = maybeExpr.getFirstChild();\n          }\n\n          if (NodeUtil.isGet(maybeExpr)) {\n            // considered unsafe to inline getters\n            return false;\n          }\n\n          if (maybeExpr.getType() == Token.RETURN) {\n            Node maybeResult = maybeExpr.getFirstChild();\n            return (NodeUtil.isExpressionNode(maybeResult) && maybeResult.hasOneChild());\n          }\n\n          if (NodeUtil.isExpressionNode(maybeExpr)) {\n            // A simple expression of some kind\n            if (parent != null) {\n              switch (parent.getType()) {\n              case Token.IF:\n              case Token.WHILE:\n              case Token.DO:\n                // Consider the enclosing code to be a branching statement\n                // and inline if the true or false side is still just an\n                // expression.\n                if (n == parent.getFirstChild() && n.getNext() == parent.getLastChild()) {\n                  return true;\n                }\n                break;\n              case Token.EXPR_RESULT:\n                return true;\n              case Token.CONST:\n              case Token.VAR:\n                if (n == parent.getFirstChild()) {\n                  return true;\n                }\n                break;\n              case Token.FOR:\n                if (parent.getFirstChild() == n && !parent.hasMoreThanOneChild()) {\n                  if (parent.getChildAtIndex(1).getType() == Token.EXPR_RESULT) {\n                    return false;\n                  }\n                  return true;\n                }\n                break;\n              case Token.COMMA:\n                // in a list of expressions, only inline if all previous\n                // expressions are also inlinable (otherwise the commas should\n                // be left in place).\n                for (Node previousNode : n.getAncestors()) {\n                  if (previousNode.getType() == Token.COMMA) {\n                    continue;\n                  }\n                  if (previousNode.getNext() != n) {\n                    break;\n                  }\n                  if (previousNode.getType() != Token.EXPR_RESULT\n                      || !isFoldableExpressBlock(previousNode)) {\n                    return false;\n                  }\n                }\n                return true;\n              }\n            }\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8d468c1b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -518,22 +518,95 @@ public class PeepholeSubstituteAlternateSyntax\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        if (parent.isFunction()) {\n+          // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n+          if (n.getFirstChild().getType() == Token.EXPR_RESULT\n+              && n.getFirstChild().hasOneChild()\n+              && n.getFirstChild().getFirstChild().getType() == Token.STRING) {\n+            return false;\n+          }\n+        }\n+        if (parent.getType() == Token.EXPR_VOID) {\n+          // Do not fold EXPR_RESULT if parent is EXPR_VOID.\n+          return false;\n+        }\n+      }\n       if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        Node onlyChild = n.getFirstChild();\n+        if (onlyChild.getType() == Token.EXPR_RESULT) {\n+          Node maybeExpr = onlyChild.getFirstChild();\n+\n+          // try to flatten any nested blocks\n+          while (maybeExpr.getType() == Token.BLOCK && maybeExpr.hasOneChild()) {\n+            maybeExpr = maybeExpr.getFirstChild();\n+          }\n+\n+          if (NodeUtil.isGet(maybeExpr)) {\n+            // considered unsafe to inline getters\n+            return false;\n+          }\n+\n+          if (maybeExpr.getType() == Token.RETURN) {\n+            Node maybeResult = maybeExpr.getFirstChild();\n+            return (NodeUtil.isExpressionNode(maybeResult) && maybeResult.hasOneChild());\n+          }\n+\n+          if (NodeUtil.isExpressionNode(maybeExpr)) {\n+            // A simple expression of some kind\n+            if (parent != null) {\n+              switch (parent.getType()) {\n+              case Token.IF:\n+              case Token.WHILE:\n+              case Token.DO:\n+                // Consider the enclosing code to be a branching statement\n+                // and inline if the true or false side is still just an\n+                // expression.\n+                if (n == parent.getFirstChild() && n.getNext() == parent.getLastChild()) {\n+                  return true;\n+                }\n+                break;\n+              case Token.EXPR_RESULT:\n+                return true;\n+              case Token.CONST:\n+              case Token.VAR:\n+                if (n == parent.getFirstChild()) {\n+                  return true;\n+                }\n+                break;\n+              case Token.FOR:\n+                if (parent.getFirstChild() == n && !parent.hasMoreThanOneChild()) {\n+                  if (parent.getChildAtIndex(1).getType() == Token.EXPR_RESULT) {\n+                    return false;\n+                  }\n+                  return true;\n+                }\n+                break;\n+              case Token.COMMA:\n+                // in a list of expressions, only inline if all previous\n+                // expressions are also inlinable (otherwise the commas should\n+                // be left in place).\n+                for (Node previousNode : n.getAncestors()) {\n+                  if (previousNode.getType() == Token.COMMA) {\n+                    continue;\n+                  }\n+                  if (previousNode.getNext() != n) {\n+                    break;\n+                  }\n+                  if (previousNode.getType() != Token.EXPR_RESULT\n+                      || !isFoldableExpressBlock(previousNode)) {\n+                    return false;\n+                  }\n+                }\n+                return true;\n+              }\n+            }\n+            return true;\n+          }\n+        }\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}