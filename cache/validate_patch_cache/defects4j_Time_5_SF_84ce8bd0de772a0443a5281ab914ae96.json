{
    "patch": "        Period normalizedPeriod = normalizedStandard(type, ISOChronology.getInstanceUTC());\n        int weeks = normalizedPeriod.getWeeks();\n        int days = normalizedPeriod.getDays();\n        int hours = normalizedPeriod.getHours();\n        int minutes = normalizedPeriod.getMinutes();\n        int seconds = normalizedPeriod.getSeconds();\n        int millis = normalizedPeriod.getMillis();\n        Period result = new Period(weeks, days, hours, minutes, seconds, millis, type);\n        if (normalizedPeriod.getYears() != 0 || normalizedPeriod.getMonths() != 0) {\n            result = result.withYears(normalizedPeriod.getYears()).withMonths(normalizedPeriod.getMonths());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f19c2f71 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,15 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+        Period normalizedPeriod = normalizedStandard(type, ISOChronology.getInstanceUTC());\n+        int weeks = normalizedPeriod.getWeeks();\n+        int days = normalizedPeriod.getDays();\n+        int hours = normalizedPeriod.getHours();\n+        int minutes = normalizedPeriod.getMinutes();\n+        int seconds = normalizedPeriod.getSeconds();\n+        int millis = normalizedPeriod.getMillis();\n+        Period result = new Period(weeks, days, hours, minutes, seconds, millis, type);\n+        if (normalizedPeriod.getYears() != 0 || normalizedPeriod.getMonths() != 0) {\n+            result = result.withYears(normalizedPeriod.getYears()).withMonths(normalizedPeriod.getMonths());\n \n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}