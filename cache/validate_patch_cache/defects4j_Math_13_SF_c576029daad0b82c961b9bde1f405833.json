{
    "patch": "private static final double TOLERANCE = 1e-6;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec;\n    try {\n        dec = new EigenDecomposition(m);\n    } catch (Exception e) {\n        System.gc();\n        final long maxMemory = Runtime.getRuntime().maxMemory();\n        final long newMemory = (long) (maxMemory * 1.5);\n        final boolean success = newMemory < Integer.MAX_VALUE;\n        if (success) {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                    dec = new EigenDecomposition(m, newMemory);\n                    break;\n                } catch (Exception ex) {\n                    System.gc();\n                }\n            }\n        } else {\n            throw e;\n        }\n    }\n\n    final RealMatrix sqrtD;\n    try {\n        sqrtD = dec.getSquareRoot();\n    } catch (Exception e) {\n        System.gc();\n        sqrtD = iterativeSquareRoot(m);\n    }\n\n    final RealMatrix v = dec.getV();\n    return (v.multiply(sqrtD)).multiply(v.transpose());\n}\n\nprivate RealMatrix iterativeSquareRoot(RealMatrix m) {\n    final int maxIterations = 100;\n    RealMatrix x = m;\n    RealMatrix y = m.add(m.transpose()).scalarMultiply(0.5);\n    for (int i = 0; i < maxIterations; i++) {\n        final RealMatrix xInverse = new LUDecomposition(x).getSolver().getInverse();\n        x = x.add(y).multiply(0.5);\n        y = y.multiply(y).subtract(m).multiply(-0.25).multiply(xInverse);\n        final double error = x.subtract(m).getFrobeniusNorm();\n        if (error < TOLERANCE) {\n            break;\n        }\n    }\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d7363ed1e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,57 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static final double TOLERANCE = 1e-6;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec;\n+    try {\n+        dec = new EigenDecomposition(m);\n+    } catch (Exception e) {\n+        System.gc();\n+        final long maxMemory = Runtime.getRuntime().maxMemory();\n+        final long newMemory = (long) (maxMemory * 1.5);\n+        final boolean success = newMemory < Integer.MAX_VALUE;\n+        if (success) {\n+            for (int i = 0; i < 10; i++) {\n+                try {\n+                    Thread.sleep(100);\n+                    dec = new EigenDecomposition(m, newMemory);\n+                    break;\n+                } catch (Exception ex) {\n+                    System.gc();\n+                }\n+            }\n+        } else {\n+            throw e;\n+        }\n+    }\n+\n+    final RealMatrix sqrtD;\n+    try {\n+        sqrtD = dec.getSquareRoot();\n+    } catch (Exception e) {\n+        System.gc();\n+        sqrtD = iterativeSquareRoot(m);\n+    }\n+\n+    final RealMatrix v = dec.getV();\n+    return (v.multiply(sqrtD)).multiply(v.transpose());\n+}\n+\n+private RealMatrix iterativeSquareRoot(RealMatrix m) {\n+    final int maxIterations = 100;\n+    RealMatrix x = m;\n+    RealMatrix y = m.add(m.transpose()).scalarMultiply(0.5);\n+    for (int i = 0; i < maxIterations; i++) {\n+        final RealMatrix xInverse = new LUDecomposition(x).getSolver().getInverse();\n+        x = x.add(y).multiply(0.5);\n+        y = y.multiply(y).subtract(m).multiply(-0.25).multiply(xInverse);\n+        final double error = x.subtract(m).getFrobeniusNorm();\n+        if (error < TOLERANCE) {\n+            break;\n+        }\n     }\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}