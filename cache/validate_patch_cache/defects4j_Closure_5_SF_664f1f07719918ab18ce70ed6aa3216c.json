{
    "patch": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<String> validProperties = Sets.newHashSet();\n      for (Reference ref : refs) {\n        Node node = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore most indirect references, like x.y (but not x.y(),\n        // since the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n          // A call target may be using the object as a 'this' value.\n          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // Get a list of all properties and values for the object.\n          Map<String, Node> objProps = getObjectPropertyNames(node);\n\n          // Check if this is the only assignment or property reference to the object.\n          if (!NodeUtil.isAssignmentOp(gramps) && !NodeUtil.isExpressionNode(parent)) {\n            for (String propName : objProps.keySet()) {\n              if (propName.isEmpty()) {\n                return false;\n              }\n\n              Node propVal = objProps.get(propName);\n\n              // Check if the property value is self-referential, i.e., x = {a: x.b}.\n              for (Reference t : refs) {\n                if (t.getParent() == propVal.getParent()) {\n                  return false;\n                }\n              }\n\n              validProperties.add(propName);\n            }\n          } else {\n            String propName = parent.getLastChild().getString();\n            if (!validProperties.contains(propName)) {\n              if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n                validProperties.add(propName);\n              } else {\n                return false;\n              }\n            }\n          }\n\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(node)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Get a list of all properties and values for the object.\n        Map<String, Node> objProps = getObjectPropertyNames(val);\n        validProperties.clear();\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (String propName : objProps.keySet()) {\n          if (propName.isEmpty()) {\n            return false;\n          }\n\n          Node propVal = objProps.get(propName);\n\n          if (propVal.isGetterDef() || propVal.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          validProperties.add(propName);\n\n          // Check if the property value is self-referential, i.e., x = {a: x.b}.\n          for (Reference t : refs) {\n            if (t.getParent() == propVal.getParent()) {\n              return false;\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }\n\n    // A utility function that returns a map of all properties and their values for an object literal\n    // or object literal assignment.\n    private Map<String, Node> getObjectPropertyNames(Node node) {\n      Map<String, Node> props = new HashMap<String, Node>();\n      if (node.isObjectLit()) {\n        for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n          String propName = child.getString();\n          Node propVal = child.getFirstChild();\n          props.put(propName, propVal);\n        }\n      } else if (NodeUtil.isAssignmentOp(node)) {\n        Node assignTarget = NodeUtil.getBestLValue(node.getFirstChild());\n        if (assignTarget != null && assignTarget.isObjectLit()) {\n          for (Node child = assignTarget.getFirstChild(); child != null; child = child.getNext()) {\n            String propName = child.getString();\n            Node propVal = child.getNext();\n            props.put(propName, propVal);\n          }\n        }\n      }\n      return props;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..dc3ddabb 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -156,45 +156,55 @@ class InlineObjectLiterals implements CompilerPass {\n       boolean ret = false;\n       Set<String> validProperties = Sets.newHashSet();\n       for (Reference ref : refs) {\n-        Node name = ref.getNode();\n+        Node node = ref.getNode();\n         Node parent = ref.getParent();\n         Node gramps = ref.getGrandparent();\n \n         // Ignore most indirect references, like x.y (but not x.y(),\n         // since the function referenced by y might reference 'this').\n-        //\n         if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n           // A call target may be using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n+          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n             return false;\n           }\n \n-          // Deleting a property has different semantics from deleting\n-          // a variable, so deleted properties should not be inlined.\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          String propName = parent.getLastChild().getString();\n-          if (!validProperties.contains(propName)) {\n-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+          // Get a list of all properties and values for the object.\n+          Map<String, Node> objProps = getObjectPropertyNames(node);\n+\n+          // Check if this is the only assignment or property reference to the object.\n+          if (!NodeUtil.isAssignmentOp(gramps) && !NodeUtil.isExpressionNode(parent)) {\n+            for (String propName : objProps.keySet()) {\n+              if (propName.isEmpty()) {\n+                return false;\n+              }\n+\n+              Node propVal = objProps.get(propName);\n+\n+              // Check if the property value is self-referential, i.e., x = {a: x.b}.\n+              for (Reference t : refs) {\n+                if (t.getParent() == propVal.getParent()) {\n+                  return false;\n+                }\n+              }\n+\n               validProperties.add(propName);\n-            } else {\n-              return false;\n+            }\n+          } else {\n+            String propName = parent.getLastChild().getString();\n+            if (!validProperties.contains(propName)) {\n+              if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+                validProperties.add(propName);\n+              } else {\n+                return false;\n+              }\n             }\n           }\n+\n           continue;\n         }\n \n         // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n+        if (!isVarOrAssignExprLhs(node)) {\n            return false;\n         }\n \n@@ -209,41 +219,36 @@ class InlineObjectLiterals implements CompilerPass {\n           return false;\n         }\n \n+        // Get a list of all properties and values for the object.\n+        Map<String, Node> objProps = getObjectPropertyNames(val);\n+        validProperties.clear();\n+\n         // Make sure that the value is not self-referential. IOW,\n         // disallow things like x = {b: x.a}.\n         //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n         // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n+        for (String propName : objProps.keySet()) {\n+          if (propName.isEmpty()) {\n+            return false;\n+          }\n+\n+          Node propVal = objProps.get(propName);\n+\n+          if (propVal.isGetterDef() || propVal.isSetterDef()) {\n             // ES5 get/set not supported.\n             return false;\n           }\n \n-          validProperties.add(child.getString());\n+          validProperties.add(propName);\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n+          // Check if the property value is self-referential, i.e., x = {a: x.b}.\n           for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n+            if (t.getParent() == propVal.getParent()) {\n+              return false;\n             }\n           }\n         }\n \n-\n         // We have found an acceptable object literal assignment. As\n         // long as there are no other assignments that mess things up,\n         // we can inline.\n@@ -252,6 +257,29 @@ class InlineObjectLiterals implements CompilerPass {\n       return ret;\n     }\n \n+    // A utility function that returns a map of all properties and their values for an object literal\n+    // or object literal assignment.\n+    private Map<String, Node> getObjectPropertyNames(Node node) {\n+      Map<String, Node> props = new HashMap<String, Node>();\n+      if (node.isObjectLit()) {\n+        for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+          String propName = child.getString();\n+          Node propVal = child.getFirstChild();\n+          props.put(propName, propVal);\n+        }\n+      } else if (NodeUtil.isAssignmentOp(node)) {\n+        Node assignTarget = NodeUtil.getBestLValue(node.getFirstChild());\n+        if (assignTarget != null && assignTarget.isObjectLit()) {\n+          for (Node child = assignTarget.getFirstChild(); child != null; child = child.getNext()) {\n+            String propName = child.getString();\n+            Node propVal = child.getNext();\n+            props.put(propName, propVal);\n+          }\n+        }\n+      }\n+      return props;\n+    }\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}